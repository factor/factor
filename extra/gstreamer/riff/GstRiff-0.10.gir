<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.0"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="GLib" version="2.0"/>
  <include name="GModule" version="2.0"/>
  <include name="GObject" version="2.0"/>
  <include name="Gst" version="0.10"/>
  <include name="GstAudio" version="0.10"/>
  <include name="GstBase" version="0.10"/>
  <include name="GstInterfaces" version="0.10"/>
  <include name="GstTag" version="0.10"/>
  <include name="libxml2" version="2.0"/>
  <package name="gstreamer-0.10"/>
  <package name="gstreamer-audio-0.10"/>
  <package name="gstreamer-interfaces-0.10"/>
  <package name="gstreamer-tag-0.10"/>
  <c:include name="gst/riff/riff-ids.h"/>
  <c:include name="gst/riff/riff-media.h"/>
  <c:include name="gst/riff/riff-read.h"/>
  <namespace name="GstRiff"
             version="0.10"
             shared-library="libgstriff-0.10.so.0"
             c:prefix="Gst">
    <constant name="IBM_FORMAT_ADPCM" value="259">
      <type name="int"/>
    </constant>
    <constant name="IBM_FORMAT_ALAW" value="258">
      <type name="int"/>
    </constant>
    <constant name="IBM_FORMAT_MULAW" value="257">
      <type name="int"/>
    </constant>
    <constant name="IF_KEYFRAME" value="16">
      <type name="int"/>
    </constant>
    <constant name="IF_LIST" value="1">
      <type name="int"/>
    </constant>
    <constant name="IF_NO_TIME" value="256">
      <type name="int"/>
    </constant>
    <constant name="STRH_DISABLED" value="1">
      <type name="int"/>
    </constant>
    <constant name="STRH_VIDEOPALCHANGES" value="65536">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_A52" value="8192">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_AAC" value="255">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_AAC_AC" value="16707">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_AAC_pm" value="28781">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_ADPCM" value="2">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_ADPCM_IMA_DK3" value="98">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_ADPCM_IMA_DK4" value="97">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_ADPCM_IMA_WAV" value="105">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_ALAW" value="6">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_AMR_NB" value="87">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_AMR_WB" value="88">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_APTX" value="37">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_AUDIOFILE_AF10" value="38">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_AUDIOFILE_AF36" value="36">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_BTV_DIGITAL" value="1024">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_CANOPUS_ATRAC" value="99">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_CIRRUS" value="96">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_CONTROL_RES_CR10" value="55">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_CONTROL_RES_VQLPC" value="52">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_CREATIVE_ADPCM" value="512">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_CREATIVE_FASTSPEECH10" value="515">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_CREATIVE_FASTSPEECH8" value="514">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_CS2" value="608">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_CS_IMAADPCM" value="57">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_CU_CODEC" value="25">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_DF_G726" value="133">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_DF_GSM610" value="134">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_DIALOGIC_OKI_ADPCM" value="23">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_DIGIADPCM" value="54">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_DIGIFIX" value="22">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_DIGIREAL" value="53">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_DIGISTD" value="21">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_DIGITAL_G723" value="291">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_DOLBY_AC2" value="48">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_DOLBY_AC3_SPDIF" value="146">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_DSAT_DISPLAY" value="103">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_DSP_TRUESPEECH" value="34">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_DTS" value="8193">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_DVI_ADPCM" value="17">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_ECHOSC1" value="35">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_ECHOSC3" value="58">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_ESPCM" value="97">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_EXTENSIBLE" value="65534">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_FLAC" value="61868">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_FM_TOWNS_SND" value="768">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_G722_ADPCM" value="101">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_G723_ADPCM" value="20">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_G726ADPCM" value="320">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_G726_ADPCM" value="100">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_G728_CELP" value="65">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_G729A" value="131">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_GSM610" value="49">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_GSM_AMR_CBR" value="31265">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_GSM_AMR_VBR" value="31266">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_IBM_CVSD" value="5">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_IEEE_FLOAT" value="3">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_ILINK_VC" value="560">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_IMC" value="1025">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_IPI_HSX" value="592">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_IPI_RPELP" value="593">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_ISIAUDIO" value="136">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_ITU_G721_ADPCM" value="64">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_LH_CODEC" value="4352">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_LRC" value="40">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_LUCENT_G723" value="89">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_MALDEN_PHONYTALK" value="160">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_MEDIASONIC_G723" value="147">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_MEDIASPACE_ADPCM" value="18">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_MEDIAVISION_ADPCM" value="24">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_MPEGL12" value="80">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_MPEGL3" value="85">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_MSG723" value="66">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_MSN" value="50">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_MSRT24" value="130">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_MULAW" value="7">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_MVI_MVI2" value="132">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_NMS_VBXADPCM" value="56">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_NORRIS" value="5120">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_OKI_ADPCM" value="16">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_OLIADPCM" value="4097">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_OLICELP" value="4098">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_OLIGSM" value="4096">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_OLIOPR" value="4100">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_OLISBC" value="4099">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_ONLIVE" value="137">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_PAC" value="83">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_PACKED" value="153">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_PCM" value="1">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_PHILIPS_LPCBB" value="152">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_PROSODY_1612" value="39">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_PROSODY_8KBPS" value="148">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_QDESIGN_MUSIC" value="1104">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_QUALCOMM_HALFRATE" value="337">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_QUALCOMM_PUREVOICE" value="336">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_QUARTERDECK" value="544">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_RAW_SPORT" value="576">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_RHETOREX_ADPCM" value="256">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_ROCKWELL_ADPCM" value="59">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_ROCKWELL_DIGITALK" value="60">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_RT24" value="82">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_SANYO_LD_ADPCM" value="293">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_SBC24" value="145">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_SIERRA_ADPCM" value="19">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_SIPROLAB_ACELP4800" value="305">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_SIPROLAB_ACELP8V3" value="306">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_SIPROLAB_ACEPLNET" value="304">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_SIPROLAB_G729" value="307">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_SIPROLAB_G729A" value="308">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_SIPROLAB_KELVIN" value="309">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_SIREN" value="654">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_SOFTSOUND" value="128">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_SONARC" value="33">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_SONIC" value="8264">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_SONIC_LS" value="8264">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_SONY_ATRAC3" value="624">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_SOUNDSPACE_MUSICOMPRESS" value="5376">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_TPC" value="1665">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_TUBGSM" value="341">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_UHER_ADPCM" value="528">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_UNKNOWN" value="0">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_VIVO_G723" value="273">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_VIVO_SIREN" value="274">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_VME_VMPCM" value="1664">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_VORBIS1" value="26447">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_VORBIS1PLUS" value="26479">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_VORBIS2" value="26448">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_VORBIS2PLUS" value="26480">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_VORBIS3" value="26449">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_VORBIS3PLUS" value="26481">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_VOXWARE" value="98">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_VOXWARE_AC10" value="113">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_VOXWARE_AC16" value="114">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_VOXWARE_AC20" value="115">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_VOXWARE_AC8" value="112">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_VOXWARE_BYTE_ALIGNED" value="105">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_VOXWARE_METASOUND" value="117">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_VOXWARE_METAVOICE" value="116">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_VOXWARE_RT29HW" value="118">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_VOXWARE_TQ40" value="121">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_VOXWARE_TQ60" value="129">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_VOXWARE_VR12" value="119">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_VOXWARE_VR18" value="120">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_VSELP" value="4">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_WMAV1" value="352">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_WMAV2" value="353">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_WMAV3" value="354">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_WMAV3_L" value="355">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_WMS" value="10">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_XEBEC" value="61">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_YAMAHA_ADPCM" value="32">
      <type name="int"/>
    </constant>
    <constant name="WAVE_FORMAT_ZYXEL_ADPCM" value="151">
      <type name="int"/>
    </constant>
    <function name="create_audio_caps"
              c:identifier="gst_riff_create_audio_caps">
      <return-value transfer-ownership="full">
        <type name="Gst.Caps" c:type="GstCaps*"/>
      </return-value>
      <parameters>
        <parameter name="codec_id" transfer-ownership="none">
          <type name="uint16" c:type="guint16"/>
        </parameter>
        <parameter name="strh" transfer-ownership="none">
          <type name="riff_strh" c:type="gst_riff_strh*"/>
        </parameter>
        <parameter name="strf" transfer-ownership="none">
          <type name="riff_strf_auds" c:type="gst_riff_strf_auds*"/>
        </parameter>
        <parameter name="strf_data" transfer-ownership="none">
          <type name="Gst.Buffer" c:type="GstBuffer*"/>
        </parameter>
        <parameter name="strd_data" transfer-ownership="none">
          <type name="Gst.Buffer" c:type="GstBuffer*"/>
        </parameter>
        <parameter name="codec_name" transfer-ownership="none">
          <array c:type="char**">
            <type name="utf8"/>
          </array>
        </parameter>
      </parameters>
    </function>
    <function name="create_audio_template_caps"
              c:identifier="gst_riff_create_audio_template_caps">
      <return-value transfer-ownership="full">
        <type name="Gst.Caps" c:type="GstCaps*"/>
      </return-value>
    </function>
    <function name="create_iavs_caps" c:identifier="gst_riff_create_iavs_caps">
      <return-value transfer-ownership="full">
        <type name="Gst.Caps" c:type="GstCaps*"/>
      </return-value>
      <parameters>
        <parameter name="codec_fcc" transfer-ownership="none">
          <type name="uint32" c:type="guint32"/>
        </parameter>
        <parameter name="strh" transfer-ownership="none">
          <type name="riff_strh" c:type="gst_riff_strh*"/>
        </parameter>
        <parameter name="strf" transfer-ownership="none">
          <type name="riff_strf_iavs" c:type="gst_riff_strf_iavs*"/>
        </parameter>
        <parameter name="strf_data" transfer-ownership="none">
          <type name="Gst.Buffer" c:type="GstBuffer*"/>
        </parameter>
        <parameter name="strd_data" transfer-ownership="none">
          <type name="Gst.Buffer" c:type="GstBuffer*"/>
        </parameter>
        <parameter name="codec_name" transfer-ownership="none">
          <array c:type="char**">
            <type name="utf8"/>
          </array>
        </parameter>
      </parameters>
    </function>
    <function name="create_iavs_template_caps"
              c:identifier="gst_riff_create_iavs_template_caps">
      <return-value transfer-ownership="full">
        <type name="Gst.Caps" c:type="GstCaps*"/>
      </return-value>
    </function>
    <function name="create_video_caps"
              c:identifier="gst_riff_create_video_caps"
              doc="data that is within the range of strf.size, but excluding any
additional data withint this chunk but outside strf.size.
chunk outside reach of strf.size. Ususally a palette.
chunk. Usually codec initialization data.">
      <return-value transfer-ownership="full">
        <type name="Gst.Caps" c:type="GstCaps*"/>
      </return-value>
      <parameters>
        <parameter name="codec_fcc" transfer-ownership="none">
          <type name="uint32" c:type="guint32"/>
        </parameter>
        <parameter name="strh" transfer-ownership="none">
          <type name="riff_strh" c:type="gst_riff_strh*"/>
        </parameter>
        <parameter name="strf" transfer-ownership="none">
          <type name="riff_strf_vids" c:type="gst_riff_strf_vids*"/>
        </parameter>
        <parameter name="strf_data" transfer-ownership="none">
          <type name="Gst.Buffer" c:type="GstBuffer*"/>
        </parameter>
        <parameter name="strd_data" transfer-ownership="none">
          <type name="Gst.Buffer" c:type="GstBuffer*"/>
        </parameter>
        <parameter name="codec_name" transfer-ownership="none">
          <array c:type="char**">
            <type name="utf8"/>
          </array>
        </parameter>
      </parameters>
    </function>
    <function name="create_video_template_caps"
              c:identifier="gst_riff_create_video_template_caps">
      <return-value transfer-ownership="full">
        <type name="Gst.Caps" c:type="GstCaps*"/>
      </return-value>
    </function>
    <function name="init"
              c:identifier="gst_riff_init"
              doc="Initialize riff library.">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="parse_chunk"
              c:identifier="gst_riff_parse_chunk"
              doc="by the read size by this function.
chunk data, which may be NULL if chunksize == 0
Reads a single chunk.">
      <return-value transfer-ownership="none">
        <type name="boolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="element" transfer-ownership="none">
          <type name="Gst.Element" c:type="GstElement*"/>
        </parameter>
        <parameter name="buf" transfer-ownership="none">
          <type name="Gst.Buffer" c:type="GstBuffer*"/>
        </parameter>
        <parameter name="offset" direction="out" transfer-ownership="full">
          <type name="uint" c:type="guint*"/>
        </parameter>
        <parameter name="fourcc" direction="out" transfer-ownership="full">
          <type name="uint32" c:type="guint32*"/>
        </parameter>
        <parameter name="chunk_data"
                   transfer-ownership="none"
                   doc="containing the">
          <type name="Gst.Buffer" c:type="GstBuffer**"/>
        </parameter>
      </parameters>
    </function>
    <function name="parse_file_header"
              c:identifier="gst_riff_parse_file_header"
              doc="should be at least 12 bytes long.
type of document (according to the header).
Reads the first few bytes from the provided buffer, checks
if this stream is a RIFF stream, and determines document type.
This function takes ownership of @buf so it should not be used anymore
after calling this function.
caller should error out; we already throw an error), or TRUE
if it is.">
      <return-value transfer-ownership="none">
        <type name="boolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="element" transfer-ownership="none">
          <type name="Gst.Element" c:type="GstElement*"/>
        </parameter>
        <parameter name="buf" transfer-ownership="none">
          <type name="Gst.Buffer" c:type="GstBuffer*"/>
        </parameter>
        <parameter name="doctype"
                   direction="out"
                   transfer-ownership="full"
                   doc="to indicate the">
          <type name="uint32" c:type="guint32*"/>
        </parameter>
      </parameters>
    </function>
    <function name="parse_info"
              c:identifier="gst_riff_parse_info"
              doc="containing information about this stream. May be
NULL if no supported tags were found.
Parses stream metadata from input data.">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="element" transfer-ownership="none">
          <type name="Gst.Element" c:type="GstElement*"/>
        </parameter>
        <parameter name="buf" transfer-ownership="none">
          <type name="Gst.Buffer" c:type="GstBuffer*"/>
        </parameter>
        <parameter name="taglist" transfer-ownership="none">
          <type name="Gst.TagList" c:type="GstTagList**"/>
        </parameter>
      </parameters>
    </function>
    <function name="parse_strf_auds"
              c:identifier="gst_riff_parse_strf_auds"
              doc="strf/auds structure. Caller should free it.
containing extradata for this particular stream (e.g.
codec initialization data).
Parses an audio stream´s strf structure plus optionally some
extradata from input data. This function takes ownership of @buf.
use.
should be skipped on error, but it is not fatal.">
      <return-value transfer-ownership="none">
        <type name="boolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="element" transfer-ownership="none">
          <type name="Gst.Element" c:type="GstElement*"/>
        </parameter>
        <parameter name="buf" transfer-ownership="none">
          <type name="Gst.Buffer" c:type="GstBuffer*"/>
        </parameter>
        <parameter name="strf" transfer-ownership="none" doc="to a filled-in">
          <type name="riff_strf_auds" c:type="gst_riff_strf_auds**"/>
        </parameter>
        <parameter name="data" transfer-ownership="none" doc="to a buffer">
          <type name="Gst.Buffer" c:type="GstBuffer**"/>
        </parameter>
      </parameters>
    </function>
    <function name="parse_strf_iavs"
              c:identifier="gst_riff_parse_strf_iavs"
              doc="strf/iavs structure. Caller should free it.
containing extradata for this particular stream (e.g.
codec initialization data).
Parses a interleaved (also known as &quot;complex&quot;)  stream´s strf
structure plus optionally some extradata from input data. This
function takes ownership of @buf.">
      <return-value transfer-ownership="none">
        <type name="boolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="element" transfer-ownership="none">
          <type name="Gst.Element" c:type="GstElement*"/>
        </parameter>
        <parameter name="buf" transfer-ownership="none">
          <type name="Gst.Buffer" c:type="GstBuffer*"/>
        </parameter>
        <parameter name="strf" transfer-ownership="none" doc="to a filled-in">
          <type name="riff_strf_iavs" c:type="gst_riff_strf_iavs**"/>
        </parameter>
        <parameter name="data" transfer-ownership="none" doc="to a buffer">
          <type name="Gst.Buffer" c:type="GstBuffer**"/>
        </parameter>
      </parameters>
    </function>
    <function name="parse_strf_vids"
              c:identifier="gst_riff_parse_strf_vids"
              doc="strf/vids structure. Caller should free it.
containing extradata for this particular stream (e.g.
palette, codec initialization data).
Parses a video stream´s strf structure plus optionally some
extradata from input data. This function takes ownership of @buf.
should be skipped on error, but it is not fatal.">
      <return-value transfer-ownership="none">
        <type name="boolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="element" transfer-ownership="none">
          <type name="Gst.Element" c:type="GstElement*"/>
        </parameter>
        <parameter name="buf" transfer-ownership="none">
          <type name="Gst.Buffer" c:type="GstBuffer*"/>
        </parameter>
        <parameter name="strf" transfer-ownership="none" doc="to a filled-in">
          <type name="riff_strf_vids" c:type="gst_riff_strf_vids**"/>
        </parameter>
        <parameter name="data" transfer-ownership="none" doc="to a buffer">
          <type name="Gst.Buffer" c:type="GstBuffer**"/>
        </parameter>
      </parameters>
    </function>
    <function name="parse_strh"
              c:identifier="gst_riff_parse_strh"
              doc="strh structure. Caller should free it.
Parses a strh structure from input data. Takes ownership of @buf.
should be skipped on error, but it is not fatal.">
      <return-value transfer-ownership="none">
        <type name="boolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="element" transfer-ownership="none">
          <type name="Gst.Element" c:type="GstElement*"/>
        </parameter>
        <parameter name="buf" transfer-ownership="none">
          <type name="Gst.Buffer" c:type="GstBuffer*"/>
        </parameter>
        <parameter name="strh" transfer-ownership="none" doc="to a filled-in">
          <type name="riff_strh" c:type="gst_riff_strh**"/>
        </parameter>
      </parameters>
    </function>
    <function name="read_chunk"
              c:identifier="gst_riff_read_chunk"
              doc="Reads a single chunk of data. Since 0.10.8 &apos;JUNK&apos; chunks
are skipped automatically.">
      <return-value transfer-ownership="full">
        <type name="Gst.FlowReturn" c:type="GstFlowReturn"/>
      </return-value>
      <parameters>
        <parameter name="element" transfer-ownership="none">
          <type name="Gst.Element" c:type="GstElement*"/>
        </parameter>
        <parameter name="pad" transfer-ownership="none">
          <type name="Gst.Pad" c:type="GstPad*"/>
        </parameter>
        <parameter name="offset" direction="out" transfer-ownership="full">
          <type name="uint64" c:type="guint64*"/>
        </parameter>
        <parameter name="tag" direction="out" transfer-ownership="full">
          <type name="uint32" c:type="guint32*"/>
        </parameter>
        <parameter name="chunk_data" transfer-ownership="none">
          <type name="Gst.Buffer" c:type="GstBuffer**"/>
        </parameter>
      </parameters>
    </function>
    <record name="riff_acid" c:type="_gst_riff_acid">
      <field name="loop_type" writable="1">
        <type name="uint32" c:type="guint32"/>
      </field>
      <field name="root_note" writable="1">
        <type name="uint16" c:type="guint16"/>
      </field>
      <field name="unknown1" writable="1">
        <type name="uint16" c:type="guint16"/>
      </field>
      <field name="unknown2" writable="1">
        <type name="float" c:type="gfloat"/>
      </field>
      <field name="number_of_beats" writable="1">
        <type name="uint32" c:type="guint32"/>
      </field>
      <field name="meter_d" writable="1">
        <type name="uint16" c:type="guint16"/>
      </field>
      <field name="meter_n" writable="1">
        <type name="uint16" c:type="guint16"/>
      </field>
      <field name="tempo" writable="1">
        <type name="float" c:type="gfloat"/>
      </field>
    </record>
    <record name="riff_dmlh" c:type="_gst_riff_dmlh">
      <field name="totalframes" writable="1">
        <type name="uint32" c:type="guint32"/>
      </field>
    </record>
    <record name="riff_index_entry" c:type="_gst_riff_index_entry">
      <field name="id" writable="1">
        <type name="uint32" c:type="guint32"/>
      </field>
      <field name="flags" writable="1">
        <type name="uint32" c:type="guint32"/>
      </field>
      <field name="offset" writable="1">
        <type name="uint32" c:type="guint32"/>
      </field>
      <field name="size" writable="1">
        <type name="uint32" c:type="guint32"/>
      </field>
    </record>
    <record name="riff_strf_auds" c:type="_gst_riff_strf_auds">
      <field name="format" writable="1">
        <type name="uint16" c:type="guint16"/>
      </field>
      <field name="channels" writable="1">
        <type name="uint16" c:type="guint16"/>
      </field>
      <field name="rate" writable="1">
        <type name="uint32" c:type="guint32"/>
      </field>
      <field name="av_bps" writable="1">
        <type name="uint32" c:type="guint32"/>
      </field>
      <field name="blockalign" writable="1">
        <type name="uint16" c:type="guint16"/>
      </field>
      <field name="size" writable="1">
        <type name="uint16" c:type="guint16"/>
      </field>
    </record>
    <record name="riff_strf_iavs" c:type="_gst_riff_strf_iavs">
      <field name="DVAAuxSrc" writable="1">
        <type name="uint32" c:type="guint32"/>
      </field>
      <field name="DVAAuxCtl" writable="1">
        <type name="uint32" c:type="guint32"/>
      </field>
      <field name="DVAAuxSrc1" writable="1">
        <type name="uint32" c:type="guint32"/>
      </field>
      <field name="DVAAuxCtl1" writable="1">
        <type name="uint32" c:type="guint32"/>
      </field>
      <field name="DVVAuxSrc" writable="1">
        <type name="uint32" c:type="guint32"/>
      </field>
      <field name="DVVAuxCtl" writable="1">
        <type name="uint32" c:type="guint32"/>
      </field>
      <field name="DVReserved1" writable="1">
        <type name="uint32" c:type="guint32"/>
      </field>
      <field name="DVReserved2" writable="1">
        <type name="uint32" c:type="guint32"/>
      </field>
    </record>
    <record name="riff_strf_vids" c:type="_gst_riff_strf_vids">
      <field name="size" writable="1">
        <type name="uint32" c:type="guint32"/>
      </field>
      <field name="width" writable="1">
        <type name="uint32" c:type="guint32"/>
      </field>
      <field name="height" writable="1">
        <type name="uint32" c:type="guint32"/>
      </field>
      <field name="planes" writable="1">
        <type name="uint16" c:type="guint16"/>
      </field>
      <field name="bit_cnt" writable="1">
        <type name="uint16" c:type="guint16"/>
      </field>
      <field name="compression" writable="1">
        <type name="uint32" c:type="guint32"/>
      </field>
      <field name="image_size" writable="1">
        <type name="uint32" c:type="guint32"/>
      </field>
      <field name="xpels_meter" writable="1">
        <type name="uint32" c:type="guint32"/>
      </field>
      <field name="ypels_meter" writable="1">
        <type name="uint32" c:type="guint32"/>
      </field>
      <field name="num_colors" writable="1">
        <type name="uint32" c:type="guint32"/>
      </field>
      <field name="imp_colors" writable="1">
        <type name="uint32" c:type="guint32"/>
      </field>
    </record>
    <record name="riff_strh" c:type="_gst_riff_strh">
      <field name="type" writable="1">
        <type name="uint32" c:type="guint32"/>
      </field>
      <field name="fcc_handler" writable="1">
        <type name="uint32" c:type="guint32"/>
      </field>
      <field name="flags" writable="1">
        <type name="uint32" c:type="guint32"/>
      </field>
      <field name="priority" writable="1">
        <type name="uint32" c:type="guint32"/>
      </field>
      <field name="init_frames" writable="1">
        <type name="uint32" c:type="guint32"/>
      </field>
      <field name="scale" writable="1">
        <type name="uint32" c:type="guint32"/>
      </field>
      <field name="rate" writable="1">
        <type name="uint32" c:type="guint32"/>
      </field>
      <field name="start" writable="1">
        <type name="uint32" c:type="guint32"/>
      </field>
      <field name="length" writable="1">
        <type name="uint32" c:type="guint32"/>
      </field>
      <field name="bufsize" writable="1">
        <type name="uint32" c:type="guint32"/>
      </field>
      <field name="quality" writable="1">
        <type name="uint32" c:type="guint32"/>
      </field>
      <field name="samplesize" writable="1">
        <type name="uint32" c:type="guint32"/>
      </field>
    </record>
  </namespace>
</repository>

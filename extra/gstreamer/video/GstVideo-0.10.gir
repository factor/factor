<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.0"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="GLib" version="2.0"/>
  <include name="GModule" version="2.0"/>
  <include name="GObject" version="2.0"/>
  <include name="Gst" version="0.10"/>
  <include name="GstBase" version="0.10"/>
  <include name="libxml2" version="2.0"/>
  <package name="gstreamer-0.10"/>
  <package name="gstreamer-base-0.10"/>
  <c:include name="gst/video/gstvideofilter.h"/>
  <c:include name="gst/video/gstvideosink.h"/>
  <c:include name="gst/video/video-enumtypes.h"/>
  <c:include name="gst/video/video.h"/>
  <namespace name="GstVideo"
             version="0.10"
             shared-library="libgstvideo-0.10.so.0"
             c:prefix="Gst">
    <constant name="BLUE_MASK_15" value="0x001f">
      <type name="utf8"/>
    </constant>
    <constant name="BLUE_MASK_15_INT" value="31">
      <type name="int"/>
    </constant>
    <constant name="BLUE_MASK_16" value="0x001f">
      <type name="utf8"/>
    </constant>
    <constant name="BLUE_MASK_16_INT" value="31">
      <type name="int"/>
    </constant>
    <constant name="BYTE1_MASK_24" value="0x00FF0000">
      <type name="utf8"/>
    </constant>
    <constant name="BYTE1_MASK_24_INT" value="16711680">
      <type name="int"/>
    </constant>
    <constant name="BYTE1_MASK_32" value="0xFF000000">
      <type name="utf8"/>
    </constant>
    <constant name="BYTE1_MASK_32_INT" value="-16777216">
      <type name="int"/>
    </constant>
    <constant name="BYTE2_MASK_24" value="0x0000FF00">
      <type name="utf8"/>
    </constant>
    <constant name="BYTE2_MASK_24_INT" value="65280">
      <type name="int"/>
    </constant>
    <constant name="BYTE2_MASK_32" value="0x00FF0000">
      <type name="utf8"/>
    </constant>
    <constant name="BYTE2_MASK_32_INT" value="16711680">
      <type name="int"/>
    </constant>
    <constant name="BYTE3_MASK_24" value="0x000000FF">
      <type name="utf8"/>
    </constant>
    <constant name="BYTE3_MASK_24_INT" value="255">
      <type name="int"/>
    </constant>
    <constant name="BYTE3_MASK_32" value="0x0000FF00">
      <type name="utf8"/>
    </constant>
    <constant name="BYTE3_MASK_32_INT" value="65280">
      <type name="int"/>
    </constant>
    <constant name="BYTE4_MASK_32" value="0x000000FF">
      <type name="utf8"/>
    </constant>
    <constant name="BYTE4_MASK_32_INT" value="255">
      <type name="int"/>
    </constant>
    <constant name="CAPS_GRAY8"
              value="video/x-raw-gray, bpp = (int) 8, depth = (int) 8, width = ">
      <type name="utf8"/>
    </constant>
    <constant name="CAPS_RGB_15"
              value="video/x-raw-rgb, bpp = (int) 16, depth = (int) 15, endianness = (int) BYTE_ORDER, red_mask = (int) ">
      <type name="utf8"/>
    </constant>
    <constant name="CAPS_RGB_16"
              value="video/x-raw-rgb, bpp = (int) 16, depth = (int) 16, endianness = (int) BYTE_ORDER, red_mask = (int) ">
      <type name="utf8"/>
    </constant>
    <constant name="FPS_RANGE" value="(fraction) [ 0, max ]">
      <type name="utf8"/>
    </constant>
    <constant name="GREEN_MASK_15" value="0x03e0">
      <type name="utf8"/>
    </constant>
    <constant name="GREEN_MASK_15_INT" value="992">
      <type name="int"/>
    </constant>
    <constant name="GREEN_MASK_16" value="0x07e0">
      <type name="utf8"/>
    </constant>
    <constant name="GREEN_MASK_16_INT" value="2016">
      <type name="int"/>
    </constant>
    <constant name="RED_MASK_15" value="0x7c00">
      <type name="utf8"/>
    </constant>
    <constant name="RED_MASK_15_INT" value="31744">
      <type name="int"/>
    </constant>
    <constant name="RED_MASK_16" value="0xf800">
      <type name="utf8"/>
    </constant>
    <constant name="RED_MASK_16_INT" value="63488">
      <type name="int"/>
    </constant>
    <constant name="SIZE_RANGE" value="(int) [ 1, max ]">
      <type name="utf8"/>
    </constant>
    <class name="VideoFilter"
           c:type="GstVideoFilter"
           parent="GstBase.BaseTransform"
           abstract="1"
           glib:type-name="GstVideoFilter"
           glib:get-type="gst_video_filter_get_type"
           glib:type-struct="VideoFilterClass">
      <field name="element">
        <type name="GstBase.BaseTransform" c:type="GstBaseTransform"/>
      </field>
      <field name="inited">
        <type name="boolean" c:type="gboolean"/>
      </field>
    </class>
    <record name="VideoFilterClass"
            c:type="GstVideoFilterClass"
            glib:is-gtype-struct-for="VideoFilter">
      <field name="parent_class">
        <type name="GstBase.BaseTransformClass"
              c:type="GstBaseTransformClass"/>
      </field>
    </record>
    <enumeration name="VideoFormat"
                 doc="Enum value describing the most common video formats."
                 glib:type-name="GstVideoFormat"
                 glib:get-type="gst_video_format_get_type"
                 c:type="GstVideoFormat">
      <member name="unknown"
              value="0"
              c:identifier="GST_VIDEO_FORMAT_UNKNOWN"
              glib:nick="unknown"/>
      <member name="i420"
              value="1"
              c:identifier="GST_VIDEO_FORMAT_I420"
              glib:nick="i420"/>
      <member name="yv12"
              value="2"
              c:identifier="GST_VIDEO_FORMAT_YV12"
              glib:nick="yv12"/>
      <member name="yuy2"
              value="3"
              c:identifier="GST_VIDEO_FORMAT_YUY2"
              glib:nick="yuy2"/>
      <member name="uyvy"
              value="4"
              c:identifier="GST_VIDEO_FORMAT_UYVY"
              glib:nick="uyvy"/>
      <member name="ayuv"
              value="5"
              c:identifier="GST_VIDEO_FORMAT_AYUV"
              glib:nick="ayuv"/>
      <member name="rgbx"
              value="6"
              c:identifier="GST_VIDEO_FORMAT_RGBx"
              glib:nick="rgbx"/>
      <member name="bgrx"
              value="7"
              c:identifier="GST_VIDEO_FORMAT_BGRx"
              glib:nick="bgrx"/>
      <member name="xrgb"
              value="8"
              c:identifier="GST_VIDEO_FORMAT_xRGB"
              glib:nick="xrgb"/>
      <member name="xbgr"
              value="9"
              c:identifier="GST_VIDEO_FORMAT_xBGR"
              glib:nick="xbgr"/>
      <member name="rgba"
              value="10"
              c:identifier="GST_VIDEO_FORMAT_RGBA"
              glib:nick="rgba"/>
      <member name="bgra"
              value="11"
              c:identifier="GST_VIDEO_FORMAT_BGRA"
              glib:nick="bgra"/>
      <member name="argb"
              value="12"
              c:identifier="GST_VIDEO_FORMAT_ARGB"
              glib:nick="argb"/>
      <member name="abgr"
              value="13"
              c:identifier="GST_VIDEO_FORMAT_ABGR"
              glib:nick="abgr"/>
      <member name="rgb"
              value="14"
              c:identifier="GST_VIDEO_FORMAT_RGB"
              glib:nick="rgb"/>
      <member name="bgr"
              value="15"
              c:identifier="GST_VIDEO_FORMAT_BGR"
              glib:nick="bgr"/>
      <member name="y41b"
              value="16"
              c:identifier="GST_VIDEO_FORMAT_Y41B"
              glib:nick="y41b"/>
      <member name="y42b"
              value="17"
              c:identifier="GST_VIDEO_FORMAT_Y42B"
              glib:nick="y42b"/>
      <member name="yvyu"
              value="18"
              c:identifier="GST_VIDEO_FORMAT_YVYU"
              glib:nick="yvyu"/>
      <member name="y444"
              value="19"
              c:identifier="GST_VIDEO_FORMAT_Y444"
              glib:nick="y444"/>
      <member name="v210"
              value="20"
              c:identifier="GST_VIDEO_FORMAT_v210"
              glib:nick="v210"/>
      <member name="v216"
              value="21"
              c:identifier="GST_VIDEO_FORMAT_v216"
              glib:nick="v216"/>
      <member name="nv12"
              value="22"
              c:identifier="GST_VIDEO_FORMAT_NV12"
              glib:nick="nv12"/>
      <member name="nv21"
              value="23"
              c:identifier="GST_VIDEO_FORMAT_NV21"
              glib:nick="nv21"/>
      <member name="gray8"
              value="24"
              c:identifier="GST_VIDEO_FORMAT_GRAY8"
              glib:nick="gray8"/>
      <member name="gray16_be"
              value="25"
              c:identifier="GST_VIDEO_FORMAT_GRAY16_BE"
              glib:nick="gray16-be"/>
      <member name="gray16_le"
              value="26"
              c:identifier="GST_VIDEO_FORMAT_GRAY16_LE"
              glib:nick="gray16-le"/>
    </enumeration>
    <record name="VideoRectangle"
            c:type="GstVideoRectangle"
            doc="Helper structure representing a rectangular area.">
      <field name="x" writable="1">
        <type name="int" c:type="gint"/>
      </field>
      <field name="y" writable="1">
        <type name="int" c:type="gint"/>
      </field>
      <field name="w" writable="1">
        <type name="int" c:type="gint"/>
      </field>
      <field name="h" writable="1">
        <type name="int" c:type="gint"/>
      </field>
    </record>
    <class name="VideoSink"
           c:type="GstVideoSink"
           doc="The video sink instance structure. Derived video sinks should set the"
           parent="GstBase.BaseSink"
           glib:type-name="GstVideoSink"
           glib:get-type="gst_video_sink_get_type"
           glib:type-struct="VideoSinkClass">
      <function name="center_rect"
                c:identifier="gst_video_sink_center_rect"
                doc="Takes @src rectangle and position it at the center of @dst rectangle with or
without @scaling. It handles clipping if the @src rectangle is bigger than
the @dst one and @scaling is set to FALSE.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="src" transfer-ownership="none">
            <type name="VideoRectangle" c:type="GstVideoRectangle"/>
          </parameter>
          <parameter name="dst" transfer-ownership="none">
            <type name="VideoRectangle" c:type="GstVideoRectangle"/>
          </parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="VideoRectangle" c:type="GstVideoRectangle*"/>
          </parameter>
          <parameter name="scaling" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="show_frame">
        <return-value transfer-ownership="full">
          <type name="Gst.FlowReturn" c:type="GstFlowReturn"/>
        </return-value>
        <parameters>
          <parameter name="buf" transfer-ownership="none">
            <type name="Gst.Buffer" c:type="GstBuffer*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <property name="show-preroll-frame" writable="1" construct="1">
        <type name="boolean" c:type="gboolean"/>
      </property>
      <field name="element">
        <type name="GstBase.BaseSink" c:type="GstBaseSink"/>
      </field>
      <field name="width">
        <type name="int" c:type="gint"/>
      </field>
      <field name="height">
        <type name="int" c:type="gint"/>
      </field>
      <field name="priv">
        <type name="VideoSinkPrivate" c:type="GstVideoSinkPrivate*"/>
      </field>
      <field name="_gst_reserved">
        <array zero-terminated="0" c:type="gpointer" fixed-size="3">
          <type name="any"/>
        </array>
      </field>
    </class>
    <record name="VideoSinkClass"
            c:type="GstVideoSinkClass"
            glib:is-gtype-struct-for="VideoSink"
            doc="#GstBaseSink::preroll vfuncs. Rendering during preroll will be
suppressed if the &apos;show-preroll-frame&apos; property is set to #FALSE.
The video sink class structure. Derived classes should override the"
            version="0.10.25">
      <field name="parent_class">
        <type name="GstBase.BaseSinkClass" c:type="GstBaseSinkClass"/>
      </field>
      <field name="show_frame">
        <callback name="show_frame" c:type="show_frame">
          <return-value transfer-ownership="full">
            <type name="Gst.FlowReturn" c:type="GstFlowReturn"/>
          </return-value>
          <parameters>
            <parameter name="video_sink" transfer-ownership="none">
              <type name="VideoSink" c:type="GstVideoSink*"/>
            </parameter>
            <parameter name="buf" transfer-ownership="none">
              <type name="Gst.Buffer" c:type="GstBuffer*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_gst_reserved">
        <array zero-terminated="0" c:type="gpointer" fixed-size="3">
          <type name="any"/>
        </array>
      </field>
    </record>
    <record name="VideoSinkPrivate" c:type="GstVideoSinkPrivate">
    </record>
    <function name="calculate_display_ratio"
              c:identifier="gst_video_calculate_display_ratio"
              doc="Given the Pixel Aspect Ratio and size of an input video frame, and the
pixel aspect ratio of the intended display device, calculates the actual
display ratio the video will be rendered with.
dar_n and dar_d parameters.
The return value is FALSE in the case of integer overflow or other error."
              version="0.10.7">
      <return-value transfer-ownership="none">
        <type name="boolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="dar_n" direction="out" transfer-ownership="full">
          <type name="uint" c:type="guint*"/>
        </parameter>
        <parameter name="dar_d" direction="out" transfer-ownership="full">
          <type name="uint" c:type="guint*"/>
        </parameter>
        <parameter name="video_width" transfer-ownership="none">
          <type name="uint" c:type="guint"/>
        </parameter>
        <parameter name="video_height" transfer-ownership="none">
          <type name="uint" c:type="guint"/>
        </parameter>
        <parameter name="video_par_n" transfer-ownership="none">
          <type name="uint" c:type="guint"/>
        </parameter>
        <parameter name="video_par_d" transfer-ownership="none">
          <type name="uint" c:type="guint"/>
        </parameter>
        <parameter name="display_par_n" transfer-ownership="none">
          <type name="uint" c:type="guint"/>
        </parameter>
        <parameter name="display_par_d" transfer-ownership="none">
          <type name="uint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="event_new_still_frame"
              c:identifier="gst_video_event_new_still_frame"
              doc="Creates a new Still Frame event. If @in_still is %TRUE, then the event
represents the start of a still frame sequence. If it is %FALSE, then
the event ends a still frame sequence.
To parse an event created by gst_video_event_new_still_frame() use
gst_video_event_parse_still_frame()."
              version="0.10.26">
      <return-value transfer-ownership="full">
        <type name="Gst.Event" c:type="GstEvent*"/>
      </return-value>
      <parameters>
        <parameter name="in_still" transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="event_parse_still_frame"
              c:identifier="gst_video_event_parse_still_frame"
              doc="Parse a #GstEvent, identify if it is a Still Frame event, and
return the still-frame state from the event if it is.
If the event represents the start of a still frame, the in_still
variable will be set to TRUE, otherwise FALSE. It is OK to pass NULL for the
in_still variable order to just check whether the event is a valid still-frame
event.
Create a still frame event using gst_video_event_new_still_frame()"
              version="0.10.26">
      <return-value transfer-ownership="none">
        <type name="boolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="event" transfer-ownership="none">
          <type name="Gst.Event" c:type="GstEvent*"/>
        </parameter>
        <parameter name="in_still" direction="out" transfer-ownership="full">
          <type name="boolean" c:type="gboolean*"/>
        </parameter>
      </parameters>
    </function>
    <function name="format_convert"
              c:identifier="gst_video_format_convert"
              doc="Converts among various #GstFormat types.  This function handles
GST_FORMAT_BYTES, GST_FORMAT_TIME, and GST_FORMAT_DEFAULT.  For
raw video, GST_FORMAT_DEFAULT corresponds to video frames.  This
function can be to handle pad queries of the type GST_QUERY_CONVERT."
              version="0.10.16">
      <return-value transfer-ownership="none">
        <type name="boolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="format" transfer-ownership="none">
          <type name="VideoFormat" c:type="GstVideoFormat"/>
        </parameter>
        <parameter name="width" transfer-ownership="none">
          <type name="int" c:type="int"/>
        </parameter>
        <parameter name="height" transfer-ownership="none">
          <type name="int" c:type="int"/>
        </parameter>
        <parameter name="fps_n" transfer-ownership="none">
          <type name="int" c:type="int"/>
        </parameter>
        <parameter name="fps_d" transfer-ownership="none">
          <type name="int" c:type="int"/>
        </parameter>
        <parameter name="src_format" transfer-ownership="none">
          <type name="Gst.Format" c:type="GstFormat"/>
        </parameter>
        <parameter name="src_value" transfer-ownership="none">
          <type name="int64" c:type="gint64"/>
        </parameter>
        <parameter name="dest_format" transfer-ownership="none">
          <type name="Gst.Format" c:type="GstFormat"/>
        </parameter>
        <parameter name="dest_value" direction="out" transfer-ownership="full">
          <type name="int64" c:type="gint64*"/>
        </parameter>
      </parameters>
    </function>
    <function name="format_from_fourcc"
              c:identifier="gst_video_format_from_fourcc"
              doc="Converts a FOURCC value into the corresponding #GstVideoFormat.
If the FOURCC cannot be represented by #GstVideoFormat,
#GST_VIDEO_FORMAT_UNKNOWN is returned."
              version="0.10.16">
      <return-value transfer-ownership="full">
        <type name="VideoFormat" c:type="GstVideoFormat"/>
      </return-value>
      <parameters>
        <parameter name="fourcc" transfer-ownership="none">
          <type name="uint32" c:type="guint32"/>
        </parameter>
      </parameters>
    </function>
    <function name="format_get_component_height"
              c:identifier="gst_video_format_get_component_height"
              doc="Calculates the height of the component.  See
of the component index."
              version="0.10.16">
      <return-value transfer-ownership="none">
        <type name="int" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="format" transfer-ownership="none">
          <type name="VideoFormat" c:type="GstVideoFormat"/>
        </parameter>
        <parameter name="component" transfer-ownership="none">
          <type name="int" c:type="int"/>
        </parameter>
        <parameter name="height" transfer-ownership="none">
          <type name="int" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="format_get_component_offset"
              c:identifier="gst_video_format_get_component_offset"
              doc="Calculates the offset (in bytes) of the first pixel of the component
with index @component.  For packed formats, this will typically be a
small integer (0, 1, 2, 3).  For planar formats, this will be a
(relatively) large offset to the beginning of the second or third
component planes.  See @gst_video_format_get_row_stride for a description
of the component index."
              version="0.10.16">
      <return-value transfer-ownership="none">
        <type name="int" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="format" transfer-ownership="none">
          <type name="VideoFormat" c:type="GstVideoFormat"/>
        </parameter>
        <parameter name="component" transfer-ownership="none">
          <type name="int" c:type="int"/>
        </parameter>
        <parameter name="width" transfer-ownership="none">
          <type name="int" c:type="int"/>
        </parameter>
        <parameter name="height" transfer-ownership="none">
          <type name="int" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="format_get_component_width"
              c:identifier="gst_video_format_get_component_width"
              doc="Calculates the width of the component.  See
of the component index."
              version="0.10.16">
      <return-value transfer-ownership="none">
        <type name="int" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="format" transfer-ownership="none">
          <type name="VideoFormat" c:type="GstVideoFormat"/>
        </parameter>
        <parameter name="component" transfer-ownership="none">
          <type name="int" c:type="int"/>
        </parameter>
        <parameter name="width" transfer-ownership="none">
          <type name="int" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="format_get_pixel_stride"
              c:identifier="gst_video_format_get_pixel_stride"
              doc="Calculates the pixel stride (number of bytes from one pixel to the
pixel to its immediate left) for the video component with an index
of @component.  See @gst_video_format_get_row_stride for a description
of the component index."
              version="0.10.16">
      <return-value transfer-ownership="none">
        <type name="int" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="format" transfer-ownership="none">
          <type name="VideoFormat" c:type="GstVideoFormat"/>
        </parameter>
        <parameter name="component" transfer-ownership="none">
          <type name="int" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="format_get_row_stride"
              c:identifier="gst_video_format_get_row_stride"
              doc="Calculates the row stride (number of bytes from one row of pixels to
the next) for the video component with an index of @component.  For
YUV video, Y, U, and V have component indices of 0, 1, and 2,
respectively.  For RGB video, R, G, and B have component indicies of
0, 1, and 2, respectively.  Alpha channels, if present, have a component
index of 3.  The @width parameter always represents the width of the
video, not the component."
              version="0.10.16">
      <return-value transfer-ownership="none">
        <type name="int" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="format" transfer-ownership="none">
          <type name="VideoFormat" c:type="GstVideoFormat"/>
        </parameter>
        <parameter name="component" transfer-ownership="none">
          <type name="int" c:type="int"/>
        </parameter>
        <parameter name="width" transfer-ownership="none">
          <type name="int" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="format_get_size"
              c:identifier="gst_video_format_get_size"
              doc="Calculates the total number of bytes in the raw video format.  This
number should be used when allocating a buffer for raw video."
              version="0.10.16">
      <return-value transfer-ownership="none" doc="of raw video format">
        <type name="int" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="format" transfer-ownership="none">
          <type name="VideoFormat" c:type="GstVideoFormat"/>
        </parameter>
        <parameter name="width" transfer-ownership="none">
          <type name="int" c:type="int"/>
        </parameter>
        <parameter name="height" transfer-ownership="none">
          <type name="int" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="format_has_alpha"
              c:identifier="gst_video_format_has_alpha"
              doc="Returns TRUE or FALSE depending on if the video format provides an
alpha channel."
              version="0.10.16">
      <return-value transfer-ownership="none">
        <type name="boolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="format" transfer-ownership="none">
          <type name="VideoFormat" c:type="GstVideoFormat"/>
        </parameter>
      </parameters>
    </function>
    <function name="format_is_gray"
              c:identifier="gst_video_format_is_gray"
              doc="Determine whether the video format is a grayscale format."
              version="0.10.29">
      <return-value transfer-ownership="none">
        <type name="boolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="format" transfer-ownership="none">
          <type name="VideoFormat" c:type="GstVideoFormat"/>
        </parameter>
      </parameters>
    </function>
    <function name="format_is_rgb"
              c:identifier="gst_video_format_is_rgb"
              doc="Determine whether the video format is an RGB format."
              version="0.10.16">
      <return-value transfer-ownership="none">
        <type name="boolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="format" transfer-ownership="none">
          <type name="VideoFormat" c:type="GstVideoFormat"/>
        </parameter>
      </parameters>
    </function>
    <function name="format_is_yuv"
              c:identifier="gst_video_format_is_yuv"
              doc="Determine whether the video format is a YUV format."
              version="0.10.16">
      <return-value transfer-ownership="none">
        <type name="boolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="format" transfer-ownership="none">
          <type name="VideoFormat" c:type="GstVideoFormat"/>
        </parameter>
      </parameters>
    </function>
    <function name="format_new_caps"
              c:identifier="gst_video_format_new_caps"
              doc="Creates a new #GstCaps object based on the parameters provided."
              version="0.10.16">
      <return-value transfer-ownership="full">
        <type name="Gst.Caps" c:type="GstCaps*"/>
      </return-value>
      <parameters>
        <parameter name="format" transfer-ownership="none">
          <type name="VideoFormat" c:type="GstVideoFormat"/>
        </parameter>
        <parameter name="width" transfer-ownership="none">
          <type name="int" c:type="int"/>
        </parameter>
        <parameter name="height" transfer-ownership="none">
          <type name="int" c:type="int"/>
        </parameter>
        <parameter name="framerate_n" transfer-ownership="none">
          <type name="int" c:type="int"/>
        </parameter>
        <parameter name="framerate_d" transfer-ownership="none">
          <type name="int" c:type="int"/>
        </parameter>
        <parameter name="par_n" transfer-ownership="none">
          <type name="int" c:type="int"/>
        </parameter>
        <parameter name="par_d" transfer-ownership="none">
          <type name="int" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="format_new_caps_interlaced"
              c:identifier="gst_video_format_new_caps_interlaced"
              doc="Creates a new #GstCaps object based on the parameters provided."
              version="0.10.23">
      <return-value transfer-ownership="full">
        <type name="Gst.Caps" c:type="GstCaps*"/>
      </return-value>
      <parameters>
        <parameter name="format" transfer-ownership="none">
          <type name="VideoFormat" c:type="GstVideoFormat"/>
        </parameter>
        <parameter name="width" transfer-ownership="none">
          <type name="int" c:type="int"/>
        </parameter>
        <parameter name="height" transfer-ownership="none">
          <type name="int" c:type="int"/>
        </parameter>
        <parameter name="framerate_n" transfer-ownership="none">
          <type name="int" c:type="int"/>
        </parameter>
        <parameter name="framerate_d" transfer-ownership="none">
          <type name="int" c:type="int"/>
        </parameter>
        <parameter name="par_n" transfer-ownership="none">
          <type name="int" c:type="int"/>
        </parameter>
        <parameter name="par_d" transfer-ownership="none">
          <type name="int" c:type="int"/>
        </parameter>
        <parameter name="interlaced" transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="format_parse_caps"
              c:identifier="gst_video_format_parse_caps"
              doc="Determines the #GstVideoFormat of @caps and places it in the location
pointed to by @format.  Extracts the size of the video and places it
in the location pointed to by @width and @height.  If @caps does not
represent one of the raw video formats listed in #GstVideoFormat, the
function will fail and return FALSE."
              version="0.10.16">
      <return-value transfer-ownership="none">
        <type name="boolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="caps" transfer-ownership="none">
          <type name="Gst.Caps" c:type="GstCaps*"/>
        </parameter>
        <parameter name="format" transfer-ownership="none">
          <type name="VideoFormat" c:type="GstVideoFormat*"/>
        </parameter>
        <parameter name="width" direction="out" transfer-ownership="full">
          <type name="int" c:type="int*"/>
        </parameter>
        <parameter name="height" direction="out" transfer-ownership="full">
          <type name="int" c:type="int*"/>
        </parameter>
      </parameters>
    </function>
    <function name="format_parse_caps_interlaced"
              c:identifier="gst_video_format_parse_caps_interlaced"
              doc="Extracts whether the caps represents interlaced content or not and places it
in @interlaced."
              version="0.10.23">
      <return-value transfer-ownership="none">
        <type name="boolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="caps" transfer-ownership="none">
          <type name="Gst.Caps" c:type="GstCaps*"/>
        </parameter>
        <parameter name="interlaced" direction="out" transfer-ownership="full">
          <type name="boolean" c:type="gboolean*"/>
        </parameter>
      </parameters>
    </function>
    <function name="format_to_fourcc"
              c:identifier="gst_video_format_to_fourcc"
              doc="Converts a #GstVideoFormat value into the corresponding FOURCC.  Only
a few YUV formats have corresponding FOURCC values.  If @format has
no corresponding FOURCC value, 0 is returned."
              version="0.10.16">
      <return-value transfer-ownership="none">
        <type name="uint32" c:type="guint32"/>
      </return-value>
      <parameters>
        <parameter name="format" transfer-ownership="none">
          <type name="VideoFormat" c:type="GstVideoFormat"/>
        </parameter>
      </parameters>
    </function>
    <function name="frame_rate"
              c:identifier="gst_video_frame_rate"
              doc="A convenience function to retrieve a GValue holding the framerate
from the caps on a pad.
The pad needs to have negotiated caps containing a framerate property.
do not contain a framerate.">
      <return-value transfer-ownership="none">
        <type name="GObject.Value" c:type="GValue*"/>
      </return-value>
      <parameters>
        <parameter name="pad" transfer-ownership="none">
          <type name="Gst.Pad" c:type="GstPad*"/>
        </parameter>
      </parameters>
    </function>
    <function name="get_size"
              c:identifier="gst_video_get_size"
              doc="Inspect the caps of the provided pad and retrieve the width and height of
the video frames it is configured for.
The pad needs to have negotiated caps containing width and height properties.">
      <return-value transfer-ownership="none">
        <type name="boolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="pad" transfer-ownership="none">
          <type name="Gst.Pad" c:type="GstPad*"/>
        </parameter>
        <parameter name="width" direction="out" transfer-ownership="full">
          <type name="int" c:type="gint*"/>
        </parameter>
        <parameter name="height" direction="out" transfer-ownership="full">
          <type name="int" c:type="gint*"/>
        </parameter>
      </parameters>
    </function>
    <function name="parse_caps_chroma_site"
              c:identifier="gst_video_parse_caps_chroma_site"
              doc="Extracts the chroma site used by the caps.  Possible values are
&quot;mpeg2&quot; for MPEG-2 style chroma siting (co-sited horizontally,
halfway-sited vertically), &quot;jpeg&quot; for JPEG and Theora style
chroma siting (halfway-sited both horizontally and vertically).
Other chroma site values are possible, but uncommon.
When no chroma site is specified in the caps, it should be assumed
to be &quot;mpeg2&quot;.
determined."
              version="0.10.29">
      <return-value transfer-ownership="none">
        <type name="utf8" c:type="char*"/>
      </return-value>
      <parameters>
        <parameter name="caps" transfer-ownership="none">
          <type name="Gst.Caps" c:type="GstCaps*"/>
        </parameter>
      </parameters>
    </function>
    <function name="parse_caps_color_matrix"
              c:identifier="gst_video_parse_caps_color_matrix"
              doc="Extracts the color matrix used by the caps.  Possible values are
&quot;sdtv&quot; for the standard definition color matrix (as specified in
Rec. ITU-R BT.470-6) or &quot;hdtv&quot; for the high definition color
matrix (as specified in Rec. ITU-R BT.709)
determined."
              version="0.10.29">
      <return-value transfer-ownership="none">
        <type name="utf8" c:type="char*"/>
      </return-value>
      <parameters>
        <parameter name="caps" transfer-ownership="none">
          <type name="Gst.Caps" c:type="GstCaps*"/>
        </parameter>
      </parameters>
    </function>
    <function name="parse_caps_framerate"
              c:identifier="gst_video_parse_caps_framerate"
              doc="Extracts the frame rate from @caps and places the values in the locations
pointed to by @fps_n and @fps_d.  Returns TRUE if the values could be
parsed correctly, FALSE if not.
This function can be used with #GstCaps that have any media type; it
is not limited to formats handled by #GstVideoFormat."
              version="0.10.16">
      <return-value transfer-ownership="none">
        <type name="boolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="caps" transfer-ownership="none">
          <type name="Gst.Caps" c:type="GstCaps*"/>
        </parameter>
        <parameter name="fps_n" direction="out" transfer-ownership="full">
          <type name="int" c:type="int*"/>
        </parameter>
        <parameter name="fps_d" direction="out" transfer-ownership="full">
          <type name="int" c:type="int*"/>
        </parameter>
      </parameters>
    </function>
    <function name="parse_caps_pixel_aspect_ratio"
              c:identifier="gst_video_parse_caps_pixel_aspect_ratio"
              doc="Extracts the pixel aspect ratio from @caps and places the values in
the locations pointed to by @par_n and @par_d.  Returns TRUE if the
values could be parsed correctly, FALSE if not.
This function can be used with #GstCaps that have any media type; it
is not limited to formats handled by #GstVideoFormat."
              version="0.10.16">
      <return-value transfer-ownership="none">
        <type name="boolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="caps" transfer-ownership="none">
          <type name="Gst.Caps" c:type="GstCaps*"/>
        </parameter>
        <parameter name="par_n" direction="out" transfer-ownership="full">
          <type name="int" c:type="int*"/>
        </parameter>
        <parameter name="par_d" direction="out" transfer-ownership="full">
          <type name="int" c:type="int*"/>
        </parameter>
      </parameters>
    </function>
  </namespace>
</repository>

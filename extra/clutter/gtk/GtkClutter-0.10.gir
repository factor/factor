<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="Atk" version="1.0"/>
  <include name="Clutter" version="1.0"/>
  <include name="Cogl" version="1.0"/>
  <include name="GL" version="1.0"/>
  <include name="GLib" version="2.0"/>
  <include name="GModule" version="2.0"/>
  <include name="GObject" version="2.0"/>
  <include name="Gdk" version="2.0"/>
  <include name="GdkPixbuf" version="2.0"/>
  <include name="Gio" version="2.0"/>
  <include name="Gtk" version="2.0"/>
  <include name="Json" version="1.0"/>
  <include name="Pango" version="1.0"/>
  <include name="PangoCairo" version="1.0"/>
  <include name="PangoFT2" version="1.0"/>
  <include name="cairo" version="1.0"/>
  <include name="fontconfig" version="2.0"/>
  <include name="freetype2" version="2.0"/>
  <namespace name="GtkClutter"
             version="0.10"
             shared-library="libclutter-gtk-0.10.so.0"
             c:identifier-prefixes="GtkClutter"
             c:symbol-prefixes="gtk_clutter">
    <class name="Embed"
           c:symbol-prefix="embed"
           c:type="GtkClutterEmbed"
           version="0.6"
           parent="Gtk.Container"
           glib:type-name="GtkClutterEmbed"
           glib:get-type="gtk_clutter_embed_get_type"
           glib:type-struct="EmbedClass">
      <doc xml:whitespace="preserve">A #GtkWidget containing the default Clutter stage.</doc>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new"
                   c:identifier="gtk_clutter_embed_new"
                   version="0.6">
        <doc xml:whitespace="preserve">Creates a new #GtkClutterEmbed widget. This widget can be
used to build a scene using Clutter API into a GTK+ application.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the newly created #GtkClutterEmbed</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="get_stage"
              c:identifier="gtk_clutter_embed_get_stage"
              version="0.6">
        <doc xml:whitespace="preserve">Retrieves the #ClutterStage from @embed. The returned stage can be
used to add actors to the Clutter scene. Multiple calls to this function
on the same #GtkClutterEmbed widget will return the same stage.
or unref the returned actor.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a #ClutterStage. You should never destroy</doc>
          <type name="Clutter.Actor" c:type="ClutterActor*"/>
        </return-value>
      </method>
      <field name="parent_instance">
        <type name="Gtk.Container" c:type="GtkContainer"/>
      </field>
      <field name="priv">
        <type name="EmbedPrivate" c:type="GtkClutterEmbedPrivate*"/>
      </field>
    </class>
    <record name="EmbedClass"
            c:type="GtkClutterEmbedClass"
            glib:is-gtype-struct-for="Embed"
            version="0.6">
      <doc xml:whitespace="preserve">Base class for #GtkClutterEmbed.</doc>
      <field name="parent_class">
        <type name="Gtk.ContainerClass" c:type="GtkContainerClass"/>
      </field>
      <field name="_clutter_gtk_reserved1" introspectable="0">
        <callback name="_clutter_gtk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_clutter_gtk_reserved2" introspectable="0">
        <callback name="_clutter_gtk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_clutter_gtk_reserved3" introspectable="0">
        <callback name="_clutter_gtk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_clutter_gtk_reserved4" introspectable="0">
        <callback name="_clutter_gtk_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_clutter_gtk_reserved5" introspectable="0">
        <callback name="_clutter_gtk_reserved5">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_clutter_gtk_reserved6" introspectable="0">
        <callback name="_clutter_gtk_reserved6">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="EmbedPrivate" c:type="GtkClutterEmbedPrivate" disguised="1">
    </record>
    <interface name="Scrollable"
               c:symbol-prefix="scrollable"
               c:type="GtkClutterScrollable"
               glib:type-name="GtkClutterScrollable"
               glib:get-type="gtk_clutter_scrollable_get_type"
               glib:type-struct="ScrollableIface">
      <virtual-method name="get_adjustments"
                      invoker="get_adjustments"
                      version="0.10">
        <doc xml:whitespace="preserve">Retrieves the horizontal and vertical adjustments used to
determine the position of the scrollable actor.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="h_adjust"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:whitespace="preserve">return location for a #GtkAdjustment, or %NULL</doc>
            <type name="Gtk.Adjustment" c:type="GtkAdjustment**"/>
          </parameter>
          <parameter name="v_adjust"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:whitespace="preserve">return location for a #GtkAdjustment, or %NULL</doc>
            <type name="Gtk.Adjustment" c:type="GtkAdjustment**"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_adjustments"
                      invoker="set_adjustments"
                      version="0.10">
        <doc xml:whitespace="preserve">Sets the horizontal and vertical adjustments used to determine
the position of the scrollable actor.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="h_adjust" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">a #GtkAdjustment, or %NULL</doc>
            <type name="Gtk.Adjustment" c:type="GtkAdjustment*"/>
          </parameter>
          <parameter name="v_adjust" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">a #GtkAdjustment, or %NULL</doc>
            <type name="Gtk.Adjustment" c:type="GtkAdjustment*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="get_adjustments"
              c:identifier="gtk_clutter_scrollable_get_adjustments"
              version="0.10">
        <doc xml:whitespace="preserve">Retrieves the horizontal and vertical adjustments used to
determine the position of the scrollable actor.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="h_adjust"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:whitespace="preserve">return location for a #GtkAdjustment, or %NULL</doc>
            <type name="Gtk.Adjustment" c:type="GtkAdjustment**"/>
          </parameter>
          <parameter name="v_adjust"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:whitespace="preserve">return location for a #GtkAdjustment, or %NULL</doc>
            <type name="Gtk.Adjustment" c:type="GtkAdjustment**"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_adjustments"
              c:identifier="gtk_clutter_scrollable_set_adjustments"
              version="0.10">
        <doc xml:whitespace="preserve">Sets the horizontal and vertical adjustments used to determine
the position of the scrollable actor.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="h_adjust" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">a #GtkAdjustment, or %NULL</doc>
            <type name="Gtk.Adjustment" c:type="GtkAdjustment*"/>
          </parameter>
          <parameter name="v_adjust" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">a #GtkAdjustment, or %NULL</doc>
            <type name="Gtk.Adjustment" c:type="GtkAdjustment*"/>
          </parameter>
        </parameters>
      </method>
      <property name="hadjustment"
                version="0.10"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The #GtkAdjustment that determines the value of the
horizontal position for this scrollable actor.</doc>
        <type name="Gtk.Adjustment"/>
      </property>
      <property name="vadjustment"
                version="0.10"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The #GtkAdjustment that determines the value of the
vertical position for this scrollable actor.</doc>
        <type name="Gtk.Adjustment"/>
      </property>
    </interface>
    <record name="ScrollableIface"
            c:type="GtkClutterScrollableIface"
            glib:is-gtype-struct-for="Scrollable"
            version="0.10">
      <doc xml:whitespace="preserve">The #GtkClutterScrollableIface structure contains only private data
and should be accessed using the provided functions.</doc>
      <field name="parent_iface">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="set_adjustments">
        <callback name="set_adjustments">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="scrollable" transfer-ownership="none">
              <type name="Scrollable" c:type="GtkClutterScrollable*"/>
            </parameter>
            <parameter name="h_adjust"
                       transfer-ownership="none"
                       allow-none="1">
              <doc xml:whitespace="preserve">a #GtkAdjustment, or %NULL</doc>
              <type name="Gtk.Adjustment" c:type="GtkAdjustment*"/>
            </parameter>
            <parameter name="v_adjust"
                       transfer-ownership="none"
                       allow-none="1">
              <doc xml:whitespace="preserve">a #GtkAdjustment, or %NULL</doc>
              <type name="Gtk.Adjustment" c:type="GtkAdjustment*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_adjustments">
        <callback name="get_adjustments">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="scrollable" transfer-ownership="none">
              <type name="Scrollable" c:type="GtkClutterScrollable*"/>
            </parameter>
            <parameter name="h_adjust"
                       direction="out"
                       caller-allocates="0"
                       transfer-ownership="full">
              <doc xml:whitespace="preserve">return location for a #GtkAdjustment, or %NULL</doc>
              <type name="Gtk.Adjustment" c:type="GtkAdjustment**"/>
            </parameter>
            <parameter name="v_adjust"
                       direction="out"
                       caller-allocates="0"
                       transfer-ownership="full">
              <doc xml:whitespace="preserve">return location for a #GtkAdjustment, or %NULL</doc>
              <type name="Gtk.Adjustment" c:type="GtkAdjustment**"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="Viewport"
           c:symbol-prefix="viewport"
           c:type="GtkClutterViewport"
           version="0.8.2"
           parent="Clutter.Actor"
           glib:type-name="GtkClutterViewport"
           glib:get-type="gtk_clutter_viewport_get_type"
           glib:type-struct="ViewportClass">
      <doc xml:whitespace="preserve">The #GtkClutterViewport structure contains only private data and
should be accessed using the provided functions.</doc>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Clutter.Animatable"/>
      <implements name="Clutter.Container"/>
      <implements name="Clutter.Scriptable"/>
      <implements name="Scrollable"/>
      <implements name="Zoomable"/>
      <constructor name="new"
                   c:identifier="gtk_clutter_viewport_new"
                   version="0.10">
        <doc xml:whitespace="preserve">Creates a new #GtkClutterViewport with the given adjustments.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the newly created viewport actor</doc>
          <type name="Clutter.Actor" c:type="ClutterActor*"/>
        </return-value>
        <parameters>
          <parameter name="h_adjust" transfer-ownership="none">
            <doc xml:whitespace="preserve">horizontal adjustment, or %NULL</doc>
            <type name="Gtk.Adjustment" c:type="GtkAdjustment*"/>
          </parameter>
          <parameter name="v_adjust" transfer-ownership="none">
            <doc xml:whitespace="preserve">vertical adjustment, or %NULL</doc>
            <type name="Gtk.Adjustment" c:type="GtkAdjustment*"/>
          </parameter>
          <parameter name="z_adjust" transfer-ownership="none">
            <doc xml:whitespace="preserve">zoom adjustment, or %NULL</doc>
            <type name="Gtk.Adjustment" c:type="GtkAdjustment*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_origin"
              c:identifier="gtk_clutter_viewport_get_origin"
              version="0.10">
        <doc xml:whitespace="preserve">Retrieves the current translation factor ("origin") used when
displaying the child of @viewport.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="x" transfer-ownership="none">
            <doc xml:whitespace="preserve">return location for the X origin in pixels, or %NULL</doc>
            <type name="gfloat" c:type="gfloat*"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:whitespace="preserve">return location for the Y origin in pixels, or %NULL</doc>
            <type name="gfloat" c:type="gfloat*"/>
          </parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:whitespace="preserve">return location for the Z origin in pixels, or %NULL</doc>
            <type name="gfloat" c:type="gfloat*"/>
          </parameter>
        </parameters>
      </method>
      <property name="child"
                version="0.10"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The #ClutterActor inside the viewport.</doc>
        <type name="Clutter.Actor"/>
      </property>
      <property name="origin" version="0.10" transfer-ownership="none">
        <doc xml:whitespace="preserve">The current origin of the viewport. You should use the
vertex to convert event coordinates for the child of the
viewport.</doc>
        <type name="Clutter.Vertex"/>
      </property>
      <field name="parent_instance">
        <type name="Clutter.Actor" c:type="ClutterActor"/>
      </field>
      <field name="priv">
        <type name="ViewportPrivate" c:type="GtkClutterViewportPrivate*"/>
      </field>
    </class>
    <record name="ViewportClass"
            c:type="GtkClutterViewportClass"
            glib:is-gtype-struct-for="Viewport"
            version="0.8.2">
      <doc xml:whitespace="preserve">The #GtkClutterViewportClass structure contains only private data and
should be accessed using the provided functions.</doc>
      <field name="parent_class">
        <type name="Clutter.ActorClass" c:type="ClutterActorClass"/>
      </field>
    </record>
    <record name="ViewportPrivate"
            c:type="GtkClutterViewportPrivate"
            disguised="1">
    </record>
    <interface name="Zoomable"
               c:symbol-prefix="zoomable"
               c:type="GtkClutterZoomable"
               glib:type-name="GtkClutterZoomable"
               glib:get-type="gtk_clutter_zoomable_get_type"
               glib:type-struct="ZoomableIface">
      <virtual-method name="get_adjustment"
                      invoker="get_adjustment"
                      version="0.10">
        <doc xml:whitespace="preserve">Retrieves the adjustment used to determine the zoom factor of
the zoomable actor</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GtkAdjustment</doc>
          <type name="Gtk.Adjustment" c:type="GtkAdjustment*"/>
        </return-value>
      </virtual-method>
      <virtual-method name="set_adjustment"
                      invoker="set_adjustment"
                      version="0.10">
        <doc xml:whitespace="preserve">Sets the adjustment used to determine the zoom factor of
the zoomable actor</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="z_adjust" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">a #GtkAdjustment, or %NULL</doc>
            <type name="Gtk.Adjustment" c:type="GtkAdjustment*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="get_adjustment"
              c:identifier="gtk_clutter_zoomable_get_adjustment"
              version="0.10">
        <doc xml:whitespace="preserve">Retrieves the adjustment used to determine the zoom factor of
the zoomable actor</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GtkAdjustment</doc>
          <type name="Gtk.Adjustment" c:type="GtkAdjustment*"/>
        </return-value>
      </method>
      <method name="set_adjustment"
              c:identifier="gtk_clutter_zoomable_set_adjustment"
              version="0.10">
        <doc xml:whitespace="preserve">Sets the adjustment used to determine the zoom factor of
the zoomable actor</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="z_adjust" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">a #GtkAdjustment, or %NULL</doc>
            <type name="Gtk.Adjustment" c:type="GtkAdjustment*"/>
          </parameter>
        </parameters>
      </method>
      <property name="zadjustment"
                version="0.10"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The #GtkAdjustment that determines the value of
the zoom factor for this zoomable actor</doc>
        <type name="Gtk.Adjustment"/>
      </property>
    </interface>
    <record name="ZoomableIface"
            c:type="GtkClutterZoomableIface"
            glib:is-gtype-struct-for="Zoomable"
            version="1.0">
      <doc xml:whitespace="preserve">The #GtkClutterZoomableIface structure contains only private data</doc>
      <field name="parent_iface">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="set_adjustment">
        <callback name="set_adjustment">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="zoomable" transfer-ownership="none">
              <type name="Zoomable" c:type="GtkClutterZoomable*"/>
            </parameter>
            <parameter name="z_adjust"
                       transfer-ownership="none"
                       allow-none="1">
              <doc xml:whitespace="preserve">a #GtkAdjustment, or %NULL</doc>
              <type name="Gtk.Adjustment" c:type="GtkAdjustment*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_adjustment">
        <callback name="get_adjustment">
          <return-value transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkAdjustment</doc>
            <type name="Gtk.Adjustment" c:type="GtkAdjustment*"/>
          </return-value>
          <parameters>
            <parameter name="zoomable" transfer-ownership="none">
              <type name="Zoomable" c:type="GtkClutterZoomable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <function name="get_base_color"
              c:identifier="gtk_clutter_get_base_color"
              version="0.8">
      <doc xml:whitespace="preserve">Retrieves the base color of @widget for the given @state and copies it
into @color.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="widget" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GtkWidget</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="state" transfer-ownership="none">
          <doc xml:whitespace="preserve">a state</doc>
          <type name="Gtk.StateType" c:type="GtkStateType"/>
        </parameter>
        <parameter name="color" transfer-ownership="none">
          <doc xml:whitespace="preserve">return location for a #ClutterColor</doc>
          <type name="Clutter.Color" c:type="ClutterColor*"/>
        </parameter>
      </parameters>
    </function>
    <function name="get_bg_color"
              c:identifier="gtk_clutter_get_bg_color"
              version="0.8">
      <doc xml:whitespace="preserve">Retrieves the background color of @widget for the given @state and copies
it into @color.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="widget" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GtkWidget</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="state" transfer-ownership="none">
          <doc xml:whitespace="preserve">a state</doc>
          <type name="Gtk.StateType" c:type="GtkStateType"/>
        </parameter>
        <parameter name="color" transfer-ownership="none">
          <doc xml:whitespace="preserve">return location for a #ClutterColor</doc>
          <type name="Clutter.Color" c:type="ClutterColor*"/>
        </parameter>
      </parameters>
    </function>
    <function name="get_dark_color"
              c:identifier="gtk_clutter_get_dark_color"
              version="0.8">
      <doc xml:whitespace="preserve">Retrieves the dark color of @widget for the given @state and copies it
into @color.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="widget" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GtkWidget</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="state" transfer-ownership="none">
          <doc xml:whitespace="preserve">a state</doc>
          <type name="Gtk.StateType" c:type="GtkStateType"/>
        </parameter>
        <parameter name="color" transfer-ownership="none">
          <doc xml:whitespace="preserve">return location for a #ClutterColor</doc>
          <type name="Clutter.Color" c:type="ClutterColor*"/>
        </parameter>
      </parameters>
    </function>
    <function name="get_fg_color"
              c:identifier="gtk_clutter_get_fg_color"
              version="0.8">
      <doc xml:whitespace="preserve">Retrieves the foreground color of @widget for the given @state and copies
it into @color.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="widget" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GtkWidget</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="state" transfer-ownership="none">
          <doc xml:whitespace="preserve">a state</doc>
          <type name="Gtk.StateType" c:type="GtkStateType"/>
        </parameter>
        <parameter name="color" transfer-ownership="none">
          <doc xml:whitespace="preserve">return location for a #ClutterColor</doc>
          <type name="Clutter.Color" c:type="ClutterColor*"/>
        </parameter>
      </parameters>
    </function>
    <function name="get_light_color"
              c:identifier="gtk_clutter_get_light_color"
              version="0.8">
      <doc xml:whitespace="preserve">Retrieves the light color of @widget for the given @state and copies it
into @color.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="widget" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GtkWidget</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="state" transfer-ownership="none">
          <doc xml:whitespace="preserve">a state</doc>
          <type name="Gtk.StateType" c:type="GtkStateType"/>
        </parameter>
        <parameter name="color" transfer-ownership="none">
          <doc xml:whitespace="preserve">return location for a #ClutterColor</doc>
          <type name="Clutter.Color" c:type="ClutterColor*"/>
        </parameter>
      </parameters>
    </function>
    <function name="get_mid_color"
              c:identifier="gtk_clutter_get_mid_color"
              version="0.8">
      <doc xml:whitespace="preserve">Retrieves the mid color of @widget for the given @state and copies it
into @color.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="widget" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GtkWidget</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="state" transfer-ownership="none">
          <doc xml:whitespace="preserve">a state</doc>
          <type name="Gtk.StateType" c:type="GtkStateType"/>
        </parameter>
        <parameter name="color" transfer-ownership="none">
          <doc xml:whitespace="preserve">return location for a #ClutterColor</doc>
          <type name="Clutter.Color" c:type="ClutterColor*"/>
        </parameter>
      </parameters>
    </function>
    <function name="get_text_aa_color"
              c:identifier="gtk_clutter_get_text_aa_color"
              version="0.8">
      <doc xml:whitespace="preserve">Retrieves the text-aa color of @widget for the given @state and copies it
into @color.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="widget" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GtkWidget</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="state" transfer-ownership="none">
          <doc xml:whitespace="preserve">a state</doc>
          <type name="Gtk.StateType" c:type="GtkStateType"/>
        </parameter>
        <parameter name="color" transfer-ownership="none">
          <doc xml:whitespace="preserve">return location for a #ClutterColor</doc>
          <type name="Clutter.Color" c:type="ClutterColor*"/>
        </parameter>
      </parameters>
    </function>
    <function name="get_text_color"
              c:identifier="gtk_clutter_get_text_color"
              version="0.8">
      <doc xml:whitespace="preserve">Retrieves the text color of @widget for the given @state and copies it
into @color.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="widget" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GtkWidget</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="state" transfer-ownership="none">
          <doc xml:whitespace="preserve">a state</doc>
          <type name="Gtk.StateType" c:type="GtkStateType"/>
        </parameter>
        <parameter name="color" transfer-ownership="none">
          <doc xml:whitespace="preserve">return location for a #ClutterColor</doc>
          <type name="Clutter.Color" c:type="ClutterColor*"/>
        </parameter>
      </parameters>
    </function>
    <function name="init" c:identifier="gtk_clutter_init" version="0.8">
      <doc xml:whitespace="preserve">This function should be called instead of clutter_init() and
gtk_init().
on failure.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">%CLUTTER_INIT_SUCCESS on success, a negative integer</doc>
        <type name="Clutter.InitError" c:type="ClutterInitError"/>
      </return-value>
      <parameters>
        <parameter name="argc"
                   direction="inout"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:whitespace="preserve">pointer to the arguments count, or %NULL</doc>
          <type name="gint" c:type="int*"/>
        </parameter>
        <parameter name="argv"
                   direction="inout"
                   caller-allocates="0"
                   transfer-ownership="full"
                   allow-none="1">
          <doc xml:whitespace="preserve">pointer to the arguments vector, or %NULL</doc>
          <array length="0" c:type="char***">
            <type name="utf8"/>
          </array>
        </parameter>
      </parameters>
    </function>
    <function name="init_with_args"
              c:identifier="gtk_clutter_init_with_args"
              version="0.10"
              throws="1">
      <doc xml:whitespace="preserve">This function should be called instead of clutter_init() and
gtk_init_with_args().
on failure.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">%CLUTTER_INIT_SUCCESS on success, a negative integer</doc>
        <type name="Clutter.InitError" c:type="ClutterInitError"/>
      </return-value>
      <parameters>
        <parameter name="argc"
                   direction="inout"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:whitespace="preserve">a pointer to the number of command line arguments.</doc>
          <type name="gint" c:type="int*"/>
        </parameter>
        <parameter name="argv"
                   direction="inout"
                   caller-allocates="0"
                   transfer-ownership="full"
                   allow-none="1">
          <doc xml:whitespace="preserve">a pointer to the array of command line arguments.</doc>
          <array length="0" c:type="char***">
            <type name="utf8"/>
          </array>
        </parameter>
        <parameter name="parameter_string"
                   transfer-ownership="none"
                   allow-none="1">
          <doc xml:whitespace="preserve">a string which is displayed in the first line of &lt;option&gt;--help&lt;/option&gt; output, after &lt;literal&gt;&lt;replaceable&gt;programname&lt;/replaceable&gt; [OPTION...]&lt;/literal&gt;</doc>
          <type name="utf8" c:type="char*"/>
        </parameter>
        <parameter name="entries" transfer-ownership="none" allow-none="1">
          <doc xml:whitespace="preserve">a %NULL-terminated array of #GOptionEntry&lt;!-- --&gt;s describing the options of your program, or %NULL</doc>
          <type name="GLib.OptionEntry" c:type="GOptionEntry*"/>
        </parameter>
        <parameter name="translation_domain"
                   transfer-ownership="none"
                   allow-none="1">
          <doc xml:whitespace="preserve">a translation domain to use for translating the &lt;option&gt;--help&lt;/option&gt; output for the options in @entries with gettext(), or %NULL</doc>
          <type name="utf8" c:type="char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="texture_error_quark"
              c:identifier="gtk_clutter_texture_error_quark">
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="texture_new_from_icon_name"
              c:identifier="gtk_clutter_texture_new_from_icon_name"
              version="0.8"
              introspectable="0">
      <doc xml:whitespace="preserve">Creates a new #ClutterTexture and sets its contents to be
the @icon_name from the current icon theme.
was %NULL and @icon_name was not found.</doc>
      <return-value>
        <doc xml:whitespace="preserve">the newly created texture, or %NULL if @widget</doc>
        <type name="Clutter.Actor" c:type="ClutterActor*"/>
      </return-value>
      <parameters>
        <parameter name="widget" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GtkWidget or %NULL</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="icon_name" transfer-ownership="none">
          <doc xml:whitespace="preserve">the name of the icon</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="size" transfer-ownership="none">
          <doc xml:whitespace="preserve">the size of the icon, or -1</doc>
          <type name="Gtk.IconSize" c:type="GtkIconSize"/>
        </parameter>
      </parameters>
    </function>
    <function name="texture_new_from_pixbuf"
              c:identifier="gtk_clutter_texture_new_from_pixbuf"
              version="0.8"
              introspectable="0">
      <doc xml:whitespace="preserve">Creates a new #ClutterTexture and sets its contents with a copy
of @pixbuf.</doc>
      <return-value>
        <doc xml:whitespace="preserve">the newly created #ClutterTexture</doc>
        <type name="Clutter.Actor" c:type="ClutterActor*"/>
      </return-value>
      <parameters>
        <parameter name="pixbuf" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GdkPixbuf</doc>
          <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
        </parameter>
      </parameters>
    </function>
    <function name="texture_new_from_stock"
              c:identifier="gtk_clutter_texture_new_from_stock"
              version="0.8"
              introspectable="0">
      <doc xml:whitespace="preserve">Creates a new #ClutterTexture and sets its contents using the stock
icon @stock_id as rendered by @widget.</doc>
      <return-value>
        <doc xml:whitespace="preserve">the newly created #ClutterTexture</doc>
        <type name="Clutter.Actor" c:type="ClutterActor*"/>
      </return-value>
      <parameters>
        <parameter name="widget" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GtkWidget</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="stock_id" transfer-ownership="none">
          <doc xml:whitespace="preserve">the stock id of the icon</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="size" transfer-ownership="none">
          <doc xml:whitespace="preserve">the size of the icon, or -1</doc>
          <type name="Gtk.IconSize" c:type="GtkIconSize"/>
        </parameter>
      </parameters>
    </function>
    <function name="texture_set_from_icon_name"
              c:identifier="gtk_clutter_texture_set_from_icon_name"
              version="0.8"
              throws="1">
      <doc xml:whitespace="preserve">Sets the contents of @texture using the @icon_name from the
current icon theme.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">%TRUE on success, %FALSE on failure.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="texture" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #ClutterTexture</doc>
          <type name="Clutter.Texture" c:type="ClutterTexture*"/>
        </parameter>
        <parameter name="widget" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GtkWidget or %NULL</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="icon_name" transfer-ownership="none">
          <doc xml:whitespace="preserve">the name of the icon</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="size" transfer-ownership="none">
          <doc xml:whitespace="preserve">the icon size or -1</doc>
          <type name="Gtk.IconSize" c:type="GtkIconSize"/>
        </parameter>
      </parameters>
    </function>
    <function name="texture_set_from_pixbuf"
              c:identifier="gtk_clutter_texture_set_from_pixbuf"
              version="0.8"
              throws="1">
      <doc xml:whitespace="preserve">Sets the contents of @texture with a copy of @pixbuf.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">%TRUE on success, %FALSE on failure.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="texture" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #ClutterTexture</doc>
          <type name="Clutter.Texture" c:type="ClutterTexture*"/>
        </parameter>
        <parameter name="pixbuf" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GdkPixbuf</doc>
          <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
        </parameter>
      </parameters>
    </function>
    <function name="texture_set_from_stock"
              c:identifier="gtk_clutter_texture_set_from_stock"
              version="0.8"
              throws="1">
      <doc xml:whitespace="preserve">Sets the contents of @texture using the stock icon @stock_id, as
rendered by @widget.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">%TRUE on success, %FALSE on failure.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="texture" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #ClutterTexture</doc>
          <type name="Clutter.Texture" c:type="ClutterTexture*"/>
        </parameter>
        <parameter name="widget" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GtkWidget</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="stock_id" transfer-ownership="none">
          <doc xml:whitespace="preserve">the stock id of the icon</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="size" transfer-ownership="none">
          <doc xml:whitespace="preserve">the size of the icon, or -1</doc>
          <type name="Gtk.IconSize" c:type="GtkIconSize"/>
        </parameter>
      </parameters>
    </function>
  </namespace>
</repository>

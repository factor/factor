<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.0"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="Atk" version="1.0"/>
  <include name="Clutter" version="1.0"/>
  <include name="ClutterJson" version="1.0"/>
  <include name="Cogl" version="1.0"/>
  <include name="GL" version="1.0"/>
  <include name="GLib" version="2.0"/>
  <include name="GModule" version="2.0"/>
  <include name="GObject" version="2.0"/>
  <include name="Gdk" version="2.0"/>
  <include name="GdkPixbuf" version="2.0"/>
  <include name="Gio" version="2.0"/>
  <include name="Gtk" version="2.0"/>
  <include name="Pango" version="1.0"/>
  <include name="PangoCairo" version="1.0"/>
  <include name="PangoFT2" version="1.0"/>
  <include name="cairo" version="1.0"/>
  <include name="fontconfig" version="2.0"/>
  <include name="freetype2" version="2.0"/>
  <package name="clutter-1.0"/>
  <package name="gobject-2.0"/>
  <package name="gtk+-2.0"/>
  <namespace name="GtkClutter"
             version="0.10"
             shared-library="libclutter-gtk-0.10.so.0"
             c:prefix="GtkClutter">
    <enumeration name="ClutterGtkInitError"
                 doc="Extension of the #ClutterInitError enumeration for the integration
with GTK+"
                 version="0.8"
                 c:type="ClutterGtkInitError">
      <member name="last" value="-3" c:identifier="CLUTTER_INIT_ERROR_LAST"/>
      <member name="gtk" value="-4" c:identifier="CLUTTER_INIT_ERROR_GTK"/>
    </enumeration>
    <enumeration name="ClutterGtkTextureError"
                 doc="An enumeration of error types used in ClutterGtk texture functions"
                 version="0.10"
                 c:type="ClutterGtkTextureError">
      <member name="invalid_stock_id"
              value="0"
              c:identifier="CLUTTER_GTK_TEXTURE_INVALID_STOCK_ID"/>
      <member name="error_last"
              value="1"
              c:identifier="CLUTTER_GTK_TEXTURE_ERROR_LAST"/>
    </enumeration>
    <class name="Embed"
           c:type="GtkClutterEmbed"
           doc="A #GtkWidget containing the default Clutter stage."
           version="0.6"
           parent="Gtk.Container"
           glib:type-name="GtkClutterEmbed"
           glib:get-type="gtk_clutter_embed_get_type"
           glib:type-struct="EmbedClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new"
                   c:identifier="gtk_clutter_embed_new"
                   doc="Creates a new #GtkClutterEmbed widget. This widget can be
used to build a scene using Clutter API into a GTK+ application."
                   version="0.6">
        <return-value transfer-ownership="full">
          <type name="Embed" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="get_stage"
              c:identifier="gtk_clutter_embed_get_stage"
              doc="Retrieves the #ClutterStage from @embed. The returned stage can be
used to add actors to the Clutter scene. Multiple calls to this function
on the same #GtkClutterEmbed widget will return the same stage.
or unref the returned actor."
              version="0.6">
        <return-value transfer-ownership="none"
                      doc="a #ClutterStage. You should never destroy">
          <type name="Clutter.Actor" c:type="ClutterActor*"/>
        </return-value>
      </method>
      <field name="parent_instance">
        <type name="Gtk.Container" c:type="GtkContainer"/>
      </field>
      <field name="priv">
        <type name="EmbedPrivate" c:type="GtkClutterEmbedPrivate*"/>
      </field>
    </class>
    <record name="EmbedClass"
            c:type="GtkClutterEmbedClass"
            glib:is-gtype-struct-for="Embed"
            doc="Base class for #GtkClutterEmbed."
            version="0.6">
      <field name="parent_class">
        <type name="Gtk.ContainerClass" c:type="GtkContainerClass"/>
      </field>
      <field name="clutter_gtk_reserved1">
        <callback name="clutter_gtk_reserved1" c:type="_clutter_gtk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="clutter_gtk_reserved2">
        <callback name="clutter_gtk_reserved2" c:type="_clutter_gtk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="clutter_gtk_reserved3">
        <callback name="clutter_gtk_reserved3" c:type="_clutter_gtk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="clutter_gtk_reserved4">
        <callback name="clutter_gtk_reserved4" c:type="_clutter_gtk_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="clutter_gtk_reserved5">
        <callback name="clutter_gtk_reserved5" c:type="_clutter_gtk_reserved5">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="clutter_gtk_reserved6">
        <callback name="clutter_gtk_reserved6" c:type="_clutter_gtk_reserved6">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="EmbedPrivate" c:type="GtkClutterEmbedPrivate">
    </record>
    <interface name="Scrollable"
               c:type="GtkClutterScrollable"
               glib:type-name="GtkClutterScrollable"
               glib:get-type="gtk_clutter_scrollable_get_type"
               glib:type-struct="ScrollableIface">
      <virtual-method name="set_adjustments" invoker="set_adjustments">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="h_adjust" transfer-ownership="none">
            <type name="Gtk.Adjustment" c:type="GtkAdjustment*"/>
          </parameter>
          <parameter name="v_adjust" transfer-ownership="none">
            <type name="Gtk.Adjustment" c:type="GtkAdjustment*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_adjustments" invoker="get_adjustments">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="h_adjust" transfer-ownership="none">
            <type name="Gtk.Adjustment" c:type="GtkAdjustment**"/>
          </parameter>
          <parameter name="v_adjust" transfer-ownership="none">
            <type name="Gtk.Adjustment" c:type="GtkAdjustment**"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="set_adjustments"
              c:identifier="gtk_clutter_scrollable_set_adjustments"
              doc="Sets the horizontal and vertical adjustments used to determine
the position of the scrollable actor."
              version="0.10">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="h_adjust"
                     transfer-ownership="none"
                     allow-none="1"
                     doc="a #GtkAdjustment, or %NULL">
            <type name="Gtk.Adjustment" c:type="GtkAdjustment*"/>
          </parameter>
          <parameter name="v_adjust"
                     transfer-ownership="none"
                     allow-none="1"
                     doc="a #GtkAdjustment, or %NULL">
            <type name="Gtk.Adjustment" c:type="GtkAdjustment*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_adjustments"
              c:identifier="gtk_clutter_scrollable_get_adjustments"
              doc="Retrieves the horizontal and vertical adjustments used to
determine the position of the scrollable actor."
              version="0.10">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="h_adjust"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     doc="return location for a #GtkAdjustment, or %NULL">
            <type name="Gtk.Adjustment" c:type="GtkAdjustment**"/>
          </parameter>
          <parameter name="v_adjust"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     doc="return location for a #GtkAdjustment, or %NULL">
            <type name="Gtk.Adjustment" c:type="GtkAdjustment**"/>
          </parameter>
        </parameters>
      </method>
      <property name="hadjustment"
                version="0.10"
                writable="1"
                construct="1"
                doc="The #GtkAdjustment that determines the value of the
horizontal position for this scrollable actor.">
        <type name="Gtk.Adjustment" c:type="GtkAdjustment"/>
      </property>
      <property name="vadjustment"
                version="0.10"
                writable="1"
                construct="1"
                doc="The #GtkAdjustment that determines the value of the
vertical position for this scrollable actor.">
        <type name="Gtk.Adjustment" c:type="GtkAdjustment"/>
      </property>
    </interface>
    <record name="ScrollableIface"
            c:type="GtkClutterScrollableIface"
            glib:is-gtype-struct-for="Scrollable"
            doc="The #GtkClutterScrollableIface structure contains only private data
and should be accessed using the provided functions."
            version="0.10">
      <field name="parent_iface">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="set_adjustments">
        <callback name="set_adjustments" c:type="set_adjustments">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="scrollable" transfer-ownership="none">
              <type name="Scrollable" c:type="GtkClutterScrollable*"/>
            </parameter>
            <parameter name="h_adjust" transfer-ownership="none">
              <type name="Gtk.Adjustment" c:type="GtkAdjustment*"/>
            </parameter>
            <parameter name="v_adjust" transfer-ownership="none">
              <type name="Gtk.Adjustment" c:type="GtkAdjustment*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_adjustments">
        <callback name="get_adjustments" c:type="get_adjustments">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="scrollable" transfer-ownership="none">
              <type name="Scrollable" c:type="GtkClutterScrollable*"/>
            </parameter>
            <parameter name="h_adjust" transfer-ownership="none">
              <type name="Gtk.Adjustment" c:type="GtkAdjustment**"/>
            </parameter>
            <parameter name="v_adjust" transfer-ownership="none">
              <type name="Gtk.Adjustment" c:type="GtkAdjustment**"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="Viewport"
           c:type="GtkClutterViewport"
           doc="The #GtkClutterViewport structure contains only private data and
should be accessed using the provided functions."
           version="0.8.2"
           parent="Clutter.Actor"
           glib:type-name="GtkClutterViewport"
           glib:get-type="gtk_clutter_viewport_get_type"
           glib:type-struct="ViewportClass">
      <implements name="Clutter.Container"/>
      <implements name="Clutter.Scriptable"/>
      <implements name="Scrollable"/>
      <implements name="Zoomable"/>
      <constructor name="new"
                   c:identifier="gtk_clutter_viewport_new"
                   doc="Creates a new #GtkClutterViewport with the given adjustments."
                   version="0.10">
        <return-value transfer-ownership="full">
          <type name="Viewport" c:type="ClutterActor*"/>
        </return-value>
        <parameters>
          <parameter name="h_adjust" transfer-ownership="none">
            <type name="Gtk.Adjustment" c:type="GtkAdjustment*"/>
          </parameter>
          <parameter name="v_adjust" transfer-ownership="none">
            <type name="Gtk.Adjustment" c:type="GtkAdjustment*"/>
          </parameter>
          <parameter name="z_adjust" transfer-ownership="none">
            <type name="Gtk.Adjustment" c:type="GtkAdjustment*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_origin"
              c:identifier="gtk_clutter_viewport_get_origin"
              doc="Retrieves the current translation factor (&quot;origin&quot;) used when
displaying the child of @viewport."
              version="0.10">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="x"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <type name="float" c:type="gfloat*"/>
          </parameter>
          <parameter name="y"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <type name="float" c:type="gfloat*"/>
          </parameter>
          <parameter name="z"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <type name="float" c:type="gfloat*"/>
          </parameter>
        </parameters>
      </method>
      <property name="child"
                version="0.10"
                writable="1"
                doc="The #ClutterActor inside the viewport.">
        <type name="Clutter.Actor" c:type="ClutterActor"/>
      </property>
      <property name="origin"
                version="0.10"
                doc="The current origin of the viewport. You should use the
vertex to convert event coordinates for the child of the
viewport.">
        <type name="Clutter.Vertex" c:type="ClutterVertex"/>
      </property>
      <field name="parent_instance">
        <type name="Clutter.Actor" c:type="ClutterActor"/>
      </field>
      <field name="priv">
        <type name="ViewportPrivate" c:type="GtkClutterViewportPrivate*"/>
      </field>
    </class>
    <record name="ViewportClass"
            c:type="GtkClutterViewportClass"
            glib:is-gtype-struct-for="Viewport"
            doc="The #GtkClutterViewportClass structure contains only private data and
should be accessed using the provided functions."
            version="0.8.2">
      <field name="parent_class">
        <type name="Clutter.ActorClass" c:type="ClutterActorClass"/>
      </field>
    </record>
    <record name="ViewportPrivate" c:type="GtkClutterViewportPrivate">
    </record>
    <interface name="Zoomable"
               c:type="GtkClutterZoomable"
               glib:type-name="GtkClutterZoomable"
               glib:get-type="gtk_clutter_zoomable_get_type"
               glib:type-struct="ZoomableIface">
      <virtual-method name="set_adjustment" invoker="set_adjustment">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="z_adjust" transfer-ownership="none">
            <type name="Gtk.Adjustment" c:type="GtkAdjustment*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_adjustment" invoker="get_adjustment">
        <return-value transfer-ownership="full">
          <type name="Gtk.Adjustment" c:type="GtkAdjustment*"/>
        </return-value>
      </virtual-method>
      <method name="set_adjustment"
              c:identifier="gtk_clutter_zoomable_set_adjustment"
              doc="Sets the adjustment used to determine the zoom factor of
the zoomable actor"
              version="0.10">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="z_adjust"
                     transfer-ownership="none"
                     allow-none="1"
                     doc="a #GtkAdjustment, or %NULL">
            <type name="Gtk.Adjustment" c:type="GtkAdjustment*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_adjustment"
              c:identifier="gtk_clutter_zoomable_get_adjustment"
              doc="Retrieves the adjustment used to determine the zoom factor of
the zoomable actor"
              version="0.10">
        <return-value transfer-ownership="none" doc="a #GtkAdjustment">
          <type name="Gtk.Adjustment" c:type="GtkAdjustment*"/>
        </return-value>
      </method>
      <property name="zadjustment"
                version="0.10"
                writable="1"
                construct="1"
                doc="The #GtkAdjustment that determines the value of
the zoom factor for this zoomable actor">
        <type name="Gtk.Adjustment" c:type="GtkAdjustment"/>
      </property>
    </interface>
    <record name="ZoomableIface"
            c:type="GtkClutterZoomableIface"
            glib:is-gtype-struct-for="Zoomable"
            doc="The #GtkClutterZoomableIface structure contains only private data"
            version="1.0">
      <field name="parent_iface">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="set_adjustment">
        <callback name="set_adjustment" c:type="set_adjustment">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="zoomable" transfer-ownership="none">
              <type name="Zoomable" c:type="GtkClutterZoomable*"/>
            </parameter>
            <parameter name="z_adjust" transfer-ownership="none">
              <type name="Gtk.Adjustment" c:type="GtkAdjustment*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_adjustment">
        <callback name="get_adjustment" c:type="get_adjustment">
          <return-value transfer-ownership="full">
            <type name="Gtk.Adjustment" c:type="GtkAdjustment*"/>
          </return-value>
          <parameters>
            <parameter name="zoomable" transfer-ownership="none">
              <type name="Zoomable" c:type="GtkClutterZoomable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <function name="get_base_color"
              c:identifier="gtk_clutter_get_base_color"
              doc="Retrieves the base color of @widget for the given @state and copies it
into @color."
              version="0.8">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="widget" transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="state" transfer-ownership="none">
          <type name="Gtk.StateType" c:type="GtkStateType"/>
        </parameter>
        <parameter name="color" transfer-ownership="none">
          <type name="Clutter.Color" c:type="ClutterColor*"/>
        </parameter>
      </parameters>
    </function>
    <function name="get_bg_color"
              c:identifier="gtk_clutter_get_bg_color"
              doc="Retrieves the background color of @widget for the given @state and copies
it into @color."
              version="0.8">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="widget" transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="state" transfer-ownership="none">
          <type name="Gtk.StateType" c:type="GtkStateType"/>
        </parameter>
        <parameter name="color" transfer-ownership="none">
          <type name="Clutter.Color" c:type="ClutterColor*"/>
        </parameter>
      </parameters>
    </function>
    <function name="get_dark_color"
              c:identifier="gtk_clutter_get_dark_color"
              doc="Retrieves the dark color of @widget for the given @state and copies it
into @color."
              version="0.8">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="widget" transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="state" transfer-ownership="none">
          <type name="Gtk.StateType" c:type="GtkStateType"/>
        </parameter>
        <parameter name="color" transfer-ownership="none">
          <type name="Clutter.Color" c:type="ClutterColor*"/>
        </parameter>
      </parameters>
    </function>
    <function name="get_fg_color"
              c:identifier="gtk_clutter_get_fg_color"
              doc="Retrieves the foreground color of @widget for the given @state and copies
it into @color."
              version="0.8">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="widget" transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="state" transfer-ownership="none">
          <type name="Gtk.StateType" c:type="GtkStateType"/>
        </parameter>
        <parameter name="color" transfer-ownership="none">
          <type name="Clutter.Color" c:type="ClutterColor*"/>
        </parameter>
      </parameters>
    </function>
    <function name="get_light_color"
              c:identifier="gtk_clutter_get_light_color"
              doc="Retrieves the light color of @widget for the given @state and copies it
into @color."
              version="0.8">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="widget" transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="state" transfer-ownership="none">
          <type name="Gtk.StateType" c:type="GtkStateType"/>
        </parameter>
        <parameter name="color" transfer-ownership="none">
          <type name="Clutter.Color" c:type="ClutterColor*"/>
        </parameter>
      </parameters>
    </function>
    <function name="get_mid_color"
              c:identifier="gtk_clutter_get_mid_color"
              doc="Retrieves the mid color of @widget for the given @state and copies it
into @color."
              version="0.8">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="widget" transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="state" transfer-ownership="none">
          <type name="Gtk.StateType" c:type="GtkStateType"/>
        </parameter>
        <parameter name="color" transfer-ownership="none">
          <type name="Clutter.Color" c:type="ClutterColor*"/>
        </parameter>
      </parameters>
    </function>
    <function name="get_text_aa_color"
              c:identifier="gtk_clutter_get_text_aa_color"
              doc="Retrieves the text-aa color of @widget for the given @state and copies it
into @color."
              version="0.8">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="widget" transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="state" transfer-ownership="none">
          <type name="Gtk.StateType" c:type="GtkStateType"/>
        </parameter>
        <parameter name="color" transfer-ownership="none">
          <type name="Clutter.Color" c:type="ClutterColor*"/>
        </parameter>
      </parameters>
    </function>
    <function name="get_text_color"
              c:identifier="gtk_clutter_get_text_color"
              doc="Retrieves the text color of @widget for the given @state and copies it
into @color."
              version="0.8">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="widget" transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="state" transfer-ownership="none">
          <type name="Gtk.StateType" c:type="GtkStateType"/>
        </parameter>
        <parameter name="color" transfer-ownership="none">
          <type name="Clutter.Color" c:type="ClutterColor*"/>
        </parameter>
      </parameters>
    </function>
    <function name="init"
              c:identifier="gtk_clutter_init"
              doc="This function should be called instead of clutter_init() and
gtk_init().
on failure."
              version="0.8">
      <return-value transfer-ownership="full">
        <type name="Clutter.InitError" c:type="ClutterInitError"/>
      </return-value>
      <parameters>
        <parameter name="argc"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <type name="int" c:type="int*"/>
        </parameter>
        <parameter name="argv" transfer-ownership="none">
          <type name="utf8" c:type="char***"/>
        </parameter>
      </parameters>
    </function>
    <function name="init_with_args"
              c:identifier="gtk_clutter_init_with_args"
              doc="This function should be called instead of clutter_init() and
gtk_init_with_args().
on failure."
              version="0.10"
              throws="1">
      <return-value transfer-ownership="full">
        <type name="Clutter.InitError" c:type="ClutterInitError"/>
      </return-value>
      <parameters>
        <parameter name="argc"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <type name="int" c:type="int*"/>
        </parameter>
        <parameter name="argv" transfer-ownership="none">
          <type name="utf8" c:type="char***"/>
        </parameter>
        <parameter name="parameter_string"
                   transfer-ownership="none"
                   doc=" the first line of &lt;option&gt;--help&lt;/option&gt; output, after &lt;literal&gt;&lt;replaceable&gt;programname&lt;/replaceable&gt; [OPTION...]&lt;/literal&gt;">
          <type name="utf8" c:type="char*"/>
        </parameter>
        <parameter name="entries"
                   transfer-ownership="none"
                   doc=" describing the options of your program">
          <type name="GLib.OptionEntry" c:type="GOptionEntry*"/>
        </parameter>
        <parameter name="translation_domain"
                   transfer-ownership="none"
                   doc=" the &lt;option&gt;--help&lt;/option&gt; output for the options in @entries with gettext(), or %NULL">
          <type name="utf8" c:type="char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="texture_new_from_icon_name"
              c:identifier="gtk_clutter_texture_new_from_icon_name"
              doc="Creates a new #ClutterTexture and sets its contents to be
the @icon_name from the current icon theme.
was %NULL and @icon_name was not found."
              version="0.8">
      <return-value transfer-ownership="full">
        <type name="Clutter.Actor" c:type="ClutterActor*"/>
      </return-value>
      <parameters>
        <parameter name="widget" transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="icon_name" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="size" transfer-ownership="none">
          <type name="Gtk.IconSize" c:type="GtkIconSize"/>
        </parameter>
      </parameters>
    </function>
    <function name="texture_new_from_pixbuf"
              c:identifier="gtk_clutter_texture_new_from_pixbuf"
              doc="Creates a new #ClutterTexture and sets its contents with a copy
of @pixbuf."
              version="0.8">
      <return-value transfer-ownership="full">
        <type name="Clutter.Actor" c:type="ClutterActor*"/>
      </return-value>
      <parameters>
        <parameter name="pixbuf" transfer-ownership="none">
          <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
        </parameter>
      </parameters>
    </function>
    <function name="texture_new_from_stock"
              c:identifier="gtk_clutter_texture_new_from_stock"
              doc="Creates a new #ClutterTexture and sets its contents using the stock
icon @stock_id as rendered by @widget."
              version="0.8">
      <return-value transfer-ownership="full">
        <type name="Clutter.Actor" c:type="ClutterActor*"/>
      </return-value>
      <parameters>
        <parameter name="widget" transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="stock_id" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="size" transfer-ownership="none">
          <type name="Gtk.IconSize" c:type="GtkIconSize"/>
        </parameter>
      </parameters>
    </function>
    <function name="texture_set_from_icon_name"
              c:identifier="gtk_clutter_texture_set_from_icon_name"
              doc="Sets the contents of @texture using the @icon_name from the
current icon theme."
              version="0.8"
              throws="1">
      <return-value transfer-ownership="none">
        <type name="boolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="texture" transfer-ownership="none">
          <type name="Clutter.Texture" c:type="ClutterTexture*"/>
        </parameter>
        <parameter name="widget" transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="icon_name" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="size" transfer-ownership="none">
          <type name="Gtk.IconSize" c:type="GtkIconSize"/>
        </parameter>
      </parameters>
    </function>
    <function name="texture_set_from_pixbuf"
              c:identifier="gtk_clutter_texture_set_from_pixbuf"
              doc="Sets the contents of @texture with a copy of @pixbuf."
              version="0.8"
              throws="1">
      <return-value transfer-ownership="none">
        <type name="boolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="texture" transfer-ownership="none">
          <type name="Clutter.Texture" c:type="ClutterTexture*"/>
        </parameter>
        <parameter name="pixbuf" transfer-ownership="none">
          <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
        </parameter>
      </parameters>
    </function>
    <function name="texture_set_from_stock"
              c:identifier="gtk_clutter_texture_set_from_stock"
              doc="Sets the contents of @texture using the stock icon @stock_id, as
rendered by @widget."
              version="0.8"
              throws="1">
      <return-value transfer-ownership="none">
        <type name="boolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="texture" transfer-ownership="none">
          <type name="Clutter.Texture" c:type="ClutterTexture*"/>
        </parameter>
        <parameter name="widget" transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="stock_id" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="size" transfer-ownership="none">
          <type name="Gtk.IconSize" c:type="GtkIconSize"/>
        </parameter>
      </parameters>
    </function>
  </namespace>
</repository>

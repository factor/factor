<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.0"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="GLib" version="2.0"/>
  <include name="GObject" version="2.0"/>
  <package name="gobject-2.0"/>
  <namespace name="ClutterJson"
             version="1.0"
             shared-library="libclutter-glx-1.0.so.0"
             c:prefix="ClutterJson">
    <record name="JsonArray"
            c:type="JsonArray"
            doc="A JSON array type. The contents of the #JsonArray structure are private
and should only be accessed by the provided API"
            glib:type-name="JsonArray"
            glib:get-type="json_array_get_type">
      <constructor name="new"
                   c:identifier="json_array_new"
                   doc="Creates a new #JsonArray.">
        <return-value transfer-ownership="full">
          <type name="JsonArray" c:type="JsonArray*"/>
        </return-value>
      </constructor>
      <method name="ref"
              c:identifier="json_array_ref"
              doc="Increase by one the reference count of a #JsonArray.
increased by one.">
        <return-value transfer-ownership="full">
          <type name="JsonArray" c:type="JsonArray*"/>
        </return-value>
      </method>
      <method name="unref"
              c:identifier="json_array_unref"
              doc="Decreases by one the reference count of a #JsonArray. If the
reference count reaches zero, the array is destroyed and all
its allocated resources are freed.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="add_element"
              c:identifier="json_array_add_element"
              doc="Appends @node inside @array. The array will take ownership of the
#JsonNode.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="node" transfer-ownership="none">
            <type name="JsonNode" c:type="JsonNode*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_int_element"
              c:identifier="json_array_add_int_element"
              doc="Conveniently adds an integer @value into @array"
              version="0.8">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="value" transfer-ownership="none">
            <type name="int64" c:type="gint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_double_element"
              c:identifier="json_array_add_double_element"
              doc="Conveniently adds a floating point @value into @array"
              version="0.8">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="value" transfer-ownership="none">
            <type name="double" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_boolean_element"
              c:identifier="json_array_add_boolean_element"
              doc="Conveniently adds a boolean @value into @array"
              version="0.8">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="value" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_string_element"
              c:identifier="json_array_add_string_element"
              doc="Conveniently adds a string @value into @array"
              version="0.8">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="value" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_null_element"
              c:identifier="json_array_add_null_element"
              doc="Conveniently adds a null element into @array"
              version="0.8">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="add_array_element"
              c:identifier="json_array_add_array_element"
              doc="Conveniently adds an array into @array. The @array takes ownership
of the newly added #JsonArray"
              version="0.8">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="value" transfer-ownership="none">
            <type name="JsonArray" c:type="JsonArray*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_object_element"
              c:identifier="json_array_add_object_element"
              doc="Conveniently adds an object into @array. The @array takes ownership
of the newly added #JsonObject"
              version="0.8">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="value" transfer-ownership="none">
            <type name="JsonObject" c:type="JsonObject*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_elements"
              c:identifier="json_array_get_elements"
              doc="Gets the elements of a #JsonArray as a list of #JsonNode&lt;!-- --&gt;s.
contents of the list are owned by the array and should never be
modified or freed. Use g_list_free() on the returned list when
done using it">
        <return-value transfer-ownership="full">
          <type name="GLib.List" c:type="GList*"/>
        </return-value>
      </method>
      <method name="get_element"
              c:identifier="json_array_get_element"
              doc="Retrieves the #JsonNode containing the value of the element at @index_
inside a #JsonArray.">
        <return-value transfer-ownership="full">
          <type name="JsonNode" c:type="JsonNode*"/>
        </return-value>
        <parameters>
          <parameter name="index_" transfer-ownership="none">
            <type name="uint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_int_element"
              c:identifier="json_array_get_int_element"
              doc="Conveniently retrieves the integer value of the element at @index_
inside @array"
              version="0.8">
        <return-value transfer-ownership="none">
          <type name="int64" c:type="gint64"/>
        </return-value>
        <parameters>
          <parameter name="index_" transfer-ownership="none">
            <type name="uint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_double_element"
              c:identifier="json_array_get_double_element"
              doc="Conveniently retrieves the floating point value of the element at"
              version="0.8">
        <return-value transfer-ownership="none">
          <type name="double" c:type="gdouble"/>
        </return-value>
        <parameters>
          <parameter name="index_" transfer-ownership="none">
            <type name="uint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_boolean_element"
              c:identifier="json_array_get_boolean_element"
              doc="Conveniently retrieves the boolean value of the element at @index_
inside @array"
              version="0.8">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="index_" transfer-ownership="none">
            <type name="uint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_string_element"
              c:identifier="json_array_get_string_element"
              doc="Conveniently retrieves the string value of the element at @index_
inside @array
the #JsonArray and should not be modified or freed"
              version="0.8">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="index_" transfer-ownership="none">
            <type name="uint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_null_element"
              c:identifier="json_array_get_null_element"
              doc="Conveniently retrieves whether the element at @index_ is set to null"
              version="0.8">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="index_" transfer-ownership="none">
            <type name="uint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_array_element"
              c:identifier="json_array_get_array_element"
              doc="Conveniently retrieves the array from the element at @index_
inside @array"
              version="0.8">
        <return-value transfer-ownership="full">
          <type name="JsonArray" c:type="JsonArray*"/>
        </return-value>
        <parameters>
          <parameter name="index_" transfer-ownership="none">
            <type name="uint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_object_element"
              c:identifier="json_array_get_object_element"
              doc="Conveniently retrieves the object from the element at @index_
inside @array"
              version="0.8">
        <return-value transfer-ownership="full">
          <type name="JsonObject" c:type="JsonObject*"/>
        </return-value>
        <parameters>
          <parameter name="index_" transfer-ownership="none">
            <type name="uint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_element"
              c:identifier="json_array_dup_element"
              doc="Retrieves a copy of the #JsonNode containing the value of the
element at @index_ inside a #JsonArray
Use json_node_free() when done."
              version="0.6">
        <return-value transfer-ownership="full">
          <type name="JsonNode" c:type="JsonNode*"/>
        </return-value>
        <parameters>
          <parameter name="index_" transfer-ownership="none">
            <type name="uint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_element"
              c:identifier="json_array_remove_element"
              doc="Removes the #JsonNode inside @array at @index_ freeing its allocated
resources.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="index_" transfer-ownership="none">
            <type name="uint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_length"
              c:identifier="json_array_get_length"
              doc="Retrieves the length of a #JsonArray">
        <return-value transfer-ownership="none">
          <type name="uint" c:type="guint"/>
        </return-value>
      </method>
      <method name="foreach_element"
              c:identifier="json_array_foreach_element"
              doc="Iterates over all elements of @array and calls @func on
each one of them.
It is safe to change the value of a #JsonNode of the @array
from within the iterator @func, but it is not safe to add or
remove elements from the @array."
              version="0.8">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="func"
                     transfer-ownership="none"
                     scope="call"
                     closure="2">
            <type name="JsonArrayForeach" c:type="JsonArrayForeach"/>
          </parameter>
          <parameter name="data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <callback name="JsonArrayForeach"
              c:type="JsonArrayForeach"
              doc="The function to be passed to json_array_foreach_element(). You
should not add or remove elements to and from @array within
this function. It is safe to change the value of @element_node."
              version="0.8">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="array" transfer-ownership="none">
          <type name="JsonArray" c:type="JsonArray*"/>
        </parameter>
        <parameter name="index_" transfer-ownership="none">
          <type name="uint" c:type="guint"/>
        </parameter>
        <parameter name="element_node" transfer-ownership="none">
          <type name="JsonNode" c:type="JsonNode*"/>
        </parameter>
        <parameter name="user_data" transfer-ownership="none" closure="3">
          <type name="any" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <class name="JsonGenerator"
           c:type="JsonGenerator"
           doc="JSON data streams generator. The contents of the #JsonGenerator structure
are private and should only be accessed via the provided API."
           parent="GObject.Object"
           glib:type-name="JsonGenerator"
           glib:get-type="json_generator_get_type"
           glib:type-struct="JsonGeneratorClass">
      <constructor name="new"
                   c:identifier="json_generator_new"
                   doc="Creates a new #JsonGenerator. You can use this object to generate a
JSON data stream starting from a data object model composed by
#JsonNode&lt;!-- --&gt;s.">
        <return-value transfer-ownership="full">
          <type name="JsonGenerator" c:type="JsonGenerator*"/>
        </return-value>
      </constructor>
      <method name="to_data"
              c:identifier="json_generator_to_data"
              doc="Generates a JSON data stream from @generator and returns it as a
buffer.
g_free() to free the allocated resources.">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="length"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <type name="size_t" c:type="gsize*"/>
          </parameter>
        </parameters>
      </method>
      <method name="to_file"
              c:identifier="json_generator_to_file"
              doc="Creates a JSON data stream and puts it inside @filename, overwriting the
current file contents. This operation is atomic."
              throws="1">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="filename" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_root"
              c:identifier="json_generator_set_root"
              doc="Sets @node as the root of the JSON data stream to be serialized by
the #JsonGenerator.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="node" transfer-ownership="none">
            <type name="JsonNode" c:type="JsonNode*"/>
          </parameter>
        </parameters>
      </method>
      <property name="indent"
                writable="1"
                doc="Number of spaces to be used to indent when pretty printing.">
        <type name="uint" c:type="guint"/>
      </property>
      <property name="pretty"
                writable="1"
                doc="Whether the output should be &quot;pretty-printed&quot;, with indentation and
newlines. The indentation level can be controlled by using the
JsonGenerator:indent property">
        <type name="boolean" c:type="gboolean"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="JsonGeneratorPrivate" c:type="JsonGeneratorPrivate*"/>
      </field>
    </class>
    <record name="JsonGeneratorClass"
            c:type="JsonGeneratorClass"
            glib:is-gtype-struct-for="JsonGenerator"
            doc="#JsonGenerator class">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="json_reserved1">
        <callback name="json_reserved1" c:type="_json_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="json_reserved2">
        <callback name="json_reserved2" c:type="_json_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="json_reserved3">
        <callback name="json_reserved3" c:type="_json_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="json_reserved4">
        <callback name="json_reserved4" c:type="_json_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="JsonGeneratorPrivate" c:type="JsonGeneratorPrivate">
    </record>
    <record name="JsonNode"
            c:type="JsonNode"
            doc="A generic container of JSON data types. The contents of the #JsonNode
structure are private and should only be accessed via the provided
functions and never directly."
            glib:type-name="JsonNode"
            glib:get-type="json_node_get_type">
      <constructor name="new"
                   c:identifier="json_node_new"
                   doc="Creates a new #JsonNode of @type.">
        <return-value transfer-ownership="full">
          <type name="JsonNode" c:type="JsonNode*"/>
        </return-value>
        <parameters>
          <parameter name="type" transfer-ownership="none">
            <type name="JsonNodeType" c:type="JsonNodeType"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="copy"
              c:identifier="json_node_copy"
              doc="Copies @node. If the node contains complex data types then the reference
count of the objects is increased.">
        <return-value transfer-ownership="full">
          <type name="JsonNode" c:type="JsonNode*"/>
        </return-value>
      </method>
      <method name="free"
              c:identifier="json_node_free"
              doc="Frees the resources allocated by @node.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="get_node_type"
              c:identifier="json_node_get_node_type"
              doc="Retrieves the #JsonNodeType of @node"
              version="0.8">
        <return-value transfer-ownership="full">
          <type name="JsonNodeType" c:type="JsonNodeType"/>
        </return-value>
      </method>
      <method name="get_value_type"
              c:identifier="json_node_get_value_type"
              doc="Returns the #GType of the payload of the node."
              version="0.4">
        <return-value transfer-ownership="none">
          <type name="GType" c:type="GType"/>
        </return-value>
      </method>
      <method name="get_parent"
              c:identifier="json_node_get_parent"
              doc="Retrieves the parent #JsonNode of @node.">
        <return-value transfer-ownership="full">
          <type name="JsonNode" c:type="JsonNode*"/>
        </return-value>
      </method>
      <method name="type_name"
              c:identifier="json_node_type_name"
              doc="Retrieves the user readable name of the data type contained by @node.
is owned by the node and should never be modified or freed">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="set_object"
              c:identifier="json_node_set_object"
              doc="Sets @objects inside @node. The reference count of @object is increased.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="JsonObject" c:type="JsonObject*"/>
          </parameter>
        </parameters>
      </method>
      <method name="take_object"
              c:identifier="json_node_take_object"
              doc="Sets @object inside @node. The reference count of @object is not increased.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="JsonObject" c:type="JsonObject*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_object"
              c:identifier="json_node_get_object"
              doc="Retrieves the #JsonObject stored inside a #JsonNode">
        <return-value transfer-ownership="full">
          <type name="JsonObject" c:type="JsonObject*"/>
        </return-value>
      </method>
      <method name="dup_object"
              c:identifier="json_node_dup_object"
              doc="Retrieves the #JsonObject inside @node. The reference count of
the returned object is increased.">
        <return-value transfer-ownership="full">
          <type name="JsonObject" c:type="JsonObject*"/>
        </return-value>
      </method>
      <method name="set_array"
              c:identifier="json_node_set_array"
              doc="Sets @array inside @node and increases the #JsonArray reference count">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="array" transfer-ownership="none">
            <type name="JsonArray" c:type="JsonArray*"/>
          </parameter>
        </parameters>
      </method>
      <method name="take_array"
              c:identifier="json_node_take_array"
              doc="Sets @array into @node without increasing the #JsonArray reference count.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="array" transfer-ownership="none">
            <type name="JsonArray" c:type="JsonArray*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_array"
              c:identifier="json_node_get_array"
              doc="Retrieves the #JsonArray stored inside a #JsonNode">
        <return-value transfer-ownership="full">
          <type name="JsonArray" c:type="JsonArray*"/>
        </return-value>
      </method>
      <method name="dup_array" c:identifier="json_node_dup_array">
        <return-value transfer-ownership="full">
          <type name="JsonArray" c:type="JsonArray*"/>
        </return-value>
      </method>
      <method name="set_value"
              c:identifier="json_node_set_value"
              doc="Sets @value inside @node. The passed #GValue is copied into the #JsonNode">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="value" transfer-ownership="none">
            <type name="GObject.Value" c:type="GValue*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_value"
              c:identifier="json_node_get_value"
              doc="Retrieves a value from a #JsonNode and copies into @value. When done
using it, call g_value_unset() on the #GValue.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="value" transfer-ownership="none">
            <type name="GObject.Value" c:type="GValue*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_string"
              c:identifier="json_node_set_string"
              doc="Sets @value as the string content of the @node, replacing any existing
content.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="value" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_string"
              c:identifier="json_node_get_string"
              doc="Gets the string value stored inside a #JsonNode">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="dup_string"
              c:identifier="json_node_dup_string"
              doc="Gets a copy of the string value stored inside a #JsonNode
the #JsonNode contents">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="set_int"
              c:identifier="json_node_set_int"
              doc="Sets @value as the integer content of the @node, replacing any existing
content.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="value" transfer-ownership="none">
            <type name="int64" c:type="gint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_int"
              c:identifier="json_node_get_int"
              doc="Gets the integer value stored inside a #JsonNode">
        <return-value transfer-ownership="none">
          <type name="int64" c:type="gint64"/>
        </return-value>
      </method>
      <method name="set_double"
              c:identifier="json_node_set_double"
              doc="Sets @value as the double content of the @node, replacing any existing
content.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="value" transfer-ownership="none">
            <type name="double" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_double"
              c:identifier="json_node_get_double"
              doc="Gets the double value stored inside a #JsonNode">
        <return-value transfer-ownership="none">
          <type name="double" c:type="gdouble"/>
        </return-value>
      </method>
      <method name="set_boolean"
              c:identifier="json_node_set_boolean"
              doc="Sets @value as the boolean content of the @node, replacing any existing
content.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="value" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_boolean"
              c:identifier="json_node_get_boolean"
              doc="Gets the boolean value stored inside a #JsonNode">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="is_null"
              c:identifier="json_node_is_null"
              doc="Checks whether @node is a %JSON_NODE_NULL
&lt;note&gt;A null node is not the same as a %NULL #JsonNode&lt;/note&gt;"
              version="0.8">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
      </method>
    </record>
    <enumeration name="JsonNodeType"
                 doc="Indicates the content of a #JsonNode."
                 c:type="JsonNodeType">
      <member name="object" value="0" c:identifier="JSON_NODE_OBJECT"/>
      <member name="array" value="1" c:identifier="JSON_NODE_ARRAY"/>
      <member name="value" value="2" c:identifier="JSON_NODE_VALUE"/>
      <member name="null" value="3" c:identifier="JSON_NODE_NULL"/>
    </enumeration>
    <record name="JsonObject"
            c:type="JsonObject"
            doc="A JSON object type. The contents of the #JsonObject structure are private
and should only be accessed by the provided API"
            glib:type-name="JsonObject"
            glib:get-type="json_object_get_type">
      <constructor name="new"
                   c:identifier="json_object_new"
                   doc="Creates a new #JsonObject, an JSON object type representation.">
        <return-value transfer-ownership="full">
          <type name="JsonObject" c:type="JsonObject*"/>
        </return-value>
      </constructor>
      <method name="ref"
              c:identifier="json_object_ref"
              doc="Increase by one the reference count of a #JsonObject.
increased by one.">
        <return-value transfer-ownership="full">
          <type name="JsonObject" c:type="JsonObject*"/>
        </return-value>
      </method>
      <method name="unref"
              c:identifier="json_object_unref"
              doc="Decreases by one the reference count of a #JsonObject. If the
reference count reaches zero, the object is destroyed and all
its allocated resources are freed.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="add_member"
              c:identifier="json_object_add_member"
              doc="Adds a member named @member_name and containing @node into a #JsonObject.
The object will take ownership of the #JsonNode.
This function will return if the @object already contains a member"
              deprecated="Use json_object_set_member() instead"
              deprecated-version="0.8">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="member_name" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="node" transfer-ownership="none">
            <type name="JsonNode" c:type="JsonNode*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_member"
              c:identifier="json_object_set_member"
              doc="Sets @node as the value of @member_name inside @object.
If @object already contains a member called @member_name then
the member&apos;s current value is overwritten. Otherwise, a new
member is added to @object."
              version="0.8">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="member_name" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="node" transfer-ownership="none">
            <type name="JsonNode" c:type="JsonNode*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_int_member"
              c:identifier="json_object_set_int_member"
              doc="Convenience function for setting an integer @value of"
              version="0.8">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="member_name" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="int64" c:type="gint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_double_member"
              c:identifier="json_object_set_double_member"
              doc="Convenience function for setting a floating point @value
of @member_name inside @object."
              version="0.8">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="member_name" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="double" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_boolean_member"
              c:identifier="json_object_set_boolean_member"
              doc="Convenience function for setting a boolean @value of"
              version="0.8">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="member_name" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_string_member"
              c:identifier="json_object_set_string_member"
              doc="Convenience function for setting a string @value of"
              version="0.8">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="member_name" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_null_member"
              c:identifier="json_object_set_null_member"
              doc="Convenience function for setting a null @value of"
              version="0.8">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="member_name" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_array_member"
              c:identifier="json_object_set_array_member"
              doc="Convenience function for setting an array @value of
The @object will take ownership of the passed #JsonArray"
              version="0.8">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="member_name" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="JsonArray" c:type="JsonArray*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_object_member"
              c:identifier="json_object_set_object_member"
              doc="Convenience function for setting an object @value of
The @object will take ownership of the passed #JsonObject"
              version="0.8">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="member_name" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="JsonObject" c:type="JsonObject*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_members"
              c:identifier="json_object_get_members"
              doc="Retrieves all the names of the members of a #JsonObject. You can
obtain the value for each member using json_object_get_member().
is owned by the #JsonObject and should never be modified or
freed. When you have finished using the returned list, use
g_list_free() to free the resources it has allocated.">
        <return-value transfer-ownership="full">
          <type name="GLib.List" c:type="GList*"/>
        </return-value>
      </method>
      <method name="get_member"
              c:identifier="json_object_get_member"
              doc="Retrieves the #JsonNode containing the value of @member_name inside
a #JsonObject.
member, or %NULL">
        <return-value transfer-ownership="full">
          <type name="JsonNode" c:type="JsonNode*"/>
        </return-value>
        <parameters>
          <parameter name="member_name" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_member"
              c:identifier="json_object_dup_member"
              doc="Retrieves a copy of the #JsonNode containing the value of @member_name
inside a #JsonObject
or %NULL. Use json_node_free() when done."
              version="0.6">
        <return-value transfer-ownership="full">
          <type name="JsonNode" c:type="JsonNode*"/>
        </return-value>
        <parameters>
          <parameter name="member_name" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_int_member"
              c:identifier="json_object_get_int_member"
              doc="Convenience function that retrieves the integer value
stored in @member_name of @object"
              version="0.8">
        <return-value transfer-ownership="none">
          <type name="int64" c:type="gint64"/>
        </return-value>
        <parameters>
          <parameter name="member_name" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_double_member"
              c:identifier="json_object_get_double_member"
              doc="Convenience function that retrieves the floating point value
stored in @member_name of @object"
              version="0.8">
        <return-value transfer-ownership="none">
          <type name="double" c:type="gdouble"/>
        </return-value>
        <parameters>
          <parameter name="member_name" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_boolean_member"
              c:identifier="json_object_get_boolean_member"
              doc="Convenience function that retrieves the boolean value
stored in @member_name of @object"
              version="0.8">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="member_name" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_string_member"
              c:identifier="json_object_get_string_member"
              doc="Convenience function that retrieves the string value
stored in @member_name of @object"
              version="0.8">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="member_name" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_null_member"
              c:identifier="json_object_get_null_member"
              doc="Convenience function that checks whether the value
stored in @member_name of @object is null"
              version="0.8">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="member_name" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_array_member"
              c:identifier="json_object_get_array_member"
              doc="Convenience function that retrieves the array
stored in @member_name of @object"
              version="0.8">
        <return-value transfer-ownership="full">
          <type name="JsonArray" c:type="JsonArray*"/>
        </return-value>
        <parameters>
          <parameter name="member_name" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_object_member"
              c:identifier="json_object_get_object_member"
              doc="Convenience function that retrieves the object
stored in @member_name of @object"
              version="0.8">
        <return-value transfer-ownership="full">
          <type name="JsonObject" c:type="JsonObject*"/>
        </return-value>
        <parameters>
          <parameter name="member_name" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="has_member"
              c:identifier="json_object_has_member"
              doc="Checks whether @object has a member named @member_name.">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="member_name" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_member"
              c:identifier="json_object_remove_member"
              doc="Removes @member_name from @object, freeing its allocated resources.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="member_name" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_values"
              c:identifier="json_object_get_values"
              doc="Retrieves all the values of the members of a #JsonObject.
list is owned by the #JsonObject and should never be modified
or freed. When you have finished using the returned list, use
g_list_free() to free the resources it has allocated.">
        <return-value transfer-ownership="full">
          <type name="GLib.List" c:type="GList*"/>
        </return-value>
      </method>
      <method name="get_size"
              c:identifier="json_object_get_size"
              doc="Retrieves the number of members of a #JsonObject.">
        <return-value transfer-ownership="none">
          <type name="uint" c:type="guint"/>
        </return-value>
      </method>
      <method name="foreach_member"
              c:identifier="json_object_foreach_member"
              doc="Iterates over all members of @object and calls @func on
each one of them.
It is safe to change the value of a #JsonNode of the @object
from within the iterator @func, but it is not safe to add or
remove members from the @object."
              version="0.8">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="func"
                     transfer-ownership="none"
                     scope="call"
                     closure="2">
            <type name="JsonObjectForeach" c:type="JsonObjectForeach"/>
          </parameter>
          <parameter name="data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <callback name="JsonObjectForeach"
              c:type="JsonObjectForeach"
              doc="The function to be passed to json_object_foreach_member(). You
should not add or remove members to and from @object within
this function. It is safe to change the value of @member_node."
              version="0.8">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="object" transfer-ownership="none">
          <type name="JsonObject" c:type="JsonObject*"/>
        </parameter>
        <parameter name="member_name" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="member_node" transfer-ownership="none">
          <type name="JsonNode" c:type="JsonNode*"/>
        </parameter>
        <parameter name="user_data" transfer-ownership="none" closure="3">
          <type name="any" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <class name="JsonParser"
           c:type="JsonParser"
           doc="JSON data streams parser. The contents of the #JsonParser structure are
private and should only be accessed via the provided API."
           parent="GObject.Object"
           glib:type-name="JsonParser"
           glib:get-type="json_parser_get_type"
           glib:type-struct="JsonParserClass">
      <constructor name="new"
                   c:identifier="json_parser_new"
                   doc="Creates a new #JsonParser instance. You can use the #JsonParser to
load a JSON stream from either a file or a buffer and then walk the
hierarchy using the data types API.
to release all the memory it allocates.">
        <return-value transfer-ownership="full">
          <type name="JsonParser" c:type="JsonParser*"/>
        </return-value>
      </constructor>
      <method name="load_from_file"
              c:identifier="json_parser_load_from_file"
              doc="Loads a JSON stream from the content of @filename and parses it. See
json_parser_load_from_data().
In case of error, @error is set accordingly and %FALSE is returned"
              throws="1">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="filename" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="load_from_data"
              c:identifier="json_parser_load_from_data"
              doc="Loads a JSON stream from a buffer and parses it. You can call this function
multiple times with the same #JsonParser object, but the contents of the
parser will be destroyed each time.
of error, @error is set accordingly and %FALSE is returned"
              throws="1">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="data" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="length" transfer-ownership="none">
            <type name="ssize_t" c:type="gssize"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_root"
              c:identifier="json_parser_get_root"
              doc="Retrieves the top level node from the parsed JSON stream.
is owned by the #JsonParser and should never be modified or freed.">
        <return-value transfer-ownership="none"
                      doc="the root #JsonNode . The returned node">
          <type name="JsonNode" c:type="JsonNode*"/>
        </return-value>
      </method>
      <method name="get_current_line"
              c:identifier="json_parser_get_current_line"
              doc="Retrieves the line currently parsed, starting from 1.">
        <return-value transfer-ownership="none">
          <type name="uint" c:type="guint"/>
        </return-value>
      </method>
      <method name="get_current_pos"
              c:identifier="json_parser_get_current_pos"
              doc="Retrieves the current position inside the current line, starting
from 0.">
        <return-value transfer-ownership="none">
          <type name="uint" c:type="guint"/>
        </return-value>
      </method>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="JsonParserPrivate" c:type="JsonParserPrivate*"/>
      </field>
      <glib:signal name="array-element"
                   doc="The ::array-element signal is emitted each time the #JsonParser
has successfully parsed a single element of a #JsonArray. The
array and element index are passed to the signal handlers.">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="array" transfer-ownership="none">
            <type name="JsonArray" c:type="JsonArray"/>
          </parameter>
          <parameter name="index_" transfer-ownership="none">
            <type name="int" c:type="gint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="array-end"
                   doc="The ::array-end signal is emitted each time the #JsonParser
has successfully parsed an entire #JsonArray">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="array" transfer-ownership="none">
            <type name="JsonArray" c:type="JsonArray"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="array-start"
                   doc="The ::array-start signal is emitted each time the #JsonParser
starts parsing a #JsonArray">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="error"
                   doc="The ::error signal is emitted each time a #JsonParser encounters
an error in a JSON stream.">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="error" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="object-end"
                   doc="The ::object-end signal is emitted each time the #JsonParser
has successfully parsed an entire #JsonObject.">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="JsonObject" c:type="JsonObject"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="object-member"
                   doc="The ::object-member signal is emitted each time the #JsonParser
has successfully parsed a single member of a #JsonObject. The
object and member are passed to the signal handlers.">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="JsonObject" c:type="JsonObject"/>
          </parameter>
          <parameter name="member_name" transfer-ownership="none">
            <type name="utf8" c:type="gchararray"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="object-start"
                   doc="The ::object-start signal is emitted each time the #JsonParser
starts parsing a #JsonObject.">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="parse-end"
                   doc="The ::parse-end signal is emitted when the parser successfully
finished parsing a JSON data stream">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="parse-start"
                   doc="The ::parse-start signal is emitted when the parser began parsing
a JSON data stream.">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="JsonParserClass"
            c:type="JsonParserClass"
            glib:is-gtype-struct-for="JsonParser"
            doc="#JsonParser class.">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="parse_start">
        <callback name="parse_start" c:type="parse_start">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="parser" transfer-ownership="none">
              <type name="JsonParser" c:type="JsonParser*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="object_start">
        <callback name="object_start" c:type="object_start">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="parser" transfer-ownership="none">
              <type name="JsonParser" c:type="JsonParser*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="object_member">
        <callback name="object_member" c:type="object_member">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="parser" transfer-ownership="none">
              <type name="JsonParser" c:type="JsonParser*"/>
            </parameter>
            <parameter name="object" transfer-ownership="none">
              <type name="JsonObject" c:type="JsonObject*"/>
            </parameter>
            <parameter name="member_name" transfer-ownership="none">
              <type name="utf8" c:type="gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="object_end">
        <callback name="object_end" c:type="object_end">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="parser" transfer-ownership="none">
              <type name="JsonParser" c:type="JsonParser*"/>
            </parameter>
            <parameter name="object" transfer-ownership="none">
              <type name="JsonObject" c:type="JsonObject*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="array_start">
        <callback name="array_start" c:type="array_start">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="parser" transfer-ownership="none">
              <type name="JsonParser" c:type="JsonParser*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="array_element">
        <callback name="array_element" c:type="array_element">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="parser" transfer-ownership="none">
              <type name="JsonParser" c:type="JsonParser*"/>
            </parameter>
            <parameter name="array" transfer-ownership="none">
              <type name="JsonArray" c:type="JsonArray*"/>
            </parameter>
            <parameter name="index_" transfer-ownership="none">
              <type name="int" c:type="gint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="array_end">
        <callback name="array_end" c:type="array_end">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="parser" transfer-ownership="none">
              <type name="JsonParser" c:type="JsonParser*"/>
            </parameter>
            <parameter name="array" transfer-ownership="none">
              <type name="JsonArray" c:type="JsonArray*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="parse_end">
        <callback name="parse_end" c:type="parse_end">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="parser" transfer-ownership="none">
              <type name="JsonParser" c:type="JsonParser*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="error">
        <callback name="error" c:type="error">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="parser" transfer-ownership="none">
              <type name="JsonParser" c:type="JsonParser*"/>
            </parameter>
            <parameter name="error" transfer-ownership="none">
              <type name="GLib.Error" c:type="GError*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="json_reserved1">
        <callback name="json_reserved1" c:type="_json_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="json_reserved2">
        <callback name="json_reserved2" c:type="_json_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="json_reserved3">
        <callback name="json_reserved3" c:type="_json_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="json_reserved4">
        <callback name="json_reserved4" c:type="_json_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="json_reserved5">
        <callback name="json_reserved5" c:type="_json_reserved5">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="json_reserved6">
        <callback name="json_reserved6" c:type="_json_reserved6">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="json_reserved7">
        <callback name="json_reserved7" c:type="_json_reserved7">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="json_reserved8">
        <callback name="json_reserved8" c:type="_json_reserved8">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <enumeration name="JsonParserError"
                 doc="Error enumeration for #JsonParser"
                 c:type="JsonParserError"
                 glib:error-quark="json_parser_error_quark">
      <member name="parse" value="0" c:identifier="JSON_PARSER_ERROR_PARSE"/>
      <member name="unknown"
              value="1"
              c:identifier="JSON_PARSER_ERROR_UNKNOWN"/>
    </enumeration>
    <record name="JsonParserPrivate" c:type="JsonParserPrivate">
    </record>
    <enumeration name="JsonTokenType" c:type="JsonTokenType">
      <member name="invalid" value="270" c:identifier="JSON_TOKEN_INVALID"/>
      <member name="true" value="271" c:identifier="JSON_TOKEN_TRUE"/>
      <member name="false" value="272" c:identifier="JSON_TOKEN_FALSE"/>
      <member name="null" value="273" c:identifier="JSON_TOKEN_NULL"/>
      <member name="last" value="274" c:identifier="JSON_TOKEN_LAST"/>
    </enumeration>
    <function name="json_array_sized_new"
              c:identifier="json_array_sized_new"
              doc="Creates a new #JsonArray with @n_elements slots already allocated.">
      <return-value transfer-ownership="full">
        <type name="JsonArray" c:type="JsonArray*"/>
      </return-value>
      <parameters>
        <parameter name="n_elements" transfer-ownership="none">
          <type name="uint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
  </namespace>
</repository>

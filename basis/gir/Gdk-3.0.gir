<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository xmlns="http://www.gtk.org/introspection/core/1.0" xmlns:c="http://www.gtk.org/introspection/c/1.0" xmlns:glib="http://www.gtk.org/introspection/glib/1.0" version="1.2">
  <include name="GdkPixbuf" version="2.0"/>
  <include name="Gio" version="2.0"/>
  <include name="Pango" version="1.0"/>
  <include name="cairo" version="1.0"/>
  <package name="gdk-3.0"/>
  <c:include name="gdk/gdk.h"/>
  <namespace name="Gdk" version="3.0" shared-library="libgdk-3.so.0" c:identifier-prefixes="Gdk" c:symbol-prefixes="gdk">
    <alias name="XEvent" c:type="GdkXEvent">
      <doc xml:space="preserve">Used to represent native events (XEvents for the X11
backend, MSGs for Win32).</doc>
      <type name="none" c:type="void"/>
    </alias>
    <function-macro name="APP_LAUNCH_CONTEXT" c:identifier="GDK_APP_LAUNCH_CONTEXT" introspectable="0">
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="ATOM_TO_POINTER" c:identifier="GDK_ATOM_TO_POINTER" introspectable="0">
      <doc xml:space="preserve">Converts a #GdkAtom into a pointer type.</doc>
      <parameters>
        <parameter name="atom">
          <doc xml:space="preserve">a #GdkAtom.</doc>
        </parameter>
      </parameters>
    </function-macro>
    <bitfield name="AnchorHints" version="3.22" stability="Unstable" glib:type-name="GdkAnchorHints" glib:get-type="gdk_anchor_hints_get_type" c:type="GdkAnchorHints">
      <doc xml:space="preserve">Positioning hints for aligning a window relative to a rectangle.

These hints determine how the window should be positioned in the case that
the window would fall off-screen if placed in its ideal position.

For example, %GDK_ANCHOR_FLIP_X will replace %GDK_GRAVITY_NORTH_WEST with
%GDK_GRAVITY_NORTH_EAST and vice versa if the window extends beyond the left
or right edges of the monitor.

If %GDK_ANCHOR_SLIDE_X is set, the window can be shifted horizontally to fit
on-screen. If %GDK_ANCHOR_RESIZE_X is set, the window can be shrunken
horizontally to fit.

In general, when multiple flags are set, flipping should take precedence over
sliding, which should take precedence over resizing.</doc>
      <member name="flip_x" value="1" c:identifier="GDK_ANCHOR_FLIP_X" glib:nick="flip-x" glib:name="GDK_ANCHOR_FLIP_X">
        <doc xml:space="preserve">allow flipping anchors horizontally</doc>
      </member>
      <member name="flip_y" value="2" c:identifier="GDK_ANCHOR_FLIP_Y" glib:nick="flip-y" glib:name="GDK_ANCHOR_FLIP_Y">
        <doc xml:space="preserve">allow flipping anchors vertically</doc>
      </member>
      <member name="slide_x" value="4" c:identifier="GDK_ANCHOR_SLIDE_X" glib:nick="slide-x" glib:name="GDK_ANCHOR_SLIDE_X">
        <doc xml:space="preserve">allow sliding window horizontally</doc>
      </member>
      <member name="slide_y" value="8" c:identifier="GDK_ANCHOR_SLIDE_Y" glib:nick="slide-y" glib:name="GDK_ANCHOR_SLIDE_Y">
        <doc xml:space="preserve">allow sliding window vertically</doc>
      </member>
      <member name="resize_x" value="16" c:identifier="GDK_ANCHOR_RESIZE_X" glib:nick="resize-x" glib:name="GDK_ANCHOR_RESIZE_X">
        <doc xml:space="preserve">allow resizing window horizontally</doc>
      </member>
      <member name="resize_y" value="32" c:identifier="GDK_ANCHOR_RESIZE_Y" glib:nick="resize-y" glib:name="GDK_ANCHOR_RESIZE_Y">
        <doc xml:space="preserve">allow resizing window vertically</doc>
      </member>
      <member name="flip" value="3" c:identifier="GDK_ANCHOR_FLIP" glib:nick="flip" glib:name="GDK_ANCHOR_FLIP">
        <doc xml:space="preserve">allow flipping anchors on both axes</doc>
      </member>
      <member name="slide" value="12" c:identifier="GDK_ANCHOR_SLIDE" glib:nick="slide" glib:name="GDK_ANCHOR_SLIDE">
        <doc xml:space="preserve">allow sliding window on both axes</doc>
      </member>
      <member name="resize" value="48" c:identifier="GDK_ANCHOR_RESIZE" glib:nick="resize" glib:name="GDK_ANCHOR_RESIZE">
        <doc xml:space="preserve">allow resizing window on both axes</doc>
      </member>
    </bitfield>
    <class name="AppLaunchContext" c:symbol-prefix="app_launch_context" c:type="GdkAppLaunchContext" parent="Gio.AppLaunchContext" glib:type-name="GdkAppLaunchContext" glib:get-type="gdk_app_launch_context_get_type">
      <doc xml:space="preserve">GdkAppLaunchContext is an implementation of #GAppLaunchContext that
handles launching an application in a graphical context. It provides
startup notification and allows to launch applications on a specific
screen or workspace.

## Launching an application

|[&lt;!-- language="C" --&gt;
GdkAppLaunchContext *context;

context = gdk_display_get_app_launch_context (display);

gdk_app_launch_context_set_screen (screen);
gdk_app_launch_context_set_timestamp (event-&gt;time);

if (!g_app_info_launch_default_for_uri ("http://www.gtk.org", context, &amp;error))
  g_warning ("Launching failed: %s\n", error-&gt;message);

g_object_unref (context);
]|</doc>
      <constructor name="new" c:identifier="gdk_app_launch_context_new" version="2.14" deprecated="1" deprecated-version="3.0">
        <doc xml:space="preserve">Creates a new #GdkAppLaunchContext.</doc>
        <doc-deprecated xml:space="preserve">Use gdk_display_get_app_launch_context() instead</doc-deprecated>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #GdkAppLaunchContext</doc>
          <type name="AppLaunchContext" c:type="GdkAppLaunchContext*"/>
        </return-value>
      </constructor>
      <method name="set_desktop" c:identifier="gdk_app_launch_context_set_desktop" version="2.14">
        <doc xml:space="preserve">Sets the workspace on which applications will be launched when
using this context when running under a window manager that
supports multiple workspaces, as described in the
[Extended Window Manager Hints](http://www.freedesktop.org/Standards/wm-spec).

When the workspace is not specified or @desktop is set to -1,
it is up to the window manager to pick one, typically it will
be the current workspace.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkAppLaunchContext</doc>
            <type name="AppLaunchContext" c:type="GdkAppLaunchContext*"/>
          </instance-parameter>
          <parameter name="desktop" transfer-ownership="none">
            <doc xml:space="preserve">the number of a workspace, or -1</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_display" c:identifier="gdk_app_launch_context_set_display" version="2.14" deprecated="1" deprecated-version="3.0">
        <doc xml:space="preserve">Sets the display on which applications will be launched when
using this context. See also gdk_app_launch_context_set_screen().</doc>
        <doc-deprecated xml:space="preserve">Use gdk_display_get_app_launch_context() instead</doc-deprecated>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkAppLaunchContext</doc>
            <type name="AppLaunchContext" c:type="GdkAppLaunchContext*"/>
          </instance-parameter>
          <parameter name="display" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkDisplay</doc>
            <type name="Display" c:type="GdkDisplay*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_icon" c:identifier="gdk_app_launch_context_set_icon" version="2.14">
        <doc xml:space="preserve">Sets the icon for applications that are launched with this
context.

Window Managers can use this information when displaying startup
notification.

See also gdk_app_launch_context_set_icon_name().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkAppLaunchContext</doc>
            <type name="AppLaunchContext" c:type="GdkAppLaunchContext*"/>
          </instance-parameter>
          <parameter name="icon" transfer-ownership="none" nullable="1" allow-none="1">
            <doc xml:space="preserve">a #GIcon, or %NULL</doc>
            <type name="Gio.Icon" c:type="GIcon*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_icon_name" c:identifier="gdk_app_launch_context_set_icon_name" version="2.14">
        <doc xml:space="preserve">Sets the icon for applications that are launched with this context.
The @icon_name will be interpreted in the same way as the Icon field
in desktop files. See also gdk_app_launch_context_set_icon().

If both @icon and @icon_name are set, the @icon_name takes priority.
If neither @icon or @icon_name is set, the icon is taken from either
the file that is passed to launched application or from the #GAppInfo
for the launched application itself.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkAppLaunchContext</doc>
            <type name="AppLaunchContext" c:type="GdkAppLaunchContext*"/>
          </instance-parameter>
          <parameter name="icon_name" transfer-ownership="none" nullable="1" allow-none="1">
            <doc xml:space="preserve">an icon name, or %NULL</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_screen" c:identifier="gdk_app_launch_context_set_screen" version="2.14">
        <doc xml:space="preserve">Sets the screen on which applications will be launched when
using this context. See also gdk_app_launch_context_set_display().

Note that, typically, a #GdkScreen represents a logical screen,
not a physical monitor.

If both @screen and @display are set, the @screen takes priority.
If neither @screen or @display are set, the default screen and
display are used.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkAppLaunchContext</doc>
            <type name="AppLaunchContext" c:type="GdkAppLaunchContext*"/>
          </instance-parameter>
          <parameter name="screen" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkScreen</doc>
            <type name="Screen" c:type="GdkScreen*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_timestamp" c:identifier="gdk_app_launch_context_set_timestamp" version="2.14">
        <doc xml:space="preserve">Sets the timestamp of @context. The timestamp should ideally
be taken from the event that triggered the launch.

Window managers can use this information to avoid moving the
focus to the newly launched application when the user is busy
typing in another window. This is also known as 'focus stealing
prevention'.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkAppLaunchContext</doc>
            <type name="AppLaunchContext" c:type="GdkAppLaunchContext*"/>
          </instance-parameter>
          <parameter name="timestamp" transfer-ownership="none">
            <doc xml:space="preserve">a timestamp</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <property name="display" writable="1" construct-only="1" transfer-ownership="none">
        <type name="Display"/>
      </property>
    </class>
    <record name="Atom" c:type="GdkAtom" disguised="1" pointer="1">
      <doc xml:space="preserve">An opaque type representing a string as an index into a table
of strings on the X server.</doc>
      <method name="name" c:identifier="gdk_atom_name">
        <doc xml:space="preserve">Determines the string corresponding to an atom.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a newly-allocated string containing the string
  corresponding to @atom. When you are done with the
  return value, you should free it using g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="atom" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkAtom.</doc>
            <type name="Atom" c:type="GdkAtom"/>
          </instance-parameter>
        </parameters>
      </method>
      <function name="intern" c:identifier="gdk_atom_intern">
        <doc xml:space="preserve">Finds or creates an atom corresponding to a given string.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the atom corresponding to @atom_name.</doc>
          <type name="Atom" c:type="GdkAtom"/>
        </return-value>
        <parameters>
          <parameter name="atom_name" transfer-ownership="none">
            <doc xml:space="preserve">a string.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="only_if_exists" transfer-ownership="none">
            <doc xml:space="preserve">if %TRUE, GDK is allowed to not create a new atom, but
  just return %GDK_NONE if the requested atom doesn&#x2019;t already
  exists. Currently, the flag is ignored, since checking the
  existance of an atom is as expensive as creating it.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </function>
      <function name="intern_static_string" c:identifier="gdk_atom_intern_static_string" version="2.10">
        <doc xml:space="preserve">Finds or creates an atom corresponding to a given string.

Note that this function is identical to gdk_atom_intern() except
that if a new #GdkAtom is created the string itself is used rather
than a copy. This saves memory, but can only be used if the string
will always exist. It can be used with statically
allocated strings in the main program, but not with statically
allocated memory in dynamically loaded modules, if you expect to
ever unload the module again (e.g. do not use this function in
GTK+ theme engines).</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the atom corresponding to @atom_name</doc>
          <type name="Atom" c:type="GdkAtom"/>
        </return-value>
        <parameters>
          <parameter name="atom_name" transfer-ownership="none">
            <doc xml:space="preserve">a static string</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <bitfield name="AxisFlags" version="3.22" glib:type-name="GdkAxisFlags" glib:get-type="gdk_axis_flags_get_type" c:type="GdkAxisFlags">
      <doc xml:space="preserve">Flags describing the current capabilities of a device/tool.</doc>
      <member name="x" value="2" c:identifier="GDK_AXIS_FLAG_X" glib:nick="x" glib:name="GDK_AXIS_FLAG_X">
        <doc xml:space="preserve">X axis is present</doc>
      </member>
      <member name="y" value="4" c:identifier="GDK_AXIS_FLAG_Y" glib:nick="y" glib:name="GDK_AXIS_FLAG_Y">
        <doc xml:space="preserve">Y axis is present</doc>
      </member>
      <member name="pressure" value="8" c:identifier="GDK_AXIS_FLAG_PRESSURE" glib:nick="pressure" glib:name="GDK_AXIS_FLAG_PRESSURE">
        <doc xml:space="preserve">Pressure axis is present</doc>
      </member>
      <member name="xtilt" value="16" c:identifier="GDK_AXIS_FLAG_XTILT" glib:nick="xtilt" glib:name="GDK_AXIS_FLAG_XTILT">
        <doc xml:space="preserve">X tilt axis is present</doc>
      </member>
      <member name="ytilt" value="32" c:identifier="GDK_AXIS_FLAG_YTILT" glib:nick="ytilt" glib:name="GDK_AXIS_FLAG_YTILT">
        <doc xml:space="preserve">Y tilt axis is present</doc>
      </member>
      <member name="wheel" value="64" c:identifier="GDK_AXIS_FLAG_WHEEL" glib:nick="wheel" glib:name="GDK_AXIS_FLAG_WHEEL">
        <doc xml:space="preserve">Wheel axis is present</doc>
      </member>
      <member name="distance" value="128" c:identifier="GDK_AXIS_FLAG_DISTANCE" glib:nick="distance" glib:name="GDK_AXIS_FLAG_DISTANCE">
        <doc xml:space="preserve">Distance axis is present</doc>
      </member>
      <member name="rotation" value="256" c:identifier="GDK_AXIS_FLAG_ROTATION" glib:nick="rotation" glib:name="GDK_AXIS_FLAG_ROTATION">
        <doc xml:space="preserve">Z-axis rotation is present</doc>
      </member>
      <member name="slider" value="512" c:identifier="GDK_AXIS_FLAG_SLIDER" glib:nick="slider" glib:name="GDK_AXIS_FLAG_SLIDER">
        <doc xml:space="preserve">Slider axis is present</doc>
      </member>
    </bitfield>
    <enumeration name="AxisUse" glib:type-name="GdkAxisUse" glib:get-type="gdk_axis_use_get_type" c:type="GdkAxisUse">
      <doc xml:space="preserve">An enumeration describing the way in which a device
axis (valuator) maps onto the predefined valuator
types that GTK+ understands.

Note that the X and Y axes are not really needed; pointer devices
report their location via the x/y members of events regardless. Whether
X and Y are present as axes depends on the GDK backend.</doc>
      <member name="ignore" value="0" c:identifier="GDK_AXIS_IGNORE" glib:nick="ignore" glib:name="GDK_AXIS_IGNORE">
        <doc xml:space="preserve">the axis is ignored.</doc>
      </member>
      <member name="x" value="1" c:identifier="GDK_AXIS_X" glib:nick="x" glib:name="GDK_AXIS_X">
        <doc xml:space="preserve">the axis is used as the x axis.</doc>
      </member>
      <member name="y" value="2" c:identifier="GDK_AXIS_Y" glib:nick="y" glib:name="GDK_AXIS_Y">
        <doc xml:space="preserve">the axis is used as the y axis.</doc>
      </member>
      <member name="pressure" value="3" c:identifier="GDK_AXIS_PRESSURE" glib:nick="pressure" glib:name="GDK_AXIS_PRESSURE">
        <doc xml:space="preserve">the axis is used for pressure information.</doc>
      </member>
      <member name="xtilt" value="4" c:identifier="GDK_AXIS_XTILT" glib:nick="xtilt" glib:name="GDK_AXIS_XTILT">
        <doc xml:space="preserve">the axis is used for x tilt information.</doc>
      </member>
      <member name="ytilt" value="5" c:identifier="GDK_AXIS_YTILT" glib:nick="ytilt" glib:name="GDK_AXIS_YTILT">
        <doc xml:space="preserve">the axis is used for y tilt information.</doc>
      </member>
      <member name="wheel" value="6" c:identifier="GDK_AXIS_WHEEL" glib:nick="wheel" glib:name="GDK_AXIS_WHEEL">
        <doc xml:space="preserve">the axis is used for wheel information.</doc>
      </member>
      <member name="distance" value="7" c:identifier="GDK_AXIS_DISTANCE" glib:nick="distance" glib:name="GDK_AXIS_DISTANCE">
        <doc xml:space="preserve">the axis is used for pen/tablet distance information. (Since: 3.22)</doc>
      </member>
      <member name="rotation" value="8" c:identifier="GDK_AXIS_ROTATION" glib:nick="rotation" glib:name="GDK_AXIS_ROTATION">
        <doc xml:space="preserve">the axis is used for pen rotation information. (Since: 3.22)</doc>
      </member>
      <member name="slider" value="9" c:identifier="GDK_AXIS_SLIDER" glib:nick="slider" glib:name="GDK_AXIS_SLIDER">
        <doc xml:space="preserve">the axis is used for pen slider information. (Since: 3.22)</doc>
      </member>
      <member name="last" value="10" c:identifier="GDK_AXIS_LAST" glib:nick="last" glib:name="GDK_AXIS_LAST">
        <doc xml:space="preserve">a constant equal to the numerically highest axis value.</doc>
      </member>
    </enumeration>
    <constant name="BUTTON_MIDDLE" value="2" c:type="GDK_BUTTON_MIDDLE" version="3.4">
      <doc xml:space="preserve">The middle button.</doc>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="BUTTON_PRIMARY" value="1" c:type="GDK_BUTTON_PRIMARY" version="3.4">
      <doc xml:space="preserve">The primary button. This is typically the left mouse button, or the
right button in a left-handed setup.</doc>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="BUTTON_SECONDARY" value="3" c:type="GDK_BUTTON_SECONDARY" version="3.4">
      <doc xml:space="preserve">The secondary button. This is typically the right mouse button, or the
left button in a left-handed setup.</doc>
      <type name="gint" c:type="gint"/>
    </constant>
    <enumeration name="ByteOrder" glib:type-name="GdkByteOrder" glib:get-type="gdk_byte_order_get_type" c:type="GdkByteOrder">
      <doc xml:space="preserve">A set of values describing the possible byte-orders
for storing pixel values in memory.</doc>
      <member name="lsb_first" value="0" c:identifier="GDK_LSB_FIRST" glib:nick="lsb-first" glib:name="GDK_LSB_FIRST">
        <doc xml:space="preserve">The values are stored with the least-significant byte
  first. For instance, the 32-bit value 0xffeecc would be stored
  in memory as 0xcc, 0xee, 0xff, 0x00.</doc>
      </member>
      <member name="msb_first" value="1" c:identifier="GDK_MSB_FIRST" glib:nick="msb-first" glib:name="GDK_MSB_FIRST">
        <doc xml:space="preserve">The values are stored with the most-significant byte
  first. For instance, the 32-bit value 0xffeecc would be stored
  in memory as 0x00, 0xff, 0xee, 0xcc.</doc>
      </member>
    </enumeration>
    <constant name="CURRENT_TIME" value="0" c:type="GDK_CURRENT_TIME">
      <doc xml:space="preserve">Represents the current time, and can be used anywhere a time is expected.</doc>
      <type name="gint" c:type="gint"/>
    </constant>
    <function-macro name="CURSOR" c:identifier="GDK_CURSOR" introspectable="0">
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <record name="Color" c:type="GdkColor" deprecated="1" deprecated-version="3.14" glib:type-name="GdkColor" glib:get-type="gdk_color_get_type" c:symbol-prefix="color">
      <doc xml:space="preserve">A #GdkColor is used to describe a color,
similar to the XColor struct used in the X11 drawing API.</doc>
      <doc-deprecated xml:space="preserve">Use #GdkRGBA</doc-deprecated>
      <field name="pixel" writable="1">
        <doc xml:space="preserve">For allocated colors, the pixel value used to
    draw this color on the screen. Not used anymore.</doc>
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="red" writable="1">
        <doc xml:space="preserve">The red component of the color. This is
    a value between 0 and 65535, with 65535 indicating
    full intensity</doc>
        <type name="guint16" c:type="guint16"/>
      </field>
      <field name="green" writable="1">
        <doc xml:space="preserve">The green component of the color</doc>
        <type name="guint16" c:type="guint16"/>
      </field>
      <field name="blue" writable="1">
        <doc xml:space="preserve">The blue component of the color</doc>
        <type name="guint16" c:type="guint16"/>
      </field>
      <method name="copy" c:identifier="gdk_color_copy" deprecated="1" deprecated-version="3.14">
        <doc xml:space="preserve">Makes a copy of a #GdkColor.

The result must be freed using gdk_color_free().</doc>
        <doc-deprecated xml:space="preserve">Use #GdkRGBA</doc-deprecated>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a copy of @color</doc>
          <type name="Color" c:type="GdkColor*"/>
        </return-value>
        <parameters>
          <instance-parameter name="color" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkColor</doc>
            <type name="Color" c:type="const GdkColor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="equal" c:identifier="gdk_color_equal" deprecated="1" deprecated-version="3.14">
        <doc xml:space="preserve">Compares two colors.</doc>
        <doc-deprecated xml:space="preserve">Use #GdkRGBA</doc-deprecated>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the two colors compare equal</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="colora" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkColor</doc>
            <type name="Color" c:type="const GdkColor*"/>
          </instance-parameter>
          <parameter name="colorb" transfer-ownership="none">
            <doc xml:space="preserve">another #GdkColor</doc>
            <type name="Color" c:type="const GdkColor*"/>
          </parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="gdk_color_free" deprecated="1" deprecated-version="3.14">
        <doc xml:space="preserve">Frees a #GdkColor created with gdk_color_copy().</doc>
        <doc-deprecated xml:space="preserve">Use #GdkRGBA</doc-deprecated>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="color" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkColor</doc>
            <type name="Color" c:type="GdkColor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="hash" c:identifier="gdk_color_hash" deprecated="1" deprecated-version="3.14">
        <doc xml:space="preserve">A hash function suitable for using for a hash
table that stores #GdkColors.</doc>
        <doc-deprecated xml:space="preserve">Use #GdkRGBA</doc-deprecated>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The hash function applied to @color</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="color" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkColor</doc>
            <type name="Color" c:type="const GdkColor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="to_string" c:identifier="gdk_color_to_string" version="2.12" deprecated="1" deprecated-version="3.14">
        <doc xml:space="preserve">Returns a textual specification of @color in the hexadecimal
form &#x201C;\#rrrrggggbbbb&#x201D; where &#x201C;r&#x201D;, &#x201C;g&#x201D; and &#x201C;b&#x201D; are hex digits
representing the red, green and blue components respectively.

The returned string can be parsed by gdk_color_parse().</doc>
        <doc-deprecated xml:space="preserve">Use #GdkRGBA</doc-deprecated>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a newly-allocated text string</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="color" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkColor</doc>
            <type name="Color" c:type="const GdkColor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <function name="parse" c:identifier="gdk_color_parse" deprecated="1" deprecated-version="3.14">
        <doc xml:space="preserve">Parses a textual specification of a color and fill in the
@red, @green, and @blue fields of a #GdkColor.

The string can either one of a large set of standard names
(taken from the X11 `rgb.txt` file), or it can be a hexadecimal
value in the form &#x201C;\#rgb&#x201D; &#x201C;\#rrggbb&#x201D;, &#x201C;\#rrrgggbbb&#x201D; or
&#x201C;\#rrrrggggbbbb&#x201D; where &#x201C;r&#x201D;, &#x201C;g&#x201D; and &#x201C;b&#x201D; are hex digits of
the red, green, and blue components of the color, respectively.
(White in the four forms is &#x201C;\#fff&#x201D;, &#x201C;\#ffffff&#x201D;, &#x201C;\#fffffffff&#x201D;
and &#x201C;\#ffffffffffff&#x201D;).</doc>
        <doc-deprecated xml:space="preserve">Use #GdkRGBA</doc-deprecated>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the parsing succeeded</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="spec" transfer-ownership="none">
            <doc xml:space="preserve">the string specifying the color</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="color" direction="out" caller-allocates="1" transfer-ownership="none">
            <doc xml:space="preserve">the #GdkColor to fill in</doc>
            <type name="Color" c:type="GdkColor*"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <enumeration name="CrossingMode" glib:type-name="GdkCrossingMode" glib:get-type="gdk_crossing_mode_get_type" c:type="GdkCrossingMode">
      <doc xml:space="preserve">Specifies the crossing mode for #GdkEventCrossing.</doc>
      <member name="normal" value="0" c:identifier="GDK_CROSSING_NORMAL" glib:nick="normal" glib:name="GDK_CROSSING_NORMAL">
        <doc xml:space="preserve">crossing because of pointer motion.</doc>
      </member>
      <member name="grab" value="1" c:identifier="GDK_CROSSING_GRAB" glib:nick="grab" glib:name="GDK_CROSSING_GRAB">
        <doc xml:space="preserve">crossing because a grab is activated.</doc>
      </member>
      <member name="ungrab" value="2" c:identifier="GDK_CROSSING_UNGRAB" glib:nick="ungrab" glib:name="GDK_CROSSING_UNGRAB">
        <doc xml:space="preserve">crossing because a grab is deactivated.</doc>
      </member>
      <member name="gtk_grab" value="3" c:identifier="GDK_CROSSING_GTK_GRAB" glib:nick="gtk-grab" glib:name="GDK_CROSSING_GTK_GRAB">
        <doc xml:space="preserve">crossing because a GTK+ grab is activated.</doc>
      </member>
      <member name="gtk_ungrab" value="4" c:identifier="GDK_CROSSING_GTK_UNGRAB" glib:nick="gtk-ungrab" glib:name="GDK_CROSSING_GTK_UNGRAB">
        <doc xml:space="preserve">crossing because a GTK+ grab is deactivated.</doc>
      </member>
      <member name="state_changed" value="5" c:identifier="GDK_CROSSING_STATE_CHANGED" glib:nick="state-changed" glib:name="GDK_CROSSING_STATE_CHANGED">
        <doc xml:space="preserve">crossing because a GTK+ widget changed
  state (e.g. sensitivity).</doc>
      </member>
      <member name="touch_begin" value="6" c:identifier="GDK_CROSSING_TOUCH_BEGIN" glib:nick="touch-begin" glib:name="GDK_CROSSING_TOUCH_BEGIN">
        <doc xml:space="preserve">crossing because a touch sequence has begun,
  this event is synthetic as the pointer might have not left the window.</doc>
      </member>
      <member name="touch_end" value="7" c:identifier="GDK_CROSSING_TOUCH_END" glib:nick="touch-end" glib:name="GDK_CROSSING_TOUCH_END">
        <doc xml:space="preserve">crossing because a touch sequence has ended,
  this event is synthetic as the pointer might have not left the window.</doc>
      </member>
      <member name="device_switch" value="8" c:identifier="GDK_CROSSING_DEVICE_SWITCH" glib:nick="device-switch" glib:name="GDK_CROSSING_DEVICE_SWITCH">
        <doc xml:space="preserve">crossing because of a device switch (i.e.
  a mouse taking control of the pointer after a touch device), this event
  is synthetic as the pointer didn&#x2019;t leave the window.</doc>
      </member>
    </enumeration>
    <class name="Cursor" c:symbol-prefix="cursor" c:type="GdkCursor" parent="GObject.Object" abstract="1" glib:type-name="GdkCursor" glib:get-type="gdk_cursor_get_type">
      <doc xml:space="preserve">A #GdkCursor represents a cursor. Its contents are private.</doc>
      <constructor name="new" c:identifier="gdk_cursor_new" deprecated="1" deprecated-version="3.16">
        <doc xml:space="preserve">Creates a new cursor from the set of builtin cursors for the default display.
See gdk_cursor_new_for_display().

To make the cursor invisible, use %GDK_BLANK_CURSOR.</doc>
        <doc-deprecated xml:space="preserve">Use gdk_cursor_new_for_display() instead.</doc-deprecated>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #GdkCursor</doc>
          <type name="Cursor" c:type="GdkCursor*"/>
        </return-value>
        <parameters>
          <parameter name="cursor_type" transfer-ownership="none">
            <doc xml:space="preserve">cursor to create</doc>
            <type name="CursorType" c:type="GdkCursorType"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_display" c:identifier="gdk_cursor_new_for_display" version="2.2">
        <doc xml:space="preserve">Creates a new cursor from the set of builtin cursors.</doc>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve">a new #GdkCursor, or %NULL on failure</doc>
          <type name="Cursor" c:type="GdkCursor*"/>
        </return-value>
        <parameters>
          <parameter name="display" transfer-ownership="none">
            <doc xml:space="preserve">the #GdkDisplay for which the cursor will be created</doc>
            <type name="Display" c:type="GdkDisplay*"/>
          </parameter>
          <parameter name="cursor_type" transfer-ownership="none">
            <doc xml:space="preserve">cursor to create</doc>
            <type name="CursorType" c:type="GdkCursorType"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_name" c:identifier="gdk_cursor_new_from_name" version="2.8">
        <doc xml:space="preserve">Creates a new cursor by looking up @name in the current cursor
theme.

A recommended set of cursor names that will work across different
platforms can be found in the CSS specification:
- "none"
- ![](default_cursor.png) "default"
- ![](help_cursor.png) "help"
- ![](pointer_cursor.png) "pointer"
- ![](context_menu_cursor.png) "context-menu"
- ![](progress_cursor.png) "progress"
- ![](wait_cursor.png) "wait"
- ![](cell_cursor.png) "cell"
- ![](crosshair_cursor.png) "crosshair"
- ![](text_cursor.png) "text"
- ![](vertical_text_cursor.png) "vertical-text"
- ![](alias_cursor.png) "alias"
- ![](copy_cursor.png) "copy"
- ![](no_drop_cursor.png) "no-drop"
- ![](move_cursor.png) "move"
- ![](not_allowed_cursor.png) "not-allowed"
- ![](grab_cursor.png) "grab"
- ![](grabbing_cursor.png) "grabbing"
- ![](all_scroll_cursor.png) "all-scroll"
- ![](col_resize_cursor.png) "col-resize"
- ![](row_resize_cursor.png) "row-resize"
- ![](n_resize_cursor.png) "n-resize"
- ![](e_resize_cursor.png) "e-resize"
- ![](s_resize_cursor.png) "s-resize"
- ![](w_resize_cursor.png) "w-resize"
- ![](ne_resize_cursor.png) "ne-resize"
- ![](nw_resize_cursor.png) "nw-resize"
- ![](sw_resize_cursor.png) "sw-resize"
- ![](se_resize_cursor.png) "se-resize"
- ![](ew_resize_cursor.png) "ew-resize"
- ![](ns_resize_cursor.png) "ns-resize"
- ![](nesw_resize_cursor.png) "nesw-resize"
- ![](nwse_resize_cursor.png) "nwse-resize"
- ![](zoom_in_cursor.png) "zoom-in"
- ![](zoom_out_cursor.png) "zoom-out"</doc>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve">a new #GdkCursor, or %NULL if there is no
  cursor with the given name</doc>
          <type name="Cursor" c:type="GdkCursor*"/>
        </return-value>
        <parameters>
          <parameter name="display" transfer-ownership="none">
            <doc xml:space="preserve">the #GdkDisplay for which the cursor will be created</doc>
            <type name="Display" c:type="GdkDisplay*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">the name of the cursor</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_pixbuf" c:identifier="gdk_cursor_new_from_pixbuf" version="2.4">
        <doc xml:space="preserve">Creates a new cursor from a pixbuf.

Not all GDK backends support RGBA cursors. If they are not
supported, a monochrome approximation will be displayed.
The functions gdk_display_supports_cursor_alpha() and
gdk_display_supports_cursor_color() can be used to determine
whether RGBA cursors are supported;
gdk_display_get_default_cursor_size() and
gdk_display_get_maximal_cursor_size() give information about
cursor sizes.

If @x or @y are `-1`, the pixbuf must have
options named &#x201C;x_hot&#x201D; and &#x201C;y_hot&#x201D;, resp., containing
integer values between `0` and the width resp. height of
the pixbuf. (Since: 3.0)

On the X backend, support for RGBA cursors requires a
sufficently new version of the X Render extension.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #GdkCursor.</doc>
          <type name="Cursor" c:type="GdkCursor*"/>
        </return-value>
        <parameters>
          <parameter name="display" transfer-ownership="none">
            <doc xml:space="preserve">the #GdkDisplay for which the cursor will be created</doc>
            <type name="Display" c:type="GdkDisplay*"/>
          </parameter>
          <parameter name="pixbuf" transfer-ownership="none">
            <doc xml:space="preserve">the #GdkPixbuf containing the cursor image</doc>
            <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">the horizontal offset of the &#x201C;hotspot&#x201D; of the cursor.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve">the vertical offset of the &#x201C;hotspot&#x201D; of the cursor.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_surface" c:identifier="gdk_cursor_new_from_surface" version="3.10">
        <doc xml:space="preserve">Creates a new cursor from a cairo image surface.

Not all GDK backends support RGBA cursors. If they are not
supported, a monochrome approximation will be displayed.
The functions gdk_display_supports_cursor_alpha() and
gdk_display_supports_cursor_color() can be used to determine
whether RGBA cursors are supported;
gdk_display_get_default_cursor_size() and
gdk_display_get_maximal_cursor_size() give information about
cursor sizes.

On the X backend, support for RGBA cursors requires a
sufficently new version of the X Render extension.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #GdkCursor.</doc>
          <type name="Cursor" c:type="GdkCursor*"/>
        </return-value>
        <parameters>
          <parameter name="display" transfer-ownership="none">
            <doc xml:space="preserve">the #GdkDisplay for which the cursor will be created</doc>
            <type name="Display" c:type="GdkDisplay*"/>
          </parameter>
          <parameter name="surface" transfer-ownership="none">
            <doc xml:space="preserve">the cairo image surface containing the cursor pixel data</doc>
            <type name="cairo.Surface" c:type="cairo_surface_t*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">the horizontal offset of the &#x201C;hotspot&#x201D; of the cursor</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve">the vertical offset of the &#x201C;hotspot&#x201D; of the cursor</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_cursor_type" c:identifier="gdk_cursor_get_cursor_type" glib:get-property="cursor-type" version="2.22">
        <doc xml:space="preserve">Returns the cursor type for this cursor.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a #GdkCursorType</doc>
          <type name="CursorType" c:type="GdkCursorType"/>
        </return-value>
        <parameters>
          <instance-parameter name="cursor" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkCursor</doc>
            <type name="Cursor" c:type="GdkCursor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_display" c:identifier="gdk_cursor_get_display" glib:get-property="display" version="2.2">
        <doc xml:space="preserve">Returns the display on which the #GdkCursor is defined.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the #GdkDisplay associated to @cursor</doc>
          <type name="Display" c:type="GdkDisplay*"/>
        </return-value>
        <parameters>
          <instance-parameter name="cursor" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkCursor.</doc>
            <type name="Cursor" c:type="GdkCursor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_image" c:identifier="gdk_cursor_get_image" version="2.8">
        <doc xml:space="preserve">Returns a #GdkPixbuf with the image used to display the cursor.

Note that depending on the capabilities of the windowing system and
on the cursor, GDK may not be able to obtain the image data. In this
case, %NULL is returned.</doc>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve">a #GdkPixbuf representing
  @cursor, or %NULL</doc>
          <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
        <parameters>
          <instance-parameter name="cursor" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkCursor</doc>
            <type name="Cursor" c:type="GdkCursor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_surface" c:identifier="gdk_cursor_get_surface" version="3.10">
        <doc xml:space="preserve">Returns a cairo image surface with the image used to display the cursor.

Note that depending on the capabilities of the windowing system and
on the cursor, GDK may not be able to obtain the image data. In this
case, %NULL is returned.</doc>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve">a #cairo_surface_t
  representing @cursor, or %NULL</doc>
          <type name="cairo.Surface" c:type="cairo_surface_t*"/>
        </return-value>
        <parameters>
          <instance-parameter name="cursor" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkCursor</doc>
            <type name="Cursor" c:type="GdkCursor*"/>
          </instance-parameter>
          <parameter name="x_hot" direction="out" caller-allocates="0" transfer-ownership="full" optional="1" allow-none="1">
            <doc xml:space="preserve">Location to store the hotspot x position,
  or %NULL</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="y_hot" direction="out" caller-allocates="0" transfer-ownership="full" optional="1" allow-none="1">
            <doc xml:space="preserve">Location to store the hotspot y position,
  or %NULL</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="gdk_cursor_ref" deprecated="1" deprecated-version="3.0">
        <doc xml:space="preserve">Adds a reference to @cursor.</doc>
        <doc-deprecated xml:space="preserve">Use g_object_ref() instead</doc-deprecated>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">Same @cursor that was passed in</doc>
          <type name="Cursor" c:type="GdkCursor*"/>
        </return-value>
        <parameters>
          <instance-parameter name="cursor" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkCursor</doc>
            <type name="Cursor" c:type="GdkCursor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="unref" c:identifier="gdk_cursor_unref" deprecated="1" deprecated-version="3.0">
        <doc xml:space="preserve">Removes a reference from @cursor, deallocating the cursor
if no references remain.</doc>
        <doc-deprecated xml:space="preserve">Use g_object_unref() instead</doc-deprecated>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cursor" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkCursor</doc>
            <type name="Cursor" c:type="GdkCursor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="cursor-type" writable="1" construct-only="1" transfer-ownership="none" getter="get_cursor_type" default-value="GDK_X_CURSOR">
        <type name="CursorType"/>
      </property>
      <property name="display" writable="1" construct-only="1" transfer-ownership="none" getter="get_display">
        <type name="Display"/>
      </property>
    </class>
    <enumeration name="CursorType" glib:type-name="GdkCursorType" glib:get-type="gdk_cursor_type_get_type" c:type="GdkCursorType">
      <doc xml:space="preserve">Predefined cursors.

Note that these IDs are directly taken from the X cursor font, and many
of these cursors are either not useful, or are not available on other platforms.

The recommended way to create cursors is to use gdk_cursor_new_from_name().</doc>
      <member name="x_cursor" value="0" c:identifier="GDK_X_CURSOR" glib:nick="x-cursor" glib:name="GDK_X_CURSOR">
        <doc xml:space="preserve">![](X_cursor.png)</doc>
      </member>
      <member name="arrow" value="2" c:identifier="GDK_ARROW" glib:nick="arrow" glib:name="GDK_ARROW">
        <doc xml:space="preserve">![](arrow.png)</doc>
      </member>
      <member name="based_arrow_down" value="4" c:identifier="GDK_BASED_ARROW_DOWN" glib:nick="based-arrow-down" glib:name="GDK_BASED_ARROW_DOWN">
        <doc xml:space="preserve">![](based_arrow_down.png)</doc>
      </member>
      <member name="based_arrow_up" value="6" c:identifier="GDK_BASED_ARROW_UP" glib:nick="based-arrow-up" glib:name="GDK_BASED_ARROW_UP">
        <doc xml:space="preserve">![](based_arrow_up.png)</doc>
      </member>
      <member name="boat" value="8" c:identifier="GDK_BOAT" glib:nick="boat" glib:name="GDK_BOAT">
        <doc xml:space="preserve">![](boat.png)</doc>
      </member>
      <member name="bogosity" value="10" c:identifier="GDK_BOGOSITY" glib:nick="bogosity" glib:name="GDK_BOGOSITY">
        <doc xml:space="preserve">![](bogosity.png)</doc>
      </member>
      <member name="bottom_left_corner" value="12" c:identifier="GDK_BOTTOM_LEFT_CORNER" glib:nick="bottom-left-corner" glib:name="GDK_BOTTOM_LEFT_CORNER">
        <doc xml:space="preserve">![](bottom_left_corner.png)</doc>
      </member>
      <member name="bottom_right_corner" value="14" c:identifier="GDK_BOTTOM_RIGHT_CORNER" glib:nick="bottom-right-corner" glib:name="GDK_BOTTOM_RIGHT_CORNER">
        <doc xml:space="preserve">![](bottom_right_corner.png)</doc>
      </member>
      <member name="bottom_side" value="16" c:identifier="GDK_BOTTOM_SIDE" glib:nick="bottom-side" glib:name="GDK_BOTTOM_SIDE">
        <doc xml:space="preserve">![](bottom_side.png)</doc>
      </member>
      <member name="bottom_tee" value="18" c:identifier="GDK_BOTTOM_TEE" glib:nick="bottom-tee" glib:name="GDK_BOTTOM_TEE">
        <doc xml:space="preserve">![](bottom_tee.png)</doc>
      </member>
      <member name="box_spiral" value="20" c:identifier="GDK_BOX_SPIRAL" glib:nick="box-spiral" glib:name="GDK_BOX_SPIRAL">
        <doc xml:space="preserve">![](box_spiral.png)</doc>
      </member>
      <member name="center_ptr" value="22" c:identifier="GDK_CENTER_PTR" glib:nick="center-ptr" glib:name="GDK_CENTER_PTR">
        <doc xml:space="preserve">![](center_ptr.png)</doc>
      </member>
      <member name="circle" value="24" c:identifier="GDK_CIRCLE" glib:nick="circle" glib:name="GDK_CIRCLE">
        <doc xml:space="preserve">![](circle.png)</doc>
      </member>
      <member name="clock" value="26" c:identifier="GDK_CLOCK" glib:nick="clock" glib:name="GDK_CLOCK">
        <doc xml:space="preserve">![](clock.png)</doc>
      </member>
      <member name="coffee_mug" value="28" c:identifier="GDK_COFFEE_MUG" glib:nick="coffee-mug" glib:name="GDK_COFFEE_MUG">
        <doc xml:space="preserve">![](coffee_mug.png)</doc>
      </member>
      <member name="cross" value="30" c:identifier="GDK_CROSS" glib:nick="cross" glib:name="GDK_CROSS">
        <doc xml:space="preserve">![](cross.png)</doc>
      </member>
      <member name="cross_reverse" value="32" c:identifier="GDK_CROSS_REVERSE" glib:nick="cross-reverse" glib:name="GDK_CROSS_REVERSE">
        <doc xml:space="preserve">![](cross_reverse.png)</doc>
      </member>
      <member name="crosshair" value="34" c:identifier="GDK_CROSSHAIR" glib:nick="crosshair" glib:name="GDK_CROSSHAIR">
        <doc xml:space="preserve">![](crosshair.png)</doc>
      </member>
      <member name="diamond_cross" value="36" c:identifier="GDK_DIAMOND_CROSS" glib:nick="diamond-cross" glib:name="GDK_DIAMOND_CROSS">
        <doc xml:space="preserve">![](diamond_cross.png)</doc>
      </member>
      <member name="dot" value="38" c:identifier="GDK_DOT" glib:nick="dot" glib:name="GDK_DOT">
        <doc xml:space="preserve">![](dot.png)</doc>
      </member>
      <member name="dotbox" value="40" c:identifier="GDK_DOTBOX" glib:nick="dotbox" glib:name="GDK_DOTBOX">
        <doc xml:space="preserve">![](dotbox.png)</doc>
      </member>
      <member name="double_arrow" value="42" c:identifier="GDK_DOUBLE_ARROW" glib:nick="double-arrow" glib:name="GDK_DOUBLE_ARROW">
        <doc xml:space="preserve">![](double_arrow.png)</doc>
      </member>
      <member name="draft_large" value="44" c:identifier="GDK_DRAFT_LARGE" glib:nick="draft-large" glib:name="GDK_DRAFT_LARGE">
        <doc xml:space="preserve">![](draft_large.png)</doc>
      </member>
      <member name="draft_small" value="46" c:identifier="GDK_DRAFT_SMALL" glib:nick="draft-small" glib:name="GDK_DRAFT_SMALL">
        <doc xml:space="preserve">![](draft_small.png)</doc>
      </member>
      <member name="draped_box" value="48" c:identifier="GDK_DRAPED_BOX" glib:nick="draped-box" glib:name="GDK_DRAPED_BOX">
        <doc xml:space="preserve">![](draped_box.png)</doc>
      </member>
      <member name="exchange" value="50" c:identifier="GDK_EXCHANGE" glib:nick="exchange" glib:name="GDK_EXCHANGE">
        <doc xml:space="preserve">![](exchange.png)</doc>
      </member>
      <member name="fleur" value="52" c:identifier="GDK_FLEUR" glib:nick="fleur" glib:name="GDK_FLEUR">
        <doc xml:space="preserve">![](fleur.png)</doc>
      </member>
      <member name="gobbler" value="54" c:identifier="GDK_GOBBLER" glib:nick="gobbler" glib:name="GDK_GOBBLER">
        <doc xml:space="preserve">![](gobbler.png)</doc>
      </member>
      <member name="gumby" value="56" c:identifier="GDK_GUMBY" glib:nick="gumby" glib:name="GDK_GUMBY">
        <doc xml:space="preserve">![](gumby.png)</doc>
      </member>
      <member name="hand1" value="58" c:identifier="GDK_HAND1" glib:nick="hand1" glib:name="GDK_HAND1">
        <doc xml:space="preserve">![](hand1.png)</doc>
      </member>
      <member name="hand2" value="60" c:identifier="GDK_HAND2" glib:nick="hand2" glib:name="GDK_HAND2">
        <doc xml:space="preserve">![](hand2.png)</doc>
      </member>
      <member name="heart" value="62" c:identifier="GDK_HEART" glib:nick="heart" glib:name="GDK_HEART">
        <doc xml:space="preserve">![](heart.png)</doc>
      </member>
      <member name="icon" value="64" c:identifier="GDK_ICON" glib:nick="icon" glib:name="GDK_ICON">
        <doc xml:space="preserve">![](icon.png)</doc>
      </member>
      <member name="iron_cross" value="66" c:identifier="GDK_IRON_CROSS" glib:nick="iron-cross" glib:name="GDK_IRON_CROSS">
        <doc xml:space="preserve">![](iron_cross.png)</doc>
      </member>
      <member name="left_ptr" value="68" c:identifier="GDK_LEFT_PTR" glib:nick="left-ptr" glib:name="GDK_LEFT_PTR">
        <doc xml:space="preserve">![](left_ptr.png)</doc>
      </member>
      <member name="left_side" value="70" c:identifier="GDK_LEFT_SIDE" glib:nick="left-side" glib:name="GDK_LEFT_SIDE">
        <doc xml:space="preserve">![](left_side.png)</doc>
      </member>
      <member name="left_tee" value="72" c:identifier="GDK_LEFT_TEE" glib:nick="left-tee" glib:name="GDK_LEFT_TEE">
        <doc xml:space="preserve">![](left_tee.png)</doc>
      </member>
      <member name="leftbutton" value="74" c:identifier="GDK_LEFTBUTTON" glib:nick="leftbutton" glib:name="GDK_LEFTBUTTON">
        <doc xml:space="preserve">![](leftbutton.png)</doc>
      </member>
      <member name="ll_angle" value="76" c:identifier="GDK_LL_ANGLE" glib:nick="ll-angle" glib:name="GDK_LL_ANGLE">
        <doc xml:space="preserve">![](ll_angle.png)</doc>
      </member>
      <member name="lr_angle" value="78" c:identifier="GDK_LR_ANGLE" glib:nick="lr-angle" glib:name="GDK_LR_ANGLE">
        <doc xml:space="preserve">![](lr_angle.png)</doc>
      </member>
      <member name="man" value="80" c:identifier="GDK_MAN" glib:nick="man" glib:name="GDK_MAN">
        <doc xml:space="preserve">![](man.png)</doc>
      </member>
      <member name="middlebutton" value="82" c:identifier="GDK_MIDDLEBUTTON" glib:nick="middlebutton" glib:name="GDK_MIDDLEBUTTON">
        <doc xml:space="preserve">![](middlebutton.png)</doc>
      </member>
      <member name="mouse" value="84" c:identifier="GDK_MOUSE" glib:nick="mouse" glib:name="GDK_MOUSE">
        <doc xml:space="preserve">![](mouse.png)</doc>
      </member>
      <member name="pencil" value="86" c:identifier="GDK_PENCIL" glib:nick="pencil" glib:name="GDK_PENCIL">
        <doc xml:space="preserve">![](pencil.png)</doc>
      </member>
      <member name="pirate" value="88" c:identifier="GDK_PIRATE" glib:nick="pirate" glib:name="GDK_PIRATE">
        <doc xml:space="preserve">![](pirate.png)</doc>
      </member>
      <member name="plus" value="90" c:identifier="GDK_PLUS" glib:nick="plus" glib:name="GDK_PLUS">
        <doc xml:space="preserve">![](plus.png)</doc>
      </member>
      <member name="question_arrow" value="92" c:identifier="GDK_QUESTION_ARROW" glib:nick="question-arrow" glib:name="GDK_QUESTION_ARROW">
        <doc xml:space="preserve">![](question_arrow.png)</doc>
      </member>
      <member name="right_ptr" value="94" c:identifier="GDK_RIGHT_PTR" glib:nick="right-ptr" glib:name="GDK_RIGHT_PTR">
        <doc xml:space="preserve">![](right_ptr.png)</doc>
      </member>
      <member name="right_side" value="96" c:identifier="GDK_RIGHT_SIDE" glib:nick="right-side" glib:name="GDK_RIGHT_SIDE">
        <doc xml:space="preserve">![](right_side.png)</doc>
      </member>
      <member name="right_tee" value="98" c:identifier="GDK_RIGHT_TEE" glib:nick="right-tee" glib:name="GDK_RIGHT_TEE">
        <doc xml:space="preserve">![](right_tee.png)</doc>
      </member>
      <member name="rightbutton" value="100" c:identifier="GDK_RIGHTBUTTON" glib:nick="rightbutton" glib:name="GDK_RIGHTBUTTON">
        <doc xml:space="preserve">![](rightbutton.png)</doc>
      </member>
      <member name="rtl_logo" value="102" c:identifier="GDK_RTL_LOGO" glib:nick="rtl-logo" glib:name="GDK_RTL_LOGO">
        <doc xml:space="preserve">![](rtl_logo.png)</doc>
      </member>
      <member name="sailboat" value="104" c:identifier="GDK_SAILBOAT" glib:nick="sailboat" glib:name="GDK_SAILBOAT">
        <doc xml:space="preserve">![](sailboat.png)</doc>
      </member>
      <member name="sb_down_arrow" value="106" c:identifier="GDK_SB_DOWN_ARROW" glib:nick="sb-down-arrow" glib:name="GDK_SB_DOWN_ARROW">
        <doc xml:space="preserve">![](sb_down_arrow.png)</doc>
      </member>
      <member name="sb_h_double_arrow" value="108" c:identifier="GDK_SB_H_DOUBLE_ARROW" glib:nick="sb-h-double-arrow" glib:name="GDK_SB_H_DOUBLE_ARROW">
        <doc xml:space="preserve">![](sb_h_double_arrow.png)</doc>
      </member>
      <member name="sb_left_arrow" value="110" c:identifier="GDK_SB_LEFT_ARROW" glib:nick="sb-left-arrow" glib:name="GDK_SB_LEFT_ARROW">
        <doc xml:space="preserve">![](sb_left_arrow.png)</doc>
      </member>
      <member name="sb_right_arrow" value="112" c:identifier="GDK_SB_RIGHT_ARROW" glib:nick="sb-right-arrow" glib:name="GDK_SB_RIGHT_ARROW">
        <doc xml:space="preserve">![](sb_right_arrow.png)</doc>
      </member>
      <member name="sb_up_arrow" value="114" c:identifier="GDK_SB_UP_ARROW" glib:nick="sb-up-arrow" glib:name="GDK_SB_UP_ARROW">
        <doc xml:space="preserve">![](sb_up_arrow.png)</doc>
      </member>
      <member name="sb_v_double_arrow" value="116" c:identifier="GDK_SB_V_DOUBLE_ARROW" glib:nick="sb-v-double-arrow" glib:name="GDK_SB_V_DOUBLE_ARROW">
        <doc xml:space="preserve">![](sb_v_double_arrow.png)</doc>
      </member>
      <member name="shuttle" value="118" c:identifier="GDK_SHUTTLE" glib:nick="shuttle" glib:name="GDK_SHUTTLE">
        <doc xml:space="preserve">![](shuttle.png)</doc>
      </member>
      <member name="sizing" value="120" c:identifier="GDK_SIZING" glib:nick="sizing" glib:name="GDK_SIZING">
        <doc xml:space="preserve">![](sizing.png)</doc>
      </member>
      <member name="spider" value="122" c:identifier="GDK_SPIDER" glib:nick="spider" glib:name="GDK_SPIDER">
        <doc xml:space="preserve">![](spider.png)</doc>
      </member>
      <member name="spraycan" value="124" c:identifier="GDK_SPRAYCAN" glib:nick="spraycan" glib:name="GDK_SPRAYCAN">
        <doc xml:space="preserve">![](spraycan.png)</doc>
      </member>
      <member name="star" value="126" c:identifier="GDK_STAR" glib:nick="star" glib:name="GDK_STAR">
        <doc xml:space="preserve">![](star.png)</doc>
      </member>
      <member name="target" value="128" c:identifier="GDK_TARGET" glib:nick="target" glib:name="GDK_TARGET">
        <doc xml:space="preserve">![](target.png)</doc>
      </member>
      <member name="tcross" value="130" c:identifier="GDK_TCROSS" glib:nick="tcross" glib:name="GDK_TCROSS">
        <doc xml:space="preserve">![](tcross.png)</doc>
      </member>
      <member name="top_left_arrow" value="132" c:identifier="GDK_TOP_LEFT_ARROW" glib:nick="top-left-arrow" glib:name="GDK_TOP_LEFT_ARROW">
        <doc xml:space="preserve">![](top_left_arrow.png)</doc>
      </member>
      <member name="top_left_corner" value="134" c:identifier="GDK_TOP_LEFT_CORNER" glib:nick="top-left-corner" glib:name="GDK_TOP_LEFT_CORNER">
        <doc xml:space="preserve">![](top_left_corner.png)</doc>
      </member>
      <member name="top_right_corner" value="136" c:identifier="GDK_TOP_RIGHT_CORNER" glib:nick="top-right-corner" glib:name="GDK_TOP_RIGHT_CORNER">
        <doc xml:space="preserve">![](top_right_corner.png)</doc>
      </member>
      <member name="top_side" value="138" c:identifier="GDK_TOP_SIDE" glib:nick="top-side" glib:name="GDK_TOP_SIDE">
        <doc xml:space="preserve">![](top_side.png)</doc>
      </member>
      <member name="top_tee" value="140" c:identifier="GDK_TOP_TEE" glib:nick="top-tee" glib:name="GDK_TOP_TEE">
        <doc xml:space="preserve">![](top_tee.png)</doc>
      </member>
      <member name="trek" value="142" c:identifier="GDK_TREK" glib:nick="trek" glib:name="GDK_TREK">
        <doc xml:space="preserve">![](trek.png)</doc>
      </member>
      <member name="ul_angle" value="144" c:identifier="GDK_UL_ANGLE" glib:nick="ul-angle" glib:name="GDK_UL_ANGLE">
        <doc xml:space="preserve">![](ul_angle.png)</doc>
      </member>
      <member name="umbrella" value="146" c:identifier="GDK_UMBRELLA" glib:nick="umbrella" glib:name="GDK_UMBRELLA">
        <doc xml:space="preserve">![](umbrella.png)</doc>
      </member>
      <member name="ur_angle" value="148" c:identifier="GDK_UR_ANGLE" glib:nick="ur-angle" glib:name="GDK_UR_ANGLE">
        <doc xml:space="preserve">![](ur_angle.png)</doc>
      </member>
      <member name="watch" value="150" c:identifier="GDK_WATCH" glib:nick="watch" glib:name="GDK_WATCH">
        <doc xml:space="preserve">![](watch.png)</doc>
      </member>
      <member name="xterm" value="152" c:identifier="GDK_XTERM" glib:nick="xterm" glib:name="GDK_XTERM">
        <doc xml:space="preserve">![](xterm.png)</doc>
      </member>
      <member name="last_cursor" value="153" c:identifier="GDK_LAST_CURSOR" glib:nick="last-cursor" glib:name="GDK_LAST_CURSOR">
        <doc xml:space="preserve">last cursor type</doc>
      </member>
      <member name="blank_cursor" value="-2" c:identifier="GDK_BLANK_CURSOR" glib:nick="blank-cursor" glib:name="GDK_BLANK_CURSOR">
        <doc xml:space="preserve">Blank cursor. Since 2.16</doc>
      </member>
      <member name="cursor_is_pixmap" value="-1" c:identifier="GDK_CURSOR_IS_PIXMAP" glib:nick="cursor-is-pixmap" glib:name="GDK_CURSOR_IS_PIXMAP">
        <doc xml:space="preserve">type of cursors constructed with
  gdk_cursor_new_from_pixbuf()</doc>
      </member>
    </enumeration>
    <function-macro name="DEPRECATED_FOR" c:identifier="GDK_DEPRECATED_FOR" introspectable="0">
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_3_0_FOR" c:identifier="GDK_DEPRECATED_IN_3_0_FOR" introspectable="0">
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_3_10_FOR" c:identifier="GDK_DEPRECATED_IN_3_10_FOR" introspectable="0">
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_3_12_FOR" c:identifier="GDK_DEPRECATED_IN_3_12_FOR" introspectable="0">
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_3_14_FOR" c:identifier="GDK_DEPRECATED_IN_3_14_FOR" introspectable="0">
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_3_16_FOR" c:identifier="GDK_DEPRECATED_IN_3_16_FOR" introspectable="0">
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_3_18_FOR" c:identifier="GDK_DEPRECATED_IN_3_18_FOR" introspectable="0">
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_3_20_FOR" c:identifier="GDK_DEPRECATED_IN_3_20_FOR" introspectable="0">
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_3_22_FOR" c:identifier="GDK_DEPRECATED_IN_3_22_FOR" introspectable="0">
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_3_24_FOR" c:identifier="GDK_DEPRECATED_IN_3_24_FOR" introspectable="0">
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_3_2_FOR" c:identifier="GDK_DEPRECATED_IN_3_2_FOR" introspectable="0">
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_3_4_FOR" c:identifier="GDK_DEPRECATED_IN_3_4_FOR" introspectable="0">
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_3_6_FOR" c:identifier="GDK_DEPRECATED_IN_3_6_FOR" introspectable="0">
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_3_8_FOR" c:identifier="GDK_DEPRECATED_IN_3_8_FOR" introspectable="0">
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEVICE" c:identifier="GDK_DEVICE" introspectable="0">
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEVICE_MANAGER" c:identifier="GDK_DEVICE_MANAGER" introspectable="0">
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEVICE_PAD" c:identifier="GDK_DEVICE_PAD" introspectable="0">
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEVICE_TOOL" c:identifier="GDK_DEVICE_TOOL" introspectable="0">
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DISPLAY" c:identifier="GDK_DISPLAY" introspectable="0">
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DISPLAY_MANAGER" c:identifier="GDK_DISPLAY_MANAGER" introspectable="0">
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DISPLAY_OBJECT" c:identifier="GDK_DISPLAY_OBJECT" introspectable="0">
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DRAG_CONTEXT" c:identifier="GDK_DRAG_CONTEXT" introspectable="0">
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DRAWING_CONTEXT" c:identifier="GDK_DRAWING_CONTEXT" introspectable="0">
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <class name="Device" c:symbol-prefix="device" c:type="GdkDevice" parent="GObject.Object" abstract="1" glib:type-name="GdkDevice" glib:get-type="gdk_device_get_type">
      <doc xml:space="preserve">The #GdkDevice object represents a single input device, such
as a keyboard, a mouse, a touchpad, etc.

See the #GdkDeviceManager documentation for more information
about the various kinds of master and slave devices, and their
relationships.</doc>
      <function name="free_history" c:identifier="gdk_device_free_history" introspectable="0">
        <doc xml:space="preserve">Frees an array of #GdkTimeCoord that was returned by gdk_device_get_history().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="events" transfer-ownership="none">
            <doc xml:space="preserve">an array of #GdkTimeCoord.</doc>
            <array length="1" zero-terminated="0" c:type="GdkTimeCoord**">
              <type name="TimeCoord" c:type="GdkTimeCoord*"/>
            </array>
          </parameter>
          <parameter name="n_events" transfer-ownership="none">
            <doc xml:space="preserve">the length of the array.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </function>
      <function name="grab_info_libgtk_only" c:identifier="gdk_device_grab_info_libgtk_only" deprecated="1" deprecated-version="3.16">
        <doc xml:space="preserve">Determines information about the current keyboard grab.
This is not public API and must not be used by applications.</doc>
        <doc-deprecated xml:space="preserve">The symbol was never meant to be used outside
  of GTK+</doc-deprecated>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if this application currently has the
 keyboard grabbed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="display" transfer-ownership="none">
            <doc xml:space="preserve">the display for which to get the grab information</doc>
            <type name="Display" c:type="GdkDisplay*"/>
          </parameter>
          <parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">device to get the grab information from</doc>
            <type name="Device" c:type="GdkDevice*"/>
          </parameter>
          <parameter name="grab_window" direction="out" caller-allocates="0" transfer-ownership="none">
            <doc xml:space="preserve">location to store current grab window</doc>
            <type name="Window" c:type="GdkWindow**"/>
          </parameter>
          <parameter name="owner_events" direction="out" caller-allocates="0" transfer-ownership="full">
            <doc xml:space="preserve">location to store boolean indicating whether
  the @owner_events flag to gdk_keyboard_grab() or
  gdk_pointer_grab() was %TRUE.</doc>
            <type name="gboolean" c:type="gboolean*"/>
          </parameter>
        </parameters>
      </function>
      <method name="get_associated_device" c:identifier="gdk_device_get_associated_device" glib:get-property="associated-device" version="3.0">
        <doc xml:space="preserve">Returns the associated device to @device, if @device is of type
%GDK_DEVICE_TYPE_MASTER, it will return the paired pointer or
keyboard.

If @device is of type %GDK_DEVICE_TYPE_SLAVE, it will return
the master device to which @device is attached to.

If @device is of type %GDK_DEVICE_TYPE_FLOATING, %NULL will be
returned, as there is no associated device.</doc>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">The associated device, or
  %NULL</doc>
          <type name="Device" c:type="GdkDevice*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkDevice</doc>
            <type name="Device" c:type="GdkDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_axes" c:identifier="gdk_device_get_axes" glib:get-property="axes" version="3.22">
        <doc xml:space="preserve">Returns the axes currently available on the device.</doc>
        <return-value transfer-ownership="none">
          <type name="AxisFlags" c:type="GdkAxisFlags"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkDevice</doc>
            <type name="Device" c:type="GdkDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_axis" c:identifier="gdk_device_get_axis" introspectable="0">
        <doc xml:space="preserve">Interprets an array of double as axis values for a given device,
and locates the value in the array for a given axis use.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the given axis use was found, otherwise %FALSE</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkDevice</doc>
            <type name="Device" c:type="GdkDevice*"/>
          </instance-parameter>
          <parameter name="axes" transfer-ownership="none">
            <doc xml:space="preserve">pointer to an array of axes</doc>
            <array zero-terminated="0" c:type="gdouble*">
              <type name="gdouble" c:type="gdouble"/>
            </array>
          </parameter>
          <parameter name="use" transfer-ownership="none">
            <doc xml:space="preserve">the use to look for</doc>
            <type name="AxisUse" c:type="GdkAxisUse"/>
          </parameter>
          <parameter name="value" direction="out" caller-allocates="0" transfer-ownership="full">
            <doc xml:space="preserve">location to store the found value.</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_axis_use" c:identifier="gdk_device_get_axis_use" version="2.20">
        <doc xml:space="preserve">Returns the axis use for @index_.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a #GdkAxisUse specifying how the axis is used.</doc>
          <type name="AxisUse" c:type="GdkAxisUse"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">a pointer #GdkDevice.</doc>
            <type name="Device" c:type="GdkDevice*"/>
          </instance-parameter>
          <parameter name="index_" transfer-ownership="none">
            <doc xml:space="preserve">the index of the axis.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_axis_value" c:identifier="gdk_device_get_axis_value" version="3.0" introspectable="0">
        <doc xml:space="preserve">Interprets an array of double as axis values for a given device,
and locates the value in the array for a given axis label, as returned
by gdk_device_list_axes()</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the given axis use was found, otherwise %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">a pointer #GdkDevice.</doc>
            <type name="Device" c:type="GdkDevice*"/>
          </instance-parameter>
          <parameter name="axes" transfer-ownership="none">
            <doc xml:space="preserve">pointer to an array of axes</doc>
            <array zero-terminated="0" c:type="gdouble*">
              <type name="gdouble" c:type="gdouble"/>
            </array>
          </parameter>
          <parameter name="axis_label" transfer-ownership="none">
            <doc xml:space="preserve">#GdkAtom with the axis label.</doc>
            <type name="Atom" c:type="GdkAtom"/>
          </parameter>
          <parameter name="value" direction="out" caller-allocates="0" transfer-ownership="full">
            <doc xml:space="preserve">location to store the found value.</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_device_type" c:identifier="gdk_device_get_device_type" version="3.0">
        <doc xml:space="preserve">Returns the device type for @device.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the #GdkDeviceType for @device.</doc>
          <type name="DeviceType" c:type="GdkDeviceType"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkDevice</doc>
            <type name="Device" c:type="GdkDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_display" c:identifier="gdk_device_get_display" glib:get-property="display" version="3.0">
        <doc xml:space="preserve">Returns the #GdkDisplay to which @device pertains.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a #GdkDisplay. This memory is owned
         by GTK+, and must not be freed or unreffed.</doc>
          <type name="Display" c:type="GdkDisplay*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkDevice</doc>
            <type name="Device" c:type="GdkDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_has_cursor" c:identifier="gdk_device_get_has_cursor" glib:get-property="has-cursor" version="2.20">
        <doc xml:space="preserve">Determines whether the pointer follows device motion.
This is not meaningful for keyboard devices, which don't have a pointer.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the pointer follows device motion</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkDevice</doc>
            <type name="Device" c:type="GdkDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_history" c:identifier="gdk_device_get_history" introspectable="0">
        <doc xml:space="preserve">Obtains the motion history for a pointer device; given a starting and
ending timestamp, return all events in the motion history for
the device in the given range of time. Some windowing systems
do not support motion history, in which case, %FALSE will
be returned. (This is not distinguishable from the case where
motion history is supported and no events were found.)

Note that there is also gdk_window_set_event_compression() to get
more motion events delivered directly, independent of the windowing
system.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the windowing system supports motion history and
 at least one event was found.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkDevice</doc>
            <type name="Device" c:type="GdkDevice*"/>
          </instance-parameter>
          <parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">the window with respect to which which the event coordinates will be reported</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </parameter>
          <parameter name="start" transfer-ownership="none">
            <doc xml:space="preserve">starting timestamp for range of events to return</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
          <parameter name="stop" transfer-ownership="none">
            <doc xml:space="preserve">ending timestamp for the range of events to return</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
          <parameter name="events" direction="out" caller-allocates="0" transfer-ownership="full" optional="1" allow-none="1">
            <doc xml:space="preserve">
  location to store a newly-allocated array of #GdkTimeCoord, or
  %NULL</doc>
            <array length="4" zero-terminated="0" c:type="GdkTimeCoord***">
              <type name="TimeCoord" c:type="GdkTimeCoord**"/>
            </array>
          </parameter>
          <parameter name="n_events" direction="out" caller-allocates="0" transfer-ownership="full" optional="1" allow-none="1">
            <doc xml:space="preserve">location to store the length of
  @events, or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_key" c:identifier="gdk_device_get_key" version="2.20">
        <doc xml:space="preserve">If @index_ has a valid keyval, this function will return %TRUE
and fill in @keyval and @modifiers with the keyval settings.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if keyval is set for @index.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkDevice.</doc>
            <type name="Device" c:type="GdkDevice*"/>
          </instance-parameter>
          <parameter name="index_" transfer-ownership="none">
            <doc xml:space="preserve">the index of the macro button to get.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="keyval" direction="out" caller-allocates="0" transfer-ownership="full">
            <doc xml:space="preserve">return value for the keyval.</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
          <parameter name="modifiers" direction="out" caller-allocates="0" transfer-ownership="full">
            <doc xml:space="preserve">return value for modifiers.</doc>
            <type name="ModifierType" c:type="GdkModifierType*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_last_event_window" c:identifier="gdk_device_get_last_event_window" version="3.12">
        <doc xml:space="preserve">Gets information about which window the given pointer device is in, based on events
that have been received so far from the display server. If another application
has a pointer grab, or this application has a grab with owner_events = %FALSE,
%NULL may be returned even if the pointer is physically over one of this
application's windows.</doc>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">the last window the device</doc>
          <type name="Window" c:type="GdkWindow*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkDevice, with a source other than %GDK_SOURCE_KEYBOARD</doc>
            <type name="Device" c:type="GdkDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mode" c:identifier="gdk_device_get_mode" version="2.20">
        <doc xml:space="preserve">Determines the mode of the device.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a #GdkInputSource</doc>
          <type name="InputMode" c:type="GdkInputMode"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkDevice</doc>
            <type name="Device" c:type="GdkDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_n_axes" c:identifier="gdk_device_get_n_axes" glib:get-property="n-axes" version="3.0">
        <doc xml:space="preserve">Returns the number of axes the device currently has.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the number of axes.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">a pointer #GdkDevice</doc>
            <type name="Device" c:type="GdkDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_n_keys" c:identifier="gdk_device_get_n_keys" version="2.24">
        <doc xml:space="preserve">Returns the number of keys the device currently has.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the number of keys.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkDevice</doc>
            <type name="Device" c:type="GdkDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name" c:identifier="gdk_device_get_name" glib:get-property="name" version="2.20">
        <doc xml:space="preserve">Determines the name of the device.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a name</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkDevice</doc>
            <type name="Device" c:type="GdkDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_position" c:identifier="gdk_device_get_position" version="3.0">
        <doc xml:space="preserve">Gets the current location of @device. As a slave device
coordinates are those of its master pointer, This function
may not be called on devices of type %GDK_DEVICE_TYPE_SLAVE,
unless there is an ongoing grab on them, see gdk_device_grab().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">pointer device to query status about.</doc>
            <type name="Device" c:type="GdkDevice*"/>
          </instance-parameter>
          <parameter name="screen" direction="out" caller-allocates="0" transfer-ownership="none" optional="1" allow-none="1">
            <doc xml:space="preserve">location to store the #GdkScreen
         the @device is on, or %NULL.</doc>
            <type name="Screen" c:type="GdkScreen**"/>
          </parameter>
          <parameter name="x" direction="out" caller-allocates="0" transfer-ownership="full" optional="1" allow-none="1">
            <doc xml:space="preserve">location to store root window X coordinate of @device, or %NULL.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="y" direction="out" caller-allocates="0" transfer-ownership="full" optional="1" allow-none="1">
            <doc xml:space="preserve">location to store root window Y coordinate of @device, or %NULL.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_position_double" c:identifier="gdk_device_get_position_double" version="3.10">
        <doc xml:space="preserve">Gets the current location of @device in double precision. As a slave device's
coordinates are those of its master pointer, this function
may not be called on devices of type %GDK_DEVICE_TYPE_SLAVE,
unless there is an ongoing grab on them. See gdk_device_grab().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">pointer device to query status about.</doc>
            <type name="Device" c:type="GdkDevice*"/>
          </instance-parameter>
          <parameter name="screen" direction="out" caller-allocates="0" transfer-ownership="none" optional="1" allow-none="1">
            <doc xml:space="preserve">location to store the #GdkScreen
         the @device is on, or %NULL.</doc>
            <type name="Screen" c:type="GdkScreen**"/>
          </parameter>
          <parameter name="x" direction="out" caller-allocates="0" transfer-ownership="full" optional="1" allow-none="1">
            <doc xml:space="preserve">location to store root window X coordinate of @device, or %NULL.</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="y" direction="out" caller-allocates="0" transfer-ownership="full" optional="1" allow-none="1">
            <doc xml:space="preserve">location to store root window Y coordinate of @device, or %NULL.</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_product_id" c:identifier="gdk_device_get_product_id" glib:get-property="product-id" version="3.16">
        <doc xml:space="preserve">Returns the product ID of this device, or %NULL if this information couldn't
be obtained. This ID is retrieved from the device, and is thus constant for
it. See gdk_device_get_vendor_id() for more information.</doc>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">the product ID, or %NULL</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">a slave #GdkDevice</doc>
            <type name="Device" c:type="GdkDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_seat" c:identifier="gdk_device_get_seat" glib:get-property="seat" version="3.20">
        <doc xml:space="preserve">Returns the #GdkSeat the device belongs to.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #GdkSeat. This memory is owned by GTK+ and
         must not be freed.</doc>
          <type name="Seat" c:type="GdkSeat*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">A #GdkDevice</doc>
            <type name="Device" c:type="GdkDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_source" c:identifier="gdk_device_get_source" version="2.20">
        <doc xml:space="preserve">Determines the type of the device.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a #GdkInputSource</doc>
          <type name="InputSource" c:type="GdkInputSource"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkDevice</doc>
            <type name="Device" c:type="GdkDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_state" c:identifier="gdk_device_get_state" introspectable="0">
        <doc xml:space="preserve">Gets the current state of a pointer device relative to @window. As a slave
device&#x2019;s coordinates are those of its master pointer, this
function may not be called on devices of type %GDK_DEVICE_TYPE_SLAVE,
unless there is an ongoing grab on them. See gdk_device_grab().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkDevice.</doc>
            <type name="Device" c:type="GdkDevice*"/>
          </instance-parameter>
          <parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkWindow.</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </parameter>
          <parameter name="axes" transfer-ownership="none" nullable="1" allow-none="1">
            <doc xml:space="preserve">an array of doubles to store the values of
the axes of @device in, or %NULL.</doc>
            <array zero-terminated="0" c:type="gdouble*">
              <type name="gdouble" c:type="gdouble"/>
            </array>
          </parameter>
          <parameter name="mask" direction="out" caller-allocates="0" transfer-ownership="full" optional="1" allow-none="1">
            <doc xml:space="preserve">location to store the modifiers, or %NULL.</doc>
            <type name="ModifierType" c:type="GdkModifierType*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_vendor_id" c:identifier="gdk_device_get_vendor_id" glib:get-property="vendor-id" version="3.16">
        <doc xml:space="preserve">Returns the vendor ID of this device, or %NULL if this information couldn't
be obtained. This ID is retrieved from the device, and is thus constant for
it.

This function, together with gdk_device_get_product_id(), can be used to eg.
compose #GSettings paths to store settings for this device.

|[&lt;!-- language="C" --&gt;
 static GSettings *
 get_device_settings (GdkDevice *device)
 {
   const gchar *vendor, *product;
   GSettings *settings;
   GdkDevice *device;
   gchar *path;

   vendor = gdk_device_get_vendor_id (device);
   product = gdk_device_get_product_id (device);

   path = g_strdup_printf ("/org/example/app/devices/%s:%s/", vendor, product);
   settings = g_settings_new_with_path (DEVICE_SCHEMA, path);
   g_free (path);

   return settings;
 }
]|</doc>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">the vendor ID, or %NULL</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">a slave #GdkDevice</doc>
            <type name="Device" c:type="GdkDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_window_at_position" c:identifier="gdk_device_get_window_at_position" version="3.0">
        <doc xml:space="preserve">Obtains the window underneath @device, returning the location of the device in @win_x and @win_y. Returns
%NULL if the window tree under @device is not known to GDK (for example, belongs to another application).

As a slave device coordinates are those of its master pointer, This
function may not be called on devices of type %GDK_DEVICE_TYPE_SLAVE,
unless there is an ongoing grab on them, see gdk_device_grab().</doc>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">the #GdkWindow under the
device position, or %NULL.</doc>
          <type name="Window" c:type="GdkWindow*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">pointer #GdkDevice to query info to.</doc>
            <type name="Device" c:type="GdkDevice*"/>
          </instance-parameter>
          <parameter name="win_x" direction="out" caller-allocates="0" transfer-ownership="full" optional="1" allow-none="1">
            <doc xml:space="preserve">return location for the X coordinate of the device location,
        relative to the window origin, or %NULL.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="win_y" direction="out" caller-allocates="0" transfer-ownership="full" optional="1" allow-none="1">
            <doc xml:space="preserve">return location for the Y coordinate of the device location,
        relative to the window origin, or %NULL.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_window_at_position_double" c:identifier="gdk_device_get_window_at_position_double" version="3.0">
        <doc xml:space="preserve">Obtains the window underneath @device, returning the location of the device in @win_x and @win_y in
double precision. Returns %NULL if the window tree under @device is not known to GDK (for example,
belongs to another application).

As a slave device coordinates are those of its master pointer, This
function may not be called on devices of type %GDK_DEVICE_TYPE_SLAVE,
unless there is an ongoing grab on them, see gdk_device_grab().</doc>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">the #GdkWindow under the
  device position, or %NULL.</doc>
          <type name="Window" c:type="GdkWindow*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">pointer #GdkDevice to query info to.</doc>
            <type name="Device" c:type="GdkDevice*"/>
          </instance-parameter>
          <parameter name="win_x" direction="out" caller-allocates="0" transfer-ownership="full" optional="1" allow-none="1">
            <doc xml:space="preserve">return location for the X coordinate of the device location,
        relative to the window origin, or %NULL.</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="win_y" direction="out" caller-allocates="0" transfer-ownership="full" optional="1" allow-none="1">
            <doc xml:space="preserve">return location for the Y coordinate of the device location,
        relative to the window origin, or %NULL.</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="grab" c:identifier="gdk_device_grab" version="3.0" deprecated="1" deprecated-version="3.20.">
        <doc xml:space="preserve">Grabs the device so that all events coming from this device are passed to
this application until the device is ungrabbed with gdk_device_ungrab(),
or the window becomes unviewable. This overrides any previous grab on the device
by this client.

Note that @device and @window need to be on the same display.

Device grabs are used for operations which need complete control over the
given device events (either pointer or keyboard). For example in GTK+ this
is used for Drag and Drop operations, popup menus and such.

Note that if the event mask of an X window has selected both button press
and button release events, then a button press event will cause an automatic
pointer grab until the button is released. X does this automatically since
most applications expect to receive button press and release events in pairs.
It is equivalent to a pointer grab on the window with @owner_events set to
%TRUE.

If you set up anything at the time you take the grab that needs to be
cleaned up when the grab ends, you should handle the #GdkEventGrabBroken
events that are emitted when the grab ends unvoluntarily.</doc>
        <doc-deprecated xml:space="preserve">Use gdk_seat_grab() instead.</doc-deprecated>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%GDK_GRAB_SUCCESS if the grab was successful.</doc>
          <type name="GrabStatus" c:type="GdkGrabStatus"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkDevice. To get the device you can use gtk_get_current_event_device()
  or gdk_event_get_device() if the grab is in reaction to an event. Also, you can use
  gdk_device_manager_get_client_pointer() but only in code that isn&#x2019;t triggered by a
  #GdkEvent and there aren&#x2019;t other means to get a meaningful #GdkDevice to operate on.</doc>
            <type name="Device" c:type="GdkDevice*"/>
          </instance-parameter>
          <parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">the #GdkWindow which will own the grab (the grab window)</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </parameter>
          <parameter name="grab_ownership" transfer-ownership="none">
            <doc xml:space="preserve">specifies the grab ownership.</doc>
            <type name="GrabOwnership" c:type="GdkGrabOwnership"/>
          </parameter>
          <parameter name="owner_events" transfer-ownership="none">
            <doc xml:space="preserve">if %FALSE then all device events are reported with respect to
               @window and are only reported if selected by @event_mask. If
               %TRUE then pointer events for this application are reported
               as normal, but pointer events outside this application are
               reported with respect to @window and only if selected by
               @event_mask. In either mode, unreported events are discarded.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="event_mask" transfer-ownership="none">
            <doc xml:space="preserve">specifies the event mask, which is used in accordance with
             @owner_events.</doc>
            <type name="EventMask" c:type="GdkEventMask"/>
          </parameter>
          <parameter name="cursor" transfer-ownership="none" nullable="1" allow-none="1">
            <doc xml:space="preserve">the cursor to display while the grab is active if the device is
         a pointer. If this is %NULL then the normal cursors are used for
         @window and its descendants, and the cursor for @window is used
         elsewhere.</doc>
            <type name="Cursor" c:type="GdkCursor*"/>
          </parameter>
          <parameter name="time_" transfer-ownership="none">
            <doc xml:space="preserve">the timestamp of the event which led to this pointer grab. This
        usually comes from the #GdkEvent struct, though %GDK_CURRENT_TIME
        can be used if the time isn&#x2019;t known.</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="list_axes" c:identifier="gdk_device_list_axes" version="3.0">
        <doc xml:space="preserve">Returns a #GList of #GdkAtoms, containing the labels for
the axes that @device currently has.</doc>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve">
    A #GList of #GdkAtoms, free with g_list_free().</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Atom"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">a pointer #GdkDevice</doc>
            <type name="Device" c:type="GdkDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="list_slave_devices" c:identifier="gdk_device_list_slave_devices">
        <doc xml:space="preserve">If the device if of type %GDK_DEVICE_TYPE_MASTER, it will return
the list of slave devices attached to it, otherwise it will return
%NULL</doc>
        <return-value transfer-ownership="container" nullable="1">
          <doc xml:space="preserve">
         the list of slave devices, or %NULL. The list must be
         freed with g_list_free(), the contents of the list are
         owned by GTK+ and should not be freed.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Device"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkDevice</doc>
            <type name="Device" c:type="GdkDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_axis_use" c:identifier="gdk_device_set_axis_use">
        <doc xml:space="preserve">Specifies how an axis of a device is used.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">a pointer #GdkDevice</doc>
            <type name="Device" c:type="GdkDevice*"/>
          </instance-parameter>
          <parameter name="index_" transfer-ownership="none">
            <doc xml:space="preserve">the index of the axis</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="use" transfer-ownership="none">
            <doc xml:space="preserve">specifies how the axis is used</doc>
            <type name="AxisUse" c:type="GdkAxisUse"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_key" c:identifier="gdk_device_set_key">
        <doc xml:space="preserve">Specifies the X key event to generate when a macro button of a device
is pressed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkDevice</doc>
            <type name="Device" c:type="GdkDevice*"/>
          </instance-parameter>
          <parameter name="index_" transfer-ownership="none">
            <doc xml:space="preserve">the index of the macro button to set</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="keyval" transfer-ownership="none">
            <doc xml:space="preserve">the keyval to generate</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="modifiers" transfer-ownership="none">
            <doc xml:space="preserve">the modifiers to set</doc>
            <type name="ModifierType" c:type="GdkModifierType"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_mode" c:identifier="gdk_device_set_mode">
        <doc xml:space="preserve">Sets a the mode of an input device. The mode controls if the
device is active and whether the device&#x2019;s range is mapped to the
entire screen or to a single window.

Note: This is only meaningful for floating devices, master devices (and
slaves connected to these) drive the pointer cursor, which is not limited
by the input mode.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the mode was successfully changed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkDevice.</doc>
            <type name="Device" c:type="GdkDevice*"/>
          </instance-parameter>
          <parameter name="mode" transfer-ownership="none">
            <doc xml:space="preserve">the input mode.</doc>
            <type name="InputMode" c:type="GdkInputMode"/>
          </parameter>
        </parameters>
      </method>
      <method name="ungrab" c:identifier="gdk_device_ungrab" version="3.0" deprecated="1" deprecated-version="3.20.">
        <doc xml:space="preserve">Release any grab on @device.</doc>
        <doc-deprecated xml:space="preserve">Use gdk_seat_ungrab() instead.</doc-deprecated>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkDevice</doc>
            <type name="Device" c:type="GdkDevice*"/>
          </instance-parameter>
          <parameter name="time_" transfer-ownership="none">
            <doc xml:space="preserve">a timestap (e.g. %GDK_CURRENT_TIME).</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="warp" c:identifier="gdk_device_warp" version="3.0">
        <doc xml:space="preserve">Warps @device in @display to the point @x,@y on
the screen @screen, unless the device is confined
to a window by a grab, in which case it will be moved
as far as allowed by the grab. Warping the pointer
creates events as if the user had moved the mouse
instantaneously to the destination.

Note that the pointer should normally be under the
control of the user. This function was added to cover
some rare use cases like keyboard navigation support
for the color picker in the #GtkColorSelectionDialog.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">the device to warp.</doc>
            <type name="Device" c:type="GdkDevice*"/>
          </instance-parameter>
          <parameter name="screen" transfer-ownership="none">
            <doc xml:space="preserve">the screen to warp @device to.</doc>
            <type name="Screen" c:type="GdkScreen*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">the X coordinate of the destination.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve">the Y coordinate of the destination.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <property name="associated-device" version="3.0" transfer-ownership="none" getter="get_associated_device">
        <doc xml:space="preserve">Associated pointer or keyboard with this device, if any. Devices of type #GDK_DEVICE_TYPE_MASTER
always come in keyboard/pointer pairs. Other device types will have a %NULL associated device.</doc>
        <type name="Device"/>
      </property>
      <property name="axes" version="3.22" transfer-ownership="none" getter="get_axes" default-value="0">
        <doc xml:space="preserve">The axes currently available for this device.</doc>
        <type name="AxisFlags"/>
      </property>
      <property name="device-manager" version="3.0" writable="1" construct-only="1" transfer-ownership="none">
        <doc xml:space="preserve">The #GdkDeviceManager the #GdkDevice pertains to.</doc>
        <type name="DeviceManager"/>
      </property>
      <property name="display" version="3.0" writable="1" construct-only="1" transfer-ownership="none" getter="get_display">
        <doc xml:space="preserve">The #GdkDisplay the #GdkDevice pertains to.</doc>
        <type name="Display"/>
      </property>
      <property name="has-cursor" version="3.0" writable="1" construct-only="1" transfer-ownership="none" getter="get_has_cursor" default-value="FALSE">
        <doc xml:space="preserve">Whether the device is represented by a cursor on the screen. Devices of type
%GDK_DEVICE_TYPE_MASTER will have %TRUE here.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="input-mode" writable="1" transfer-ownership="none" default-value="GDK_MODE_DISABLED">
        <type name="InputMode"/>
      </property>
      <property name="input-source" version="3.0" writable="1" construct-only="1" transfer-ownership="none" default-value="GDK_SOURCE_MOUSE">
        <doc xml:space="preserve">Source type for the device.</doc>
        <type name="InputSource"/>
      </property>
      <property name="n-axes" version="3.0" transfer-ownership="none" getter="get_n_axes" default-value="0">
        <doc xml:space="preserve">Number of axes in the device.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="name" version="3.0" writable="1" construct-only="1" transfer-ownership="none" getter="get_name" default-value="NULL">
        <doc xml:space="preserve">The device name.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="num-touches" version="3.20" writable="1" construct-only="1" transfer-ownership="none" default-value="0">
        <doc xml:space="preserve">The maximal number of concurrent touches on a touch device.
Will be 0 if the device is not a touch device or if the number
of touches is unknown.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="product-id" version="3.16" writable="1" construct-only="1" transfer-ownership="none" getter="get_product_id" default-value="NULL">
        <doc xml:space="preserve">Product ID of this device, see gdk_device_get_product_id().</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="seat" version="3.20" writable="1" transfer-ownership="none" getter="get_seat">
        <doc xml:space="preserve">#GdkSeat of this device.</doc>
        <type name="Seat"/>
      </property>
      <property name="tool" transfer-ownership="none">
        <type name="DeviceTool"/>
      </property>
      <property name="type" version="3.0" writable="1" construct-only="1" transfer-ownership="none" default-value="GDK_DEVICE_TYPE_MASTER">
        <doc xml:space="preserve">Device role in the device manager.</doc>
        <type name="DeviceType"/>
      </property>
      <property name="vendor-id" version="3.16" writable="1" construct-only="1" transfer-ownership="none" getter="get_vendor_id" default-value="NULL">
        <doc xml:space="preserve">Vendor ID of this device, see gdk_device_get_vendor_id().</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <glib:signal name="changed" when="last">
        <doc xml:space="preserve">The ::changed signal is emitted either when the #GdkDevice
has changed the number of either axes or keys. For example
In X this will normally happen when the slave device routing
events through the master device changes (for example, user
switches from the USB mouse to a tablet), in that case the
master device will change to reflect the new slave device
axes and keys.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="tool-changed" when="last" version="3.22">
        <doc xml:space="preserve">The ::tool-changed signal is emitted on pen/eraser
#GdkDevices whenever tools enter or leave proximity.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="tool" transfer-ownership="none">
            <doc xml:space="preserve">The new current tool</doc>
            <type name="DeviceTool"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <class name="DeviceManager" c:symbol-prefix="device_manager" c:type="GdkDeviceManager" parent="GObject.Object" abstract="1" glib:type-name="GdkDeviceManager" glib:get-type="gdk_device_manager_get_type">
      <doc xml:space="preserve">In addition to a single pointer and keyboard for user interface input,
GDK contains support for a variety of input devices, including graphics
tablets, touchscreens and multiple pointers/keyboards interacting
simultaneously with the user interface. Such input devices often have
additional features, such as sub-pixel positioning information and
additional device-dependent information.

In order to query the device hierarchy and be aware of changes in the
device hierarchy (such as virtual devices being created or removed, or
physical devices being plugged or unplugged), GDK provides
#GdkDeviceManager.

By default, and if the platform supports it, GDK is aware of multiple
keyboard/pointer pairs and multitouch devices. This behavior can be
changed by calling gdk_disable_multidevice() before gdk_display_open().
There should rarely be a need to do that though, since GDK defaults
to a compatibility mode in which it will emit just one enter/leave
event pair for all devices on a window. To enable per-device
enter/leave events and other multi-pointer interaction features,
gdk_window_set_support_multidevice() must be called on
#GdkWindows (or gtk_widget_set_support_multidevice() on widgets).
window. See the gdk_window_set_support_multidevice() documentation
for more information.

On X11, multi-device support is implemented through XInput 2.
Unless gdk_disable_multidevice() is called, the XInput 2
#GdkDeviceManager implementation will be used as the input source.
Otherwise either the core or XInput 1 implementations will be used.

For simple applications that don&#x2019;t have any special interest in
input devices, the so-called &#x201C;client pointer&#x201D;
provides a reasonable approximation to a simple setup with a single
pointer and keyboard. The device that has been set as the client
pointer can be accessed via gdk_device_manager_get_client_pointer().

Conceptually, in multidevice mode there are 2 device types. Virtual
devices (or master devices) are represented by the pointer cursors
and keyboard foci that are seen on the screen. Physical devices (or
slave devices) represent the hardware that is controlling the virtual
devices, and thus have no visible cursor on the screen.

Virtual devices are always paired, so there is a keyboard device for every
pointer device. Associations between devices may be inspected through
gdk_device_get_associated_device().

There may be several virtual devices, and several physical devices could
be controlling each of these virtual devices. Physical devices may also
be &#x201C;floating&#x201D;, which means they are not attached to any virtual device.

# Master and slave devices

|[
carlos@sacarino:~$ xinput list
&#x23A1; Virtual core pointer                          id=2    [master pointer  (3)]
&#x239C;   &#x21B3; Virtual core XTEST pointer                id=4    [slave  pointer  (2)]
&#x239C;   &#x21B3; Wacom ISDv4 E6 Pen stylus                 id=10   [slave  pointer  (2)]
&#x239C;   &#x21B3; Wacom ISDv4 E6 Finger touch               id=11   [slave  pointer  (2)]
&#x239C;   &#x21B3; SynPS/2 Synaptics TouchPad                id=13   [slave  pointer  (2)]
&#x239C;   &#x21B3; TPPS/2 IBM TrackPoint                     id=14   [slave  pointer  (2)]
&#x239C;   &#x21B3; Wacom ISDv4 E6 Pen eraser                 id=16   [slave  pointer  (2)]
&#x23A3; Virtual core keyboard                         id=3    [master keyboard (2)]
    &#x21B3; Virtual core XTEST keyboard               id=5    [slave  keyboard (3)]
    &#x21B3; Power Button                              id=6    [slave  keyboard (3)]
    &#x21B3; Video Bus                                 id=7    [slave  keyboard (3)]
    &#x21B3; Sleep Button                              id=8    [slave  keyboard (3)]
    &#x21B3; Integrated Camera                         id=9    [slave  keyboard (3)]
    &#x21B3; AT Translated Set 2 keyboard              id=12   [slave  keyboard (3)]
    &#x21B3; ThinkPad Extra Buttons                    id=15   [slave  keyboard (3)]
]|

By default, GDK will automatically listen for events coming from all
master devices, setting the #GdkDevice for all events coming from input
devices. Events containing device information are #GDK_MOTION_NOTIFY,
#GDK_BUTTON_PRESS, #GDK_2BUTTON_PRESS, #GDK_3BUTTON_PRESS,
#GDK_BUTTON_RELEASE, #GDK_SCROLL, #GDK_KEY_PRESS, #GDK_KEY_RELEASE,
#GDK_ENTER_NOTIFY, #GDK_LEAVE_NOTIFY, #GDK_FOCUS_CHANGE,
#GDK_PROXIMITY_IN, #GDK_PROXIMITY_OUT, #GDK_DRAG_ENTER, #GDK_DRAG_LEAVE,
#GDK_DRAG_MOTION, #GDK_DRAG_STATUS, #GDK_DROP_START, #GDK_DROP_FINISHED
and #GDK_GRAB_BROKEN. When dealing with an event on a master device,
it is possible to get the source (slave) device that the event originated
from via gdk_event_get_source_device().

On a standard session, all physical devices are connected by default to
the "Virtual Core Pointer/Keyboard" master devices, hence routing all events
through these. This behavior is only modified by device grabs, where the
slave device is temporarily detached for as long as the grab is held, and
more permanently by user modifications to the device hierarchy.

On certain application specific setups, it may make sense
to detach a physical device from its master pointer, and mapping it to
an specific window. This can be achieved by the combination of
gdk_device_grab() and gdk_device_set_mode().

In order to listen for events coming from devices
other than a virtual device, gdk_window_set_device_events() must be
called. Generally, this function can be used to modify the event mask
for any given device.

Input devices may also provide additional information besides X/Y.
For example, graphics tablets may also provide pressure and X/Y tilt
information. This information is device-dependent, and may be
queried through gdk_device_get_axis(). In multidevice mode, virtual
devices will change axes in order to always represent the physical
device that is routing events through it. Whenever the physical device
changes, the #GdkDevice:n-axes property will be notified, and
gdk_device_list_axes() will return the new device axes.

Devices may also have associated &#x201C;keys&#x201D; or
macro buttons. Such keys can be globally set to map into normal X
keyboard events. The mapping is set using gdk_device_set_key().

In GTK+ 3.20, a new #GdkSeat object has been introduced that
supersedes #GdkDeviceManager and should be preferred in newly
written code.</doc>
      <method name="get_client_pointer" c:identifier="gdk_device_manager_get_client_pointer" version="3.0" deprecated="1" deprecated-version="3.20">
        <doc xml:space="preserve">Returns the client pointer, that is, the master pointer that acts as the core pointer
for this application. In X11, window managers may change this depending on the interaction
pattern under the presence of several pointers.

You should use this function seldomly, only in code that isn&#x2019;t triggered by a #GdkEvent
and there aren&#x2019;t other means to get a meaningful #GdkDevice to operate on.</doc>
        <doc-deprecated xml:space="preserve">Use gdk_seat_get_pointer() instead.</doc-deprecated>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The client pointer. This memory is
         owned by GDK and must not be freed or unreferenced.</doc>
          <type name="Device" c:type="GdkDevice*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device_manager" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkDeviceManager</doc>
            <type name="DeviceManager" c:type="GdkDeviceManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_display" c:identifier="gdk_device_manager_get_display" glib:get-property="display" version="3.0">
        <doc xml:space="preserve">Gets the #GdkDisplay associated to @device_manager.</doc>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">the #GdkDisplay to which
         @device_manager is associated to, or %NULL. This memory is
         owned by GDK and must not be freed or unreferenced.</doc>
          <type name="Display" c:type="GdkDisplay*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device_manager" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkDeviceManager</doc>
            <type name="DeviceManager" c:type="GdkDeviceManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="list_devices" c:identifier="gdk_device_manager_list_devices" version="3.0" deprecated="1" deprecated-version="3.20">
        <doc xml:space="preserve">Returns the list of devices of type @type currently attached to
@device_manager.</doc>
        <doc-deprecated xml:space="preserve">, use gdk_seat_get_pointer(), gdk_seat_get_keyboard()
            and gdk_seat_get_slaves() instead.</doc-deprecated>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve">a list of
         #GdkDevices. The returned list must be
         freed with g_list_free (). The list elements are owned by
         GTK+ and must not be freed or unreffed.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Device"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="device_manager" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkDeviceManager</doc>
            <type name="DeviceManager" c:type="GdkDeviceManager*"/>
          </instance-parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve">device type to get.</doc>
            <type name="DeviceType" c:type="GdkDeviceType"/>
          </parameter>
        </parameters>
      </method>
      <property name="display" writable="1" construct-only="1" transfer-ownership="none" getter="get_display">
        <type name="Display"/>
      </property>
      <glib:signal name="device-added" when="last">
        <doc xml:space="preserve">The ::device-added signal is emitted either when a new master
pointer is created, or when a slave (Hardware) input device
is plugged in.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">the newly added #GdkDevice.</doc>
            <type name="Device"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="device-changed" when="last">
        <doc xml:space="preserve">The ::device-changed signal is emitted whenever a device
has changed in the hierarchy, either slave devices being
disconnected from their master device or connected to
another one, or master devices being added or removed
a slave device.

If a slave device is detached from all master devices
(gdk_device_get_associated_device() returns %NULL), its
#GdkDeviceType will change to %GDK_DEVICE_TYPE_FLOATING,
if it's attached, it will change to %GDK_DEVICE_TYPE_SLAVE.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">the #GdkDevice that changed.</doc>
            <type name="Device"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="device-removed" when="last">
        <doc xml:space="preserve">The ::device-removed signal is emitted either when a master
pointer is removed, or when a slave (Hardware) input device
is unplugged.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">the just removed #GdkDevice.</doc>
            <type name="Device"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <interface name="DevicePad" c:symbol-prefix="device_pad" c:type="GdkDevicePad" glib:type-name="GdkDevicePad" glib:get-type="gdk_device_pad_get_type" glib:type-struct="DevicePadInterface">
      <doc xml:space="preserve">#GdkDevicePad is an interface implemented by devices of type
%GDK_SOURCE_TABLET_PAD, it allows querying the features provided
by the pad device.

Tablet pads may contain one or more groups, each containing a subset
of the buttons/rings/strips available. gdk_device_pad_get_n_groups()
can be used to obtain the number of groups, gdk_device_pad_get_n_features()
and gdk_device_pad_get_feature_group() can be combined to find out the
number of buttons/rings/strips the device has, and how are they grouped.

Each of those groups have different modes, which may be used to map
each individual pad feature to multiple actions. Only one mode is
effective (current) for each given group, different groups may have
different current modes. The number of available modes in a group can
be found out through gdk_device_pad_get_group_n_modes(), and the current
mode for a given group will be notified through the #GdkEventPadGroupMode
event.</doc>
      <prerequisite name="Device"/>
      <method name="get_feature_group" c:identifier="gdk_device_pad_get_feature_group" version="3.22">
        <doc xml:space="preserve">Returns the group the given @feature and @idx belong to,
or -1 if feature/index do not exist in @pad.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The group number of the queried pad feature.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="pad" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkDevicePad</doc>
            <type name="DevicePad" c:type="GdkDevicePad*"/>
          </instance-parameter>
          <parameter name="feature" transfer-ownership="none">
            <doc xml:space="preserve">the feature type to get the group from</doc>
            <type name="DevicePadFeature" c:type="GdkDevicePadFeature"/>
          </parameter>
          <parameter name="feature_idx" transfer-ownership="none">
            <doc xml:space="preserve">the index of the feature to get the group from</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_group_n_modes" c:identifier="gdk_device_pad_get_group_n_modes" version="3.22">
        <doc xml:space="preserve">Returns the number of modes that @group may have.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The number of modes available in @group.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="pad" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkDevicePad</doc>
            <type name="DevicePad" c:type="GdkDevicePad*"/>
          </instance-parameter>
          <parameter name="group_idx" transfer-ownership="none">
            <doc xml:space="preserve">group to get the number of available modes from</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_n_features" c:identifier="gdk_device_pad_get_n_features" version="3.22">
        <doc xml:space="preserve">Returns the number of features a tablet pad has.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The amount of elements of type @feature that this pad has.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="pad" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkDevicePad</doc>
            <type name="DevicePad" c:type="GdkDevicePad*"/>
          </instance-parameter>
          <parameter name="feature" transfer-ownership="none">
            <doc xml:space="preserve">a pad feature</doc>
            <type name="DevicePadFeature" c:type="GdkDevicePadFeature"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_n_groups" c:identifier="gdk_device_pad_get_n_groups" version="3.22">
        <doc xml:space="preserve">Returns the number of groups this pad device has. Pads have
at least one group. A pad group is a subcollection of
buttons/strip/rings that is affected collectively by a same
current mode.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The number of button/ring/strip groups in the pad.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="pad" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkDevicePad</doc>
            <type name="DevicePad" c:type="GdkDevicePad*"/>
          </instance-parameter>
        </parameters>
      </method>
    </interface>
    <enumeration name="DevicePadFeature" glib:type-name="GdkDevicePadFeature" glib:get-type="gdk_device_pad_feature_get_type" c:type="GdkDevicePadFeature">
      <doc xml:space="preserve">A pad feature.</doc>
      <member name="button" value="0" c:identifier="GDK_DEVICE_PAD_FEATURE_BUTTON" glib:nick="button" glib:name="GDK_DEVICE_PAD_FEATURE_BUTTON">
        <doc xml:space="preserve">a button</doc>
      </member>
      <member name="ring" value="1" c:identifier="GDK_DEVICE_PAD_FEATURE_RING" glib:nick="ring" glib:name="GDK_DEVICE_PAD_FEATURE_RING">
        <doc xml:space="preserve">a ring-shaped interactive area</doc>
      </member>
      <member name="strip" value="2" c:identifier="GDK_DEVICE_PAD_FEATURE_STRIP" glib:nick="strip" glib:name="GDK_DEVICE_PAD_FEATURE_STRIP">
        <doc xml:space="preserve">a straight interactive area</doc>
      </member>
    </enumeration>
    <record name="DevicePadInterface" c:type="GdkDevicePadInterface" disguised="1" opaque="1" glib:is-gtype-struct-for="DevicePad"/>
    <class name="DeviceTool" c:symbol-prefix="device_tool" c:type="GdkDeviceTool" parent="GObject.Object" glib:type-name="GdkDeviceTool" glib:get-type="gdk_device_tool_get_type">
      <method name="get_hardware_id" c:identifier="gdk_device_tool_get_hardware_id" glib:get-property="hardware-id" version="3.22">
        <doc xml:space="preserve">Gets the hardware ID of this tool, or 0 if it's not known. When
non-zero, the identificator is unique for the given tool model,
meaning that two identical tools will share the same @hardware_id,
but will have different serial numbers (see gdk_device_tool_get_serial()).

This is a more concrete (and device specific) method to identify
a #GdkDeviceTool than gdk_device_tool_get_tool_type(), as a tablet
may support multiple devices with the same #GdkDeviceToolType,
but having different hardware identificators.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The hardware identificator of this tool.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="tool" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkDeviceTool</doc>
            <type name="DeviceTool" c:type="GdkDeviceTool*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_serial" c:identifier="gdk_device_tool_get_serial" glib:get-property="serial" version="3.22">
        <doc xml:space="preserve">Gets the serial of this tool, this value can be used to identify a
physical tool (eg. a tablet pen) across program executions.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The serial ID for this tool</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="tool" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkDeviceTool</doc>
            <type name="DeviceTool" c:type="GdkDeviceTool*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_tool_type" c:identifier="gdk_device_tool_get_tool_type" glib:get-property="tool-type" version="3.22">
        <doc xml:space="preserve">Gets the #GdkDeviceToolType of the tool.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The physical type for this tool. This can be used to figure out what
sort of pen is being used, such as an airbrush or a pencil.</doc>
          <type name="DeviceToolType" c:type="GdkDeviceToolType"/>
        </return-value>
        <parameters>
          <instance-parameter name="tool" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkDeviceTool</doc>
            <type name="DeviceTool" c:type="GdkDeviceTool*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="axes" writable="1" construct-only="1" transfer-ownership="none" default-value="0">
        <type name="AxisFlags"/>
      </property>
      <property name="hardware-id" writable="1" construct-only="1" transfer-ownership="none" getter="get_hardware_id" default-value="0">
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="serial" writable="1" construct-only="1" transfer-ownership="none" getter="get_serial" default-value="0">
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="tool-type" writable="1" construct-only="1" transfer-ownership="none" getter="get_tool_type" default-value="GDK_DEVICE_TOOL_TYPE_UNKNOWN">
        <type name="DeviceToolType"/>
      </property>
    </class>
    <enumeration name="DeviceToolType" version="3.22" glib:type-name="GdkDeviceToolType" glib:get-type="gdk_device_tool_type_get_type" c:type="GdkDeviceToolType">
      <doc xml:space="preserve">Indicates the specific type of tool being used being a tablet. Such as an
airbrush, pencil, etc.</doc>
      <member name="unknown" value="0" c:identifier="GDK_DEVICE_TOOL_TYPE_UNKNOWN" glib:nick="unknown" glib:name="GDK_DEVICE_TOOL_TYPE_UNKNOWN">
        <doc xml:space="preserve">Tool is of an unknown type.</doc>
      </member>
      <member name="pen" value="1" c:identifier="GDK_DEVICE_TOOL_TYPE_PEN" glib:nick="pen" glib:name="GDK_DEVICE_TOOL_TYPE_PEN">
        <doc xml:space="preserve">Tool is a standard tablet stylus.</doc>
      </member>
      <member name="eraser" value="2" c:identifier="GDK_DEVICE_TOOL_TYPE_ERASER" glib:nick="eraser" glib:name="GDK_DEVICE_TOOL_TYPE_ERASER">
        <doc xml:space="preserve">Tool is standard tablet eraser.</doc>
      </member>
      <member name="brush" value="3" c:identifier="GDK_DEVICE_TOOL_TYPE_BRUSH" glib:nick="brush" glib:name="GDK_DEVICE_TOOL_TYPE_BRUSH">
        <doc xml:space="preserve">Tool is a brush stylus.</doc>
      </member>
      <member name="pencil" value="4" c:identifier="GDK_DEVICE_TOOL_TYPE_PENCIL" glib:nick="pencil" glib:name="GDK_DEVICE_TOOL_TYPE_PENCIL">
        <doc xml:space="preserve">Tool is a pencil stylus.</doc>
      </member>
      <member name="airbrush" value="5" c:identifier="GDK_DEVICE_TOOL_TYPE_AIRBRUSH" glib:nick="airbrush" glib:name="GDK_DEVICE_TOOL_TYPE_AIRBRUSH">
        <doc xml:space="preserve">Tool is an airbrush stylus.</doc>
      </member>
      <member name="mouse" value="6" c:identifier="GDK_DEVICE_TOOL_TYPE_MOUSE" glib:nick="mouse" glib:name="GDK_DEVICE_TOOL_TYPE_MOUSE">
        <doc xml:space="preserve">Tool is a mouse.</doc>
      </member>
      <member name="lens" value="7" c:identifier="GDK_DEVICE_TOOL_TYPE_LENS" glib:nick="lens" glib:name="GDK_DEVICE_TOOL_TYPE_LENS">
        <doc xml:space="preserve">Tool is a lens cursor.</doc>
      </member>
    </enumeration>
    <enumeration name="DeviceType" glib:type-name="GdkDeviceType" glib:get-type="gdk_device_type_get_type" c:type="GdkDeviceType">
      <doc xml:space="preserve">Indicates the device type. See [above][GdkDeviceManager.description]
for more information about the meaning of these device types.</doc>
      <member name="master" value="0" c:identifier="GDK_DEVICE_TYPE_MASTER" glib:nick="master" glib:name="GDK_DEVICE_TYPE_MASTER">
        <doc xml:space="preserve">Device is a master (or virtual) device. There will
                         be an associated focus indicator on the screen.</doc>
      </member>
      <member name="slave" value="1" c:identifier="GDK_DEVICE_TYPE_SLAVE" glib:nick="slave" glib:name="GDK_DEVICE_TYPE_SLAVE">
        <doc xml:space="preserve">Device is a slave (or physical) device.</doc>
      </member>
      <member name="floating" value="2" c:identifier="GDK_DEVICE_TYPE_FLOATING" glib:nick="floating" glib:name="GDK_DEVICE_TYPE_FLOATING">
        <doc xml:space="preserve">Device is a physical device, currently not attached to
                           any virtual device.</doc>
      </member>
    </enumeration>
    <class name="Display" c:symbol-prefix="display" c:type="GdkDisplay" parent="GObject.Object" glib:type-name="GdkDisplay" glib:get-type="gdk_display_get_type">
      <doc xml:space="preserve">#GdkDisplay objects purpose are two fold:

- To manage and provide information about input devices (pointers and keyboards)

- To manage and provide information about the available #GdkScreens

GdkDisplay objects are the GDK representation of an X Display,
which can be described as a workstation consisting of
a keyboard, a pointing device (such as a mouse) and one or more
screens.
It is used to open and keep track of various GdkScreen objects
currently instantiated by the application. It is also used to
access the keyboard(s) and mouse pointer(s) of the display.

Most of the input device handling has been factored out into
the separate #GdkDeviceManager object. Every display has a
device manager, which you can obtain using
gdk_display_get_device_manager().</doc>
      <function name="get_default" c:identifier="gdk_display_get_default" version="2.2">
        <doc xml:space="preserve">Gets the default #GdkDisplay. This is a convenience
function for:
`gdk_display_manager_get_default_display (gdk_display_manager_get ())`.</doc>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">a #GdkDisplay, or %NULL if
  there is no default display.</doc>
          <type name="Display" c:type="GdkDisplay*"/>
        </return-value>
      </function>
      <function name="open" c:identifier="gdk_display_open" version="2.2">
        <doc xml:space="preserve">Opens a display.</doc>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">a #GdkDisplay, or %NULL if the
    display could not be opened</doc>
          <type name="Display" c:type="GdkDisplay*"/>
        </return-value>
        <parameters>
          <parameter name="display_name" transfer-ownership="none">
            <doc xml:space="preserve">the name of the display to open</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="open_default_libgtk_only" c:identifier="gdk_display_open_default_libgtk_only" deprecated="1" deprecated-version="3.16">
        <doc xml:space="preserve">Opens the default display specified by command line arguments or
environment variables, sets it as the default display, and returns
it. gdk_parse_args() must have been called first. If the default
display has previously been set, simply returns that. An internal
function that should not be used by applications.</doc>
        <doc-deprecated xml:space="preserve">This symbol was never meant to be used outside
  of GTK+</doc-deprecated>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">the default display, if it
  could be opened, otherwise %NULL.</doc>
          <type name="Display" c:type="GdkDisplay*"/>
        </return-value>
      </function>
      <method name="beep" c:identifier="gdk_display_beep" version="2.2">
        <doc xml:space="preserve">Emits a short beep on @display</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="display" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkDisplay</doc>
            <type name="Display" c:type="GdkDisplay*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="close" c:identifier="gdk_display_close" version="2.2">
        <doc xml:space="preserve">Closes the connection to the windowing system for the given display,
and cleans up associated resources.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="display" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkDisplay</doc>
            <type name="Display" c:type="GdkDisplay*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="device_is_grabbed" c:identifier="gdk_display_device_is_grabbed">
        <doc xml:space="preserve">Returns %TRUE if there is an ongoing grab on @device for @display.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if there is a grab in effect for @device.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="display" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkDisplay</doc>
            <type name="Display" c:type="GdkDisplay*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkDevice</doc>
            <type name="Device" c:type="GdkDevice*"/>
          </parameter>
        </parameters>
      </method>
      <method name="flush" c:identifier="gdk_display_flush" version="2.4">
        <doc xml:space="preserve">Flushes any requests queued for the windowing system; this happens automatically
when the main loop blocks waiting for new events, but if your application
is drawing without returning control to the main loop, you may need
to call this function explicitly. A common case where this function
needs to be called is when an application is executing drawing commands
from a thread other than the thread where the main loop is running.

This is most useful for X11. On windowing systems where requests are
handled synchronously, this function will do nothing.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="display" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkDisplay</doc>
            <type name="Display" c:type="GdkDisplay*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_app_launch_context" c:identifier="gdk_display_get_app_launch_context" version="3.0">
        <doc xml:space="preserve">Returns a #GdkAppLaunchContext suitable for launching
applications on the given display.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #GdkAppLaunchContext for @display.
    Free with g_object_unref() when done</doc>
          <type name="AppLaunchContext" c:type="GdkAppLaunchContext*"/>
        </return-value>
        <parameters>
          <instance-parameter name="display" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkDisplay</doc>
            <type name="Display" c:type="GdkDisplay*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_default_cursor_size" c:identifier="gdk_display_get_default_cursor_size" version="2.4">
        <doc xml:space="preserve">Returns the default size to use for cursors on @display.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the default cursor size.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="display" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkDisplay</doc>
            <type name="Display" c:type="GdkDisplay*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_default_group" c:identifier="gdk_display_get_default_group" version="2.4">
        <doc xml:space="preserve">Returns the default group leader window for all toplevel windows
on @display. This window is implicitly created by GDK.
See gdk_window_set_group().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The default group leader window
for @display</doc>
          <type name="Window" c:type="GdkWindow*"/>
        </return-value>
        <parameters>
          <instance-parameter name="display" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkDisplay</doc>
            <type name="Display" c:type="GdkDisplay*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_default_screen" c:identifier="gdk_display_get_default_screen" version="2.2">
        <doc xml:space="preserve">Get the default #GdkScreen for @display.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the default #GdkScreen object for @display</doc>
          <type name="Screen" c:type="GdkScreen*"/>
        </return-value>
        <parameters>
          <instance-parameter name="display" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkDisplay</doc>
            <type name="Display" c:type="GdkDisplay*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_default_seat" c:identifier="gdk_display_get_default_seat" version="3.20">
        <doc xml:space="preserve">Returns the default #GdkSeat for this display.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the default seat.</doc>
          <type name="Seat" c:type="GdkSeat*"/>
        </return-value>
        <parameters>
          <instance-parameter name="display" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkDisplay</doc>
            <type name="Display" c:type="GdkDisplay*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_device_manager" c:identifier="gdk_display_get_device_manager" version="3.0" deprecated="1" deprecated-version="3.20.">
        <doc xml:space="preserve">Returns the #GdkDeviceManager associated to @display.</doc>
        <doc-deprecated xml:space="preserve">Use gdk_display_get_default_seat() and #GdkSeat operations.</doc-deprecated>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">A #GdkDeviceManager, or
         %NULL. This memory is owned by GDK and must not be freed
         or unreferenced.</doc>
          <type name="DeviceManager" c:type="GdkDeviceManager*"/>
        </return-value>
        <parameters>
          <instance-parameter name="display" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkDisplay.</doc>
            <type name="Display" c:type="GdkDisplay*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_event" c:identifier="gdk_display_get_event" version="2.2">
        <doc xml:space="preserve">Gets the next #GdkEvent to be processed for @display, fetching events from the
windowing system if necessary.</doc>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve">the next #GdkEvent to be processed, or %NULL
if no events are pending. The returned #GdkEvent should be freed
with gdk_event_free().</doc>
          <type name="Event" c:type="GdkEvent*"/>
        </return-value>
        <parameters>
          <instance-parameter name="display" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkDisplay</doc>
            <type name="Display" c:type="GdkDisplay*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_maximal_cursor_size" c:identifier="gdk_display_get_maximal_cursor_size" version="2.4">
        <doc xml:space="preserve">Gets the maximal size to use for cursors on @display.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="display" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkDisplay</doc>
            <type name="Display" c:type="GdkDisplay*"/>
          </instance-parameter>
          <parameter name="width" direction="out" caller-allocates="0" transfer-ownership="full">
            <doc xml:space="preserve">the return location for the maximal cursor width</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
          <parameter name="height" direction="out" caller-allocates="0" transfer-ownership="full">
            <doc xml:space="preserve">the return location for the maximal cursor height</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_monitor" c:identifier="gdk_display_get_monitor" version="3.22">
        <doc xml:space="preserve">Gets a monitor associated with this display.</doc>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">the #GdkMonitor, or %NULL if
   @monitor_num is not a valid monitor number</doc>
          <type name="Monitor" c:type="GdkMonitor*"/>
        </return-value>
        <parameters>
          <instance-parameter name="display" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkDisplay</doc>
            <type name="Display" c:type="GdkDisplay*"/>
          </instance-parameter>
          <parameter name="monitor_num" transfer-ownership="none">
            <doc xml:space="preserve">number of the monitor</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_monitor_at_point" c:identifier="gdk_display_get_monitor_at_point" version="3.22">
        <doc xml:space="preserve">Gets the monitor in which the point (@x, @y) is located,
or a nearby monitor if the point is not in any monitor.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the monitor containing the point</doc>
          <type name="Monitor" c:type="GdkMonitor*"/>
        </return-value>
        <parameters>
          <instance-parameter name="display" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkDisplay</doc>
            <type name="Display" c:type="GdkDisplay*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">the x coordinate of the point</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve">the y coordinate of the point</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_monitor_at_window" c:identifier="gdk_display_get_monitor_at_window" version="3.22">
        <doc xml:space="preserve">Gets the monitor in which the largest area of @window
resides, or a monitor close to @window if it is outside
of all monitors.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the monitor with the largest overlap with @window</doc>
          <type name="Monitor" c:type="GdkMonitor*"/>
        </return-value>
        <parameters>
          <instance-parameter name="display" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkDisplay</doc>
            <type name="Display" c:type="GdkDisplay*"/>
          </instance-parameter>
          <parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_n_monitors" c:identifier="gdk_display_get_n_monitors" version="3.22">
        <doc xml:space="preserve">Gets the number of monitors that belong to @display.

The returned number is valid until the next emission of the
#GdkDisplay::monitor-added or #GdkDisplay::monitor-removed signal.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the number of monitors</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="display" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkDisplay</doc>
            <type name="Display" c:type="GdkDisplay*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_n_screens" c:identifier="gdk_display_get_n_screens" version="2.2" deprecated="1" deprecated-version="3.10">
        <doc xml:space="preserve">Gets the number of screen managed by the @display.</doc>
        <doc-deprecated xml:space="preserve">The number of screens is always 1.</doc-deprecated>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">number of screens.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="display" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkDisplay</doc>
            <type name="Display" c:type="GdkDisplay*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name" c:identifier="gdk_display_get_name" version="2.2">
        <doc xml:space="preserve">Gets the name of the display.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a string representing the display name. This string is owned
by GDK and should not be modified or freed.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="display" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkDisplay</doc>
            <type name="Display" c:type="GdkDisplay*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_pointer" c:identifier="gdk_display_get_pointer" version="2.2" deprecated="1" deprecated-version="3.0">
        <doc xml:space="preserve">Gets the current location of the pointer and the current modifier
mask for a given display.</doc>
        <doc-deprecated xml:space="preserve">Use gdk_device_get_position() instead.</doc-deprecated>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="display" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkDisplay</doc>
            <type name="Display" c:type="GdkDisplay*"/>
          </instance-parameter>
          <parameter name="screen" direction="out" caller-allocates="0" transfer-ownership="none" optional="1" allow-none="1">
            <doc xml:space="preserve">location to store the screen that the
         cursor is on, or %NULL.</doc>
            <type name="Screen" c:type="GdkScreen**"/>
          </parameter>
          <parameter name="x" direction="out" caller-allocates="0" transfer-ownership="full" optional="1" allow-none="1">
            <doc xml:space="preserve">location to store root window X coordinate of pointer, or %NULL.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="y" direction="out" caller-allocates="0" transfer-ownership="full" optional="1" allow-none="1">
            <doc xml:space="preserve">location to store root window Y coordinate of pointer, or %NULL.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="mask" direction="out" caller-allocates="0" transfer-ownership="full" optional="1" allow-none="1">
            <doc xml:space="preserve">location to store current modifier mask, or %NULL</doc>
            <type name="ModifierType" c:type="GdkModifierType*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_primary_monitor" c:identifier="gdk_display_get_primary_monitor" version="3.22">
        <doc xml:space="preserve">Gets the primary monitor for the display.

The primary monitor is considered the monitor where the &#x201C;main desktop&#x201D;
lives. While normal application windows typically allow the window
manager to place the windows, specialized desktop applications
such as panels should place themselves on the primary monitor.</doc>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">the primary monitor, or %NULL if no primary
    monitor is configured by the user</doc>
          <type name="Monitor" c:type="GdkMonitor*"/>
        </return-value>
        <parameters>
          <instance-parameter name="display" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkDisplay</doc>
            <type name="Display" c:type="GdkDisplay*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_screen" c:identifier="gdk_display_get_screen" version="2.2" deprecated="1" deprecated-version="3.20">
        <doc xml:space="preserve">Returns a screen object for one of the screens of the display.</doc>
        <doc-deprecated xml:space="preserve">There is only one screen; use gdk_display_get_default_screen() to get it.</doc-deprecated>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the #GdkScreen object</doc>
          <type name="Screen" c:type="GdkScreen*"/>
        </return-value>
        <parameters>
          <instance-parameter name="display" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkDisplay</doc>
            <type name="Display" c:type="GdkDisplay*"/>
          </instance-parameter>
          <parameter name="screen_num" transfer-ownership="none">
            <doc xml:space="preserve">the screen number</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_window_at_pointer" c:identifier="gdk_display_get_window_at_pointer" version="2.2" deprecated="1" deprecated-version="3.0">
        <doc xml:space="preserve">Obtains the window underneath the mouse pointer, returning the location
of the pointer in that window in @win_x, @win_y for @screen. Returns %NULL
if the window under the mouse pointer is not known to GDK (for example,
belongs to another application).</doc>
        <doc-deprecated xml:space="preserve">Use gdk_device_get_window_at_position() instead.</doc-deprecated>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">the window under the mouse
  pointer, or %NULL</doc>
          <type name="Window" c:type="GdkWindow*"/>
        </return-value>
        <parameters>
          <instance-parameter name="display" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkDisplay</doc>
            <type name="Display" c:type="GdkDisplay*"/>
          </instance-parameter>
          <parameter name="win_x" direction="out" caller-allocates="0" transfer-ownership="full" optional="1" allow-none="1">
            <doc xml:space="preserve">return location for x coordinate of the pointer location relative
   to the window origin, or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="win_y" direction="out" caller-allocates="0" transfer-ownership="full" optional="1" allow-none="1">
            <doc xml:space="preserve">return location for y coordinate of the pointer location relative
 &amp;    to the window origin, or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="has_pending" c:identifier="gdk_display_has_pending" version="3.0">
        <doc xml:space="preserve">Returns whether the display has events that are waiting
to be processed.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if there are events ready to be processed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="display" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkDisplay</doc>
            <type name="Display" c:type="GdkDisplay*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_closed" c:identifier="gdk_display_is_closed" version="2.22">
        <doc xml:space="preserve">Finds out if the display has been closed.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the display is closed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="display" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkDisplay</doc>
            <type name="Display" c:type="GdkDisplay*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="keyboard_ungrab" c:identifier="gdk_display_keyboard_ungrab" version="2.2" deprecated="1" deprecated-version="3.0">
        <doc xml:space="preserve">Release any keyboard grab</doc>
        <doc-deprecated xml:space="preserve">Use gdk_device_ungrab(), together with gdk_device_grab()
            instead.</doc-deprecated>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="display" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkDisplay.</doc>
            <type name="Display" c:type="GdkDisplay*"/>
          </instance-parameter>
          <parameter name="time_" transfer-ownership="none">
            <doc xml:space="preserve">a timestap (e.g #GDK_CURRENT_TIME).</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="list_devices" c:identifier="gdk_display_list_devices" version="2.2" deprecated="1" deprecated-version="3.0">
        <doc xml:space="preserve">Returns the list of available input devices attached to @display.
The list is statically allocated and should not be freed.</doc>
        <doc-deprecated xml:space="preserve">Use gdk_device_manager_list_devices() instead.</doc-deprecated>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">
    a list of #GdkDevice</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Device"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="display" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkDisplay</doc>
            <type name="Display" c:type="GdkDisplay*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="list_seats" c:identifier="gdk_display_list_seats" version="3.20">
        <doc xml:space="preserve">Returns the list of seats known to @display.</doc>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve">the
         list of seats known to the #GdkDisplay</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Seat"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="display" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkDisplay</doc>
            <type name="Display" c:type="GdkDisplay*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="notify_startup_complete" c:identifier="gdk_display_notify_startup_complete" version="3.0">
        <doc xml:space="preserve">Indicates to the GUI environment that the application has
finished loading, using a given identifier.

GTK+ will call this function automatically for #GtkWindow
with custom startup-notification identifier unless
gtk_window_set_auto_startup_notification() is called to
disable that feature.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="display" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkDisplay</doc>
            <type name="Display" c:type="GdkDisplay*"/>
          </instance-parameter>
          <parameter name="startup_id" transfer-ownership="none">
            <doc xml:space="preserve">a startup-notification identifier, for which
    notification process should be completed</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="peek_event" c:identifier="gdk_display_peek_event" version="2.2">
        <doc xml:space="preserve">Gets a copy of the first #GdkEvent in the @display&#x2019;s event queue, without
removing the event from the queue.  (Note that this function will
not get more events from the windowing system.  It only checks the events
that have already been moved to the GDK event queue.)</doc>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve">a copy of the first #GdkEvent on the event
queue, or %NULL if no events are in the queue. The returned
#GdkEvent should be freed with gdk_event_free().</doc>
          <type name="Event" c:type="GdkEvent*"/>
        </return-value>
        <parameters>
          <instance-parameter name="display" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkDisplay</doc>
            <type name="Display" c:type="GdkDisplay*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="pointer_is_grabbed" c:identifier="gdk_display_pointer_is_grabbed" version="2.2" deprecated="1" deprecated-version="3.0">
        <doc xml:space="preserve">Test if the pointer is grabbed.</doc>
        <doc-deprecated xml:space="preserve">Use gdk_display_device_is_grabbed() instead.</doc-deprecated>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if an active X pointer grab is in effect</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="display" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkDisplay</doc>
            <type name="Display" c:type="GdkDisplay*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="pointer_ungrab" c:identifier="gdk_display_pointer_ungrab" version="2.2" deprecated="1" deprecated-version="3.0">
        <doc xml:space="preserve">Release any pointer grab.</doc>
        <doc-deprecated xml:space="preserve">Use gdk_device_ungrab(), together with gdk_device_grab()
            instead.</doc-deprecated>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="display" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkDisplay.</doc>
            <type name="Display" c:type="GdkDisplay*"/>
          </instance-parameter>
          <parameter name="time_" transfer-ownership="none">
            <doc xml:space="preserve">a timestap (e.g. %GDK_CURRENT_TIME).</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="put_event" c:identifier="gdk_display_put_event" version="2.2">
        <doc xml:space="preserve">Appends a copy of the given event onto the front of the event
queue for @display.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="display" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkDisplay</doc>
            <type name="Display" c:type="GdkDisplay*"/>
          </instance-parameter>
          <parameter name="event" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkEvent.</doc>
            <type name="Event" c:type="const GdkEvent*"/>
          </parameter>
        </parameters>
      </method>
      <method name="request_selection_notification" c:identifier="gdk_display_request_selection_notification" version="2.6">
        <doc xml:space="preserve">Request #GdkEventOwnerChange events for ownership changes
of the selection named by the given atom.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">whether #GdkEventOwnerChange events will
              be sent.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="display" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkDisplay</doc>
            <type name="Display" c:type="GdkDisplay*"/>
          </instance-parameter>
          <parameter name="selection" transfer-ownership="none">
            <doc xml:space="preserve">the #GdkAtom naming the selection for which
            ownership change notification is requested</doc>
            <type name="Atom" c:type="GdkAtom"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_double_click_distance" c:identifier="gdk_display_set_double_click_distance" version="2.4">
        <doc xml:space="preserve">Sets the double click distance (two clicks within this distance
count as a double click and result in a #GDK_2BUTTON_PRESS event).
See also gdk_display_set_double_click_time().
Applications should not set this, it is a global
user-configured setting.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="display" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkDisplay</doc>
            <type name="Display" c:type="GdkDisplay*"/>
          </instance-parameter>
          <parameter name="distance" transfer-ownership="none">
            <doc xml:space="preserve">distance in pixels</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_double_click_time" c:identifier="gdk_display_set_double_click_time" version="2.2">
        <doc xml:space="preserve">Sets the double click time (two clicks within this time interval
count as a double click and result in a #GDK_2BUTTON_PRESS event).
Applications should not set this, it is a global
user-configured setting.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="display" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkDisplay</doc>
            <type name="Display" c:type="GdkDisplay*"/>
          </instance-parameter>
          <parameter name="msec" transfer-ownership="none">
            <doc xml:space="preserve">double click time in milliseconds (thousandths of a second)</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="store_clipboard" c:identifier="gdk_display_store_clipboard" version="2.6">
        <doc xml:space="preserve">Issues a request to the clipboard manager to store the
clipboard data. On X11, this is a special program that works
according to the
[FreeDesktop Clipboard Specification](http://www.freedesktop.org/Standards/clipboard-manager-spec).</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="display" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkDisplay</doc>
            <type name="Display" c:type="GdkDisplay*"/>
          </instance-parameter>
          <parameter name="clipboard_window" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkWindow belonging to the clipboard owner</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </parameter>
          <parameter name="time_" transfer-ownership="none">
            <doc xml:space="preserve">a timestamp</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
          <parameter name="targets" transfer-ownership="none" nullable="1" allow-none="1">
            <doc xml:space="preserve">an array of targets
                   that should be saved, or %NULL
                   if all available targets should be saved.</doc>
            <array length="3" zero-terminated="0" c:type="const GdkAtom*">
              <type name="Atom" c:type="GdkAtom"/>
            </array>
          </parameter>
          <parameter name="n_targets" transfer-ownership="none">
            <doc xml:space="preserve">length of the @targets array</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="supports_clipboard_persistence" c:identifier="gdk_display_supports_clipboard_persistence" version="2.6">
        <doc xml:space="preserve">Returns whether the speicifed display supports clipboard
persistance; i.e. if it&#x2019;s possible to store the clipboard data after an
application has quit. On X11 this checks if a clipboard daemon is
running.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the display supports clipboard persistance.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="display" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkDisplay</doc>
            <type name="Display" c:type="GdkDisplay*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="supports_composite" c:identifier="gdk_display_supports_composite" version="2.12" deprecated="1" deprecated-version="3.16">
        <doc xml:space="preserve">Returns %TRUE if gdk_window_set_composited() can be used
to redirect drawing on the window using compositing.

Currently this only works on X11 with XComposite and
XDamage extensions available.</doc>
        <doc-deprecated xml:space="preserve">Compositing is an outdated technology that
  only ever worked on X11.</doc-deprecated>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if windows may be composited.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="display" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkDisplay</doc>
            <type name="Display" c:type="GdkDisplay*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="supports_cursor_alpha" c:identifier="gdk_display_supports_cursor_alpha" version="2.4">
        <doc xml:space="preserve">Returns %TRUE if cursors can use an 8bit alpha channel
on @display. Otherwise, cursors are restricted to bilevel
alpha (i.e. a mask).</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">whether cursors can have alpha channels.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="display" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkDisplay</doc>
            <type name="Display" c:type="GdkDisplay*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="supports_cursor_color" c:identifier="gdk_display_supports_cursor_color" version="2.4">
        <doc xml:space="preserve">Returns %TRUE if multicolored cursors are supported
on @display. Otherwise, cursors have only a forground
and a background color.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">whether cursors can have multiple colors.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="display" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkDisplay</doc>
            <type name="Display" c:type="GdkDisplay*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="supports_input_shapes" c:identifier="gdk_display_supports_input_shapes" version="2.10">
        <doc xml:space="preserve">Returns %TRUE if gdk_window_input_shape_combine_mask() can
be used to modify the input shape of windows on @display.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if windows with modified input shape are supported</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="display" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkDisplay</doc>
            <type name="Display" c:type="GdkDisplay*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="supports_selection_notification" c:identifier="gdk_display_supports_selection_notification" version="2.6">
        <doc xml:space="preserve">Returns whether #GdkEventOwnerChange events will be
sent when the owner of a selection changes.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">whether #GdkEventOwnerChange events will
              be sent.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="display" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkDisplay</doc>
            <type name="Display" c:type="GdkDisplay*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="supports_shapes" c:identifier="gdk_display_supports_shapes" version="2.10">
        <doc xml:space="preserve">Returns %TRUE if gdk_window_shape_combine_mask() can
be used to create shaped windows on @display.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if shaped windows are supported</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="display" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkDisplay</doc>
            <type name="Display" c:type="GdkDisplay*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="sync" c:identifier="gdk_display_sync" version="2.2">
        <doc xml:space="preserve">Flushes any requests queued for the windowing system and waits until all
requests have been handled. This is often used for making sure that the
display is synchronized with the current state of the program. Calling
gdk_display_sync() before gdk_error_trap_pop() makes sure that any errors
generated from earlier requests are handled before the error trap is
removed.

This is most useful for X11. On windowing systems where requests are
handled synchronously, this function will do nothing.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="display" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkDisplay</doc>
            <type name="Display" c:type="GdkDisplay*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="warp_pointer" c:identifier="gdk_display_warp_pointer" version="2.8" deprecated="1" deprecated-version="3.0">
        <doc xml:space="preserve">Warps the pointer of @display to the point @x,@y on
the screen @screen, unless the pointer is confined
to a window by a grab, in which case it will be moved
as far as allowed by the grab. Warping the pointer
creates events as if the user had moved the mouse
instantaneously to the destination.

Note that the pointer should normally be under the
control of the user. This function was added to cover
some rare use cases like keyboard navigation support
for the color picker in the #GtkColorSelectionDialog.</doc>
        <doc-deprecated xml:space="preserve">Use gdk_device_warp() instead.</doc-deprecated>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="display" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkDisplay</doc>
            <type name="Display" c:type="GdkDisplay*"/>
          </instance-parameter>
          <parameter name="screen" transfer-ownership="none">
            <doc xml:space="preserve">the screen of @display to warp the pointer to</doc>
            <type name="Screen" c:type="GdkScreen*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">the x coordinate of the destination</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve">the y coordinate of the destination</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <glib:signal name="closed" when="last" version="2.2">
        <doc xml:space="preserve">The ::closed signal is emitted when the connection to the windowing
system for @display is closed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="is_error" transfer-ownership="none">
            <doc xml:space="preserve">%TRUE if the display was closed due to an error</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="monitor-added" when="last" version="3.22">
        <doc xml:space="preserve">The ::monitor-added signal is emitted whenever a monitor is
added.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="monitor" transfer-ownership="none">
            <doc xml:space="preserve">the monitor that was just added</doc>
            <type name="Monitor"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="monitor-removed" when="last" version="3.22">
        <doc xml:space="preserve">The ::monitor-removed signal is emitted whenever a monitor is
removed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="monitor" transfer-ownership="none">
            <doc xml:space="preserve">the monitor that was just removed</doc>
            <type name="Monitor"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="opened" when="last">
        <doc xml:space="preserve">The ::opened signal is emitted when the connection to the windowing
system for @display is opened.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="seat-added" when="last" version="3.20">
        <doc xml:space="preserve">The ::seat-added signal is emitted whenever a new seat is made
known to the windowing system.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="seat" transfer-ownership="none">
            <doc xml:space="preserve">the seat that was just added</doc>
            <type name="Seat"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="seat-removed" when="last" version="3.20">
        <doc xml:space="preserve">The ::seat-removed signal is emitted whenever a seat is removed
by the windowing system.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="seat" transfer-ownership="none">
            <doc xml:space="preserve">the seat that was just removed</doc>
            <type name="Seat"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <class name="DisplayManager" c:symbol-prefix="display_manager" c:type="GdkDisplayManager" parent="GObject.Object" glib:type-name="GdkDisplayManager" glib:get-type="gdk_display_manager_get_type">
      <doc xml:space="preserve">The purpose of the #GdkDisplayManager singleton object is to offer
notification when displays appear or disappear or the default display
changes.

You can use gdk_display_manager_get() to obtain the #GdkDisplayManager
singleton, but that should be rarely necessary. Typically, initializing
GTK+ opens a display that you can work with without ever accessing the
#GdkDisplayManager.

The GDK library can be built with support for multiple backends.
The #GdkDisplayManager object determines which backend is used
at runtime.

When writing backend-specific code that is supposed to work with
multiple GDK backends, you have to consider both compile time and
runtime. At compile time, use the #GDK_WINDOWING_X11, #GDK_WINDOWING_WIN32
macros, etc. to find out which backends are present in the GDK library
you are building your application against. At runtime, use type-check
macros like GDK_IS_X11_DISPLAY() to find out which backend is in use:

## Backend-specific code ## {#backend-specific}

|[&lt;!-- language="C" --&gt;
#ifdef GDK_WINDOWING_X11
  if (GDK_IS_X11_DISPLAY (display))
    {
      // make X11-specific calls here
    }
  else
#endif
#ifdef GDK_WINDOWING_QUARTZ
  if (GDK_IS_QUARTZ_DISPLAY (display))
    {
      // make Quartz-specific calls here
    }
  else
#endif
  g_error ("Unsupported GDK backend");
]|</doc>
      <function name="get" c:identifier="gdk_display_manager_get" version="2.2">
        <doc xml:space="preserve">Gets the singleton #GdkDisplayManager object.

When called for the first time, this function consults the
`GDK_BACKEND` environment variable to find out which
of the supported GDK backends to use (in case GDK has been compiled
with multiple backends). Applications can use gdk_set_allowed_backends()
to limit what backends can be used.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The global #GdkDisplayManager singleton;
    gdk_parse_args(), gdk_init(), or gdk_init_check() must have
    been called first.</doc>
          <type name="DisplayManager" c:type="GdkDisplayManager*"/>
        </return-value>
      </function>
      <method name="get_default_display" c:identifier="gdk_display_manager_get_default_display" glib:get-property="default-display" version="2.2">
        <doc xml:space="preserve">Gets the default #GdkDisplay.</doc>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">a #GdkDisplay, or %NULL if
    there is no default display.</doc>
          <type name="Display" c:type="GdkDisplay*"/>
        </return-value>
        <parameters>
          <instance-parameter name="manager" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkDisplayManager</doc>
            <type name="DisplayManager" c:type="GdkDisplayManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="list_displays" c:identifier="gdk_display_manager_list_displays" version="2.2">
        <doc xml:space="preserve">List all currently open displays.</doc>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve">a newly
    allocated #GSList of #GdkDisplay objects. Free with g_slist_free()
    when you are done with it.</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="Display"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="manager" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkDisplayManager</doc>
            <type name="DisplayManager" c:type="GdkDisplayManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="open_display" c:identifier="gdk_display_manager_open_display" version="3.0">
        <doc xml:space="preserve">Opens a display.</doc>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">a #GdkDisplay, or %NULL if the
    display could not be opened</doc>
          <type name="Display" c:type="GdkDisplay*"/>
        </return-value>
        <parameters>
          <instance-parameter name="manager" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkDisplayManager</doc>
            <type name="DisplayManager" c:type="GdkDisplayManager*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">the name of the display to open</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_default_display" c:identifier="gdk_display_manager_set_default_display" glib:set-property="default-display" version="2.2">
        <doc xml:space="preserve">Sets @display as the default display.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="manager" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkDisplayManager</doc>
            <type name="DisplayManager" c:type="GdkDisplayManager*"/>
          </instance-parameter>
          <parameter name="display" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkDisplay</doc>
            <type name="Display" c:type="GdkDisplay*"/>
          </parameter>
        </parameters>
      </method>
      <property name="default-display" writable="1" transfer-ownership="none" setter="set_default_display" getter="get_default_display">
        <type name="Display"/>
      </property>
      <glib:signal name="display-opened" when="last" version="2.2">
        <doc xml:space="preserve">The ::display-opened signal is emitted when a display is opened.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="display" transfer-ownership="none">
            <doc xml:space="preserve">the opened display</doc>
            <type name="Display"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <bitfield name="DragAction" glib:type-name="GdkDragAction" glib:get-type="gdk_drag_action_get_type" c:type="GdkDragAction">
      <doc xml:space="preserve">Used in #GdkDragContext to indicate what the destination
should do with the dropped data.</doc>
      <member name="default" value="1" c:identifier="GDK_ACTION_DEFAULT" glib:nick="default" glib:name="GDK_ACTION_DEFAULT">
        <doc xml:space="preserve">Means nothing, and should not be used.</doc>
      </member>
      <member name="copy" value="2" c:identifier="GDK_ACTION_COPY" glib:nick="copy" glib:name="GDK_ACTION_COPY">
        <doc xml:space="preserve">Copy the data.</doc>
      </member>
      <member name="move" value="4" c:identifier="GDK_ACTION_MOVE" glib:nick="move" glib:name="GDK_ACTION_MOVE">
        <doc xml:space="preserve">Move the data, i.e. first copy it, then delete
 it from the source using the DELETE target of the X selection protocol.</doc>
      </member>
      <member name="link" value="8" c:identifier="GDK_ACTION_LINK" glib:nick="link" glib:name="GDK_ACTION_LINK">
        <doc xml:space="preserve">Add a link to the data. Note that this is only
 useful if source and destination agree on what it means.</doc>
      </member>
      <member name="private" value="16" c:identifier="GDK_ACTION_PRIVATE" glib:nick="private" glib:name="GDK_ACTION_PRIVATE">
        <doc xml:space="preserve">Special action which tells the source that the
 destination will do something that the source doesn&#x2019;t understand.</doc>
      </member>
      <member name="ask" value="32" c:identifier="GDK_ACTION_ASK" glib:nick="ask" glib:name="GDK_ACTION_ASK">
        <doc xml:space="preserve">Ask the user what to do with the data.</doc>
      </member>
    </bitfield>
    <enumeration name="DragCancelReason" version="3.20" glib:type-name="GdkDragCancelReason" glib:get-type="gdk_drag_cancel_reason_get_type" c:type="GdkDragCancelReason">
      <doc xml:space="preserve">Used in #GdkDragContext to the reason of a cancelled DND operation.</doc>
      <member name="no_target" value="0" c:identifier="GDK_DRAG_CANCEL_NO_TARGET" glib:nick="no-target" glib:name="GDK_DRAG_CANCEL_NO_TARGET">
        <doc xml:space="preserve">There is no suitable drop target.</doc>
      </member>
      <member name="user_cancelled" value="1" c:identifier="GDK_DRAG_CANCEL_USER_CANCELLED" glib:nick="user-cancelled" glib:name="GDK_DRAG_CANCEL_USER_CANCELLED">
        <doc xml:space="preserve">Drag cancelled by the user</doc>
      </member>
      <member name="error" value="2" c:identifier="GDK_DRAG_CANCEL_ERROR" glib:nick="error" glib:name="GDK_DRAG_CANCEL_ERROR">
        <doc xml:space="preserve">Unspecified error.</doc>
      </member>
    </enumeration>
    <class name="DragContext" c:symbol-prefix="drag_context" c:type="GdkDragContext" parent="GObject.Object" glib:type-name="GdkDragContext" glib:get-type="gdk_drag_context_get_type">
      <method name="get_actions" c:identifier="gdk_drag_context_get_actions" version="2.22">
        <doc xml:space="preserve">Determines the bitmask of actions proposed by the source if
gdk_drag_context_get_suggested_action() returns %GDK_ACTION_ASK.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the #GdkDragAction flags</doc>
          <type name="DragAction" c:type="GdkDragAction"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkDragContext</doc>
            <type name="DragContext" c:type="GdkDragContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_dest_window" c:identifier="gdk_drag_context_get_dest_window" version="3.0">
        <doc xml:space="preserve">Returns the destination window for the DND operation.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a #GdkWindow</doc>
          <type name="Window" c:type="GdkWindow*"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkDragContext</doc>
            <type name="DragContext" c:type="GdkDragContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_device" c:identifier="gdk_drag_context_get_device">
        <doc xml:space="preserve">Returns the #GdkDevice associated to the drag context.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The #GdkDevice associated to @context.</doc>
          <type name="Device" c:type="GdkDevice*"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkDragContext</doc>
            <type name="DragContext" c:type="GdkDragContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_drag_window" c:identifier="gdk_drag_context_get_drag_window" version="3.20">
        <doc xml:space="preserve">Returns the window on which the drag icon should be rendered
during the drag operation. Note that the window may not be
available until the drag operation has begun. GDK will move
the window in accordance with the ongoing drag operation.
The window is owned by @context and will be destroyed when
the drag operation is over.</doc>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">the drag window, or %NULL</doc>
          <type name="Window" c:type="GdkWindow*"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkDragContext</doc>
            <type name="DragContext" c:type="GdkDragContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_protocol" c:identifier="gdk_drag_context_get_protocol" version="3.0">
        <doc xml:space="preserve">Returns the drag protocol that is used by this context.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the drag protocol</doc>
          <type name="DragProtocol" c:type="GdkDragProtocol"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkDragContext</doc>
            <type name="DragContext" c:type="GdkDragContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_selected_action" c:identifier="gdk_drag_context_get_selected_action" version="2.22">
        <doc xml:space="preserve">Determines the action chosen by the drag destination.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a #GdkDragAction value</doc>
          <type name="DragAction" c:type="GdkDragAction"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkDragContext</doc>
            <type name="DragContext" c:type="GdkDragContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_source_window" c:identifier="gdk_drag_context_get_source_window" version="2.22">
        <doc xml:space="preserve">Returns the #GdkWindow where the DND operation started.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a #GdkWindow</doc>
          <type name="Window" c:type="GdkWindow*"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkDragContext</doc>
            <type name="DragContext" c:type="GdkDragContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_suggested_action" c:identifier="gdk_drag_context_get_suggested_action" version="2.22">
        <doc xml:space="preserve">Determines the suggested drag action of the context.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a #GdkDragAction value</doc>
          <type name="DragAction" c:type="GdkDragAction"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkDragContext</doc>
            <type name="DragContext" c:type="GdkDragContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="list_targets" c:identifier="gdk_drag_context_list_targets" version="2.22">
        <doc xml:space="preserve">Retrieves the list of targets of the context.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a #GList of targets</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Atom"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkDragContext</doc>
            <type name="DragContext" c:type="GdkDragContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="manage_dnd" c:identifier="gdk_drag_context_manage_dnd" version="3.20">
        <doc xml:space="preserve">Requests the drag and drop operation to be managed by @context.
When a drag and drop operation becomes managed, the #GdkDragContext
will internally handle all input and source-side #GdkEventDND events
as required by the windowing system.

Once the drag and drop operation is managed, the drag context will
emit the following signals:
- The #GdkDragContext::action-changed signal whenever the final action
  to be performed by the drag and drop operation changes.
- The #GdkDragContext::drop-performed signal after the user performs
  the drag and drop gesture (typically by releasing the mouse button).
- The #GdkDragContext::dnd-finished signal after the drag and drop
  operation concludes (after all #GdkSelection transfers happen).
- The #GdkDragContext::cancel signal if the drag and drop operation is
  finished but doesn't happen over an accepting destination, or is
  cancelled through other means.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">#TRUE if the drag and drop operation is managed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkDragContext</doc>
            <type name="DragContext" c:type="GdkDragContext*"/>
          </instance-parameter>
          <parameter name="ipc_window" transfer-ownership="none">
            <doc xml:space="preserve">Window to use for IPC messaging/events</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </parameter>
          <parameter name="actions" transfer-ownership="none">
            <doc xml:space="preserve">the actions supported by the drag source</doc>
            <type name="DragAction" c:type="GdkDragAction"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_device" c:identifier="gdk_drag_context_set_device">
        <doc xml:space="preserve">Associates a #GdkDevice to @context, so all Drag and Drop events
for @context are emitted as if they came from this device.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkDragContext</doc>
            <type name="DragContext" c:type="GdkDragContext*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkDevice</doc>
            <type name="Device" c:type="GdkDevice*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_hotspot" c:identifier="gdk_drag_context_set_hotspot" version="3.20">
        <doc xml:space="preserve">Sets the position of the drag window that will be kept
under the cursor hotspot. Initially, the hotspot is at the
top left corner of the drag window.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkDragContext</doc>
            <type name="DragContext" c:type="GdkDragContext*"/>
          </instance-parameter>
          <parameter name="hot_x" transfer-ownership="none">
            <doc xml:space="preserve">x coordinate of the drag window hotspot</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="hot_y" transfer-ownership="none">
            <doc xml:space="preserve">y coordinate of the drag window hotspot</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <glib:signal name="action-changed" when="last" version="3.20">
        <doc xml:space="preserve">A new action is being chosen for the drag and drop operation.

This signal will only be emitted if the #GdkDragContext manages
the drag and drop operation. See gdk_drag_context_manage_dnd()
for more information.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="action" transfer-ownership="none">
            <doc xml:space="preserve">The action currently chosen</doc>
            <type name="DragAction"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="cancel" when="last" version="3.20">
        <doc xml:space="preserve">The drag and drop operation was cancelled.

This signal will only be emitted if the #GdkDragContext manages
the drag and drop operation. See gdk_drag_context_manage_dnd()
for more information.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="reason" transfer-ownership="none">
            <doc xml:space="preserve">The reason the context was cancelled</doc>
            <type name="DragCancelReason"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="dnd-finished" when="last" version="3.20">
        <doc xml:space="preserve">The drag and drop operation was finished, the drag destination
finished reading all data. The drag source can now free all
miscellaneous data.

This signal will only be emitted if the #GdkDragContext manages
the drag and drop operation. See gdk_drag_context_manage_dnd()
for more information.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="drop-performed" when="last" version="3.20">
        <doc xml:space="preserve">The drag and drop operation was performed on an accepting client.

This signal will only be emitted if the #GdkDragContext manages
the drag and drop operation. See gdk_drag_context_manage_dnd()
for more information.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="time" transfer-ownership="none">
            <doc xml:space="preserve">the time at which the drop happened.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <enumeration name="DragProtocol" glib:type-name="GdkDragProtocol" glib:get-type="gdk_drag_protocol_get_type" c:type="GdkDragProtocol">
      <doc xml:space="preserve">Used in #GdkDragContext to indicate the protocol according to
which DND is done.</doc>
      <member name="none" value="0" c:identifier="GDK_DRAG_PROTO_NONE" glib:nick="none" glib:name="GDK_DRAG_PROTO_NONE">
        <doc xml:space="preserve">no protocol.</doc>
      </member>
      <member name="motif" value="1" c:identifier="GDK_DRAG_PROTO_MOTIF" glib:nick="motif" glib:name="GDK_DRAG_PROTO_MOTIF">
        <doc xml:space="preserve">The Motif DND protocol. No longer supported</doc>
      </member>
      <member name="xdnd" value="2" c:identifier="GDK_DRAG_PROTO_XDND" glib:nick="xdnd" glib:name="GDK_DRAG_PROTO_XDND">
        <doc xml:space="preserve">The Xdnd protocol.</doc>
      </member>
      <member name="rootwin" value="3" c:identifier="GDK_DRAG_PROTO_ROOTWIN" glib:nick="rootwin" glib:name="GDK_DRAG_PROTO_ROOTWIN">
        <doc xml:space="preserve">An extension to the Xdnd protocol for
 unclaimed root window drops.</doc>
      </member>
      <member name="win32_dropfiles" value="4" c:identifier="GDK_DRAG_PROTO_WIN32_DROPFILES" glib:nick="win32-dropfiles" glib:name="GDK_DRAG_PROTO_WIN32_DROPFILES">
        <doc xml:space="preserve">The simple WM_DROPFILES protocol.</doc>
      </member>
      <member name="ole2" value="5" c:identifier="GDK_DRAG_PROTO_OLE2" glib:nick="ole2" glib:name="GDK_DRAG_PROTO_OLE2">
        <doc xml:space="preserve">The complex OLE2 DND protocol (not implemented).</doc>
      </member>
      <member name="local" value="6" c:identifier="GDK_DRAG_PROTO_LOCAL" glib:nick="local" glib:name="GDK_DRAG_PROTO_LOCAL">
        <doc xml:space="preserve">Intra-application DND.</doc>
      </member>
      <member name="wayland" value="7" c:identifier="GDK_DRAG_PROTO_WAYLAND" glib:nick="wayland" glib:name="GDK_DRAG_PROTO_WAYLAND">
        <doc xml:space="preserve">Wayland DND protocol.</doc>
      </member>
    </enumeration>
    <class name="DrawingContext" c:symbol-prefix="drawing_context" c:type="GdkDrawingContext" parent="GObject.Object" glib:type-name="GdkDrawingContext" glib:get-type="gdk_drawing_context_get_type" glib:type-struct="DrawingContextClass">
      <doc xml:space="preserve">#GdkDrawingContext is an object that represents the current drawing
state of a #GdkWindow.

It's possible to use a #GdkDrawingContext to draw on a #GdkWindow
via rendering API like Cairo or OpenGL.

A #GdkDrawingContext can only be created by calling gdk_window_begin_draw_frame()
and will be valid until a call to gdk_window_end_draw_frame().

#GdkDrawingContext is available since GDK 3.22</doc>
      <method name="get_cairo_context" c:identifier="gdk_drawing_context_get_cairo_context" version="3.22">
        <doc xml:space="preserve">Retrieves a Cairo context to be used to draw on the #GdkWindow
that created the #GdkDrawingContext.

The returned context is guaranteed to be valid as long as the
#GdkDrawingContext is valid, that is between a call to
gdk_window_begin_draw_frame() and gdk_window_end_draw_frame().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a Cairo context to be used to draw
  the contents of the #GdkWindow. The context is owned by the
  #GdkDrawingContext and should not be destroyed</doc>
          <type name="cairo.Context" c:type="cairo_t*"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <type name="DrawingContext" c:type="GdkDrawingContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_clip" c:identifier="gdk_drawing_context_get_clip" glib:get-property="clip" version="3.22">
        <doc xml:space="preserve">Retrieves a copy of the clip region used when creating the @context.</doc>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve">a Cairo region</doc>
          <type name="cairo.Region" c:type="cairo_region_t*"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkDrawingContext</doc>
            <type name="DrawingContext" c:type="GdkDrawingContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_window" c:identifier="gdk_drawing_context_get_window" glib:get-property="window" version="3.22">
        <doc xml:space="preserve">Retrieves the window that created the drawing @context.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a #GdkWindow</doc>
          <type name="Window" c:type="GdkWindow*"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkDrawingContext</doc>
            <type name="DrawingContext" c:type="GdkDrawingContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_valid" c:identifier="gdk_drawing_context_is_valid" version="3.22">
        <doc xml:space="preserve">Checks whether the given #GdkDrawingContext is valid.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the context is valid</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkDrawingContext</doc>
            <type name="DrawingContext" c:type="GdkDrawingContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="clip" version="3.22" writable="1" construct-only="1" transfer-ownership="none" getter="get_clip">
        <doc xml:space="preserve">The clip region applied to the drawing context.</doc>
        <type name="cairo.Region"/>
      </property>
      <property name="window" version="3.22" writable="1" construct-only="1" transfer-ownership="none" getter="get_window">
        <doc xml:space="preserve">The #GdkWindow that created the drawing context.</doc>
        <type name="Window"/>
      </property>
    </class>
    <record name="DrawingContextClass" c:type="GdkDrawingContextClass" disguised="1" opaque="1" glib:is-gtype-struct-for="DrawingContext"/>
    <constant name="EVENT_PROPAGATE" value="false" c:type="GDK_EVENT_PROPAGATE" version="3.4">
      <doc xml:space="preserve">Use this macro as the return value for continuing the propagation of
an event handler.</doc>
      <type name="gboolean" c:type="gboolean"/>
    </constant>
    <constant name="EVENT_STOP" value="true" c:type="GDK_EVENT_STOP" version="3.4">
      <doc xml:space="preserve">Use this macro as the return value for stopping the propagation of
an event handler.</doc>
      <type name="gboolean" c:type="gboolean"/>
    </constant>
    <union name="Event" c:type="GdkEvent" glib:type-name="GdkEvent" glib:get-type="gdk_event_get_type" c:symbol-prefix="event">
      <doc xml:space="preserve">A #GdkEvent contains a union of all of the event types,
and allows access to the data fields in a number of ways.

The event type is always the first field in all of the event types, and
can always be accessed with the following code, no matter what type of
event it is:
|[&lt;!-- language="C" --&gt;
  GdkEvent *event;
  GdkEventType type;

  type = event-&gt;type;
]|

To access other fields of the event, the pointer to the event
can be cast to the appropriate event type, or the union member
name can be used. For example if the event type is %GDK_BUTTON_PRESS
then the x coordinate of the button press can be accessed with:
|[&lt;!-- language="C" --&gt;
  GdkEvent *event;
  gdouble x;

  x = ((GdkEventButton*)event)-&gt;x;
]|
or:
|[&lt;!-- language="C" --&gt;
  GdkEvent *event;
  gdouble x;

  x = event-&gt;button.x;
]|</doc>
      <field name="type" writable="1">
        <doc xml:space="preserve">the #GdkEventType</doc>
        <type name="EventType" c:type="GdkEventType"/>
      </field>
      <field name="any" writable="1">
        <doc xml:space="preserve">a #GdkEventAny</doc>
        <type name="EventAny" c:type="GdkEventAny"/>
      </field>
      <field name="expose" writable="1">
        <doc xml:space="preserve">a #GdkEventExpose</doc>
        <type name="EventExpose" c:type="GdkEventExpose"/>
      </field>
      <field name="visibility" writable="1">
        <doc xml:space="preserve">a #GdkEventVisibility</doc>
        <type name="EventVisibility" c:type="GdkEventVisibility"/>
      </field>
      <field name="motion" writable="1">
        <doc xml:space="preserve">a #GdkEventMotion</doc>
        <type name="EventMotion" c:type="GdkEventMotion"/>
      </field>
      <field name="button" writable="1">
        <doc xml:space="preserve">a #GdkEventButton</doc>
        <type name="EventButton" c:type="GdkEventButton"/>
      </field>
      <field name="touch" writable="1">
        <doc xml:space="preserve">a #GdkEventTouch</doc>
        <type name="EventTouch" c:type="GdkEventTouch"/>
      </field>
      <field name="scroll" writable="1">
        <doc xml:space="preserve">a #GdkEventScroll</doc>
        <type name="EventScroll" c:type="GdkEventScroll"/>
      </field>
      <field name="key" writable="1">
        <doc xml:space="preserve">a #GdkEventKey</doc>
        <type name="EventKey" c:type="GdkEventKey"/>
      </field>
      <field name="crossing" writable="1">
        <doc xml:space="preserve">a #GdkEventCrossing</doc>
        <type name="EventCrossing" c:type="GdkEventCrossing"/>
      </field>
      <field name="focus_change" writable="1">
        <doc xml:space="preserve">a #GdkEventFocus</doc>
        <type name="EventFocus" c:type="GdkEventFocus"/>
      </field>
      <field name="configure" writable="1">
        <doc xml:space="preserve">a #GdkEventConfigure</doc>
        <type name="EventConfigure" c:type="GdkEventConfigure"/>
      </field>
      <field name="property" writable="1">
        <doc xml:space="preserve">a #GdkEventProperty</doc>
        <type name="EventProperty" c:type="GdkEventProperty"/>
      </field>
      <field name="selection" writable="1">
        <doc xml:space="preserve">a #GdkEventSelection</doc>
        <type name="EventSelection" c:type="GdkEventSelection"/>
      </field>
      <field name="owner_change" writable="1">
        <doc xml:space="preserve">a #GdkEventOwnerChange</doc>
        <type name="EventOwnerChange" c:type="GdkEventOwnerChange"/>
      </field>
      <field name="proximity" writable="1">
        <doc xml:space="preserve">a #GdkEventProximity</doc>
        <type name="EventProximity" c:type="GdkEventProximity"/>
      </field>
      <field name="dnd" writable="1">
        <doc xml:space="preserve">a #GdkEventDND</doc>
        <type name="EventDND" c:type="GdkEventDND"/>
      </field>
      <field name="window_state" writable="1">
        <doc xml:space="preserve">a #GdkEventWindowState</doc>
        <type name="EventWindowState" c:type="GdkEventWindowState"/>
      </field>
      <field name="setting" writable="1">
        <doc xml:space="preserve">a #GdkEventSetting</doc>
        <type name="EventSetting" c:type="GdkEventSetting"/>
      </field>
      <field name="grab_broken" writable="1">
        <doc xml:space="preserve">a #GdkEventGrabBroken</doc>
        <type name="EventGrabBroken" c:type="GdkEventGrabBroken"/>
      </field>
      <field name="touchpad_swipe" writable="1">
        <doc xml:space="preserve">a #GdkEventTouchpadSwipe</doc>
        <type name="EventTouchpadSwipe" c:type="GdkEventTouchpadSwipe"/>
      </field>
      <field name="touchpad_pinch" writable="1">
        <doc xml:space="preserve">a #GdkEventTouchpadPinch</doc>
        <type name="EventTouchpadPinch" c:type="GdkEventTouchpadPinch"/>
      </field>
      <field name="pad_button" writable="1">
        <doc xml:space="preserve">a #GdkEventPadButton</doc>
        <type name="EventPadButton" c:type="GdkEventPadButton"/>
      </field>
      <field name="pad_axis" writable="1">
        <doc xml:space="preserve">a #GdkEventPadAxis</doc>
        <type name="EventPadAxis" c:type="GdkEventPadAxis"/>
      </field>
      <field name="pad_group_mode" writable="1">
        <doc xml:space="preserve">a #GdkEventPadGroupMode</doc>
        <type name="EventPadGroupMode" c:type="GdkEventPadGroupMode"/>
      </field>
      <constructor name="new" c:identifier="gdk_event_new" version="2.2">
        <doc xml:space="preserve">Creates a new event of the given type. All fields are set to 0.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a newly-allocated #GdkEvent. The returned #GdkEvent
should be freed with gdk_event_free().</doc>
          <type name="Event" c:type="GdkEvent*"/>
        </return-value>
        <parameters>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkEventType</doc>
            <type name="EventType" c:type="GdkEventType"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="_get_angle" c:identifier="gdk_events_get_angle" moved-to="events_get_angle" version="3.0">
        <doc xml:space="preserve">If both events contain X/Y information, this function will return %TRUE
and return in @angle the relative angle from @event1 to @event2. The rotation
direction for positive angles is from the positive X axis towards the positive
Y axis.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the angle could be calculated.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="event1" transfer-ownership="none">
            <doc xml:space="preserve">first #GdkEvent</doc>
            <type name="Event" c:type="GdkEvent*"/>
          </instance-parameter>
          <parameter name="event2" transfer-ownership="none">
            <doc xml:space="preserve">second #GdkEvent</doc>
            <type name="Event" c:type="GdkEvent*"/>
          </parameter>
          <parameter name="angle" direction="out" caller-allocates="0" transfer-ownership="full">
            <doc xml:space="preserve">return location for the relative angle between both events</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="_get_center" c:identifier="gdk_events_get_center" moved-to="events_get_center" version="3.0">
        <doc xml:space="preserve">If both events contain X/Y information, the center of both coordinates
will be returned in @x and @y.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the center could be calculated.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="event1" transfer-ownership="none">
            <doc xml:space="preserve">first #GdkEvent</doc>
            <type name="Event" c:type="GdkEvent*"/>
          </instance-parameter>
          <parameter name="event2" transfer-ownership="none">
            <doc xml:space="preserve">second #GdkEvent</doc>
            <type name="Event" c:type="GdkEvent*"/>
          </parameter>
          <parameter name="x" direction="out" caller-allocates="0" transfer-ownership="full">
            <doc xml:space="preserve">return location for the X coordinate of the center</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="y" direction="out" caller-allocates="0" transfer-ownership="full">
            <doc xml:space="preserve">return location for the Y coordinate of the center</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="_get_distance" c:identifier="gdk_events_get_distance" moved-to="events_get_distance" version="3.0">
        <doc xml:space="preserve">If both events have X/Y information, the distance between both coordinates
(as in a straight line going from @event1 to @event2) will be returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the distance could be calculated.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="event1" transfer-ownership="none">
            <doc xml:space="preserve">first #GdkEvent</doc>
            <type name="Event" c:type="GdkEvent*"/>
          </instance-parameter>
          <parameter name="event2" transfer-ownership="none">
            <doc xml:space="preserve">second #GdkEvent</doc>
            <type name="Event" c:type="GdkEvent*"/>
          </parameter>
          <parameter name="distance" direction="out" caller-allocates="0" transfer-ownership="full">
            <doc xml:space="preserve">return location for the distance</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="copy" c:identifier="gdk_event_copy">
        <doc xml:space="preserve">Copies a #GdkEvent, copying or incrementing the reference count of the
resources associated with it (e.g. #GdkWindow&#x2019;s and strings).</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a copy of @event. The returned #GdkEvent should be freed with
gdk_event_free().</doc>
          <type name="Event" c:type="GdkEvent*"/>
        </return-value>
        <parameters>
          <instance-parameter name="event" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkEvent</doc>
            <type name="Event" c:type="const GdkEvent*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="gdk_event_free">
        <doc xml:space="preserve">Frees a #GdkEvent, freeing or decrementing any resources associated with it.
Note that this function should only be called with events returned from
functions such as gdk_event_peek(), gdk_event_get(), gdk_event_copy()
and gdk_event_new().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="event" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkEvent.</doc>
            <type name="Event" c:type="GdkEvent*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_axis" c:identifier="gdk_event_get_axis">
        <doc xml:space="preserve">Extract the axis value for a particular axis use from
an event structure.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the specified axis was found, otherwise %FALSE</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="event" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkEvent</doc>
            <type name="Event" c:type="const GdkEvent*"/>
          </instance-parameter>
          <parameter name="axis_use" transfer-ownership="none">
            <doc xml:space="preserve">the axis use to look for</doc>
            <type name="AxisUse" c:type="GdkAxisUse"/>
          </parameter>
          <parameter name="value" direction="out" caller-allocates="0" transfer-ownership="full">
            <doc xml:space="preserve">location to store the value found</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_button" c:identifier="gdk_event_get_button" version="3.2">
        <doc xml:space="preserve">Extract the button number from an event.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the event delivered a button number</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="event" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkEvent</doc>
            <type name="Event" c:type="const GdkEvent*"/>
          </instance-parameter>
          <parameter name="button" direction="out" caller-allocates="0" transfer-ownership="full">
            <doc xml:space="preserve">location to store mouse button number</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_click_count" c:identifier="gdk_event_get_click_count" version="3.2">
        <doc xml:space="preserve">Extracts the click count from an event.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the event delivered a click count</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="event" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkEvent</doc>
            <type name="Event" c:type="const GdkEvent*"/>
          </instance-parameter>
          <parameter name="click_count" direction="out" caller-allocates="0" transfer-ownership="full">
            <doc xml:space="preserve">location to store click count</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_coords" c:identifier="gdk_event_get_coords">
        <doc xml:space="preserve">Extract the event window relative x/y coordinates from an event.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the event delivered event window coordinates</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="event" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkEvent</doc>
            <type name="Event" c:type="const GdkEvent*"/>
          </instance-parameter>
          <parameter name="x_win" direction="out" caller-allocates="0" transfer-ownership="full" optional="1" allow-none="1">
            <doc xml:space="preserve">location to put event window x coordinate</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="y_win" direction="out" caller-allocates="0" transfer-ownership="full" optional="1" allow-none="1">
            <doc xml:space="preserve">location to put event window y coordinate</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_device" c:identifier="gdk_event_get_device" version="3.0">
        <doc xml:space="preserve">If the event contains a &#x201C;device&#x201D; field, this function will return
it, else it will return %NULL.</doc>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">a #GdkDevice, or %NULL.</doc>
          <type name="Device" c:type="GdkDevice*"/>
        </return-value>
        <parameters>
          <instance-parameter name="event" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkEvent.</doc>
            <type name="Event" c:type="const GdkEvent*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_device_tool" c:identifier="gdk_event_get_device_tool" version="3.22">
        <doc xml:space="preserve">If the event was generated by a device that supports
different tools (eg. a tablet), this function will
return a #GdkDeviceTool representing the tool that
caused the event. Otherwise, %NULL will be returned.

Note: the #GdkDeviceTool&lt;!-- --&gt;s will be constant during
the application lifetime, if settings must be stored
persistently across runs, see gdk_device_tool_get_serial()</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The current device tool, or %NULL</doc>
          <type name="DeviceTool" c:type="GdkDeviceTool*"/>
        </return-value>
        <parameters>
          <instance-parameter name="event" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkEvent</doc>
            <type name="Event" c:type="const GdkEvent*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_event_sequence" c:identifier="gdk_event_get_event_sequence" version="3.4">
        <doc xml:space="preserve">If @event if of type %GDK_TOUCH_BEGIN, %GDK_TOUCH_UPDATE,
%GDK_TOUCH_END or %GDK_TOUCH_CANCEL, returns the #GdkEventSequence
to which the event belongs. Otherwise, return %NULL.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the event sequence that the event belongs to</doc>
          <type name="EventSequence" c:type="GdkEventSequence*"/>
        </return-value>
        <parameters>
          <instance-parameter name="event" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkEvent</doc>
            <type name="Event" c:type="const GdkEvent*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_event_type" c:identifier="gdk_event_get_event_type" version="3.10">
        <doc xml:space="preserve">Retrieves the type of the event.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a #GdkEventType</doc>
          <type name="EventType" c:type="GdkEventType"/>
        </return-value>
        <parameters>
          <instance-parameter name="event" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkEvent</doc>
            <type name="Event" c:type="const GdkEvent*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_keycode" c:identifier="gdk_event_get_keycode" version="3.2">
        <doc xml:space="preserve">Extracts the hardware keycode from an event.

Also see gdk_event_get_scancode().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the event delivered a hardware keycode</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="event" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkEvent</doc>
            <type name="Event" c:type="const GdkEvent*"/>
          </instance-parameter>
          <parameter name="keycode" direction="out" caller-allocates="0" transfer-ownership="full">
            <doc xml:space="preserve">location to store the keycode</doc>
            <type name="guint16" c:type="guint16*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_keyval" c:identifier="gdk_event_get_keyval" version="3.2">
        <doc xml:space="preserve">Extracts the keyval from an event.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the event delivered a key symbol</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="event" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkEvent</doc>
            <type name="Event" c:type="const GdkEvent*"/>
          </instance-parameter>
          <parameter name="keyval" direction="out" caller-allocates="0" transfer-ownership="full">
            <doc xml:space="preserve">location to store the keyval</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_pointer_emulated" c:identifier="gdk_event_get_pointer_emulated" version="3.22">
        <doc xml:space="preserve">#event: a #GdkEvent
Returns whether this event is an 'emulated' pointer event (typically
from a touch event), as opposed to a real one.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if this event is emulated</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="event" transfer-ownership="none">
            <type name="Event" c:type="GdkEvent*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_root_coords" c:identifier="gdk_event_get_root_coords">
        <doc xml:space="preserve">Extract the root window relative x/y coordinates from an event.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the event delivered root window coordinates</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="event" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkEvent</doc>
            <type name="Event" c:type="const GdkEvent*"/>
          </instance-parameter>
          <parameter name="x_root" direction="out" caller-allocates="0" transfer-ownership="full" optional="1" allow-none="1">
            <doc xml:space="preserve">location to put root window x coordinate</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="y_root" direction="out" caller-allocates="0" transfer-ownership="full" optional="1" allow-none="1">
            <doc xml:space="preserve">location to put root window y coordinate</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_scancode" c:identifier="gdk_event_get_scancode" version="3.22">
        <doc xml:space="preserve">Gets the keyboard low-level scancode of a key event.

This is usually hardware_keycode. On Windows this is the high
word of WM_KEY{DOWN,UP} lParam which contains the scancode and
some extended flags.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The associated keyboard scancode or 0</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="event" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkEvent</doc>
            <type name="Event" c:type="GdkEvent*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_screen" c:identifier="gdk_event_get_screen" version="2.2">
        <doc xml:space="preserve">Returns the screen for the event. The screen is
typically the screen for `event-&gt;any.window`, but
for events such as mouse events, it is the screen
where the pointer was when the event occurs -
that is, the screen which has the root window
to which `event-&gt;motion.x_root` and
`event-&gt;motion.y_root` are relative.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the screen for the event</doc>
          <type name="Screen" c:type="GdkScreen*"/>
        </return-value>
        <parameters>
          <instance-parameter name="event" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkEvent</doc>
            <type name="Event" c:type="const GdkEvent*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_scroll_deltas" c:identifier="gdk_event_get_scroll_deltas" version="3.4">
        <doc xml:space="preserve">Retrieves the scroll deltas from a #GdkEvent

See also: gdk_event_get_scroll_direction()</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the event contains smooth scroll information
  and %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="event" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkEvent</doc>
            <type name="Event" c:type="const GdkEvent*"/>
          </instance-parameter>
          <parameter name="delta_x" direction="out" caller-allocates="0" transfer-ownership="full">
            <doc xml:space="preserve">return location for X delta</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="delta_y" direction="out" caller-allocates="0" transfer-ownership="full">
            <doc xml:space="preserve">return location for Y delta</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_scroll_direction" c:identifier="gdk_event_get_scroll_direction" version="3.2">
        <doc xml:space="preserve">Extracts the scroll direction from an event.

If @event is not of type %GDK_SCROLL, the contents of @direction
are undefined.

If you wish to handle both discrete and smooth scrolling, you
should check the return value of this function, or of
gdk_event_get_scroll_deltas(); for instance:

|[&lt;!-- language="C" --&gt;
  GdkScrollDirection direction;
  double vscroll_factor = 0.0;
  double x_scroll, y_scroll;

  if (gdk_event_get_scroll_direction (event, &amp;direction))
    {
      // Handle discrete scrolling with a known constant delta;
      const double delta = 12.0;

      switch (direction)
        {
        case GDK_SCROLL_UP:
          vscroll_factor = -delta;
          break;
        case GDK_SCROLL_DOWN:
          vscroll_factor = delta;
          break;
        default:
          // no scrolling
          break;
        }
    }
  else if (gdk_event_get_scroll_deltas (event, &amp;x_scroll, &amp;y_scroll))
    {
      // Handle smooth scrolling directly
      vscroll_factor = y_scroll;
    }
]|</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the event delivered a scroll direction
  and %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="event" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkEvent</doc>
            <type name="Event" c:type="const GdkEvent*"/>
          </instance-parameter>
          <parameter name="direction" direction="out" caller-allocates="0" transfer-ownership="full">
            <doc xml:space="preserve">location to store the scroll direction</doc>
            <type name="ScrollDirection" c:type="GdkScrollDirection*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_seat" c:identifier="gdk_event_get_seat" version="3.20">
        <doc xml:space="preserve">Returns the #GdkSeat this event was generated for.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The #GdkSeat of this event</doc>
          <type name="Seat" c:type="GdkSeat*"/>
        </return-value>
        <parameters>
          <instance-parameter name="event" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkEvent</doc>
            <type name="Event" c:type="const GdkEvent*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_source_device" c:identifier="gdk_event_get_source_device" version="3.0">
        <doc xml:space="preserve">This function returns the hardware (slave) #GdkDevice that has
triggered the event, falling back to the virtual (master) device
(as in gdk_event_get_device()) if the event wasn&#x2019;t caused by
interaction with a hardware device. This may happen for example
in synthesized crossing events after a #GdkWindow updates its
geometry or a grab is acquired/released.

If the event does not contain a device field, this function will
return %NULL.</doc>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">a #GdkDevice, or %NULL.</doc>
          <type name="Device" c:type="GdkDevice*"/>
        </return-value>
        <parameters>
          <instance-parameter name="event" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkEvent</doc>
            <type name="Event" c:type="const GdkEvent*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_state" c:identifier="gdk_event_get_state">
        <doc xml:space="preserve">If the event contains a &#x201C;state&#x201D; field, puts that field in @state. Otherwise
stores an empty state (0). Returns %TRUE if there was a state field
in the event. @event may be %NULL, in which case it&#x2019;s treated
as if the event had no state field.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if there was a state field in the event</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="event" transfer-ownership="none" nullable="1" allow-none="1">
            <doc xml:space="preserve">a #GdkEvent or %NULL</doc>
            <type name="Event" c:type="const GdkEvent*"/>
          </instance-parameter>
          <parameter name="state" direction="out" caller-allocates="0" transfer-ownership="full">
            <doc xml:space="preserve">return location for state</doc>
            <type name="ModifierType" c:type="GdkModifierType*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_time" c:identifier="gdk_event_get_time">
        <doc xml:space="preserve">Returns the time stamp from @event, if there is one; otherwise
returns #GDK_CURRENT_TIME. If @event is %NULL, returns #GDK_CURRENT_TIME.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">time stamp field from @event</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="event" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkEvent</doc>
            <type name="Event" c:type="const GdkEvent*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_window" c:identifier="gdk_event_get_window" version="3.10">
        <doc xml:space="preserve">Extracts the #GdkWindow associated with an event.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The #GdkWindow associated with the event</doc>
          <type name="Window" c:type="GdkWindow*"/>
        </return-value>
        <parameters>
          <instance-parameter name="event" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkEvent</doc>
            <type name="Event" c:type="const GdkEvent*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_scroll_stop_event" c:identifier="gdk_event_is_scroll_stop_event" version="3.20">
        <doc xml:space="preserve">Check whether a scroll event is a stop scroll event. Scroll sequences
with smooth scroll information may provide a stop scroll event once the
interaction with the device finishes, e.g. by lifting a finger. This
stop scroll event is the signal that a widget may trigger kinetic
scrolling based on the current velocity.

Stop scroll events always have a a delta of 0/0.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the event is a scroll stop event</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="event" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkEvent</doc>
            <type name="Event" c:type="const GdkEvent*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="put" c:identifier="gdk_event_put">
        <doc xml:space="preserve">Appends a copy of the given event onto the front of the event
queue for event-&gt;any.window&#x2019;s display, or the default event
queue if event-&gt;any.window is %NULL. See gdk_display_put_event().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="event" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkEvent.</doc>
            <type name="Event" c:type="const GdkEvent*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_device" c:identifier="gdk_event_set_device" version="3.0">
        <doc xml:space="preserve">Sets the device for @event to @device. The event must
have been allocated by GTK+, for instance, by
gdk_event_copy().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="event" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkEvent</doc>
            <type name="Event" c:type="GdkEvent*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkDevice</doc>
            <type name="Device" c:type="GdkDevice*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_device_tool" c:identifier="gdk_event_set_device_tool" version="3.22">
        <doc xml:space="preserve">Sets the device tool for this event, should be rarely used.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="event" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkEvent</doc>
            <type name="Event" c:type="GdkEvent*"/>
          </instance-parameter>
          <parameter name="tool" transfer-ownership="none" nullable="1" allow-none="1">
            <doc xml:space="preserve">tool to set on the event, or %NULL</doc>
            <type name="DeviceTool" c:type="GdkDeviceTool*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_screen" c:identifier="gdk_event_set_screen" version="2.2">
        <doc xml:space="preserve">Sets the screen for @event to @screen. The event must
have been allocated by GTK+, for instance, by
gdk_event_copy().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="event" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkEvent</doc>
            <type name="Event" c:type="GdkEvent*"/>
          </instance-parameter>
          <parameter name="screen" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkScreen</doc>
            <type name="Screen" c:type="GdkScreen*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_source_device" c:identifier="gdk_event_set_source_device" version="3.0">
        <doc xml:space="preserve">Sets the slave device for @event to @device.

The event must have been allocated by GTK+,
for instance by gdk_event_copy().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="event" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkEvent</doc>
            <type name="Event" c:type="GdkEvent*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkDevice</doc>
            <type name="Device" c:type="GdkDevice*"/>
          </parameter>
        </parameters>
      </method>
      <method name="triggers_context_menu" c:identifier="gdk_event_triggers_context_menu" version="3.4">
        <doc xml:space="preserve">This function returns whether a #GdkEventButton should trigger a
context menu, according to platform conventions. The right mouse
button always triggers context menus. Additionally, if
gdk_keymap_get_modifier_mask() returns a non-0 mask for
%GDK_MODIFIER_INTENT_CONTEXT_MENU, then the left mouse button will
also trigger a context menu if this modifier is pressed.

This function should always be used instead of simply checking for
event-&gt;button == %GDK_BUTTON_SECONDARY.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the event should trigger a context menu.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="event" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkEvent, currently only button events are meaningful values</doc>
            <type name="Event" c:type="const GdkEvent*"/>
          </instance-parameter>
        </parameters>
      </method>
      <function name="get" c:identifier="gdk_event_get">
        <doc xml:space="preserve">Checks all open displays for a #GdkEvent to process,to be processed
on, fetching events from the windowing system if necessary.
See gdk_display_get_event().</doc>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve">the next #GdkEvent to be processed, or %NULL
if no events are pending. The returned #GdkEvent should be freed
with gdk_event_free().</doc>
          <type name="Event" c:type="GdkEvent*"/>
        </return-value>
      </function>
      <function name="handler_set" c:identifier="gdk_event_handler_set">
        <doc xml:space="preserve">Sets the function to call to handle all events from GDK.

Note that GTK+ uses this to install its own event handler, so it is
usually not useful for GTK+ applications. (Although an application
can call this function then call gtk_main_do_event() to pass
events to GTK+.)</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="func" transfer-ownership="none" scope="notified" closure="1" destroy="2">
            <doc xml:space="preserve">the function to call to handle events from GDK.</doc>
            <type name="EventFunc" c:type="GdkEventFunc"/>
          </parameter>
          <parameter name="data" transfer-ownership="none" nullable="1" allow-none="1">
            <doc xml:space="preserve">user data to pass to the function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="notify" transfer-ownership="none" scope="async">
            <doc xml:space="preserve">the function to call when the handler function is removed, i.e. when
         gdk_event_handler_set() is called with another event handler.</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </function>
      <function name="peek" c:identifier="gdk_event_peek">
        <doc xml:space="preserve">If there is an event waiting in the event queue of some open
display, returns a copy of it. See gdk_display_peek_event().</doc>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve">a copy of the first #GdkEvent on some event
queue, or %NULL if no events are in any queues. The returned
#GdkEvent should be freed with gdk_event_free().</doc>
          <type name="Event" c:type="GdkEvent*"/>
        </return-value>
      </function>
      <function name="request_motions" c:identifier="gdk_event_request_motions" version="2.12">
        <doc xml:space="preserve">Request more motion notifies if @event is a motion notify hint event.

This function should be used instead of gdk_window_get_pointer() to
request further motion notifies, because it also works for extension
events where motion notifies are provided for devices other than the
core pointer. Coordinate extraction, processing and requesting more
motion events from a %GDK_MOTION_NOTIFY event usually works like this:

|[&lt;!-- language="C" --&gt;
{
  // motion_event handler
  x = motion_event-&gt;x;
  y = motion_event-&gt;y;
  // handle (x,y) motion
  gdk_event_request_motions (motion_event); // handles is_hint events
}
]|</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="event" transfer-ownership="none">
            <doc xml:space="preserve">a valid #GdkEvent</doc>
            <type name="EventMotion" c:type="const GdkEventMotion*"/>
          </parameter>
        </parameters>
      </function>
    </union>
    <record name="EventAny" c:type="GdkEventAny">
      <doc xml:space="preserve">Contains the fields which are common to all event structs.
Any event pointer can safely be cast to a pointer to a #GdkEventAny to
access these fields.</doc>
      <field name="type" writable="1">
        <doc xml:space="preserve">the type of the event.</doc>
        <type name="EventType" c:type="GdkEventType"/>
      </field>
      <field name="window" writable="1">
        <doc xml:space="preserve">the window which received the event.</doc>
        <type name="Window" c:type="GdkWindow*"/>
      </field>
      <field name="send_event" writable="1">
        <doc xml:space="preserve">%TRUE if the event was sent explicitly.</doc>
        <type name="gint8" c:type="gint8"/>
      </field>
    </record>
    <record name="EventButton" c:type="GdkEventButton">
      <doc xml:space="preserve">Used for button press and button release events. The
@type field will be one of %GDK_BUTTON_PRESS,
%GDK_2BUTTON_PRESS, %GDK_3BUTTON_PRESS or %GDK_BUTTON_RELEASE,

Double and triple-clicks result in a sequence of events being received.
For double-clicks the order of events will be:

- %GDK_BUTTON_PRESS
- %GDK_BUTTON_RELEASE
- %GDK_BUTTON_PRESS
- %GDK_2BUTTON_PRESS
- %GDK_BUTTON_RELEASE

Note that the first click is received just like a normal
button press, while the second click results in a %GDK_2BUTTON_PRESS
being received just after the %GDK_BUTTON_PRESS.

Triple-clicks are very similar to double-clicks, except that
%GDK_3BUTTON_PRESS is inserted after the third click. The order of the
events is:

- %GDK_BUTTON_PRESS
- %GDK_BUTTON_RELEASE
- %GDK_BUTTON_PRESS
- %GDK_2BUTTON_PRESS
- %GDK_BUTTON_RELEASE
- %GDK_BUTTON_PRESS
- %GDK_3BUTTON_PRESS
- %GDK_BUTTON_RELEASE

For a double click to occur, the second button press must occur within
1/4 of a second of the first. For a triple click to occur, the third
button press must also occur within 1/2 second of the first button press.</doc>
      <field name="type" writable="1">
        <doc xml:space="preserve">the type of the event (%GDK_BUTTON_PRESS, %GDK_2BUTTON_PRESS,
  %GDK_3BUTTON_PRESS or %GDK_BUTTON_RELEASE).</doc>
        <type name="EventType" c:type="GdkEventType"/>
      </field>
      <field name="window" writable="1">
        <doc xml:space="preserve">the window which received the event.</doc>
        <type name="Window" c:type="GdkWindow*"/>
      </field>
      <field name="send_event" writable="1">
        <doc xml:space="preserve">%TRUE if the event was sent explicitly.</doc>
        <type name="gint8" c:type="gint8"/>
      </field>
      <field name="time" writable="1">
        <doc xml:space="preserve">the time of the event in milliseconds.</doc>
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="x" writable="1">
        <doc xml:space="preserve">the x coordinate of the pointer relative to the window.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="y" writable="1">
        <doc xml:space="preserve">the y coordinate of the pointer relative to the window.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="axes" writable="1">
        <doc xml:space="preserve">@x, @y translated to the axes of @device, or %NULL if @device is
  the mouse.</doc>
        <type name="gdouble" c:type="gdouble*"/>
      </field>
      <field name="state" writable="1">
        <doc xml:space="preserve">a bit-mask representing the state of
  the modifier keys (e.g. Control, Shift and Alt) and the pointer
  buttons. See #GdkModifierType.</doc>
        <type name="ModifierType"/>
      </field>
      <field name="button" writable="1">
        <doc xml:space="preserve">the button which was pressed or released, numbered from 1 to 5.
  Normally button 1 is the left mouse button, 2 is the middle button,
  and 3 is the right button. On 2-button mice, the middle button can
  often be simulated by pressing both mouse buttons together.</doc>
        <type name="guint" c:type="guint"/>
      </field>
      <field name="device" writable="1">
        <doc xml:space="preserve">the master device that the event originated from. Use
gdk_event_get_source_device() to get the slave device.</doc>
        <type name="Device" c:type="GdkDevice*"/>
      </field>
      <field name="x_root" writable="1">
        <doc xml:space="preserve">the x coordinate of the pointer relative to the root of the
  screen.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="y_root" writable="1">
        <doc xml:space="preserve">the y coordinate of the pointer relative to the root of the
  screen.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </field>
    </record>
    <record name="EventConfigure" c:type="GdkEventConfigure">
      <doc xml:space="preserve">Generated when a window size or position has changed.</doc>
      <field name="type" writable="1">
        <doc xml:space="preserve">the type of the event (%GDK_CONFIGURE).</doc>
        <type name="EventType" c:type="GdkEventType"/>
      </field>
      <field name="window" writable="1">
        <doc xml:space="preserve">the window which received the event.</doc>
        <type name="Window" c:type="GdkWindow*"/>
      </field>
      <field name="send_event" writable="1">
        <doc xml:space="preserve">%TRUE if the event was sent explicitly.</doc>
        <type name="gint8" c:type="gint8"/>
      </field>
      <field name="x" writable="1">
        <doc xml:space="preserve">the new x coordinate of the window, relative to its parent.</doc>
        <type name="gint" c:type="gint"/>
      </field>
      <field name="y" writable="1">
        <doc xml:space="preserve">the new y coordinate of the window, relative to its parent.</doc>
        <type name="gint" c:type="gint"/>
      </field>
      <field name="width" writable="1">
        <doc xml:space="preserve">the new width of the window.</doc>
        <type name="gint" c:type="gint"/>
      </field>
      <field name="height" writable="1">
        <doc xml:space="preserve">the new height of the window.</doc>
        <type name="gint" c:type="gint"/>
      </field>
    </record>
    <record name="EventCrossing" c:type="GdkEventCrossing">
      <doc xml:space="preserve">Generated when the pointer enters or leaves a window.</doc>
      <field name="type" writable="1">
        <doc xml:space="preserve">the type of the event (%GDK_ENTER_NOTIFY or %GDK_LEAVE_NOTIFY).</doc>
        <type name="EventType" c:type="GdkEventType"/>
      </field>
      <field name="window" writable="1">
        <doc xml:space="preserve">the window which received the event.</doc>
        <type name="Window" c:type="GdkWindow*"/>
      </field>
      <field name="send_event" writable="1">
        <doc xml:space="preserve">%TRUE if the event was sent explicitly.</doc>
        <type name="gint8" c:type="gint8"/>
      </field>
      <field name="subwindow" writable="1">
        <doc xml:space="preserve">the window that was entered or left.</doc>
        <type name="Window" c:type="GdkWindow*"/>
      </field>
      <field name="time" writable="1">
        <doc xml:space="preserve">the time of the event in milliseconds.</doc>
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="x" writable="1">
        <doc xml:space="preserve">the x coordinate of the pointer relative to the window.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="y" writable="1">
        <doc xml:space="preserve">the y coordinate of the pointer relative to the window.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="x_root" writable="1">
        <doc xml:space="preserve">the x coordinate of the pointer relative to the root of the screen.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="y_root" writable="1">
        <doc xml:space="preserve">the y coordinate of the pointer relative to the root of the screen.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="mode" writable="1">
        <doc xml:space="preserve">the crossing mode (%GDK_CROSSING_NORMAL, %GDK_CROSSING_GRAB,
 %GDK_CROSSING_UNGRAB, %GDK_CROSSING_GTK_GRAB, %GDK_CROSSING_GTK_UNGRAB or
 %GDK_CROSSING_STATE_CHANGED).  %GDK_CROSSING_GTK_GRAB, %GDK_CROSSING_GTK_UNGRAB,
 and %GDK_CROSSING_STATE_CHANGED were added in 2.14 and are always synthesized,
 never native.</doc>
        <type name="CrossingMode" c:type="GdkCrossingMode"/>
      </field>
      <field name="detail" writable="1">
        <doc xml:space="preserve">the kind of crossing that happened (%GDK_NOTIFY_INFERIOR,
 %GDK_NOTIFY_ANCESTOR, %GDK_NOTIFY_VIRTUAL, %GDK_NOTIFY_NONLINEAR or
 %GDK_NOTIFY_NONLINEAR_VIRTUAL).</doc>
        <type name="NotifyType" c:type="GdkNotifyType"/>
      </field>
      <field name="focus" writable="1">
        <doc xml:space="preserve">%TRUE if @window is the focus window or an inferior.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="state" writable="1">
        <doc xml:space="preserve">a bit-mask representing the state of
  the modifier keys (e.g. Control, Shift and Alt) and the pointer
  buttons. See #GdkModifierType.</doc>
        <type name="ModifierType"/>
      </field>
    </record>
    <record name="EventDND" c:type="GdkEventDND">
      <doc xml:space="preserve">Generated during DND operations.</doc>
      <field name="type" writable="1">
        <doc xml:space="preserve">the type of the event (%GDK_DRAG_ENTER, %GDK_DRAG_LEAVE,
  %GDK_DRAG_MOTION, %GDK_DRAG_STATUS, %GDK_DROP_START or
  %GDK_DROP_FINISHED).</doc>
        <type name="EventType" c:type="GdkEventType"/>
      </field>
      <field name="window" writable="1">
        <doc xml:space="preserve">the window which received the event.</doc>
        <type name="Window" c:type="GdkWindow*"/>
      </field>
      <field name="send_event" writable="1">
        <doc xml:space="preserve">%TRUE if the event was sent explicitly.</doc>
        <type name="gint8" c:type="gint8"/>
      </field>
      <field name="context" writable="1">
        <doc xml:space="preserve">the #GdkDragContext for the current DND operation.</doc>
        <type name="DragContext" c:type="GdkDragContext*"/>
      </field>
      <field name="time" writable="1">
        <doc xml:space="preserve">the time of the event in milliseconds.</doc>
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="x_root" writable="1">
        <doc xml:space="preserve">the x coordinate of the pointer relative to the root of the
  screen, only set for %GDK_DRAG_MOTION and %GDK_DROP_START.</doc>
        <type name="gshort" c:type="gshort"/>
      </field>
      <field name="y_root" writable="1">
        <doc xml:space="preserve">the y coordinate of the pointer relative to the root of the
  screen, only set for %GDK_DRAG_MOTION and %GDK_DROP_START.</doc>
        <type name="gshort" c:type="gshort"/>
      </field>
    </record>
    <record name="EventExpose" c:type="GdkEventExpose">
      <doc xml:space="preserve">Generated when all or part of a window becomes visible and needs to be
redrawn.</doc>
      <field name="type" writable="1">
        <doc xml:space="preserve">the type of the event (%GDK_EXPOSE or %GDK_DAMAGE).</doc>
        <type name="EventType" c:type="GdkEventType"/>
      </field>
      <field name="window" writable="1">
        <doc xml:space="preserve">the window which received the event.</doc>
        <type name="Window" c:type="GdkWindow*"/>
      </field>
      <field name="send_event" writable="1">
        <doc xml:space="preserve">%TRUE if the event was sent explicitly.</doc>
        <type name="gint8" c:type="gint8"/>
      </field>
      <field name="area" writable="1">
        <doc xml:space="preserve">bounding box of @region.</doc>
        <type name="Rectangle" c:type="GdkRectangle"/>
      </field>
      <field name="region" writable="1">
        <doc xml:space="preserve">the region that needs to be redrawn.</doc>
        <type name="cairo.Region" c:type="cairo_region_t*"/>
      </field>
      <field name="count" writable="1">
        <doc xml:space="preserve">the number of contiguous %GDK_EXPOSE events following this one.
  The only use for this is &#x201C;exposure compression&#x201D;, i.e. handling all
  contiguous %GDK_EXPOSE events in one go, though GDK performs some
  exposure compression so this is not normally needed.</doc>
        <type name="gint" c:type="gint"/>
      </field>
    </record>
    <record name="EventFocus" c:type="GdkEventFocus">
      <doc xml:space="preserve">Describes a change of keyboard focus.</doc>
      <field name="type" writable="1">
        <doc xml:space="preserve">the type of the event (%GDK_FOCUS_CHANGE).</doc>
        <type name="EventType" c:type="GdkEventType"/>
      </field>
      <field name="window" writable="1">
        <doc xml:space="preserve">the window which received the event.</doc>
        <type name="Window" c:type="GdkWindow*"/>
      </field>
      <field name="send_event" writable="1">
        <doc xml:space="preserve">%TRUE if the event was sent explicitly.</doc>
        <type name="gint8" c:type="gint8"/>
      </field>
      <field name="in" writable="1">
        <doc xml:space="preserve">%TRUE if the window has gained the keyboard focus, %FALSE if
  it has lost the focus.</doc>
        <type name="gint16" c:type="gint16"/>
      </field>
    </record>
    <callback name="EventFunc" c:type="GdkEventFunc">
      <doc xml:space="preserve">Specifies the type of function passed to gdk_event_handler_set() to
handle all GDK events.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="event" transfer-ownership="none">
          <doc xml:space="preserve">the #GdkEvent to process.</doc>
          <type name="Event" c:type="GdkEvent*"/>
        </parameter>
        <parameter name="data" transfer-ownership="none" nullable="1" allow-none="1" closure="1">
          <doc xml:space="preserve">user data set when the event handler was installed with
  gdk_event_handler_set().</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <record name="EventGrabBroken" c:type="GdkEventGrabBroken" version="2.8">
      <doc xml:space="preserve">Generated when a pointer or keyboard grab is broken. On X11, this happens
when the grab window becomes unviewable (i.e. it or one of its ancestors
is unmapped), or if the same application grabs the pointer or keyboard
again. Note that implicit grabs (which are initiated by button presses)
can also cause #GdkEventGrabBroken events.</doc>
      <field name="type" writable="1">
        <doc xml:space="preserve">the type of the event (%GDK_GRAB_BROKEN)</doc>
        <type name="EventType" c:type="GdkEventType"/>
      </field>
      <field name="window" writable="1">
        <doc xml:space="preserve">the window which received the event, i.e. the window
  that previously owned the grab</doc>
        <type name="Window" c:type="GdkWindow*"/>
      </field>
      <field name="send_event" writable="1">
        <doc xml:space="preserve">%TRUE if the event was sent explicitly.</doc>
        <type name="gint8" c:type="gint8"/>
      </field>
      <field name="keyboard" writable="1">
        <doc xml:space="preserve">%TRUE if a keyboard grab was broken, %FALSE if a pointer
  grab was broken</doc>
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="implicit" writable="1">
        <doc xml:space="preserve">%TRUE if the broken grab was implicit</doc>
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="grab_window" writable="1">
        <doc xml:space="preserve">If this event is caused by another grab in the same
  application, @grab_window contains the new grab window. Otherwise
  @grab_window is %NULL.</doc>
        <type name="Window" c:type="GdkWindow*"/>
      </field>
    </record>
    <record name="EventKey" c:type="GdkEventKey">
      <doc xml:space="preserve">Describes a key press or key release event.</doc>
      <field name="type" writable="1">
        <doc xml:space="preserve">the type of the event (%GDK_KEY_PRESS or %GDK_KEY_RELEASE).</doc>
        <type name="EventType" c:type="GdkEventType"/>
      </field>
      <field name="window" writable="1">
        <doc xml:space="preserve">the window which received the event.</doc>
        <type name="Window" c:type="GdkWindow*"/>
      </field>
      <field name="send_event" writable="1">
        <doc xml:space="preserve">%TRUE if the event was sent explicitly.</doc>
        <type name="gint8" c:type="gint8"/>
      </field>
      <field name="time" writable="1">
        <doc xml:space="preserve">the time of the event in milliseconds.</doc>
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="state" writable="1">
        <doc xml:space="preserve">a bit-mask representing the state of
  the modifier keys (e.g. Control, Shift and Alt) and the pointer
  buttons. See #GdkModifierType.</doc>
        <type name="ModifierType"/>
      </field>
      <field name="keyval" writable="1">
        <doc xml:space="preserve">the key that was pressed or released. See the
  `gdk/gdkkeysyms.h` header file for a
  complete list of GDK key codes.</doc>
        <type name="guint" c:type="guint"/>
      </field>
      <field name="length" writable="1">
        <doc xml:space="preserve">the length of @string.</doc>
        <type name="gint" c:type="gint"/>
      </field>
      <field name="string" writable="1">
        <doc xml:space="preserve">a string containing an approximation of the text that
  would result from this keypress. The only correct way to handle text
  input of text is using input methods (see #GtkIMContext), so this
  field is deprecated and should never be used.
  (gdk_unicode_to_keyval() provides a non-deprecated way of getting
  an approximate translation for a key.) The string is encoded in the
  encoding of the current locale (Note: this for backwards compatibility:
  strings in GTK+ and GDK are typically in UTF-8.) and NUL-terminated.
  In some cases, the translation of the key code will be a single
  NUL byte, in which case looking at @length is necessary to distinguish
  it from the an empty translation.</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="hardware_keycode" writable="1">
        <doc xml:space="preserve">the raw code of the key that was pressed or released.</doc>
        <type name="guint16" c:type="guint16"/>
      </field>
      <field name="group" writable="1">
        <doc xml:space="preserve">the keyboard group.</doc>
        <type name="guint8" c:type="guint8"/>
      </field>
      <field name="is_modifier" writable="1" bits="1">
        <doc xml:space="preserve">a flag that indicates if @hardware_keycode is mapped to a
  modifier. Since 2.10</doc>
        <type name="guint" c:type="guint"/>
      </field>
    </record>
    <bitfield name="EventMask" glib:type-name="GdkEventMask" glib:get-type="gdk_event_mask_get_type" c:type="GdkEventMask">
      <doc xml:space="preserve">A set of bit-flags to indicate which events a window is to receive.
Most of these masks map onto one or more of the #GdkEventType event types
above.

See the [input handling overview][chap-input-handling] for details of
[event masks][event-masks] and [event propagation][event-propagation].

%GDK_POINTER_MOTION_HINT_MASK is deprecated. It is a special mask
to reduce the number of %GDK_MOTION_NOTIFY events received. When using
%GDK_POINTER_MOTION_HINT_MASK, fewer %GDK_MOTION_NOTIFY events will
be sent, some of which are marked as a hint (the is_hint member is
%TRUE). To receive more motion events after a motion hint event,
the application needs to asks for more, by calling
gdk_event_request_motions().

Since GTK 3.8, motion events are already compressed by default, independent
of this mechanism. This compression can be disabled with
gdk_window_set_event_compression(). See the documentation of that function
for details.

If %GDK_TOUCH_MASK is enabled, the window will receive touch events
from touch-enabled devices. Those will come as sequences of #GdkEventTouch
with type %GDK_TOUCH_UPDATE, enclosed by two events with
type %GDK_TOUCH_BEGIN and %GDK_TOUCH_END (or %GDK_TOUCH_CANCEL).
gdk_event_get_event_sequence() returns the event sequence for these
events, so different sequences may be distinguished.</doc>
      <member name="exposure_mask" value="2" c:identifier="GDK_EXPOSURE_MASK" glib:nick="exposure-mask" glib:name="GDK_EXPOSURE_MASK">
        <doc xml:space="preserve">receive expose events</doc>
      </member>
      <member name="pointer_motion_mask" value="4" c:identifier="GDK_POINTER_MOTION_MASK" glib:nick="pointer-motion-mask" glib:name="GDK_POINTER_MOTION_MASK">
        <doc xml:space="preserve">receive all pointer motion events</doc>
      </member>
      <member name="pointer_motion_hint_mask" value="8" c:identifier="GDK_POINTER_MOTION_HINT_MASK" glib:nick="pointer-motion-hint-mask" glib:name="GDK_POINTER_MOTION_HINT_MASK">
        <doc xml:space="preserve">deprecated. see the explanation above</doc>
      </member>
      <member name="button_motion_mask" value="16" c:identifier="GDK_BUTTON_MOTION_MASK" glib:nick="button-motion-mask" glib:name="GDK_BUTTON_MOTION_MASK">
        <doc xml:space="preserve">receive pointer motion events while any button is pressed</doc>
      </member>
      <member name="button1_motion_mask" value="32" c:identifier="GDK_BUTTON1_MOTION_MASK" glib:nick="button1-motion-mask" glib:name="GDK_BUTTON1_MOTION_MASK">
        <doc xml:space="preserve">receive pointer motion events while 1 button is pressed</doc>
      </member>
      <member name="button2_motion_mask" value="64" c:identifier="GDK_BUTTON2_MOTION_MASK" glib:nick="button2-motion-mask" glib:name="GDK_BUTTON2_MOTION_MASK">
        <doc xml:space="preserve">receive pointer motion events while 2 button is pressed</doc>
      </member>
      <member name="button3_motion_mask" value="128" c:identifier="GDK_BUTTON3_MOTION_MASK" glib:nick="button3-motion-mask" glib:name="GDK_BUTTON3_MOTION_MASK">
        <doc xml:space="preserve">receive pointer motion events while 3 button is pressed</doc>
      </member>
      <member name="button_press_mask" value="256" c:identifier="GDK_BUTTON_PRESS_MASK" glib:nick="button-press-mask" glib:name="GDK_BUTTON_PRESS_MASK">
        <doc xml:space="preserve">receive button press events</doc>
      </member>
      <member name="button_release_mask" value="512" c:identifier="GDK_BUTTON_RELEASE_MASK" glib:nick="button-release-mask" glib:name="GDK_BUTTON_RELEASE_MASK">
        <doc xml:space="preserve">receive button release events</doc>
      </member>
      <member name="key_press_mask" value="1024" c:identifier="GDK_KEY_PRESS_MASK" glib:nick="key-press-mask" glib:name="GDK_KEY_PRESS_MASK">
        <doc xml:space="preserve">receive key press events</doc>
      </member>
      <member name="key_release_mask" value="2048" c:identifier="GDK_KEY_RELEASE_MASK" glib:nick="key-release-mask" glib:name="GDK_KEY_RELEASE_MASK">
        <doc xml:space="preserve">receive key release events</doc>
      </member>
      <member name="enter_notify_mask" value="4096" c:identifier="GDK_ENTER_NOTIFY_MASK" glib:nick="enter-notify-mask" glib:name="GDK_ENTER_NOTIFY_MASK">
        <doc xml:space="preserve">receive window enter events</doc>
      </member>
      <member name="leave_notify_mask" value="8192" c:identifier="GDK_LEAVE_NOTIFY_MASK" glib:nick="leave-notify-mask" glib:name="GDK_LEAVE_NOTIFY_MASK">
        <doc xml:space="preserve">receive window leave events</doc>
      </member>
      <member name="focus_change_mask" value="16384" c:identifier="GDK_FOCUS_CHANGE_MASK" glib:nick="focus-change-mask" glib:name="GDK_FOCUS_CHANGE_MASK">
        <doc xml:space="preserve">receive focus change events</doc>
      </member>
      <member name="structure_mask" value="32768" c:identifier="GDK_STRUCTURE_MASK" glib:nick="structure-mask" glib:name="GDK_STRUCTURE_MASK">
        <doc xml:space="preserve">receive events about window configuration change</doc>
      </member>
      <member name="property_change_mask" value="65536" c:identifier="GDK_PROPERTY_CHANGE_MASK" glib:nick="property-change-mask" glib:name="GDK_PROPERTY_CHANGE_MASK">
        <doc xml:space="preserve">receive property change events</doc>
      </member>
      <member name="visibility_notify_mask" value="131072" c:identifier="GDK_VISIBILITY_NOTIFY_MASK" glib:nick="visibility-notify-mask" glib:name="GDK_VISIBILITY_NOTIFY_MASK">
        <doc xml:space="preserve">receive visibility change events</doc>
      </member>
      <member name="proximity_in_mask" value="262144" c:identifier="GDK_PROXIMITY_IN_MASK" glib:nick="proximity-in-mask" glib:name="GDK_PROXIMITY_IN_MASK">
        <doc xml:space="preserve">receive proximity in events</doc>
      </member>
      <member name="proximity_out_mask" value="524288" c:identifier="GDK_PROXIMITY_OUT_MASK" glib:nick="proximity-out-mask" glib:name="GDK_PROXIMITY_OUT_MASK">
        <doc xml:space="preserve">receive proximity out events</doc>
      </member>
      <member name="substructure_mask" value="1048576" c:identifier="GDK_SUBSTRUCTURE_MASK" glib:nick="substructure-mask" glib:name="GDK_SUBSTRUCTURE_MASK">
        <doc xml:space="preserve">receive events about window configuration changes of
  child windows</doc>
      </member>
      <member name="scroll_mask" value="2097152" c:identifier="GDK_SCROLL_MASK" glib:nick="scroll-mask" glib:name="GDK_SCROLL_MASK">
        <doc xml:space="preserve">receive scroll events</doc>
      </member>
      <member name="touch_mask" value="4194304" c:identifier="GDK_TOUCH_MASK" glib:nick="touch-mask" glib:name="GDK_TOUCH_MASK">
        <doc xml:space="preserve">receive touch events. Since 3.4</doc>
      </member>
      <member name="smooth_scroll_mask" value="8388608" c:identifier="GDK_SMOOTH_SCROLL_MASK" glib:nick="smooth-scroll-mask" glib:name="GDK_SMOOTH_SCROLL_MASK">
        <doc xml:space="preserve">receive smooth scrolling events. Since 3.4</doc>
      </member>
      <member name="touchpad_gesture_mask" value="16777216" c:identifier="GDK_TOUCHPAD_GESTURE_MASK" glib:nick="touchpad-gesture-mask" glib:name="GDK_TOUCHPAD_GESTURE_MASK">
        <doc xml:space="preserve">receive touchpad gesture events. Since 3.18</doc>
      </member>
      <member name="tablet_pad_mask" value="33554432" c:identifier="GDK_TABLET_PAD_MASK" glib:nick="tablet-pad-mask" glib:name="GDK_TABLET_PAD_MASK">
        <doc xml:space="preserve">receive tablet pad events. Since 3.22</doc>
      </member>
      <member name="all_events_mask" value="67108862" c:identifier="GDK_ALL_EVENTS_MASK" glib:nick="all-events-mask" glib:name="GDK_ALL_EVENTS_MASK">
        <doc xml:space="preserve">the combination of all the above event masks.</doc>
      </member>
    </bitfield>
    <record name="EventMotion" c:type="GdkEventMotion">
      <doc xml:space="preserve">Generated when the pointer moves.</doc>
      <field name="type" writable="1">
        <doc xml:space="preserve">the type of the event.</doc>
        <type name="EventType" c:type="GdkEventType"/>
      </field>
      <field name="window" writable="1">
        <doc xml:space="preserve">the window which received the event.</doc>
        <type name="Window" c:type="GdkWindow*"/>
      </field>
      <field name="send_event" writable="1">
        <doc xml:space="preserve">%TRUE if the event was sent explicitly.</doc>
        <type name="gint8" c:type="gint8"/>
      </field>
      <field name="time" writable="1">
        <doc xml:space="preserve">the time of the event in milliseconds.</doc>
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="x" writable="1">
        <doc xml:space="preserve">the x coordinate of the pointer relative to the window.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="y" writable="1">
        <doc xml:space="preserve">the y coordinate of the pointer relative to the window.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="axes" writable="1">
        <doc xml:space="preserve">@x, @y translated to the axes of @device, or %NULL if @device is
  the mouse.</doc>
        <type name="gdouble" c:type="gdouble*"/>
      </field>
      <field name="state" writable="1">
        <doc xml:space="preserve">a bit-mask representing the state of
  the modifier keys (e.g. Control, Shift and Alt) and the pointer
  buttons. See #GdkModifierType.</doc>
        <type name="ModifierType"/>
      </field>
      <field name="is_hint" writable="1">
        <doc xml:space="preserve">set to 1 if this event is just a hint, see the
  %GDK_POINTER_MOTION_HINT_MASK value of #GdkEventMask.</doc>
        <type name="gint16" c:type="gint16"/>
      </field>
      <field name="device" writable="1">
        <doc xml:space="preserve">the master device that the event originated from. Use
gdk_event_get_source_device() to get the slave device.</doc>
        <type name="Device" c:type="GdkDevice*"/>
      </field>
      <field name="x_root" writable="1">
        <doc xml:space="preserve">the x coordinate of the pointer relative to the root of the
  screen.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="y_root" writable="1">
        <doc xml:space="preserve">the y coordinate of the pointer relative to the root of the
  screen.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </field>
    </record>
    <record name="EventOwnerChange" c:type="GdkEventOwnerChange" version="2.6">
      <doc xml:space="preserve">Generated when the owner of a selection changes. On X11, this
information is only available if the X server supports the XFIXES
extension.</doc>
      <field name="type" writable="1">
        <doc xml:space="preserve">the type of the event (%GDK_OWNER_CHANGE).</doc>
        <type name="EventType" c:type="GdkEventType"/>
      </field>
      <field name="window" writable="1">
        <doc xml:space="preserve">the window which received the event</doc>
        <type name="Window" c:type="GdkWindow*"/>
      </field>
      <field name="send_event" writable="1">
        <doc xml:space="preserve">%TRUE if the event was sent explicitly.</doc>
        <type name="gint8" c:type="gint8"/>
      </field>
      <field name="owner" writable="1">
        <doc xml:space="preserve">the new owner of the selection, or %NULL if there is none</doc>
        <type name="Window" c:type="GdkWindow*"/>
      </field>
      <field name="reason" writable="1">
        <doc xml:space="preserve">the reason for the ownership change as a #GdkOwnerChange value</doc>
        <type name="OwnerChange" c:type="GdkOwnerChange"/>
      </field>
      <field name="selection" writable="1">
        <doc xml:space="preserve">the atom identifying the selection</doc>
        <type name="Atom" c:type="GdkAtom"/>
      </field>
      <field name="time" writable="1">
        <doc xml:space="preserve">the timestamp of the event</doc>
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="selection_time" writable="1">
        <doc xml:space="preserve">the time at which the selection ownership was taken
  over</doc>
        <type name="guint32" c:type="guint32"/>
      </field>
    </record>
    <record name="EventPadAxis" c:type="GdkEventPadAxis" version="3.22">
      <doc xml:space="preserve">Generated during %GDK_SOURCE_TABLET_PAD interaction with tactile sensors.</doc>
      <field name="type" writable="1">
        <doc xml:space="preserve">the type of the event (%GDK_PAD_RING or %GDK_PAD_STRIP).</doc>
        <type name="EventType" c:type="GdkEventType"/>
      </field>
      <field name="window" writable="1">
        <doc xml:space="preserve">the window which received the event.</doc>
        <type name="Window" c:type="GdkWindow*"/>
      </field>
      <field name="send_event" writable="1">
        <doc xml:space="preserve">%TRUE if the event was sent explicitly.</doc>
        <type name="gint8" c:type="gint8"/>
      </field>
      <field name="time" writable="1">
        <doc xml:space="preserve">the time of the event in milliseconds.</doc>
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="group" writable="1">
        <doc xml:space="preserve">the pad group the ring/strip belongs to. A %GDK_SOURCE_TABLET_PAD
  device may have one or more groups containing a set of buttons/rings/strips
  each.</doc>
        <type name="guint" c:type="guint"/>
      </field>
      <field name="index" writable="1">
        <doc xml:space="preserve">number of strip/ring that was interacted. This number is 0-indexed.</doc>
        <type name="guint" c:type="guint"/>
      </field>
      <field name="mode" writable="1">
        <doc xml:space="preserve">The current mode of @group. Different groups in a %GDK_SOURCE_TABLET_PAD
  device may have different current modes.</doc>
        <type name="guint" c:type="guint"/>
      </field>
      <field name="value" writable="1">
        <doc xml:space="preserve">The current value for the given axis.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </field>
    </record>
    <record name="EventPadButton" c:type="GdkEventPadButton" version="3.22">
      <doc xml:space="preserve">Generated during %GDK_SOURCE_TABLET_PAD button presses and releases.</doc>
      <field name="type" writable="1">
        <doc xml:space="preserve">the type of the event (%GDK_PAD_BUTTON_PRESS or %GDK_PAD_BUTTON_RELEASE).</doc>
        <type name="EventType" c:type="GdkEventType"/>
      </field>
      <field name="window" writable="1">
        <doc xml:space="preserve">the window which received the event.</doc>
        <type name="Window" c:type="GdkWindow*"/>
      </field>
      <field name="send_event" writable="1">
        <doc xml:space="preserve">%TRUE if the event was sent explicitly.</doc>
        <type name="gint8" c:type="gint8"/>
      </field>
      <field name="time" writable="1">
        <doc xml:space="preserve">the time of the event in milliseconds.</doc>
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="group" writable="1">
        <doc xml:space="preserve">the pad group the button belongs to. A %GDK_SOURCE_TABLET_PAD device
  may have one or more groups containing a set of buttons/rings/strips each.</doc>
        <type name="guint" c:type="guint"/>
      </field>
      <field name="button" writable="1">
        <doc xml:space="preserve">The pad button that was pressed.</doc>
        <type name="guint" c:type="guint"/>
      </field>
      <field name="mode" writable="1">
        <doc xml:space="preserve">The current mode of @group. Different groups in a %GDK_SOURCE_TABLET_PAD
  device may have different current modes.</doc>
        <type name="guint" c:type="guint"/>
      </field>
    </record>
    <record name="EventPadGroupMode" c:type="GdkEventPadGroupMode" version="3.22">
      <doc xml:space="preserve">Generated during %GDK_SOURCE_TABLET_PAD mode switches in a group.</doc>
      <field name="type" writable="1">
        <doc xml:space="preserve">the type of the event (%GDK_PAD_GROUP_MODE).</doc>
        <type name="EventType" c:type="GdkEventType"/>
      </field>
      <field name="window" writable="1">
        <doc xml:space="preserve">the window which received the event.</doc>
        <type name="Window" c:type="GdkWindow*"/>
      </field>
      <field name="send_event" writable="1">
        <doc xml:space="preserve">%TRUE if the event was sent explicitly.</doc>
        <type name="gint8" c:type="gint8"/>
      </field>
      <field name="time" writable="1">
        <doc xml:space="preserve">the time of the event in milliseconds.</doc>
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="group" writable="1">
        <doc xml:space="preserve">the pad group that is switching mode. A %GDK_SOURCE_TABLET_PAD
  device may have one or more groups containing a set of buttons/rings/strips
  each.</doc>
        <type name="guint" c:type="guint"/>
      </field>
      <field name="mode" writable="1">
        <doc xml:space="preserve">The new mode of @group. Different groups in a %GDK_SOURCE_TABLET_PAD
  device may have different current modes.</doc>
        <type name="guint" c:type="guint"/>
      </field>
    </record>
    <record name="EventProperty" c:type="GdkEventProperty">
      <doc xml:space="preserve">Describes a property change on a window.</doc>
      <field name="type" writable="1">
        <doc xml:space="preserve">the type of the event (%GDK_PROPERTY_NOTIFY).</doc>
        <type name="EventType" c:type="GdkEventType"/>
      </field>
      <field name="window" writable="1">
        <doc xml:space="preserve">the window which received the event.</doc>
        <type name="Window" c:type="GdkWindow*"/>
      </field>
      <field name="send_event" writable="1">
        <doc xml:space="preserve">%TRUE if the event was sent explicitly.</doc>
        <type name="gint8" c:type="gint8"/>
      </field>
      <field name="atom" writable="1">
        <doc xml:space="preserve">the property that was changed.</doc>
        <type name="Atom" c:type="GdkAtom"/>
      </field>
      <field name="time" writable="1">
        <doc xml:space="preserve">the time of the event in milliseconds.</doc>
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="state" writable="1">
        <doc xml:space="preserve">whether the property was changed
  (%GDK_PROPERTY_NEW_VALUE) or deleted (%GDK_PROPERTY_DELETE).</doc>
        <type name="PropertyState"/>
      </field>
    </record>
    <record name="EventProximity" c:type="GdkEventProximity">
      <doc xml:space="preserve">Proximity events are generated when using GDK&#x2019;s wrapper for the
XInput extension. The XInput extension is an add-on for standard X
that allows you to use nonstandard devices such as graphics tablets.
A proximity event indicates that the stylus has moved in or out of
contact with the tablet, or perhaps that the user&#x2019;s finger has moved
in or out of contact with a touch screen.

This event type will be used pretty rarely. It only is important for
XInput aware programs that are drawing their own cursor.</doc>
      <field name="type" writable="1">
        <doc xml:space="preserve">the type of the event (%GDK_PROXIMITY_IN or %GDK_PROXIMITY_OUT).</doc>
        <type name="EventType" c:type="GdkEventType"/>
      </field>
      <field name="window" writable="1">
        <doc xml:space="preserve">the window which received the event.</doc>
        <type name="Window" c:type="GdkWindow*"/>
      </field>
      <field name="send_event" writable="1">
        <doc xml:space="preserve">%TRUE if the event was sent explicitly.</doc>
        <type name="gint8" c:type="gint8"/>
      </field>
      <field name="time" writable="1">
        <doc xml:space="preserve">the time of the event in milliseconds.</doc>
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="device" writable="1">
        <doc xml:space="preserve">the master device that the event originated from. Use
gdk_event_get_source_device() to get the slave device.</doc>
        <type name="Device" c:type="GdkDevice*"/>
      </field>
    </record>
    <record name="EventScroll" c:type="GdkEventScroll">
      <doc xml:space="preserve">Generated from button presses for the buttons 4 to 7. Wheel mice are
usually configured to generate button press events for buttons 4 and 5
when the wheel is turned.

Some GDK backends can also generate &#x201C;smooth&#x201D; scroll events, which
can be recognized by the %GDK_SCROLL_SMOOTH scroll direction. For
these, the scroll deltas can be obtained with
gdk_event_get_scroll_deltas().</doc>
      <field name="type" writable="1">
        <doc xml:space="preserve">the type of the event (%GDK_SCROLL).</doc>
        <type name="EventType" c:type="GdkEventType"/>
      </field>
      <field name="window" writable="1">
        <doc xml:space="preserve">the window which received the event.</doc>
        <type name="Window" c:type="GdkWindow*"/>
      </field>
      <field name="send_event" writable="1">
        <doc xml:space="preserve">%TRUE if the event was sent explicitly.</doc>
        <type name="gint8" c:type="gint8"/>
      </field>
      <field name="time" writable="1">
        <doc xml:space="preserve">the time of the event in milliseconds.</doc>
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="x" writable="1">
        <doc xml:space="preserve">the x coordinate of the pointer relative to the window.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="y" writable="1">
        <doc xml:space="preserve">the y coordinate of the pointer relative to the window.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="state" writable="1">
        <doc xml:space="preserve">a bit-mask representing the state of
  the modifier keys (e.g. Control, Shift and Alt) and the pointer
  buttons. See #GdkModifierType.</doc>
        <type name="ModifierType"/>
      </field>
      <field name="direction" writable="1">
        <doc xml:space="preserve">the direction to scroll to (one of %GDK_SCROLL_UP,
  %GDK_SCROLL_DOWN, %GDK_SCROLL_LEFT, %GDK_SCROLL_RIGHT or
  %GDK_SCROLL_SMOOTH).</doc>
        <type name="ScrollDirection" c:type="GdkScrollDirection"/>
      </field>
      <field name="device" writable="1">
        <doc xml:space="preserve">the master device that the event originated from. Use
gdk_event_get_source_device() to get the slave device.</doc>
        <type name="Device" c:type="GdkDevice*"/>
      </field>
      <field name="x_root" writable="1">
        <doc xml:space="preserve">the x coordinate of the pointer relative to the root of the
  screen.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="y_root" writable="1">
        <doc xml:space="preserve">the y coordinate of the pointer relative to the root of the
  screen.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="delta_x" writable="1">
        <doc xml:space="preserve">the x coordinate of the scroll delta</doc>
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="delta_y" writable="1">
        <doc xml:space="preserve">the y coordinate of the scroll delta</doc>
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="is_stop" writable="1" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
    </record>
    <record name="EventSelection" c:type="GdkEventSelection">
      <doc xml:space="preserve">Generated when a selection is requested or ownership of a selection
is taken over by another client application.</doc>
      <field name="type" writable="1">
        <doc xml:space="preserve">the type of the event (%GDK_SELECTION_CLEAR,
  %GDK_SELECTION_NOTIFY or %GDK_SELECTION_REQUEST).</doc>
        <type name="EventType" c:type="GdkEventType"/>
      </field>
      <field name="window" writable="1">
        <doc xml:space="preserve">the window which received the event.</doc>
        <type name="Window" c:type="GdkWindow*"/>
      </field>
      <field name="send_event" writable="1">
        <doc xml:space="preserve">%TRUE if the event was sent explicitly.</doc>
        <type name="gint8" c:type="gint8"/>
      </field>
      <field name="selection" writable="1">
        <doc xml:space="preserve">the selection.</doc>
        <type name="Atom" c:type="GdkAtom"/>
      </field>
      <field name="target" writable="1">
        <doc xml:space="preserve">the target to which the selection should be converted.</doc>
        <type name="Atom" c:type="GdkAtom"/>
      </field>
      <field name="property" writable="1">
        <doc xml:space="preserve">the property in which to place the result of the conversion.</doc>
        <type name="Atom" c:type="GdkAtom"/>
      </field>
      <field name="time" writable="1">
        <doc xml:space="preserve">the time of the event in milliseconds.</doc>
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="requestor" writable="1">
        <doc xml:space="preserve">the window on which to place @property or %NULL if none.</doc>
        <type name="Window" c:type="GdkWindow*"/>
      </field>
    </record>
    <record name="EventSequence" c:type="GdkEventSequence" opaque="1" glib:type-name="GdkEventSequence" glib:get-type="gdk_event_sequence_get_type" c:symbol-prefix="event_sequence"/>
    <record name="EventSetting" c:type="GdkEventSetting">
      <doc xml:space="preserve">Generated when a setting is modified.</doc>
      <field name="type" writable="1">
        <doc xml:space="preserve">the type of the event (%GDK_SETTING).</doc>
        <type name="EventType" c:type="GdkEventType"/>
      </field>
      <field name="window" writable="1">
        <doc xml:space="preserve">the window which received the event.</doc>
        <type name="Window" c:type="GdkWindow*"/>
      </field>
      <field name="send_event" writable="1">
        <doc xml:space="preserve">%TRUE if the event was sent explicitly.</doc>
        <type name="gint8" c:type="gint8"/>
      </field>
      <field name="action" writable="1">
        <doc xml:space="preserve">what happened to the setting (%GDK_SETTING_ACTION_NEW,
  %GDK_SETTING_ACTION_CHANGED or %GDK_SETTING_ACTION_DELETED).</doc>
        <type name="SettingAction" c:type="GdkSettingAction"/>
      </field>
      <field name="name" writable="1">
        <doc xml:space="preserve">the name of the setting.</doc>
        <type name="utf8" c:type="char*"/>
      </field>
    </record>
    <record name="EventTouch" c:type="GdkEventTouch">
      <doc xml:space="preserve">Used for touch events.
@type field will be one of %GDK_TOUCH_BEGIN, %GDK_TOUCH_UPDATE,
%GDK_TOUCH_END or %GDK_TOUCH_CANCEL.

Touch events are grouped into sequences by means of the @sequence
field, which can also be obtained with gdk_event_get_event_sequence().
Each sequence begins with a %GDK_TOUCH_BEGIN event, followed by
any number of %GDK_TOUCH_UPDATE events, and ends with a %GDK_TOUCH_END
(or %GDK_TOUCH_CANCEL) event. With multitouch devices, there may be
several active sequences at the same time.</doc>
      <field name="type" writable="1">
        <doc xml:space="preserve">the type of the event (%GDK_TOUCH_BEGIN, %GDK_TOUCH_UPDATE,
  %GDK_TOUCH_END, %GDK_TOUCH_CANCEL)</doc>
        <type name="EventType" c:type="GdkEventType"/>
      </field>
      <field name="window" writable="1">
        <doc xml:space="preserve">the window which received the event</doc>
        <type name="Window" c:type="GdkWindow*"/>
      </field>
      <field name="send_event" writable="1">
        <doc xml:space="preserve">%TRUE if the event was sent explicitly.</doc>
        <type name="gint8" c:type="gint8"/>
      </field>
      <field name="time" writable="1">
        <doc xml:space="preserve">the time of the event in milliseconds.</doc>
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="x" writable="1">
        <doc xml:space="preserve">the x coordinate of the pointer relative to the window</doc>
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="y" writable="1">
        <doc xml:space="preserve">the y coordinate of the pointer relative to the window</doc>
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="axes" writable="1">
        <doc xml:space="preserve">@x, @y translated to the axes of @device, or %NULL if @device is
  the mouse</doc>
        <type name="gdouble" c:type="gdouble*"/>
      </field>
      <field name="state" writable="1">
        <doc xml:space="preserve">a bit-mask representing the state of
  the modifier keys (e.g. Control, Shift and Alt) and the pointer
  buttons. See #GdkModifierType</doc>
        <type name="ModifierType"/>
      </field>
      <field name="sequence" writable="1">
        <doc xml:space="preserve">the event sequence that the event belongs to</doc>
        <type name="EventSequence" c:type="GdkEventSequence*"/>
      </field>
      <field name="emulating_pointer" writable="1">
        <doc xml:space="preserve">whether the event should be used for emulating
  pointer event</doc>
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="device" writable="1">
        <doc xml:space="preserve">the master device that the event originated from. Use
gdk_event_get_source_device() to get the slave device.</doc>
        <type name="Device" c:type="GdkDevice*"/>
      </field>
      <field name="x_root" writable="1">
        <doc xml:space="preserve">the x coordinate of the pointer relative to the root of the
  screen</doc>
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="y_root" writable="1">
        <doc xml:space="preserve">the y coordinate of the pointer relative to the root of the
  screen</doc>
        <type name="gdouble" c:type="gdouble"/>
      </field>
    </record>
    <record name="EventTouchpadPinch" c:type="GdkEventTouchpadPinch">
      <doc xml:space="preserve">Generated during touchpad swipe gestures.</doc>
      <field name="type" writable="1">
        <doc xml:space="preserve">the type of the event (%GDK_TOUCHPAD_PINCH)</doc>
        <type name="EventType" c:type="GdkEventType"/>
      </field>
      <field name="window" writable="1">
        <doc xml:space="preserve">the window which received the event</doc>
        <type name="Window" c:type="GdkWindow*"/>
      </field>
      <field name="send_event" writable="1">
        <doc xml:space="preserve">%TRUE if the event was sent explicitly</doc>
        <type name="gint8" c:type="gint8"/>
      </field>
      <field name="phase" writable="1">
        <doc xml:space="preserve">the current phase of the gesture</doc>
        <type name="gint8" c:type="gint8"/>
      </field>
      <field name="n_fingers" writable="1">
        <doc xml:space="preserve">The number of fingers triggering the pinch</doc>
        <type name="gint8" c:type="gint8"/>
      </field>
      <field name="time" writable="1">
        <doc xml:space="preserve">the time of the event in milliseconds</doc>
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="x" writable="1">
        <doc xml:space="preserve">The X coordinate of the pointer</doc>
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="y" writable="1">
        <doc xml:space="preserve">The Y coordinate of the pointer</doc>
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="dx" writable="1">
        <doc xml:space="preserve">Movement delta in the X axis of the swipe focal point</doc>
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="dy" writable="1">
        <doc xml:space="preserve">Movement delta in the Y axis of the swipe focal point</doc>
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="angle_delta" writable="1">
        <doc xml:space="preserve">The angle change in radians, negative angles
  denote counter-clockwise movements</doc>
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="scale" writable="1">
        <doc xml:space="preserve">The current scale, relative to that at the time of
  the corresponding %GDK_TOUCHPAD_GESTURE_PHASE_BEGIN event</doc>
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="x_root" writable="1">
        <doc xml:space="preserve">The X coordinate of the pointer, relative to the
  root of the screen.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="y_root" writable="1">
        <doc xml:space="preserve">The Y coordinate of the pointer, relative to the
  root of the screen.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="state" writable="1">
        <doc xml:space="preserve">a bit-mask representing the state of
  the modifier keys (e.g. Control, Shift and Alt) and the pointer
  buttons. See #GdkModifierType.</doc>
        <type name="ModifierType"/>
      </field>
    </record>
    <record name="EventTouchpadSwipe" c:type="GdkEventTouchpadSwipe">
      <doc xml:space="preserve">Generated during touchpad swipe gestures.</doc>
      <field name="type" writable="1">
        <doc xml:space="preserve">the type of the event (%GDK_TOUCHPAD_SWIPE)</doc>
        <type name="EventType" c:type="GdkEventType"/>
      </field>
      <field name="window" writable="1">
        <doc xml:space="preserve">the window which received the event</doc>
        <type name="Window" c:type="GdkWindow*"/>
      </field>
      <field name="send_event" writable="1">
        <doc xml:space="preserve">%TRUE if the event was sent explicitly</doc>
        <type name="gint8" c:type="gint8"/>
      </field>
      <field name="phase" writable="1">
        <doc xml:space="preserve">the current phase of the gesture</doc>
        <type name="gint8" c:type="gint8"/>
      </field>
      <field name="n_fingers" writable="1">
        <doc xml:space="preserve">The number of fingers triggering the swipe</doc>
        <type name="gint8" c:type="gint8"/>
      </field>
      <field name="time" writable="1">
        <doc xml:space="preserve">the time of the event in milliseconds</doc>
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="x" writable="1">
        <doc xml:space="preserve">The X coordinate of the pointer</doc>
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="y" writable="1">
        <doc xml:space="preserve">The Y coordinate of the pointer</doc>
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="dx" writable="1">
        <doc xml:space="preserve">Movement delta in the X axis of the swipe focal point</doc>
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="dy" writable="1">
        <doc xml:space="preserve">Movement delta in the Y axis of the swipe focal point</doc>
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="x_root" writable="1">
        <doc xml:space="preserve">The X coordinate of the pointer, relative to the
  root of the screen.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="y_root" writable="1">
        <doc xml:space="preserve">The Y coordinate of the pointer, relative to the
  root of the screen.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="state" writable="1">
        <doc xml:space="preserve">a bit-mask representing the state of
  the modifier keys (e.g. Control, Shift and Alt) and the pointer
  buttons. See #GdkModifierType.</doc>
        <type name="ModifierType"/>
      </field>
    </record>
    <enumeration name="EventType" glib:type-name="GdkEventType" glib:get-type="gdk_event_type_get_type" c:type="GdkEventType">
      <doc xml:space="preserve">Specifies the type of the event.

Do not confuse these events with the signals that GTK+ widgets emit.
Although many of these events result in corresponding signals being emitted,
the events are often transformed or filtered along the way.

In some language bindings, the values %GDK_2BUTTON_PRESS and
%GDK_3BUTTON_PRESS would translate into something syntactically
invalid (eg `Gdk.EventType.2ButtonPress`, where a
symbol is not allowed to start with a number). In that case, the
aliases %GDK_DOUBLE_BUTTON_PRESS and %GDK_TRIPLE_BUTTON_PRESS can
be used instead.</doc>
      <member name="nothing" value="-1" c:identifier="GDK_NOTHING" glib:nick="nothing" glib:name="GDK_NOTHING">
        <doc xml:space="preserve">a special code to indicate a null event.</doc>
      </member>
      <member name="delete" value="0" c:identifier="GDK_DELETE" glib:nick="delete" glib:name="GDK_DELETE">
        <doc xml:space="preserve">the window manager has requested that the toplevel window be
  hidden or destroyed, usually when the user clicks on a special icon in the
  title bar.</doc>
      </member>
      <member name="destroy" value="1" c:identifier="GDK_DESTROY" glib:nick="destroy" glib:name="GDK_DESTROY">
        <doc xml:space="preserve">the window has been destroyed.</doc>
      </member>
      <member name="expose" value="2" c:identifier="GDK_EXPOSE" glib:nick="expose" glib:name="GDK_EXPOSE">
        <doc xml:space="preserve">all or part of the window has become visible and needs to be
  redrawn.</doc>
      </member>
      <member name="motion_notify" value="3" c:identifier="GDK_MOTION_NOTIFY" glib:nick="motion-notify" glib:name="GDK_MOTION_NOTIFY">
        <doc xml:space="preserve">the pointer (usually a mouse) has moved.</doc>
      </member>
      <member name="button_press" value="4" c:identifier="GDK_BUTTON_PRESS" glib:nick="button-press" glib:name="GDK_BUTTON_PRESS">
        <doc xml:space="preserve">a mouse button has been pressed.</doc>
      </member>
      <member name="2button_press" value="5" c:identifier="GDK_2BUTTON_PRESS" glib:nick="2button-press" glib:name="GDK_2BUTTON_PRESS">
        <doc xml:space="preserve">a mouse button has been double-clicked (clicked twice
  within a short period of time). Note that each click also generates a
  %GDK_BUTTON_PRESS event.</doc>
      </member>
      <member name="double_button_press" value="5" c:identifier="GDK_DOUBLE_BUTTON_PRESS" glib:nick="double-button-press" glib:name="GDK_DOUBLE_BUTTON_PRESS">
        <doc xml:space="preserve">alias for %GDK_2BUTTON_PRESS, added in 3.6.</doc>
      </member>
      <member name="3button_press" value="6" c:identifier="GDK_3BUTTON_PRESS" glib:nick="3button-press" glib:name="GDK_3BUTTON_PRESS">
        <doc xml:space="preserve">a mouse button has been clicked 3 times in a short period
  of time. Note that each click also generates a %GDK_BUTTON_PRESS event.</doc>
      </member>
      <member name="triple_button_press" value="6" c:identifier="GDK_TRIPLE_BUTTON_PRESS" glib:nick="triple-button-press" glib:name="GDK_TRIPLE_BUTTON_PRESS">
        <doc xml:space="preserve">alias for %GDK_3BUTTON_PRESS, added in 3.6.</doc>
      </member>
      <member name="button_release" value="7" c:identifier="GDK_BUTTON_RELEASE" glib:nick="button-release" glib:name="GDK_BUTTON_RELEASE">
        <doc xml:space="preserve">a mouse button has been released.</doc>
      </member>
      <member name="key_press" value="8" c:identifier="GDK_KEY_PRESS" glib:nick="key-press" glib:name="GDK_KEY_PRESS">
        <doc xml:space="preserve">a key has been pressed.</doc>
      </member>
      <member name="key_release" value="9" c:identifier="GDK_KEY_RELEASE" glib:nick="key-release" glib:name="GDK_KEY_RELEASE">
        <doc xml:space="preserve">a key has been released.</doc>
      </member>
      <member name="enter_notify" value="10" c:identifier="GDK_ENTER_NOTIFY" glib:nick="enter-notify" glib:name="GDK_ENTER_NOTIFY">
        <doc xml:space="preserve">the pointer has entered the window.</doc>
      </member>
      <member name="leave_notify" value="11" c:identifier="GDK_LEAVE_NOTIFY" glib:nick="leave-notify" glib:name="GDK_LEAVE_NOTIFY">
        <doc xml:space="preserve">the pointer has left the window.</doc>
      </member>
      <member name="focus_change" value="12" c:identifier="GDK_FOCUS_CHANGE" glib:nick="focus-change" glib:name="GDK_FOCUS_CHANGE">
        <doc xml:space="preserve">the keyboard focus has entered or left the window.</doc>
      </member>
      <member name="configure" value="13" c:identifier="GDK_CONFIGURE" glib:nick="configure" glib:name="GDK_CONFIGURE">
        <doc xml:space="preserve">the size, position or stacking order of the window has changed.
  Note that GTK+ discards these events for %GDK_WINDOW_CHILD windows.</doc>
      </member>
      <member name="map" value="14" c:identifier="GDK_MAP" glib:nick="map" glib:name="GDK_MAP">
        <doc xml:space="preserve">the window has been mapped.</doc>
      </member>
      <member name="unmap" value="15" c:identifier="GDK_UNMAP" glib:nick="unmap" glib:name="GDK_UNMAP">
        <doc xml:space="preserve">the window has been unmapped.</doc>
      </member>
      <member name="property_notify" value="16" c:identifier="GDK_PROPERTY_NOTIFY" glib:nick="property-notify" glib:name="GDK_PROPERTY_NOTIFY">
        <doc xml:space="preserve">a property on the window has been changed or deleted.</doc>
      </member>
      <member name="selection_clear" value="17" c:identifier="GDK_SELECTION_CLEAR" glib:nick="selection-clear" glib:name="GDK_SELECTION_CLEAR">
        <doc xml:space="preserve">the application has lost ownership of a selection.</doc>
      </member>
      <member name="selection_request" value="18" c:identifier="GDK_SELECTION_REQUEST" glib:nick="selection-request" glib:name="GDK_SELECTION_REQUEST">
        <doc xml:space="preserve">another application has requested a selection.</doc>
      </member>
      <member name="selection_notify" value="19" c:identifier="GDK_SELECTION_NOTIFY" glib:nick="selection-notify" glib:name="GDK_SELECTION_NOTIFY">
        <doc xml:space="preserve">a selection has been received.</doc>
      </member>
      <member name="proximity_in" value="20" c:identifier="GDK_PROXIMITY_IN" glib:nick="proximity-in" glib:name="GDK_PROXIMITY_IN">
        <doc xml:space="preserve">an input device has moved into contact with a sensing
  surface (e.g. a touchscreen or graphics tablet).</doc>
      </member>
      <member name="proximity_out" value="21" c:identifier="GDK_PROXIMITY_OUT" glib:nick="proximity-out" glib:name="GDK_PROXIMITY_OUT">
        <doc xml:space="preserve">an input device has moved out of contact with a sensing
  surface.</doc>
      </member>
      <member name="drag_enter" value="22" c:identifier="GDK_DRAG_ENTER" glib:nick="drag-enter" glib:name="GDK_DRAG_ENTER">
        <doc xml:space="preserve">the mouse has entered the window while a drag is in progress.</doc>
      </member>
      <member name="drag_leave" value="23" c:identifier="GDK_DRAG_LEAVE" glib:nick="drag-leave" glib:name="GDK_DRAG_LEAVE">
        <doc xml:space="preserve">the mouse has left the window while a drag is in progress.</doc>
      </member>
      <member name="drag_motion" value="24" c:identifier="GDK_DRAG_MOTION" glib:nick="drag-motion" glib:name="GDK_DRAG_MOTION">
        <doc xml:space="preserve">the mouse has moved in the window while a drag is in
  progress.</doc>
      </member>
      <member name="drag_status" value="25" c:identifier="GDK_DRAG_STATUS" glib:nick="drag-status" glib:name="GDK_DRAG_STATUS">
        <doc xml:space="preserve">the status of the drag operation initiated by the window
  has changed.</doc>
      </member>
      <member name="drop_start" value="26" c:identifier="GDK_DROP_START" glib:nick="drop-start" glib:name="GDK_DROP_START">
        <doc xml:space="preserve">a drop operation onto the window has started.</doc>
      </member>
      <member name="drop_finished" value="27" c:identifier="GDK_DROP_FINISHED" glib:nick="drop-finished" glib:name="GDK_DROP_FINISHED">
        <doc xml:space="preserve">the drop operation initiated by the window has completed.</doc>
      </member>
      <member name="client_event" value="28" c:identifier="GDK_CLIENT_EVENT" glib:nick="client-event" glib:name="GDK_CLIENT_EVENT">
        <doc xml:space="preserve">a message has been received from another application.</doc>
      </member>
      <member name="visibility_notify" value="29" c:identifier="GDK_VISIBILITY_NOTIFY" glib:nick="visibility-notify" glib:name="GDK_VISIBILITY_NOTIFY">
        <doc xml:space="preserve">the window visibility status has changed.</doc>
      </member>
      <member name="scroll" value="31" c:identifier="GDK_SCROLL" glib:nick="scroll" glib:name="GDK_SCROLL">
        <doc xml:space="preserve">the scroll wheel was turned</doc>
      </member>
      <member name="window_state" value="32" c:identifier="GDK_WINDOW_STATE" glib:nick="window-state" glib:name="GDK_WINDOW_STATE">
        <doc xml:space="preserve">the state of a window has changed. See #GdkWindowState
  for the possible window states</doc>
      </member>
      <member name="setting" value="33" c:identifier="GDK_SETTING" glib:nick="setting" glib:name="GDK_SETTING">
        <doc xml:space="preserve">a setting has been modified.</doc>
      </member>
      <member name="owner_change" value="34" c:identifier="GDK_OWNER_CHANGE" glib:nick="owner-change" glib:name="GDK_OWNER_CHANGE">
        <doc xml:space="preserve">the owner of a selection has changed. This event type
  was added in 2.6</doc>
      </member>
      <member name="grab_broken" value="35" c:identifier="GDK_GRAB_BROKEN" glib:nick="grab-broken" glib:name="GDK_GRAB_BROKEN">
        <doc xml:space="preserve">a pointer or keyboard grab was broken. This event type
  was added in 2.8.</doc>
      </member>
      <member name="damage" value="36" c:identifier="GDK_DAMAGE" glib:nick="damage" glib:name="GDK_DAMAGE">
        <doc xml:space="preserve">the content of the window has been changed. This event type
  was added in 2.14.</doc>
      </member>
      <member name="touch_begin" value="37" c:identifier="GDK_TOUCH_BEGIN" glib:nick="touch-begin" glib:name="GDK_TOUCH_BEGIN">
        <doc xml:space="preserve">A new touch event sequence has just started. This event
  type was added in 3.4.</doc>
      </member>
      <member name="touch_update" value="38" c:identifier="GDK_TOUCH_UPDATE" glib:nick="touch-update" glib:name="GDK_TOUCH_UPDATE">
        <doc xml:space="preserve">A touch event sequence has been updated. This event type
  was added in 3.4.</doc>
      </member>
      <member name="touch_end" value="39" c:identifier="GDK_TOUCH_END" glib:nick="touch-end" glib:name="GDK_TOUCH_END">
        <doc xml:space="preserve">A touch event sequence has finished. This event type
  was added in 3.4.</doc>
      </member>
      <member name="touch_cancel" value="40" c:identifier="GDK_TOUCH_CANCEL" glib:nick="touch-cancel" glib:name="GDK_TOUCH_CANCEL">
        <doc xml:space="preserve">A touch event sequence has been canceled. This event type
  was added in 3.4.</doc>
      </member>
      <member name="touchpad_swipe" value="41" c:identifier="GDK_TOUCHPAD_SWIPE" glib:nick="touchpad-swipe" glib:name="GDK_TOUCHPAD_SWIPE">
        <doc xml:space="preserve">A touchpad swipe gesture event, the current state
  is determined by its phase field. This event type was added in 3.18.</doc>
      </member>
      <member name="touchpad_pinch" value="42" c:identifier="GDK_TOUCHPAD_PINCH" glib:nick="touchpad-pinch" glib:name="GDK_TOUCHPAD_PINCH">
        <doc xml:space="preserve">A touchpad pinch gesture event, the current state
  is determined by its phase field. This event type was added in 3.18.</doc>
      </member>
      <member name="pad_button_press" value="43" c:identifier="GDK_PAD_BUTTON_PRESS" glib:nick="pad-button-press" glib:name="GDK_PAD_BUTTON_PRESS">
        <doc xml:space="preserve">A tablet pad button press event. This event type
  was added in 3.22.</doc>
      </member>
      <member name="pad_button_release" value="44" c:identifier="GDK_PAD_BUTTON_RELEASE" glib:nick="pad-button-release" glib:name="GDK_PAD_BUTTON_RELEASE">
        <doc xml:space="preserve">A tablet pad button release event. This event type
  was added in 3.22.</doc>
      </member>
      <member name="pad_ring" value="45" c:identifier="GDK_PAD_RING" glib:nick="pad-ring" glib:name="GDK_PAD_RING">
        <doc xml:space="preserve">A tablet pad axis event from a "ring". This event type was
  added in 3.22.</doc>
      </member>
      <member name="pad_strip" value="46" c:identifier="GDK_PAD_STRIP" glib:nick="pad-strip" glib:name="GDK_PAD_STRIP">
        <doc xml:space="preserve">A tablet pad axis event from a "strip". This event type was
  added in 3.22.</doc>
      </member>
      <member name="pad_group_mode" value="47" c:identifier="GDK_PAD_GROUP_MODE" glib:nick="pad-group-mode" glib:name="GDK_PAD_GROUP_MODE">
        <doc xml:space="preserve">A tablet pad group mode change. This event type was
  added in 3.22.</doc>
      </member>
      <member name="event_last" value="48" c:identifier="GDK_EVENT_LAST" glib:nick="event-last" glib:name="GDK_EVENT_LAST">
        <doc xml:space="preserve">marks the end of the GdkEventType enumeration. Added in 2.18</doc>
      </member>
    </enumeration>
    <record name="EventVisibility" c:type="GdkEventVisibility" deprecated="1" deprecated-version="3.12">
      <doc xml:space="preserve">Generated when the window visibility status has changed.</doc>
      <doc-deprecated xml:space="preserve">Modern composited windowing systems with pervasive
    transparency make it impossible to track the visibility of a window
    reliably, so this event can not be guaranteed to provide useful
    information.</doc-deprecated>
      <field name="type" writable="1">
        <doc xml:space="preserve">the type of the event (%GDK_VISIBILITY_NOTIFY).</doc>
        <type name="EventType" c:type="GdkEventType"/>
      </field>
      <field name="window" writable="1">
        <doc xml:space="preserve">the window which received the event.</doc>
        <type name="Window" c:type="GdkWindow*"/>
      </field>
      <field name="send_event" writable="1">
        <doc xml:space="preserve">%TRUE if the event was sent explicitly.</doc>
        <type name="gint8" c:type="gint8"/>
      </field>
      <field name="state" writable="1">
        <doc xml:space="preserve">the new visibility state (%GDK_VISIBILITY_FULLY_OBSCURED,
  %GDK_VISIBILITY_PARTIAL or %GDK_VISIBILITY_UNOBSCURED).</doc>
        <type name="VisibilityState" c:type="GdkVisibilityState"/>
      </field>
    </record>
    <record name="EventWindowState" c:type="GdkEventWindowState">
      <doc xml:space="preserve">Generated when the state of a toplevel window changes.</doc>
      <field name="type" writable="1">
        <doc xml:space="preserve">the type of the event (%GDK_WINDOW_STATE).</doc>
        <type name="EventType" c:type="GdkEventType"/>
      </field>
      <field name="window" writable="1">
        <doc xml:space="preserve">the window which received the event.</doc>
        <type name="Window" c:type="GdkWindow*"/>
      </field>
      <field name="send_event" writable="1">
        <doc xml:space="preserve">%TRUE if the event was sent explicitly.</doc>
        <type name="gint8" c:type="gint8"/>
      </field>
      <field name="changed_mask" writable="1">
        <doc xml:space="preserve">mask specifying what flags have changed.</doc>
        <type name="WindowState" c:type="GdkWindowState"/>
      </field>
      <field name="new_window_state" writable="1">
        <doc xml:space="preserve">the new window state, a combination of
  #GdkWindowState bits.</doc>
        <type name="WindowState" c:type="GdkWindowState"/>
      </field>
    </record>
    <function-macro name="FRAME_CLOCK" c:identifier="GDK_FRAME_CLOCK" introspectable="0">
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FRAME_CLOCK_CLASS" c:identifier="GDK_FRAME_CLOCK_CLASS" introspectable="0">
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FRAME_CLOCK_GET_CLASS" c:identifier="GDK_FRAME_CLOCK_GET_CLASS" introspectable="0">
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <callback name="FilterFunc" c:type="GdkFilterFunc">
      <doc xml:space="preserve">Specifies the type of function used to filter native events before they are
converted to GDK events.

When a filter is called, @event is unpopulated, except for
`event-&gt;window`. The filter may translate the native
event to a GDK event and store the result in @event, or handle it without
translation. If the filter translates the event and processing should
continue, it should return %GDK_FILTER_TRANSLATE.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">a #GdkFilterReturn value.</doc>
        <type name="FilterReturn" c:type="GdkFilterReturn"/>
      </return-value>
      <parameters>
        <parameter name="xevent" transfer-ownership="none">
          <doc xml:space="preserve">the native event to filter.</doc>
          <type name="XEvent" c:type="GdkXEvent*"/>
        </parameter>
        <parameter name="event" transfer-ownership="none">
          <doc xml:space="preserve">the GDK event to which the X event will be translated.</doc>
          <type name="Event" c:type="GdkEvent*"/>
        </parameter>
        <parameter name="data" transfer-ownership="none" nullable="1" allow-none="1" closure="2">
          <doc xml:space="preserve">user data set when the filter was installed.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <enumeration name="FilterReturn" glib:type-name="GdkFilterReturn" glib:get-type="gdk_filter_return_get_type" c:type="GdkFilterReturn">
      <doc xml:space="preserve">Specifies the result of applying a #GdkFilterFunc to a native event.</doc>
      <member name="continue" value="0" c:identifier="GDK_FILTER_CONTINUE" glib:nick="continue" glib:name="GDK_FILTER_CONTINUE">
        <doc xml:space="preserve">event not handled, continue processing.</doc>
      </member>
      <member name="translate" value="1" c:identifier="GDK_FILTER_TRANSLATE" glib:nick="translate" glib:name="GDK_FILTER_TRANSLATE">
        <doc xml:space="preserve">native event translated into a GDK event and stored
 in the `event` structure that was passed in.</doc>
      </member>
      <member name="remove" value="2" c:identifier="GDK_FILTER_REMOVE" glib:nick="remove" glib:name="GDK_FILTER_REMOVE">
        <doc xml:space="preserve">event handled, terminate processing.</doc>
      </member>
    </enumeration>
    <class name="FrameClock" c:symbol-prefix="frame_clock" c:type="GdkFrameClock" parent="GObject.Object" abstract="1" glib:type-name="GdkFrameClock" glib:get-type="gdk_frame_clock_get_type" glib:type-struct="FrameClockClass">
      <doc xml:space="preserve">A #GdkFrameClock tells the application when to update and repaint a
window. This may be synced to the vertical refresh rate of the
monitor, for example. Even when the frame clock uses a simple timer
rather than a hardware-based vertical sync, the frame clock helps
because it ensures everything paints at the same time (reducing the
total number of frames). The frame clock can also automatically
stop painting when it knows the frames will not be visible, or
scale back animation framerates.

#GdkFrameClock is designed to be compatible with an OpenGL-based
implementation or with mozRequestAnimationFrame in Firefox,
for example.

A frame clock is idle until someone requests a frame with
gdk_frame_clock_request_phase(). At some later point that makes
sense for the synchronization being implemented, the clock will
process a frame and emit signals for each phase that has been
requested. (See the signals of the #GdkFrameClock class for
documentation of the phases. %GDK_FRAME_CLOCK_PHASE_UPDATE and the
#GdkFrameClock::update signal are most interesting for application
writers, and are used to update the animations, using the frame time
given by gdk_frame_clock_get_frame_time().

The frame time is reported in microseconds and generally in the same
timescale as g_get_monotonic_time(), however, it is not the same
as g_get_monotonic_time(). The frame time does not advance during
the time a frame is being painted, and outside of a frame, an attempt
is made so that all calls to gdk_frame_clock_get_frame_time() that
are called at a &#x201C;similar&#x201D; time get the same value. This means that
if different animations are timed by looking at the difference in
time between an initial value from gdk_frame_clock_get_frame_time()
and the value inside the #GdkFrameClock::update signal of the clock,
they will stay exactly synchronized.</doc>
      <method name="begin_updating" c:identifier="gdk_frame_clock_begin_updating" version="3.8">
        <doc xml:space="preserve">Starts updates for an animation. Until a matching call to
gdk_frame_clock_end_updating() is made, the frame clock will continually
request a new frame with the %GDK_FRAME_CLOCK_PHASE_UPDATE phase.
This function may be called multiple times and frames will be
requested until gdk_frame_clock_end_updating() is called the same
number of times.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="frame_clock" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkFrameClock</doc>
            <type name="FrameClock" c:type="GdkFrameClock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="end_updating" c:identifier="gdk_frame_clock_end_updating" version="3.8">
        <doc xml:space="preserve">Stops updates for an animation. See the documentation for
gdk_frame_clock_begin_updating().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="frame_clock" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkFrameClock</doc>
            <type name="FrameClock" c:type="GdkFrameClock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_current_timings" c:identifier="gdk_frame_clock_get_current_timings" version="3.8">
        <doc xml:space="preserve">Gets the frame timings for the current frame.</doc>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">the #GdkFrameTimings for the
 frame currently being processed, or even no frame is being
 processed, for the previous frame. Before any frames have been
 processed, returns %NULL.</doc>
          <type name="FrameTimings" c:type="GdkFrameTimings*"/>
        </return-value>
        <parameters>
          <instance-parameter name="frame_clock" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkFrameClock</doc>
            <type name="FrameClock" c:type="GdkFrameClock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_frame_counter" c:identifier="gdk_frame_clock_get_frame_counter" version="3.8">
        <doc xml:space="preserve">A #GdkFrameClock maintains a 64-bit counter that increments for
each frame drawn.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">inside frame processing, the value of the frame counter
 for the current frame. Outside of frame processing, the frame
  counter for the last frame.</doc>
          <type name="gint64" c:type="gint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="frame_clock" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkFrameClock</doc>
            <type name="FrameClock" c:type="GdkFrameClock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_frame_time" c:identifier="gdk_frame_clock_get_frame_time" version="3.8">
        <doc xml:space="preserve">Gets the time that should currently be used for animations.  Inside
the processing of a frame, it&#x2019;s the time used to compute the
animation position of everything in a frame. Outside of a frame, it's
the time of the conceptual &#x201C;previous frame,&#x201D; which may be either
the actual previous frame time, or if that&#x2019;s too old, an updated
time.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a timestamp in microseconds, in the timescale of
 of g_get_monotonic_time().</doc>
          <type name="gint64" c:type="gint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="frame_clock" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkFrameClock</doc>
            <type name="FrameClock" c:type="GdkFrameClock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_history_start" c:identifier="gdk_frame_clock_get_history_start" version="3.8">
        <doc xml:space="preserve">#GdkFrameClock internally keeps a history of #GdkFrameTimings
objects for recent frames that can be retrieved with
gdk_frame_clock_get_timings(). The set of stored frames
is the set from the counter values given by
gdk_frame_clock_get_history_start() and
gdk_frame_clock_get_frame_counter(), inclusive.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the frame counter value for the oldest frame
 that is available in the internal frame history of the
 #GdkFrameClock.</doc>
          <type name="gint64" c:type="gint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="frame_clock" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkFrameClock</doc>
            <type name="FrameClock" c:type="GdkFrameClock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_refresh_info" c:identifier="gdk_frame_clock_get_refresh_info" version="3.8">
        <doc xml:space="preserve">Using the frame history stored in the frame clock, finds the last
known presentation time and refresh interval, and assuming that
presentation times are separated by the refresh interval,
predicts a presentation time that is a multiple of the refresh
interval after the last presentation time, and later than @base_time.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="frame_clock" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkFrameClock</doc>
            <type name="FrameClock" c:type="GdkFrameClock*"/>
          </instance-parameter>
          <parameter name="base_time" transfer-ownership="none">
            <doc xml:space="preserve">base time for determining a presentaton time</doc>
            <type name="gint64" c:type="gint64"/>
          </parameter>
          <parameter name="refresh_interval_return" direction="out" caller-allocates="0" transfer-ownership="full" optional="1" allow-none="1">
            <doc xml:space="preserve">a location to store the
determined refresh interval, or %NULL. A default refresh interval of
1/60th of a second will be stored if no history is present.</doc>
            <type name="gint64" c:type="gint64*"/>
          </parameter>
          <parameter name="presentation_time_return" direction="out" caller-allocates="0" transfer-ownership="full">
            <doc xml:space="preserve">a location to store the next
 candidate presentation time after the given base time.
 0 will be will be stored if no history is present.</doc>
            <type name="gint64" c:type="gint64*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_timings" c:identifier="gdk_frame_clock_get_timings" version="3.8">
        <doc xml:space="preserve">Retrieves a #GdkFrameTimings object holding timing information
for the current frame or a recent frame. The #GdkFrameTimings
object may not yet be complete: see gdk_frame_timings_get_complete().</doc>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">the #GdkFrameTimings object for
 the specified frame, or %NULL if it is not available. See
 gdk_frame_clock_get_history_start().</doc>
          <type name="FrameTimings" c:type="GdkFrameTimings*"/>
        </return-value>
        <parameters>
          <instance-parameter name="frame_clock" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkFrameClock</doc>
            <type name="FrameClock" c:type="GdkFrameClock*"/>
          </instance-parameter>
          <parameter name="frame_counter" transfer-ownership="none">
            <doc xml:space="preserve">the frame counter value identifying the frame to
 be received.</doc>
            <type name="gint64" c:type="gint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="request_phase" c:identifier="gdk_frame_clock_request_phase" version="3.8">
        <doc xml:space="preserve">Asks the frame clock to run a particular phase. The signal
corresponding the requested phase will be emitted the next
time the frame clock processes. Multiple calls to
gdk_frame_clock_request_phase() will be combined together
and only one frame processed. If you are displaying animated
content and want to continually request the
%GDK_FRAME_CLOCK_PHASE_UPDATE phase for a period of time,
you should use gdk_frame_clock_begin_updating() instead, since
this allows GTK+ to adjust system parameters to get maximally
smooth animations.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="frame_clock" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkFrameClock</doc>
            <type name="FrameClock" c:type="GdkFrameClock*"/>
          </instance-parameter>
          <parameter name="phase" transfer-ownership="none">
            <doc xml:space="preserve">the phase that is requested</doc>
            <type name="FrameClockPhase" c:type="GdkFrameClockPhase"/>
          </parameter>
        </parameters>
      </method>
      <glib:signal name="after-paint" when="last">
        <doc xml:space="preserve">This signal ends processing of the frame. Applications
should generally not handle this signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="before-paint" when="last">
        <doc xml:space="preserve">This signal begins processing of the frame. Applications
should generally not handle this signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="flush-events" when="last">
        <doc xml:space="preserve">This signal is used to flush pending motion events that
are being batched up and compressed together. Applications
should not handle this signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="layout" when="last">
        <doc xml:space="preserve">This signal is emitted as the second step of toolkit and
application processing of the frame. Any work to update
sizes and positions of application elements should be
performed. GTK+ normally handles this internally.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="paint" when="last">
        <doc xml:space="preserve">This signal is emitted as the third step of toolkit and
application processing of the frame. The frame is
repainted. GDK normally handles this internally and
produces expose events, which are turned into GTK+
#GtkWidget::draw signals.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="resume-events" when="last">
        <doc xml:space="preserve">This signal is emitted after processing of the frame is
finished, and is handled internally by GTK+ to resume normal
event processing. Applications should not handle this signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="update" when="last">
        <doc xml:space="preserve">This signal is emitted as the first step of toolkit and
application processing of the frame. Animations should
be updated using gdk_frame_clock_get_frame_time().
Applications can connect directly to this signal, or
use gtk_widget_add_tick_callback() as a more convenient
interface.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="FrameClockClass" c:type="GdkFrameClockClass" disguised="1" opaque="1" glib:is-gtype-struct-for="FrameClock"/>
    <bitfield name="FrameClockPhase" version="3.8" glib:type-name="GdkFrameClockPhase" glib:get-type="gdk_frame_clock_phase_get_type" c:type="GdkFrameClockPhase">
      <doc xml:space="preserve">#GdkFrameClockPhase is used to represent the different paint clock
phases that can be requested. The elements of the enumeration
correspond to the signals of #GdkFrameClock.</doc>
      <member name="none" value="0" c:identifier="GDK_FRAME_CLOCK_PHASE_NONE" glib:nick="none" glib:name="GDK_FRAME_CLOCK_PHASE_NONE">
        <doc xml:space="preserve">no phase</doc>
      </member>
      <member name="flush_events" value="1" c:identifier="GDK_FRAME_CLOCK_PHASE_FLUSH_EVENTS" glib:nick="flush-events" glib:name="GDK_FRAME_CLOCK_PHASE_FLUSH_EVENTS">
        <doc xml:space="preserve">corresponds to GdkFrameClock::flush-events. Should not be handled by applications.</doc>
      </member>
      <member name="before_paint" value="2" c:identifier="GDK_FRAME_CLOCK_PHASE_BEFORE_PAINT" glib:nick="before-paint" glib:name="GDK_FRAME_CLOCK_PHASE_BEFORE_PAINT">
        <doc xml:space="preserve">corresponds to GdkFrameClock::before-paint. Should not be handled by applications.</doc>
      </member>
      <member name="update" value="4" c:identifier="GDK_FRAME_CLOCK_PHASE_UPDATE" glib:nick="update" glib:name="GDK_FRAME_CLOCK_PHASE_UPDATE">
        <doc xml:space="preserve">corresponds to GdkFrameClock::update.</doc>
      </member>
      <member name="layout" value="8" c:identifier="GDK_FRAME_CLOCK_PHASE_LAYOUT" glib:nick="layout" glib:name="GDK_FRAME_CLOCK_PHASE_LAYOUT">
        <doc xml:space="preserve">corresponds to GdkFrameClock::layout.</doc>
      </member>
      <member name="paint" value="16" c:identifier="GDK_FRAME_CLOCK_PHASE_PAINT" glib:nick="paint" glib:name="GDK_FRAME_CLOCK_PHASE_PAINT">
        <doc xml:space="preserve">corresponds to GdkFrameClock::paint.</doc>
      </member>
      <member name="resume_events" value="32" c:identifier="GDK_FRAME_CLOCK_PHASE_RESUME_EVENTS" glib:nick="resume-events" glib:name="GDK_FRAME_CLOCK_PHASE_RESUME_EVENTS">
        <doc xml:space="preserve">corresponds to GdkFrameClock::resume-events. Should not be handled by applications.</doc>
      </member>
      <member name="after_paint" value="64" c:identifier="GDK_FRAME_CLOCK_PHASE_AFTER_PAINT" glib:nick="after-paint" glib:name="GDK_FRAME_CLOCK_PHASE_AFTER_PAINT">
        <doc xml:space="preserve">corresponds to GdkFrameClock::after-paint. Should not be handled by applications.</doc>
      </member>
    </bitfield>
    <record name="FrameClockPrivate" c:type="GdkFrameClockPrivate" disguised="1" opaque="1"/>
    <record name="FrameTimings" c:type="GdkFrameTimings" opaque="1" glib:type-name="GdkFrameTimings" glib:get-type="gdk_frame_timings_get_type" c:symbol-prefix="frame_timings">
      <doc xml:space="preserve">A #GdkFrameTimings object holds timing information for a single frame
of the application&#x2019;s displays. To retrieve #GdkFrameTimings objects,
use gdk_frame_clock_get_timings() or gdk_frame_clock_get_current_timings().
The information in #GdkFrameTimings is useful for precise synchronization
of video with the event or audio streams, and for measuring
quality metrics for the application&#x2019;s display, such as latency and jitter.</doc>
      <method name="get_complete" c:identifier="gdk_frame_timings_get_complete" version="3.8">
        <doc xml:space="preserve">The timing information in a #GdkFrameTimings is filled in
incrementally as the frame as drawn and passed off to the
window system for processing and display to the user. The
accessor functions for #GdkFrameTimings can return 0 to
indicate an unavailable value for two reasons: either because
the information is not yet available, or because it isn't
available at all. Once gdk_frame_timings_get_complete() returns
%TRUE for a frame, you can be certain that no further values
will become available and be stored in the #GdkFrameTimings.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if all information that will be available
 for the frame has been filled in.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="timings" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkFrameTimings</doc>
            <type name="FrameTimings" c:type="GdkFrameTimings*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_frame_counter" c:identifier="gdk_frame_timings_get_frame_counter" version="3.8">
        <doc xml:space="preserve">Gets the frame counter value of the #GdkFrameClock when this
this frame was drawn.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the frame counter value for this frame</doc>
          <type name="gint64" c:type="gint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="timings" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkFrameTimings</doc>
            <type name="FrameTimings" c:type="GdkFrameTimings*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_frame_time" c:identifier="gdk_frame_timings_get_frame_time">
        <doc xml:space="preserve">Returns the frame time for the frame. This is the time value
that is typically used to time animations for the frame. See
gdk_frame_clock_get_frame_time().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the frame time for the frame, in the timescale
 of g_get_monotonic_time()</doc>
          <type name="gint64" c:type="gint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="timings" transfer-ownership="none">
            <doc xml:space="preserve">A #GdkFrameTimings</doc>
            <type name="FrameTimings" c:type="GdkFrameTimings*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_predicted_presentation_time" c:identifier="gdk_frame_timings_get_predicted_presentation_time" version="3.8">
        <doc xml:space="preserve">Gets the predicted time at which this frame will be displayed. Although
no predicted time may be available, if one is available, it will
be available while the frame is being generated, in contrast to
gdk_frame_timings_get_presentation_time(), which is only available
after the frame has been presented. In general, if you are simply
animating, you should use gdk_frame_clock_get_frame_time() rather
than this function, but this function is useful for applications
that want exact control over latency. For example, a movie player
may want this information for Audio/Video synchronization.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The predicted time at which the frame will be presented,
 in the timescale of g_get_monotonic_time(), or 0 if no predicted
 presentation time is available.</doc>
          <type name="gint64" c:type="gint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="timings" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkFrameTimings</doc>
            <type name="FrameTimings" c:type="GdkFrameTimings*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_presentation_time" c:identifier="gdk_frame_timings_get_presentation_time" version="3.8">
        <doc xml:space="preserve">Reurns the presentation time. This is the time at which the frame
became visible to the user.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the time the frame was displayed to the user, in the
 timescale of g_get_monotonic_time(), or 0 if no presentation
 time is available. See gdk_frame_timings_get_complete()</doc>
          <type name="gint64" c:type="gint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="timings" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkFrameTimings</doc>
            <type name="FrameTimings" c:type="GdkFrameTimings*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_refresh_interval" c:identifier="gdk_frame_timings_get_refresh_interval" version="3.8">
        <doc xml:space="preserve">Gets the natural interval between presentation times for
the display that this frame was displayed on. Frame presentation
usually happens during the &#x201C;vertical blanking interval&#x201D;.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the refresh interval of the display, in microseconds,
 or 0 if the refresh interval is not available.
 See gdk_frame_timings_get_complete().</doc>
          <type name="gint64" c:type="gint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="timings" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkFrameTimings</doc>
            <type name="FrameTimings" c:type="GdkFrameTimings*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="gdk_frame_timings_ref" version="3.8">
        <doc xml:space="preserve">Increases the reference count of @timings.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">@timings</doc>
          <type name="FrameTimings" c:type="GdkFrameTimings*"/>
        </return-value>
        <parameters>
          <instance-parameter name="timings" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkFrameTimings</doc>
            <type name="FrameTimings" c:type="GdkFrameTimings*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="unref" c:identifier="gdk_frame_timings_unref" version="3.8">
        <doc xml:space="preserve">Decreases the reference count of @timings. If @timings
is no longer referenced, it will be freed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="timings" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkFrameTimings</doc>
            <type name="FrameTimings" c:type="GdkFrameTimings*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <enumeration name="FullscreenMode" version="3.8" glib:type-name="GdkFullscreenMode" glib:get-type="gdk_fullscreen_mode_get_type" c:type="GdkFullscreenMode">
      <doc xml:space="preserve">Indicates which monitor (in a multi-head setup) a window should span over
when in fullscreen mode.</doc>
      <member name="current_monitor" value="0" c:identifier="GDK_FULLSCREEN_ON_CURRENT_MONITOR" glib:nick="current-monitor" glib:name="GDK_FULLSCREEN_ON_CURRENT_MONITOR">
        <doc xml:space="preserve">Fullscreen on current monitor only.</doc>
      </member>
      <member name="all_monitors" value="1" c:identifier="GDK_FULLSCREEN_ON_ALL_MONITORS" glib:nick="all-monitors" glib:name="GDK_FULLSCREEN_ON_ALL_MONITORS">
        <doc xml:space="preserve">Span across all monitors when fullscreen.</doc>
      </member>
    </enumeration>
    <class name="GLContext" c:symbol-prefix="gl_context" c:type="GdkGLContext" parent="GObject.Object" abstract="1" glib:type-name="GdkGLContext" glib:get-type="gdk_gl_context_get_type">
      <doc xml:space="preserve">#GdkGLContext is an object representing the platform-specific
OpenGL drawing context.

#GdkGLContexts are created for a #GdkWindow using
gdk_window_create_gl_context(), and the context will match
the #GdkVisual of the window.

A #GdkGLContext is not tied to any particular normal framebuffer.
For instance, it cannot draw to the #GdkWindow back buffer. The GDK
repaint system is in full control of the painting to that. Instead,
you can create render buffers or textures and use gdk_cairo_draw_from_gl()
in the draw function of your widget to draw them. Then GDK will handle
the integration of your rendering with that of other widgets.

Support for #GdkGLContext is platform-specific, context creation
can fail, returning %NULL context.

A #GdkGLContext has to be made "current" in order to start using
it, otherwise any OpenGL call will be ignored.

## Creating a new OpenGL context ##

In order to create a new #GdkGLContext instance you need a
#GdkWindow, which you typically get during the realize call
of a widget.

A #GdkGLContext is not realized until either gdk_gl_context_make_current(),
or until it is realized using gdk_gl_context_realize(). It is possible to
specify details of the GL context like the OpenGL version to be used, or
whether the GL context should have extra state validation enabled after
calling gdk_window_create_gl_context() by calling gdk_gl_context_realize().
If the realization fails you have the option to change the settings of the
#GdkGLContext and try again.

## Using a GdkGLContext ##

You will need to make the #GdkGLContext the current context
before issuing OpenGL calls; the system sends OpenGL commands to
whichever context is current. It is possible to have multiple
contexts, so you always need to ensure that the one which you
want to draw with is the current one before issuing commands:

|[&lt;!-- language="C" --&gt;
  gdk_gl_context_make_current (context);
]|

You can now perform your drawing using OpenGL commands.

You can check which #GdkGLContext is the current one by using
gdk_gl_context_get_current(); you can also unset any #GdkGLContext
that is currently set by calling gdk_gl_context_clear_current().</doc>
      <function name="clear_current" c:identifier="gdk_gl_context_clear_current" version="3.16">
        <doc xml:space="preserve">Clears the current #GdkGLContext.

Any OpenGL call after this function returns will be ignored
until gdk_gl_context_make_current() is called.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </function>
      <function name="get_current" c:identifier="gdk_gl_context_get_current" version="3.16">
        <doc xml:space="preserve">Retrieves the current #GdkGLContext.</doc>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">the current #GdkGLContext, or %NULL</doc>
          <type name="GLContext" c:type="GdkGLContext*"/>
        </return-value>
      </function>
      <method name="get_debug_enabled" c:identifier="gdk_gl_context_get_debug_enabled" version="3.16">
        <doc xml:space="preserve">Retrieves the value set using gdk_gl_context_set_debug_enabled().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if debugging is enabled</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkGLContext</doc>
            <type name="GLContext" c:type="GdkGLContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_display" c:identifier="gdk_gl_context_get_display" glib:get-property="display" version="3.16">
        <doc xml:space="preserve">Retrieves the #GdkDisplay the @context is created for</doc>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">a #GdkDisplay or %NULL</doc>
          <type name="Display" c:type="GdkDisplay*"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkGLContext</doc>
            <type name="GLContext" c:type="GdkGLContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_forward_compatible" c:identifier="gdk_gl_context_get_forward_compatible" version="3.16">
        <doc xml:space="preserve">Retrieves the value set using gdk_gl_context_set_forward_compatible().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the context should be forward compatible</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkGLContext</doc>
            <type name="GLContext" c:type="GdkGLContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_required_version" c:identifier="gdk_gl_context_get_required_version" version="3.16">
        <doc xml:space="preserve">Retrieves the major and minor version requested by calling
gdk_gl_context_set_required_version().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkGLContext</doc>
            <type name="GLContext" c:type="GdkGLContext*"/>
          </instance-parameter>
          <parameter name="major" direction="out" caller-allocates="0" transfer-ownership="full" nullable="1">
            <doc xml:space="preserve">return location for the major version to request</doc>
            <type name="gint" c:type="int*"/>
          </parameter>
          <parameter name="minor" direction="out" caller-allocates="0" transfer-ownership="full" nullable="1">
            <doc xml:space="preserve">return location for the minor version to request</doc>
            <type name="gint" c:type="int*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_shared_context" c:identifier="gdk_gl_context_get_shared_context" glib:get-property="shared-context" version="3.16">
        <doc xml:space="preserve">Retrieves the #GdkGLContext that this @context share data with.</doc>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">a #GdkGLContext or %NULL</doc>
          <type name="GLContext" c:type="GdkGLContext*"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkGLContext</doc>
            <type name="GLContext" c:type="GdkGLContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_use_es" c:identifier="gdk_gl_context_get_use_es" version="3.22">
        <doc xml:space="preserve">Checks whether the @context is using an OpenGL or OpenGL ES profile.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the #GdkGLContext is using an OpenGL ES profile</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkGLContext</doc>
            <type name="GLContext" c:type="GdkGLContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_version" c:identifier="gdk_gl_context_get_version" version="3.16">
        <doc xml:space="preserve">Retrieves the OpenGL version of the @context.

The @context must be realized prior to calling this function.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkGLContext</doc>
            <type name="GLContext" c:type="GdkGLContext*"/>
          </instance-parameter>
          <parameter name="major" direction="out" caller-allocates="0" transfer-ownership="full">
            <doc xml:space="preserve">return location for the major version</doc>
            <type name="gint" c:type="int*"/>
          </parameter>
          <parameter name="minor" direction="out" caller-allocates="0" transfer-ownership="full">
            <doc xml:space="preserve">return location for the minor version</doc>
            <type name="gint" c:type="int*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_window" c:identifier="gdk_gl_context_get_window" glib:get-property="window" version="3.16">
        <doc xml:space="preserve">Retrieves the #GdkWindow used by the @context.</doc>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">a #GdkWindow or %NULL</doc>
          <type name="Window" c:type="GdkWindow*"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkGLContext</doc>
            <type name="GLContext" c:type="GdkGLContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_legacy" c:identifier="gdk_gl_context_is_legacy" version="3.20">
        <doc xml:space="preserve">Whether the #GdkGLContext is in legacy mode or not.

The #GdkGLContext must be realized before calling this function.

When realizing a GL context, GDK will try to use the OpenGL 3.2 core
profile; this profile removes all the OpenGL API that was deprecated
prior to the 3.2 version of the specification. If the realization is
successful, this function will return %FALSE.

If the underlying OpenGL implementation does not support core profiles,
GDK will fall back to a pre-3.2 compatibility profile, and this function
will return %TRUE.

You can use the value returned by this function to decide which kind
of OpenGL API to use, or whether to do extension discovery, or what
kind of shader programs to load.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the GL context is in legacy mode</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkGLContext</doc>
            <type name="GLContext" c:type="GdkGLContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="make_current" c:identifier="gdk_gl_context_make_current" version="3.16">
        <doc xml:space="preserve">Makes the @context the current one.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkGLContext</doc>
            <type name="GLContext" c:type="GdkGLContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="realize" c:identifier="gdk_gl_context_realize" version="3.16" throws="1">
        <doc xml:space="preserve">Realizes the given #GdkGLContext.

It is safe to call this function on a realized #GdkGLContext.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the context is realized</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkGLContext</doc>
            <type name="GLContext" c:type="GdkGLContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_debug_enabled" c:identifier="gdk_gl_context_set_debug_enabled" version="3.16">
        <doc xml:space="preserve">Sets whether the #GdkGLContext should perform extra validations and
run time checking. This is useful during development, but has
additional overhead.

The #GdkGLContext must not be realized or made current prior to
calling this function.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkGLContext</doc>
            <type name="GLContext" c:type="GdkGLContext*"/>
          </instance-parameter>
          <parameter name="enabled" transfer-ownership="none">
            <doc xml:space="preserve">whether to enable debugging in the context</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_forward_compatible" c:identifier="gdk_gl_context_set_forward_compatible" version="3.16">
        <doc xml:space="preserve">Sets whether the #GdkGLContext should be forward compatible.

Forward compatibile contexts must not support OpenGL functionality that
has been marked as deprecated in the requested version; non-forward
compatible contexts, on the other hand, must support both deprecated and
non deprecated functionality.

The #GdkGLContext must not be realized or made current prior to calling
this function.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkGLContext</doc>
            <type name="GLContext" c:type="GdkGLContext*"/>
          </instance-parameter>
          <parameter name="compatible" transfer-ownership="none">
            <doc xml:space="preserve">whether the context should be forward compatible</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_required_version" c:identifier="gdk_gl_context_set_required_version" version="3.16">
        <doc xml:space="preserve">Sets the major and minor version of OpenGL to request.

Setting @major and @minor to zero will use the default values.

The #GdkGLContext must not be realized or made current prior to calling
this function.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkGLContext</doc>
            <type name="GLContext" c:type="GdkGLContext*"/>
          </instance-parameter>
          <parameter name="major" transfer-ownership="none">
            <doc xml:space="preserve">the major version to request</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="minor" transfer-ownership="none">
            <doc xml:space="preserve">the minor version to request</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_use_es" c:identifier="gdk_gl_context_set_use_es" version="3.22">
        <doc xml:space="preserve">Requests that GDK create a OpenGL ES context instead of an OpenGL one,
if the platform and windowing system allows it.

The @context must not have been realized.

By default, GDK will attempt to automatically detect whether the
underlying GL implementation is OpenGL or OpenGL ES once the @context
is realized.

You should check the return value of gdk_gl_context_get_use_es() after
calling gdk_gl_context_realize() to decide whether to use the OpenGL or
OpenGL ES API, extensions, or shaders.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkGLContext:</doc>
            <type name="GLContext" c:type="GdkGLContext*"/>
          </instance-parameter>
          <parameter name="use_es" transfer-ownership="none">
            <doc xml:space="preserve">whether the context should use OpenGL ES instead of OpenGL,
  or -1 to allow auto-detection</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <property name="display" version="3.16" writable="1" construct-only="1" transfer-ownership="none" getter="get_display">
        <doc xml:space="preserve">The #GdkDisplay used to create the #GdkGLContext.</doc>
        <type name="Display"/>
      </property>
      <property name="shared-context" version="3.16" writable="1" construct-only="1" transfer-ownership="none" getter="get_shared_context">
        <doc xml:space="preserve">The #GdkGLContext that this context is sharing data with, or %NULL</doc>
        <type name="GLContext"/>
      </property>
      <property name="window" version="3.16" writable="1" construct-only="1" transfer-ownership="none" getter="get_window">
        <doc xml:space="preserve">The #GdkWindow the gl context is bound to.</doc>
        <type name="Window"/>
      </property>
    </class>
    <enumeration name="GLError" version="3.16" glib:type-name="GdkGLError" glib:get-type="gdk_gl_error_get_type" c:type="GdkGLError" glib:error-domain="gdk-gl-error-quark">
      <doc xml:space="preserve">Error enumeration for #GdkGLContext.</doc>
      <member name="not_available" value="0" c:identifier="GDK_GL_ERROR_NOT_AVAILABLE" glib:nick="not-available" glib:name="GDK_GL_ERROR_NOT_AVAILABLE">
        <doc xml:space="preserve">OpenGL support is not available</doc>
      </member>
      <member name="unsupported_format" value="1" c:identifier="GDK_GL_ERROR_UNSUPPORTED_FORMAT" glib:nick="unsupported-format" glib:name="GDK_GL_ERROR_UNSUPPORTED_FORMAT">
        <doc xml:space="preserve">The requested visual format is not supported</doc>
      </member>
      <member name="unsupported_profile" value="2" c:identifier="GDK_GL_ERROR_UNSUPPORTED_PROFILE" glib:nick="unsupported-profile" glib:name="GDK_GL_ERROR_UNSUPPORTED_PROFILE">
        <doc xml:space="preserve">The requested profile is not supported</doc>
      </member>
      <function name="quark" c:identifier="gdk_gl_error_quark">
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
    </enumeration>
    <function-macro name="GL_CONTEXT" c:identifier="GDK_GL_CONTEXT" introspectable="0">
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <record name="Geometry" c:type="GdkGeometry">
      <doc xml:space="preserve">The #GdkGeometry struct gives the window manager information about
a window&#x2019;s geometry constraints. Normally you would set these on
the GTK+ level using gtk_window_set_geometry_hints(). #GtkWindow
then sets the hints on the #GdkWindow it creates.

gdk_window_set_geometry_hints() expects the hints to be fully valid already
and simply passes them to the window manager; in contrast,
gtk_window_set_geometry_hints() performs some interpretation. For example,
#GtkWindow will apply the hints to the geometry widget instead of the
toplevel window, if you set a geometry widget. Also, the
@min_width/@min_height/@max_width/@max_height fields may be set to -1, and
#GtkWindow will substitute the size request of the window or geometry widget.
If the minimum size hint is not provided, #GtkWindow will use its requisition
as the minimum size. If the minimum size is provided and a geometry widget is
set, #GtkWindow will take the minimum size as the minimum size of the
geometry widget rather than the entire window. The base size is treated
similarly.

The canonical use-case for gtk_window_set_geometry_hints() is to get a
terminal widget to resize properly. Here, the terminal text area should be
the geometry widget; #GtkWindow will then automatically set the base size to
the size of other widgets in the terminal window, such as the menubar and
scrollbar. Then, the @width_inc and @height_inc fields should be set to the
size of one character in the terminal. Finally, the base size should be set
to the size of one character. The net effect is that the minimum size of the
terminal will have a 1x1 character terminal area, and only terminal sizes on
the &#x201C;character grid&#x201D; will be allowed.

Here&#x2019;s an example of how the terminal example would be implemented, assuming
a terminal area widget called &#x201C;terminal&#x201D; and a toplevel window &#x201C;toplevel&#x201D;:

|[&lt;!-- language="C" --&gt;
	GdkGeometry hints;

	hints.base_width = terminal-&gt;char_width;
        hints.base_height = terminal-&gt;char_height;
        hints.min_width = terminal-&gt;char_width;
        hints.min_height = terminal-&gt;char_height;
        hints.width_inc = terminal-&gt;char_width;
        hints.height_inc = terminal-&gt;char_height;

 gtk_window_set_geometry_hints (GTK_WINDOW (toplevel),
                                GTK_WIDGET (terminal),
                                &amp;hints,
                                GDK_HINT_RESIZE_INC |
                                GDK_HINT_MIN_SIZE |
                                GDK_HINT_BASE_SIZE);
]|

The other useful fields are the @min_aspect and @max_aspect fields; these
contain a width/height ratio as a floating point number. If a geometry widget
is set, the aspect applies to the geometry widget rather than the entire
window. The most common use of these hints is probably to set @min_aspect and
@max_aspect to the same value, thus forcing the window to keep a constant
aspect ratio.</doc>
      <field name="min_width" writable="1">
        <doc xml:space="preserve">minimum width of window (or -1 to use requisition, with
 #GtkWindow only)</doc>
        <type name="gint" c:type="gint"/>
      </field>
      <field name="min_height" writable="1">
        <doc xml:space="preserve">minimum height of window (or -1 to use requisition, with
 #GtkWindow only)</doc>
        <type name="gint" c:type="gint"/>
      </field>
      <field name="max_width" writable="1">
        <doc xml:space="preserve">maximum width of window (or -1 to use requisition, with
 #GtkWindow only)</doc>
        <type name="gint" c:type="gint"/>
      </field>
      <field name="max_height" writable="1">
        <doc xml:space="preserve">maximum height of window (or -1 to use requisition, with
 #GtkWindow only)</doc>
        <type name="gint" c:type="gint"/>
      </field>
      <field name="base_width" writable="1">
        <doc xml:space="preserve">allowed window widths are @base_width + @width_inc * N where N
 is any integer (-1 allowed with #GtkWindow)</doc>
        <type name="gint" c:type="gint"/>
      </field>
      <field name="base_height" writable="1">
        <doc xml:space="preserve">allowed window widths are @base_height + @height_inc * N where
 N is any integer (-1 allowed with #GtkWindow)</doc>
        <type name="gint" c:type="gint"/>
      </field>
      <field name="width_inc" writable="1">
        <doc xml:space="preserve">width resize increment</doc>
        <type name="gint" c:type="gint"/>
      </field>
      <field name="height_inc" writable="1">
        <doc xml:space="preserve">height resize increment</doc>
        <type name="gint" c:type="gint"/>
      </field>
      <field name="min_aspect" writable="1">
        <doc xml:space="preserve">minimum width/height ratio</doc>
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="max_aspect" writable="1">
        <doc xml:space="preserve">maximum width/height ratio</doc>
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="win_gravity" writable="1">
        <doc xml:space="preserve">window gravity, see gtk_window_set_gravity()</doc>
        <type name="Gravity" c:type="GdkGravity"/>
      </field>
    </record>
    <enumeration name="GrabOwnership" glib:type-name="GdkGrabOwnership" glib:get-type="gdk_grab_ownership_get_type" c:type="GdkGrabOwnership">
      <doc xml:space="preserve">Defines how device grabs interact with other devices.</doc>
      <member name="none" value="0" c:identifier="GDK_OWNERSHIP_NONE" glib:nick="none" glib:name="GDK_OWNERSHIP_NONE">
        <doc xml:space="preserve">All other devices&#x2019; events are allowed.</doc>
      </member>
      <member name="window" value="1" c:identifier="GDK_OWNERSHIP_WINDOW" glib:nick="window" glib:name="GDK_OWNERSHIP_WINDOW">
        <doc xml:space="preserve">Other devices&#x2019; events are blocked for the grab window.</doc>
      </member>
      <member name="application" value="2" c:identifier="GDK_OWNERSHIP_APPLICATION" glib:nick="application" glib:name="GDK_OWNERSHIP_APPLICATION">
        <doc xml:space="preserve">Other devices&#x2019; events are blocked for the whole application.</doc>
      </member>
    </enumeration>
    <enumeration name="GrabStatus" glib:type-name="GdkGrabStatus" glib:get-type="gdk_grab_status_get_type" c:type="GdkGrabStatus">
      <doc xml:space="preserve">Returned by gdk_device_grab(), gdk_pointer_grab() and gdk_keyboard_grab() to
indicate success or the reason for the failure of the grab attempt.</doc>
      <member name="success" value="0" c:identifier="GDK_GRAB_SUCCESS" glib:nick="success" glib:name="GDK_GRAB_SUCCESS">
        <doc xml:space="preserve">the resource was successfully grabbed.</doc>
      </member>
      <member name="already_grabbed" value="1" c:identifier="GDK_GRAB_ALREADY_GRABBED" glib:nick="already-grabbed" glib:name="GDK_GRAB_ALREADY_GRABBED">
        <doc xml:space="preserve">the resource is actively grabbed by another client.</doc>
      </member>
      <member name="invalid_time" value="2" c:identifier="GDK_GRAB_INVALID_TIME" glib:nick="invalid-time" glib:name="GDK_GRAB_INVALID_TIME">
        <doc xml:space="preserve">the resource was grabbed more recently than the
 specified time.</doc>
      </member>
      <member name="not_viewable" value="3" c:identifier="GDK_GRAB_NOT_VIEWABLE" glib:nick="not-viewable" glib:name="GDK_GRAB_NOT_VIEWABLE">
        <doc xml:space="preserve">the grab window or the @confine_to window are not
 viewable.</doc>
      </member>
      <member name="frozen" value="4" c:identifier="GDK_GRAB_FROZEN" glib:nick="frozen" glib:name="GDK_GRAB_FROZEN">
        <doc xml:space="preserve">the resource is frozen by an active grab of another client.</doc>
      </member>
      <member name="failed" value="5" c:identifier="GDK_GRAB_FAILED" glib:nick="failed" glib:name="GDK_GRAB_FAILED">
        <doc xml:space="preserve">the grab failed for some other reason. Since 3.16</doc>
      </member>
    </enumeration>
    <enumeration name="Gravity" glib:type-name="GdkGravity" glib:get-type="gdk_gravity_get_type" c:type="GdkGravity">
      <doc xml:space="preserve">Defines the reference point of a window and the meaning of coordinates
passed to gtk_window_move(). See gtk_window_move() and the "implementation
notes" section of the
[Extended Window Manager Hints](http://www.freedesktop.org/Standards/wm-spec)
specification for more details.</doc>
      <member name="north_west" value="1" c:identifier="GDK_GRAVITY_NORTH_WEST" glib:nick="north-west" glib:name="GDK_GRAVITY_NORTH_WEST">
        <doc xml:space="preserve">the reference point is at the top left corner.</doc>
      </member>
      <member name="north" value="2" c:identifier="GDK_GRAVITY_NORTH" glib:nick="north" glib:name="GDK_GRAVITY_NORTH">
        <doc xml:space="preserve">the reference point is in the middle of the top edge.</doc>
      </member>
      <member name="north_east" value="3" c:identifier="GDK_GRAVITY_NORTH_EAST" glib:nick="north-east" glib:name="GDK_GRAVITY_NORTH_EAST">
        <doc xml:space="preserve">the reference point is at the top right corner.</doc>
      </member>
      <member name="west" value="4" c:identifier="GDK_GRAVITY_WEST" glib:nick="west" glib:name="GDK_GRAVITY_WEST">
        <doc xml:space="preserve">the reference point is at the middle of the left edge.</doc>
      </member>
      <member name="center" value="5" c:identifier="GDK_GRAVITY_CENTER" glib:nick="center" glib:name="GDK_GRAVITY_CENTER">
        <doc xml:space="preserve">the reference point is at the center of the window.</doc>
      </member>
      <member name="east" value="6" c:identifier="GDK_GRAVITY_EAST" glib:nick="east" glib:name="GDK_GRAVITY_EAST">
        <doc xml:space="preserve">the reference point is at the middle of the right edge.</doc>
      </member>
      <member name="south_west" value="7" c:identifier="GDK_GRAVITY_SOUTH_WEST" glib:nick="south-west" glib:name="GDK_GRAVITY_SOUTH_WEST">
        <doc xml:space="preserve">the reference point is at the lower left corner.</doc>
      </member>
      <member name="south" value="8" c:identifier="GDK_GRAVITY_SOUTH" glib:nick="south" glib:name="GDK_GRAVITY_SOUTH">
        <doc xml:space="preserve">the reference point is at the middle of the lower edge.</doc>
      </member>
      <member name="south_east" value="9" c:identifier="GDK_GRAVITY_SOUTH_EAST" glib:nick="south-east" glib:name="GDK_GRAVITY_SOUTH_EAST">
        <doc xml:space="preserve">the reference point is at the lower right corner.</doc>
      </member>
      <member name="static" value="10" c:identifier="GDK_GRAVITY_STATIC" glib:nick="static" glib:name="GDK_GRAVITY_STATIC">
        <doc xml:space="preserve">the reference point is at the top left corner of the
 window itself, ignoring window manager decorations.</doc>
      </member>
    </enumeration>
    <function-macro name="IS_APP_LAUNCH_CONTEXT" c:identifier="GDK_IS_APP_LAUNCH_CONTEXT" introspectable="0">
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_CURSOR" c:identifier="GDK_IS_CURSOR" introspectable="0">
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_DEVICE" c:identifier="GDK_IS_DEVICE" introspectable="0">
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_DEVICE_MANAGER" c:identifier="GDK_IS_DEVICE_MANAGER" introspectable="0">
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_DEVICE_PAD" c:identifier="GDK_IS_DEVICE_PAD" introspectable="0">
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_DEVICE_TOOL" c:identifier="GDK_IS_DEVICE_TOOL" introspectable="0">
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_DISPLAY" c:identifier="GDK_IS_DISPLAY" introspectable="0">
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_DISPLAY_MANAGER" c:identifier="GDK_IS_DISPLAY_MANAGER" introspectable="0">
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_DRAG_CONTEXT" c:identifier="GDK_IS_DRAG_CONTEXT" introspectable="0">
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_DRAWING_CONTEXT" c:identifier="GDK_IS_DRAWING_CONTEXT" introspectable="0">
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_FRAME_CLOCK" c:identifier="GDK_IS_FRAME_CLOCK" introspectable="0">
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_FRAME_CLOCK_CLASS" c:identifier="GDK_IS_FRAME_CLOCK_CLASS" introspectable="0">
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_GL_CONTEXT" c:identifier="GDK_IS_GL_CONTEXT" introspectable="0">
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_KEYMAP" c:identifier="GDK_IS_KEYMAP" introspectable="0">
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MONITOR" c:identifier="GDK_IS_MONITOR" introspectable="0">
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SCREEN" c:identifier="GDK_IS_SCREEN" introspectable="0">
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SEAT" c:identifier="GDK_IS_SEAT" introspectable="0">
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_VISUAL" c:identifier="GDK_IS_VISUAL" introspectable="0">
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_WINDOW" c:identifier="GDK_IS_WINDOW" introspectable="0">
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_WINDOW_CLASS" c:identifier="GDK_IS_WINDOW_CLASS" introspectable="0">
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <enumeration name="InputMode" glib:type-name="GdkInputMode" glib:get-type="gdk_input_mode_get_type" c:type="GdkInputMode">
      <doc xml:space="preserve">An enumeration that describes the mode of an input device.</doc>
      <member name="disabled" value="0" c:identifier="GDK_MODE_DISABLED" glib:nick="disabled" glib:name="GDK_MODE_DISABLED">
        <doc xml:space="preserve">the device is disabled and will not report any events.</doc>
      </member>
      <member name="screen" value="1" c:identifier="GDK_MODE_SCREEN" glib:nick="screen" glib:name="GDK_MODE_SCREEN">
        <doc xml:space="preserve">the device is enabled. The device&#x2019;s coordinate space
                  maps to the entire screen.</doc>
      </member>
      <member name="window" value="2" c:identifier="GDK_MODE_WINDOW" glib:nick="window" glib:name="GDK_MODE_WINDOW">
        <doc xml:space="preserve">the device is enabled. The device&#x2019;s coordinate space
                  is mapped to a single window. The manner in which this window
                  is chosen is undefined, but it will typically be the same
                  way in which the focus window for key events is determined.</doc>
      </member>
    </enumeration>
    <enumeration name="InputSource" glib:type-name="GdkInputSource" glib:get-type="gdk_input_source_get_type" c:type="GdkInputSource">
      <doc xml:space="preserve">An enumeration describing the type of an input device in general terms.</doc>
      <member name="mouse" value="0" c:identifier="GDK_SOURCE_MOUSE" glib:nick="mouse" glib:name="GDK_SOURCE_MOUSE">
        <doc xml:space="preserve">the device is a mouse. (This will be reported for the core
                   pointer, even if it is something else, such as a trackball.)</doc>
      </member>
      <member name="pen" value="1" c:identifier="GDK_SOURCE_PEN" glib:nick="pen" glib:name="GDK_SOURCE_PEN">
        <doc xml:space="preserve">the device is a stylus of a graphics tablet or similar device.</doc>
      </member>
      <member name="eraser" value="2" c:identifier="GDK_SOURCE_ERASER" glib:nick="eraser" glib:name="GDK_SOURCE_ERASER">
        <doc xml:space="preserve">the device is an eraser. Typically, this would be the other end
                    of a stylus on a graphics tablet.</doc>
      </member>
      <member name="cursor" value="3" c:identifier="GDK_SOURCE_CURSOR" glib:nick="cursor" glib:name="GDK_SOURCE_CURSOR">
        <doc xml:space="preserve">the device is a graphics tablet &#x201C;puck&#x201D; or similar device.</doc>
      </member>
      <member name="keyboard" value="4" c:identifier="GDK_SOURCE_KEYBOARD" glib:nick="keyboard" glib:name="GDK_SOURCE_KEYBOARD">
        <doc xml:space="preserve">the device is a keyboard.</doc>
      </member>
      <member name="touchscreen" value="5" c:identifier="GDK_SOURCE_TOUCHSCREEN" glib:nick="touchscreen" glib:name="GDK_SOURCE_TOUCHSCREEN">
        <doc xml:space="preserve">the device is a direct-input touch device, such
    as a touchscreen or tablet. This device type has been added in 3.4.</doc>
      </member>
      <member name="touchpad" value="6" c:identifier="GDK_SOURCE_TOUCHPAD" glib:nick="touchpad" glib:name="GDK_SOURCE_TOUCHPAD">
        <doc xml:space="preserve">the device is an indirect touch device, such
    as a touchpad. This device type has been added in 3.4.</doc>
      </member>
      <member name="trackpoint" value="7" c:identifier="GDK_SOURCE_TRACKPOINT" glib:nick="trackpoint" glib:name="GDK_SOURCE_TRACKPOINT">
        <doc xml:space="preserve">the device is a trackpoint. This device type has been
    added in 3.22</doc>
      </member>
      <member name="tablet_pad" value="8" c:identifier="GDK_SOURCE_TABLET_PAD" glib:nick="tablet-pad" glib:name="GDK_SOURCE_TABLET_PAD">
        <doc xml:space="preserve">the device is a "pad", a collection of buttons,
    rings and strips found in drawing tablets. This device type has been
    added in 3.22.</doc>
      </member>
    </enumeration>
    <function-macro name="KEYMAP" c:identifier="GDK_KEYMAP" introspectable="0">
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <constant name="KEY_0" value="48" c:type="GDK_KEY_0">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_1" value="49" c:type="GDK_KEY_1">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_2" value="50" c:type="GDK_KEY_2">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_3" value="51" c:type="GDK_KEY_3">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_3270_AltCursor" value="64784" c:type="GDK_KEY_3270_AltCursor">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_3270_Attn" value="64782" c:type="GDK_KEY_3270_Attn">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_3270_BackTab" value="64773" c:type="GDK_KEY_3270_BackTab">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_3270_ChangeScreen" value="64793" c:type="GDK_KEY_3270_ChangeScreen">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_3270_Copy" value="64789" c:type="GDK_KEY_3270_Copy">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_3270_CursorBlink" value="64783" c:type="GDK_KEY_3270_CursorBlink">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_3270_CursorSelect" value="64796" c:type="GDK_KEY_3270_CursorSelect">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_3270_DeleteWord" value="64794" c:type="GDK_KEY_3270_DeleteWord">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_3270_Duplicate" value="64769" c:type="GDK_KEY_3270_Duplicate">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_3270_Enter" value="64798" c:type="GDK_KEY_3270_Enter">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_3270_EraseEOF" value="64774" c:type="GDK_KEY_3270_EraseEOF">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_3270_EraseInput" value="64775" c:type="GDK_KEY_3270_EraseInput">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_3270_ExSelect" value="64795" c:type="GDK_KEY_3270_ExSelect">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_3270_FieldMark" value="64770" c:type="GDK_KEY_3270_FieldMark">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_3270_Ident" value="64787" c:type="GDK_KEY_3270_Ident">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_3270_Jump" value="64786" c:type="GDK_KEY_3270_Jump">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_3270_KeyClick" value="64785" c:type="GDK_KEY_3270_KeyClick">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_3270_Left2" value="64772" c:type="GDK_KEY_3270_Left2">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_3270_PA1" value="64778" c:type="GDK_KEY_3270_PA1">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_3270_PA2" value="64779" c:type="GDK_KEY_3270_PA2">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_3270_PA3" value="64780" c:type="GDK_KEY_3270_PA3">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_3270_Play" value="64790" c:type="GDK_KEY_3270_Play">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_3270_PrintScreen" value="64797" c:type="GDK_KEY_3270_PrintScreen">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_3270_Quit" value="64777" c:type="GDK_KEY_3270_Quit">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_3270_Record" value="64792" c:type="GDK_KEY_3270_Record">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_3270_Reset" value="64776" c:type="GDK_KEY_3270_Reset">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_3270_Right2" value="64771" c:type="GDK_KEY_3270_Right2">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_3270_Rule" value="64788" c:type="GDK_KEY_3270_Rule">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_3270_Setup" value="64791" c:type="GDK_KEY_3270_Setup">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_3270_Test" value="64781" c:type="GDK_KEY_3270_Test">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_4" value="52" c:type="GDK_KEY_4">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_5" value="53" c:type="GDK_KEY_5">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_6" value="54" c:type="GDK_KEY_6">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_7" value="55" c:type="GDK_KEY_7">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_8" value="56" c:type="GDK_KEY_8">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_9" value="57" c:type="GDK_KEY_9">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_A" value="65" c:type="GDK_KEY_A">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_AE" value="198" c:type="GDK_KEY_AE">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Aacute" value="193" c:type="GDK_KEY_Aacute">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Abelowdot" value="16785056" c:type="GDK_KEY_Abelowdot">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Abreve" value="451" c:type="GDK_KEY_Abreve">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Abreveacute" value="16785070" c:type="GDK_KEY_Abreveacute">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Abrevebelowdot" value="16785078" c:type="GDK_KEY_Abrevebelowdot">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Abrevegrave" value="16785072" c:type="GDK_KEY_Abrevegrave">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Abrevehook" value="16785074" c:type="GDK_KEY_Abrevehook">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Abrevetilde" value="16785076" c:type="GDK_KEY_Abrevetilde">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_AccessX_Enable" value="65136" c:type="GDK_KEY_AccessX_Enable">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_AccessX_Feedback_Enable" value="65137" c:type="GDK_KEY_AccessX_Feedback_Enable">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Acircumflex" value="194" c:type="GDK_KEY_Acircumflex">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Acircumflexacute" value="16785060" c:type="GDK_KEY_Acircumflexacute">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Acircumflexbelowdot" value="16785068" c:type="GDK_KEY_Acircumflexbelowdot">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Acircumflexgrave" value="16785062" c:type="GDK_KEY_Acircumflexgrave">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Acircumflexhook" value="16785064" c:type="GDK_KEY_Acircumflexhook">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Acircumflextilde" value="16785066" c:type="GDK_KEY_Acircumflextilde">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_AddFavorite" value="269025081" c:type="GDK_KEY_AddFavorite">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Adiaeresis" value="196" c:type="GDK_KEY_Adiaeresis">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Agrave" value="192" c:type="GDK_KEY_Agrave">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ahook" value="16785058" c:type="GDK_KEY_Ahook">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Alt_L" value="65513" c:type="GDK_KEY_Alt_L">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Alt_R" value="65514" c:type="GDK_KEY_Alt_R">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Amacron" value="960" c:type="GDK_KEY_Amacron">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Aogonek" value="417" c:type="GDK_KEY_Aogonek">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ApplicationLeft" value="269025104" c:type="GDK_KEY_ApplicationLeft">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ApplicationRight" value="269025105" c:type="GDK_KEY_ApplicationRight">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_0" value="16778848" c:type="GDK_KEY_Arabic_0">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_1" value="16778849" c:type="GDK_KEY_Arabic_1">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_2" value="16778850" c:type="GDK_KEY_Arabic_2">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_3" value="16778851" c:type="GDK_KEY_Arabic_3">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_4" value="16778852" c:type="GDK_KEY_Arabic_4">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_5" value="16778853" c:type="GDK_KEY_Arabic_5">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_6" value="16778854" c:type="GDK_KEY_Arabic_6">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_7" value="16778855" c:type="GDK_KEY_Arabic_7">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_8" value="16778856" c:type="GDK_KEY_Arabic_8">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_9" value="16778857" c:type="GDK_KEY_Arabic_9">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_ain" value="1497" c:type="GDK_KEY_Arabic_ain">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_alef" value="1479" c:type="GDK_KEY_Arabic_alef">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_alefmaksura" value="1513" c:type="GDK_KEY_Arabic_alefmaksura">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_beh" value="1480" c:type="GDK_KEY_Arabic_beh">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_comma" value="1452" c:type="GDK_KEY_Arabic_comma">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_dad" value="1494" c:type="GDK_KEY_Arabic_dad">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_dal" value="1487" c:type="GDK_KEY_Arabic_dal">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_damma" value="1519" c:type="GDK_KEY_Arabic_damma">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_dammatan" value="1516" c:type="GDK_KEY_Arabic_dammatan">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_ddal" value="16778888" c:type="GDK_KEY_Arabic_ddal">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_farsi_yeh" value="16778956" c:type="GDK_KEY_Arabic_farsi_yeh">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_fatha" value="1518" c:type="GDK_KEY_Arabic_fatha">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_fathatan" value="1515" c:type="GDK_KEY_Arabic_fathatan">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_feh" value="1505" c:type="GDK_KEY_Arabic_feh">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_fullstop" value="16778964" c:type="GDK_KEY_Arabic_fullstop">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_gaf" value="16778927" c:type="GDK_KEY_Arabic_gaf">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_ghain" value="1498" c:type="GDK_KEY_Arabic_ghain">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_ha" value="1511" c:type="GDK_KEY_Arabic_ha">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_hah" value="1485" c:type="GDK_KEY_Arabic_hah">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_hamza" value="1473" c:type="GDK_KEY_Arabic_hamza">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_hamza_above" value="16778836" c:type="GDK_KEY_Arabic_hamza_above">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_hamza_below" value="16778837" c:type="GDK_KEY_Arabic_hamza_below">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_hamzaonalef" value="1475" c:type="GDK_KEY_Arabic_hamzaonalef">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_hamzaonwaw" value="1476" c:type="GDK_KEY_Arabic_hamzaonwaw">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_hamzaonyeh" value="1478" c:type="GDK_KEY_Arabic_hamzaonyeh">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_hamzaunderalef" value="1477" c:type="GDK_KEY_Arabic_hamzaunderalef">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_heh" value="1511" c:type="GDK_KEY_Arabic_heh">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_heh_doachashmee" value="16778942" c:type="GDK_KEY_Arabic_heh_doachashmee">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_heh_goal" value="16778945" c:type="GDK_KEY_Arabic_heh_goal">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_jeem" value="1484" c:type="GDK_KEY_Arabic_jeem">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_jeh" value="16778904" c:type="GDK_KEY_Arabic_jeh">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_kaf" value="1507" c:type="GDK_KEY_Arabic_kaf">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_kasra" value="1520" c:type="GDK_KEY_Arabic_kasra">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_kasratan" value="1517" c:type="GDK_KEY_Arabic_kasratan">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_keheh" value="16778921" c:type="GDK_KEY_Arabic_keheh">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_khah" value="1486" c:type="GDK_KEY_Arabic_khah">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_lam" value="1508" c:type="GDK_KEY_Arabic_lam">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_madda_above" value="16778835" c:type="GDK_KEY_Arabic_madda_above">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_maddaonalef" value="1474" c:type="GDK_KEY_Arabic_maddaonalef">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_meem" value="1509" c:type="GDK_KEY_Arabic_meem">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_noon" value="1510" c:type="GDK_KEY_Arabic_noon">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_noon_ghunna" value="16778938" c:type="GDK_KEY_Arabic_noon_ghunna">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_peh" value="16778878" c:type="GDK_KEY_Arabic_peh">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_percent" value="16778858" c:type="GDK_KEY_Arabic_percent">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_qaf" value="1506" c:type="GDK_KEY_Arabic_qaf">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_question_mark" value="1471" c:type="GDK_KEY_Arabic_question_mark">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_ra" value="1489" c:type="GDK_KEY_Arabic_ra">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_rreh" value="16778897" c:type="GDK_KEY_Arabic_rreh">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_sad" value="1493" c:type="GDK_KEY_Arabic_sad">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_seen" value="1491" c:type="GDK_KEY_Arabic_seen">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_semicolon" value="1467" c:type="GDK_KEY_Arabic_semicolon">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_shadda" value="1521" c:type="GDK_KEY_Arabic_shadda">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_sheen" value="1492" c:type="GDK_KEY_Arabic_sheen">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_sukun" value="1522" c:type="GDK_KEY_Arabic_sukun">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_superscript_alef" value="16778864" c:type="GDK_KEY_Arabic_superscript_alef">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_switch" value="65406" c:type="GDK_KEY_Arabic_switch">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_tah" value="1495" c:type="GDK_KEY_Arabic_tah">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_tatweel" value="1504" c:type="GDK_KEY_Arabic_tatweel">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_tcheh" value="16778886" c:type="GDK_KEY_Arabic_tcheh">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_teh" value="1482" c:type="GDK_KEY_Arabic_teh">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_tehmarbuta" value="1481" c:type="GDK_KEY_Arabic_tehmarbuta">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_thal" value="1488" c:type="GDK_KEY_Arabic_thal">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_theh" value="1483" c:type="GDK_KEY_Arabic_theh">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_tteh" value="16778873" c:type="GDK_KEY_Arabic_tteh">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_veh" value="16778916" c:type="GDK_KEY_Arabic_veh">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_waw" value="1512" c:type="GDK_KEY_Arabic_waw">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_yeh" value="1514" c:type="GDK_KEY_Arabic_yeh">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_yeh_baree" value="16778962" c:type="GDK_KEY_Arabic_yeh_baree">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_zah" value="1496" c:type="GDK_KEY_Arabic_zah">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_zain" value="1490" c:type="GDK_KEY_Arabic_zain">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Aring" value="197" c:type="GDK_KEY_Aring">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_AT" value="16778552" c:type="GDK_KEY_Armenian_AT">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_AYB" value="16778545" c:type="GDK_KEY_Armenian_AYB">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_BEN" value="16778546" c:type="GDK_KEY_Armenian_BEN">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_CHA" value="16778569" c:type="GDK_KEY_Armenian_CHA">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_DA" value="16778548" c:type="GDK_KEY_Armenian_DA">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_DZA" value="16778561" c:type="GDK_KEY_Armenian_DZA">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_E" value="16778551" c:type="GDK_KEY_Armenian_E">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_FE" value="16778582" c:type="GDK_KEY_Armenian_FE">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_GHAT" value="16778562" c:type="GDK_KEY_Armenian_GHAT">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_GIM" value="16778547" c:type="GDK_KEY_Armenian_GIM">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_HI" value="16778565" c:type="GDK_KEY_Armenian_HI">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_HO" value="16778560" c:type="GDK_KEY_Armenian_HO">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_INI" value="16778555" c:type="GDK_KEY_Armenian_INI">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_JE" value="16778571" c:type="GDK_KEY_Armenian_JE">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_KE" value="16778580" c:type="GDK_KEY_Armenian_KE">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_KEN" value="16778559" c:type="GDK_KEY_Armenian_KEN">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_KHE" value="16778557" c:type="GDK_KEY_Armenian_KHE">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_LYUN" value="16778556" c:type="GDK_KEY_Armenian_LYUN">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_MEN" value="16778564" c:type="GDK_KEY_Armenian_MEN">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_NU" value="16778566" c:type="GDK_KEY_Armenian_NU">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_O" value="16778581" c:type="GDK_KEY_Armenian_O">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_PE" value="16778570" c:type="GDK_KEY_Armenian_PE">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_PYUR" value="16778579" c:type="GDK_KEY_Armenian_PYUR">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_RA" value="16778572" c:type="GDK_KEY_Armenian_RA">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_RE" value="16778576" c:type="GDK_KEY_Armenian_RE">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_SE" value="16778573" c:type="GDK_KEY_Armenian_SE">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_SHA" value="16778567" c:type="GDK_KEY_Armenian_SHA">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_TCHE" value="16778563" c:type="GDK_KEY_Armenian_TCHE">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_TO" value="16778553" c:type="GDK_KEY_Armenian_TO">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_TSA" value="16778558" c:type="GDK_KEY_Armenian_TSA">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_TSO" value="16778577" c:type="GDK_KEY_Armenian_TSO">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_TYUN" value="16778575" c:type="GDK_KEY_Armenian_TYUN">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_VEV" value="16778574" c:type="GDK_KEY_Armenian_VEV">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_VO" value="16778568" c:type="GDK_KEY_Armenian_VO">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_VYUN" value="16778578" c:type="GDK_KEY_Armenian_VYUN">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_YECH" value="16778549" c:type="GDK_KEY_Armenian_YECH">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_ZA" value="16778550" c:type="GDK_KEY_Armenian_ZA">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_ZHE" value="16778554" c:type="GDK_KEY_Armenian_ZHE">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_accent" value="16778587" c:type="GDK_KEY_Armenian_accent">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_amanak" value="16778588" c:type="GDK_KEY_Armenian_amanak">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_apostrophe" value="16778586" c:type="GDK_KEY_Armenian_apostrophe">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_at" value="16778600" c:type="GDK_KEY_Armenian_at">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_ayb" value="16778593" c:type="GDK_KEY_Armenian_ayb">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_ben" value="16778594" c:type="GDK_KEY_Armenian_ben">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_but" value="16778589" c:type="GDK_KEY_Armenian_but">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_cha" value="16778617" c:type="GDK_KEY_Armenian_cha">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_da" value="16778596" c:type="GDK_KEY_Armenian_da">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_dza" value="16778609" c:type="GDK_KEY_Armenian_dza">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_e" value="16778599" c:type="GDK_KEY_Armenian_e">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_exclam" value="16778588" c:type="GDK_KEY_Armenian_exclam">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_fe" value="16778630" c:type="GDK_KEY_Armenian_fe">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_full_stop" value="16778633" c:type="GDK_KEY_Armenian_full_stop">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_ghat" value="16778610" c:type="GDK_KEY_Armenian_ghat">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_gim" value="16778595" c:type="GDK_KEY_Armenian_gim">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_hi" value="16778613" c:type="GDK_KEY_Armenian_hi">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_ho" value="16778608" c:type="GDK_KEY_Armenian_ho">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_hyphen" value="16778634" c:type="GDK_KEY_Armenian_hyphen">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_ini" value="16778603" c:type="GDK_KEY_Armenian_ini">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_je" value="16778619" c:type="GDK_KEY_Armenian_je">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_ke" value="16778628" c:type="GDK_KEY_Armenian_ke">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_ken" value="16778607" c:type="GDK_KEY_Armenian_ken">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_khe" value="16778605" c:type="GDK_KEY_Armenian_khe">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_ligature_ew" value="16778631" c:type="GDK_KEY_Armenian_ligature_ew">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_lyun" value="16778604" c:type="GDK_KEY_Armenian_lyun">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_men" value="16778612" c:type="GDK_KEY_Armenian_men">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_nu" value="16778614" c:type="GDK_KEY_Armenian_nu">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_o" value="16778629" c:type="GDK_KEY_Armenian_o">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_paruyk" value="16778590" c:type="GDK_KEY_Armenian_paruyk">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_pe" value="16778618" c:type="GDK_KEY_Armenian_pe">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_pyur" value="16778627" c:type="GDK_KEY_Armenian_pyur">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_question" value="16778590" c:type="GDK_KEY_Armenian_question">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_ra" value="16778620" c:type="GDK_KEY_Armenian_ra">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_re" value="16778624" c:type="GDK_KEY_Armenian_re">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_se" value="16778621" c:type="GDK_KEY_Armenian_se">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_separation_mark" value="16778589" c:type="GDK_KEY_Armenian_separation_mark">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_sha" value="16778615" c:type="GDK_KEY_Armenian_sha">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_shesht" value="16778587" c:type="GDK_KEY_Armenian_shesht">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_tche" value="16778611" c:type="GDK_KEY_Armenian_tche">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_to" value="16778601" c:type="GDK_KEY_Armenian_to">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_tsa" value="16778606" c:type="GDK_KEY_Armenian_tsa">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_tso" value="16778625" c:type="GDK_KEY_Armenian_tso">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_tyun" value="16778623" c:type="GDK_KEY_Armenian_tyun">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_verjaket" value="16778633" c:type="GDK_KEY_Armenian_verjaket">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_vev" value="16778622" c:type="GDK_KEY_Armenian_vev">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_vo" value="16778616" c:type="GDK_KEY_Armenian_vo">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_vyun" value="16778626" c:type="GDK_KEY_Armenian_vyun">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_yech" value="16778597" c:type="GDK_KEY_Armenian_yech">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_yentamna" value="16778634" c:type="GDK_KEY_Armenian_yentamna">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_za" value="16778598" c:type="GDK_KEY_Armenian_za">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_zhe" value="16778602" c:type="GDK_KEY_Armenian_zhe">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Atilde" value="195" c:type="GDK_KEY_Atilde">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_AudibleBell_Enable" value="65146" c:type="GDK_KEY_AudibleBell_Enable">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_AudioCycleTrack" value="269025179" c:type="GDK_KEY_AudioCycleTrack">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_AudioForward" value="269025175" c:type="GDK_KEY_AudioForward">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_AudioLowerVolume" value="269025041" c:type="GDK_KEY_AudioLowerVolume">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_AudioMedia" value="269025074" c:type="GDK_KEY_AudioMedia">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_AudioMicMute" value="269025202" c:type="GDK_KEY_AudioMicMute">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_AudioMute" value="269025042" c:type="GDK_KEY_AudioMute">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_AudioNext" value="269025047" c:type="GDK_KEY_AudioNext">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_AudioPause" value="269025073" c:type="GDK_KEY_AudioPause">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_AudioPlay" value="269025044" c:type="GDK_KEY_AudioPlay">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_AudioPreset" value="269025206" c:type="GDK_KEY_AudioPreset">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_AudioPrev" value="269025046" c:type="GDK_KEY_AudioPrev">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_AudioRaiseVolume" value="269025043" c:type="GDK_KEY_AudioRaiseVolume">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_AudioRandomPlay" value="269025177" c:type="GDK_KEY_AudioRandomPlay">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_AudioRecord" value="269025052" c:type="GDK_KEY_AudioRecord">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_AudioRepeat" value="269025176" c:type="GDK_KEY_AudioRepeat">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_AudioRewind" value="269025086" c:type="GDK_KEY_AudioRewind">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_AudioStop" value="269025045" c:type="GDK_KEY_AudioStop">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Away" value="269025165" c:type="GDK_KEY_Away">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_B" value="66" c:type="GDK_KEY_B">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Babovedot" value="16784898" c:type="GDK_KEY_Babovedot">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Back" value="269025062" c:type="GDK_KEY_Back">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_BackForward" value="269025087" c:type="GDK_KEY_BackForward">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_BackSpace" value="65288" c:type="GDK_KEY_BackSpace">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Battery" value="269025171" c:type="GDK_KEY_Battery">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Begin" value="65368" c:type="GDK_KEY_Begin">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Blue" value="269025190" c:type="GDK_KEY_Blue">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Bluetooth" value="269025172" c:type="GDK_KEY_Bluetooth">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Book" value="269025106" c:type="GDK_KEY_Book">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_BounceKeys_Enable" value="65140" c:type="GDK_KEY_BounceKeys_Enable">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Break" value="65387" c:type="GDK_KEY_Break">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_BrightnessAdjust" value="269025083" c:type="GDK_KEY_BrightnessAdjust">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Byelorussian_SHORTU" value="1726" c:type="GDK_KEY_Byelorussian_SHORTU">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Byelorussian_shortu" value="1710" c:type="GDK_KEY_Byelorussian_shortu">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_C" value="67" c:type="GDK_KEY_C">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_CD" value="269025107" c:type="GDK_KEY_CD">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_CH" value="65186" c:type="GDK_KEY_CH">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_C_H" value="65189" c:type="GDK_KEY_C_H">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_C_h" value="65188" c:type="GDK_KEY_C_h">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cabovedot" value="709" c:type="GDK_KEY_Cabovedot">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cacute" value="454" c:type="GDK_KEY_Cacute">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Calculator" value="269025053" c:type="GDK_KEY_Calculator">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Calendar" value="269025056" c:type="GDK_KEY_Calendar">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cancel" value="65385" c:type="GDK_KEY_Cancel">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Caps_Lock" value="65509" c:type="GDK_KEY_Caps_Lock">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ccaron" value="456" c:type="GDK_KEY_Ccaron">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ccedilla" value="199" c:type="GDK_KEY_Ccedilla">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ccircumflex" value="710" c:type="GDK_KEY_Ccircumflex">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ch" value="65185" c:type="GDK_KEY_Ch">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Clear" value="65291" c:type="GDK_KEY_Clear">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ClearGrab" value="269024801" c:type="GDK_KEY_ClearGrab">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Close" value="269025110" c:type="GDK_KEY_Close">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Codeinput" value="65335" c:type="GDK_KEY_Codeinput">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ColonSign" value="16785569" c:type="GDK_KEY_ColonSign">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Community" value="269025085" c:type="GDK_KEY_Community">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ContrastAdjust" value="269025058" c:type="GDK_KEY_ContrastAdjust">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Control_L" value="65507" c:type="GDK_KEY_Control_L">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Control_R" value="65508" c:type="GDK_KEY_Control_R">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Copy" value="269025111" c:type="GDK_KEY_Copy">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_CruzeiroSign" value="16785570" c:type="GDK_KEY_CruzeiroSign">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cut" value="269025112" c:type="GDK_KEY_Cut">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_CycleAngle" value="269025180" c:type="GDK_KEY_CycleAngle">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_A" value="1761" c:type="GDK_KEY_Cyrillic_A">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_BE" value="1762" c:type="GDK_KEY_Cyrillic_BE">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_CHE" value="1790" c:type="GDK_KEY_Cyrillic_CHE">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_CHE_descender" value="16778422" c:type="GDK_KEY_Cyrillic_CHE_descender">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_CHE_vertstroke" value="16778424" c:type="GDK_KEY_Cyrillic_CHE_vertstroke">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_DE" value="1764" c:type="GDK_KEY_Cyrillic_DE">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_DZHE" value="1727" c:type="GDK_KEY_Cyrillic_DZHE">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_E" value="1788" c:type="GDK_KEY_Cyrillic_E">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_EF" value="1766" c:type="GDK_KEY_Cyrillic_EF">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_EL" value="1772" c:type="GDK_KEY_Cyrillic_EL">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_EM" value="1773" c:type="GDK_KEY_Cyrillic_EM">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_EN" value="1774" c:type="GDK_KEY_Cyrillic_EN">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_EN_descender" value="16778402" c:type="GDK_KEY_Cyrillic_EN_descender">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_ER" value="1778" c:type="GDK_KEY_Cyrillic_ER">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_ES" value="1779" c:type="GDK_KEY_Cyrillic_ES">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_GHE" value="1767" c:type="GDK_KEY_Cyrillic_GHE">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_GHE_bar" value="16778386" c:type="GDK_KEY_Cyrillic_GHE_bar">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_HA" value="1768" c:type="GDK_KEY_Cyrillic_HA">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_HARDSIGN" value="1791" c:type="GDK_KEY_Cyrillic_HARDSIGN">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_HA_descender" value="16778418" c:type="GDK_KEY_Cyrillic_HA_descender">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_I" value="1769" c:type="GDK_KEY_Cyrillic_I">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_IE" value="1765" c:type="GDK_KEY_Cyrillic_IE">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_IO" value="1715" c:type="GDK_KEY_Cyrillic_IO">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_I_macron" value="16778466" c:type="GDK_KEY_Cyrillic_I_macron">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_JE" value="1720" c:type="GDK_KEY_Cyrillic_JE">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_KA" value="1771" c:type="GDK_KEY_Cyrillic_KA">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_KA_descender" value="16778394" c:type="GDK_KEY_Cyrillic_KA_descender">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_KA_vertstroke" value="16778396" c:type="GDK_KEY_Cyrillic_KA_vertstroke">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_LJE" value="1721" c:type="GDK_KEY_Cyrillic_LJE">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_NJE" value="1722" c:type="GDK_KEY_Cyrillic_NJE">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_O" value="1775" c:type="GDK_KEY_Cyrillic_O">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_O_bar" value="16778472" c:type="GDK_KEY_Cyrillic_O_bar">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_PE" value="1776" c:type="GDK_KEY_Cyrillic_PE">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_SCHWA" value="16778456" c:type="GDK_KEY_Cyrillic_SCHWA">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_SHA" value="1787" c:type="GDK_KEY_Cyrillic_SHA">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_SHCHA" value="1789" c:type="GDK_KEY_Cyrillic_SHCHA">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_SHHA" value="16778426" c:type="GDK_KEY_Cyrillic_SHHA">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_SHORTI" value="1770" c:type="GDK_KEY_Cyrillic_SHORTI">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_SOFTSIGN" value="1784" c:type="GDK_KEY_Cyrillic_SOFTSIGN">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_TE" value="1780" c:type="GDK_KEY_Cyrillic_TE">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_TSE" value="1763" c:type="GDK_KEY_Cyrillic_TSE">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_U" value="1781" c:type="GDK_KEY_Cyrillic_U">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_U_macron" value="16778478" c:type="GDK_KEY_Cyrillic_U_macron">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_U_straight" value="16778414" c:type="GDK_KEY_Cyrillic_U_straight">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_U_straight_bar" value="16778416" c:type="GDK_KEY_Cyrillic_U_straight_bar">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_VE" value="1783" c:type="GDK_KEY_Cyrillic_VE">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_YA" value="1777" c:type="GDK_KEY_Cyrillic_YA">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_YERU" value="1785" c:type="GDK_KEY_Cyrillic_YERU">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_YU" value="1760" c:type="GDK_KEY_Cyrillic_YU">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_ZE" value="1786" c:type="GDK_KEY_Cyrillic_ZE">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_ZHE" value="1782" c:type="GDK_KEY_Cyrillic_ZHE">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_ZHE_descender" value="16778390" c:type="GDK_KEY_Cyrillic_ZHE_descender">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_a" value="1729" c:type="GDK_KEY_Cyrillic_a">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_be" value="1730" c:type="GDK_KEY_Cyrillic_be">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_che" value="1758" c:type="GDK_KEY_Cyrillic_che">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_che_descender" value="16778423" c:type="GDK_KEY_Cyrillic_che_descender">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_che_vertstroke" value="16778425" c:type="GDK_KEY_Cyrillic_che_vertstroke">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_de" value="1732" c:type="GDK_KEY_Cyrillic_de">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_dzhe" value="1711" c:type="GDK_KEY_Cyrillic_dzhe">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_e" value="1756" c:type="GDK_KEY_Cyrillic_e">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_ef" value="1734" c:type="GDK_KEY_Cyrillic_ef">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_el" value="1740" c:type="GDK_KEY_Cyrillic_el">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_em" value="1741" c:type="GDK_KEY_Cyrillic_em">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_en" value="1742" c:type="GDK_KEY_Cyrillic_en">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_en_descender" value="16778403" c:type="GDK_KEY_Cyrillic_en_descender">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_er" value="1746" c:type="GDK_KEY_Cyrillic_er">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_es" value="1747" c:type="GDK_KEY_Cyrillic_es">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_ghe" value="1735" c:type="GDK_KEY_Cyrillic_ghe">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_ghe_bar" value="16778387" c:type="GDK_KEY_Cyrillic_ghe_bar">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_ha" value="1736" c:type="GDK_KEY_Cyrillic_ha">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_ha_descender" value="16778419" c:type="GDK_KEY_Cyrillic_ha_descender">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_hardsign" value="1759" c:type="GDK_KEY_Cyrillic_hardsign">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_i" value="1737" c:type="GDK_KEY_Cyrillic_i">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_i_macron" value="16778467" c:type="GDK_KEY_Cyrillic_i_macron">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_ie" value="1733" c:type="GDK_KEY_Cyrillic_ie">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_io" value="1699" c:type="GDK_KEY_Cyrillic_io">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_je" value="1704" c:type="GDK_KEY_Cyrillic_je">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_ka" value="1739" c:type="GDK_KEY_Cyrillic_ka">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_ka_descender" value="16778395" c:type="GDK_KEY_Cyrillic_ka_descender">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_ka_vertstroke" value="16778397" c:type="GDK_KEY_Cyrillic_ka_vertstroke">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_lje" value="1705" c:type="GDK_KEY_Cyrillic_lje">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_nje" value="1706" c:type="GDK_KEY_Cyrillic_nje">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_o" value="1743" c:type="GDK_KEY_Cyrillic_o">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_o_bar" value="16778473" c:type="GDK_KEY_Cyrillic_o_bar">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_pe" value="1744" c:type="GDK_KEY_Cyrillic_pe">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_schwa" value="16778457" c:type="GDK_KEY_Cyrillic_schwa">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_sha" value="1755" c:type="GDK_KEY_Cyrillic_sha">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_shcha" value="1757" c:type="GDK_KEY_Cyrillic_shcha">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_shha" value="16778427" c:type="GDK_KEY_Cyrillic_shha">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_shorti" value="1738" c:type="GDK_KEY_Cyrillic_shorti">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_softsign" value="1752" c:type="GDK_KEY_Cyrillic_softsign">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_te" value="1748" c:type="GDK_KEY_Cyrillic_te">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_tse" value="1731" c:type="GDK_KEY_Cyrillic_tse">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_u" value="1749" c:type="GDK_KEY_Cyrillic_u">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_u_macron" value="16778479" c:type="GDK_KEY_Cyrillic_u_macron">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_u_straight" value="16778415" c:type="GDK_KEY_Cyrillic_u_straight">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_u_straight_bar" value="16778417" c:type="GDK_KEY_Cyrillic_u_straight_bar">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_ve" value="1751" c:type="GDK_KEY_Cyrillic_ve">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_ya" value="1745" c:type="GDK_KEY_Cyrillic_ya">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_yeru" value="1753" c:type="GDK_KEY_Cyrillic_yeru">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_yu" value="1728" c:type="GDK_KEY_Cyrillic_yu">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_ze" value="1754" c:type="GDK_KEY_Cyrillic_ze">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_zhe" value="1750" c:type="GDK_KEY_Cyrillic_zhe">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_zhe_descender" value="16778391" c:type="GDK_KEY_Cyrillic_zhe_descender">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_D" value="68" c:type="GDK_KEY_D">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_DOS" value="269025114" c:type="GDK_KEY_DOS">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Dabovedot" value="16784906" c:type="GDK_KEY_Dabovedot">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Dcaron" value="463" c:type="GDK_KEY_Dcaron">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Delete" value="65535" c:type="GDK_KEY_Delete">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Display" value="269025113" c:type="GDK_KEY_Display">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Documents" value="269025115" c:type="GDK_KEY_Documents">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_DongSign" value="16785579" c:type="GDK_KEY_DongSign">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Down" value="65364" c:type="GDK_KEY_Down">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Dstroke" value="464" c:type="GDK_KEY_Dstroke">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_E" value="69" c:type="GDK_KEY_E">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ENG" value="957" c:type="GDK_KEY_ENG">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ETH" value="208" c:type="GDK_KEY_ETH">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_EZH" value="16777655" c:type="GDK_KEY_EZH">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Eabovedot" value="972" c:type="GDK_KEY_Eabovedot">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Eacute" value="201" c:type="GDK_KEY_Eacute">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ebelowdot" value="16785080" c:type="GDK_KEY_Ebelowdot">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ecaron" value="460" c:type="GDK_KEY_Ecaron">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ecircumflex" value="202" c:type="GDK_KEY_Ecircumflex">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ecircumflexacute" value="16785086" c:type="GDK_KEY_Ecircumflexacute">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ecircumflexbelowdot" value="16785094" c:type="GDK_KEY_Ecircumflexbelowdot">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ecircumflexgrave" value="16785088" c:type="GDK_KEY_Ecircumflexgrave">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ecircumflexhook" value="16785090" c:type="GDK_KEY_Ecircumflexhook">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ecircumflextilde" value="16785092" c:type="GDK_KEY_Ecircumflextilde">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_EcuSign" value="16785568" c:type="GDK_KEY_EcuSign">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ediaeresis" value="203" c:type="GDK_KEY_Ediaeresis">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Egrave" value="200" c:type="GDK_KEY_Egrave">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ehook" value="16785082" c:type="GDK_KEY_Ehook">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Eisu_Shift" value="65327" c:type="GDK_KEY_Eisu_Shift">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Eisu_toggle" value="65328" c:type="GDK_KEY_Eisu_toggle">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Eject" value="269025068" c:type="GDK_KEY_Eject">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Emacron" value="938" c:type="GDK_KEY_Emacron">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_End" value="65367" c:type="GDK_KEY_End">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Eogonek" value="458" c:type="GDK_KEY_Eogonek">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Escape" value="65307" c:type="GDK_KEY_Escape">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Eth" value="208" c:type="GDK_KEY_Eth">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Etilde" value="16785084" c:type="GDK_KEY_Etilde">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_EuroSign" value="8364" c:type="GDK_KEY_EuroSign">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Excel" value="269025116" c:type="GDK_KEY_Excel">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Execute" value="65378" c:type="GDK_KEY_Execute">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Explorer" value="269025117" c:type="GDK_KEY_Explorer">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_F" value="70" c:type="GDK_KEY_F">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_F1" value="65470" c:type="GDK_KEY_F1">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_F10" value="65479" c:type="GDK_KEY_F10">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_F11" value="65480" c:type="GDK_KEY_F11">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_F12" value="65481" c:type="GDK_KEY_F12">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_F13" value="65482" c:type="GDK_KEY_F13">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_F14" value="65483" c:type="GDK_KEY_F14">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_F15" value="65484" c:type="GDK_KEY_F15">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_F16" value="65485" c:type="GDK_KEY_F16">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_F17" value="65486" c:type="GDK_KEY_F17">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_F18" value="65487" c:type="GDK_KEY_F18">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_F19" value="65488" c:type="GDK_KEY_F19">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_F2" value="65471" c:type="GDK_KEY_F2">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_F20" value="65489" c:type="GDK_KEY_F20">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_F21" value="65490" c:type="GDK_KEY_F21">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_F22" value="65491" c:type="GDK_KEY_F22">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_F23" value="65492" c:type="GDK_KEY_F23">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_F24" value="65493" c:type="GDK_KEY_F24">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_F25" value="65494" c:type="GDK_KEY_F25">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_F26" value="65495" c:type="GDK_KEY_F26">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_F27" value="65496" c:type="GDK_KEY_F27">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_F28" value="65497" c:type="GDK_KEY_F28">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_F29" value="65498" c:type="GDK_KEY_F29">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_F3" value="65472" c:type="GDK_KEY_F3">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_F30" value="65499" c:type="GDK_KEY_F30">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_F31" value="65500" c:type="GDK_KEY_F31">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_F32" value="65501" c:type="GDK_KEY_F32">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_F33" value="65502" c:type="GDK_KEY_F33">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_F34" value="65503" c:type="GDK_KEY_F34">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_F35" value="65504" c:type="GDK_KEY_F35">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_F4" value="65473" c:type="GDK_KEY_F4">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_F5" value="65474" c:type="GDK_KEY_F5">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_F6" value="65475" c:type="GDK_KEY_F6">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_F7" value="65476" c:type="GDK_KEY_F7">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_F8" value="65477" c:type="GDK_KEY_F8">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_F9" value="65478" c:type="GDK_KEY_F9">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_FFrancSign" value="16785571" c:type="GDK_KEY_FFrancSign">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Fabovedot" value="16784926" c:type="GDK_KEY_Fabovedot">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Farsi_0" value="16778992" c:type="GDK_KEY_Farsi_0">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Farsi_1" value="16778993" c:type="GDK_KEY_Farsi_1">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Farsi_2" value="16778994" c:type="GDK_KEY_Farsi_2">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Farsi_3" value="16778995" c:type="GDK_KEY_Farsi_3">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Farsi_4" value="16778996" c:type="GDK_KEY_Farsi_4">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Farsi_5" value="16778997" c:type="GDK_KEY_Farsi_5">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Farsi_6" value="16778998" c:type="GDK_KEY_Farsi_6">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Farsi_7" value="16778999" c:type="GDK_KEY_Farsi_7">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Farsi_8" value="16779000" c:type="GDK_KEY_Farsi_8">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Farsi_9" value="16779001" c:type="GDK_KEY_Farsi_9">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Farsi_yeh" value="16778956" c:type="GDK_KEY_Farsi_yeh">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Favorites" value="269025072" c:type="GDK_KEY_Favorites">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Finance" value="269025084" c:type="GDK_KEY_Finance">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Find" value="65384" c:type="GDK_KEY_Find">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_First_Virtual_Screen" value="65232" c:type="GDK_KEY_First_Virtual_Screen">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Forward" value="269025063" c:type="GDK_KEY_Forward">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_FrameBack" value="269025181" c:type="GDK_KEY_FrameBack">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_FrameForward" value="269025182" c:type="GDK_KEY_FrameForward">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_G" value="71" c:type="GDK_KEY_G">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Gabovedot" value="725" c:type="GDK_KEY_Gabovedot">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Game" value="269025118" c:type="GDK_KEY_Game">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Gbreve" value="683" c:type="GDK_KEY_Gbreve">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Gcaron" value="16777702" c:type="GDK_KEY_Gcaron">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Gcedilla" value="939" c:type="GDK_KEY_Gcedilla">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Gcircumflex" value="728" c:type="GDK_KEY_Gcircumflex">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Georgian_an" value="16781520" c:type="GDK_KEY_Georgian_an">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Georgian_ban" value="16781521" c:type="GDK_KEY_Georgian_ban">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Georgian_can" value="16781546" c:type="GDK_KEY_Georgian_can">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Georgian_char" value="16781549" c:type="GDK_KEY_Georgian_char">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Georgian_chin" value="16781545" c:type="GDK_KEY_Georgian_chin">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Georgian_cil" value="16781548" c:type="GDK_KEY_Georgian_cil">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Georgian_don" value="16781523" c:type="GDK_KEY_Georgian_don">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Georgian_en" value="16781524" c:type="GDK_KEY_Georgian_en">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Georgian_fi" value="16781558" c:type="GDK_KEY_Georgian_fi">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Georgian_gan" value="16781522" c:type="GDK_KEY_Georgian_gan">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Georgian_ghan" value="16781542" c:type="GDK_KEY_Georgian_ghan">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Georgian_hae" value="16781552" c:type="GDK_KEY_Georgian_hae">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Georgian_har" value="16781556" c:type="GDK_KEY_Georgian_har">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Georgian_he" value="16781553" c:type="GDK_KEY_Georgian_he">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Georgian_hie" value="16781554" c:type="GDK_KEY_Georgian_hie">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Georgian_hoe" value="16781557" c:type="GDK_KEY_Georgian_hoe">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Georgian_in" value="16781528" c:type="GDK_KEY_Georgian_in">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Georgian_jhan" value="16781551" c:type="GDK_KEY_Georgian_jhan">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Georgian_jil" value="16781547" c:type="GDK_KEY_Georgian_jil">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Georgian_kan" value="16781529" c:type="GDK_KEY_Georgian_kan">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Georgian_khar" value="16781541" c:type="GDK_KEY_Georgian_khar">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Georgian_las" value="16781530" c:type="GDK_KEY_Georgian_las">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Georgian_man" value="16781531" c:type="GDK_KEY_Georgian_man">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Georgian_nar" value="16781532" c:type="GDK_KEY_Georgian_nar">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Georgian_on" value="16781533" c:type="GDK_KEY_Georgian_on">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Georgian_par" value="16781534" c:type="GDK_KEY_Georgian_par">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Georgian_phar" value="16781540" c:type="GDK_KEY_Georgian_phar">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Georgian_qar" value="16781543" c:type="GDK_KEY_Georgian_qar">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Georgian_rae" value="16781536" c:type="GDK_KEY_Georgian_rae">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Georgian_san" value="16781537" c:type="GDK_KEY_Georgian_san">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Georgian_shin" value="16781544" c:type="GDK_KEY_Georgian_shin">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Georgian_tan" value="16781527" c:type="GDK_KEY_Georgian_tan">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Georgian_tar" value="16781538" c:type="GDK_KEY_Georgian_tar">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Georgian_un" value="16781539" c:type="GDK_KEY_Georgian_un">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Georgian_vin" value="16781525" c:type="GDK_KEY_Georgian_vin">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Georgian_we" value="16781555" c:type="GDK_KEY_Georgian_we">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Georgian_xan" value="16781550" c:type="GDK_KEY_Georgian_xan">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Georgian_zen" value="16781526" c:type="GDK_KEY_Georgian_zen">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Georgian_zhar" value="16781535" c:type="GDK_KEY_Georgian_zhar">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Go" value="269025119" c:type="GDK_KEY_Go">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_ALPHA" value="1985" c:type="GDK_KEY_Greek_ALPHA">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_ALPHAaccent" value="1953" c:type="GDK_KEY_Greek_ALPHAaccent">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_BETA" value="1986" c:type="GDK_KEY_Greek_BETA">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_CHI" value="2007" c:type="GDK_KEY_Greek_CHI">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_DELTA" value="1988" c:type="GDK_KEY_Greek_DELTA">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_EPSILON" value="1989" c:type="GDK_KEY_Greek_EPSILON">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_EPSILONaccent" value="1954" c:type="GDK_KEY_Greek_EPSILONaccent">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_ETA" value="1991" c:type="GDK_KEY_Greek_ETA">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_ETAaccent" value="1955" c:type="GDK_KEY_Greek_ETAaccent">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_GAMMA" value="1987" c:type="GDK_KEY_Greek_GAMMA">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_IOTA" value="1993" c:type="GDK_KEY_Greek_IOTA">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_IOTAaccent" value="1956" c:type="GDK_KEY_Greek_IOTAaccent">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_IOTAdiaeresis" value="1957" c:type="GDK_KEY_Greek_IOTAdiaeresis">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_IOTAdieresis" value="1957" c:type="GDK_KEY_Greek_IOTAdieresis">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_KAPPA" value="1994" c:type="GDK_KEY_Greek_KAPPA">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_LAMBDA" value="1995" c:type="GDK_KEY_Greek_LAMBDA">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_LAMDA" value="1995" c:type="GDK_KEY_Greek_LAMDA">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_MU" value="1996" c:type="GDK_KEY_Greek_MU">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_NU" value="1997" c:type="GDK_KEY_Greek_NU">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_OMEGA" value="2009" c:type="GDK_KEY_Greek_OMEGA">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_OMEGAaccent" value="1963" c:type="GDK_KEY_Greek_OMEGAaccent">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_OMICRON" value="1999" c:type="GDK_KEY_Greek_OMICRON">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_OMICRONaccent" value="1959" c:type="GDK_KEY_Greek_OMICRONaccent">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_PHI" value="2006" c:type="GDK_KEY_Greek_PHI">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_PI" value="2000" c:type="GDK_KEY_Greek_PI">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_PSI" value="2008" c:type="GDK_KEY_Greek_PSI">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_RHO" value="2001" c:type="GDK_KEY_Greek_RHO">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_SIGMA" value="2002" c:type="GDK_KEY_Greek_SIGMA">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_TAU" value="2004" c:type="GDK_KEY_Greek_TAU">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_THETA" value="1992" c:type="GDK_KEY_Greek_THETA">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_UPSILON" value="2005" c:type="GDK_KEY_Greek_UPSILON">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_UPSILONaccent" value="1960" c:type="GDK_KEY_Greek_UPSILONaccent">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_UPSILONdieresis" value="1961" c:type="GDK_KEY_Greek_UPSILONdieresis">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_XI" value="1998" c:type="GDK_KEY_Greek_XI">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_ZETA" value="1990" c:type="GDK_KEY_Greek_ZETA">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_accentdieresis" value="1966" c:type="GDK_KEY_Greek_accentdieresis">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_alpha" value="2017" c:type="GDK_KEY_Greek_alpha">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_alphaaccent" value="1969" c:type="GDK_KEY_Greek_alphaaccent">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_beta" value="2018" c:type="GDK_KEY_Greek_beta">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_chi" value="2039" c:type="GDK_KEY_Greek_chi">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_delta" value="2020" c:type="GDK_KEY_Greek_delta">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_epsilon" value="2021" c:type="GDK_KEY_Greek_epsilon">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_epsilonaccent" value="1970" c:type="GDK_KEY_Greek_epsilonaccent">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_eta" value="2023" c:type="GDK_KEY_Greek_eta">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_etaaccent" value="1971" c:type="GDK_KEY_Greek_etaaccent">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_finalsmallsigma" value="2035" c:type="GDK_KEY_Greek_finalsmallsigma">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_gamma" value="2019" c:type="GDK_KEY_Greek_gamma">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_horizbar" value="1967" c:type="GDK_KEY_Greek_horizbar">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_iota" value="2025" c:type="GDK_KEY_Greek_iota">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_iotaaccent" value="1972" c:type="GDK_KEY_Greek_iotaaccent">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_iotaaccentdieresis" value="1974" c:type="GDK_KEY_Greek_iotaaccentdieresis">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_iotadieresis" value="1973" c:type="GDK_KEY_Greek_iotadieresis">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_kappa" value="2026" c:type="GDK_KEY_Greek_kappa">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_lambda" value="2027" c:type="GDK_KEY_Greek_lambda">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_lamda" value="2027" c:type="GDK_KEY_Greek_lamda">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_mu" value="2028" c:type="GDK_KEY_Greek_mu">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_nu" value="2029" c:type="GDK_KEY_Greek_nu">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_omega" value="2041" c:type="GDK_KEY_Greek_omega">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_omegaaccent" value="1979" c:type="GDK_KEY_Greek_omegaaccent">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_omicron" value="2031" c:type="GDK_KEY_Greek_omicron">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_omicronaccent" value="1975" c:type="GDK_KEY_Greek_omicronaccent">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_phi" value="2038" c:type="GDK_KEY_Greek_phi">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_pi" value="2032" c:type="GDK_KEY_Greek_pi">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_psi" value="2040" c:type="GDK_KEY_Greek_psi">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_rho" value="2033" c:type="GDK_KEY_Greek_rho">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_sigma" value="2034" c:type="GDK_KEY_Greek_sigma">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_switch" value="65406" c:type="GDK_KEY_Greek_switch">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_tau" value="2036" c:type="GDK_KEY_Greek_tau">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_theta" value="2024" c:type="GDK_KEY_Greek_theta">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_upsilon" value="2037" c:type="GDK_KEY_Greek_upsilon">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_upsilonaccent" value="1976" c:type="GDK_KEY_Greek_upsilonaccent">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_upsilonaccentdieresis" value="1978" c:type="GDK_KEY_Greek_upsilonaccentdieresis">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_upsilondieresis" value="1977" c:type="GDK_KEY_Greek_upsilondieresis">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_xi" value="2030" c:type="GDK_KEY_Greek_xi">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_zeta" value="2022" c:type="GDK_KEY_Greek_zeta">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Green" value="269025188" c:type="GDK_KEY_Green">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_H" value="72" c:type="GDK_KEY_H">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul" value="65329" c:type="GDK_KEY_Hangul">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_A" value="3775" c:type="GDK_KEY_Hangul_A">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_AE" value="3776" c:type="GDK_KEY_Hangul_AE">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_AraeA" value="3830" c:type="GDK_KEY_Hangul_AraeA">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_AraeAE" value="3831" c:type="GDK_KEY_Hangul_AraeAE">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_Banja" value="65337" c:type="GDK_KEY_Hangul_Banja">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_Cieuc" value="3770" c:type="GDK_KEY_Hangul_Cieuc">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_Codeinput" value="65335" c:type="GDK_KEY_Hangul_Codeinput">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_Dikeud" value="3751" c:type="GDK_KEY_Hangul_Dikeud">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_E" value="3780" c:type="GDK_KEY_Hangul_E">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_EO" value="3779" c:type="GDK_KEY_Hangul_EO">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_EU" value="3793" c:type="GDK_KEY_Hangul_EU">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_End" value="65331" c:type="GDK_KEY_Hangul_End">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_Hanja" value="65332" c:type="GDK_KEY_Hangul_Hanja">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_Hieuh" value="3774" c:type="GDK_KEY_Hangul_Hieuh">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_I" value="3795" c:type="GDK_KEY_Hangul_I">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_Ieung" value="3767" c:type="GDK_KEY_Hangul_Ieung">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_J_Cieuc" value="3818" c:type="GDK_KEY_Hangul_J_Cieuc">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_J_Dikeud" value="3802" c:type="GDK_KEY_Hangul_J_Dikeud">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_J_Hieuh" value="3822" c:type="GDK_KEY_Hangul_J_Hieuh">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_J_Ieung" value="3816" c:type="GDK_KEY_Hangul_J_Ieung">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_J_Jieuj" value="3817" c:type="GDK_KEY_Hangul_J_Jieuj">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_J_Khieuq" value="3819" c:type="GDK_KEY_Hangul_J_Khieuq">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_J_Kiyeog" value="3796" c:type="GDK_KEY_Hangul_J_Kiyeog">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_J_KiyeogSios" value="3798" c:type="GDK_KEY_Hangul_J_KiyeogSios">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_J_KkogjiDalrinIeung" value="3833" c:type="GDK_KEY_Hangul_J_KkogjiDalrinIeung">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_J_Mieum" value="3811" c:type="GDK_KEY_Hangul_J_Mieum">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_J_Nieun" value="3799" c:type="GDK_KEY_Hangul_J_Nieun">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_J_NieunHieuh" value="3801" c:type="GDK_KEY_Hangul_J_NieunHieuh">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_J_NieunJieuj" value="3800" c:type="GDK_KEY_Hangul_J_NieunJieuj">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_J_PanSios" value="3832" c:type="GDK_KEY_Hangul_J_PanSios">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_J_Phieuf" value="3821" c:type="GDK_KEY_Hangul_J_Phieuf">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_J_Pieub" value="3812" c:type="GDK_KEY_Hangul_J_Pieub">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_J_PieubSios" value="3813" c:type="GDK_KEY_Hangul_J_PieubSios">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_J_Rieul" value="3803" c:type="GDK_KEY_Hangul_J_Rieul">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_J_RieulHieuh" value="3810" c:type="GDK_KEY_Hangul_J_RieulHieuh">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_J_RieulKiyeog" value="3804" c:type="GDK_KEY_Hangul_J_RieulKiyeog">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_J_RieulMieum" value="3805" c:type="GDK_KEY_Hangul_J_RieulMieum">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_J_RieulPhieuf" value="3809" c:type="GDK_KEY_Hangul_J_RieulPhieuf">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_J_RieulPieub" value="3806" c:type="GDK_KEY_Hangul_J_RieulPieub">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_J_RieulSios" value="3807" c:type="GDK_KEY_Hangul_J_RieulSios">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_J_RieulTieut" value="3808" c:type="GDK_KEY_Hangul_J_RieulTieut">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_J_Sios" value="3814" c:type="GDK_KEY_Hangul_J_Sios">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_J_SsangKiyeog" value="3797" c:type="GDK_KEY_Hangul_J_SsangKiyeog">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_J_SsangSios" value="3815" c:type="GDK_KEY_Hangul_J_SsangSios">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_J_Tieut" value="3820" c:type="GDK_KEY_Hangul_J_Tieut">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_J_YeorinHieuh" value="3834" c:type="GDK_KEY_Hangul_J_YeorinHieuh">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_Jamo" value="65333" c:type="GDK_KEY_Hangul_Jamo">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_Jeonja" value="65336" c:type="GDK_KEY_Hangul_Jeonja">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_Jieuj" value="3768" c:type="GDK_KEY_Hangul_Jieuj">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_Khieuq" value="3771" c:type="GDK_KEY_Hangul_Khieuq">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_Kiyeog" value="3745" c:type="GDK_KEY_Hangul_Kiyeog">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_KiyeogSios" value="3747" c:type="GDK_KEY_Hangul_KiyeogSios">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_KkogjiDalrinIeung" value="3827" c:type="GDK_KEY_Hangul_KkogjiDalrinIeung">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_Mieum" value="3761" c:type="GDK_KEY_Hangul_Mieum">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_MultipleCandidate" value="65341" c:type="GDK_KEY_Hangul_MultipleCandidate">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_Nieun" value="3748" c:type="GDK_KEY_Hangul_Nieun">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_NieunHieuh" value="3750" c:type="GDK_KEY_Hangul_NieunHieuh">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_NieunJieuj" value="3749" c:type="GDK_KEY_Hangul_NieunJieuj">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_O" value="3783" c:type="GDK_KEY_Hangul_O">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_OE" value="3786" c:type="GDK_KEY_Hangul_OE">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_PanSios" value="3826" c:type="GDK_KEY_Hangul_PanSios">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_Phieuf" value="3773" c:type="GDK_KEY_Hangul_Phieuf">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_Pieub" value="3762" c:type="GDK_KEY_Hangul_Pieub">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_PieubSios" value="3764" c:type="GDK_KEY_Hangul_PieubSios">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_PostHanja" value="65339" c:type="GDK_KEY_Hangul_PostHanja">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_PreHanja" value="65338" c:type="GDK_KEY_Hangul_PreHanja">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_PreviousCandidate" value="65342" c:type="GDK_KEY_Hangul_PreviousCandidate">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_Rieul" value="3753" c:type="GDK_KEY_Hangul_Rieul">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_RieulHieuh" value="3760" c:type="GDK_KEY_Hangul_RieulHieuh">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_RieulKiyeog" value="3754" c:type="GDK_KEY_Hangul_RieulKiyeog">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_RieulMieum" value="3755" c:type="GDK_KEY_Hangul_RieulMieum">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_RieulPhieuf" value="3759" c:type="GDK_KEY_Hangul_RieulPhieuf">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_RieulPieub" value="3756" c:type="GDK_KEY_Hangul_RieulPieub">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_RieulSios" value="3757" c:type="GDK_KEY_Hangul_RieulSios">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_RieulTieut" value="3758" c:type="GDK_KEY_Hangul_RieulTieut">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_RieulYeorinHieuh" value="3823" c:type="GDK_KEY_Hangul_RieulYeorinHieuh">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_Romaja" value="65334" c:type="GDK_KEY_Hangul_Romaja">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_SingleCandidate" value="65340" c:type="GDK_KEY_Hangul_SingleCandidate">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_Sios" value="3765" c:type="GDK_KEY_Hangul_Sios">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_Special" value="65343" c:type="GDK_KEY_Hangul_Special">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_SsangDikeud" value="3752" c:type="GDK_KEY_Hangul_SsangDikeud">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_SsangJieuj" value="3769" c:type="GDK_KEY_Hangul_SsangJieuj">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_SsangKiyeog" value="3746" c:type="GDK_KEY_Hangul_SsangKiyeog">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_SsangPieub" value="3763" c:type="GDK_KEY_Hangul_SsangPieub">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_SsangSios" value="3766" c:type="GDK_KEY_Hangul_SsangSios">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_Start" value="65330" c:type="GDK_KEY_Hangul_Start">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_SunkyeongeumMieum" value="3824" c:type="GDK_KEY_Hangul_SunkyeongeumMieum">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_SunkyeongeumPhieuf" value="3828" c:type="GDK_KEY_Hangul_SunkyeongeumPhieuf">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_SunkyeongeumPieub" value="3825" c:type="GDK_KEY_Hangul_SunkyeongeumPieub">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_Tieut" value="3772" c:type="GDK_KEY_Hangul_Tieut">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_U" value="3788" c:type="GDK_KEY_Hangul_U">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_WA" value="3784" c:type="GDK_KEY_Hangul_WA">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_WAE" value="3785" c:type="GDK_KEY_Hangul_WAE">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_WE" value="3790" c:type="GDK_KEY_Hangul_WE">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_WEO" value="3789" c:type="GDK_KEY_Hangul_WEO">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_WI" value="3791" c:type="GDK_KEY_Hangul_WI">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_YA" value="3777" c:type="GDK_KEY_Hangul_YA">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_YAE" value="3778" c:type="GDK_KEY_Hangul_YAE">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_YE" value="3782" c:type="GDK_KEY_Hangul_YE">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_YEO" value="3781" c:type="GDK_KEY_Hangul_YEO">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_YI" value="3794" c:type="GDK_KEY_Hangul_YI">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_YO" value="3787" c:type="GDK_KEY_Hangul_YO">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_YU" value="3792" c:type="GDK_KEY_Hangul_YU">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_YeorinHieuh" value="3829" c:type="GDK_KEY_Hangul_YeorinHieuh">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_switch" value="65406" c:type="GDK_KEY_Hangul_switch">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hankaku" value="65321" c:type="GDK_KEY_Hankaku">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hcircumflex" value="678" c:type="GDK_KEY_Hcircumflex">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hebrew_switch" value="65406" c:type="GDK_KEY_Hebrew_switch">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Help" value="65386" c:type="GDK_KEY_Help">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Henkan" value="65315" c:type="GDK_KEY_Henkan">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Henkan_Mode" value="65315" c:type="GDK_KEY_Henkan_Mode">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hibernate" value="269025192" c:type="GDK_KEY_Hibernate">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hiragana" value="65317" c:type="GDK_KEY_Hiragana">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hiragana_Katakana" value="65319" c:type="GDK_KEY_Hiragana_Katakana">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_History" value="269025079" c:type="GDK_KEY_History">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Home" value="65360" c:type="GDK_KEY_Home">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_HomePage" value="269025048" c:type="GDK_KEY_HomePage">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_HotLinks" value="269025082" c:type="GDK_KEY_HotLinks">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hstroke" value="673" c:type="GDK_KEY_Hstroke">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hyper_L" value="65517" c:type="GDK_KEY_Hyper_L">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hyper_R" value="65518" c:type="GDK_KEY_Hyper_R">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_I" value="73" c:type="GDK_KEY_I">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ISO_Center_Object" value="65075" c:type="GDK_KEY_ISO_Center_Object">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ISO_Continuous_Underline" value="65072" c:type="GDK_KEY_ISO_Continuous_Underline">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ISO_Discontinuous_Underline" value="65073" c:type="GDK_KEY_ISO_Discontinuous_Underline">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ISO_Emphasize" value="65074" c:type="GDK_KEY_ISO_Emphasize">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ISO_Enter" value="65076" c:type="GDK_KEY_ISO_Enter">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ISO_Fast_Cursor_Down" value="65071" c:type="GDK_KEY_ISO_Fast_Cursor_Down">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ISO_Fast_Cursor_Left" value="65068" c:type="GDK_KEY_ISO_Fast_Cursor_Left">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ISO_Fast_Cursor_Right" value="65069" c:type="GDK_KEY_ISO_Fast_Cursor_Right">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ISO_Fast_Cursor_Up" value="65070" c:type="GDK_KEY_ISO_Fast_Cursor_Up">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ISO_First_Group" value="65036" c:type="GDK_KEY_ISO_First_Group">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ISO_First_Group_Lock" value="65037" c:type="GDK_KEY_ISO_First_Group_Lock">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ISO_Group_Latch" value="65030" c:type="GDK_KEY_ISO_Group_Latch">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ISO_Group_Lock" value="65031" c:type="GDK_KEY_ISO_Group_Lock">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ISO_Group_Shift" value="65406" c:type="GDK_KEY_ISO_Group_Shift">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ISO_Last_Group" value="65038" c:type="GDK_KEY_ISO_Last_Group">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ISO_Last_Group_Lock" value="65039" c:type="GDK_KEY_ISO_Last_Group_Lock">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ISO_Left_Tab" value="65056" c:type="GDK_KEY_ISO_Left_Tab">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ISO_Level2_Latch" value="65026" c:type="GDK_KEY_ISO_Level2_Latch">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ISO_Level3_Latch" value="65028" c:type="GDK_KEY_ISO_Level3_Latch">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ISO_Level3_Lock" value="65029" c:type="GDK_KEY_ISO_Level3_Lock">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ISO_Level3_Shift" value="65027" c:type="GDK_KEY_ISO_Level3_Shift">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ISO_Level5_Latch" value="65042" c:type="GDK_KEY_ISO_Level5_Latch">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ISO_Level5_Lock" value="65043" c:type="GDK_KEY_ISO_Level5_Lock">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ISO_Level5_Shift" value="65041" c:type="GDK_KEY_ISO_Level5_Shift">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ISO_Lock" value="65025" c:type="GDK_KEY_ISO_Lock">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ISO_Move_Line_Down" value="65058" c:type="GDK_KEY_ISO_Move_Line_Down">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ISO_Move_Line_Up" value="65057" c:type="GDK_KEY_ISO_Move_Line_Up">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ISO_Next_Group" value="65032" c:type="GDK_KEY_ISO_Next_Group">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ISO_Next_Group_Lock" value="65033" c:type="GDK_KEY_ISO_Next_Group_Lock">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ISO_Partial_Line_Down" value="65060" c:type="GDK_KEY_ISO_Partial_Line_Down">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ISO_Partial_Line_Up" value="65059" c:type="GDK_KEY_ISO_Partial_Line_Up">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ISO_Partial_Space_Left" value="65061" c:type="GDK_KEY_ISO_Partial_Space_Left">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ISO_Partial_Space_Right" value="65062" c:type="GDK_KEY_ISO_Partial_Space_Right">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ISO_Prev_Group" value="65034" c:type="GDK_KEY_ISO_Prev_Group">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ISO_Prev_Group_Lock" value="65035" c:type="GDK_KEY_ISO_Prev_Group_Lock">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ISO_Release_Both_Margins" value="65067" c:type="GDK_KEY_ISO_Release_Both_Margins">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ISO_Release_Margin_Left" value="65065" c:type="GDK_KEY_ISO_Release_Margin_Left">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ISO_Release_Margin_Right" value="65066" c:type="GDK_KEY_ISO_Release_Margin_Right">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ISO_Set_Margin_Left" value="65063" c:type="GDK_KEY_ISO_Set_Margin_Left">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ISO_Set_Margin_Right" value="65064" c:type="GDK_KEY_ISO_Set_Margin_Right">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Iabovedot" value="681" c:type="GDK_KEY_Iabovedot">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Iacute" value="205" c:type="GDK_KEY_Iacute">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ibelowdot" value="16785098" c:type="GDK_KEY_Ibelowdot">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ibreve" value="16777516" c:type="GDK_KEY_Ibreve">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Icircumflex" value="206" c:type="GDK_KEY_Icircumflex">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Idiaeresis" value="207" c:type="GDK_KEY_Idiaeresis">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Igrave" value="204" c:type="GDK_KEY_Igrave">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ihook" value="16785096" c:type="GDK_KEY_Ihook">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Imacron" value="975" c:type="GDK_KEY_Imacron">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Insert" value="65379" c:type="GDK_KEY_Insert">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Iogonek" value="967" c:type="GDK_KEY_Iogonek">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Itilde" value="933" c:type="GDK_KEY_Itilde">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_J" value="74" c:type="GDK_KEY_J">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Jcircumflex" value="684" c:type="GDK_KEY_Jcircumflex">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_K" value="75" c:type="GDK_KEY_K">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_KP_0" value="65456" c:type="GDK_KEY_KP_0">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_KP_1" value="65457" c:type="GDK_KEY_KP_1">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_KP_2" value="65458" c:type="GDK_KEY_KP_2">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_KP_3" value="65459" c:type="GDK_KEY_KP_3">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_KP_4" value="65460" c:type="GDK_KEY_KP_4">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_KP_5" value="65461" c:type="GDK_KEY_KP_5">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_KP_6" value="65462" c:type="GDK_KEY_KP_6">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_KP_7" value="65463" c:type="GDK_KEY_KP_7">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_KP_8" value="65464" c:type="GDK_KEY_KP_8">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_KP_9" value="65465" c:type="GDK_KEY_KP_9">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_KP_Add" value="65451" c:type="GDK_KEY_KP_Add">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_KP_Begin" value="65437" c:type="GDK_KEY_KP_Begin">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_KP_Decimal" value="65454" c:type="GDK_KEY_KP_Decimal">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_KP_Delete" value="65439" c:type="GDK_KEY_KP_Delete">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_KP_Divide" value="65455" c:type="GDK_KEY_KP_Divide">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_KP_Down" value="65433" c:type="GDK_KEY_KP_Down">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_KP_End" value="65436" c:type="GDK_KEY_KP_End">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_KP_Enter" value="65421" c:type="GDK_KEY_KP_Enter">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_KP_Equal" value="65469" c:type="GDK_KEY_KP_Equal">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_KP_F1" value="65425" c:type="GDK_KEY_KP_F1">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_KP_F2" value="65426" c:type="GDK_KEY_KP_F2">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_KP_F3" value="65427" c:type="GDK_KEY_KP_F3">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_KP_F4" value="65428" c:type="GDK_KEY_KP_F4">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_KP_Home" value="65429" c:type="GDK_KEY_KP_Home">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_KP_Insert" value="65438" c:type="GDK_KEY_KP_Insert">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_KP_Left" value="65430" c:type="GDK_KEY_KP_Left">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_KP_Multiply" value="65450" c:type="GDK_KEY_KP_Multiply">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_KP_Next" value="65435" c:type="GDK_KEY_KP_Next">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_KP_Page_Down" value="65435" c:type="GDK_KEY_KP_Page_Down">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_KP_Page_Up" value="65434" c:type="GDK_KEY_KP_Page_Up">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_KP_Prior" value="65434" c:type="GDK_KEY_KP_Prior">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_KP_Right" value="65432" c:type="GDK_KEY_KP_Right">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_KP_Separator" value="65452" c:type="GDK_KEY_KP_Separator">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_KP_Space" value="65408" c:type="GDK_KEY_KP_Space">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_KP_Subtract" value="65453" c:type="GDK_KEY_KP_Subtract">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_KP_Tab" value="65417" c:type="GDK_KEY_KP_Tab">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_KP_Up" value="65431" c:type="GDK_KEY_KP_Up">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Kana_Lock" value="65325" c:type="GDK_KEY_Kana_Lock">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Kana_Shift" value="65326" c:type="GDK_KEY_Kana_Shift">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Kanji" value="65313" c:type="GDK_KEY_Kanji">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Kanji_Bangou" value="65335" c:type="GDK_KEY_Kanji_Bangou">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Katakana" value="65318" c:type="GDK_KEY_Katakana">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_KbdBrightnessDown" value="269025030" c:type="GDK_KEY_KbdBrightnessDown">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_KbdBrightnessUp" value="269025029" c:type="GDK_KEY_KbdBrightnessUp">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_KbdLightOnOff" value="269025028" c:type="GDK_KEY_KbdLightOnOff">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Kcedilla" value="979" c:type="GDK_KEY_Kcedilla">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Keyboard" value="269025203" c:type="GDK_KEY_Keyboard">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Korean_Won" value="3839" c:type="GDK_KEY_Korean_Won">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_L" value="76" c:type="GDK_KEY_L">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_L1" value="65480" c:type="GDK_KEY_L1">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_L10" value="65489" c:type="GDK_KEY_L10">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_L2" value="65481" c:type="GDK_KEY_L2">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_L3" value="65482" c:type="GDK_KEY_L3">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_L4" value="65483" c:type="GDK_KEY_L4">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_L5" value="65484" c:type="GDK_KEY_L5">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_L6" value="65485" c:type="GDK_KEY_L6">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_L7" value="65486" c:type="GDK_KEY_L7">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_L8" value="65487" c:type="GDK_KEY_L8">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_L9" value="65488" c:type="GDK_KEY_L9">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Lacute" value="453" c:type="GDK_KEY_Lacute">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Last_Virtual_Screen" value="65236" c:type="GDK_KEY_Last_Virtual_Screen">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Launch0" value="269025088" c:type="GDK_KEY_Launch0">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Launch1" value="269025089" c:type="GDK_KEY_Launch1">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Launch2" value="269025090" c:type="GDK_KEY_Launch2">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Launch3" value="269025091" c:type="GDK_KEY_Launch3">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Launch4" value="269025092" c:type="GDK_KEY_Launch4">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Launch5" value="269025093" c:type="GDK_KEY_Launch5">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Launch6" value="269025094" c:type="GDK_KEY_Launch6">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Launch7" value="269025095" c:type="GDK_KEY_Launch7">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Launch8" value="269025096" c:type="GDK_KEY_Launch8">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Launch9" value="269025097" c:type="GDK_KEY_Launch9">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_LaunchA" value="269025098" c:type="GDK_KEY_LaunchA">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_LaunchB" value="269025099" c:type="GDK_KEY_LaunchB">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_LaunchC" value="269025100" c:type="GDK_KEY_LaunchC">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_LaunchD" value="269025101" c:type="GDK_KEY_LaunchD">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_LaunchE" value="269025102" c:type="GDK_KEY_LaunchE">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_LaunchF" value="269025103" c:type="GDK_KEY_LaunchF">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Lbelowdot" value="16784950" c:type="GDK_KEY_Lbelowdot">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Lcaron" value="421" c:type="GDK_KEY_Lcaron">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Lcedilla" value="934" c:type="GDK_KEY_Lcedilla">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Left" value="65361" c:type="GDK_KEY_Left">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_LightBulb" value="269025077" c:type="GDK_KEY_LightBulb">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Linefeed" value="65290" c:type="GDK_KEY_Linefeed">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_LiraSign" value="16785572" c:type="GDK_KEY_LiraSign">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_LogGrabInfo" value="269024805" c:type="GDK_KEY_LogGrabInfo">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_LogOff" value="269025121" c:type="GDK_KEY_LogOff">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_LogWindowTree" value="269024804" c:type="GDK_KEY_LogWindowTree">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Lstroke" value="419" c:type="GDK_KEY_Lstroke">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_M" value="77" c:type="GDK_KEY_M">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Mabovedot" value="16784960" c:type="GDK_KEY_Mabovedot">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Macedonia_DSE" value="1717" c:type="GDK_KEY_Macedonia_DSE">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Macedonia_GJE" value="1714" c:type="GDK_KEY_Macedonia_GJE">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Macedonia_KJE" value="1724" c:type="GDK_KEY_Macedonia_KJE">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Macedonia_dse" value="1701" c:type="GDK_KEY_Macedonia_dse">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Macedonia_gje" value="1698" c:type="GDK_KEY_Macedonia_gje">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Macedonia_kje" value="1708" c:type="GDK_KEY_Macedonia_kje">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Mae_Koho" value="65342" c:type="GDK_KEY_Mae_Koho">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Mail" value="269025049" c:type="GDK_KEY_Mail">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_MailForward" value="269025168" c:type="GDK_KEY_MailForward">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Market" value="269025122" c:type="GDK_KEY_Market">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Massyo" value="65324" c:type="GDK_KEY_Massyo">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Meeting" value="269025123" c:type="GDK_KEY_Meeting">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Memo" value="269025054" c:type="GDK_KEY_Memo">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Menu" value="65383" c:type="GDK_KEY_Menu">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_MenuKB" value="269025125" c:type="GDK_KEY_MenuKB">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_MenuPB" value="269025126" c:type="GDK_KEY_MenuPB">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Messenger" value="269025166" c:type="GDK_KEY_Messenger">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Meta_L" value="65511" c:type="GDK_KEY_Meta_L">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Meta_R" value="65512" c:type="GDK_KEY_Meta_R">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_MillSign" value="16785573" c:type="GDK_KEY_MillSign">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ModeLock" value="269025025" c:type="GDK_KEY_ModeLock">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Mode_switch" value="65406" c:type="GDK_KEY_Mode_switch">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_MonBrightnessDown" value="269025027" c:type="GDK_KEY_MonBrightnessDown">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_MonBrightnessUp" value="269025026" c:type="GDK_KEY_MonBrightnessUp">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_MouseKeys_Accel_Enable" value="65143" c:type="GDK_KEY_MouseKeys_Accel_Enable">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_MouseKeys_Enable" value="65142" c:type="GDK_KEY_MouseKeys_Enable">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Muhenkan" value="65314" c:type="GDK_KEY_Muhenkan">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Multi_key" value="65312" c:type="GDK_KEY_Multi_key">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_MultipleCandidate" value="65341" c:type="GDK_KEY_MultipleCandidate">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Music" value="269025170" c:type="GDK_KEY_Music">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_MyComputer" value="269025075" c:type="GDK_KEY_MyComputer">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_MySites" value="269025127" c:type="GDK_KEY_MySites">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_N" value="78" c:type="GDK_KEY_N">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Nacute" value="465" c:type="GDK_KEY_Nacute">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_NairaSign" value="16785574" c:type="GDK_KEY_NairaSign">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ncaron" value="466" c:type="GDK_KEY_Ncaron">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ncedilla" value="977" c:type="GDK_KEY_Ncedilla">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_New" value="269025128" c:type="GDK_KEY_New">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_NewSheqelSign" value="16785578" c:type="GDK_KEY_NewSheqelSign">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_News" value="269025129" c:type="GDK_KEY_News">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Next" value="65366" c:type="GDK_KEY_Next">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Next_VMode" value="269024802" c:type="GDK_KEY_Next_VMode">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Next_Virtual_Screen" value="65234" c:type="GDK_KEY_Next_Virtual_Screen">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ntilde" value="209" c:type="GDK_KEY_Ntilde">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Num_Lock" value="65407" c:type="GDK_KEY_Num_Lock">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_O" value="79" c:type="GDK_KEY_O">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_OE" value="5052" c:type="GDK_KEY_OE">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Oacute" value="211" c:type="GDK_KEY_Oacute">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Obarred" value="16777631" c:type="GDK_KEY_Obarred">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Obelowdot" value="16785100" c:type="GDK_KEY_Obelowdot">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ocaron" value="16777681" c:type="GDK_KEY_Ocaron">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ocircumflex" value="212" c:type="GDK_KEY_Ocircumflex">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ocircumflexacute" value="16785104" c:type="GDK_KEY_Ocircumflexacute">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ocircumflexbelowdot" value="16785112" c:type="GDK_KEY_Ocircumflexbelowdot">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ocircumflexgrave" value="16785106" c:type="GDK_KEY_Ocircumflexgrave">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ocircumflexhook" value="16785108" c:type="GDK_KEY_Ocircumflexhook">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ocircumflextilde" value="16785110" c:type="GDK_KEY_Ocircumflextilde">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Odiaeresis" value="214" c:type="GDK_KEY_Odiaeresis">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Odoubleacute" value="469" c:type="GDK_KEY_Odoubleacute">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_OfficeHome" value="269025130" c:type="GDK_KEY_OfficeHome">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ograve" value="210" c:type="GDK_KEY_Ograve">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ohook" value="16785102" c:type="GDK_KEY_Ohook">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ohorn" value="16777632" c:type="GDK_KEY_Ohorn">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ohornacute" value="16785114" c:type="GDK_KEY_Ohornacute">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ohornbelowdot" value="16785122" c:type="GDK_KEY_Ohornbelowdot">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ohorngrave" value="16785116" c:type="GDK_KEY_Ohorngrave">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ohornhook" value="16785118" c:type="GDK_KEY_Ohornhook">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ohorntilde" value="16785120" c:type="GDK_KEY_Ohorntilde">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Omacron" value="978" c:type="GDK_KEY_Omacron">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ooblique" value="216" c:type="GDK_KEY_Ooblique">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Open" value="269025131" c:type="GDK_KEY_Open">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_OpenURL" value="269025080" c:type="GDK_KEY_OpenURL">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Option" value="269025132" c:type="GDK_KEY_Option">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Oslash" value="216" c:type="GDK_KEY_Oslash">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Otilde" value="213" c:type="GDK_KEY_Otilde">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Overlay1_Enable" value="65144" c:type="GDK_KEY_Overlay1_Enable">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Overlay2_Enable" value="65145" c:type="GDK_KEY_Overlay2_Enable">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_P" value="80" c:type="GDK_KEY_P">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Pabovedot" value="16784982" c:type="GDK_KEY_Pabovedot">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Page_Down" value="65366" c:type="GDK_KEY_Page_Down">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Page_Up" value="65365" c:type="GDK_KEY_Page_Up">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Paste" value="269025133" c:type="GDK_KEY_Paste">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Pause" value="65299" c:type="GDK_KEY_Pause">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_PesetaSign" value="16785575" c:type="GDK_KEY_PesetaSign">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Phone" value="269025134" c:type="GDK_KEY_Phone">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Pictures" value="269025169" c:type="GDK_KEY_Pictures">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Pointer_Accelerate" value="65274" c:type="GDK_KEY_Pointer_Accelerate">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Pointer_Button1" value="65257" c:type="GDK_KEY_Pointer_Button1">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Pointer_Button2" value="65258" c:type="GDK_KEY_Pointer_Button2">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Pointer_Button3" value="65259" c:type="GDK_KEY_Pointer_Button3">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Pointer_Button4" value="65260" c:type="GDK_KEY_Pointer_Button4">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Pointer_Button5" value="65261" c:type="GDK_KEY_Pointer_Button5">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Pointer_Button_Dflt" value="65256" c:type="GDK_KEY_Pointer_Button_Dflt">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Pointer_DblClick1" value="65263" c:type="GDK_KEY_Pointer_DblClick1">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Pointer_DblClick2" value="65264" c:type="GDK_KEY_Pointer_DblClick2">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Pointer_DblClick3" value="65265" c:type="GDK_KEY_Pointer_DblClick3">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Pointer_DblClick4" value="65266" c:type="GDK_KEY_Pointer_DblClick4">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Pointer_DblClick5" value="65267" c:type="GDK_KEY_Pointer_DblClick5">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Pointer_DblClick_Dflt" value="65262" c:type="GDK_KEY_Pointer_DblClick_Dflt">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Pointer_DfltBtnNext" value="65275" c:type="GDK_KEY_Pointer_DfltBtnNext">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Pointer_DfltBtnPrev" value="65276" c:type="GDK_KEY_Pointer_DfltBtnPrev">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Pointer_Down" value="65251" c:type="GDK_KEY_Pointer_Down">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Pointer_DownLeft" value="65254" c:type="GDK_KEY_Pointer_DownLeft">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Pointer_DownRight" value="65255" c:type="GDK_KEY_Pointer_DownRight">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Pointer_Drag1" value="65269" c:type="GDK_KEY_Pointer_Drag1">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Pointer_Drag2" value="65270" c:type="GDK_KEY_Pointer_Drag2">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Pointer_Drag3" value="65271" c:type="GDK_KEY_Pointer_Drag3">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Pointer_Drag4" value="65272" c:type="GDK_KEY_Pointer_Drag4">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Pointer_Drag5" value="65277" c:type="GDK_KEY_Pointer_Drag5">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Pointer_Drag_Dflt" value="65268" c:type="GDK_KEY_Pointer_Drag_Dflt">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Pointer_EnableKeys" value="65273" c:type="GDK_KEY_Pointer_EnableKeys">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Pointer_Left" value="65248" c:type="GDK_KEY_Pointer_Left">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Pointer_Right" value="65249" c:type="GDK_KEY_Pointer_Right">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Pointer_Up" value="65250" c:type="GDK_KEY_Pointer_Up">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Pointer_UpLeft" value="65252" c:type="GDK_KEY_Pointer_UpLeft">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Pointer_UpRight" value="65253" c:type="GDK_KEY_Pointer_UpRight">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_PowerDown" value="269025057" c:type="GDK_KEY_PowerDown">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_PowerOff" value="269025066" c:type="GDK_KEY_PowerOff">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Prev_VMode" value="269024803" c:type="GDK_KEY_Prev_VMode">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Prev_Virtual_Screen" value="65233" c:type="GDK_KEY_Prev_Virtual_Screen">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_PreviousCandidate" value="65342" c:type="GDK_KEY_PreviousCandidate">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Print" value="65377" c:type="GDK_KEY_Print">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Prior" value="65365" c:type="GDK_KEY_Prior">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Q" value="81" c:type="GDK_KEY_Q">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_R" value="82" c:type="GDK_KEY_R">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_R1" value="65490" c:type="GDK_KEY_R1">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_R10" value="65499" c:type="GDK_KEY_R10">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_R11" value="65500" c:type="GDK_KEY_R11">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_R12" value="65501" c:type="GDK_KEY_R12">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_R13" value="65502" c:type="GDK_KEY_R13">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_R14" value="65503" c:type="GDK_KEY_R14">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_R15" value="65504" c:type="GDK_KEY_R15">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_R2" value="65491" c:type="GDK_KEY_R2">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_R3" value="65492" c:type="GDK_KEY_R3">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_R4" value="65493" c:type="GDK_KEY_R4">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_R5" value="65494" c:type="GDK_KEY_R5">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_R6" value="65495" c:type="GDK_KEY_R6">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_R7" value="65496" c:type="GDK_KEY_R7">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_R8" value="65497" c:type="GDK_KEY_R8">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_R9" value="65498" c:type="GDK_KEY_R9">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_RFKill" value="269025205" c:type="GDK_KEY_RFKill">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Racute" value="448" c:type="GDK_KEY_Racute">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Rcaron" value="472" c:type="GDK_KEY_Rcaron">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Rcedilla" value="931" c:type="GDK_KEY_Rcedilla">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Red" value="269025187" c:type="GDK_KEY_Red">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Redo" value="65382" c:type="GDK_KEY_Redo">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Refresh" value="269025065" c:type="GDK_KEY_Refresh">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Reload" value="269025139" c:type="GDK_KEY_Reload">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_RepeatKeys_Enable" value="65138" c:type="GDK_KEY_RepeatKeys_Enable">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Reply" value="269025138" c:type="GDK_KEY_Reply">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Return" value="65293" c:type="GDK_KEY_Return">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Right" value="65363" c:type="GDK_KEY_Right">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_RockerDown" value="269025060" c:type="GDK_KEY_RockerDown">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_RockerEnter" value="269025061" c:type="GDK_KEY_RockerEnter">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_RockerUp" value="269025059" c:type="GDK_KEY_RockerUp">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Romaji" value="65316" c:type="GDK_KEY_Romaji">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_RotateWindows" value="269025140" c:type="GDK_KEY_RotateWindows">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_RotationKB" value="269025142" c:type="GDK_KEY_RotationKB">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_RotationPB" value="269025141" c:type="GDK_KEY_RotationPB">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_RupeeSign" value="16785576" c:type="GDK_KEY_RupeeSign">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_S" value="83" c:type="GDK_KEY_S">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_SCHWA" value="16777615" c:type="GDK_KEY_SCHWA">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Sabovedot" value="16784992" c:type="GDK_KEY_Sabovedot">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Sacute" value="422" c:type="GDK_KEY_Sacute">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Save" value="269025143" c:type="GDK_KEY_Save">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Scaron" value="425" c:type="GDK_KEY_Scaron">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Scedilla" value="426" c:type="GDK_KEY_Scedilla">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Scircumflex" value="734" c:type="GDK_KEY_Scircumflex">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ScreenSaver" value="269025069" c:type="GDK_KEY_ScreenSaver">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ScrollClick" value="269025146" c:type="GDK_KEY_ScrollClick">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ScrollDown" value="269025145" c:type="GDK_KEY_ScrollDown">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ScrollUp" value="269025144" c:type="GDK_KEY_ScrollUp">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Scroll_Lock" value="65300" c:type="GDK_KEY_Scroll_Lock">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Search" value="269025051" c:type="GDK_KEY_Search">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Select" value="65376" c:type="GDK_KEY_Select">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_SelectButton" value="269025184" c:type="GDK_KEY_SelectButton">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Send" value="269025147" c:type="GDK_KEY_Send">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Serbian_DJE" value="1713" c:type="GDK_KEY_Serbian_DJE">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Serbian_DZE" value="1727" c:type="GDK_KEY_Serbian_DZE">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Serbian_JE" value="1720" c:type="GDK_KEY_Serbian_JE">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Serbian_LJE" value="1721" c:type="GDK_KEY_Serbian_LJE">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Serbian_NJE" value="1722" c:type="GDK_KEY_Serbian_NJE">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Serbian_TSHE" value="1723" c:type="GDK_KEY_Serbian_TSHE">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Serbian_dje" value="1697" c:type="GDK_KEY_Serbian_dje">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Serbian_dze" value="1711" c:type="GDK_KEY_Serbian_dze">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Serbian_je" value="1704" c:type="GDK_KEY_Serbian_je">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Serbian_lje" value="1705" c:type="GDK_KEY_Serbian_lje">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Serbian_nje" value="1706" c:type="GDK_KEY_Serbian_nje">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Serbian_tshe" value="1707" c:type="GDK_KEY_Serbian_tshe">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Shift_L" value="65505" c:type="GDK_KEY_Shift_L">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Shift_Lock" value="65510" c:type="GDK_KEY_Shift_Lock">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Shift_R" value="65506" c:type="GDK_KEY_Shift_R">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Shop" value="269025078" c:type="GDK_KEY_Shop">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_SingleCandidate" value="65340" c:type="GDK_KEY_SingleCandidate">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Sinh_a" value="16780677" c:type="GDK_KEY_Sinh_a">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Sinh_aa" value="16780678" c:type="GDK_KEY_Sinh_aa">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Sinh_aa2" value="16780751" c:type="GDK_KEY_Sinh_aa2">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Sinh_ae" value="16780679" c:type="GDK_KEY_Sinh_ae">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Sinh_ae2" value="16780752" c:type="GDK_KEY_Sinh_ae2">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Sinh_aee" value="16780680" c:type="GDK_KEY_Sinh_aee">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Sinh_aee2" value="16780753" c:type="GDK_KEY_Sinh_aee2">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Sinh_ai" value="16780691" c:type="GDK_KEY_Sinh_ai">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Sinh_ai2" value="16780763" c:type="GDK_KEY_Sinh_ai2">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Sinh_al" value="16780746" c:type="GDK_KEY_Sinh_al">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Sinh_au" value="16780694" c:type="GDK_KEY_Sinh_au">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Sinh_au2" value="16780766" c:type="GDK_KEY_Sinh_au2">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Sinh_ba" value="16780726" c:type="GDK_KEY_Sinh_ba">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Sinh_bha" value="16780727" c:type="GDK_KEY_Sinh_bha">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Sinh_ca" value="16780704" c:type="GDK_KEY_Sinh_ca">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Sinh_cha" value="16780705" c:type="GDK_KEY_Sinh_cha">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Sinh_dda" value="16780713" c:type="GDK_KEY_Sinh_dda">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Sinh_ddha" value="16780714" c:type="GDK_KEY_Sinh_ddha">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Sinh_dha" value="16780719" c:type="GDK_KEY_Sinh_dha">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Sinh_dhha" value="16780720" c:type="GDK_KEY_Sinh_dhha">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Sinh_e" value="16780689" c:type="GDK_KEY_Sinh_e">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Sinh_e2" value="16780761" c:type="GDK_KEY_Sinh_e2">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Sinh_ee" value="16780690" c:type="GDK_KEY_Sinh_ee">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Sinh_ee2" value="16780762" c:type="GDK_KEY_Sinh_ee2">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Sinh_fa" value="16780742" c:type="GDK_KEY_Sinh_fa">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Sinh_ga" value="16780700" c:type="GDK_KEY_Sinh_ga">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Sinh_gha" value="16780701" c:type="GDK_KEY_Sinh_gha">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Sinh_h2" value="16780675" c:type="GDK_KEY_Sinh_h2">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Sinh_ha" value="16780740" c:type="GDK_KEY_Sinh_ha">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Sinh_i" value="16780681" c:type="GDK_KEY_Sinh_i">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Sinh_i2" value="16780754" c:type="GDK_KEY_Sinh_i2">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Sinh_ii" value="16780682" c:type="GDK_KEY_Sinh_ii">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Sinh_ii2" value="16780755" c:type="GDK_KEY_Sinh_ii2">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Sinh_ja" value="16780706" c:type="GDK_KEY_Sinh_ja">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Sinh_jha" value="16780707" c:type="GDK_KEY_Sinh_jha">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Sinh_jnya" value="16780709" c:type="GDK_KEY_Sinh_jnya">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Sinh_ka" value="16780698" c:type="GDK_KEY_Sinh_ka">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Sinh_kha" value="16780699" c:type="GDK_KEY_Sinh_kha">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Sinh_kunddaliya" value="16780788" c:type="GDK_KEY_Sinh_kunddaliya">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Sinh_la" value="16780733" c:type="GDK_KEY_Sinh_la">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Sinh_lla" value="16780741" c:type="GDK_KEY_Sinh_lla">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Sinh_lu" value="16780687" c:type="GDK_KEY_Sinh_lu">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Sinh_lu2" value="16780767" c:type="GDK_KEY_Sinh_lu2">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Sinh_luu" value="16780688" c:type="GDK_KEY_Sinh_luu">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Sinh_luu2" value="16780787" c:type="GDK_KEY_Sinh_luu2">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Sinh_ma" value="16780728" c:type="GDK_KEY_Sinh_ma">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Sinh_mba" value="16780729" c:type="GDK_KEY_Sinh_mba">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Sinh_na" value="16780721" c:type="GDK_KEY_Sinh_na">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Sinh_ndda" value="16780716" c:type="GDK_KEY_Sinh_ndda">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Sinh_ndha" value="16780723" c:type="GDK_KEY_Sinh_ndha">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Sinh_ng" value="16780674" c:type="GDK_KEY_Sinh_ng">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Sinh_ng2" value="16780702" c:type="GDK_KEY_Sinh_ng2">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Sinh_nga" value="16780703" c:type="GDK_KEY_Sinh_nga">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Sinh_nja" value="16780710" c:type="GDK_KEY_Sinh_nja">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Sinh_nna" value="16780715" c:type="GDK_KEY_Sinh_nna">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Sinh_nya" value="16780708" c:type="GDK_KEY_Sinh_nya">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Sinh_o" value="16780692" c:type="GDK_KEY_Sinh_o">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Sinh_o2" value="16780764" c:type="GDK_KEY_Sinh_o2">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Sinh_oo" value="16780693" c:type="GDK_KEY_Sinh_oo">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Sinh_oo2" value="16780765" c:type="GDK_KEY_Sinh_oo2">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Sinh_pa" value="16780724" c:type="GDK_KEY_Sinh_pa">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Sinh_pha" value="16780725" c:type="GDK_KEY_Sinh_pha">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Sinh_ra" value="16780731" c:type="GDK_KEY_Sinh_ra">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Sinh_ri" value="16780685" c:type="GDK_KEY_Sinh_ri">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Sinh_rii" value="16780686" c:type="GDK_KEY_Sinh_rii">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Sinh_ru2" value="16780760" c:type="GDK_KEY_Sinh_ru2">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Sinh_ruu2" value="16780786" c:type="GDK_KEY_Sinh_ruu2">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Sinh_sa" value="16780739" c:type="GDK_KEY_Sinh_sa">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Sinh_sha" value="16780737" c:type="GDK_KEY_Sinh_sha">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Sinh_ssha" value="16780738" c:type="GDK_KEY_Sinh_ssha">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Sinh_tha" value="16780717" c:type="GDK_KEY_Sinh_tha">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Sinh_thha" value="16780718" c:type="GDK_KEY_Sinh_thha">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Sinh_tta" value="16780711" c:type="GDK_KEY_Sinh_tta">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Sinh_ttha" value="16780712" c:type="GDK_KEY_Sinh_ttha">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Sinh_u" value="16780683" c:type="GDK_KEY_Sinh_u">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Sinh_u2" value="16780756" c:type="GDK_KEY_Sinh_u2">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Sinh_uu" value="16780684" c:type="GDK_KEY_Sinh_uu">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Sinh_uu2" value="16780758" c:type="GDK_KEY_Sinh_uu2">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Sinh_va" value="16780736" c:type="GDK_KEY_Sinh_va">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Sinh_ya" value="16780730" c:type="GDK_KEY_Sinh_ya">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Sleep" value="269025071" c:type="GDK_KEY_Sleep">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_SlowKeys_Enable" value="65139" c:type="GDK_KEY_SlowKeys_Enable">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Spell" value="269025148" c:type="GDK_KEY_Spell">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_SplitScreen" value="269025149" c:type="GDK_KEY_SplitScreen">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Standby" value="269025040" c:type="GDK_KEY_Standby">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Start" value="269025050" c:type="GDK_KEY_Start">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_StickyKeys_Enable" value="65141" c:type="GDK_KEY_StickyKeys_Enable">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Stop" value="269025064" c:type="GDK_KEY_Stop">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Subtitle" value="269025178" c:type="GDK_KEY_Subtitle">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Super_L" value="65515" c:type="GDK_KEY_Super_L">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Super_R" value="65516" c:type="GDK_KEY_Super_R">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Support" value="269025150" c:type="GDK_KEY_Support">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Suspend" value="269025191" c:type="GDK_KEY_Suspend">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Switch_VT_1" value="269024769" c:type="GDK_KEY_Switch_VT_1">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Switch_VT_10" value="269024778" c:type="GDK_KEY_Switch_VT_10">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Switch_VT_11" value="269024779" c:type="GDK_KEY_Switch_VT_11">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Switch_VT_12" value="269024780" c:type="GDK_KEY_Switch_VT_12">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Switch_VT_2" value="269024770" c:type="GDK_KEY_Switch_VT_2">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Switch_VT_3" value="269024771" c:type="GDK_KEY_Switch_VT_3">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Switch_VT_4" value="269024772" c:type="GDK_KEY_Switch_VT_4">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Switch_VT_5" value="269024773" c:type="GDK_KEY_Switch_VT_5">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Switch_VT_6" value="269024774" c:type="GDK_KEY_Switch_VT_6">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Switch_VT_7" value="269024775" c:type="GDK_KEY_Switch_VT_7">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Switch_VT_8" value="269024776" c:type="GDK_KEY_Switch_VT_8">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Switch_VT_9" value="269024777" c:type="GDK_KEY_Switch_VT_9">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Sys_Req" value="65301" c:type="GDK_KEY_Sys_Req">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_T" value="84" c:type="GDK_KEY_T">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_THORN" value="222" c:type="GDK_KEY_THORN">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Tab" value="65289" c:type="GDK_KEY_Tab">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Tabovedot" value="16785002" c:type="GDK_KEY_Tabovedot">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_TaskPane" value="269025151" c:type="GDK_KEY_TaskPane">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Tcaron" value="427" c:type="GDK_KEY_Tcaron">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Tcedilla" value="478" c:type="GDK_KEY_Tcedilla">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Terminal" value="269025152" c:type="GDK_KEY_Terminal">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Terminate_Server" value="65237" c:type="GDK_KEY_Terminate_Server">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_baht" value="3551" c:type="GDK_KEY_Thai_baht">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_bobaimai" value="3514" c:type="GDK_KEY_Thai_bobaimai">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_chochan" value="3496" c:type="GDK_KEY_Thai_chochan">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_chochang" value="3498" c:type="GDK_KEY_Thai_chochang">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_choching" value="3497" c:type="GDK_KEY_Thai_choching">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_chochoe" value="3500" c:type="GDK_KEY_Thai_chochoe">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_dochada" value="3502" c:type="GDK_KEY_Thai_dochada">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_dodek" value="3508" c:type="GDK_KEY_Thai_dodek">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_fofa" value="3517" c:type="GDK_KEY_Thai_fofa">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_fofan" value="3519" c:type="GDK_KEY_Thai_fofan">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_hohip" value="3531" c:type="GDK_KEY_Thai_hohip">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_honokhuk" value="3534" c:type="GDK_KEY_Thai_honokhuk">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_khokhai" value="3490" c:type="GDK_KEY_Thai_khokhai">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_khokhon" value="3493" c:type="GDK_KEY_Thai_khokhon">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_khokhuat" value="3491" c:type="GDK_KEY_Thai_khokhuat">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_khokhwai" value="3492" c:type="GDK_KEY_Thai_khokhwai">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_khorakhang" value="3494" c:type="GDK_KEY_Thai_khorakhang">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_kokai" value="3489" c:type="GDK_KEY_Thai_kokai">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_lakkhangyao" value="3557" c:type="GDK_KEY_Thai_lakkhangyao">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_lekchet" value="3575" c:type="GDK_KEY_Thai_lekchet">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_lekha" value="3573" c:type="GDK_KEY_Thai_lekha">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_lekhok" value="3574" c:type="GDK_KEY_Thai_lekhok">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_lekkao" value="3577" c:type="GDK_KEY_Thai_lekkao">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_leknung" value="3569" c:type="GDK_KEY_Thai_leknung">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_lekpaet" value="3576" c:type="GDK_KEY_Thai_lekpaet">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_leksam" value="3571" c:type="GDK_KEY_Thai_leksam">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_leksi" value="3572" c:type="GDK_KEY_Thai_leksi">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_leksong" value="3570" c:type="GDK_KEY_Thai_leksong">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_leksun" value="3568" c:type="GDK_KEY_Thai_leksun">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_lochula" value="3532" c:type="GDK_KEY_Thai_lochula">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_loling" value="3525" c:type="GDK_KEY_Thai_loling">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_lu" value="3526" c:type="GDK_KEY_Thai_lu">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_maichattawa" value="3563" c:type="GDK_KEY_Thai_maichattawa">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_maiek" value="3560" c:type="GDK_KEY_Thai_maiek">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_maihanakat" value="3537" c:type="GDK_KEY_Thai_maihanakat">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_maihanakat_maitho" value="3550" c:type="GDK_KEY_Thai_maihanakat_maitho">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_maitaikhu" value="3559" c:type="GDK_KEY_Thai_maitaikhu">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_maitho" value="3561" c:type="GDK_KEY_Thai_maitho">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_maitri" value="3562" c:type="GDK_KEY_Thai_maitri">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_maiyamok" value="3558" c:type="GDK_KEY_Thai_maiyamok">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_moma" value="3521" c:type="GDK_KEY_Thai_moma">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_ngongu" value="3495" c:type="GDK_KEY_Thai_ngongu">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_nikhahit" value="3565" c:type="GDK_KEY_Thai_nikhahit">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_nonen" value="3507" c:type="GDK_KEY_Thai_nonen">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_nonu" value="3513" c:type="GDK_KEY_Thai_nonu">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_oang" value="3533" c:type="GDK_KEY_Thai_oang">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_paiyannoi" value="3535" c:type="GDK_KEY_Thai_paiyannoi">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_phinthu" value="3546" c:type="GDK_KEY_Thai_phinthu">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_phophan" value="3518" c:type="GDK_KEY_Thai_phophan">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_phophung" value="3516" c:type="GDK_KEY_Thai_phophung">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_phosamphao" value="3520" c:type="GDK_KEY_Thai_phosamphao">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_popla" value="3515" c:type="GDK_KEY_Thai_popla">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_rorua" value="3523" c:type="GDK_KEY_Thai_rorua">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_ru" value="3524" c:type="GDK_KEY_Thai_ru">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_saraa" value="3536" c:type="GDK_KEY_Thai_saraa">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_saraaa" value="3538" c:type="GDK_KEY_Thai_saraaa">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_saraae" value="3553" c:type="GDK_KEY_Thai_saraae">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_saraaimaimalai" value="3556" c:type="GDK_KEY_Thai_saraaimaimalai">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_saraaimaimuan" value="3555" c:type="GDK_KEY_Thai_saraaimaimuan">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_saraam" value="3539" c:type="GDK_KEY_Thai_saraam">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_sarae" value="3552" c:type="GDK_KEY_Thai_sarae">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_sarai" value="3540" c:type="GDK_KEY_Thai_sarai">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_saraii" value="3541" c:type="GDK_KEY_Thai_saraii">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_sarao" value="3554" c:type="GDK_KEY_Thai_sarao">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_sarau" value="3544" c:type="GDK_KEY_Thai_sarau">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_saraue" value="3542" c:type="GDK_KEY_Thai_saraue">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_sarauee" value="3543" c:type="GDK_KEY_Thai_sarauee">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_sarauu" value="3545" c:type="GDK_KEY_Thai_sarauu">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_sorusi" value="3529" c:type="GDK_KEY_Thai_sorusi">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_sosala" value="3528" c:type="GDK_KEY_Thai_sosala">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_soso" value="3499" c:type="GDK_KEY_Thai_soso">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_sosua" value="3530" c:type="GDK_KEY_Thai_sosua">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_thanthakhat" value="3564" c:type="GDK_KEY_Thai_thanthakhat">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_thonangmontho" value="3505" c:type="GDK_KEY_Thai_thonangmontho">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_thophuthao" value="3506" c:type="GDK_KEY_Thai_thophuthao">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_thothahan" value="3511" c:type="GDK_KEY_Thai_thothahan">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_thothan" value="3504" c:type="GDK_KEY_Thai_thothan">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_thothong" value="3512" c:type="GDK_KEY_Thai_thothong">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_thothung" value="3510" c:type="GDK_KEY_Thai_thothung">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_topatak" value="3503" c:type="GDK_KEY_Thai_topatak">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_totao" value="3509" c:type="GDK_KEY_Thai_totao">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_wowaen" value="3527" c:type="GDK_KEY_Thai_wowaen">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_yoyak" value="3522" c:type="GDK_KEY_Thai_yoyak">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_yoying" value="3501" c:type="GDK_KEY_Thai_yoying">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thorn" value="222" c:type="GDK_KEY_Thorn">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Time" value="269025183" c:type="GDK_KEY_Time">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ToDoList" value="269025055" c:type="GDK_KEY_ToDoList">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Tools" value="269025153" c:type="GDK_KEY_Tools">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_TopMenu" value="269025186" c:type="GDK_KEY_TopMenu">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_TouchpadOff" value="269025201" c:type="GDK_KEY_TouchpadOff">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_TouchpadOn" value="269025200" c:type="GDK_KEY_TouchpadOn">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_TouchpadToggle" value="269025193" c:type="GDK_KEY_TouchpadToggle">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Touroku" value="65323" c:type="GDK_KEY_Touroku">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Travel" value="269025154" c:type="GDK_KEY_Travel">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Tslash" value="940" c:type="GDK_KEY_Tslash">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_U" value="85" c:type="GDK_KEY_U">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_UWB" value="269025174" c:type="GDK_KEY_UWB">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Uacute" value="218" c:type="GDK_KEY_Uacute">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ubelowdot" value="16785124" c:type="GDK_KEY_Ubelowdot">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ubreve" value="733" c:type="GDK_KEY_Ubreve">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ucircumflex" value="219" c:type="GDK_KEY_Ucircumflex">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Udiaeresis" value="220" c:type="GDK_KEY_Udiaeresis">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Udoubleacute" value="475" c:type="GDK_KEY_Udoubleacute">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ugrave" value="217" c:type="GDK_KEY_Ugrave">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Uhook" value="16785126" c:type="GDK_KEY_Uhook">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Uhorn" value="16777647" c:type="GDK_KEY_Uhorn">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Uhornacute" value="16785128" c:type="GDK_KEY_Uhornacute">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Uhornbelowdot" value="16785136" c:type="GDK_KEY_Uhornbelowdot">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Uhorngrave" value="16785130" c:type="GDK_KEY_Uhorngrave">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Uhornhook" value="16785132" c:type="GDK_KEY_Uhornhook">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Uhorntilde" value="16785134" c:type="GDK_KEY_Uhorntilde">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ukrainian_GHE_WITH_UPTURN" value="1725" c:type="GDK_KEY_Ukrainian_GHE_WITH_UPTURN">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ukrainian_I" value="1718" c:type="GDK_KEY_Ukrainian_I">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ukrainian_IE" value="1716" c:type="GDK_KEY_Ukrainian_IE">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ukrainian_YI" value="1719" c:type="GDK_KEY_Ukrainian_YI">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ukrainian_ghe_with_upturn" value="1709" c:type="GDK_KEY_Ukrainian_ghe_with_upturn">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ukrainian_i" value="1702" c:type="GDK_KEY_Ukrainian_i">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ukrainian_ie" value="1700" c:type="GDK_KEY_Ukrainian_ie">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ukrainian_yi" value="1703" c:type="GDK_KEY_Ukrainian_yi">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ukranian_I" value="1718" c:type="GDK_KEY_Ukranian_I">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ukranian_JE" value="1716" c:type="GDK_KEY_Ukranian_JE">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ukranian_YI" value="1719" c:type="GDK_KEY_Ukranian_YI">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ukranian_i" value="1702" c:type="GDK_KEY_Ukranian_i">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ukranian_je" value="1700" c:type="GDK_KEY_Ukranian_je">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ukranian_yi" value="1703" c:type="GDK_KEY_Ukranian_yi">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Umacron" value="990" c:type="GDK_KEY_Umacron">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Undo" value="65381" c:type="GDK_KEY_Undo">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ungrab" value="269024800" c:type="GDK_KEY_Ungrab">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Uogonek" value="985" c:type="GDK_KEY_Uogonek">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Up" value="65362" c:type="GDK_KEY_Up">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Uring" value="473" c:type="GDK_KEY_Uring">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_User1KB" value="269025157" c:type="GDK_KEY_User1KB">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_User2KB" value="269025158" c:type="GDK_KEY_User2KB">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_UserPB" value="269025156" c:type="GDK_KEY_UserPB">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Utilde" value="989" c:type="GDK_KEY_Utilde">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_V" value="86" c:type="GDK_KEY_V">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_VendorHome" value="269025076" c:type="GDK_KEY_VendorHome">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Video" value="269025159" c:type="GDK_KEY_Video">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_View" value="269025185" c:type="GDK_KEY_View">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_VoidSymbol" value="16777215" c:type="GDK_KEY_VoidSymbol">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_W" value="87" c:type="GDK_KEY_W">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_WLAN" value="269025173" c:type="GDK_KEY_WLAN">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_WWAN" value="269025204" c:type="GDK_KEY_WWAN">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_WWW" value="269025070" c:type="GDK_KEY_WWW">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Wacute" value="16785026" c:type="GDK_KEY_Wacute">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_WakeUp" value="269025067" c:type="GDK_KEY_WakeUp">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Wcircumflex" value="16777588" c:type="GDK_KEY_Wcircumflex">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Wdiaeresis" value="16785028" c:type="GDK_KEY_Wdiaeresis">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_WebCam" value="269025167" c:type="GDK_KEY_WebCam">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Wgrave" value="16785024" c:type="GDK_KEY_Wgrave">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_WheelButton" value="269025160" c:type="GDK_KEY_WheelButton">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_WindowClear" value="269025109" c:type="GDK_KEY_WindowClear">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_WonSign" value="16785577" c:type="GDK_KEY_WonSign">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Word" value="269025161" c:type="GDK_KEY_Word">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_X" value="88" c:type="GDK_KEY_X">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Xabovedot" value="16785034" c:type="GDK_KEY_Xabovedot">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Xfer" value="269025162" c:type="GDK_KEY_Xfer">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Y" value="89" c:type="GDK_KEY_Y">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Yacute" value="221" c:type="GDK_KEY_Yacute">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ybelowdot" value="16785140" c:type="GDK_KEY_Ybelowdot">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ycircumflex" value="16777590" c:type="GDK_KEY_Ycircumflex">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ydiaeresis" value="5054" c:type="GDK_KEY_Ydiaeresis">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Yellow" value="269025189" c:type="GDK_KEY_Yellow">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ygrave" value="16785138" c:type="GDK_KEY_Ygrave">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Yhook" value="16785142" c:type="GDK_KEY_Yhook">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ytilde" value="16785144" c:type="GDK_KEY_Ytilde">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Z" value="90" c:type="GDK_KEY_Z">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Zabovedot" value="431" c:type="GDK_KEY_Zabovedot">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Zacute" value="428" c:type="GDK_KEY_Zacute">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Zcaron" value="430" c:type="GDK_KEY_Zcaron">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Zen_Koho" value="65341" c:type="GDK_KEY_Zen_Koho">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Zenkaku" value="65320" c:type="GDK_KEY_Zenkaku">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Zenkaku_Hankaku" value="65322" c:type="GDK_KEY_Zenkaku_Hankaku">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ZoomIn" value="269025163" c:type="GDK_KEY_ZoomIn">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ZoomOut" value="269025164" c:type="GDK_KEY_ZoomOut">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Zstroke" value="16777653" c:type="GDK_KEY_Zstroke">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_a" value="97" c:type="GDK_KEY_a">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_aacute" value="225" c:type="GDK_KEY_aacute">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_abelowdot" value="16785057" c:type="GDK_KEY_abelowdot">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_abovedot" value="511" c:type="GDK_KEY_abovedot">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_abreve" value="483" c:type="GDK_KEY_abreve">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_abreveacute" value="16785071" c:type="GDK_KEY_abreveacute">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_abrevebelowdot" value="16785079" c:type="GDK_KEY_abrevebelowdot">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_abrevegrave" value="16785073" c:type="GDK_KEY_abrevegrave">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_abrevehook" value="16785075" c:type="GDK_KEY_abrevehook">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_abrevetilde" value="16785077" c:type="GDK_KEY_abrevetilde">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_acircumflex" value="226" c:type="GDK_KEY_acircumflex">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_acircumflexacute" value="16785061" c:type="GDK_KEY_acircumflexacute">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_acircumflexbelowdot" value="16785069" c:type="GDK_KEY_acircumflexbelowdot">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_acircumflexgrave" value="16785063" c:type="GDK_KEY_acircumflexgrave">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_acircumflexhook" value="16785065" c:type="GDK_KEY_acircumflexhook">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_acircumflextilde" value="16785067" c:type="GDK_KEY_acircumflextilde">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_acute" value="180" c:type="GDK_KEY_acute">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_adiaeresis" value="228" c:type="GDK_KEY_adiaeresis">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ae" value="230" c:type="GDK_KEY_ae">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_agrave" value="224" c:type="GDK_KEY_agrave">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ahook" value="16785059" c:type="GDK_KEY_ahook">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_amacron" value="992" c:type="GDK_KEY_amacron">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ampersand" value="38" c:type="GDK_KEY_ampersand">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_aogonek" value="433" c:type="GDK_KEY_aogonek">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_apostrophe" value="39" c:type="GDK_KEY_apostrophe">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_approxeq" value="16785992" c:type="GDK_KEY_approxeq">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_approximate" value="2248" c:type="GDK_KEY_approximate">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_aring" value="229" c:type="GDK_KEY_aring">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_asciicircum" value="94" c:type="GDK_KEY_asciicircum">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_asciitilde" value="126" c:type="GDK_KEY_asciitilde">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_asterisk" value="42" c:type="GDK_KEY_asterisk">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_at" value="64" c:type="GDK_KEY_at">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_atilde" value="227" c:type="GDK_KEY_atilde">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_b" value="98" c:type="GDK_KEY_b">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_babovedot" value="16784899" c:type="GDK_KEY_babovedot">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_backslash" value="92" c:type="GDK_KEY_backslash">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ballotcross" value="2804" c:type="GDK_KEY_ballotcross">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_bar" value="124" c:type="GDK_KEY_bar">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_because" value="16785973" c:type="GDK_KEY_because">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_blank" value="2527" c:type="GDK_KEY_blank">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_botintegral" value="2213" c:type="GDK_KEY_botintegral">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_botleftparens" value="2220" c:type="GDK_KEY_botleftparens">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_botleftsqbracket" value="2216" c:type="GDK_KEY_botleftsqbracket">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_botleftsummation" value="2226" c:type="GDK_KEY_botleftsummation">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_botrightparens" value="2222" c:type="GDK_KEY_botrightparens">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_botrightsqbracket" value="2218" c:type="GDK_KEY_botrightsqbracket">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_botrightsummation" value="2230" c:type="GDK_KEY_botrightsummation">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_bott" value="2550" c:type="GDK_KEY_bott">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_botvertsummationconnector" value="2228" c:type="GDK_KEY_botvertsummationconnector">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braceleft" value="123" c:type="GDK_KEY_braceleft">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braceright" value="125" c:type="GDK_KEY_braceright">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_bracketleft" value="91" c:type="GDK_KEY_bracketleft">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_bracketright" value="93" c:type="GDK_KEY_bracketright">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_blank" value="16787456" c:type="GDK_KEY_braille_blank">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dot_1" value="65521" c:type="GDK_KEY_braille_dot_1">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dot_10" value="65530" c:type="GDK_KEY_braille_dot_10">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dot_2" value="65522" c:type="GDK_KEY_braille_dot_2">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dot_3" value="65523" c:type="GDK_KEY_braille_dot_3">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dot_4" value="65524" c:type="GDK_KEY_braille_dot_4">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dot_5" value="65525" c:type="GDK_KEY_braille_dot_5">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dot_6" value="65526" c:type="GDK_KEY_braille_dot_6">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dot_7" value="65527" c:type="GDK_KEY_braille_dot_7">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dot_8" value="65528" c:type="GDK_KEY_braille_dot_8">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dot_9" value="65529" c:type="GDK_KEY_braille_dot_9">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_1" value="16787457" c:type="GDK_KEY_braille_dots_1">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_12" value="16787459" c:type="GDK_KEY_braille_dots_12">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_123" value="16787463" c:type="GDK_KEY_braille_dots_123">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_1234" value="16787471" c:type="GDK_KEY_braille_dots_1234">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_12345" value="16787487" c:type="GDK_KEY_braille_dots_12345">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_123456" value="16787519" c:type="GDK_KEY_braille_dots_123456">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_1234567" value="16787583" c:type="GDK_KEY_braille_dots_1234567">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_12345678" value="16787711" c:type="GDK_KEY_braille_dots_12345678">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_1234568" value="16787647" c:type="GDK_KEY_braille_dots_1234568">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_123457" value="16787551" c:type="GDK_KEY_braille_dots_123457">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_1234578" value="16787679" c:type="GDK_KEY_braille_dots_1234578">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_123458" value="16787615" c:type="GDK_KEY_braille_dots_123458">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_12346" value="16787503" c:type="GDK_KEY_braille_dots_12346">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_123467" value="16787567" c:type="GDK_KEY_braille_dots_123467">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_1234678" value="16787695" c:type="GDK_KEY_braille_dots_1234678">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_123468" value="16787631" c:type="GDK_KEY_braille_dots_123468">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_12347" value="16787535" c:type="GDK_KEY_braille_dots_12347">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_123478" value="16787663" c:type="GDK_KEY_braille_dots_123478">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_12348" value="16787599" c:type="GDK_KEY_braille_dots_12348">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_1235" value="16787479" c:type="GDK_KEY_braille_dots_1235">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_12356" value="16787511" c:type="GDK_KEY_braille_dots_12356">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_123567" value="16787575" c:type="GDK_KEY_braille_dots_123567">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_1235678" value="16787703" c:type="GDK_KEY_braille_dots_1235678">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_123568" value="16787639" c:type="GDK_KEY_braille_dots_123568">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_12357" value="16787543" c:type="GDK_KEY_braille_dots_12357">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_123578" value="16787671" c:type="GDK_KEY_braille_dots_123578">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_12358" value="16787607" c:type="GDK_KEY_braille_dots_12358">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_1236" value="16787495" c:type="GDK_KEY_braille_dots_1236">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_12367" value="16787559" c:type="GDK_KEY_braille_dots_12367">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_123678" value="16787687" c:type="GDK_KEY_braille_dots_123678">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_12368" value="16787623" c:type="GDK_KEY_braille_dots_12368">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_1237" value="16787527" c:type="GDK_KEY_braille_dots_1237">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_12378" value="16787655" c:type="GDK_KEY_braille_dots_12378">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_1238" value="16787591" c:type="GDK_KEY_braille_dots_1238">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_124" value="16787467" c:type="GDK_KEY_braille_dots_124">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_1245" value="16787483" c:type="GDK_KEY_braille_dots_1245">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_12456" value="16787515" c:type="GDK_KEY_braille_dots_12456">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_124567" value="16787579" c:type="GDK_KEY_braille_dots_124567">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_1245678" value="16787707" c:type="GDK_KEY_braille_dots_1245678">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_124568" value="16787643" c:type="GDK_KEY_braille_dots_124568">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_12457" value="16787547" c:type="GDK_KEY_braille_dots_12457">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_124578" value="16787675" c:type="GDK_KEY_braille_dots_124578">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_12458" value="16787611" c:type="GDK_KEY_braille_dots_12458">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_1246" value="16787499" c:type="GDK_KEY_braille_dots_1246">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_12467" value="16787563" c:type="GDK_KEY_braille_dots_12467">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_124678" value="16787691" c:type="GDK_KEY_braille_dots_124678">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_12468" value="16787627" c:type="GDK_KEY_braille_dots_12468">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_1247" value="16787531" c:type="GDK_KEY_braille_dots_1247">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_12478" value="16787659" c:type="GDK_KEY_braille_dots_12478">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_1248" value="16787595" c:type="GDK_KEY_braille_dots_1248">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_125" value="16787475" c:type="GDK_KEY_braille_dots_125">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_1256" value="16787507" c:type="GDK_KEY_braille_dots_1256">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_12567" value="16787571" c:type="GDK_KEY_braille_dots_12567">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_125678" value="16787699" c:type="GDK_KEY_braille_dots_125678">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_12568" value="16787635" c:type="GDK_KEY_braille_dots_12568">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_1257" value="16787539" c:type="GDK_KEY_braille_dots_1257">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_12578" value="16787667" c:type="GDK_KEY_braille_dots_12578">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_1258" value="16787603" c:type="GDK_KEY_braille_dots_1258">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_126" value="16787491" c:type="GDK_KEY_braille_dots_126">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_1267" value="16787555" c:type="GDK_KEY_braille_dots_1267">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_12678" value="16787683" c:type="GDK_KEY_braille_dots_12678">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_1268" value="16787619" c:type="GDK_KEY_braille_dots_1268">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_127" value="16787523" c:type="GDK_KEY_braille_dots_127">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_1278" value="16787651" c:type="GDK_KEY_braille_dots_1278">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_128" value="16787587" c:type="GDK_KEY_braille_dots_128">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_13" value="16787461" c:type="GDK_KEY_braille_dots_13">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_134" value="16787469" c:type="GDK_KEY_braille_dots_134">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_1345" value="16787485" c:type="GDK_KEY_braille_dots_1345">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_13456" value="16787517" c:type="GDK_KEY_braille_dots_13456">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_134567" value="16787581" c:type="GDK_KEY_braille_dots_134567">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_1345678" value="16787709" c:type="GDK_KEY_braille_dots_1345678">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_134568" value="16787645" c:type="GDK_KEY_braille_dots_134568">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_13457" value="16787549" c:type="GDK_KEY_braille_dots_13457">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_134578" value="16787677" c:type="GDK_KEY_braille_dots_134578">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_13458" value="16787613" c:type="GDK_KEY_braille_dots_13458">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_1346" value="16787501" c:type="GDK_KEY_braille_dots_1346">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_13467" value="16787565" c:type="GDK_KEY_braille_dots_13467">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_134678" value="16787693" c:type="GDK_KEY_braille_dots_134678">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_13468" value="16787629" c:type="GDK_KEY_braille_dots_13468">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_1347" value="16787533" c:type="GDK_KEY_braille_dots_1347">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_13478" value="16787661" c:type="GDK_KEY_braille_dots_13478">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_1348" value="16787597" c:type="GDK_KEY_braille_dots_1348">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_135" value="16787477" c:type="GDK_KEY_braille_dots_135">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_1356" value="16787509" c:type="GDK_KEY_braille_dots_1356">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_13567" value="16787573" c:type="GDK_KEY_braille_dots_13567">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_135678" value="16787701" c:type="GDK_KEY_braille_dots_135678">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_13568" value="16787637" c:type="GDK_KEY_braille_dots_13568">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_1357" value="16787541" c:type="GDK_KEY_braille_dots_1357">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_13578" value="16787669" c:type="GDK_KEY_braille_dots_13578">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_1358" value="16787605" c:type="GDK_KEY_braille_dots_1358">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_136" value="16787493" c:type="GDK_KEY_braille_dots_136">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_1367" value="16787557" c:type="GDK_KEY_braille_dots_1367">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_13678" value="16787685" c:type="GDK_KEY_braille_dots_13678">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_1368" value="16787621" c:type="GDK_KEY_braille_dots_1368">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_137" value="16787525" c:type="GDK_KEY_braille_dots_137">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_1378" value="16787653" c:type="GDK_KEY_braille_dots_1378">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_138" value="16787589" c:type="GDK_KEY_braille_dots_138">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_14" value="16787465" c:type="GDK_KEY_braille_dots_14">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_145" value="16787481" c:type="GDK_KEY_braille_dots_145">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_1456" value="16787513" c:type="GDK_KEY_braille_dots_1456">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_14567" value="16787577" c:type="GDK_KEY_braille_dots_14567">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_145678" value="16787705" c:type="GDK_KEY_braille_dots_145678">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_14568" value="16787641" c:type="GDK_KEY_braille_dots_14568">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_1457" value="16787545" c:type="GDK_KEY_braille_dots_1457">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_14578" value="16787673" c:type="GDK_KEY_braille_dots_14578">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_1458" value="16787609" c:type="GDK_KEY_braille_dots_1458">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_146" value="16787497" c:type="GDK_KEY_braille_dots_146">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_1467" value="16787561" c:type="GDK_KEY_braille_dots_1467">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_14678" value="16787689" c:type="GDK_KEY_braille_dots_14678">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_1468" value="16787625" c:type="GDK_KEY_braille_dots_1468">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_147" value="16787529" c:type="GDK_KEY_braille_dots_147">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_1478" value="16787657" c:type="GDK_KEY_braille_dots_1478">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_148" value="16787593" c:type="GDK_KEY_braille_dots_148">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_15" value="16787473" c:type="GDK_KEY_braille_dots_15">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_156" value="16787505" c:type="GDK_KEY_braille_dots_156">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_1567" value="16787569" c:type="GDK_KEY_braille_dots_1567">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_15678" value="16787697" c:type="GDK_KEY_braille_dots_15678">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_1568" value="16787633" c:type="GDK_KEY_braille_dots_1568">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_157" value="16787537" c:type="GDK_KEY_braille_dots_157">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_1578" value="16787665" c:type="GDK_KEY_braille_dots_1578">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_158" value="16787601" c:type="GDK_KEY_braille_dots_158">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_16" value="16787489" c:type="GDK_KEY_braille_dots_16">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_167" value="16787553" c:type="GDK_KEY_braille_dots_167">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_1678" value="16787681" c:type="GDK_KEY_braille_dots_1678">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_168" value="16787617" c:type="GDK_KEY_braille_dots_168">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_17" value="16787521" c:type="GDK_KEY_braille_dots_17">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_178" value="16787649" c:type="GDK_KEY_braille_dots_178">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_18" value="16787585" c:type="GDK_KEY_braille_dots_18">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_2" value="16787458" c:type="GDK_KEY_braille_dots_2">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_23" value="16787462" c:type="GDK_KEY_braille_dots_23">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_234" value="16787470" c:type="GDK_KEY_braille_dots_234">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_2345" value="16787486" c:type="GDK_KEY_braille_dots_2345">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_23456" value="16787518" c:type="GDK_KEY_braille_dots_23456">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_234567" value="16787582" c:type="GDK_KEY_braille_dots_234567">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_2345678" value="16787710" c:type="GDK_KEY_braille_dots_2345678">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_234568" value="16787646" c:type="GDK_KEY_braille_dots_234568">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_23457" value="16787550" c:type="GDK_KEY_braille_dots_23457">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_234578" value="16787678" c:type="GDK_KEY_braille_dots_234578">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_23458" value="16787614" c:type="GDK_KEY_braille_dots_23458">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_2346" value="16787502" c:type="GDK_KEY_braille_dots_2346">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_23467" value="16787566" c:type="GDK_KEY_braille_dots_23467">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_234678" value="16787694" c:type="GDK_KEY_braille_dots_234678">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_23468" value="16787630" c:type="GDK_KEY_braille_dots_23468">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_2347" value="16787534" c:type="GDK_KEY_braille_dots_2347">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_23478" value="16787662" c:type="GDK_KEY_braille_dots_23478">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_2348" value="16787598" c:type="GDK_KEY_braille_dots_2348">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_235" value="16787478" c:type="GDK_KEY_braille_dots_235">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_2356" value="16787510" c:type="GDK_KEY_braille_dots_2356">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_23567" value="16787574" c:type="GDK_KEY_braille_dots_23567">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_235678" value="16787702" c:type="GDK_KEY_braille_dots_235678">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_23568" value="16787638" c:type="GDK_KEY_braille_dots_23568">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_2357" value="16787542" c:type="GDK_KEY_braille_dots_2357">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_23578" value="16787670" c:type="GDK_KEY_braille_dots_23578">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_2358" value="16787606" c:type="GDK_KEY_braille_dots_2358">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_236" value="16787494" c:type="GDK_KEY_braille_dots_236">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_2367" value="16787558" c:type="GDK_KEY_braille_dots_2367">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_23678" value="16787686" c:type="GDK_KEY_braille_dots_23678">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_2368" value="16787622" c:type="GDK_KEY_braille_dots_2368">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_237" value="16787526" c:type="GDK_KEY_braille_dots_237">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_2378" value="16787654" c:type="GDK_KEY_braille_dots_2378">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_238" value="16787590" c:type="GDK_KEY_braille_dots_238">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_24" value="16787466" c:type="GDK_KEY_braille_dots_24">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_245" value="16787482" c:type="GDK_KEY_braille_dots_245">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_2456" value="16787514" c:type="GDK_KEY_braille_dots_2456">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_24567" value="16787578" c:type="GDK_KEY_braille_dots_24567">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_245678" value="16787706" c:type="GDK_KEY_braille_dots_245678">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_24568" value="16787642" c:type="GDK_KEY_braille_dots_24568">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_2457" value="16787546" c:type="GDK_KEY_braille_dots_2457">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_24578" value="16787674" c:type="GDK_KEY_braille_dots_24578">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_2458" value="16787610" c:type="GDK_KEY_braille_dots_2458">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_246" value="16787498" c:type="GDK_KEY_braille_dots_246">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_2467" value="16787562" c:type="GDK_KEY_braille_dots_2467">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_24678" value="16787690" c:type="GDK_KEY_braille_dots_24678">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_2468" value="16787626" c:type="GDK_KEY_braille_dots_2468">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_247" value="16787530" c:type="GDK_KEY_braille_dots_247">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_2478" value="16787658" c:type="GDK_KEY_braille_dots_2478">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_248" value="16787594" c:type="GDK_KEY_braille_dots_248">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_25" value="16787474" c:type="GDK_KEY_braille_dots_25">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_256" value="16787506" c:type="GDK_KEY_braille_dots_256">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_2567" value="16787570" c:type="GDK_KEY_braille_dots_2567">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_25678" value="16787698" c:type="GDK_KEY_braille_dots_25678">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_2568" value="16787634" c:type="GDK_KEY_braille_dots_2568">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_257" value="16787538" c:type="GDK_KEY_braille_dots_257">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_2578" value="16787666" c:type="GDK_KEY_braille_dots_2578">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_258" value="16787602" c:type="GDK_KEY_braille_dots_258">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_26" value="16787490" c:type="GDK_KEY_braille_dots_26">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_267" value="16787554" c:type="GDK_KEY_braille_dots_267">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_2678" value="16787682" c:type="GDK_KEY_braille_dots_2678">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_268" value="16787618" c:type="GDK_KEY_braille_dots_268">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_27" value="16787522" c:type="GDK_KEY_braille_dots_27">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_278" value="16787650" c:type="GDK_KEY_braille_dots_278">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_28" value="16787586" c:type="GDK_KEY_braille_dots_28">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_3" value="16787460" c:type="GDK_KEY_braille_dots_3">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_34" value="16787468" c:type="GDK_KEY_braille_dots_34">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_345" value="16787484" c:type="GDK_KEY_braille_dots_345">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_3456" value="16787516" c:type="GDK_KEY_braille_dots_3456">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_34567" value="16787580" c:type="GDK_KEY_braille_dots_34567">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_345678" value="16787708" c:type="GDK_KEY_braille_dots_345678">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_34568" value="16787644" c:type="GDK_KEY_braille_dots_34568">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_3457" value="16787548" c:type="GDK_KEY_braille_dots_3457">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_34578" value="16787676" c:type="GDK_KEY_braille_dots_34578">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_3458" value="16787612" c:type="GDK_KEY_braille_dots_3458">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_346" value="16787500" c:type="GDK_KEY_braille_dots_346">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_3467" value="16787564" c:type="GDK_KEY_braille_dots_3467">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_34678" value="16787692" c:type="GDK_KEY_braille_dots_34678">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_3468" value="16787628" c:type="GDK_KEY_braille_dots_3468">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_347" value="16787532" c:type="GDK_KEY_braille_dots_347">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_3478" value="16787660" c:type="GDK_KEY_braille_dots_3478">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_348" value="16787596" c:type="GDK_KEY_braille_dots_348">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_35" value="16787476" c:type="GDK_KEY_braille_dots_35">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_356" value="16787508" c:type="GDK_KEY_braille_dots_356">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_3567" value="16787572" c:type="GDK_KEY_braille_dots_3567">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_35678" value="16787700" c:type="GDK_KEY_braille_dots_35678">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_3568" value="16787636" c:type="GDK_KEY_braille_dots_3568">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_357" value="16787540" c:type="GDK_KEY_braille_dots_357">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_3578" value="16787668" c:type="GDK_KEY_braille_dots_3578">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_358" value="16787604" c:type="GDK_KEY_braille_dots_358">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_36" value="16787492" c:type="GDK_KEY_braille_dots_36">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_367" value="16787556" c:type="GDK_KEY_braille_dots_367">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_3678" value="16787684" c:type="GDK_KEY_braille_dots_3678">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_368" value="16787620" c:type="GDK_KEY_braille_dots_368">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_37" value="16787524" c:type="GDK_KEY_braille_dots_37">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_378" value="16787652" c:type="GDK_KEY_braille_dots_378">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_38" value="16787588" c:type="GDK_KEY_braille_dots_38">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_4" value="16787464" c:type="GDK_KEY_braille_dots_4">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_45" value="16787480" c:type="GDK_KEY_braille_dots_45">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_456" value="16787512" c:type="GDK_KEY_braille_dots_456">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_4567" value="16787576" c:type="GDK_KEY_braille_dots_4567">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_45678" value="16787704" c:type="GDK_KEY_braille_dots_45678">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_4568" value="16787640" c:type="GDK_KEY_braille_dots_4568">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_457" value="16787544" c:type="GDK_KEY_braille_dots_457">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_4578" value="16787672" c:type="GDK_KEY_braille_dots_4578">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_458" value="16787608" c:type="GDK_KEY_braille_dots_458">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_46" value="16787496" c:type="GDK_KEY_braille_dots_46">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_467" value="16787560" c:type="GDK_KEY_braille_dots_467">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_4678" value="16787688" c:type="GDK_KEY_braille_dots_4678">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_468" value="16787624" c:type="GDK_KEY_braille_dots_468">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_47" value="16787528" c:type="GDK_KEY_braille_dots_47">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_478" value="16787656" c:type="GDK_KEY_braille_dots_478">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_48" value="16787592" c:type="GDK_KEY_braille_dots_48">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_5" value="16787472" c:type="GDK_KEY_braille_dots_5">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_56" value="16787504" c:type="GDK_KEY_braille_dots_56">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_567" value="16787568" c:type="GDK_KEY_braille_dots_567">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_5678" value="16787696" c:type="GDK_KEY_braille_dots_5678">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_568" value="16787632" c:type="GDK_KEY_braille_dots_568">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_57" value="16787536" c:type="GDK_KEY_braille_dots_57">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_578" value="16787664" c:type="GDK_KEY_braille_dots_578">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_58" value="16787600" c:type="GDK_KEY_braille_dots_58">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_6" value="16787488" c:type="GDK_KEY_braille_dots_6">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_67" value="16787552" c:type="GDK_KEY_braille_dots_67">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_678" value="16787680" c:type="GDK_KEY_braille_dots_678">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_68" value="16787616" c:type="GDK_KEY_braille_dots_68">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_7" value="16787520" c:type="GDK_KEY_braille_dots_7">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_78" value="16787648" c:type="GDK_KEY_braille_dots_78">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_8" value="16787584" c:type="GDK_KEY_braille_dots_8">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_breve" value="418" c:type="GDK_KEY_breve">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_brokenbar" value="166" c:type="GDK_KEY_brokenbar">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_c" value="99" c:type="GDK_KEY_c">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_c_h" value="65187" c:type="GDK_KEY_c_h">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_cabovedot" value="741" c:type="GDK_KEY_cabovedot">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_cacute" value="486" c:type="GDK_KEY_cacute">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_careof" value="2744" c:type="GDK_KEY_careof">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_caret" value="2812" c:type="GDK_KEY_caret">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_caron" value="439" c:type="GDK_KEY_caron">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ccaron" value="488" c:type="GDK_KEY_ccaron">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ccedilla" value="231" c:type="GDK_KEY_ccedilla">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ccircumflex" value="742" c:type="GDK_KEY_ccircumflex">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_cedilla" value="184" c:type="GDK_KEY_cedilla">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_cent" value="162" c:type="GDK_KEY_cent">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ch" value="65184" c:type="GDK_KEY_ch">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_checkerboard" value="2529" c:type="GDK_KEY_checkerboard">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_checkmark" value="2803" c:type="GDK_KEY_checkmark">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_circle" value="3023" c:type="GDK_KEY_circle">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_club" value="2796" c:type="GDK_KEY_club">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_colon" value="58" c:type="GDK_KEY_colon">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_comma" value="44" c:type="GDK_KEY_comma">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_containsas" value="16785931" c:type="GDK_KEY_containsas">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_copyright" value="169" c:type="GDK_KEY_copyright">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_cr" value="2532" c:type="GDK_KEY_cr">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_crossinglines" value="2542" c:type="GDK_KEY_crossinglines">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_cuberoot" value="16785947" c:type="GDK_KEY_cuberoot">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_currency" value="164" c:type="GDK_KEY_currency">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_cursor" value="2815" c:type="GDK_KEY_cursor">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_d" value="100" c:type="GDK_KEY_d">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_dabovedot" value="16784907" c:type="GDK_KEY_dabovedot">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_dagger" value="2801" c:type="GDK_KEY_dagger">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_dcaron" value="495" c:type="GDK_KEY_dcaron">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_dead_A" value="65153" c:type="GDK_KEY_dead_A">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_dead_E" value="65155" c:type="GDK_KEY_dead_E">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_dead_I" value="65157" c:type="GDK_KEY_dead_I">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_dead_O" value="65159" c:type="GDK_KEY_dead_O">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_dead_U" value="65161" c:type="GDK_KEY_dead_U">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_dead_a" value="65152" c:type="GDK_KEY_dead_a">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_dead_abovecomma" value="65124" c:type="GDK_KEY_dead_abovecomma">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_dead_abovedot" value="65110" c:type="GDK_KEY_dead_abovedot">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_dead_abovereversedcomma" value="65125" c:type="GDK_KEY_dead_abovereversedcomma">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_dead_abovering" value="65112" c:type="GDK_KEY_dead_abovering">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_dead_aboveverticalline" value="65169" c:type="GDK_KEY_dead_aboveverticalline">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_dead_acute" value="65105" c:type="GDK_KEY_dead_acute">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_dead_belowbreve" value="65131" c:type="GDK_KEY_dead_belowbreve">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_dead_belowcircumflex" value="65129" c:type="GDK_KEY_dead_belowcircumflex">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_dead_belowcomma" value="65134" c:type="GDK_KEY_dead_belowcomma">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_dead_belowdiaeresis" value="65132" c:type="GDK_KEY_dead_belowdiaeresis">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_dead_belowdot" value="65120" c:type="GDK_KEY_dead_belowdot">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_dead_belowmacron" value="65128" c:type="GDK_KEY_dead_belowmacron">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_dead_belowring" value="65127" c:type="GDK_KEY_dead_belowring">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_dead_belowtilde" value="65130" c:type="GDK_KEY_dead_belowtilde">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_dead_belowverticalline" value="65170" c:type="GDK_KEY_dead_belowverticalline">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_dead_breve" value="65109" c:type="GDK_KEY_dead_breve">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_dead_capital_schwa" value="65163" c:type="GDK_KEY_dead_capital_schwa">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_dead_caron" value="65114" c:type="GDK_KEY_dead_caron">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_dead_cedilla" value="65115" c:type="GDK_KEY_dead_cedilla">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_dead_circumflex" value="65106" c:type="GDK_KEY_dead_circumflex">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_dead_currency" value="65135" c:type="GDK_KEY_dead_currency">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_dead_dasia" value="65125" c:type="GDK_KEY_dead_dasia">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_dead_diaeresis" value="65111" c:type="GDK_KEY_dead_diaeresis">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_dead_doubleacute" value="65113" c:type="GDK_KEY_dead_doubleacute">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_dead_doublegrave" value="65126" c:type="GDK_KEY_dead_doublegrave">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_dead_e" value="65154" c:type="GDK_KEY_dead_e">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_dead_grave" value="65104" c:type="GDK_KEY_dead_grave">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_dead_greek" value="65164" c:type="GDK_KEY_dead_greek">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_dead_hook" value="65121" c:type="GDK_KEY_dead_hook">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_dead_horn" value="65122" c:type="GDK_KEY_dead_horn">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_dead_i" value="65156" c:type="GDK_KEY_dead_i">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_dead_invertedbreve" value="65133" c:type="GDK_KEY_dead_invertedbreve">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_dead_iota" value="65117" c:type="GDK_KEY_dead_iota">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_dead_longsolidusoverlay" value="65171" c:type="GDK_KEY_dead_longsolidusoverlay">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_dead_lowline" value="65168" c:type="GDK_KEY_dead_lowline">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_dead_macron" value="65108" c:type="GDK_KEY_dead_macron">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_dead_o" value="65158" c:type="GDK_KEY_dead_o">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_dead_ogonek" value="65116" c:type="GDK_KEY_dead_ogonek">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_dead_perispomeni" value="65107" c:type="GDK_KEY_dead_perispomeni">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_dead_psili" value="65124" c:type="GDK_KEY_dead_psili">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_dead_semivoiced_sound" value="65119" c:type="GDK_KEY_dead_semivoiced_sound">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_dead_small_schwa" value="65162" c:type="GDK_KEY_dead_small_schwa">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_dead_stroke" value="65123" c:type="GDK_KEY_dead_stroke">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_dead_tilde" value="65107" c:type="GDK_KEY_dead_tilde">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_dead_u" value="65160" c:type="GDK_KEY_dead_u">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_dead_voiced_sound" value="65118" c:type="GDK_KEY_dead_voiced_sound">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_decimalpoint" value="2749" c:type="GDK_KEY_decimalpoint">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_degree" value="176" c:type="GDK_KEY_degree">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_diaeresis" value="168" c:type="GDK_KEY_diaeresis">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_diamond" value="2797" c:type="GDK_KEY_diamond">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_digitspace" value="2725" c:type="GDK_KEY_digitspace">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_dintegral" value="16785964" c:type="GDK_KEY_dintegral">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_division" value="247" c:type="GDK_KEY_division">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_dollar" value="36" c:type="GDK_KEY_dollar">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_doubbaselinedot" value="2735" c:type="GDK_KEY_doubbaselinedot">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_doubleacute" value="445" c:type="GDK_KEY_doubleacute">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_doubledagger" value="2802" c:type="GDK_KEY_doubledagger">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_doublelowquotemark" value="2814" c:type="GDK_KEY_doublelowquotemark">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_downarrow" value="2302" c:type="GDK_KEY_downarrow">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_downcaret" value="2984" c:type="GDK_KEY_downcaret">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_downshoe" value="3030" c:type="GDK_KEY_downshoe">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_downstile" value="3012" c:type="GDK_KEY_downstile">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_downtack" value="3010" c:type="GDK_KEY_downtack">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_dstroke" value="496" c:type="GDK_KEY_dstroke">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_e" value="101" c:type="GDK_KEY_e">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_eabovedot" value="1004" c:type="GDK_KEY_eabovedot">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_eacute" value="233" c:type="GDK_KEY_eacute">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ebelowdot" value="16785081" c:type="GDK_KEY_ebelowdot">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ecaron" value="492" c:type="GDK_KEY_ecaron">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ecircumflex" value="234" c:type="GDK_KEY_ecircumflex">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ecircumflexacute" value="16785087" c:type="GDK_KEY_ecircumflexacute">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ecircumflexbelowdot" value="16785095" c:type="GDK_KEY_ecircumflexbelowdot">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ecircumflexgrave" value="16785089" c:type="GDK_KEY_ecircumflexgrave">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ecircumflexhook" value="16785091" c:type="GDK_KEY_ecircumflexhook">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ecircumflextilde" value="16785093" c:type="GDK_KEY_ecircumflextilde">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ediaeresis" value="235" c:type="GDK_KEY_ediaeresis">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_egrave" value="232" c:type="GDK_KEY_egrave">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ehook" value="16785083" c:type="GDK_KEY_ehook">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_eightsubscript" value="16785544" c:type="GDK_KEY_eightsubscript">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_eightsuperior" value="16785528" c:type="GDK_KEY_eightsuperior">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_elementof" value="16785928" c:type="GDK_KEY_elementof">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ellipsis" value="2734" c:type="GDK_KEY_ellipsis">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_em3space" value="2723" c:type="GDK_KEY_em3space">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_em4space" value="2724" c:type="GDK_KEY_em4space">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_emacron" value="954" c:type="GDK_KEY_emacron">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_emdash" value="2729" c:type="GDK_KEY_emdash">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_emfilledcircle" value="2782" c:type="GDK_KEY_emfilledcircle">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_emfilledrect" value="2783" c:type="GDK_KEY_emfilledrect">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_emopencircle" value="2766" c:type="GDK_KEY_emopencircle">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_emopenrectangle" value="2767" c:type="GDK_KEY_emopenrectangle">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_emptyset" value="16785925" c:type="GDK_KEY_emptyset">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_emspace" value="2721" c:type="GDK_KEY_emspace">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_endash" value="2730" c:type="GDK_KEY_endash">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_enfilledcircbullet" value="2790" c:type="GDK_KEY_enfilledcircbullet">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_enfilledsqbullet" value="2791" c:type="GDK_KEY_enfilledsqbullet">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_eng" value="959" c:type="GDK_KEY_eng">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_enopencircbullet" value="2784" c:type="GDK_KEY_enopencircbullet">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_enopensquarebullet" value="2785" c:type="GDK_KEY_enopensquarebullet">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_enspace" value="2722" c:type="GDK_KEY_enspace">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_eogonek" value="490" c:type="GDK_KEY_eogonek">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_equal" value="61" c:type="GDK_KEY_equal">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_eth" value="240" c:type="GDK_KEY_eth">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_etilde" value="16785085" c:type="GDK_KEY_etilde">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_exclam" value="33" c:type="GDK_KEY_exclam">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_exclamdown" value="161" c:type="GDK_KEY_exclamdown">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ezh" value="16777874" c:type="GDK_KEY_ezh">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_f" value="102" c:type="GDK_KEY_f">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_fabovedot" value="16784927" c:type="GDK_KEY_fabovedot">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_femalesymbol" value="2808" c:type="GDK_KEY_femalesymbol">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ff" value="2531" c:type="GDK_KEY_ff">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_figdash" value="2747" c:type="GDK_KEY_figdash">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_filledlefttribullet" value="2780" c:type="GDK_KEY_filledlefttribullet">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_filledrectbullet" value="2779" c:type="GDK_KEY_filledrectbullet">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_filledrighttribullet" value="2781" c:type="GDK_KEY_filledrighttribullet">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_filledtribulletdown" value="2793" c:type="GDK_KEY_filledtribulletdown">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_filledtribulletup" value="2792" c:type="GDK_KEY_filledtribulletup">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_fiveeighths" value="2757" c:type="GDK_KEY_fiveeighths">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_fivesixths" value="2743" c:type="GDK_KEY_fivesixths">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_fivesubscript" value="16785541" c:type="GDK_KEY_fivesubscript">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_fivesuperior" value="16785525" c:type="GDK_KEY_fivesuperior">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_fourfifths" value="2741" c:type="GDK_KEY_fourfifths">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_foursubscript" value="16785540" c:type="GDK_KEY_foursubscript">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_foursuperior" value="16785524" c:type="GDK_KEY_foursuperior">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_fourthroot" value="16785948" c:type="GDK_KEY_fourthroot">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_function" value="2294" c:type="GDK_KEY_function">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_g" value="103" c:type="GDK_KEY_g">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_gabovedot" value="757" c:type="GDK_KEY_gabovedot">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_gbreve" value="699" c:type="GDK_KEY_gbreve">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_gcaron" value="16777703" c:type="GDK_KEY_gcaron">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_gcedilla" value="955" c:type="GDK_KEY_gcedilla">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_gcircumflex" value="760" c:type="GDK_KEY_gcircumflex">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_grave" value="96" c:type="GDK_KEY_grave">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_greater" value="62" c:type="GDK_KEY_greater">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_greaterthanequal" value="2238" c:type="GDK_KEY_greaterthanequal">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_guillemotleft" value="171" c:type="GDK_KEY_guillemotleft">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_guillemotright" value="187" c:type="GDK_KEY_guillemotright">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_h" value="104" c:type="GDK_KEY_h">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_hairspace" value="2728" c:type="GDK_KEY_hairspace">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_hcircumflex" value="694" c:type="GDK_KEY_hcircumflex">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_heart" value="2798" c:type="GDK_KEY_heart">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_hebrew_aleph" value="3296" c:type="GDK_KEY_hebrew_aleph">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_hebrew_ayin" value="3314" c:type="GDK_KEY_hebrew_ayin">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_hebrew_bet" value="3297" c:type="GDK_KEY_hebrew_bet">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_hebrew_beth" value="3297" c:type="GDK_KEY_hebrew_beth">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_hebrew_chet" value="3303" c:type="GDK_KEY_hebrew_chet">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_hebrew_dalet" value="3299" c:type="GDK_KEY_hebrew_dalet">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_hebrew_daleth" value="3299" c:type="GDK_KEY_hebrew_daleth">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_hebrew_doublelowline" value="3295" c:type="GDK_KEY_hebrew_doublelowline">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_hebrew_finalkaph" value="3306" c:type="GDK_KEY_hebrew_finalkaph">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_hebrew_finalmem" value="3309" c:type="GDK_KEY_hebrew_finalmem">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_hebrew_finalnun" value="3311" c:type="GDK_KEY_hebrew_finalnun">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_hebrew_finalpe" value="3315" c:type="GDK_KEY_hebrew_finalpe">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_hebrew_finalzade" value="3317" c:type="GDK_KEY_hebrew_finalzade">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_hebrew_finalzadi" value="3317" c:type="GDK_KEY_hebrew_finalzadi">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_hebrew_gimel" value="3298" c:type="GDK_KEY_hebrew_gimel">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_hebrew_gimmel" value="3298" c:type="GDK_KEY_hebrew_gimmel">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_hebrew_he" value="3300" c:type="GDK_KEY_hebrew_he">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_hebrew_het" value="3303" c:type="GDK_KEY_hebrew_het">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_hebrew_kaph" value="3307" c:type="GDK_KEY_hebrew_kaph">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_hebrew_kuf" value="3319" c:type="GDK_KEY_hebrew_kuf">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_hebrew_lamed" value="3308" c:type="GDK_KEY_hebrew_lamed">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_hebrew_mem" value="3310" c:type="GDK_KEY_hebrew_mem">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_hebrew_nun" value="3312" c:type="GDK_KEY_hebrew_nun">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_hebrew_pe" value="3316" c:type="GDK_KEY_hebrew_pe">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_hebrew_qoph" value="3319" c:type="GDK_KEY_hebrew_qoph">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_hebrew_resh" value="3320" c:type="GDK_KEY_hebrew_resh">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_hebrew_samech" value="3313" c:type="GDK_KEY_hebrew_samech">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_hebrew_samekh" value="3313" c:type="GDK_KEY_hebrew_samekh">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_hebrew_shin" value="3321" c:type="GDK_KEY_hebrew_shin">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_hebrew_taf" value="3322" c:type="GDK_KEY_hebrew_taf">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_hebrew_taw" value="3322" c:type="GDK_KEY_hebrew_taw">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_hebrew_tet" value="3304" c:type="GDK_KEY_hebrew_tet">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_hebrew_teth" value="3304" c:type="GDK_KEY_hebrew_teth">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_hebrew_waw" value="3301" c:type="GDK_KEY_hebrew_waw">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_hebrew_yod" value="3305" c:type="GDK_KEY_hebrew_yod">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_hebrew_zade" value="3318" c:type="GDK_KEY_hebrew_zade">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_hebrew_zadi" value="3318" c:type="GDK_KEY_hebrew_zadi">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_hebrew_zain" value="3302" c:type="GDK_KEY_hebrew_zain">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_hebrew_zayin" value="3302" c:type="GDK_KEY_hebrew_zayin">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_hexagram" value="2778" c:type="GDK_KEY_hexagram">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_horizconnector" value="2211" c:type="GDK_KEY_horizconnector">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_horizlinescan1" value="2543" c:type="GDK_KEY_horizlinescan1">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_horizlinescan3" value="2544" c:type="GDK_KEY_horizlinescan3">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_horizlinescan5" value="2545" c:type="GDK_KEY_horizlinescan5">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_horizlinescan7" value="2546" c:type="GDK_KEY_horizlinescan7">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_horizlinescan9" value="2547" c:type="GDK_KEY_horizlinescan9">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_hstroke" value="689" c:type="GDK_KEY_hstroke">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ht" value="2530" c:type="GDK_KEY_ht">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_hyphen" value="173" c:type="GDK_KEY_hyphen">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_i" value="105" c:type="GDK_KEY_i">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_iTouch" value="269025120" c:type="GDK_KEY_iTouch">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_iacute" value="237" c:type="GDK_KEY_iacute">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ibelowdot" value="16785099" c:type="GDK_KEY_ibelowdot">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ibreve" value="16777517" c:type="GDK_KEY_ibreve">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_icircumflex" value="238" c:type="GDK_KEY_icircumflex">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_identical" value="2255" c:type="GDK_KEY_identical">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_idiaeresis" value="239" c:type="GDK_KEY_idiaeresis">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_idotless" value="697" c:type="GDK_KEY_idotless">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ifonlyif" value="2253" c:type="GDK_KEY_ifonlyif">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_igrave" value="236" c:type="GDK_KEY_igrave">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ihook" value="16785097" c:type="GDK_KEY_ihook">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_imacron" value="1007" c:type="GDK_KEY_imacron">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_implies" value="2254" c:type="GDK_KEY_implies">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_includedin" value="2266" c:type="GDK_KEY_includedin">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_includes" value="2267" c:type="GDK_KEY_includes">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_infinity" value="2242" c:type="GDK_KEY_infinity">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_integral" value="2239" c:type="GDK_KEY_integral">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_intersection" value="2268" c:type="GDK_KEY_intersection">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_iogonek" value="999" c:type="GDK_KEY_iogonek">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_itilde" value="949" c:type="GDK_KEY_itilde">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_j" value="106" c:type="GDK_KEY_j">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_jcircumflex" value="700" c:type="GDK_KEY_jcircumflex">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_jot" value="3018" c:type="GDK_KEY_jot">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_k" value="107" c:type="GDK_KEY_k">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_A" value="1201" c:type="GDK_KEY_kana_A">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_CHI" value="1217" c:type="GDK_KEY_kana_CHI">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_E" value="1204" c:type="GDK_KEY_kana_E">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_FU" value="1228" c:type="GDK_KEY_kana_FU">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_HA" value="1226" c:type="GDK_KEY_kana_HA">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_HE" value="1229" c:type="GDK_KEY_kana_HE">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_HI" value="1227" c:type="GDK_KEY_kana_HI">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_HO" value="1230" c:type="GDK_KEY_kana_HO">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_HU" value="1228" c:type="GDK_KEY_kana_HU">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_I" value="1202" c:type="GDK_KEY_kana_I">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_KA" value="1206" c:type="GDK_KEY_kana_KA">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_KE" value="1209" c:type="GDK_KEY_kana_KE">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_KI" value="1207" c:type="GDK_KEY_kana_KI">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_KO" value="1210" c:type="GDK_KEY_kana_KO">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_KU" value="1208" c:type="GDK_KEY_kana_KU">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_MA" value="1231" c:type="GDK_KEY_kana_MA">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_ME" value="1234" c:type="GDK_KEY_kana_ME">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_MI" value="1232" c:type="GDK_KEY_kana_MI">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_MO" value="1235" c:type="GDK_KEY_kana_MO">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_MU" value="1233" c:type="GDK_KEY_kana_MU">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_N" value="1245" c:type="GDK_KEY_kana_N">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_NA" value="1221" c:type="GDK_KEY_kana_NA">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_NE" value="1224" c:type="GDK_KEY_kana_NE">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_NI" value="1222" c:type="GDK_KEY_kana_NI">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_NO" value="1225" c:type="GDK_KEY_kana_NO">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_NU" value="1223" c:type="GDK_KEY_kana_NU">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_O" value="1205" c:type="GDK_KEY_kana_O">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_RA" value="1239" c:type="GDK_KEY_kana_RA">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_RE" value="1242" c:type="GDK_KEY_kana_RE">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_RI" value="1240" c:type="GDK_KEY_kana_RI">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_RO" value="1243" c:type="GDK_KEY_kana_RO">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_RU" value="1241" c:type="GDK_KEY_kana_RU">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_SA" value="1211" c:type="GDK_KEY_kana_SA">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_SE" value="1214" c:type="GDK_KEY_kana_SE">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_SHI" value="1212" c:type="GDK_KEY_kana_SHI">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_SO" value="1215" c:type="GDK_KEY_kana_SO">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_SU" value="1213" c:type="GDK_KEY_kana_SU">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_TA" value="1216" c:type="GDK_KEY_kana_TA">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_TE" value="1219" c:type="GDK_KEY_kana_TE">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_TI" value="1217" c:type="GDK_KEY_kana_TI">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_TO" value="1220" c:type="GDK_KEY_kana_TO">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_TSU" value="1218" c:type="GDK_KEY_kana_TSU">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_TU" value="1218" c:type="GDK_KEY_kana_TU">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_U" value="1203" c:type="GDK_KEY_kana_U">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_WA" value="1244" c:type="GDK_KEY_kana_WA">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_WO" value="1190" c:type="GDK_KEY_kana_WO">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_YA" value="1236" c:type="GDK_KEY_kana_YA">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_YO" value="1238" c:type="GDK_KEY_kana_YO">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_YU" value="1237" c:type="GDK_KEY_kana_YU">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_a" value="1191" c:type="GDK_KEY_kana_a">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_closingbracket" value="1187" c:type="GDK_KEY_kana_closingbracket">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_comma" value="1188" c:type="GDK_KEY_kana_comma">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_conjunctive" value="1189" c:type="GDK_KEY_kana_conjunctive">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_e" value="1194" c:type="GDK_KEY_kana_e">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_fullstop" value="1185" c:type="GDK_KEY_kana_fullstop">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_i" value="1192" c:type="GDK_KEY_kana_i">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_middledot" value="1189" c:type="GDK_KEY_kana_middledot">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_o" value="1195" c:type="GDK_KEY_kana_o">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_openingbracket" value="1186" c:type="GDK_KEY_kana_openingbracket">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_switch" value="65406" c:type="GDK_KEY_kana_switch">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_tsu" value="1199" c:type="GDK_KEY_kana_tsu">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_tu" value="1199" c:type="GDK_KEY_kana_tu">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_u" value="1193" c:type="GDK_KEY_kana_u">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_ya" value="1196" c:type="GDK_KEY_kana_ya">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_yo" value="1198" c:type="GDK_KEY_kana_yo">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_yu" value="1197" c:type="GDK_KEY_kana_yu">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kappa" value="930" c:type="GDK_KEY_kappa">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kcedilla" value="1011" c:type="GDK_KEY_kcedilla">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kra" value="930" c:type="GDK_KEY_kra">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_l" value="108" c:type="GDK_KEY_l">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_lacute" value="485" c:type="GDK_KEY_lacute">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_latincross" value="2777" c:type="GDK_KEY_latincross">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_lbelowdot" value="16784951" c:type="GDK_KEY_lbelowdot">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_lcaron" value="437" c:type="GDK_KEY_lcaron">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_lcedilla" value="950" c:type="GDK_KEY_lcedilla">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_leftanglebracket" value="2748" c:type="GDK_KEY_leftanglebracket">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_leftarrow" value="2299" c:type="GDK_KEY_leftarrow">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_leftcaret" value="2979" c:type="GDK_KEY_leftcaret">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_leftdoublequotemark" value="2770" c:type="GDK_KEY_leftdoublequotemark">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_leftmiddlecurlybrace" value="2223" c:type="GDK_KEY_leftmiddlecurlybrace">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_leftopentriangle" value="2764" c:type="GDK_KEY_leftopentriangle">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_leftpointer" value="2794" c:type="GDK_KEY_leftpointer">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_leftradical" value="2209" c:type="GDK_KEY_leftradical">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_leftshoe" value="3034" c:type="GDK_KEY_leftshoe">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_leftsinglequotemark" value="2768" c:type="GDK_KEY_leftsinglequotemark">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_leftt" value="2548" c:type="GDK_KEY_leftt">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_lefttack" value="3036" c:type="GDK_KEY_lefttack">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_less" value="60" c:type="GDK_KEY_less">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_lessthanequal" value="2236" c:type="GDK_KEY_lessthanequal">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_lf" value="2533" c:type="GDK_KEY_lf">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_logicaland" value="2270" c:type="GDK_KEY_logicaland">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_logicalor" value="2271" c:type="GDK_KEY_logicalor">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_lowleftcorner" value="2541" c:type="GDK_KEY_lowleftcorner">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_lowrightcorner" value="2538" c:type="GDK_KEY_lowrightcorner">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_lstroke" value="435" c:type="GDK_KEY_lstroke">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_m" value="109" c:type="GDK_KEY_m">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_mabovedot" value="16784961" c:type="GDK_KEY_mabovedot">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_macron" value="175" c:type="GDK_KEY_macron">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_malesymbol" value="2807" c:type="GDK_KEY_malesymbol">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_maltesecross" value="2800" c:type="GDK_KEY_maltesecross">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_marker" value="2751" c:type="GDK_KEY_marker">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_masculine" value="186" c:type="GDK_KEY_masculine">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_minus" value="45" c:type="GDK_KEY_minus">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_minutes" value="2774" c:type="GDK_KEY_minutes">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_mu" value="181" c:type="GDK_KEY_mu">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_multiply" value="215" c:type="GDK_KEY_multiply">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_musicalflat" value="2806" c:type="GDK_KEY_musicalflat">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_musicalsharp" value="2805" c:type="GDK_KEY_musicalsharp">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_n" value="110" c:type="GDK_KEY_n">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_nabla" value="2245" c:type="GDK_KEY_nabla">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_nacute" value="497" c:type="GDK_KEY_nacute">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ncaron" value="498" c:type="GDK_KEY_ncaron">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ncedilla" value="1009" c:type="GDK_KEY_ncedilla">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ninesubscript" value="16785545" c:type="GDK_KEY_ninesubscript">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ninesuperior" value="16785529" c:type="GDK_KEY_ninesuperior">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_nl" value="2536" c:type="GDK_KEY_nl">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_nobreakspace" value="160" c:type="GDK_KEY_nobreakspace">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_notapproxeq" value="16785991" c:type="GDK_KEY_notapproxeq">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_notelementof" value="16785929" c:type="GDK_KEY_notelementof">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_notequal" value="2237" c:type="GDK_KEY_notequal">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_notidentical" value="16786018" c:type="GDK_KEY_notidentical">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_notsign" value="172" c:type="GDK_KEY_notsign">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ntilde" value="241" c:type="GDK_KEY_ntilde">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_numbersign" value="35" c:type="GDK_KEY_numbersign">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_numerosign" value="1712" c:type="GDK_KEY_numerosign">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_o" value="111" c:type="GDK_KEY_o">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_oacute" value="243" c:type="GDK_KEY_oacute">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_obarred" value="16777845" c:type="GDK_KEY_obarred">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_obelowdot" value="16785101" c:type="GDK_KEY_obelowdot">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ocaron" value="16777682" c:type="GDK_KEY_ocaron">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ocircumflex" value="244" c:type="GDK_KEY_ocircumflex">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ocircumflexacute" value="16785105" c:type="GDK_KEY_ocircumflexacute">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ocircumflexbelowdot" value="16785113" c:type="GDK_KEY_ocircumflexbelowdot">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ocircumflexgrave" value="16785107" c:type="GDK_KEY_ocircumflexgrave">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ocircumflexhook" value="16785109" c:type="GDK_KEY_ocircumflexhook">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ocircumflextilde" value="16785111" c:type="GDK_KEY_ocircumflextilde">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_odiaeresis" value="246" c:type="GDK_KEY_odiaeresis">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_odoubleacute" value="501" c:type="GDK_KEY_odoubleacute">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_oe" value="5053" c:type="GDK_KEY_oe">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ogonek" value="434" c:type="GDK_KEY_ogonek">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ograve" value="242" c:type="GDK_KEY_ograve">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ohook" value="16785103" c:type="GDK_KEY_ohook">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ohorn" value="16777633" c:type="GDK_KEY_ohorn">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ohornacute" value="16785115" c:type="GDK_KEY_ohornacute">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ohornbelowdot" value="16785123" c:type="GDK_KEY_ohornbelowdot">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ohorngrave" value="16785117" c:type="GDK_KEY_ohorngrave">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ohornhook" value="16785119" c:type="GDK_KEY_ohornhook">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ohorntilde" value="16785121" c:type="GDK_KEY_ohorntilde">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_omacron" value="1010" c:type="GDK_KEY_omacron">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_oneeighth" value="2755" c:type="GDK_KEY_oneeighth">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_onefifth" value="2738" c:type="GDK_KEY_onefifth">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_onehalf" value="189" c:type="GDK_KEY_onehalf">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_onequarter" value="188" c:type="GDK_KEY_onequarter">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_onesixth" value="2742" c:type="GDK_KEY_onesixth">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_onesubscript" value="16785537" c:type="GDK_KEY_onesubscript">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_onesuperior" value="185" c:type="GDK_KEY_onesuperior">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_onethird" value="2736" c:type="GDK_KEY_onethird">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ooblique" value="248" c:type="GDK_KEY_ooblique">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_openrectbullet" value="2786" c:type="GDK_KEY_openrectbullet">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_openstar" value="2789" c:type="GDK_KEY_openstar">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_opentribulletdown" value="2788" c:type="GDK_KEY_opentribulletdown">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_opentribulletup" value="2787" c:type="GDK_KEY_opentribulletup">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ordfeminine" value="170" c:type="GDK_KEY_ordfeminine">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_oslash" value="248" c:type="GDK_KEY_oslash">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_otilde" value="245" c:type="GDK_KEY_otilde">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_overbar" value="3008" c:type="GDK_KEY_overbar">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_overline" value="1150" c:type="GDK_KEY_overline">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_p" value="112" c:type="GDK_KEY_p">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_pabovedot" value="16784983" c:type="GDK_KEY_pabovedot">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_paragraph" value="182" c:type="GDK_KEY_paragraph">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_parenleft" value="40" c:type="GDK_KEY_parenleft">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_parenright" value="41" c:type="GDK_KEY_parenright">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_partdifferential" value="16785922" c:type="GDK_KEY_partdifferential">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_partialderivative" value="2287" c:type="GDK_KEY_partialderivative">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_percent" value="37" c:type="GDK_KEY_percent">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_period" value="46" c:type="GDK_KEY_period">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_periodcentered" value="183" c:type="GDK_KEY_periodcentered">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_permille" value="2773" c:type="GDK_KEY_permille">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_phonographcopyright" value="2811" c:type="GDK_KEY_phonographcopyright">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_plus" value="43" c:type="GDK_KEY_plus">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_plusminus" value="177" c:type="GDK_KEY_plusminus">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_prescription" value="2772" c:type="GDK_KEY_prescription">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_prolongedsound" value="1200" c:type="GDK_KEY_prolongedsound">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_punctspace" value="2726" c:type="GDK_KEY_punctspace">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_q" value="113" c:type="GDK_KEY_q">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_quad" value="3020" c:type="GDK_KEY_quad">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_question" value="63" c:type="GDK_KEY_question">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_questiondown" value="191" c:type="GDK_KEY_questiondown">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_quotedbl" value="34" c:type="GDK_KEY_quotedbl">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_quoteleft" value="96" c:type="GDK_KEY_quoteleft">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_quoteright" value="39" c:type="GDK_KEY_quoteright">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_r" value="114" c:type="GDK_KEY_r">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_racute" value="480" c:type="GDK_KEY_racute">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_radical" value="2262" c:type="GDK_KEY_radical">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_rcaron" value="504" c:type="GDK_KEY_rcaron">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_rcedilla" value="947" c:type="GDK_KEY_rcedilla">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_registered" value="174" c:type="GDK_KEY_registered">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_rightanglebracket" value="2750" c:type="GDK_KEY_rightanglebracket">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_rightarrow" value="2301" c:type="GDK_KEY_rightarrow">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_rightcaret" value="2982" c:type="GDK_KEY_rightcaret">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_rightdoublequotemark" value="2771" c:type="GDK_KEY_rightdoublequotemark">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_rightmiddlecurlybrace" value="2224" c:type="GDK_KEY_rightmiddlecurlybrace">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_rightmiddlesummation" value="2231" c:type="GDK_KEY_rightmiddlesummation">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_rightopentriangle" value="2765" c:type="GDK_KEY_rightopentriangle">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_rightpointer" value="2795" c:type="GDK_KEY_rightpointer">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_rightshoe" value="3032" c:type="GDK_KEY_rightshoe">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_rightsinglequotemark" value="2769" c:type="GDK_KEY_rightsinglequotemark">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_rightt" value="2549" c:type="GDK_KEY_rightt">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_righttack" value="3068" c:type="GDK_KEY_righttack">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_s" value="115" c:type="GDK_KEY_s">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_sabovedot" value="16784993" c:type="GDK_KEY_sabovedot">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_sacute" value="438" c:type="GDK_KEY_sacute">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_scaron" value="441" c:type="GDK_KEY_scaron">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_scedilla" value="442" c:type="GDK_KEY_scedilla">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_schwa" value="16777817" c:type="GDK_KEY_schwa">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_scircumflex" value="766" c:type="GDK_KEY_scircumflex">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_script_switch" value="65406" c:type="GDK_KEY_script_switch">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_seconds" value="2775" c:type="GDK_KEY_seconds">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_section" value="167" c:type="GDK_KEY_section">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_semicolon" value="59" c:type="GDK_KEY_semicolon">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_semivoicedsound" value="1247" c:type="GDK_KEY_semivoicedsound">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_seveneighths" value="2758" c:type="GDK_KEY_seveneighths">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_sevensubscript" value="16785543" c:type="GDK_KEY_sevensubscript">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_sevensuperior" value="16785527" c:type="GDK_KEY_sevensuperior">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_signaturemark" value="2762" c:type="GDK_KEY_signaturemark">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_signifblank" value="2732" c:type="GDK_KEY_signifblank">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_similarequal" value="2249" c:type="GDK_KEY_similarequal">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_singlelowquotemark" value="2813" c:type="GDK_KEY_singlelowquotemark">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_sixsubscript" value="16785542" c:type="GDK_KEY_sixsubscript">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_sixsuperior" value="16785526" c:type="GDK_KEY_sixsuperior">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_slash" value="47" c:type="GDK_KEY_slash">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_soliddiamond" value="2528" c:type="GDK_KEY_soliddiamond">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_space" value="32" c:type="GDK_KEY_space">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_squareroot" value="16785946" c:type="GDK_KEY_squareroot">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ssharp" value="223" c:type="GDK_KEY_ssharp">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_sterling" value="163" c:type="GDK_KEY_sterling">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_stricteq" value="16786019" c:type="GDK_KEY_stricteq">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_t" value="116" c:type="GDK_KEY_t">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_tabovedot" value="16785003" c:type="GDK_KEY_tabovedot">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_tcaron" value="443" c:type="GDK_KEY_tcaron">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_tcedilla" value="510" c:type="GDK_KEY_tcedilla">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_telephone" value="2809" c:type="GDK_KEY_telephone">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_telephonerecorder" value="2810" c:type="GDK_KEY_telephonerecorder">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_therefore" value="2240" c:type="GDK_KEY_therefore">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_thinspace" value="2727" c:type="GDK_KEY_thinspace">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_thorn" value="254" c:type="GDK_KEY_thorn">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_threeeighths" value="2756" c:type="GDK_KEY_threeeighths">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_threefifths" value="2740" c:type="GDK_KEY_threefifths">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_threequarters" value="190" c:type="GDK_KEY_threequarters">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_threesubscript" value="16785539" c:type="GDK_KEY_threesubscript">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_threesuperior" value="179" c:type="GDK_KEY_threesuperior">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_tintegral" value="16785965" c:type="GDK_KEY_tintegral">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_topintegral" value="2212" c:type="GDK_KEY_topintegral">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_topleftparens" value="2219" c:type="GDK_KEY_topleftparens">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_topleftradical" value="2210" c:type="GDK_KEY_topleftradical">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_topleftsqbracket" value="2215" c:type="GDK_KEY_topleftsqbracket">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_topleftsummation" value="2225" c:type="GDK_KEY_topleftsummation">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_toprightparens" value="2221" c:type="GDK_KEY_toprightparens">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_toprightsqbracket" value="2217" c:type="GDK_KEY_toprightsqbracket">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_toprightsummation" value="2229" c:type="GDK_KEY_toprightsummation">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_topt" value="2551" c:type="GDK_KEY_topt">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_topvertsummationconnector" value="2227" c:type="GDK_KEY_topvertsummationconnector">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_trademark" value="2761" c:type="GDK_KEY_trademark">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_trademarkincircle" value="2763" c:type="GDK_KEY_trademarkincircle">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_tslash" value="956" c:type="GDK_KEY_tslash">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_twofifths" value="2739" c:type="GDK_KEY_twofifths">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_twosubscript" value="16785538" c:type="GDK_KEY_twosubscript">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_twosuperior" value="178" c:type="GDK_KEY_twosuperior">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_twothirds" value="2737" c:type="GDK_KEY_twothirds">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_u" value="117" c:type="GDK_KEY_u">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_uacute" value="250" c:type="GDK_KEY_uacute">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ubelowdot" value="16785125" c:type="GDK_KEY_ubelowdot">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ubreve" value="765" c:type="GDK_KEY_ubreve">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ucircumflex" value="251" c:type="GDK_KEY_ucircumflex">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_udiaeresis" value="252" c:type="GDK_KEY_udiaeresis">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_udoubleacute" value="507" c:type="GDK_KEY_udoubleacute">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ugrave" value="249" c:type="GDK_KEY_ugrave">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_uhook" value="16785127" c:type="GDK_KEY_uhook">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_uhorn" value="16777648" c:type="GDK_KEY_uhorn">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_uhornacute" value="16785129" c:type="GDK_KEY_uhornacute">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_uhornbelowdot" value="16785137" c:type="GDK_KEY_uhornbelowdot">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_uhorngrave" value="16785131" c:type="GDK_KEY_uhorngrave">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_uhornhook" value="16785133" c:type="GDK_KEY_uhornhook">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_uhorntilde" value="16785135" c:type="GDK_KEY_uhorntilde">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_umacron" value="1022" c:type="GDK_KEY_umacron">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_underbar" value="3014" c:type="GDK_KEY_underbar">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_underscore" value="95" c:type="GDK_KEY_underscore">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_union" value="2269" c:type="GDK_KEY_union">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_uogonek" value="1017" c:type="GDK_KEY_uogonek">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_uparrow" value="2300" c:type="GDK_KEY_uparrow">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_upcaret" value="2985" c:type="GDK_KEY_upcaret">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_upleftcorner" value="2540" c:type="GDK_KEY_upleftcorner">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_uprightcorner" value="2539" c:type="GDK_KEY_uprightcorner">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_upshoe" value="3011" c:type="GDK_KEY_upshoe">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_upstile" value="3027" c:type="GDK_KEY_upstile">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_uptack" value="3022" c:type="GDK_KEY_uptack">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_uring" value="505" c:type="GDK_KEY_uring">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_utilde" value="1021" c:type="GDK_KEY_utilde">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_v" value="118" c:type="GDK_KEY_v">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_variation" value="2241" c:type="GDK_KEY_variation">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_vertbar" value="2552" c:type="GDK_KEY_vertbar">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_vertconnector" value="2214" c:type="GDK_KEY_vertconnector">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_voicedsound" value="1246" c:type="GDK_KEY_voicedsound">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_vt" value="2537" c:type="GDK_KEY_vt">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_w" value="119" c:type="GDK_KEY_w">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_wacute" value="16785027" c:type="GDK_KEY_wacute">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_wcircumflex" value="16777589" c:type="GDK_KEY_wcircumflex">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_wdiaeresis" value="16785029" c:type="GDK_KEY_wdiaeresis">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_wgrave" value="16785025" c:type="GDK_KEY_wgrave">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_x" value="120" c:type="GDK_KEY_x">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_xabovedot" value="16785035" c:type="GDK_KEY_xabovedot">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_y" value="121" c:type="GDK_KEY_y">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_yacute" value="253" c:type="GDK_KEY_yacute">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ybelowdot" value="16785141" c:type="GDK_KEY_ybelowdot">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ycircumflex" value="16777591" c:type="GDK_KEY_ycircumflex">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ydiaeresis" value="255" c:type="GDK_KEY_ydiaeresis">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_yen" value="165" c:type="GDK_KEY_yen">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ygrave" value="16785139" c:type="GDK_KEY_ygrave">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_yhook" value="16785143" c:type="GDK_KEY_yhook">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ytilde" value="16785145" c:type="GDK_KEY_ytilde">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_z" value="122" c:type="GDK_KEY_z">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_zabovedot" value="447" c:type="GDK_KEY_zabovedot">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_zacute" value="444" c:type="GDK_KEY_zacute">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_zcaron" value="446" c:type="GDK_KEY_zcaron">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_zerosubscript" value="16785536" c:type="GDK_KEY_zerosubscript">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_zerosuperior" value="16785520" c:type="GDK_KEY_zerosuperior">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_zstroke" value="16777654" c:type="GDK_KEY_zstroke">
      <type name="gint" c:type="gint"/>
    </constant>
    <class name="Keymap" c:symbol-prefix="keymap" c:type="GdkKeymap" parent="GObject.Object" glib:type-name="GdkKeymap" glib:get-type="gdk_keymap_get_type">
      <doc xml:space="preserve">A #GdkKeymap defines the translation from keyboard state
(including a hardware key, a modifier mask, and active keyboard group)
to a keyval. This translation has two phases. The first phase is
to determine the effective keyboard group and level for the keyboard
state; the second phase is to look up the keycode/group/level triplet
in the keymap and see what keyval it corresponds to.</doc>
      <function name="get_default" c:identifier="gdk_keymap_get_default" deprecated="1" deprecated-version="3.22">
        <doc xml:space="preserve">Returns the #GdkKeymap attached to the default display.</doc>
        <doc-deprecated xml:space="preserve">Use gdk_keymap_get_for_display() instead</doc-deprecated>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the #GdkKeymap attached to the default display.</doc>
          <type name="Keymap" c:type="GdkKeymap*"/>
        </return-value>
      </function>
      <function name="get_for_display" c:identifier="gdk_keymap_get_for_display" version="2.2">
        <doc xml:space="preserve">Returns the #GdkKeymap attached to @display.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the #GdkKeymap attached to @display.</doc>
          <type name="Keymap" c:type="GdkKeymap*"/>
        </return-value>
        <parameters>
          <parameter name="display" transfer-ownership="none">
            <doc xml:space="preserve">the #GdkDisplay.</doc>
            <type name="Display" c:type="GdkDisplay*"/>
          </parameter>
        </parameters>
      </function>
      <method name="add_virtual_modifiers" c:identifier="gdk_keymap_add_virtual_modifiers" version="2.20">
        <doc xml:space="preserve">Maps the non-virtual modifiers (i.e Mod2, Mod3, ...) which are set
in @state to the virtual modifiers (i.e. Super, Hyper and Meta) and
set the corresponding bits in @state.

GDK already does this before delivering key events, but for
compatibility reasons, it only sets the first virtual modifier
it finds, whereas this function sets all matching virtual modifiers.

This function is useful when matching key events against
accelerators.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="keymap" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkKeymap</doc>
            <type name="Keymap" c:type="GdkKeymap*"/>
          </instance-parameter>
          <parameter name="state" direction="inout" caller-allocates="0" transfer-ownership="full">
            <doc xml:space="preserve">pointer to the modifier mask to change</doc>
            <type name="ModifierType" c:type="GdkModifierType*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_caps_lock_state" c:identifier="gdk_keymap_get_caps_lock_state" version="2.16">
        <doc xml:space="preserve">Returns whether the Caps Lock modifer is locked.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if Caps Lock is on</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="keymap" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkKeymap</doc>
            <type name="Keymap" c:type="GdkKeymap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_direction" c:identifier="gdk_keymap_get_direction">
        <doc xml:space="preserve">Returns the direction of effective layout of the keymap.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%PANGO_DIRECTION_LTR or %PANGO_DIRECTION_RTL
  if it can determine the direction. %PANGO_DIRECTION_NEUTRAL
  otherwise.</doc>
          <type name="Pango.Direction" c:type="PangoDirection"/>
        </return-value>
        <parameters>
          <instance-parameter name="keymap" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkKeymap</doc>
            <type name="Keymap" c:type="GdkKeymap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_entries_for_keycode" c:identifier="gdk_keymap_get_entries_for_keycode">
        <doc xml:space="preserve">Returns the keyvals bound to @hardware_keycode.
The Nth #GdkKeymapKey in @keys is bound to the Nth
keyval in @keyvals. Free the returned arrays with g_free().
When a keycode is pressed by the user, the keyval from
this list of entries is selected by considering the effective
keyboard group and level. See gdk_keymap_translate_keyboard_state().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if there were any entries</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="keymap" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkKeymap</doc>
            <type name="Keymap" c:type="GdkKeymap*"/>
          </instance-parameter>
          <parameter name="hardware_keycode" transfer-ownership="none">
            <doc xml:space="preserve">a keycode</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="keys" direction="out" caller-allocates="0" transfer-ownership="full" optional="1" allow-none="1">
            <doc xml:space="preserve">return
    location for array of #GdkKeymapKey, or %NULL</doc>
            <array length="3" zero-terminated="0" c:type="GdkKeymapKey**">
              <type name="KeymapKey" c:type="GdkKeymapKey*"/>
            </array>
          </parameter>
          <parameter name="keyvals" direction="out" caller-allocates="0" transfer-ownership="full" optional="1" allow-none="1">
            <doc xml:space="preserve">return
    location for array of keyvals, or %NULL</doc>
            <array length="3" zero-terminated="0" c:type="guint**">
              <type name="guint" c:type="guint*"/>
            </array>
          </parameter>
          <parameter name="n_entries" direction="out" caller-allocates="0" transfer-ownership="full">
            <doc xml:space="preserve">length of @keys and @keyvals</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_entries_for_keyval" c:identifier="gdk_keymap_get_entries_for_keyval">
        <doc xml:space="preserve">Obtains a list of keycode/group/level combinations that will
generate @keyval. Groups and levels are two kinds of keyboard mode;
in general, the level determines whether the top or bottom symbol
on a key is used, and the group determines whether the left or
right symbol is used. On US keyboards, the shift key changes the
keyboard level, and there are no groups. A group switch key might
convert a keyboard between Hebrew to English modes, for example.
#GdkEventKey contains a %group field that indicates the active
keyboard group. The level is computed from the modifier mask.
The returned array should be freed
with g_free().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if keys were found and returned</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="keymap" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkKeymap</doc>
            <type name="Keymap" c:type="GdkKeymap*"/>
          </instance-parameter>
          <parameter name="keyval" transfer-ownership="none">
            <doc xml:space="preserve">a keyval, such as %GDK_KEY_a, %GDK_KEY_Up, %GDK_KEY_Return, etc.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="keys" direction="out" caller-allocates="0" transfer-ownership="full">
            <doc xml:space="preserve">return location
    for an array of #GdkKeymapKey</doc>
            <array length="2" zero-terminated="0" c:type="GdkKeymapKey**">
              <type name="KeymapKey" c:type="GdkKeymapKey*"/>
            </array>
          </parameter>
          <parameter name="n_keys" direction="out" caller-allocates="0" transfer-ownership="full">
            <doc xml:space="preserve">return location for number of elements in returned array</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_modifier_mask" c:identifier="gdk_keymap_get_modifier_mask" version="3.4">
        <doc xml:space="preserve">Returns the modifier mask the @keymap&#x2019;s windowing system backend
uses for a particular purpose.

Note that this function always returns real hardware modifiers, not
virtual ones (e.g. it will return #GDK_MOD1_MASK rather than
#GDK_META_MASK if the backend maps MOD1 to META), so there are use
cases where the return value of this function has to be transformed
by gdk_keymap_add_virtual_modifiers() in order to contain the
expected result.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the modifier mask used for @intent.</doc>
          <type name="ModifierType" c:type="GdkModifierType"/>
        </return-value>
        <parameters>
          <instance-parameter name="keymap" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkKeymap</doc>
            <type name="Keymap" c:type="GdkKeymap*"/>
          </instance-parameter>
          <parameter name="intent" transfer-ownership="none">
            <doc xml:space="preserve">the use case for the modifier mask</doc>
            <type name="ModifierIntent" c:type="GdkModifierIntent"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_modifier_state" c:identifier="gdk_keymap_get_modifier_state" version="3.4">
        <doc xml:space="preserve">Returns the current modifier state.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the current modifier state.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="keymap" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkKeymap</doc>
            <type name="Keymap" c:type="GdkKeymap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_num_lock_state" c:identifier="gdk_keymap_get_num_lock_state" version="3.0">
        <doc xml:space="preserve">Returns whether the Num Lock modifer is locked.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if Num Lock is on</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="keymap" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkKeymap</doc>
            <type name="Keymap" c:type="GdkKeymap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_scroll_lock_state" c:identifier="gdk_keymap_get_scroll_lock_state" version="3.18">
        <doc xml:space="preserve">Returns whether the Scroll Lock modifer is locked.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if Scroll Lock is on</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="keymap" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkKeymap</doc>
            <type name="Keymap" c:type="GdkKeymap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="have_bidi_layouts" c:identifier="gdk_keymap_have_bidi_layouts" version="2.12">
        <doc xml:space="preserve">Determines if keyboard layouts for both right-to-left and left-to-right
languages are in use.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if there are layouts in both directions, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="keymap" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkKeymap</doc>
            <type name="Keymap" c:type="GdkKeymap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="lookup_key" c:identifier="gdk_keymap_lookup_key">
        <doc xml:space="preserve">Looks up the keyval mapped to a keycode/group/level triplet.
If no keyval is bound to @key, returns 0. For normal user input,
you want to use gdk_keymap_translate_keyboard_state() instead of
this function, since the effective group/level may not be
the same as the current keyboard state.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a keyval, or 0 if none was mapped to the given @key</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="keymap" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkKeymap</doc>
            <type name="Keymap" c:type="GdkKeymap*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkKeymapKey with keycode, group, and level initialized</doc>
            <type name="KeymapKey" c:type="const GdkKeymapKey*"/>
          </parameter>
        </parameters>
      </method>
      <method name="map_virtual_modifiers" c:identifier="gdk_keymap_map_virtual_modifiers" version="2.20">
        <doc xml:space="preserve">Maps the virtual modifiers (i.e. Super, Hyper and Meta) which
are set in @state to their non-virtual counterparts (i.e. Mod2,
Mod3,...) and set the corresponding bits in @state.

This function is useful when matching key events against
accelerators.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%FALSE if two virtual modifiers were mapped to the
    same non-virtual modifier. Note that %FALSE is also returned
    if a virtual modifier is mapped to a non-virtual modifier that
    was already set in @state.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="keymap" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkKeymap</doc>
            <type name="Keymap" c:type="GdkKeymap*"/>
          </instance-parameter>
          <parameter name="state" direction="inout" caller-allocates="0" transfer-ownership="full">
            <doc xml:space="preserve">pointer to the modifier state to map</doc>
            <type name="ModifierType" c:type="GdkModifierType*"/>
          </parameter>
        </parameters>
      </method>
      <method name="translate_keyboard_state" c:identifier="gdk_keymap_translate_keyboard_state">
        <doc xml:space="preserve">Translates the contents of a #GdkEventKey into a keyval, effective
group, and level. Modifiers that affected the translation and
are thus unavailable for application use are returned in
@consumed_modifiers.
See [Groups][key-group-explanation] for an explanation of
groups and levels. The @effective_group is the group that was
actually used for the translation; some keys such as Enter are not
affected by the active keyboard group. The @level is derived from
@state. For convenience, #GdkEventKey already contains the translated
keyval, so this function isn&#x2019;t as useful as you might think.

@consumed_modifiers gives modifiers that should be masked outfrom @state
when comparing this key press to a hot key. For instance, on a US keyboard,
the `plus` symbol is shifted, so when comparing a key press to a
`&lt;Control&gt;plus` accelerator `&lt;Shift&gt;` should be masked out.

|[&lt;!-- language="C" --&gt;
// We want to ignore irrelevant modifiers like ScrollLock
#define ALL_ACCELS_MASK (GDK_CONTROL_MASK | GDK_SHIFT_MASK | GDK_MOD1_MASK)
gdk_keymap_translate_keyboard_state (keymap, event-&gt;hardware_keycode,
                                     event-&gt;state, event-&gt;group,
                                     &amp;keyval, NULL, NULL, &amp;consumed);
if (keyval == GDK_PLUS &amp;&amp;
    (event-&gt;state &amp; ~consumed &amp; ALL_ACCELS_MASK) == GDK_CONTROL_MASK)
  // Control was pressed
]|

An older interpretation @consumed_modifiers was that it contained
all modifiers that might affect the translation of the key;
this allowed accelerators to be stored with irrelevant consumed
modifiers, by doing:
|[&lt;!-- language="C" --&gt;
// XXX Don&#x2019;t do this XXX
if (keyval == accel_keyval &amp;&amp;
    (event-&gt;state &amp; ~consumed &amp; ALL_ACCELS_MASK) == (accel_mods &amp; ~consumed))
  // Accelerator was pressed
]|

However, this did not work if multi-modifier combinations were
used in the keymap, since, for instance, `&lt;Control&gt;` would be
masked out even if only `&lt;Control&gt;&lt;Alt&gt;` was used in the keymap.
To support this usage as well as well as possible, all single
modifier combinations that could affect the key for any combination
of modifiers will be returned in @consumed_modifiers; multi-modifier
combinations are returned only when actually found in @state. When
you store accelerators, you should always store them with consumed
modifiers removed. Store `&lt;Control&gt;plus`, not `&lt;Control&gt;&lt;Shift&gt;plus`,</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if there was a keyval bound to the keycode/state/group</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="keymap" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkKeymap</doc>
            <type name="Keymap" c:type="GdkKeymap*"/>
          </instance-parameter>
          <parameter name="hardware_keycode" transfer-ownership="none">
            <doc xml:space="preserve">a keycode</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="state" transfer-ownership="none">
            <doc xml:space="preserve">a modifier state</doc>
            <type name="ModifierType" c:type="GdkModifierType"/>
          </parameter>
          <parameter name="group" transfer-ownership="none">
            <doc xml:space="preserve">active keyboard group</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="keyval" direction="out" caller-allocates="0" transfer-ownership="full" optional="1" allow-none="1">
            <doc xml:space="preserve">return location for keyval, or %NULL</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
          <parameter name="effective_group" direction="out" caller-allocates="0" transfer-ownership="full" optional="1" allow-none="1">
            <doc xml:space="preserve">return location for effective
    group, or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="level" direction="out" caller-allocates="0" transfer-ownership="full" optional="1" allow-none="1">
            <doc xml:space="preserve">return location for level, or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="consumed_modifiers" direction="out" caller-allocates="0" transfer-ownership="full" optional="1" allow-none="1">
            <doc xml:space="preserve">return location for modifiers
    that were used to determine the group or level, or %NULL</doc>
            <type name="ModifierType" c:type="GdkModifierType*"/>
          </parameter>
        </parameters>
      </method>
      <glib:signal name="direction-changed" when="last" version="2.0">
        <doc xml:space="preserve">The ::direction-changed signal gets emitted when the direction of
the keymap changes.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="keys-changed" when="last" version="2.2">
        <doc xml:space="preserve">The ::keys-changed signal is emitted when the mapping represented by
@keymap changes.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="state-changed" when="last" version="2.16">
        <doc xml:space="preserve">The ::state-changed signal is emitted when the state of the
keyboard changes, e.g when Caps Lock is turned on or off.
See gdk_keymap_get_caps_lock_state().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="KeymapKey" c:type="GdkKeymapKey">
      <doc xml:space="preserve">A #GdkKeymapKey is a hardware key that can be mapped to a keyval.</doc>
      <field name="keycode" writable="1">
        <doc xml:space="preserve">the hardware keycode. This is an identifying number for a
  physical key.</doc>
        <type name="guint" c:type="guint"/>
      </field>
      <field name="group" writable="1">
        <doc xml:space="preserve">indicates movement in a horizontal direction. Usually groups are used
  for two different languages. In group 0, a key might have two English
  characters, and in group 1 it might have two Hebrew characters. The Hebrew
  characters will be printed on the key next to the English characters.</doc>
        <type name="gint" c:type="gint"/>
      </field>
      <field name="level" writable="1">
        <doc xml:space="preserve">indicates which symbol on the key will be used, in a vertical direction.
  So on a standard US keyboard, the key with the number &#x201C;1&#x201D; on it also has the
  exclamation point ("!") character on it. The level indicates whether to use
  the &#x201C;1&#x201D; or the &#x201C;!&#x201D; symbol. The letter keys are considered to have a lowercase
  letter at level 0, and an uppercase letter at level 1, though only the
  uppercase letter is printed.</doc>
        <type name="gint" c:type="gint"/>
      </field>
    </record>
    <constant name="MAJOR_VERSION" value="3" c:type="GDK_MAJOR_VERSION">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="MAX_TIMECOORD_AXES" value="128" c:type="GDK_MAX_TIMECOORD_AXES">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="MICRO_VERSION" value="42" c:type="GDK_MICRO_VERSION">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="MINOR_VERSION" value="24" c:type="GDK_MINOR_VERSION">
      <type name="gint" c:type="gint"/>
    </constant>
    <function-macro name="MONITOR" c:identifier="GDK_MONITOR" introspectable="0">
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <enumeration name="ModifierIntent" version="3.4" glib:type-name="GdkModifierIntent" glib:get-type="gdk_modifier_intent_get_type" c:type="GdkModifierIntent">
      <doc xml:space="preserve">This enum is used with gdk_keymap_get_modifier_mask()
in order to determine what modifiers the
currently used windowing system backend uses for particular
purposes. For example, on X11/Windows, the Control key is used for
invoking menu shortcuts (accelerators), whereas on Apple computers
it&#x2019;s the Command key (which correspond to %GDK_CONTROL_MASK and
%GDK_MOD2_MASK, respectively).</doc>
      <member name="primary_accelerator" value="0" c:identifier="GDK_MODIFIER_INTENT_PRIMARY_ACCELERATOR" glib:nick="primary-accelerator" glib:name="GDK_MODIFIER_INTENT_PRIMARY_ACCELERATOR">
        <doc xml:space="preserve">the primary modifier used to invoke
 menu accelerators.</doc>
      </member>
      <member name="context_menu" value="1" c:identifier="GDK_MODIFIER_INTENT_CONTEXT_MENU" glib:nick="context-menu" glib:name="GDK_MODIFIER_INTENT_CONTEXT_MENU">
        <doc xml:space="preserve">the modifier used to invoke context menus.
 Note that mouse button 3 always triggers context menus. When this modifier
 is not 0, it additionally triggers context menus when used with mouse button 1.</doc>
      </member>
      <member name="extend_selection" value="2" c:identifier="GDK_MODIFIER_INTENT_EXTEND_SELECTION" glib:nick="extend-selection" glib:name="GDK_MODIFIER_INTENT_EXTEND_SELECTION">
        <doc xml:space="preserve">the modifier used to extend selections
 using `modifier`-click or `modifier`-cursor-key</doc>
      </member>
      <member name="modify_selection" value="3" c:identifier="GDK_MODIFIER_INTENT_MODIFY_SELECTION" glib:nick="modify-selection" glib:name="GDK_MODIFIER_INTENT_MODIFY_SELECTION">
        <doc xml:space="preserve">the modifier used to modify selections,
 which in most cases means toggling the clicked item into or out of the selection.</doc>
      </member>
      <member name="no_text_input" value="4" c:identifier="GDK_MODIFIER_INTENT_NO_TEXT_INPUT" glib:nick="no-text-input" glib:name="GDK_MODIFIER_INTENT_NO_TEXT_INPUT">
        <doc xml:space="preserve">when any of these modifiers is pressed, the
 key event cannot produce a symbol directly. This is meant to be used for
 input methods, and for use cases like typeahead search.</doc>
      </member>
      <member name="shift_group" value="5" c:identifier="GDK_MODIFIER_INTENT_SHIFT_GROUP" glib:nick="shift-group" glib:name="GDK_MODIFIER_INTENT_SHIFT_GROUP">
        <doc xml:space="preserve">the modifier that switches between keyboard
 groups (AltGr on X11/Windows and Option/Alt on OS X).</doc>
      </member>
      <member name="default_mod_mask" value="6" c:identifier="GDK_MODIFIER_INTENT_DEFAULT_MOD_MASK" glib:nick="default-mod-mask" glib:name="GDK_MODIFIER_INTENT_DEFAULT_MOD_MASK">
        <doc xml:space="preserve">The set of modifier masks accepted
as modifiers in accelerators. Needed because Command is mapped to MOD2 on
OSX, which is widely used, but on X11 MOD2 is NumLock and using that for a
mod key is problematic at best.
Ref: https://bugzilla.gnome.org/show_bug.cgi?id=736125.</doc>
      </member>
    </enumeration>
    <bitfield name="ModifierType" glib:type-name="GdkModifierType" glib:get-type="gdk_modifier_type_get_type" c:type="GdkModifierType">
      <doc xml:space="preserve">A set of bit-flags to indicate the state of modifier keys and mouse buttons
in various event types. Typical modifier keys are Shift, Control, Meta,
Super, Hyper, Alt, Compose, Apple, CapsLock or ShiftLock.

Like the X Window System, GDK supports 8 modifier keys and 5 mouse buttons.

Since 2.10, GDK recognizes which of the Meta, Super or Hyper keys are mapped
to Mod2 - Mod5, and indicates this by setting %GDK_SUPER_MASK,
%GDK_HYPER_MASK or %GDK_META_MASK in the state field of key events.

Note that GDK may add internal values to events which include
reserved values such as %GDK_MODIFIER_RESERVED_13_MASK.  Your code
should preserve and ignore them.  You can use %GDK_MODIFIER_MASK to
remove all reserved values.

Also note that the GDK X backend interprets button press events for button
4-7 as scroll events, so %GDK_BUTTON4_MASK and %GDK_BUTTON5_MASK will never
be set.</doc>
      <member name="shift_mask" value="1" c:identifier="GDK_SHIFT_MASK" glib:nick="shift-mask" glib:name="GDK_SHIFT_MASK">
        <doc xml:space="preserve">the Shift key.</doc>
      </member>
      <member name="lock_mask" value="2" c:identifier="GDK_LOCK_MASK" glib:nick="lock-mask" glib:name="GDK_LOCK_MASK">
        <doc xml:space="preserve">a Lock key (depending on the modifier mapping of the
 X server this may either be CapsLock or ShiftLock).</doc>
      </member>
      <member name="control_mask" value="4" c:identifier="GDK_CONTROL_MASK" glib:nick="control-mask" glib:name="GDK_CONTROL_MASK">
        <doc xml:space="preserve">the Control key.</doc>
      </member>
      <member name="mod1_mask" value="8" c:identifier="GDK_MOD1_MASK" glib:nick="mod1-mask" glib:name="GDK_MOD1_MASK">
        <doc xml:space="preserve">the fourth modifier key (it depends on the modifier
 mapping of the X server which key is interpreted as this modifier, but
 normally it is the Alt key).</doc>
      </member>
      <member name="mod2_mask" value="16" c:identifier="GDK_MOD2_MASK" glib:nick="mod2-mask" glib:name="GDK_MOD2_MASK">
        <doc xml:space="preserve">the fifth modifier key (it depends on the modifier
 mapping of the X server which key is interpreted as this modifier).</doc>
      </member>
      <member name="mod3_mask" value="32" c:identifier="GDK_MOD3_MASK" glib:nick="mod3-mask" glib:name="GDK_MOD3_MASK">
        <doc xml:space="preserve">the sixth modifier key (it depends on the modifier
 mapping of the X server which key is interpreted as this modifier).</doc>
      </member>
      <member name="mod4_mask" value="64" c:identifier="GDK_MOD4_MASK" glib:nick="mod4-mask" glib:name="GDK_MOD4_MASK">
        <doc xml:space="preserve">the seventh modifier key (it depends on the modifier
 mapping of the X server which key is interpreted as this modifier).</doc>
      </member>
      <member name="mod5_mask" value="128" c:identifier="GDK_MOD5_MASK" glib:nick="mod5-mask" glib:name="GDK_MOD5_MASK">
        <doc xml:space="preserve">the eighth modifier key (it depends on the modifier
 mapping of the X server which key is interpreted as this modifier).</doc>
      </member>
      <member name="button1_mask" value="256" c:identifier="GDK_BUTTON1_MASK" glib:nick="button1-mask" glib:name="GDK_BUTTON1_MASK">
        <doc xml:space="preserve">the first mouse button.</doc>
      </member>
      <member name="button2_mask" value="512" c:identifier="GDK_BUTTON2_MASK" glib:nick="button2-mask" glib:name="GDK_BUTTON2_MASK">
        <doc xml:space="preserve">the second mouse button.</doc>
      </member>
      <member name="button3_mask" value="1024" c:identifier="GDK_BUTTON3_MASK" glib:nick="button3-mask" glib:name="GDK_BUTTON3_MASK">
        <doc xml:space="preserve">the third mouse button.</doc>
      </member>
      <member name="button4_mask" value="2048" c:identifier="GDK_BUTTON4_MASK" glib:nick="button4-mask" glib:name="GDK_BUTTON4_MASK">
        <doc xml:space="preserve">the fourth mouse button.</doc>
      </member>
      <member name="button5_mask" value="4096" c:identifier="GDK_BUTTON5_MASK" glib:nick="button5-mask" glib:name="GDK_BUTTON5_MASK">
        <doc xml:space="preserve">the fifth mouse button.</doc>
      </member>
      <member name="modifier_reserved_13_mask" value="8192" c:identifier="GDK_MODIFIER_RESERVED_13_MASK" glib:nick="modifier-reserved-13-mask" glib:name="GDK_MODIFIER_RESERVED_13_MASK">
        <doc xml:space="preserve">A reserved bit flag; do not use in your own code</doc>
      </member>
      <member name="modifier_reserved_14_mask" value="16384" c:identifier="GDK_MODIFIER_RESERVED_14_MASK" glib:nick="modifier-reserved-14-mask" glib:name="GDK_MODIFIER_RESERVED_14_MASK">
        <doc xml:space="preserve">A reserved bit flag; do not use in your own code</doc>
      </member>
      <member name="modifier_reserved_15_mask" value="32768" c:identifier="GDK_MODIFIER_RESERVED_15_MASK" glib:nick="modifier-reserved-15-mask" glib:name="GDK_MODIFIER_RESERVED_15_MASK">
        <doc xml:space="preserve">A reserved bit flag; do not use in your own code</doc>
      </member>
      <member name="modifier_reserved_16_mask" value="65536" c:identifier="GDK_MODIFIER_RESERVED_16_MASK" glib:nick="modifier-reserved-16-mask" glib:name="GDK_MODIFIER_RESERVED_16_MASK">
        <doc xml:space="preserve">A reserved bit flag; do not use in your own code</doc>
      </member>
      <member name="modifier_reserved_17_mask" value="131072" c:identifier="GDK_MODIFIER_RESERVED_17_MASK" glib:nick="modifier-reserved-17-mask" glib:name="GDK_MODIFIER_RESERVED_17_MASK">
        <doc xml:space="preserve">A reserved bit flag; do not use in your own code</doc>
      </member>
      <member name="modifier_reserved_18_mask" value="262144" c:identifier="GDK_MODIFIER_RESERVED_18_MASK" glib:nick="modifier-reserved-18-mask" glib:name="GDK_MODIFIER_RESERVED_18_MASK">
        <doc xml:space="preserve">A reserved bit flag; do not use in your own code</doc>
      </member>
      <member name="modifier_reserved_19_mask" value="524288" c:identifier="GDK_MODIFIER_RESERVED_19_MASK" glib:nick="modifier-reserved-19-mask" glib:name="GDK_MODIFIER_RESERVED_19_MASK">
        <doc xml:space="preserve">A reserved bit flag; do not use in your own code</doc>
      </member>
      <member name="modifier_reserved_20_mask" value="1048576" c:identifier="GDK_MODIFIER_RESERVED_20_MASK" glib:nick="modifier-reserved-20-mask" glib:name="GDK_MODIFIER_RESERVED_20_MASK">
        <doc xml:space="preserve">A reserved bit flag; do not use in your own code</doc>
      </member>
      <member name="modifier_reserved_21_mask" value="2097152" c:identifier="GDK_MODIFIER_RESERVED_21_MASK" glib:nick="modifier-reserved-21-mask" glib:name="GDK_MODIFIER_RESERVED_21_MASK">
        <doc xml:space="preserve">A reserved bit flag; do not use in your own code</doc>
      </member>
      <member name="modifier_reserved_22_mask" value="4194304" c:identifier="GDK_MODIFIER_RESERVED_22_MASK" glib:nick="modifier-reserved-22-mask" glib:name="GDK_MODIFIER_RESERVED_22_MASK">
        <doc xml:space="preserve">A reserved bit flag; do not use in your own code</doc>
      </member>
      <member name="modifier_reserved_23_mask" value="8388608" c:identifier="GDK_MODIFIER_RESERVED_23_MASK" glib:nick="modifier-reserved-23-mask" glib:name="GDK_MODIFIER_RESERVED_23_MASK">
        <doc xml:space="preserve">A reserved bit flag; do not use in your own code</doc>
      </member>
      <member name="modifier_reserved_24_mask" value="16777216" c:identifier="GDK_MODIFIER_RESERVED_24_MASK" glib:nick="modifier-reserved-24-mask" glib:name="GDK_MODIFIER_RESERVED_24_MASK">
        <doc xml:space="preserve">A reserved bit flag; do not use in your own code</doc>
      </member>
      <member name="modifier_reserved_25_mask" value="33554432" c:identifier="GDK_MODIFIER_RESERVED_25_MASK" glib:nick="modifier-reserved-25-mask" glib:name="GDK_MODIFIER_RESERVED_25_MASK">
        <doc xml:space="preserve">A reserved bit flag; do not use in your own code</doc>
      </member>
      <member name="super_mask" value="67108864" c:identifier="GDK_SUPER_MASK" glib:nick="super-mask" glib:name="GDK_SUPER_MASK">
        <doc xml:space="preserve">the Super modifier. Since 2.10</doc>
      </member>
      <member name="hyper_mask" value="134217728" c:identifier="GDK_HYPER_MASK" glib:nick="hyper-mask" glib:name="GDK_HYPER_MASK">
        <doc xml:space="preserve">the Hyper modifier. Since 2.10</doc>
      </member>
      <member name="meta_mask" value="268435456" c:identifier="GDK_META_MASK" glib:nick="meta-mask" glib:name="GDK_META_MASK">
        <doc xml:space="preserve">the Meta modifier. Since 2.10</doc>
      </member>
      <member name="modifier_reserved_29_mask" value="536870912" c:identifier="GDK_MODIFIER_RESERVED_29_MASK" glib:nick="modifier-reserved-29-mask" glib:name="GDK_MODIFIER_RESERVED_29_MASK">
        <doc xml:space="preserve">A reserved bit flag; do not use in your own code</doc>
      </member>
      <member name="release_mask" value="1073741824" c:identifier="GDK_RELEASE_MASK" glib:nick="release-mask" glib:name="GDK_RELEASE_MASK">
        <doc xml:space="preserve">not used in GDK itself. GTK+ uses it to differentiate
 between (keyval, modifiers) pairs from key press and release events.</doc>
      </member>
      <member name="modifier_mask" value="1543512063" c:identifier="GDK_MODIFIER_MASK" glib:nick="modifier-mask" glib:name="GDK_MODIFIER_MASK">
        <doc xml:space="preserve">a mask covering all modifier types.</doc>
      </member>
    </bitfield>
    <class name="Monitor" c:symbol-prefix="monitor" c:type="GdkMonitor" parent="GObject.Object" glib:type-name="GdkMonitor" glib:get-type="gdk_monitor_get_type" glib:type-struct="MonitorClass">
      <doc xml:space="preserve">GdkMonitor objects represent the individual outputs that are
associated with a #GdkDisplay. GdkDisplay has APIs to enumerate
monitors with gdk_display_get_n_monitors() and gdk_display_get_monitor(), and
to find particular monitors with gdk_display_get_primary_monitor() or
gdk_display_get_monitor_at_window().

GdkMonitor was introduced in GTK+ 3.22 and supersedes earlier
APIs in GdkScreen to obtain monitor-related information.</doc>
      <method name="get_display" c:identifier="gdk_monitor_get_display" glib:get-property="display" version="3.22">
        <doc xml:space="preserve">Gets the display that this monitor belongs to.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the display</doc>
          <type name="Display" c:type="GdkDisplay*"/>
        </return-value>
        <parameters>
          <instance-parameter name="monitor" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkMonitor</doc>
            <type name="Monitor" c:type="GdkMonitor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_geometry" c:identifier="gdk_monitor_get_geometry" glib:get-property="geometry" version="3.22">
        <doc xml:space="preserve">Retrieves the size and position of an individual monitor within the
display coordinate space. The returned geometry is in  &#x201D;application pixels&#x201D;,
not in &#x201D;device pixels&#x201D; (see gdk_monitor_get_scale_factor()).</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="monitor" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkMonitor</doc>
            <type name="Monitor" c:type="GdkMonitor*"/>
          </instance-parameter>
          <parameter name="geometry" direction="out" caller-allocates="1" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkRectangle to be filled with the monitor geometry</doc>
            <type name="Rectangle" c:type="GdkRectangle*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_height_mm" c:identifier="gdk_monitor_get_height_mm" glib:get-property="height-mm" version="3.22">
        <doc xml:space="preserve">Gets the height in millimeters of the monitor.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the physical height of the monitor</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="monitor" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkMonitor</doc>
            <type name="Monitor" c:type="GdkMonitor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_manufacturer" c:identifier="gdk_monitor_get_manufacturer" glib:get-property="manufacturer">
        <doc xml:space="preserve">Gets the name or PNP ID of the monitor's manufacturer, if available.

Note that this value might also vary depending on actual
display backend.

PNP ID registry is located at https://uefi.org/pnp_id_list</doc>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">the name of the manufacturer, or %NULL</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="monitor" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkMonitor</doc>
            <type name="Monitor" c:type="GdkMonitor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_model" c:identifier="gdk_monitor_get_model" glib:get-property="model">
        <doc xml:space="preserve">Gets the a string identifying the monitor model, if available.</doc>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">the monitor model, or %NULL</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="monitor" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkMonitor</doc>
            <type name="Monitor" c:type="GdkMonitor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_refresh_rate" c:identifier="gdk_monitor_get_refresh_rate" glib:get-property="refresh-rate" version="3.22">
        <doc xml:space="preserve">Gets the refresh rate of the monitor, if available.

The value is in milli-Hertz, so a refresh rate of 60Hz
is returned as 60000.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the refresh rate in milli-Hertz, or 0</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="monitor" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkMonitor</doc>
            <type name="Monitor" c:type="GdkMonitor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_scale_factor" c:identifier="gdk_monitor_get_scale_factor" glib:get-property="scale-factor" version="3.22">
        <doc xml:space="preserve">Gets the internal scale factor that maps from monitor coordinates
to the actual device pixels. On traditional systems this is 1, but
on very high density outputs this can be a higher value (often 2).

This can be used if you want to create pixel based data for a
particular monitor, but most of the time you&#x2019;re drawing to a window
where it is better to use gdk_window_get_scale_factor() instead.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the scale factor</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="monitor" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkMonitor</doc>
            <type name="Monitor" c:type="GdkMonitor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_subpixel_layout" c:identifier="gdk_monitor_get_subpixel_layout" glib:get-property="subpixel-layout" version="3.22">
        <doc xml:space="preserve">Gets information about the layout of red, green and blue
primaries for each pixel in this monitor, if available.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the subpixel layout</doc>
          <type name="SubpixelLayout" c:type="GdkSubpixelLayout"/>
        </return-value>
        <parameters>
          <instance-parameter name="monitor" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkMonitor</doc>
            <type name="Monitor" c:type="GdkMonitor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_width_mm" c:identifier="gdk_monitor_get_width_mm" glib:get-property="width-mm" version="3.22">
        <doc xml:space="preserve">Gets the width in millimeters of the monitor.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the physical width of the monitor</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="monitor" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkMonitor</doc>
            <type name="Monitor" c:type="GdkMonitor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_workarea" c:identifier="gdk_monitor_get_workarea" glib:get-property="workarea" version="3.22">
        <doc xml:space="preserve">Retrieves the size and position of the &#x201C;work area&#x201D; on a monitor
within the display coordinate space. The returned geometry is in
&#x201D;application pixels&#x201D;, not in &#x201D;device pixels&#x201D; (see
gdk_monitor_get_scale_factor()).

The work area should be considered when positioning menus and
similar popups, to avoid placing them below panels, docks or other
desktop components.

Note that not all backends may have a concept of workarea. This
function will return the monitor geometry if a workarea is not
available, or does not apply.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="monitor" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkMonitor</doc>
            <type name="Monitor" c:type="GdkMonitor*"/>
          </instance-parameter>
          <parameter name="workarea" direction="out" caller-allocates="1" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkRectangle to be filled with
    the monitor workarea</doc>
            <type name="Rectangle" c:type="GdkRectangle*"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_primary" c:identifier="gdk_monitor_is_primary" version="3.22">
        <doc xml:space="preserve">Gets whether this monitor should be considered primary
(see gdk_display_get_primary_monitor()).</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if @monitor is primary</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="monitor" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkMonitor</doc>
            <type name="Monitor" c:type="GdkMonitor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="display" writable="1" construct-only="1" transfer-ownership="none" getter="get_display">
        <type name="Display"/>
      </property>
      <property name="geometry" transfer-ownership="none" getter="get_geometry">
        <type name="Rectangle"/>
      </property>
      <property name="height-mm" transfer-ownership="none" getter="get_height_mm" default-value="0">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="manufacturer" transfer-ownership="none" getter="get_manufacturer" default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="model" transfer-ownership="none" getter="get_model" default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="refresh-rate" transfer-ownership="none" getter="get_refresh_rate" default-value="0">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="scale-factor" transfer-ownership="none" getter="get_scale_factor" default-value="1">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="subpixel-layout" transfer-ownership="none" getter="get_subpixel_layout" default-value="GDK_SUBPIXEL_LAYOUT_UNKNOWN">
        <type name="SubpixelLayout"/>
      </property>
      <property name="width-mm" transfer-ownership="none" getter="get_width_mm" default-value="0">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="workarea" transfer-ownership="none" getter="get_workarea">
        <type name="Rectangle"/>
      </property>
      <glib:signal name="invalidate" when="first">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="MonitorClass" c:type="GdkMonitorClass" disguised="1" opaque="1" glib:is-gtype-struct-for="Monitor"/>
    <enumeration name="NotifyType" glib:type-name="GdkNotifyType" glib:get-type="gdk_notify_type_get_type" c:type="GdkNotifyType">
      <doc xml:space="preserve">Specifies the kind of crossing for #GdkEventCrossing.

See the X11 protocol specification of LeaveNotify for
full details of crossing event generation.</doc>
      <member name="ancestor" value="0" c:identifier="GDK_NOTIFY_ANCESTOR" glib:nick="ancestor" glib:name="GDK_NOTIFY_ANCESTOR">
        <doc xml:space="preserve">the window is entered from an ancestor or
  left towards an ancestor.</doc>
      </member>
      <member name="virtual" value="1" c:identifier="GDK_NOTIFY_VIRTUAL" glib:nick="virtual" glib:name="GDK_NOTIFY_VIRTUAL">
        <doc xml:space="preserve">the pointer moves between an ancestor and an
  inferior of the window.</doc>
      </member>
      <member name="inferior" value="2" c:identifier="GDK_NOTIFY_INFERIOR" glib:nick="inferior" glib:name="GDK_NOTIFY_INFERIOR">
        <doc xml:space="preserve">the window is entered from an inferior or
  left towards an inferior.</doc>
      </member>
      <member name="nonlinear" value="3" c:identifier="GDK_NOTIFY_NONLINEAR" glib:nick="nonlinear" glib:name="GDK_NOTIFY_NONLINEAR">
        <doc xml:space="preserve">the window is entered from or left towards
  a window which is neither an ancestor nor an inferior.</doc>
      </member>
      <member name="nonlinear_virtual" value="4" c:identifier="GDK_NOTIFY_NONLINEAR_VIRTUAL" glib:nick="nonlinear-virtual" glib:name="GDK_NOTIFY_NONLINEAR_VIRTUAL">
        <doc xml:space="preserve">the pointer moves between two windows
  which are not ancestors of each other and the window is part of
  the ancestor chain between one of these windows and their least
  common ancestor.</doc>
      </member>
      <member name="unknown" value="5" c:identifier="GDK_NOTIFY_UNKNOWN" glib:nick="unknown" glib:name="GDK_NOTIFY_UNKNOWN">
        <doc xml:space="preserve">an unknown type of enter/leave event occurred.</doc>
      </member>
    </enumeration>
    <enumeration name="OwnerChange" glib:type-name="GdkOwnerChange" glib:get-type="gdk_owner_change_get_type" c:type="GdkOwnerChange">
      <doc xml:space="preserve">Specifies why a selection ownership was changed.</doc>
      <member name="new_owner" value="0" c:identifier="GDK_OWNER_CHANGE_NEW_OWNER" glib:nick="new-owner" glib:name="GDK_OWNER_CHANGE_NEW_OWNER">
        <doc xml:space="preserve">some other app claimed the ownership</doc>
      </member>
      <member name="destroy" value="1" c:identifier="GDK_OWNER_CHANGE_DESTROY" glib:nick="destroy" glib:name="GDK_OWNER_CHANGE_DESTROY">
        <doc xml:space="preserve">the window was destroyed</doc>
      </member>
      <member name="close" value="2" c:identifier="GDK_OWNER_CHANGE_CLOSE" glib:nick="close" glib:name="GDK_OWNER_CHANGE_CLOSE">
        <doc xml:space="preserve">the client was closed</doc>
      </member>
    </enumeration>
    <constant name="PARENT_RELATIVE" value="1" c:type="GDK_PARENT_RELATIVE">
      <doc xml:space="preserve">A special value, indicating that the background
for a window should be inherited from the parent window.</doc>
      <type name="gint" c:type="gint"/>
    </constant>
    <function-macro name="POINTER_TO_ATOM" c:identifier="GDK_POINTER_TO_ATOM" introspectable="0">
      <doc xml:space="preserve">Extracts a #GdkAtom from a pointer. The #GdkAtom must have been
stored in the pointer with GDK_ATOM_TO_POINTER().</doc>
      <parameters>
        <parameter name="ptr">
          <doc xml:space="preserve">a pointer containing a #GdkAtom.</doc>
        </parameter>
      </parameters>
    </function-macro>
    <constant name="PRIORITY_REDRAW" value="120" c:type="GDK_PRIORITY_REDRAW">
      <doc xml:space="preserve">This is the priority that the idle handler processing window updates
is given in the
[GLib Main Loop][glib-The-Main-Event-Loop].</doc>
      <type name="gint" c:type="gint"/>
    </constant>
    <record name="Point" c:type="GdkPoint">
      <doc xml:space="preserve">Defines the x and y coordinates of a point.</doc>
      <field name="x" writable="1">
        <doc xml:space="preserve">the x coordinate of the point.</doc>
        <type name="gint" c:type="gint"/>
      </field>
      <field name="y" writable="1">
        <doc xml:space="preserve">the y coordinate of the point.</doc>
        <type name="gint" c:type="gint"/>
      </field>
    </record>
    <enumeration name="PropMode" glib:type-name="GdkPropMode" glib:get-type="gdk_prop_mode_get_type" c:type="GdkPropMode">
      <doc xml:space="preserve">Describes how existing data is combined with new data when
using gdk_property_change().</doc>
      <member name="replace" value="0" c:identifier="GDK_PROP_MODE_REPLACE" glib:nick="replace" glib:name="GDK_PROP_MODE_REPLACE">
        <doc xml:space="preserve">the new data replaces the existing data.</doc>
      </member>
      <member name="prepend" value="1" c:identifier="GDK_PROP_MODE_PREPEND" glib:nick="prepend" glib:name="GDK_PROP_MODE_PREPEND">
        <doc xml:space="preserve">the new data is prepended to the existing data.</doc>
      </member>
      <member name="append" value="2" c:identifier="GDK_PROP_MODE_APPEND" glib:nick="append" glib:name="GDK_PROP_MODE_APPEND">
        <doc xml:space="preserve">the new data is appended to the existing data.</doc>
      </member>
    </enumeration>
    <enumeration name="PropertyState" glib:type-name="GdkPropertyState" glib:get-type="gdk_property_state_get_type" c:type="GdkPropertyState">
      <doc xml:space="preserve">Specifies the type of a property change for a #GdkEventProperty.</doc>
      <member name="new_value" value="0" c:identifier="GDK_PROPERTY_NEW_VALUE" glib:nick="new-value" glib:name="GDK_PROPERTY_NEW_VALUE">
        <doc xml:space="preserve">the property value was changed.</doc>
      </member>
      <member name="delete" value="1" c:identifier="GDK_PROPERTY_DELETE" glib:nick="delete" glib:name="GDK_PROPERTY_DELETE">
        <doc xml:space="preserve">the property was deleted.</doc>
      </member>
    </enumeration>
    <record name="RGBA" c:type="GdkRGBA" glib:type-name="GdkRGBA" glib:get-type="gdk_rgba_get_type" c:symbol-prefix="rgba">
      <doc xml:space="preserve">A #GdkRGBA is used to represent a (possibly translucent)
color, in a way that is compatible with cairo&#x2019;s notion of color.</doc>
      <field name="red" writable="1">
        <doc xml:space="preserve">The intensity of the red channel from 0.0 to 1.0 inclusive</doc>
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="green" writable="1">
        <doc xml:space="preserve">The intensity of the green channel from 0.0 to 1.0 inclusive</doc>
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="blue" writable="1">
        <doc xml:space="preserve">The intensity of the blue channel from 0.0 to 1.0 inclusive</doc>
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="alpha" writable="1">
        <doc xml:space="preserve">The opacity of the color from 0.0 for completely translucent to
  1.0 for opaque</doc>
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <method name="copy" c:identifier="gdk_rgba_copy" version="3.0">
        <doc xml:space="preserve">Makes a copy of a #GdkRGBA.

The result must be freed through gdk_rgba_free().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A newly allocated #GdkRGBA, with the same contents as @rgba</doc>
          <type name="RGBA" c:type="GdkRGBA*"/>
        </return-value>
        <parameters>
          <instance-parameter name="rgba" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkRGBA</doc>
            <type name="RGBA" c:type="const GdkRGBA*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="equal" c:identifier="gdk_rgba_equal" version="3.0">
        <doc xml:space="preserve">Compares two RGBA colors.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the two colors compare equal</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="p1" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkRGBA pointer</doc>
            <type name="RGBA" c:type="gconstpointer"/>
          </instance-parameter>
          <parameter name="p2" transfer-ownership="none">
            <doc xml:space="preserve">another #GdkRGBA pointer</doc>
            <type name="RGBA" c:type="gconstpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="gdk_rgba_free" version="3.0">
        <doc xml:space="preserve">Frees a #GdkRGBA created with gdk_rgba_copy()</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="rgba" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkRGBA</doc>
            <type name="RGBA" c:type="GdkRGBA*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="hash" c:identifier="gdk_rgba_hash" version="3.0">
        <doc xml:space="preserve">A hash function suitable for using for a hash
table that stores #GdkRGBAs.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The hash value for @p</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="p" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkRGBA pointer</doc>
            <type name="RGBA" c:type="gconstpointer"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="parse" c:identifier="gdk_rgba_parse" version="3.0">
        <doc xml:space="preserve">Parses a textual representation of a color, filling in
the @red, @green, @blue and @alpha fields of the @rgba #GdkRGBA.

The string can be either one of:
- A standard name (Taken from the X11 rgb.txt file).
- A hexadecimal value in the form &#x201C;\#rgb&#x201D;, &#x201C;\#rrggbb&#x201D;,
  &#x201C;\#rrrgggbbb&#x201D; or &#x201D;\#rrrrggggbbbb&#x201D;
- A RGB color in the form &#x201C;rgb(r,g,b)&#x201D; (In this case the color will
  have full opacity)
- A RGBA color in the form &#x201C;rgba(r,g,b,a)&#x201D;

Where &#x201C;r&#x201D;, &#x201C;g&#x201D;, &#x201C;b&#x201D; and &#x201C;a&#x201D; are respectively the red, green, blue and
alpha color values. In the last two cases, &#x201C;r&#x201D;, &#x201C;g&#x201D;, and &#x201C;b&#x201D; are either integers
in the range 0 to 255 or percentage values in the range 0% to 100%, and
a is a floating point value in the range 0 to 1.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the parsing succeeded</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="rgba" transfer-ownership="none">
            <doc xml:space="preserve">the #GdkRGBA to fill in</doc>
            <type name="RGBA" c:type="GdkRGBA*"/>
          </instance-parameter>
          <parameter name="spec" transfer-ownership="none">
            <doc xml:space="preserve">the string specifying the color</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="to_string" c:identifier="gdk_rgba_to_string" version="3.0">
        <doc xml:space="preserve">Returns a textual specification of @rgba in the form
`rgb(r,g,b)` or
`rgba(r g,b,a)`,
where &#x201C;r&#x201D;, &#x201C;g&#x201D;, &#x201C;b&#x201D; and &#x201C;a&#x201D; represent the red, green,
blue and alpha values respectively. &#x201C;r&#x201D;, &#x201C;g&#x201D;, and &#x201C;b&#x201D; are
represented as integers in the range 0 to 255, and &#x201C;a&#x201D;
is represented as a floating point value in the range 0 to 1.

These string forms are string forms that are supported by
the CSS3 colors module, and can be parsed by gdk_rgba_parse().

Note that this string representation may lose some
precision, since &#x201C;r&#x201D;, &#x201C;g&#x201D; and &#x201C;b&#x201D; are represented as 8-bit
integers. If this is a concern, you should use a
different representation.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A newly allocated text string</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="rgba" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkRGBA</doc>
            <type name="RGBA" c:type="const GdkRGBA*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <record name="Rectangle" c:type="GdkRectangle" glib:type-name="GdkRectangle" glib:get-type="gdk_rectangle_get_type" c:symbol-prefix="rectangle">
      <doc xml:space="preserve">Defines the position and size of a rectangle. It is identical to
#cairo_rectangle_int_t.</doc>
      <field name="x" writable="1">
        <type name="gint" c:type="int"/>
      </field>
      <field name="y" writable="1">
        <type name="gint" c:type="int"/>
      </field>
      <field name="width" writable="1">
        <type name="gint" c:type="int"/>
      </field>
      <field name="height" writable="1">
        <type name="gint" c:type="int"/>
      </field>
      <method name="equal" c:identifier="gdk_rectangle_equal" version="3.20">
        <doc xml:space="preserve">Checks if the two given rectangles are equal.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the rectangles are equal.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="rect1" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkRectangle</doc>
            <type name="Rectangle" c:type="const GdkRectangle*"/>
          </instance-parameter>
          <parameter name="rect2" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkRectangle</doc>
            <type name="Rectangle" c:type="const GdkRectangle*"/>
          </parameter>
        </parameters>
      </method>
      <method name="intersect" c:identifier="gdk_rectangle_intersect">
        <doc xml:space="preserve">Calculates the intersection of two rectangles. It is allowed for
@dest to be the same as either @src1 or @src2. If the rectangles
do not intersect, @dest&#x2019;s width and height is set to 0 and its x
and y values are undefined. If you are only interested in whether
the rectangles intersect, but not in the intersecting area itself,
pass %NULL for @dest.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the rectangles intersect.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="src1" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkRectangle</doc>
            <type name="Rectangle" c:type="const GdkRectangle*"/>
          </instance-parameter>
          <parameter name="src2" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkRectangle</doc>
            <type name="Rectangle" c:type="const GdkRectangle*"/>
          </parameter>
          <parameter name="dest" direction="out" caller-allocates="1" transfer-ownership="none" optional="1" allow-none="1">
            <doc xml:space="preserve">return location for the
intersection of @src1 and @src2, or %NULL</doc>
            <type name="Rectangle" c:type="GdkRectangle*"/>
          </parameter>
        </parameters>
      </method>
      <method name="union" c:identifier="gdk_rectangle_union">
        <doc xml:space="preserve">Calculates the union of two rectangles.
The union of rectangles @src1 and @src2 is the smallest rectangle which
includes both @src1 and @src2 within it.
It is allowed for @dest to be the same as either @src1 or @src2.

Note that this function does not ignore 'empty' rectangles (ie. with
zero width or height).</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="src1" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkRectangle</doc>
            <type name="Rectangle" c:type="const GdkRectangle*"/>
          </instance-parameter>
          <parameter name="src2" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkRectangle</doc>
            <type name="Rectangle" c:type="const GdkRectangle*"/>
          </parameter>
          <parameter name="dest" direction="out" caller-allocates="1" transfer-ownership="none">
            <doc xml:space="preserve">return location for the union of @src1 and @src2</doc>
            <type name="Rectangle" c:type="GdkRectangle*"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <function-macro name="SCREEN" c:identifier="GDK_SCREEN" introspectable="0">
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SEAT" c:identifier="GDK_SEAT" introspectable="0">
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <class name="Screen" c:symbol-prefix="screen" c:type="GdkScreen" parent="GObject.Object" glib:type-name="GdkScreen" glib:get-type="gdk_screen_get_type">
      <doc xml:space="preserve">#GdkScreen objects are the GDK representation of the screen on
which windows can be displayed and on which the pointer moves.
X originally identified screens with physical screens, but
nowadays it is more common to have a single #GdkScreen which
combines several physical monitors (see gdk_screen_get_n_monitors()).

GdkScreen is used throughout GDK and GTK+ to specify which screen
the top level windows are to be displayed on. it is also used to
query the screen specification and default settings such as
the default visual (gdk_screen_get_system_visual()), the dimensions
of the physical monitors (gdk_screen_get_monitor_geometry()), etc.</doc>
      <function name="get_default" c:identifier="gdk_screen_get_default" version="2.2">
        <doc xml:space="preserve">Gets the default screen for the default display. (See
gdk_display_get_default ()).</doc>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">a #GdkScreen, or %NULL if
    there is no default display.</doc>
          <type name="Screen" c:type="GdkScreen*"/>
        </return-value>
      </function>
      <function name="height" c:identifier="gdk_screen_height" deprecated="1" deprecated-version="3.22">
        <doc xml:space="preserve">Gets the height of the default screen in pixels. The returned
size is in &#x201D;application pixels&#x201D;, not in &#x201D;device pixels&#x201D; (see
gdk_screen_get_monitor_scale_factor()).</doc>
        <doc-deprecated xml:space="preserve">Use per-monitor information</doc-deprecated>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the height of the default screen in pixels.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </function>
      <function name="height_mm" c:identifier="gdk_screen_height_mm" deprecated="1" deprecated-version="3.22">
        <doc xml:space="preserve">Returns the height of the default screen in millimeters.
Note that on many X servers this value will not be correct.</doc>
        <doc-deprecated xml:space="preserve">Use per-monitor information</doc-deprecated>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the height of the default screen in millimeters,
though it is not always correct.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </function>
      <function name="width" c:identifier="gdk_screen_width" deprecated="1" deprecated-version="3.22">
        <doc xml:space="preserve">Gets the width of the default screen in pixels. The returned
size is in &#x201D;application pixels&#x201D;, not in &#x201D;device pixels&#x201D; (see
gdk_screen_get_monitor_scale_factor()).</doc>
        <doc-deprecated xml:space="preserve">Use per-monitor information</doc-deprecated>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the width of the default screen in pixels.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </function>
      <function name="width_mm" c:identifier="gdk_screen_width_mm" deprecated="1" deprecated-version="3.22">
        <doc xml:space="preserve">Returns the width of the default screen in millimeters.
Note that on many X servers this value will not be correct.</doc>
        <doc-deprecated xml:space="preserve">Use per-monitor information</doc-deprecated>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the width of the default screen in millimeters,
though it is not always correct.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </function>
      <method name="get_active_window" c:identifier="gdk_screen_get_active_window" version="2.10" deprecated="1" deprecated-version="3.22">
        <doc xml:space="preserve">Returns the screen&#x2019;s currently active window.

On X11, this is done by inspecting the _NET_ACTIVE_WINDOW property
on the root window, as described in the
[Extended Window Manager Hints](http://www.freedesktop.org/Standards/wm-spec).
If there is no currently currently active
window, or the window manager does not support the
_NET_ACTIVE_WINDOW hint, this function returns %NULL.

On other platforms, this function may return %NULL, depending on whether
it is implementable on that platform.

The returned window should be unrefed using g_object_unref() when
no longer needed.</doc>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve">the currently active window,
  or %NULL.</doc>
          <type name="Window" c:type="GdkWindow*"/>
        </return-value>
        <parameters>
          <instance-parameter name="screen" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkScreen</doc>
            <type name="Screen" c:type="GdkScreen*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_display" c:identifier="gdk_screen_get_display" version="2.2">
        <doc xml:space="preserve">Gets the display to which the @screen belongs.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the display to which @screen belongs</doc>
          <type name="Display" c:type="GdkDisplay*"/>
        </return-value>
        <parameters>
          <instance-parameter name="screen" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkScreen</doc>
            <type name="Screen" c:type="GdkScreen*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_font_options" c:identifier="gdk_screen_get_font_options" glib:get-property="font-options" version="2.10">
        <doc xml:space="preserve">Gets any options previously set with gdk_screen_set_font_options().</doc>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">the current font options, or %NULL if no
 default font options have been set.</doc>
          <type name="cairo.FontOptions" c:type="const cairo_font_options_t*"/>
        </return-value>
        <parameters>
          <instance-parameter name="screen" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkScreen</doc>
            <type name="Screen" c:type="GdkScreen*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_height" c:identifier="gdk_screen_get_height" version="2.2" deprecated="1" deprecated-version="3.22">
        <doc xml:space="preserve">Gets the height of @screen in pixels. The returned size is in
&#x201D;application pixels&#x201D;, not in &#x201D;device pixels&#x201D; (see
gdk_screen_get_monitor_scale_factor()).</doc>
        <doc-deprecated xml:space="preserve">Use per-monitor information instead</doc-deprecated>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the height of @screen in pixels.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="screen" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkScreen</doc>
            <type name="Screen" c:type="GdkScreen*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_height_mm" c:identifier="gdk_screen_get_height_mm" version="2.2" deprecated="1" deprecated-version="3.22">
        <doc xml:space="preserve">Returns the height of @screen in millimeters.

Note that this value is somewhat ill-defined when the screen
has multiple monitors of different resolution. It is recommended
to use the monitor dimensions instead.</doc>
        <doc-deprecated xml:space="preserve">Use per-monitor information instead</doc-deprecated>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the heigth of @screen in millimeters.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="screen" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkScreen</doc>
            <type name="Screen" c:type="GdkScreen*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_monitor_at_point" c:identifier="gdk_screen_get_monitor_at_point" version="2.2" deprecated="1" deprecated-version="3.22">
        <doc xml:space="preserve">Returns the monitor number in which the point (@x,@y) is located.</doc>
        <doc-deprecated xml:space="preserve">Use gdk_display_get_monitor_at_point() instead</doc-deprecated>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the monitor number in which the point (@x,@y) lies, or
  a monitor close to (@x,@y) if the point is not in any monitor.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="screen" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkScreen.</doc>
            <type name="Screen" c:type="GdkScreen*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">the x coordinate in the virtual screen.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve">the y coordinate in the virtual screen.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_monitor_at_window" c:identifier="gdk_screen_get_monitor_at_window" version="2.2" deprecated="1" deprecated-version="3.22">
        <doc xml:space="preserve">Returns the number of the monitor in which the largest area of the
bounding rectangle of @window resides.</doc>
        <doc-deprecated xml:space="preserve">Use gdk_display_get_monitor_at_window() instead</doc-deprecated>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the monitor number in which most of @window is located,
    or if @window does not intersect any monitors, a monitor,
    close to @window.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="screen" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkScreen.</doc>
            <type name="Screen" c:type="GdkScreen*"/>
          </instance-parameter>
          <parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_monitor_geometry" c:identifier="gdk_screen_get_monitor_geometry" version="2.2" deprecated="1" deprecated-version="3.22">
        <doc xml:space="preserve">Retrieves the #GdkRectangle representing the size and position of
the individual monitor within the entire screen area. The returned
geometry is in &#x201D;application pixels&#x201D;, not in &#x201D;device pixels&#x201D; (see
gdk_screen_get_monitor_scale_factor()).

Monitor numbers start at 0. To obtain the number of monitors of
@screen, use gdk_screen_get_n_monitors().

Note that the size of the entire screen area can be retrieved via
gdk_screen_get_width() and gdk_screen_get_height().</doc>
        <doc-deprecated xml:space="preserve">Use gdk_monitor_get_geometry() instead</doc-deprecated>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="screen" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkScreen</doc>
            <type name="Screen" c:type="GdkScreen*"/>
          </instance-parameter>
          <parameter name="monitor_num" transfer-ownership="none">
            <doc xml:space="preserve">the monitor number</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="dest" direction="out" caller-allocates="1" transfer-ownership="none" optional="1" allow-none="1">
            <doc xml:space="preserve">a #GdkRectangle to be filled with
    the monitor geometry</doc>
            <type name="Rectangle" c:type="GdkRectangle*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_monitor_height_mm" c:identifier="gdk_screen_get_monitor_height_mm" version="2.14" deprecated="1" deprecated-version="3.22">
        <doc xml:space="preserve">Gets the height in millimeters of the specified monitor.</doc>
        <doc-deprecated xml:space="preserve">Use gdk_monitor_get_height_mm() instead</doc-deprecated>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the height of the monitor, or -1 if not available</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="screen" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkScreen</doc>
            <type name="Screen" c:type="GdkScreen*"/>
          </instance-parameter>
          <parameter name="monitor_num" transfer-ownership="none">
            <doc xml:space="preserve">number of the monitor, between 0 and gdk_screen_get_n_monitors (screen)</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_monitor_plug_name" c:identifier="gdk_screen_get_monitor_plug_name" version="2.14" deprecated="1" deprecated-version="3.22">
        <doc xml:space="preserve">Returns the output name of the specified monitor.
Usually something like VGA, DVI, or TV, not the actual
product name of the display device.</doc>
        <doc-deprecated xml:space="preserve">Use gdk_monitor_get_model() instead</doc-deprecated>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve">a newly-allocated string containing the name
  of the monitor, or %NULL if the name cannot be determined</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="screen" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkScreen</doc>
            <type name="Screen" c:type="GdkScreen*"/>
          </instance-parameter>
          <parameter name="monitor_num" transfer-ownership="none">
            <doc xml:space="preserve">number of the monitor, between 0 and gdk_screen_get_n_monitors (screen)</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_monitor_scale_factor" c:identifier="gdk_screen_get_monitor_scale_factor" version="3.10" deprecated="1" deprecated-version="3.22">
        <doc xml:space="preserve">Returns the internal scale factor that maps from monitor coordinates
to the actual device pixels. On traditional systems this is 1, but
on very high density outputs this can be a higher value (often 2).

This can be used if you want to create pixel based data for a
particular monitor, but most of the time you&#x2019;re drawing to a window
where it is better to use gdk_window_get_scale_factor() instead.</doc>
        <doc-deprecated xml:space="preserve">Use gdk_monitor_get_scale_factor() instead</doc-deprecated>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the scale factor</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="screen" transfer-ownership="none">
            <doc xml:space="preserve">screen to get scale factor for</doc>
            <type name="Screen" c:type="GdkScreen*"/>
          </instance-parameter>
          <parameter name="monitor_num" transfer-ownership="none">
            <doc xml:space="preserve">number of the monitor, between 0 and gdk_screen_get_n_monitors (screen)</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_monitor_width_mm" c:identifier="gdk_screen_get_monitor_width_mm" version="2.14" deprecated="1" deprecated-version="3.22">
        <doc xml:space="preserve">Gets the width in millimeters of the specified monitor, if available.</doc>
        <doc-deprecated xml:space="preserve">Use gdk_monitor_get_width_mm() instead</doc-deprecated>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the width of the monitor, or -1 if not available</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="screen" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkScreen</doc>
            <type name="Screen" c:type="GdkScreen*"/>
          </instance-parameter>
          <parameter name="monitor_num" transfer-ownership="none">
            <doc xml:space="preserve">number of the monitor, between 0 and gdk_screen_get_n_monitors (screen)</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_monitor_workarea" c:identifier="gdk_screen_get_monitor_workarea" version="3.4" deprecated="1" deprecated-version="3.22">
        <doc xml:space="preserve">Retrieves the #GdkRectangle representing the size and position of
the &#x201C;work area&#x201D; on a monitor within the entire screen area. The returned
geometry is in &#x201D;application pixels&#x201D;, not in &#x201D;device pixels&#x201D; (see
gdk_screen_get_monitor_scale_factor()).

The work area should be considered when positioning menus and
similar popups, to avoid placing them below panels, docks or other
desktop components.

Note that not all backends may have a concept of workarea. This
function will return the monitor geometry if a workarea is not
available, or does not apply.

Monitor numbers start at 0. To obtain the number of monitors of
@screen, use gdk_screen_get_n_monitors().</doc>
        <doc-deprecated xml:space="preserve">Use gdk_monitor_get_workarea() instead</doc-deprecated>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="screen" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkScreen</doc>
            <type name="Screen" c:type="GdkScreen*"/>
          </instance-parameter>
          <parameter name="monitor_num" transfer-ownership="none">
            <doc xml:space="preserve">the monitor number</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="dest" direction="out" caller-allocates="1" transfer-ownership="none" optional="1" allow-none="1">
            <doc xml:space="preserve">a #GdkRectangle to be filled with
    the monitor workarea</doc>
            <type name="Rectangle" c:type="GdkRectangle*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_n_monitors" c:identifier="gdk_screen_get_n_monitors" version="2.2" deprecated="1" deprecated-version="3.22">
        <doc xml:space="preserve">Returns the number of monitors which @screen consists of.</doc>
        <doc-deprecated xml:space="preserve">Use gdk_display_get_n_monitors() instead</doc-deprecated>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">number of monitors which @screen consists of</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="screen" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkScreen</doc>
            <type name="Screen" c:type="GdkScreen*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_number" c:identifier="gdk_screen_get_number" version="2.2" deprecated="1" deprecated-version="3.22">
        <doc xml:space="preserve">Gets the index of @screen among the screens in the display
to which it belongs. (See gdk_screen_get_display())</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the index</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="screen" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkScreen</doc>
            <type name="Screen" c:type="GdkScreen*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_primary_monitor" c:identifier="gdk_screen_get_primary_monitor" version="2.20" deprecated="1" deprecated-version="3.22">
        <doc xml:space="preserve">Gets the primary monitor for @screen.  The primary monitor
is considered the monitor where the &#x201C;main desktop&#x201D; lives.
While normal application windows typically allow the window
manager to place the windows, specialized desktop applications
such as panels should place themselves on the primary monitor.

If no primary monitor is configured by the user, the return value
will be 0, defaulting to the first monitor.</doc>
        <doc-deprecated xml:space="preserve">Use gdk_display_get_primary_monitor() instead</doc-deprecated>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">An integer index for the primary monitor, or 0 if none is configured.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="screen" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkScreen.</doc>
            <type name="Screen" c:type="GdkScreen*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_resolution" c:identifier="gdk_screen_get_resolution" glib:get-property="resolution" version="2.10">
        <doc xml:space="preserve">Gets the resolution for font handling on the screen; see
gdk_screen_set_resolution() for full details.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the current resolution, or -1 if no resolution
has been set.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="screen" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkScreen</doc>
            <type name="Screen" c:type="GdkScreen*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_rgba_visual" c:identifier="gdk_screen_get_rgba_visual" version="2.8">
        <doc xml:space="preserve">Gets a visual to use for creating windows with an alpha channel.
The windowing system on which GTK+ is running
may not support this capability, in which case %NULL will
be returned. Even if a non-%NULL value is returned, its
possible that the window&#x2019;s alpha channel won&#x2019;t be honored
when displaying the window on the screen: in particular, for
X an appropriate windowing manager and compositing manager
must be running to provide appropriate display.

This functionality is not implemented in the Windows backend.

For setting an overall opacity for a top-level window, see
gdk_window_set_opacity().</doc>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">a visual to use for windows
    with an alpha channel or %NULL if the capability is not
    available.</doc>
          <type name="Visual" c:type="GdkVisual*"/>
        </return-value>
        <parameters>
          <instance-parameter name="screen" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkScreen</doc>
            <type name="Screen" c:type="GdkScreen*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_root_window" c:identifier="gdk_screen_get_root_window" version="2.2">
        <doc xml:space="preserve">Gets the root window of @screen.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the root window</doc>
          <type name="Window" c:type="GdkWindow*"/>
        </return-value>
        <parameters>
          <instance-parameter name="screen" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkScreen</doc>
            <type name="Screen" c:type="GdkScreen*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_setting" c:identifier="gdk_screen_get_setting" version="2.2">
        <doc xml:space="preserve">Retrieves a desktop-wide setting such as double-click time
for the #GdkScreen @screen.

FIXME needs a list of valid settings here, or a link to
more information.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the setting existed and a value was stored
  in @value, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="screen" transfer-ownership="none">
            <doc xml:space="preserve">the #GdkScreen where the setting is located</doc>
            <type name="Screen" c:type="GdkScreen*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">the name of the setting</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">location to store the value of the setting</doc>
            <type name="GObject.Value" c:type="GValue*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_system_visual" c:identifier="gdk_screen_get_system_visual" version="2.2">
        <doc xml:space="preserve">Get the system&#x2019;s default visual for @screen.
This is the visual for the root window of the display.
The return value should not be freed.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the system visual</doc>
          <type name="Visual" c:type="GdkVisual*"/>
        </return-value>
        <parameters>
          <instance-parameter name="screen" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkScreen.</doc>
            <type name="Screen" c:type="GdkScreen*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_toplevel_windows" c:identifier="gdk_screen_get_toplevel_windows" version="2.2">
        <doc xml:space="preserve">Obtains a list of all toplevel windows known to GDK on the screen @screen.
A toplevel window is a child of the root window (see
gdk_get_default_root_window()).

The returned list should be freed with g_list_free(), but
its elements need not be freed.</doc>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve">
    list of toplevel windows, free with g_list_free()</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Window"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="screen" transfer-ownership="none">
            <doc xml:space="preserve">The #GdkScreen where the toplevels are located.</doc>
            <type name="Screen" c:type="GdkScreen*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_width" c:identifier="gdk_screen_get_width" version="2.2" deprecated="1" deprecated-version="3.22">
        <doc xml:space="preserve">Gets the width of @screen in pixels. The returned size is in
&#x201D;application pixels&#x201D;, not in &#x201D;device pixels&#x201D; (see
gdk_screen_get_monitor_scale_factor()).</doc>
        <doc-deprecated xml:space="preserve">Use per-monitor information instead</doc-deprecated>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the width of @screen in pixels.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="screen" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkScreen</doc>
            <type name="Screen" c:type="GdkScreen*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_width_mm" c:identifier="gdk_screen_get_width_mm" version="2.2" deprecated="1" deprecated-version="3.22">
        <doc xml:space="preserve">Gets the width of @screen in millimeters.

Note that this value is somewhat ill-defined when the screen
has multiple monitors of different resolution. It is recommended
to use the monitor dimensions instead.</doc>
        <doc-deprecated xml:space="preserve">Use per-monitor information instead</doc-deprecated>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the width of @screen in millimeters.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="screen" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkScreen</doc>
            <type name="Screen" c:type="GdkScreen*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_window_stack" c:identifier="gdk_screen_get_window_stack" version="2.10">
        <doc xml:space="preserve">Returns a #GList of #GdkWindows representing the current
window stack.

On X11, this is done by inspecting the _NET_CLIENT_LIST_STACKING
property on the root window, as described in the
[Extended Window Manager Hints](http://www.freedesktop.org/Standards/wm-spec).
If the window manager does not support the
_NET_CLIENT_LIST_STACKING hint, this function returns %NULL.

On other platforms, this function may return %NULL, depending on whether
it is implementable on that platform.

The returned list is newly allocated and owns references to the
windows it contains, so it should be freed using g_list_free() and
its windows unrefed using g_object_unref() when no longer needed.</doc>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve">a
    list of #GdkWindows for the current window stack, or %NULL.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Window"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="screen" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkScreen</doc>
            <type name="Screen" c:type="GdkScreen*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_composited" c:identifier="gdk_screen_is_composited" version="2.10">
        <doc xml:space="preserve">Returns whether windows with an RGBA visual can reasonably
be expected to have their alpha channel drawn correctly on
the screen.

On X11 this function returns whether a compositing manager is
compositing @screen.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Whether windows with RGBA visuals can reasonably be
expected to have their alpha channels drawn correctly on the screen.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="screen" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkScreen</doc>
            <type name="Screen" c:type="GdkScreen*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="list_visuals" c:identifier="gdk_screen_list_visuals" version="2.2">
        <doc xml:space="preserve">Lists the available visuals for the specified @screen.
A visual describes a hardware image data format.
For example, a visual might support 24-bit color, or 8-bit color,
and might expect pixels to be in a certain format.

Call g_list_free() on the return value when you&#x2019;re finished with it.</doc>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve">
    a list of visuals; the list must be freed, but not its contents</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Visual"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="screen" transfer-ownership="none">
            <doc xml:space="preserve">the relevant #GdkScreen.</doc>
            <type name="Screen" c:type="GdkScreen*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="make_display_name" c:identifier="gdk_screen_make_display_name" version="2.2" deprecated="1" deprecated-version="3.22">
        <doc xml:space="preserve">Determines the name to pass to gdk_display_open() to get
a #GdkDisplay with this screen as the default screen.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a newly allocated string, free with g_free()</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="screen" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkScreen</doc>
            <type name="Screen" c:type="GdkScreen*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_font_options" c:identifier="gdk_screen_set_font_options" glib:set-property="font-options" version="2.10">
        <doc xml:space="preserve">Sets the default font options for the screen. These
options will be set on any #PangoContext&#x2019;s newly created
with gdk_pango_context_get_for_screen(). Changing the
default set of font options does not affect contexts that
have already been created.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="screen" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkScreen</doc>
            <type name="Screen" c:type="GdkScreen*"/>
          </instance-parameter>
          <parameter name="options" transfer-ownership="none" nullable="1" allow-none="1">
            <doc xml:space="preserve">a #cairo_font_options_t, or %NULL to unset any
  previously set default font options.</doc>
            <type name="cairo.FontOptions" c:type="const cairo_font_options_t*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_resolution" c:identifier="gdk_screen_set_resolution" glib:set-property="resolution" version="2.10">
        <doc xml:space="preserve">Sets the resolution for font handling on the screen. This is a
scale factor between points specified in a #PangoFontDescription
and cairo units. The default value is 96, meaning that a 10 point
font will be 13 units high. (10 * 96. / 72. = 13.3).</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="screen" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkScreen</doc>
            <type name="Screen" c:type="GdkScreen*"/>
          </instance-parameter>
          <parameter name="dpi" transfer-ownership="none">
            <doc xml:space="preserve">the resolution in &#x201C;dots per inch&#x201D;. (Physical inches aren&#x2019;t actually
  involved; the terminology is conventional.)</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <property name="font-options" writable="1" transfer-ownership="none" setter="set_font_options" getter="get_font_options">
        <type name="gpointer" c:type="gpointer"/>
      </property>
      <property name="resolution" writable="1" transfer-ownership="none" setter="set_resolution" getter="get_resolution" default-value="-1.000000">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <glib:signal name="composited-changed" when="last" version="2.10">
        <doc xml:space="preserve">The ::composited-changed signal is emitted when the composited
status of the screen changes</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="monitors-changed" when="last" version="2.14">
        <doc xml:space="preserve">The ::monitors-changed signal is emitted when the number, size
or position of the monitors attached to the screen change.

Only for X11 and OS X for now. A future implementation for Win32
may be a possibility.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="size-changed" when="last" version="2.2">
        <doc xml:space="preserve">The ::size-changed signal is emitted when the pixel width or
height of a screen changes.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <enumeration name="ScrollDirection" glib:type-name="GdkScrollDirection" glib:get-type="gdk_scroll_direction_get_type" c:type="GdkScrollDirection">
      <doc xml:space="preserve">Specifies the direction for #GdkEventScroll.</doc>
      <member name="up" value="0" c:identifier="GDK_SCROLL_UP" glib:nick="up" glib:name="GDK_SCROLL_UP">
        <doc xml:space="preserve">the window is scrolled up.</doc>
      </member>
      <member name="down" value="1" c:identifier="GDK_SCROLL_DOWN" glib:nick="down" glib:name="GDK_SCROLL_DOWN">
        <doc xml:space="preserve">the window is scrolled down.</doc>
      </member>
      <member name="left" value="2" c:identifier="GDK_SCROLL_LEFT" glib:nick="left" glib:name="GDK_SCROLL_LEFT">
        <doc xml:space="preserve">the window is scrolled to the left.</doc>
      </member>
      <member name="right" value="3" c:identifier="GDK_SCROLL_RIGHT" glib:nick="right" glib:name="GDK_SCROLL_RIGHT">
        <doc xml:space="preserve">the window is scrolled to the right.</doc>
      </member>
      <member name="smooth" value="4" c:identifier="GDK_SCROLL_SMOOTH" glib:nick="smooth" glib:name="GDK_SCROLL_SMOOTH">
        <doc xml:space="preserve">the scrolling is determined by the delta values
  in #GdkEventScroll. See gdk_event_get_scroll_deltas(). Since: 3.4</doc>
      </member>
    </enumeration>
    <class name="Seat" c:symbol-prefix="seat" c:type="GdkSeat" parent="GObject.Object" abstract="1" glib:type-name="GdkSeat" glib:get-type="gdk_seat_get_type">
      <doc xml:space="preserve">The #GdkSeat object represents a collection of input devices
that belong to a user.</doc>
      <method name="get_capabilities" c:identifier="gdk_seat_get_capabilities" version="3.20">
        <doc xml:space="preserve">Returns the capabilities this #GdkSeat currently has.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the seat capabilities</doc>
          <type name="SeatCapabilities" c:type="GdkSeatCapabilities"/>
        </return-value>
        <parameters>
          <instance-parameter name="seat" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkSeat</doc>
            <type name="Seat" c:type="GdkSeat*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_display" c:identifier="gdk_seat_get_display" glib:get-property="display">
        <doc xml:space="preserve">Returns the #GdkDisplay this seat belongs to.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a #GdkDisplay. This object is owned by GTK+
         and must not be freed.</doc>
          <type name="Display" c:type="GdkDisplay*"/>
        </return-value>
        <parameters>
          <instance-parameter name="seat" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkSeat</doc>
            <type name="Seat" c:type="GdkSeat*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_keyboard" c:identifier="gdk_seat_get_keyboard" version="3.20">
        <doc xml:space="preserve">Returns the master device that routes keyboard events.</doc>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">a master #GdkDevice with keyboard
         capabilities. This object is owned by GTK+ and must not be freed.</doc>
          <type name="Device" c:type="GdkDevice*"/>
        </return-value>
        <parameters>
          <instance-parameter name="seat" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkSeat</doc>
            <type name="Seat" c:type="GdkSeat*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_pointer" c:identifier="gdk_seat_get_pointer" version="3.20">
        <doc xml:space="preserve">Returns the master device that routes pointer events.</doc>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">a master #GdkDevice with pointer
         capabilities. This object is owned by GTK+ and must not be freed.</doc>
          <type name="Device" c:type="GdkDevice*"/>
        </return-value>
        <parameters>
          <instance-parameter name="seat" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkSeat</doc>
            <type name="Seat" c:type="GdkSeat*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_slaves" c:identifier="gdk_seat_get_slaves" version="3.20">
        <doc xml:space="preserve">Returns the slave devices that match the given capabilities.</doc>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve">A list of #GdkDevices.
         The list must be freed with g_list_free(), the elements are owned
         by GDK and must not be freed.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Device"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="seat" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkSeat</doc>
            <type name="Seat" c:type="GdkSeat*"/>
          </instance-parameter>
          <parameter name="capabilities" transfer-ownership="none">
            <doc xml:space="preserve">capabilities to get devices for</doc>
            <type name="SeatCapabilities" c:type="GdkSeatCapabilities"/>
          </parameter>
        </parameters>
      </method>
      <method name="grab" c:identifier="gdk_seat_grab" version="3.20">
        <doc xml:space="preserve">Grabs the seat so that all events corresponding to the given @capabilities
are passed to this application until the seat is ungrabbed with gdk_seat_ungrab(),
or the window becomes hidden. This overrides any previous grab on the
seat by this client.

As a rule of thumb, if a grab is desired over %GDK_SEAT_CAPABILITY_POINTER,
all other "pointing" capabilities (eg. %GDK_SEAT_CAPABILITY_TOUCH) should
be grabbed too, so the user is able to interact with all of those while
the grab holds, you should thus use %GDK_SEAT_CAPABILITY_ALL_POINTING most
commonly.

Grabs are used for operations which need complete control over the
events corresponding to the given capabilities. For example in GTK+ this
is used for Drag and Drop operations, popup menus and such.

Note that if the event mask of a #GdkWindow has selected both button press
and button release events, or touch begin and touch end, then a press event
will cause an automatic grab until the button is released, equivalent to a
grab on the window with @owner_events set to %TRUE. This is done because most
applications expect to receive paired press and release events.

If you set up anything at the time you take the grab that needs to be
cleaned up when the grab ends, you should handle the #GdkEventGrabBroken
events that are emitted when the grab ends unvoluntarily.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%GDK_GRAB_SUCCESS if the grab was successful.</doc>
          <type name="GrabStatus" c:type="GdkGrabStatus"/>
        </return-value>
        <parameters>
          <instance-parameter name="seat" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkSeat</doc>
            <type name="Seat" c:type="GdkSeat*"/>
          </instance-parameter>
          <parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">the #GdkWindow which will own the grab</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </parameter>
          <parameter name="capabilities" transfer-ownership="none">
            <doc xml:space="preserve">capabilities that will be grabbed</doc>
            <type name="SeatCapabilities" c:type="GdkSeatCapabilities"/>
          </parameter>
          <parameter name="owner_events" transfer-ownership="none">
            <doc xml:space="preserve">if %FALSE then all device events are reported with respect to
               @window and are only reported if selected by @event_mask. If
               %TRUE then pointer events for this application are reported
               as normal, but pointer events outside this application are
               reported with respect to @window and only if selected by
               @event_mask. In either mode, unreported events are discarded.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cursor" transfer-ownership="none" nullable="1" allow-none="1">
            <doc xml:space="preserve">the cursor to display while the grab is active. If
         this is %NULL then the normal cursors are used for
         @window and its descendants, and the cursor for @window is used
         elsewhere.</doc>
            <type name="Cursor" c:type="GdkCursor*"/>
          </parameter>
          <parameter name="event" transfer-ownership="none" nullable="1" allow-none="1">
            <doc xml:space="preserve">the event that is triggering the grab, or %NULL if none
        is available.</doc>
            <type name="Event" c:type="const GdkEvent*"/>
          </parameter>
          <parameter name="prepare_func" transfer-ownership="none" nullable="1" allow-none="1" scope="call" closure="6">
            <doc xml:space="preserve">function to
               prepare the window to be grabbed, it can be %NULL if @window is
               visible before this call.</doc>
            <type name="SeatGrabPrepareFunc" c:type="GdkSeatGrabPrepareFunc"/>
          </parameter>
          <parameter name="prepare_func_data" transfer-ownership="none" nullable="1" allow-none="1">
            <doc xml:space="preserve">user data to pass to @prepare_func</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="ungrab" c:identifier="gdk_seat_ungrab" version="3.20">
        <doc xml:space="preserve">Releases a grab added through gdk_seat_grab().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="seat" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkSeat</doc>
            <type name="Seat" c:type="GdkSeat*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="display" version="3.20" writable="1" construct-only="1" transfer-ownership="none" getter="get_display">
        <doc xml:space="preserve">#GdkDisplay of this seat.</doc>
        <type name="Display"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <glib:signal name="device-added" when="last" version="3.20">
        <doc xml:space="preserve">The ::device-added signal is emitted when a new input
device is related to this seat.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">the newly added #GdkDevice.</doc>
            <type name="Device"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="device-removed" when="last" version="3.20">
        <doc xml:space="preserve">The ::device-removed signal is emitted when an
input device is removed (e.g. unplugged).</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">the just removed #GdkDevice.</doc>
            <type name="Device"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="tool-added" when="last" version="3.22">
        <doc xml:space="preserve">The ::tool-added signal is emitted whenever a new tool
is made known to the seat. The tool may later be assigned
to a device (i.e. on proximity with a tablet). The device
will emit the #GdkDevice::tool-changed signal accordingly.

A same tool may be used by several devices.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="tool" transfer-ownership="none">
            <doc xml:space="preserve">the new #GdkDeviceTool known to the seat</doc>
            <type name="DeviceTool"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="tool-removed" when="last" version="3.22">
        <doc xml:space="preserve">This signal is emitted whenever a tool is no longer known
to this @seat.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="tool" transfer-ownership="none">
            <doc xml:space="preserve">the just removed #GdkDeviceTool</doc>
            <type name="DeviceTool"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <bitfield name="SeatCapabilities" version="3.20" glib:type-name="GdkSeatCapabilities" glib:get-type="gdk_seat_capabilities_get_type" c:type="GdkSeatCapabilities">
      <doc xml:space="preserve">Flags describing the seat capabilities.</doc>
      <member name="none" value="0" c:identifier="GDK_SEAT_CAPABILITY_NONE" glib:nick="none" glib:name="GDK_SEAT_CAPABILITY_NONE">
        <doc xml:space="preserve">No input capabilities</doc>
      </member>
      <member name="pointer" value="1" c:identifier="GDK_SEAT_CAPABILITY_POINTER" glib:nick="pointer" glib:name="GDK_SEAT_CAPABILITY_POINTER">
        <doc xml:space="preserve">The seat has a pointer (e.g. mouse)</doc>
      </member>
      <member name="touch" value="2" c:identifier="GDK_SEAT_CAPABILITY_TOUCH" glib:nick="touch" glib:name="GDK_SEAT_CAPABILITY_TOUCH">
        <doc xml:space="preserve">The seat has touchscreen(s) attached</doc>
      </member>
      <member name="tablet_stylus" value="4" c:identifier="GDK_SEAT_CAPABILITY_TABLET_STYLUS" glib:nick="tablet-stylus" glib:name="GDK_SEAT_CAPABILITY_TABLET_STYLUS">
        <doc xml:space="preserve">The seat has drawing tablet(s) attached</doc>
      </member>
      <member name="keyboard" value="8" c:identifier="GDK_SEAT_CAPABILITY_KEYBOARD" glib:nick="keyboard" glib:name="GDK_SEAT_CAPABILITY_KEYBOARD">
        <doc xml:space="preserve">The seat has keyboard(s) attached</doc>
      </member>
      <member name="all_pointing" value="7" c:identifier="GDK_SEAT_CAPABILITY_ALL_POINTING" glib:nick="all-pointing" glib:name="GDK_SEAT_CAPABILITY_ALL_POINTING">
        <doc xml:space="preserve">The union of all pointing capabilities</doc>
      </member>
      <member name="all" value="15" c:identifier="GDK_SEAT_CAPABILITY_ALL" glib:nick="all" glib:name="GDK_SEAT_CAPABILITY_ALL">
        <doc xml:space="preserve">The union of all capabilities</doc>
      </member>
    </bitfield>
    <callback name="SeatGrabPrepareFunc" c:type="GdkSeatGrabPrepareFunc" version="3.20">
      <doc xml:space="preserve">Type of the callback used to set up @window so it can be
grabbed. A typical action would be ensuring the window is
visible, although there's room for other initialization
actions.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="seat" transfer-ownership="none">
          <doc xml:space="preserve">the #GdkSeat being grabbed</doc>
          <type name="Seat" c:type="GdkSeat*"/>
        </parameter>
        <parameter name="window" transfer-ownership="none">
          <doc xml:space="preserve">the #GdkWindow being grabbed</doc>
          <type name="Window" c:type="GdkWindow*"/>
        </parameter>
        <parameter name="user_data" transfer-ownership="none" nullable="1" allow-none="1" closure="2">
          <doc xml:space="preserve">user data passed in gdk_seat_grab()</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <enumeration name="SettingAction" glib:type-name="GdkSettingAction" glib:get-type="gdk_setting_action_get_type" c:type="GdkSettingAction">
      <doc xml:space="preserve">Specifies the kind of modification applied to a setting in a
#GdkEventSetting.</doc>
      <member name="new" value="0" c:identifier="GDK_SETTING_ACTION_NEW" glib:nick="new" glib:name="GDK_SETTING_ACTION_NEW">
        <doc xml:space="preserve">a setting was added.</doc>
      </member>
      <member name="changed" value="1" c:identifier="GDK_SETTING_ACTION_CHANGED" glib:nick="changed" glib:name="GDK_SETTING_ACTION_CHANGED">
        <doc xml:space="preserve">a setting was changed.</doc>
      </member>
      <member name="deleted" value="2" c:identifier="GDK_SETTING_ACTION_DELETED" glib:nick="deleted" glib:name="GDK_SETTING_ACTION_DELETED">
        <doc xml:space="preserve">a setting was deleted.</doc>
      </member>
    </enumeration>
    <enumeration name="Status" glib:type-name="GdkStatus" glib:get-type="gdk_status_get_type" c:type="GdkStatus">
      <member name="ok" value="0" c:identifier="GDK_OK" glib:nick="ok" glib:name="GDK_OK">
      </member>
      <member name="error" value="-1" c:identifier="GDK_ERROR" glib:nick="error" glib:name="GDK_ERROR">
      </member>
      <member name="error_param" value="-2" c:identifier="GDK_ERROR_PARAM" glib:nick="error-param" glib:name="GDK_ERROR_PARAM">
      </member>
      <member name="error_file" value="-3" c:identifier="GDK_ERROR_FILE" glib:nick="error-file" glib:name="GDK_ERROR_FILE">
      </member>
      <member name="error_mem" value="-4" c:identifier="GDK_ERROR_MEM" glib:nick="error-mem" glib:name="GDK_ERROR_MEM">
      </member>
    </enumeration>
    <enumeration name="SubpixelLayout" version="3.22" glib:type-name="GdkSubpixelLayout" glib:get-type="gdk_subpixel_layout_get_type" c:type="GdkSubpixelLayout">
      <doc xml:space="preserve">This enumeration describes how the red, green and blue components
of physical pixels on an output device are laid out.</doc>
      <member name="unknown" value="0" c:identifier="GDK_SUBPIXEL_LAYOUT_UNKNOWN" glib:nick="unknown" glib:name="GDK_SUBPIXEL_LAYOUT_UNKNOWN">
        <doc xml:space="preserve">The layout is not known</doc>
      </member>
      <member name="none" value="1" c:identifier="GDK_SUBPIXEL_LAYOUT_NONE" glib:nick="none" glib:name="GDK_SUBPIXEL_LAYOUT_NONE">
        <doc xml:space="preserve">Not organized in this way</doc>
      </member>
      <member name="horizontal_rgb" value="2" c:identifier="GDK_SUBPIXEL_LAYOUT_HORIZONTAL_RGB" glib:nick="horizontal-rgb" glib:name="GDK_SUBPIXEL_LAYOUT_HORIZONTAL_RGB">
        <doc xml:space="preserve">The layout is horizontal, the order is RGB</doc>
      </member>
      <member name="horizontal_bgr" value="3" c:identifier="GDK_SUBPIXEL_LAYOUT_HORIZONTAL_BGR" glib:nick="horizontal-bgr" glib:name="GDK_SUBPIXEL_LAYOUT_HORIZONTAL_BGR">
        <doc xml:space="preserve">The layout is horizontal, the order is BGR</doc>
      </member>
      <member name="vertical_rgb" value="4" c:identifier="GDK_SUBPIXEL_LAYOUT_VERTICAL_RGB" glib:nick="vertical-rgb" glib:name="GDK_SUBPIXEL_LAYOUT_VERTICAL_RGB">
        <doc xml:space="preserve">The layout is vertical, the order is RGB</doc>
      </member>
      <member name="vertical_bgr" value="5" c:identifier="GDK_SUBPIXEL_LAYOUT_VERTICAL_BGR" glib:nick="vertical-bgr" glib:name="GDK_SUBPIXEL_LAYOUT_VERTICAL_BGR">
        <doc xml:space="preserve">The layout is vertical, the order is BGR</doc>
      </member>
    </enumeration>
    <function-macro name="THREADS_ENTER" c:identifier="GDK_THREADS_ENTER" introspectable="0" deprecated="1" deprecated-version="3.6">
      <doc xml:space="preserve">This macro marks the beginning of a critical section in which GDK and
GTK+ functions can be called safely and without causing race
conditions.  Only one thread at a time can be in such a critial
section. The macro expands to a no-op if #G_THREADS_ENABLED has not
been defined. Typically gdk_threads_enter() should be used instead of
this macro.</doc>
      <doc-deprecated xml:space="preserve">Use g_main_context_invoke(), g_idle_add() and related
    functions if you need to schedule GTK+ calls from other threads.</doc-deprecated>
    </function-macro>
    <function-macro name="THREADS_LEAVE" c:identifier="GDK_THREADS_LEAVE" introspectable="0" deprecated="1" deprecated-version="3.6">
      <doc xml:space="preserve">This macro marks the end of a critical section
begun with #GDK_THREADS_ENTER.</doc>
      <doc-deprecated xml:space="preserve">Deprecated in 3.6.</doc-deprecated>
    </function-macro>
    <record name="TimeCoord" c:type="GdkTimeCoord">
      <doc xml:space="preserve">A #GdkTimeCoord stores a single event in a motion history.</doc>
      <field name="time" writable="1">
        <doc xml:space="preserve">The timestamp for this event.</doc>
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="axes" writable="1">
        <doc xml:space="preserve">the values of the device&#x2019;s axes.</doc>
        <array zero-terminated="0" fixed-size="128">
          <type name="gdouble" c:type="gdouble"/>
        </array>
      </field>
    </record>
    <enumeration name="TouchpadGesturePhase" glib:type-name="GdkTouchpadGesturePhase" glib:get-type="gdk_touchpad_gesture_phase_get_type" c:type="GdkTouchpadGesturePhase">
      <doc xml:space="preserve">Specifies the current state of a touchpad gesture. All gestures are
guaranteed to begin with an event with phase %GDK_TOUCHPAD_GESTURE_PHASE_BEGIN,
followed by 0 or several events with phase %GDK_TOUCHPAD_GESTURE_PHASE_UPDATE.

A finished gesture may have 2 possible outcomes, an event with phase
%GDK_TOUCHPAD_GESTURE_PHASE_END will be emitted when the gesture is
considered successful, this should be used as the hint to perform any
permanent changes.

Cancelled gestures may be so for a variety of reasons, due to hardware
or the compositor, or due to the gesture recognition layers hinting the
gesture did not finish resolutely (eg. a 3rd finger being added during
a pinch gesture). In these cases, the last event will report the phase
%GDK_TOUCHPAD_GESTURE_PHASE_CANCEL, this should be used as a hint
to undo any visible/permanent changes that were done throughout the
progress of the gesture.

See also #GdkEventTouchpadSwipe and #GdkEventTouchpadPinch.</doc>
      <member name="begin" value="0" c:identifier="GDK_TOUCHPAD_GESTURE_PHASE_BEGIN" glib:nick="begin" glib:name="GDK_TOUCHPAD_GESTURE_PHASE_BEGIN">
        <doc xml:space="preserve">The gesture has begun.</doc>
      </member>
      <member name="update" value="1" c:identifier="GDK_TOUCHPAD_GESTURE_PHASE_UPDATE" glib:nick="update" glib:name="GDK_TOUCHPAD_GESTURE_PHASE_UPDATE">
        <doc xml:space="preserve">The gesture has been updated.</doc>
      </member>
      <member name="end" value="2" c:identifier="GDK_TOUCHPAD_GESTURE_PHASE_END" glib:nick="end" glib:name="GDK_TOUCHPAD_GESTURE_PHASE_END">
        <doc xml:space="preserve">The gesture was finished, changes
  should be permanently applied.</doc>
      </member>
      <member name="cancel" value="3" c:identifier="GDK_TOUCHPAD_GESTURE_PHASE_CANCEL" glib:nick="cancel" glib:name="GDK_TOUCHPAD_GESTURE_PHASE_CANCEL">
        <doc xml:space="preserve">The gesture was cancelled, all
  changes should be undone.</doc>
      </member>
    </enumeration>
    <function-macro name="UNAVAILABLE" c:identifier="GDK_UNAVAILABLE" introspectable="0">
      <parameters>
        <parameter name="maj">
        </parameter>
        <parameter name="min">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VISUAL" c:identifier="GDK_VISUAL" introspectable="0">
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <enumeration name="VisibilityState" glib:type-name="GdkVisibilityState" glib:get-type="gdk_visibility_state_get_type" c:type="GdkVisibilityState">
      <doc xml:space="preserve">Specifies the visiblity status of a window for a #GdkEventVisibility.</doc>
      <member name="unobscured" value="0" c:identifier="GDK_VISIBILITY_UNOBSCURED" glib:nick="unobscured" glib:name="GDK_VISIBILITY_UNOBSCURED">
        <doc xml:space="preserve">the window is completely visible.</doc>
      </member>
      <member name="partial" value="1" c:identifier="GDK_VISIBILITY_PARTIAL" glib:nick="partial" glib:name="GDK_VISIBILITY_PARTIAL">
        <doc xml:space="preserve">the window is partially visible.</doc>
      </member>
      <member name="fully_obscured" value="2" c:identifier="GDK_VISIBILITY_FULLY_OBSCURED" glib:nick="fully-obscured" glib:name="GDK_VISIBILITY_FULLY_OBSCURED">
        <doc xml:space="preserve">the window is not visible at all.</doc>
      </member>
    </enumeration>
    <class name="Visual" c:symbol-prefix="visual" c:type="GdkVisual" parent="GObject.Object" glib:type-name="GdkVisual" glib:get-type="gdk_visual_get_type">
      <doc xml:space="preserve">A #GdkVisual contains information about
a particular visual.</doc>
      <function name="get_best" c:identifier="gdk_visual_get_best" deprecated="1" deprecated-version="3.22">
        <doc xml:space="preserve">Get the visual with the most available colors for the default
GDK screen. The return value should not be freed.</doc>
        <doc-deprecated xml:space="preserve">Visual selection should be done using
    gdk_screen_get_system_visual() and gdk_screen_get_rgba_visual()</doc-deprecated>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">best visual</doc>
          <type name="Visual" c:type="GdkVisual*"/>
        </return-value>
      </function>
      <function name="get_best_depth" c:identifier="gdk_visual_get_best_depth" deprecated="1" deprecated-version="3.22">
        <doc xml:space="preserve">Get the best available depth for the default GDK screen.  &#x201C;Best&#x201D;
means &#x201C;largest,&#x201D; i.e. 32 preferred over 24 preferred over 8 bits
per pixel.</doc>
        <doc-deprecated xml:space="preserve">Visual selection should be done using
    gdk_screen_get_system_visual() and gdk_screen_get_rgba_visual()</doc-deprecated>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">best available depth</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </function>
      <function name="get_best_type" c:identifier="gdk_visual_get_best_type" deprecated="1" deprecated-version="3.22">
        <doc xml:space="preserve">Return the best available visual type for the default GDK screen.</doc>
        <doc-deprecated xml:space="preserve">Visual selection should be done using
    gdk_screen_get_system_visual() and gdk_screen_get_rgba_visual()</doc-deprecated>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">best visual type</doc>
          <type name="VisualType" c:type="GdkVisualType"/>
        </return-value>
      </function>
      <function name="get_best_with_both" c:identifier="gdk_visual_get_best_with_both" deprecated="1" deprecated-version="3.22">
        <doc xml:space="preserve">Combines gdk_visual_get_best_with_depth() and
gdk_visual_get_best_with_type().</doc>
        <doc-deprecated xml:space="preserve">Visual selection should be done using
    gdk_screen_get_system_visual() and gdk_screen_get_rgba_visual()</doc-deprecated>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">best visual with both @depth
    and @visual_type, or %NULL if none</doc>
          <type name="Visual" c:type="GdkVisual*"/>
        </return-value>
        <parameters>
          <parameter name="depth" transfer-ownership="none">
            <doc xml:space="preserve">a bit depth</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="visual_type" transfer-ownership="none">
            <doc xml:space="preserve">a visual type</doc>
            <type name="VisualType" c:type="GdkVisualType"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_best_with_depth" c:identifier="gdk_visual_get_best_with_depth" deprecated="1" deprecated-version="3.22">
        <doc xml:space="preserve">Get the best visual with depth @depth for the default GDK screen.
Color visuals and visuals with mutable colormaps are preferred
over grayscale or fixed-colormap visuals. The return value should
not be freed. %NULL may be returned if no visual supports @depth.</doc>
        <doc-deprecated xml:space="preserve">Visual selection should be done using
    gdk_screen_get_system_visual() and gdk_screen_get_rgba_visual()</doc-deprecated>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">best visual for the given depth</doc>
          <type name="Visual" c:type="GdkVisual*"/>
        </return-value>
        <parameters>
          <parameter name="depth" transfer-ownership="none">
            <doc xml:space="preserve">a bit depth</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_best_with_type" c:identifier="gdk_visual_get_best_with_type" deprecated="1" deprecated-version="3.22">
        <doc xml:space="preserve">Get the best visual of the given @visual_type for the default GDK screen.
Visuals with higher color depths are considered better. The return value
should not be freed. %NULL may be returned if no visual has type
@visual_type.</doc>
        <doc-deprecated xml:space="preserve">Visual selection should be done using
    gdk_screen_get_system_visual() and gdk_screen_get_rgba_visual()</doc-deprecated>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">best visual of the given type</doc>
          <type name="Visual" c:type="GdkVisual*"/>
        </return-value>
        <parameters>
          <parameter name="visual_type" transfer-ownership="none">
            <doc xml:space="preserve">a visual type</doc>
            <type name="VisualType" c:type="GdkVisualType"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_system" c:identifier="gdk_visual_get_system" deprecated="1" deprecated-version="3.22">
        <doc xml:space="preserve">Get the system&#x2019;s default visual for the default GDK screen.
This is the visual for the root window of the display.
The return value should not be freed.</doc>
        <doc-deprecated xml:space="preserve">Use gdk_screen_get_system_visual (gdk_screen_get_default ()).</doc-deprecated>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">system visual</doc>
          <type name="Visual" c:type="GdkVisual*"/>
        </return-value>
      </function>
      <method name="get_bits_per_rgb" c:identifier="gdk_visual_get_bits_per_rgb" version="2.22" deprecated="1" deprecated-version="3.22.">
        <doc xml:space="preserve">Returns the number of significant bits per red, green and blue value.

Not all GDK backend provide a meaningful value for this function.</doc>
        <doc-deprecated xml:space="preserve">Use gdk_visual_get_red_pixel_details() and its variants to
    learn about the pixel layout of TrueColor and DirectColor visuals</doc-deprecated>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The number of significant bits per color value for @visual.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="visual" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkVisual</doc>
            <type name="Visual" c:type="GdkVisual*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_blue_pixel_details" c:identifier="gdk_visual_get_blue_pixel_details" version="2.22">
        <doc xml:space="preserve">Obtains values that are needed to calculate blue pixel values in TrueColor
and DirectColor. The &#x201C;mask&#x201D; is the significant bits within the pixel.
The &#x201C;shift&#x201D; is the number of bits left we must shift a primary for it
to be in position (according to the "mask"). Finally, "precision" refers
to how much precision the pixel value contains for a particular primary.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="visual" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkVisual</doc>
            <type name="Visual" c:type="GdkVisual*"/>
          </instance-parameter>
          <parameter name="mask" direction="out" caller-allocates="0" transfer-ownership="full" optional="1" allow-none="1">
            <doc xml:space="preserve">A pointer to a #guint32 to be filled in, or %NULL</doc>
            <type name="guint32" c:type="guint32*"/>
          </parameter>
          <parameter name="shift" direction="out" caller-allocates="0" transfer-ownership="full" optional="1" allow-none="1">
            <doc xml:space="preserve">A pointer to a #gint to be filled in, or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="precision" direction="out" caller-allocates="0" transfer-ownership="full" optional="1" allow-none="1">
            <doc xml:space="preserve">A pointer to a #gint to be filled in, or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_byte_order" c:identifier="gdk_visual_get_byte_order" version="2.22" deprecated="1" deprecated-version="3.22">
        <doc xml:space="preserve">Returns the byte order of this visual.

The information returned by this function is only relevant
when working with XImages, and not all backends return
meaningful information for this.</doc>
        <doc-deprecated xml:space="preserve">This information is not useful</doc-deprecated>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #GdkByteOrder stating the byte order of @visual.</doc>
          <type name="ByteOrder" c:type="GdkByteOrder"/>
        </return-value>
        <parameters>
          <instance-parameter name="visual" transfer-ownership="none">
            <doc xml:space="preserve">A #GdkVisual.</doc>
            <type name="Visual" c:type="GdkVisual*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_colormap_size" c:identifier="gdk_visual_get_colormap_size" version="2.22" deprecated="1" deprecated-version="3.22">
        <doc xml:space="preserve">Returns the size of a colormap for this visual.

You have to use platform-specific APIs to manipulate colormaps.</doc>
        <doc-deprecated xml:space="preserve">This information is not useful, since GDK does not
    provide APIs to operate on colormaps.</doc-deprecated>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The size of a colormap that is suitable for @visual.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="visual" transfer-ownership="none">
            <doc xml:space="preserve">A #GdkVisual.</doc>
            <type name="Visual" c:type="GdkVisual*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_depth" c:identifier="gdk_visual_get_depth" version="2.22">
        <doc xml:space="preserve">Returns the bit depth of this visual.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The bit depth of this visual.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="visual" transfer-ownership="none">
            <doc xml:space="preserve">A #GdkVisual.</doc>
            <type name="Visual" c:type="GdkVisual*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_green_pixel_details" c:identifier="gdk_visual_get_green_pixel_details" version="2.22">
        <doc xml:space="preserve">Obtains values that are needed to calculate green pixel values in TrueColor
and DirectColor. The &#x201C;mask&#x201D; is the significant bits within the pixel.
The &#x201C;shift&#x201D; is the number of bits left we must shift a primary for it
to be in position (according to the "mask"). Finally, "precision" refers
to how much precision the pixel value contains for a particular primary.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="visual" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkVisual</doc>
            <type name="Visual" c:type="GdkVisual*"/>
          </instance-parameter>
          <parameter name="mask" direction="out" caller-allocates="0" transfer-ownership="full" optional="1" allow-none="1">
            <doc xml:space="preserve">A pointer to a #guint32 to be filled in, or %NULL</doc>
            <type name="guint32" c:type="guint32*"/>
          </parameter>
          <parameter name="shift" direction="out" caller-allocates="0" transfer-ownership="full" optional="1" allow-none="1">
            <doc xml:space="preserve">A pointer to a #gint to be filled in, or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="precision" direction="out" caller-allocates="0" transfer-ownership="full" optional="1" allow-none="1">
            <doc xml:space="preserve">A pointer to a #gint to be filled in, or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_red_pixel_details" c:identifier="gdk_visual_get_red_pixel_details" version="2.22">
        <doc xml:space="preserve">Obtains values that are needed to calculate red pixel values in TrueColor
and DirectColor. The &#x201C;mask&#x201D; is the significant bits within the pixel.
The &#x201C;shift&#x201D; is the number of bits left we must shift a primary for it
to be in position (according to the "mask"). Finally, "precision" refers
to how much precision the pixel value contains for a particular primary.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="visual" transfer-ownership="none">
            <doc xml:space="preserve">A #GdkVisual</doc>
            <type name="Visual" c:type="GdkVisual*"/>
          </instance-parameter>
          <parameter name="mask" direction="out" caller-allocates="0" transfer-ownership="full" optional="1" allow-none="1">
            <doc xml:space="preserve">A pointer to a #guint32 to be filled in, or %NULL</doc>
            <type name="guint32" c:type="guint32*"/>
          </parameter>
          <parameter name="shift" direction="out" caller-allocates="0" transfer-ownership="full" optional="1" allow-none="1">
            <doc xml:space="preserve">A pointer to a #gint to be filled in, or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="precision" direction="out" caller-allocates="0" transfer-ownership="full" optional="1" allow-none="1">
            <doc xml:space="preserve">A pointer to a #gint to be filled in, or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_screen" c:identifier="gdk_visual_get_screen" version="2.2">
        <doc xml:space="preserve">Gets the screen to which this visual belongs</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the screen to which this visual belongs.</doc>
          <type name="Screen" c:type="GdkScreen*"/>
        </return-value>
        <parameters>
          <instance-parameter name="visual" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkVisual</doc>
            <type name="Visual" c:type="GdkVisual*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_visual_type" c:identifier="gdk_visual_get_visual_type" version="2.22">
        <doc xml:space="preserve">Returns the type of visual this is (PseudoColor, TrueColor, etc).</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #GdkVisualType stating the type of @visual.</doc>
          <type name="VisualType" c:type="GdkVisualType"/>
        </return-value>
        <parameters>
          <instance-parameter name="visual" transfer-ownership="none">
            <doc xml:space="preserve">A #GdkVisual.</doc>
            <type name="Visual" c:type="GdkVisual*"/>
          </instance-parameter>
        </parameters>
      </method>
    </class>
    <enumeration name="VisualType" glib:type-name="GdkVisualType" glib:get-type="gdk_visual_type_get_type" c:type="GdkVisualType">
      <doc xml:space="preserve">A set of values that describe the manner in which the pixel values
for a visual are converted into RGB values for display.</doc>
      <member name="static_gray" value="0" c:identifier="GDK_VISUAL_STATIC_GRAY" glib:nick="static-gray" glib:name="GDK_VISUAL_STATIC_GRAY">
        <doc xml:space="preserve">Each pixel value indexes a grayscale value
    directly.</doc>
      </member>
      <member name="grayscale" value="1" c:identifier="GDK_VISUAL_GRAYSCALE" glib:nick="grayscale" glib:name="GDK_VISUAL_GRAYSCALE">
        <doc xml:space="preserve">Each pixel is an index into a color map that
    maps pixel values into grayscale values. The color map can be
    changed by an application.</doc>
      </member>
      <member name="static_color" value="2" c:identifier="GDK_VISUAL_STATIC_COLOR" glib:nick="static-color" glib:name="GDK_VISUAL_STATIC_COLOR">
        <doc xml:space="preserve">Each pixel value is an index into a predefined,
    unmodifiable color map that maps pixel values into RGB values.</doc>
      </member>
      <member name="pseudo_color" value="3" c:identifier="GDK_VISUAL_PSEUDO_COLOR" glib:nick="pseudo-color" glib:name="GDK_VISUAL_PSEUDO_COLOR">
        <doc xml:space="preserve">Each pixel is an index into a color map that
    maps pixel values into rgb values. The color map can be changed by
    an application.</doc>
      </member>
      <member name="true_color" value="4" c:identifier="GDK_VISUAL_TRUE_COLOR" glib:nick="true-color" glib:name="GDK_VISUAL_TRUE_COLOR">
        <doc xml:space="preserve">Each pixel value directly contains red, green,
    and blue components. Use gdk_visual_get_red_pixel_details(), etc,
    to obtain information about how the components are assembled into
    a pixel value.</doc>
      </member>
      <member name="direct_color" value="5" c:identifier="GDK_VISUAL_DIRECT_COLOR" glib:nick="direct-color" glib:name="GDK_VISUAL_DIRECT_COLOR">
        <doc xml:space="preserve">Each pixel value contains red, green, and blue
    components as for %GDK_VISUAL_TRUE_COLOR, but the components are
    mapped via a color table into the final output table instead of
    being converted directly.</doc>
      </member>
    </enumeration>
    <function-macro name="WINDOW" c:identifier="GDK_WINDOW" introspectable="0">
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="WINDOW_CLASS" c:identifier="GDK_WINDOW_CLASS" introspectable="0">
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="WINDOW_GET_CLASS" c:identifier="GDK_WINDOW_GET_CLASS" introspectable="0">
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <bitfield name="WMDecoration" glib:type-name="GdkWMDecoration" glib:get-type="gdk_wm_decoration_get_type" c:type="GdkWMDecoration">
      <doc xml:space="preserve">These are hints originally defined by the Motif toolkit.
The window manager can use them when determining how to decorate
the window. The hint must be set before mapping the window.</doc>
      <member name="all" value="1" c:identifier="GDK_DECOR_ALL" glib:nick="all" glib:name="GDK_DECOR_ALL">
        <doc xml:space="preserve">all decorations should be applied.</doc>
      </member>
      <member name="border" value="2" c:identifier="GDK_DECOR_BORDER" glib:nick="border" glib:name="GDK_DECOR_BORDER">
        <doc xml:space="preserve">a frame should be drawn around the window.</doc>
      </member>
      <member name="resizeh" value="4" c:identifier="GDK_DECOR_RESIZEH" glib:nick="resizeh" glib:name="GDK_DECOR_RESIZEH">
        <doc xml:space="preserve">the frame should have resize handles.</doc>
      </member>
      <member name="title" value="8" c:identifier="GDK_DECOR_TITLE" glib:nick="title" glib:name="GDK_DECOR_TITLE">
        <doc xml:space="preserve">a titlebar should be placed above the window.</doc>
      </member>
      <member name="menu" value="16" c:identifier="GDK_DECOR_MENU" glib:nick="menu" glib:name="GDK_DECOR_MENU">
        <doc xml:space="preserve">a button for opening a menu should be included.</doc>
      </member>
      <member name="minimize" value="32" c:identifier="GDK_DECOR_MINIMIZE" glib:nick="minimize" glib:name="GDK_DECOR_MINIMIZE">
        <doc xml:space="preserve">a minimize button should be included.</doc>
      </member>
      <member name="maximize" value="64" c:identifier="GDK_DECOR_MAXIMIZE" glib:nick="maximize" glib:name="GDK_DECOR_MAXIMIZE">
        <doc xml:space="preserve">a maximize button should be included.</doc>
      </member>
    </bitfield>
    <bitfield name="WMFunction" glib:type-name="GdkWMFunction" glib:get-type="gdk_wm_function_get_type" c:type="GdkWMFunction">
      <doc xml:space="preserve">These are hints originally defined by the Motif toolkit. The window manager
can use them when determining the functions to offer for the window. The
hint must be set before mapping the window.</doc>
      <member name="all" value="1" c:identifier="GDK_FUNC_ALL" glib:nick="all" glib:name="GDK_FUNC_ALL">
        <doc xml:space="preserve">all functions should be offered.</doc>
      </member>
      <member name="resize" value="2" c:identifier="GDK_FUNC_RESIZE" glib:nick="resize" glib:name="GDK_FUNC_RESIZE">
        <doc xml:space="preserve">the window should be resizable.</doc>
      </member>
      <member name="move" value="4" c:identifier="GDK_FUNC_MOVE" glib:nick="move" glib:name="GDK_FUNC_MOVE">
        <doc xml:space="preserve">the window should be movable.</doc>
      </member>
      <member name="minimize" value="8" c:identifier="GDK_FUNC_MINIMIZE" glib:nick="minimize" glib:name="GDK_FUNC_MINIMIZE">
        <doc xml:space="preserve">the window should be minimizable.</doc>
      </member>
      <member name="maximize" value="16" c:identifier="GDK_FUNC_MAXIMIZE" glib:nick="maximize" glib:name="GDK_FUNC_MAXIMIZE">
        <doc xml:space="preserve">the window should be maximizable.</doc>
      </member>
      <member name="close" value="32" c:identifier="GDK_FUNC_CLOSE" glib:nick="close" glib:name="GDK_FUNC_CLOSE">
        <doc xml:space="preserve">the window should be closable.</doc>
      </member>
    </bitfield>
    <class name="Window" c:symbol-prefix="window" c:type="GdkWindow" parent="GObject.Object" abstract="1" glib:type-name="GdkWindow" glib:get-type="gdk_window_get_type" glib:type-struct="WindowClass">
      <constructor name="new" c:identifier="gdk_window_new">
        <doc xml:space="preserve">Creates a new #GdkWindow using the attributes from
@attributes. See #GdkWindowAttr and #GdkWindowAttributesType for
more details.  Note: to use this on displays other than the default
display, @parent must be specified.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the new #GdkWindow</doc>
          <type name="Window" c:type="GdkWindow*"/>
        </return-value>
        <parameters>
          <parameter name="parent" transfer-ownership="none" nullable="1" allow-none="1">
            <doc xml:space="preserve">a #GdkWindow, or %NULL to create the window as a child of
  the default root window for the default display.</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </parameter>
          <parameter name="attributes" transfer-ownership="none">
            <doc xml:space="preserve">attributes of the new window</doc>
            <type name="WindowAttr" c:type="GdkWindowAttr*"/>
          </parameter>
          <parameter name="attributes_mask" transfer-ownership="none">
            <doc xml:space="preserve">mask indicating which
  fields in @attributes are valid</doc>
            <type name="WindowAttributesType" c:type="gint"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="at_pointer" c:identifier="gdk_window_at_pointer" deprecated="1" deprecated-version="3.0">
        <doc xml:space="preserve">Obtains the window underneath the mouse pointer, returning the
location of that window in @win_x, @win_y. Returns %NULL if the
window under the mouse pointer is not known to GDK (if the window
belongs to another application and a #GdkWindow hasn&#x2019;t been created
for it with gdk_window_foreign_new())

NOTE: For multihead-aware widgets or applications use
gdk_display_get_window_at_pointer() instead.</doc>
        <doc-deprecated xml:space="preserve">Use gdk_device_get_window_at_position() instead.</doc-deprecated>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">window under the mouse pointer</doc>
          <type name="Window" c:type="GdkWindow*"/>
        </return-value>
        <parameters>
          <parameter name="win_x" direction="out" caller-allocates="0" transfer-ownership="full" optional="1" allow-none="1">
            <doc xml:space="preserve">return location for origin of the window under the pointer</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="win_y" direction="out" caller-allocates="0" transfer-ownership="full" optional="1" allow-none="1">
            <doc xml:space="preserve">return location for origin of the window under the pointer</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </function>
      <function name="constrain_size" c:identifier="gdk_window_constrain_size">
        <doc xml:space="preserve">Constrains a desired width and height according to a
set of geometry hints (such as minimum and maximum size).</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="geometry" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkGeometry structure</doc>
            <type name="Geometry" c:type="GdkGeometry*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">a mask indicating what portions of @geometry are set</doc>
            <type name="WindowHints" c:type="GdkWindowHints"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:space="preserve">desired width of window</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:space="preserve">desired height of the window</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="new_width" direction="out" caller-allocates="0" transfer-ownership="full">
            <doc xml:space="preserve">location to store resulting width</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="new_height" direction="out" caller-allocates="0" transfer-ownership="full">
            <doc xml:space="preserve">location to store resulting height</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </function>
      <function name="process_all_updates" c:identifier="gdk_window_process_all_updates" deprecated="1" deprecated-version="3.22">
        <doc xml:space="preserve">Calls gdk_window_process_updates() for all windows (see #GdkWindow)
in the application.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </function>
      <function name="set_debug_updates" c:identifier="gdk_window_set_debug_updates" deprecated="1" deprecated-version="3.22">
        <doc xml:space="preserve">With update debugging enabled, calls to
gdk_window_invalidate_region() clear the invalidated region of the
screen to a noticeable color, and GDK pauses for a short time
before sending exposes to windows during
gdk_window_process_updates().  The net effect is that you can see
the invalid region for each window and watch redraws as they
occur. This allows you to diagnose inefficiencies in your application.

In essence, because the GDK rendering model prevents all flicker,
if you are redrawing the same region 400 times you may never
notice, aside from noticing a speed problem. Enabling update
debugging causes GTK to flicker slowly and noticeably, so you can
see exactly what&#x2019;s being redrawn when, in what order.

The --gtk-debug=updates command line option passed to GTK+ programs
enables this debug option at application startup time. That's
usually more useful than calling gdk_window_set_debug_updates()
yourself, though you might want to use this function to enable
updates sometime after application startup time.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve">%TRUE to turn on update debugging</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="create_surface">
        <return-value transfer-ownership="full">
          <type name="cairo.Surface" c:type="cairo_surface_t*"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
          <parameter name="width" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="from_embedder">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
          <parameter name="embedder_x" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="embedder_y" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="offscreen_x" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="offscreen_y" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="pick_embedded_child" introspectable="0">
        <return-value>
          <type name="Window" c:type="GdkWindow*"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="to_embedder">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
          <parameter name="offscreen_x" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="offscreen_y" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="embedder_x" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="embedder_y" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="add_filter" c:identifier="gdk_window_add_filter" introspectable="0">
        <doc xml:space="preserve">Adds an event filter to @window, allowing you to intercept events
before they reach GDK. This is a low-level operation and makes it
easy to break GDK and/or GTK+, so you have to know what you're
doing. Pass %NULL for @window to get all events for all windows,
instead of events for a specific window.

If you are interested in X GenericEvents, bear in mind that
XGetEventData() has been already called on the event, and
XFreeEventData() must not be called within @function.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none" nullable="1" allow-none="1">
            <doc xml:space="preserve">a #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
          <parameter name="function" transfer-ownership="none" closure="1">
            <doc xml:space="preserve">filter callback</doc>
            <type name="FilterFunc" c:type="GdkFilterFunc"/>
          </parameter>
          <parameter name="data" transfer-ownership="none" nullable="1" allow-none="1">
            <doc xml:space="preserve">data to pass to filter callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="beep" c:identifier="gdk_window_beep" version="2.12">
        <doc xml:space="preserve">Emits a short beep associated to @window in the appropriate
display, if supported. Otherwise, emits a short beep on
the display just as gdk_display_beep().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a toplevel #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="begin_draw_frame" c:identifier="gdk_window_begin_draw_frame" version="3.22">
        <doc xml:space="preserve">Indicates that you are beginning the process of redrawing @region
on @window, and provides you with a #GdkDrawingContext.

If @window is a top level #GdkWindow, backed by a native window
implementation, a backing store (offscreen buffer) large enough to
contain @region will be created. The backing store will be initialized
with the background color or background surface for @window. Then, all
drawing operations performed on @window will be diverted to the
backing store. When you call gdk_window_end_frame(), the contents of
the backing store will be copied to @window, making it visible
on screen. Only the part of @window contained in @region will be
modified; that is, drawing operations are clipped to @region.

The net result of all this is to remove flicker, because the user
sees the finished product appear all at once when you call
gdk_window_end_draw_frame(). If you draw to @window directly without
calling gdk_window_begin_draw_frame(), the user may see flicker
as individual drawing operations are performed in sequence.

When using GTK+, the widget system automatically places calls to
gdk_window_begin_draw_frame() and gdk_window_end_draw_frame() around
emissions of the `GtkWidget::draw` signal. That is, if you&#x2019;re
drawing the contents of the widget yourself, you can assume that the
widget has a cleared background, is already set as the clip region,
and already has a backing store. Therefore in most cases, application
code in GTK does not need to call gdk_window_begin_draw_frame()
explicitly.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a #GdkDrawingContext context that should be
  used to draw the contents of the window; the returned context is owned
  by GDK.</doc>
          <type name="DrawingContext" c:type="GdkDrawingContext*"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
          <parameter name="region" transfer-ownership="none">
            <doc xml:space="preserve">a Cairo region</doc>
            <type name="cairo.Region" c:type="const cairo_region_t*"/>
          </parameter>
        </parameters>
      </method>
      <method name="begin_move_drag" c:identifier="gdk_window_begin_move_drag">
        <doc xml:space="preserve">Begins a window move operation (for a toplevel window).

This function assumes that the drag is controlled by the
client pointer device, use gdk_window_begin_move_drag_for_device()
to begin a drag with a different device.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a toplevel #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
          <parameter name="button" transfer-ownership="none">
            <doc xml:space="preserve">the button being used to drag, or 0 for a keyboard-initiated drag</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="root_x" transfer-ownership="none">
            <doc xml:space="preserve">root window X coordinate of mouse click that began the drag</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="root_y" transfer-ownership="none">
            <doc xml:space="preserve">root window Y coordinate of mouse click that began the drag</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="timestamp" transfer-ownership="none">
            <doc xml:space="preserve">timestamp of mouse click that began the drag</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="begin_move_drag_for_device" c:identifier="gdk_window_begin_move_drag_for_device" version="3.4">
        <doc xml:space="preserve">Begins a window move operation (for a toplevel window).
You might use this function to implement a &#x201C;window move grip,&#x201D; for
example. The function works best with window managers that support the
[Extended Window Manager Hints](http://www.freedesktop.org/Standards/wm-spec)
but has a fallback implementation for other window managers.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a toplevel #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">the device used for the operation</doc>
            <type name="Device" c:type="GdkDevice*"/>
          </parameter>
          <parameter name="button" transfer-ownership="none">
            <doc xml:space="preserve">the button being used to drag, or 0 for a keyboard-initiated drag</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="root_x" transfer-ownership="none">
            <doc xml:space="preserve">root window X coordinate of mouse click that began the drag</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="root_y" transfer-ownership="none">
            <doc xml:space="preserve">root window Y coordinate of mouse click that began the drag</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="timestamp" transfer-ownership="none">
            <doc xml:space="preserve">timestamp of mouse click that began the drag</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="begin_paint_rect" c:identifier="gdk_window_begin_paint_rect" deprecated="1" deprecated-version="3.22">
        <doc xml:space="preserve">A convenience wrapper around gdk_window_begin_paint_region() which
creates a rectangular region for you. See
gdk_window_begin_paint_region() for details.</doc>
        <doc-deprecated xml:space="preserve">Use gdk_window_begin_draw_frame() instead</doc-deprecated>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
          <parameter name="rectangle" transfer-ownership="none">
            <doc xml:space="preserve">rectangle you intend to draw to</doc>
            <type name="Rectangle" c:type="const GdkRectangle*"/>
          </parameter>
        </parameters>
      </method>
      <method name="begin_paint_region" c:identifier="gdk_window_begin_paint_region" deprecated="1" deprecated-version="3.22">
        <doc xml:space="preserve">Indicates that you are beginning the process of redrawing @region.
A backing store (offscreen buffer) large enough to contain @region
will be created. The backing store will be initialized with the
background color or background surface for @window. Then, all
drawing operations performed on @window will be diverted to the
backing store.  When you call gdk_window_end_paint(), the backing
store will be copied to @window, making it visible onscreen. Only
the part of @window contained in @region will be modified; that is,
drawing operations are clipped to @region.

The net result of all this is to remove flicker, because the user
sees the finished product appear all at once when you call
gdk_window_end_paint(). If you draw to @window directly without
calling gdk_window_begin_paint_region(), the user may see flicker
as individual drawing operations are performed in sequence.  The
clipping and background-initializing features of
gdk_window_begin_paint_region() are conveniences for the
programmer, so you can avoid doing that work yourself.

When using GTK+, the widget system automatically places calls to
gdk_window_begin_paint_region() and gdk_window_end_paint() around
emissions of the expose_event signal. That is, if you&#x2019;re writing an
expose event handler, you can assume that the exposed area in
#GdkEventExpose has already been cleared to the window background,
is already set as the clip region, and already has a backing store.
Therefore in most cases, application code need not call
gdk_window_begin_paint_region(). (You can disable the automatic
calls around expose events on a widget-by-widget basis by calling
gtk_widget_set_double_buffered().)

If you call this function multiple times before calling the
matching gdk_window_end_paint(), the backing stores are pushed onto
a stack. gdk_window_end_paint() copies the topmost backing store
onscreen, subtracts the topmost region from all other regions in
the stack, and pops the stack. All drawing operations affect only
the topmost backing store in the stack. One matching call to
gdk_window_end_paint() is required for each call to
gdk_window_begin_paint_region().</doc>
        <doc-deprecated xml:space="preserve">Use gdk_window_begin_draw_frame() instead</doc-deprecated>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
          <parameter name="region" transfer-ownership="none">
            <doc xml:space="preserve">region you intend to draw to</doc>
            <type name="cairo.Region" c:type="const cairo_region_t*"/>
          </parameter>
        </parameters>
      </method>
      <method name="begin_resize_drag" c:identifier="gdk_window_begin_resize_drag">
        <doc xml:space="preserve">Begins a window resize operation (for a toplevel window).

This function assumes that the drag is controlled by the
client pointer device, use gdk_window_begin_resize_drag_for_device()
to begin a drag with a different device.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a toplevel #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
          <parameter name="edge" transfer-ownership="none">
            <doc xml:space="preserve">the edge or corner from which the drag is started</doc>
            <type name="WindowEdge" c:type="GdkWindowEdge"/>
          </parameter>
          <parameter name="button" transfer-ownership="none">
            <doc xml:space="preserve">the button being used to drag, or 0 for a keyboard-initiated drag</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="root_x" transfer-ownership="none">
            <doc xml:space="preserve">root window X coordinate of mouse click that began the drag</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="root_y" transfer-ownership="none">
            <doc xml:space="preserve">root window Y coordinate of mouse click that began the drag</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="timestamp" transfer-ownership="none">
            <doc xml:space="preserve">timestamp of mouse click that began the drag (use gdk_event_get_time())</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="begin_resize_drag_for_device" c:identifier="gdk_window_begin_resize_drag_for_device" version="3.4">
        <doc xml:space="preserve">Begins a window resize operation (for a toplevel window).
You might use this function to implement a &#x201C;window resize grip,&#x201D; for
example; in fact #GtkStatusbar uses it. The function works best
with window managers that support the
[Extended Window Manager Hints](http://www.freedesktop.org/Standards/wm-spec)
but has a fallback implementation for other window managers.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a toplevel #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
          <parameter name="edge" transfer-ownership="none">
            <doc xml:space="preserve">the edge or corner from which the drag is started</doc>
            <type name="WindowEdge" c:type="GdkWindowEdge"/>
          </parameter>
          <parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">the device used for the operation</doc>
            <type name="Device" c:type="GdkDevice*"/>
          </parameter>
          <parameter name="button" transfer-ownership="none">
            <doc xml:space="preserve">the button being used to drag, or 0 for a keyboard-initiated drag</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="root_x" transfer-ownership="none">
            <doc xml:space="preserve">root window X coordinate of mouse click that began the drag</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="root_y" transfer-ownership="none">
            <doc xml:space="preserve">root window Y coordinate of mouse click that began the drag</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="timestamp" transfer-ownership="none">
            <doc xml:space="preserve">timestamp of mouse click that began the drag (use gdk_event_get_time())</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="configure_finished" c:identifier="gdk_window_configure_finished" version="2.6" deprecated="1" deprecated-version="3.8">
        <doc xml:space="preserve">Does nothing, present only for compatiblity.</doc>
        <doc-deprecated xml:space="preserve">this function is no longer needed</doc-deprecated>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a toplevel #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="coords_from_parent" c:identifier="gdk_window_coords_from_parent" version="2.22">
        <doc xml:space="preserve">Transforms window coordinates from a parent window to a child
window, where the parent window is the normal parent as returned by
gdk_window_get_parent() for normal windows, and the window's
embedder as returned by gdk_offscreen_window_get_embedder() for
offscreen windows.

For normal windows, calling this function is equivalent to subtracting
the return values of gdk_window_get_position() from the parent coordinates.
For offscreen windows however (which can be arbitrarily transformed),
this function calls the GdkWindow::from-embedder: signal to translate
the coordinates.

You should always use this function when writing generic code that
walks down a window hierarchy.

See also: gdk_window_coords_to_parent()</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a child window</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
          <parameter name="parent_x" transfer-ownership="none">
            <doc xml:space="preserve">X coordinate in parent&#x2019;s coordinate system</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="parent_y" transfer-ownership="none">
            <doc xml:space="preserve">Y coordinate in parent&#x2019;s coordinate system</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="x" direction="out" caller-allocates="0" transfer-ownership="full" optional="1" allow-none="1">
            <doc xml:space="preserve">return location for X coordinate in child&#x2019;s coordinate system</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="y" direction="out" caller-allocates="0" transfer-ownership="full" optional="1" allow-none="1">
            <doc xml:space="preserve">return location for Y coordinate in child&#x2019;s coordinate system</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="coords_to_parent" c:identifier="gdk_window_coords_to_parent" version="2.22">
        <doc xml:space="preserve">Transforms window coordinates from a child window to its parent
window, where the parent window is the normal parent as returned by
gdk_window_get_parent() for normal windows, and the window's
embedder as returned by gdk_offscreen_window_get_embedder() for
offscreen windows.

For normal windows, calling this function is equivalent to adding
the return values of gdk_window_get_position() to the child coordinates.
For offscreen windows however (which can be arbitrarily transformed),
this function calls the GdkWindow::to-embedder: signal to translate
the coordinates.

You should always use this function when writing generic code that
walks up a window hierarchy.

See also: gdk_window_coords_from_parent()</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a child window</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">X coordinate in child&#x2019;s coordinate system</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve">Y coordinate in child&#x2019;s coordinate system</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="parent_x" direction="out" caller-allocates="0" transfer-ownership="full" optional="1" allow-none="1">
            <doc xml:space="preserve">return location for X coordinate
in parent&#x2019;s coordinate system, or %NULL</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="parent_y" direction="out" caller-allocates="0" transfer-ownership="full" optional="1" allow-none="1">
            <doc xml:space="preserve">return location for Y coordinate
in parent&#x2019;s coordinate system, or %NULL</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_gl_context" c:identifier="gdk_window_create_gl_context" version="3.16" throws="1">
        <doc xml:space="preserve">Creates a new #GdkGLContext matching the
framebuffer format to the visual of the #GdkWindow. The context
is disconnected from any particular window or surface.

If the creation of the #GdkGLContext failed, @error will be set.

Before using the returned #GdkGLContext, you will need to
call gdk_gl_context_make_current() or gdk_gl_context_realize().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the newly created #GdkGLContext, or
%NULL on error</doc>
          <type name="GLContext" c:type="GdkGLContext*"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="create_similar_image_surface" c:identifier="gdk_window_create_similar_image_surface" version="3.10">
        <doc xml:space="preserve">Create a new image surface that is efficient to draw on the
given @window.

Initially the surface contents are all 0 (transparent if contents
have transparency, black otherwise.)

The @width and @height of the new surface are not affected by
the scaling factor of the @window, or by the @scale argument; they
are the size of the surface in device pixels. If you wish to create
an image surface capable of holding the contents of @window you can
use:

|[&lt;!-- language="C" --&gt;
  int scale = gdk_window_get_scale_factor (window);
  int width = gdk_window_get_width (window) * scale;
  int height = gdk_window_get_height (window) * scale;

  // format is set elsewhere
  cairo_surface_t *surface =
    gdk_window_create_similar_image_surface (window,
                                             format,
                                             width, height,
                                             scale);
]|

Note that unlike cairo_surface_create_similar_image(), the new
surface's device scale is set to @scale, or to the scale factor of
@window if @scale is 0.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a pointer to the newly allocated surface. The caller
owns the surface and should call cairo_surface_destroy() when done
with it.

This function always returns a valid pointer, but it will return a
pointer to a &#x201C;nil&#x201D; surface if @other is already in an error state
or any other error occurs.</doc>
          <type name="cairo.Surface" c:type="cairo_surface_t*"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none" nullable="1" allow-none="1">
            <doc xml:space="preserve">window to make new surface similar to, or
  %NULL if none</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
          <parameter name="format" transfer-ownership="none">
            <doc xml:space="preserve">the format for the new surface</doc>
            <type name="cairo.Format" c:type="cairo_format_t"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:space="preserve">width of the new surface</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:space="preserve">height of the new surface</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="scale" transfer-ownership="none">
            <doc xml:space="preserve">the scale of the new surface, or 0 to use same as @window</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_similar_surface" c:identifier="gdk_window_create_similar_surface" version="2.22">
        <doc xml:space="preserve">Create a new surface that is as compatible as possible with the
given @window. For example the new surface will have the same
fallback resolution and font options as @window. Generally, the new
surface will also use the same backend as @window, unless that is
not possible for some reason. The type of the returned surface may
be examined with cairo_surface_get_type().

Initially the surface contents are all 0 (transparent if contents
have transparency, black otherwise.)</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a pointer to the newly allocated surface. The caller
owns the surface and should call cairo_surface_destroy() when done
with it.

This function always returns a valid pointer, but it will return a
pointer to a &#x201C;nil&#x201D; surface if @other is already in an error state
or any other error occurs.</doc>
          <type name="cairo.Surface" c:type="cairo_surface_t*"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">window to make new surface similar to</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
          <parameter name="content" transfer-ownership="none">
            <doc xml:space="preserve">the content for the new surface</doc>
            <type name="cairo.Content" c:type="cairo_content_t"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:space="preserve">width of the new surface</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:space="preserve">height of the new surface</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="deiconify" c:identifier="gdk_window_deiconify">
        <doc xml:space="preserve">Attempt to deiconify (unminimize) @window. On X11 the window manager may
choose to ignore the request to deiconify. When using GTK+,
use gtk_window_deiconify() instead of the #GdkWindow variant. Or better yet,
you probably want to use gtk_window_present_with_time(), which raises the window, focuses it,
unminimizes it, and puts it on the current desktop.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a toplevel #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="destroy" c:identifier="gdk_window_destroy">
        <doc xml:space="preserve">Destroys the window system resources associated with @window and decrements @window's
reference count. The window system resources for all children of @window are also
destroyed, but the children&#x2019;s reference counts are not decremented.

Note that a window will not be destroyed automatically when its reference count
reaches zero. You must call this function yourself before that happens.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="destroy_notify" c:identifier="gdk_window_destroy_notify">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="enable_synchronized_configure" c:identifier="gdk_window_enable_synchronized_configure" version="2.6" deprecated="1" deprecated-version="3.8">
        <doc xml:space="preserve">Does nothing, present only for compatiblity.</doc>
        <doc-deprecated xml:space="preserve">this function is no longer needed</doc-deprecated>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a toplevel #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="end_draw_frame" c:identifier="gdk_window_end_draw_frame" version="3.22">
        <doc xml:space="preserve">Indicates that the drawing of the contents of @window started with
gdk_window_begin_frame() has been completed.

This function will take care of destroying the #GdkDrawingContext.

It is an error to call this function without a matching
gdk_window_begin_frame() first.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
          <parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve">the #GdkDrawingContext created by gdk_window_begin_draw_frame()</doc>
            <type name="DrawingContext" c:type="GdkDrawingContext*"/>
          </parameter>
        </parameters>
      </method>
      <method name="end_paint" c:identifier="gdk_window_end_paint">
        <doc xml:space="preserve">Indicates that the backing store created by the most recent call
to gdk_window_begin_paint_region() should be copied onscreen and
deleted, leaving the next-most-recent backing store or no backing
store at all as the active paint region. See
gdk_window_begin_paint_region() for full details.

It is an error to call this function without a matching
gdk_window_begin_paint_region() first.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ensure_native" c:identifier="gdk_window_ensure_native" version="2.18">
        <doc xml:space="preserve">Tries to ensure that there is a window-system native window for this
GdkWindow. This may fail in some situations, returning %FALSE.

Offscreen window and children of them can never have native windows.

Some backends may not support native child windows.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the window has a native window, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="flush" c:identifier="gdk_window_flush" version="2.18" deprecated="1" deprecated-version="3.14">
        <doc xml:space="preserve">This function does nothing.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="focus" c:identifier="gdk_window_focus">
        <doc xml:space="preserve">Sets keyboard focus to @window. In most cases, gtk_window_present_with_time()
should be used on a #GtkWindow, rather than calling this function.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
          <parameter name="timestamp" transfer-ownership="none">
            <doc xml:space="preserve">timestamp of the event triggering the window focus</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="freeze_toplevel_updates_libgtk_only" c:identifier="gdk_window_freeze_toplevel_updates_libgtk_only" deprecated="1" deprecated-version="3.16">
        <doc xml:space="preserve">Temporarily freezes a window and all its descendants such that it won't
receive expose events.  The window will begin receiving expose events
again when gdk_window_thaw_toplevel_updates_libgtk_only() is called. If
gdk_window_freeze_toplevel_updates_libgtk_only()
has been called more than once,
gdk_window_thaw_toplevel_updates_libgtk_only() must be called
an equal number of times to begin processing exposes.

This function is not part of the GDK public API and is only
for use by GTK+.</doc>
        <doc-deprecated xml:space="preserve">This symbol was never meant to be used outside of GTK+</doc-deprecated>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="freeze_updates" c:identifier="gdk_window_freeze_updates">
        <doc xml:space="preserve">Temporarily freezes a window such that it won&#x2019;t receive expose
events.  The window will begin receiving expose events again when
gdk_window_thaw_updates() is called. If gdk_window_freeze_updates()
has been called more than once, gdk_window_thaw_updates() must be called
an equal number of times to begin processing exposes.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="fullscreen" c:identifier="gdk_window_fullscreen" version="2.2">
        <doc xml:space="preserve">Moves the window into fullscreen mode. This means the
window covers the entire screen and is above any panels
or task bars.

If the window was already fullscreen, then this function does nothing.

On X11, asks the window manager to put @window in a fullscreen
state, if the window manager supports this operation. Not all
window managers support this, and some deliberately ignore it or
don&#x2019;t have a concept of &#x201C;fullscreen&#x201D;; so you can&#x2019;t rely on the
fullscreenification actually happening. But it will happen with
most standard window managers, and GDK makes a best effort to get
it to happen.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a toplevel #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="fullscreen_on_monitor" c:identifier="gdk_window_fullscreen_on_monitor">
        <doc xml:space="preserve">Moves the window into fullscreen mode on the given monitor. This means
the window covers the entire screen and is above any panels or task bars.

If the window was already fullscreen, then this function does nothing.</doc>
        <doc-version xml:space="preserve">UNRELEASED</doc-version>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a toplevel #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
          <parameter name="monitor" transfer-ownership="none">
            <doc xml:space="preserve">Which monitor to display fullscreen on.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="geometry_changed" c:identifier="gdk_window_geometry_changed" version="2.18">
        <doc xml:space="preserve">This function informs GDK that the geometry of an embedded
offscreen window has changed. This is necessary for GDK to keep
track of which offscreen window the pointer is in.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">an embedded offscreen #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_accept_focus" c:identifier="gdk_window_get_accept_focus" version="2.22">
        <doc xml:space="preserve">Determines whether or not the desktop environment shuld be hinted that
the window does not want to receive input focus.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">whether or not the window should receive input focus.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a toplevel #GdkWindow.</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_background_pattern" c:identifier="gdk_window_get_background_pattern" version="2.22" deprecated="1" deprecated-version="3.22">
        <doc xml:space="preserve">Gets the pattern used to clear the background on @window.</doc>
        <doc-deprecated xml:space="preserve">Don't use this function</doc-deprecated>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">The pattern to use for the
background or %NULL if there is no background.</doc>
          <type name="cairo.Pattern" c:type="cairo_pattern_t*"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a window</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_children" c:identifier="gdk_window_get_children">
        <doc xml:space="preserve">Gets the list of children of @window known to GDK.
This function only returns children created via GDK,
so for example it&#x2019;s useless when used with the root window;
it only returns windows an application created itself.

The returned list must be freed, but the elements in the
list need not be.</doc>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve">
    list of child windows inside @window</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Window"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_children_with_user_data" c:identifier="gdk_window_get_children_with_user_data" version="3.10">
        <doc xml:space="preserve">Gets the list of children of @window known to GDK with a
particular @user_data set on it.

The returned list must be freed, but the elements in the
list need not be.

The list is returned in (relative) stacking order, i.e. the
lowest window is first.</doc>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve">
    list of child windows inside @window</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Window"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
          <parameter name="user_data" transfer-ownership="none" nullable="1" allow-none="1">
            <doc xml:space="preserve">user data to look for</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_clip_region" c:identifier="gdk_window_get_clip_region">
        <doc xml:space="preserve">Computes the region of a window that potentially can be written
to by drawing primitives. This region may not take into account
other factors such as if the window is obscured by other windows,
but no area outside of this region will be affected by drawing
primitives.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a #cairo_region_t. This must be freed with cairo_region_destroy()
         when you are done.</doc>
          <type name="cairo.Region" c:type="cairo_region_t*"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_composited" c:identifier="gdk_window_get_composited" version="2.22" deprecated="1" deprecated-version="3.16">
        <doc xml:space="preserve">Determines whether @window is composited.

See gdk_window_set_composited().</doc>
        <doc-deprecated xml:space="preserve">Compositing is an outdated technology that
  only ever worked on X11.</doc-deprecated>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the window is composited.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_cursor" c:identifier="gdk_window_get_cursor" glib:get-property="cursor" version="2.18">
        <doc xml:space="preserve">Retrieves a #GdkCursor pointer for the cursor currently set on the
specified #GdkWindow, or %NULL.  If the return value is %NULL then
there is no custom cursor set on the specified window, and it is
using the cursor for its parent window.</doc>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">a #GdkCursor, or %NULL. The
  returned object is owned by the #GdkWindow and should not be
  unreferenced directly. Use gdk_window_set_cursor() to unset the
  cursor of the window</doc>
          <type name="Cursor" c:type="GdkCursor*"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_decorations" c:identifier="gdk_window_get_decorations">
        <doc xml:space="preserve">Returns the decorations set on the GdkWindow with
gdk_window_set_decorations().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the window has decorations set, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">The toplevel #GdkWindow to get the decorations from</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
          <parameter name="decorations" direction="out" caller-allocates="0" transfer-ownership="full">
            <doc xml:space="preserve">The window decorations will be written here</doc>
            <type name="WMDecoration" c:type="GdkWMDecoration*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_device_cursor" c:identifier="gdk_window_get_device_cursor" version="3.0">
        <doc xml:space="preserve">Retrieves a #GdkCursor pointer for the @device currently set on the
specified #GdkWindow, or %NULL.  If the return value is %NULL then
there is no custom cursor set on the specified window, and it is
using the cursor for its parent window.</doc>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">a #GdkCursor, or %NULL. The
  returned object is owned by the #GdkWindow and should not be
  unreferenced directly. Use gdk_window_set_cursor() to unset the
  cursor of the window</doc>
          <type name="Cursor" c:type="GdkCursor*"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkWindow.</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">a master, pointer #GdkDevice.</doc>
            <type name="Device" c:type="GdkDevice*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_device_events" c:identifier="gdk_window_get_device_events" version="3.0">
        <doc xml:space="preserve">Returns the event mask for @window corresponding to an specific device.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">device event mask for @window</doc>
          <type name="EventMask" c:type="GdkEventMask"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkWindow.</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkDevice.</doc>
            <type name="Device" c:type="GdkDevice*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_device_position" c:identifier="gdk_window_get_device_position" version="3.0">
        <doc xml:space="preserve">Obtains the current device position and modifier state.
The position is given in coordinates relative to the upper left
corner of @window.

Use gdk_window_get_device_position_double() if you need subpixel precision.</doc>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">The window underneath @device
(as with gdk_device_get_window_at_position()), or %NULL if the
window is not known to GDK.</doc>
          <type name="Window" c:type="GdkWindow*"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkWindow.</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">pointer #GdkDevice to query to.</doc>
            <type name="Device" c:type="GdkDevice*"/>
          </parameter>
          <parameter name="x" direction="out" caller-allocates="0" transfer-ownership="full" optional="1" allow-none="1">
            <doc xml:space="preserve">return location for the X coordinate of @device, or %NULL.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="y" direction="out" caller-allocates="0" transfer-ownership="full" optional="1" allow-none="1">
            <doc xml:space="preserve">return location for the Y coordinate of @device, or %NULL.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="mask" direction="out" caller-allocates="0" transfer-ownership="full" optional="1" allow-none="1">
            <doc xml:space="preserve">return location for the modifier mask, or %NULL.</doc>
            <type name="ModifierType" c:type="GdkModifierType*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_device_position_double" c:identifier="gdk_window_get_device_position_double" version="3.10">
        <doc xml:space="preserve">Obtains the current device position in doubles and modifier state.
The position is given in coordinates relative to the upper left
corner of @window.</doc>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">The window underneath @device
(as with gdk_device_get_window_at_position()), or %NULL if the
window is not known to GDK.</doc>
          <type name="Window" c:type="GdkWindow*"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkWindow.</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">pointer #GdkDevice to query to.</doc>
            <type name="Device" c:type="GdkDevice*"/>
          </parameter>
          <parameter name="x" direction="out" caller-allocates="0" transfer-ownership="full" optional="1" allow-none="1">
            <doc xml:space="preserve">return location for the X coordinate of @device, or %NULL.</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="y" direction="out" caller-allocates="0" transfer-ownership="full" optional="1" allow-none="1">
            <doc xml:space="preserve">return location for the Y coordinate of @device, or %NULL.</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="mask" direction="out" caller-allocates="0" transfer-ownership="full" optional="1" allow-none="1">
            <doc xml:space="preserve">return location for the modifier mask, or %NULL.</doc>
            <type name="ModifierType" c:type="GdkModifierType*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_display" c:identifier="gdk_window_get_display" version="2.24">
        <doc xml:space="preserve">Gets the #GdkDisplay associated with a #GdkWindow.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the #GdkDisplay associated with @window</doc>
          <type name="Display" c:type="GdkDisplay*"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_drag_protocol" c:identifier="gdk_window_get_drag_protocol" version="3.0">
        <doc xml:space="preserve">Finds out the DND protocol supported by a window.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the supported DND protocol.</doc>
          <type name="DragProtocol" c:type="GdkDragProtocol"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">the destination window</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
          <parameter name="target" direction="out" caller-allocates="0" transfer-ownership="full" optional="1" allow-none="1">
            <doc xml:space="preserve">location of the window
   where the drop should happen. This may be @window or a proxy window,
   or %NULL if @window does not support Drag and Drop.</doc>
            <type name="Window" c:type="GdkWindow**"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_effective_parent" c:identifier="gdk_window_get_effective_parent" version="2.22">
        <doc xml:space="preserve">Obtains the parent of @window, as known to GDK. Works like
gdk_window_get_parent() for normal windows, but returns the
window&#x2019;s embedder for offscreen windows.

See also: gdk_offscreen_window_get_embedder()</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">effective parent of @window</doc>
          <type name="Window" c:type="GdkWindow*"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_effective_toplevel" c:identifier="gdk_window_get_effective_toplevel" version="2.22">
        <doc xml:space="preserve">Gets the toplevel window that&#x2019;s an ancestor of @window.

Works like gdk_window_get_toplevel(), but treats an offscreen window's
embedder as its parent, using gdk_window_get_effective_parent().

See also: gdk_offscreen_window_get_embedder()</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the effective toplevel window containing @window</doc>
          <type name="Window" c:type="GdkWindow*"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_event_compression" c:identifier="gdk_window_get_event_compression" version="3.12">
        <doc xml:space="preserve">Get the current event compression setting for this window.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if motion events will be compressed</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_events" c:identifier="gdk_window_get_events">
        <doc xml:space="preserve">Gets the event mask for @window for all master input devices. See
gdk_window_set_events().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">event mask for @window</doc>
          <type name="EventMask" c:type="GdkEventMask"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_focus_on_map" c:identifier="gdk_window_get_focus_on_map" version="2.22">
        <doc xml:space="preserve">Determines whether or not the desktop environment should be hinted that the
window does not want to receive input focus when it is mapped.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">whether or not the window wants to receive input focus when
it is mapped.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a toplevel #GdkWindow.</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_frame_clock" c:identifier="gdk_window_get_frame_clock" version="3.8">
        <doc xml:space="preserve">Gets the frame clock for the window. The frame clock for a window
never changes unless the window is reparented to a new toplevel
window.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the frame clock</doc>
          <type name="FrameClock" c:type="GdkFrameClock*"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">window to get frame clock for</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_frame_extents" c:identifier="gdk_window_get_frame_extents">
        <doc xml:space="preserve">Obtains the bounding box of the window, including window manager
titlebar/borders if any. The frame position is given in root window
coordinates. To get the position of the window itself (rather than
the frame) in root window coordinates, use gdk_window_get_origin().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a toplevel #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
          <parameter name="rect" direction="out" caller-allocates="1" transfer-ownership="none">
            <doc xml:space="preserve">rectangle to fill with bounding box of the window frame</doc>
            <type name="Rectangle" c:type="GdkRectangle*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_fullscreen_mode" c:identifier="gdk_window_get_fullscreen_mode" version="3.8">
        <doc xml:space="preserve">Obtains the #GdkFullscreenMode of the @window.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The #GdkFullscreenMode applied to the window when fullscreen.</doc>
          <type name="FullscreenMode" c:type="GdkFullscreenMode"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a toplevel #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_geometry" c:identifier="gdk_window_get_geometry">
        <doc xml:space="preserve">Any of the return location arguments to this function may be %NULL,
if you aren&#x2019;t interested in getting the value of that field.

The X and Y coordinates returned are relative to the parent window
of @window, which for toplevels usually means relative to the
window decorations (titlebar, etc.) rather than relative to the
root window (screen-size background window).

On the X11 platform, the geometry is obtained from the X server,
so reflects the latest position of @window; this may be out-of-sync
with the position of @window delivered in the most-recently-processed
#GdkEventConfigure. gdk_window_get_position() in contrast gets the
position from the most recent configure event.

Note: If @window is not a toplevel, it is much better
to call gdk_window_get_position(), gdk_window_get_width() and
gdk_window_get_height() instead, because it avoids the roundtrip to
the X server and because these functions support the full 32-bit
coordinate space, whereas gdk_window_get_geometry() is restricted to
the 16-bit coordinates of X11.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
          <parameter name="x" direction="out" caller-allocates="0" transfer-ownership="full" optional="1" allow-none="1">
            <doc xml:space="preserve">return location for X coordinate of window (relative to its parent)</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="y" direction="out" caller-allocates="0" transfer-ownership="full" optional="1" allow-none="1">
            <doc xml:space="preserve">return location for Y coordinate of window (relative to its parent)</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="width" direction="out" caller-allocates="0" transfer-ownership="full" optional="1" allow-none="1">
            <doc xml:space="preserve">return location for width of window</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="height" direction="out" caller-allocates="0" transfer-ownership="full" optional="1" allow-none="1">
            <doc xml:space="preserve">return location for height of window</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_group" c:identifier="gdk_window_get_group" version="2.4">
        <doc xml:space="preserve">Returns the group leader window for @window. See gdk_window_set_group().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the group leader window for @window</doc>
          <type name="Window" c:type="GdkWindow*"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a toplevel #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_height" c:identifier="gdk_window_get_height" version="2.24">
        <doc xml:space="preserve">Returns the height of the given @window.

On the X11 platform the returned size is the size reported in the
most-recently-processed configure event, rather than the current
size on the X server.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The height of @window</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_modal_hint" c:identifier="gdk_window_get_modal_hint" version="2.22">
        <doc xml:space="preserve">Determines whether or not the window manager is hinted that @window
has modal behaviour.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">whether or not the window has the modal hint set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">A toplevel #GdkWindow.</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_origin" c:identifier="gdk_window_get_origin">
        <doc xml:space="preserve">Obtains the position of a window in root window coordinates.
(Compare with gdk_window_get_position() and
gdk_window_get_geometry() which return the position of a window
relative to its parent window.)</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">not meaningful, ignore</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
          <parameter name="x" direction="out" caller-allocates="0" transfer-ownership="full" optional="1" allow-none="1">
            <doc xml:space="preserve">return location for X coordinate</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="y" direction="out" caller-allocates="0" transfer-ownership="full" optional="1" allow-none="1">
            <doc xml:space="preserve">return location for Y coordinate</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_parent" c:identifier="gdk_window_get_parent">
        <doc xml:space="preserve">Obtains the parent of @window, as known to GDK. Does not query the
X server; thus this returns the parent as passed to gdk_window_new(),
not the actual parent. This should never matter unless you&#x2019;re using
Xlib calls mixed with GDK calls on the X11 platform. It may also
matter for toplevel windows, because the window manager may choose
to reparent them.

Note that you should use gdk_window_get_effective_parent() when
writing generic code that walks up a window hierarchy, because
gdk_window_get_parent() will most likely not do what you expect if
there are offscreen windows in the hierarchy.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">parent of @window</doc>
          <type name="Window" c:type="GdkWindow*"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_pass_through" c:identifier="gdk_window_get_pass_through" version="3.18">
        <doc xml:space="preserve">Returns whether input to the window is passed through to the window
below.

See gdk_window_set_pass_through() for details</doc>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_pointer" c:identifier="gdk_window_get_pointer" deprecated="1" deprecated-version="3.0">
        <doc xml:space="preserve">Obtains the current pointer position and modifier state.
The position is given in coordinates relative to the upper left
corner of @window.</doc>
        <doc-deprecated xml:space="preserve">Use gdk_window_get_device_position() instead.</doc-deprecated>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">the window containing the
pointer (as with gdk_window_at_pointer()), or %NULL if the window
containing the pointer isn&#x2019;t known to GDK</doc>
          <type name="Window" c:type="GdkWindow*"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
          <parameter name="x" direction="out" caller-allocates="0" transfer-ownership="full" optional="1" allow-none="1">
            <doc xml:space="preserve">return location for X coordinate of pointer or %NULL to not
     return the X coordinate</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="y" direction="out" caller-allocates="0" transfer-ownership="full" optional="1" allow-none="1">
            <doc xml:space="preserve">return location for Y coordinate of pointer or %NULL to not
     return the Y coordinate</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="mask" direction="out" caller-allocates="0" transfer-ownership="full" optional="1" allow-none="1">
            <doc xml:space="preserve">return location for modifier mask or %NULL to not return the
     modifier mask</doc>
            <type name="ModifierType" c:type="GdkModifierType*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_position" c:identifier="gdk_window_get_position">
        <doc xml:space="preserve">Obtains the position of the window as reported in the
most-recently-processed #GdkEventConfigure. Contrast with
gdk_window_get_geometry() which queries the X server for the
current window position, regardless of which events have been
received or processed.

The position coordinates are relative to the window&#x2019;s parent window.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
          <parameter name="x" direction="out" caller-allocates="0" transfer-ownership="full" optional="1" allow-none="1">
            <doc xml:space="preserve">X coordinate of window</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="y" direction="out" caller-allocates="0" transfer-ownership="full" optional="1" allow-none="1">
            <doc xml:space="preserve">Y coordinate of window</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_root_coords" c:identifier="gdk_window_get_root_coords" version="2.18">
        <doc xml:space="preserve">Obtains the position of a window position in root
window coordinates. This is similar to
gdk_window_get_origin() but allows you to pass
in any position in the window, not just the origin.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">X coordinate in window</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve">Y coordinate in window</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="root_x" direction="out" caller-allocates="0" transfer-ownership="full">
            <doc xml:space="preserve">return location for X coordinate</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="root_y" direction="out" caller-allocates="0" transfer-ownership="full">
            <doc xml:space="preserve">return location for Y coordinate</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_root_origin" c:identifier="gdk_window_get_root_origin">
        <doc xml:space="preserve">Obtains the top-left corner of the window manager frame in root
window coordinates.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a toplevel #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
          <parameter name="x" direction="out" caller-allocates="0" transfer-ownership="full">
            <doc xml:space="preserve">return location for X position of window frame</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="y" direction="out" caller-allocates="0" transfer-ownership="full">
            <doc xml:space="preserve">return location for Y position of window frame</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_scale_factor" c:identifier="gdk_window_get_scale_factor" version="3.10">
        <doc xml:space="preserve">Returns the internal scale factor that maps from window coordiantes
to the actual device pixels. On traditional systems this is 1, but
on very high density outputs this can be a higher value (often 2).

A higher value means that drawing is automatically scaled up to
a higher resolution, so any code doing drawing will automatically look
nicer. However, if you are supplying pixel-based data the scale
value can be used to determine whether to use a pixel resource
with higher resolution data.

The scale of a window may change during runtime, if this happens
a configure event will be sent to the toplevel window.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the scale factor</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">window to get scale factor for</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_screen" c:identifier="gdk_window_get_screen" version="2.24">
        <doc xml:space="preserve">Gets the #GdkScreen associated with a #GdkWindow.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the #GdkScreen associated with @window</doc>
          <type name="Screen" c:type="GdkScreen*"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_source_events" c:identifier="gdk_window_get_source_events">
        <doc xml:space="preserve">Returns the event mask for @window corresponding to the device class specified
by @source.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">source event mask for @window</doc>
          <type name="EventMask" c:type="GdkEventMask"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
          <parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkInputSource to define the source class.</doc>
            <type name="InputSource" c:type="GdkInputSource"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_state" c:identifier="gdk_window_get_state">
        <doc xml:space="preserve">Gets the bitwise OR of the currently active window state flags,
from the #GdkWindowState enumeration.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">window state bitfield</doc>
          <type name="WindowState" c:type="GdkWindowState"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_support_multidevice" c:identifier="gdk_window_get_support_multidevice" version="3.0">
        <doc xml:space="preserve">Returns %TRUE if the window is aware of the existence of multiple
devices.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the window handles multidevice features.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkWindow.</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_toplevel" c:identifier="gdk_window_get_toplevel">
        <doc xml:space="preserve">Gets the toplevel window that&#x2019;s an ancestor of @window.

Any window type but %GDK_WINDOW_CHILD is considered a
toplevel window, as is a %GDK_WINDOW_CHILD window that
has a root window as parent.

Note that you should use gdk_window_get_effective_toplevel() when
you want to get to a window&#x2019;s toplevel as seen on screen, because
gdk_window_get_toplevel() will most likely not do what you expect
if there are offscreen windows in the hierarchy.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the toplevel window containing @window</doc>
          <type name="Window" c:type="GdkWindow*"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_type_hint" c:identifier="gdk_window_get_type_hint" version="2.10">
        <doc xml:space="preserve">This function returns the type hint set for a window.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The type hint set for @window</doc>
          <type name="WindowTypeHint" c:type="GdkWindowTypeHint"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">A toplevel #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_update_area" c:identifier="gdk_window_get_update_area">
        <doc xml:space="preserve">Transfers ownership of the update area from @window to the caller
of the function. That is, after calling this function, @window will
no longer have an invalid/dirty region; the update area is removed
from @window and handed to you. If a window has no update area,
gdk_window_get_update_area() returns %NULL. You are responsible for
calling cairo_region_destroy() on the returned region if it&#x2019;s non-%NULL.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the update area for @window</doc>
          <type name="cairo.Region" c:type="cairo_region_t*"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_user_data" c:identifier="gdk_window_get_user_data">
        <doc xml:space="preserve">Retrieves the user data for @window, which is normally the widget
that @window belongs to. See gdk_window_set_user_data().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
          <parameter name="data" direction="out" caller-allocates="0" transfer-ownership="full" nullable="1">
            <doc xml:space="preserve">return location for user data</doc>
            <type name="gpointer" c:type="gpointer*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_visible_region" c:identifier="gdk_window_get_visible_region">
        <doc xml:space="preserve">Computes the region of the @window that is potentially visible.
This does not necessarily take into account if the window is
obscured by other windows, but no area outside of this region
is visible.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a #cairo_region_t. This must be freed with cairo_region_destroy()
         when you are done.</doc>
          <type name="cairo.Region" c:type="cairo_region_t*"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_visual" c:identifier="gdk_window_get_visual" version="2.24">
        <doc xml:space="preserve">Gets the #GdkVisual describing the pixel format of @window.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a #GdkVisual</doc>
          <type name="Visual" c:type="GdkVisual*"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_width" c:identifier="gdk_window_get_width" version="2.24">
        <doc xml:space="preserve">Returns the width of the given @window.

On the X11 platform the returned size is the size reported in the
most-recently-processed configure event, rather than the current
size on the X server.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The width of @window</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_window_type" c:identifier="gdk_window_get_window_type">
        <doc xml:space="preserve">Gets the type of the window. See #GdkWindowType.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">type of window</doc>
          <type name="WindowType" c:type="GdkWindowType"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="has_native" c:identifier="gdk_window_has_native" version="2.22">
        <doc xml:space="preserve">Checks whether the window has a native window or not. Note that
you can use gdk_window_ensure_native() if a native window is needed.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the @window has a native window, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="hide" c:identifier="gdk_window_hide">
        <doc xml:space="preserve">For toplevel windows, withdraws them, so they will no longer be
known to the window manager; for all windows, unmaps them, so
they won&#x2019;t be displayed. Normally done automatically as
part of gtk_widget_hide().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="iconify" c:identifier="gdk_window_iconify">
        <doc xml:space="preserve">Asks to iconify (minimize) @window. The window manager may choose
to ignore the request, but normally will honor it. Using
gtk_window_iconify() is preferred, if you have a #GtkWindow widget.

This function only makes sense when @window is a toplevel window.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a toplevel #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="input_shape_combine_region" c:identifier="gdk_window_input_shape_combine_region" version="2.10">
        <doc xml:space="preserve">Like gdk_window_shape_combine_region(), but the shape applies
only to event handling. Mouse events which happen while
the pointer position corresponds to an unset bit in the
mask will be passed on the window below @window.

An input shape is typically used with RGBA windows.
The alpha channel of the window defines which pixels are
invisible and allows for nicely antialiased borders,
and the input shape controls where the window is
&#x201C;clickable&#x201D;.

On the X11 platform, this requires version 1.1 of the
shape extension.

On the Win32 platform, this functionality is not present and the
function does nothing.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
          <parameter name="shape_region" transfer-ownership="none">
            <doc xml:space="preserve">region of window to be non-transparent</doc>
            <type name="cairo.Region" c:type="const cairo_region_t*"/>
          </parameter>
          <parameter name="offset_x" transfer-ownership="none">
            <doc xml:space="preserve">X position of @shape_region in @window coordinates</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="offset_y" transfer-ownership="none">
            <doc xml:space="preserve">Y position of @shape_region in @window coordinates</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="invalidate_maybe_recurse" c:identifier="gdk_window_invalidate_maybe_recurse">
        <doc xml:space="preserve">Adds @region to the update area for @window. The update area is the
region that needs to be redrawn, or &#x201C;dirty region.&#x201D; The call
gdk_window_process_updates() sends one or more expose events to the
window, which together cover the entire update area. An
application would normally redraw the contents of @window in
response to those expose events.

GDK will call gdk_window_process_all_updates() on your behalf
whenever your program returns to the main loop and becomes idle, so
normally there&#x2019;s no need to do that manually, you just need to
invalidate regions that you know should be redrawn.

The @child_func parameter controls whether the region of
each child window that intersects @region will also be invalidated.
Only children for which @child_func returns #TRUE will have the area
invalidated.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
          <parameter name="region" transfer-ownership="none">
            <doc xml:space="preserve">a #cairo_region_t</doc>
            <type name="cairo.Region" c:type="const cairo_region_t*"/>
          </parameter>
          <parameter name="child_func" transfer-ownership="none" nullable="1" allow-none="1" scope="call" closure="2">
            <doc xml:space="preserve">function to use to decide if to
    recurse to a child, %NULL means never recurse.</doc>
            <type name="WindowChildFunc" c:type="GdkWindowChildFunc"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none" nullable="1" allow-none="1">
            <doc xml:space="preserve">data passed to @child_func</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="invalidate_rect" c:identifier="gdk_window_invalidate_rect">
        <doc xml:space="preserve">A convenience wrapper around gdk_window_invalidate_region() which
invalidates a rectangular region. See
gdk_window_invalidate_region() for details.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
          <parameter name="rect" transfer-ownership="none" nullable="1" allow-none="1">
            <doc xml:space="preserve">rectangle to invalidate or %NULL to invalidate the whole
     window</doc>
            <type name="Rectangle" c:type="const GdkRectangle*"/>
          </parameter>
          <parameter name="invalidate_children" transfer-ownership="none">
            <doc xml:space="preserve">whether to also invalidate child windows</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="invalidate_region" c:identifier="gdk_window_invalidate_region">
        <doc xml:space="preserve">Adds @region to the update area for @window. The update area is the
region that needs to be redrawn, or &#x201C;dirty region.&#x201D; The call
gdk_window_process_updates() sends one or more expose events to the
window, which together cover the entire update area. An
application would normally redraw the contents of @window in
response to those expose events.

GDK will call gdk_window_process_all_updates() on your behalf
whenever your program returns to the main loop and becomes idle, so
normally there&#x2019;s no need to do that manually, you just need to
invalidate regions that you know should be redrawn.

The @invalidate_children parameter controls whether the region of
each child window that intersects @region will also be invalidated.
If %FALSE, then the update area for child windows will remain
unaffected. See gdk_window_invalidate_maybe_recurse if you need
fine grained control over which children are invalidated.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
          <parameter name="region" transfer-ownership="none">
            <doc xml:space="preserve">a #cairo_region_t</doc>
            <type name="cairo.Region" c:type="const cairo_region_t*"/>
          </parameter>
          <parameter name="invalidate_children" transfer-ownership="none">
            <doc xml:space="preserve">%TRUE to also invalidate child windows</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_destroyed" c:identifier="gdk_window_is_destroyed" version="2.18">
        <doc xml:space="preserve">Check to see if a window is destroyed..</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the window is destroyed</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_input_only" c:identifier="gdk_window_is_input_only" version="2.22">
        <doc xml:space="preserve">Determines whether or not the window is an input only window.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if @window is input only</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a toplevel #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_shaped" c:identifier="gdk_window_is_shaped" version="2.22">
        <doc xml:space="preserve">Determines whether or not the window is shaped.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if @window is shaped</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a toplevel #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_viewable" c:identifier="gdk_window_is_viewable">
        <doc xml:space="preserve">Check if the window and all ancestors of the window are
mapped. (This is not necessarily "viewable" in the X sense, since
we only check as far as we have GDK window parents, not to the root
window.)</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the window is viewable</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_visible" c:identifier="gdk_window_is_visible">
        <doc xml:space="preserve">Checks whether the window has been mapped (with gdk_window_show() or
gdk_window_show_unraised()).</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the window is mapped</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="lower" c:identifier="gdk_window_lower">
        <doc xml:space="preserve">Lowers @window to the bottom of the Z-order (stacking order), so that
other windows with the same parent window appear above @window.
This is true whether or not the other windows are visible.

If @window is a toplevel, the window manager may choose to deny the
request to move the window in the Z-order, gdk_window_lower() only
requests the restack, does not guarantee it.

Note that gdk_window_show() raises the window again, so don&#x2019;t call this
function before gdk_window_show(). (Try gdk_window_show_unraised().)</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="mark_paint_from_clip" c:identifier="gdk_window_mark_paint_from_clip" version="3.16">
        <doc xml:space="preserve">If you call this during a paint (e.g. between gdk_window_begin_paint_region()
and gdk_window_end_paint() then GDK will mark the current clip region of the
window as being drawn. This is required when mixing GL rendering via
gdk_cairo_draw_from_gl() and cairo rendering, as otherwise GDK has no way
of knowing when something paints over the GL-drawn regions.

This is typically called automatically by GTK+ and you don't need
to care about this.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
          <parameter name="cr" transfer-ownership="none">
            <doc xml:space="preserve">a #cairo_t</doc>
            <type name="cairo.Context" c:type="cairo_t*"/>
          </parameter>
        </parameters>
      </method>
      <method name="maximize" c:identifier="gdk_window_maximize">
        <doc xml:space="preserve">Maximizes the window. If the window was already maximized, then
this function does nothing.

On X11, asks the window manager to maximize @window, if the window
manager supports this operation. Not all window managers support
this, and some deliberately ignore it or don&#x2019;t have a concept of
&#x201C;maximized&#x201D;; so you can&#x2019;t rely on the maximization actually
happening. But it will happen with most standard window managers,
and GDK makes a best effort to get it to happen.

On Windows, reliably maximizes the window.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a toplevel #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="merge_child_input_shapes" c:identifier="gdk_window_merge_child_input_shapes" version="2.10">
        <doc xml:space="preserve">Merges the input shape masks for any child windows into the
input shape mask for @window. i.e. the union of all input masks
for @window and its children will become the new input mask
for @window. See gdk_window_input_shape_combine_region().

This function is distinct from gdk_window_set_child_input_shapes()
because it includes @window&#x2019;s input shape mask in the set of
shapes to be merged.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="merge_child_shapes" c:identifier="gdk_window_merge_child_shapes">
        <doc xml:space="preserve">Merges the shape masks for any child windows into the
shape mask for @window. i.e. the union of all masks
for @window and its children will become the new mask
for @window. See gdk_window_shape_combine_region().

This function is distinct from gdk_window_set_child_shapes()
because it includes @window&#x2019;s shape mask in the set of shapes to
be merged.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="move" c:identifier="gdk_window_move">
        <doc xml:space="preserve">Repositions a window relative to its parent window.
For toplevel windows, window managers may ignore or modify the move;
you should probably use gtk_window_move() on a #GtkWindow widget
anyway, instead of using GDK functions. For child windows,
the move will reliably succeed.

If you&#x2019;re also planning to resize the window, use gdk_window_move_resize()
to both move and resize simultaneously, for a nicer visual effect.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">X coordinate relative to window&#x2019;s parent</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve">Y coordinate relative to window&#x2019;s parent</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="move_region" c:identifier="gdk_window_move_region" version="2.8">
        <doc xml:space="preserve">Move the part of @window indicated by @region by @dy pixels in the Y
direction and @dx pixels in the X direction. The portions of @region
that not covered by the new position of @region are invalidated.

Child windows are not moved.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
          <parameter name="region" transfer-ownership="none">
            <doc xml:space="preserve">The #cairo_region_t to move</doc>
            <type name="cairo.Region" c:type="const cairo_region_t*"/>
          </parameter>
          <parameter name="dx" transfer-ownership="none">
            <doc xml:space="preserve">Amount to move in the X direction</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="dy" transfer-ownership="none">
            <doc xml:space="preserve">Amount to move in the Y direction</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="move_resize" c:identifier="gdk_window_move_resize">
        <doc xml:space="preserve">Equivalent to calling gdk_window_move() and gdk_window_resize(),
except that both operations are performed at once, avoiding strange
visual effects. (i.e. the user may be able to see the window first
move, then resize, if you don&#x2019;t use gdk_window_move_resize().)</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">new X position relative to window&#x2019;s parent</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve">new Y position relative to window&#x2019;s parent</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:space="preserve">new width</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:space="preserve">new height</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="move_to_rect" c:identifier="gdk_window_move_to_rect" version="3.24">
        <doc xml:space="preserve">Moves @window to @rect, aligning their anchor points.

@rect is relative to the top-left corner of the window that @window is
transient for. @rect_anchor and @window_anchor determine anchor points on
@rect and @window to pin together. @rect's anchor point can optionally be
offset by @rect_anchor_dx and @rect_anchor_dy, which is equivalent to
offsetting the position of @window.

@anchor_hints determines how @window will be moved if the anchor points cause
it to move off-screen. For example, %GDK_ANCHOR_FLIP_X will replace
%GDK_GRAVITY_NORTH_WEST with %GDK_GRAVITY_NORTH_EAST and vice versa if
@window extends beyond the left or right edges of the monitor.

Connect to the #GdkWindow::moved-to-rect signal to find out how it was
actually positioned.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">the #GdkWindow to move</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
          <parameter name="rect" transfer-ownership="none">
            <doc xml:space="preserve">the destination #GdkRectangle to align @window with</doc>
            <type name="Rectangle" c:type="const GdkRectangle*"/>
          </parameter>
          <parameter name="rect_anchor" transfer-ownership="none">
            <doc xml:space="preserve">the point on @rect to align with @window's anchor point</doc>
            <type name="Gravity" c:type="GdkGravity"/>
          </parameter>
          <parameter name="window_anchor" transfer-ownership="none">
            <doc xml:space="preserve">the point on @window to align with @rect's anchor point</doc>
            <type name="Gravity" c:type="GdkGravity"/>
          </parameter>
          <parameter name="anchor_hints" transfer-ownership="none">
            <doc xml:space="preserve">positioning hints to use when limited on space</doc>
            <type name="AnchorHints" c:type="GdkAnchorHints"/>
          </parameter>
          <parameter name="rect_anchor_dx" transfer-ownership="none">
            <doc xml:space="preserve">horizontal offset to shift @window, i.e. @rect's anchor
                 point</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="rect_anchor_dy" transfer-ownership="none">
            <doc xml:space="preserve">vertical offset to shift @window, i.e. @rect's anchor point</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="peek_children" c:identifier="gdk_window_peek_children">
        <doc xml:space="preserve">Like gdk_window_get_children(), but does not copy the list of
children, so the list does not need to be freed.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">
    a reference to the list of child windows in @window</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Window"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="process_updates" c:identifier="gdk_window_process_updates" deprecated="1" deprecated-version="3.22">
        <doc xml:space="preserve">Sends one or more expose events to @window. The areas in each
expose event will cover the entire update area for the window (see
gdk_window_invalidate_region() for details). Normally GDK calls
gdk_window_process_all_updates() on your behalf, so there&#x2019;s no
need to call this function unless you want to force expose events
to be delivered immediately and synchronously (vs. the usual
case, where GDK delivers them in an idle handler). Occasionally
this is useful to produce nicer scrolling behavior, for example.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
          <parameter name="update_children" transfer-ownership="none">
            <doc xml:space="preserve">whether to also process updates for child windows</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="raise" c:identifier="gdk_window_raise">
        <doc xml:space="preserve">Raises @window to the top of the Z-order (stacking order), so that
other windows with the same parent window appear below @window.
This is true whether or not the windows are visible.

If @window is a toplevel, the window manager may choose to deny the
request to move the window in the Z-order, gdk_window_raise() only
requests the restack, does not guarantee it.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="register_dnd" c:identifier="gdk_window_register_dnd">
        <doc xml:space="preserve">Registers a window as a potential drop destination.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkWindow.</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="remove_filter" c:identifier="gdk_window_remove_filter" introspectable="0">
        <doc xml:space="preserve">Remove a filter previously added with gdk_window_add_filter().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
          <parameter name="function" transfer-ownership="none" closure="1">
            <doc xml:space="preserve">previously-added filter function</doc>
            <type name="FilterFunc" c:type="GdkFilterFunc"/>
          </parameter>
          <parameter name="data" transfer-ownership="none" nullable="1" allow-none="1">
            <doc xml:space="preserve">user data for previously-added filter function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="reparent" c:identifier="gdk_window_reparent">
        <doc xml:space="preserve">Reparents @window into the given @new_parent. The window being
reparented will be unmapped as a side effect.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
          <parameter name="new_parent" transfer-ownership="none">
            <doc xml:space="preserve">new parent to move @window into</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">X location inside the new parent</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve">Y location inside the new parent</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="resize" c:identifier="gdk_window_resize">
        <doc xml:space="preserve">Resizes @window; for toplevel windows, asks the window manager to resize
the window. The window manager may not allow the resize. When using GTK+,
use gtk_window_resize() instead of this low-level GDK function.

Windows may not be resized below 1x1.

If you&#x2019;re also planning to move the window, use gdk_window_move_resize()
to both move and resize simultaneously, for a nicer visual effect.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:space="preserve">new width of the window</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:space="preserve">new height of the window</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="restack" c:identifier="gdk_window_restack" version="2.18">
        <doc xml:space="preserve">Changes the position of  @window in the Z-order (stacking order), so that
it is above @sibling (if @above is %TRUE) or below @sibling (if @above is
%FALSE).

If @sibling is %NULL, then this either raises (if @above is %TRUE) or
lowers the window.

If @window is a toplevel, the window manager may choose to deny the
request to move the window in the Z-order, gdk_window_restack() only
requests the restack, does not guarantee it.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
          <parameter name="sibling" transfer-ownership="none" nullable="1" allow-none="1">
            <doc xml:space="preserve">a #GdkWindow that is a sibling of @window, or %NULL</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </parameter>
          <parameter name="above" transfer-ownership="none">
            <doc xml:space="preserve">a boolean</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="scroll" c:identifier="gdk_window_scroll">
        <doc xml:space="preserve">Scroll the contents of @window, both pixels and children, by the
given amount. @window itself does not move. Portions of the window
that the scroll operation brings in from offscreen areas are
invalidated. The invalidated region may be bigger than what would
strictly be necessary.

For X11, a minimum area will be invalidated if the window has no
subwindows, or if the edges of the window&#x2019;s parent do not extend
beyond the edges of the window. In other cases, a multi-step process
is used to scroll the window which may produce temporary visual
artifacts and unnecessary invalidations.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
          <parameter name="dx" transfer-ownership="none">
            <doc xml:space="preserve">Amount to scroll in the X direction</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="dy" transfer-ownership="none">
            <doc xml:space="preserve">Amount to scroll in the Y direction</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_accept_focus" c:identifier="gdk_window_set_accept_focus" version="2.4">
        <doc xml:space="preserve">Setting @accept_focus to %FALSE hints the desktop environment that the
window doesn&#x2019;t want to receive input focus.

On X, it is the responsibility of the window manager to interpret this
hint. ICCCM-compliant window manager usually respect it.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a toplevel #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
          <parameter name="accept_focus" transfer-ownership="none">
            <doc xml:space="preserve">%TRUE if the window should receive input focus</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_background" c:identifier="gdk_window_set_background" deprecated="1" deprecated-version="3.4">
        <doc xml:space="preserve">Sets the background color of @window.

However, when using GTK+, influence the background of a widget
using a style class or CSS &#x2014; if you&#x2019;re an application &#x2014; or with
gtk_style_context_set_background() &#x2014; if you're implementing a
custom widget.</doc>
        <doc-deprecated xml:space="preserve">Don't use this function</doc-deprecated>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
          <parameter name="color" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkColor</doc>
            <type name="Color" c:type="const GdkColor*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_background_pattern" c:identifier="gdk_window_set_background_pattern" deprecated="1" deprecated-version="3.22">
        <doc xml:space="preserve">Sets the background of @window.

A background of %NULL means that the window won't have any background. On the
X11 backend it's also possible to inherit the background from the parent
window using gdk_x11_get_parent_relative_pattern().

The windowing system will normally fill a window with its background
when the window is obscured then exposed.</doc>
        <doc-deprecated xml:space="preserve">Don't use this function</doc-deprecated>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
          <parameter name="pattern" transfer-ownership="none" nullable="1" allow-none="1">
            <doc xml:space="preserve">a pattern to use, or %NULL</doc>
            <type name="cairo.Pattern" c:type="cairo_pattern_t*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_background_rgba" c:identifier="gdk_window_set_background_rgba" deprecated="1" deprecated-version="3.22">
        <doc xml:space="preserve">Sets the background color of @window.

See also gdk_window_set_background_pattern().</doc>
        <doc-deprecated xml:space="preserve">Don't use this function</doc-deprecated>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
          <parameter name="rgba" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkRGBA color</doc>
            <type name="RGBA" c:type="const GdkRGBA*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_child_input_shapes" c:identifier="gdk_window_set_child_input_shapes" version="2.10">
        <doc xml:space="preserve">Sets the input shape mask of @window to the union of input shape masks
for all children of @window, ignoring the input shape mask of @window
itself. Contrast with gdk_window_merge_child_input_shapes() which includes
the input shape mask of @window in the masks to be merged.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_child_shapes" c:identifier="gdk_window_set_child_shapes">
        <doc xml:space="preserve">Sets the shape mask of @window to the union of shape masks
for all children of @window, ignoring the shape mask of @window
itself. Contrast with gdk_window_merge_child_shapes() which includes
the shape mask of @window in the masks to be merged.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_composited" c:identifier="gdk_window_set_composited" version="2.12" deprecated="1" deprecated-version="3.16">
        <doc xml:space="preserve">Sets a #GdkWindow as composited, or unsets it. Composited
windows do not automatically have their contents drawn to
the screen. Drawing is redirected to an offscreen buffer
and an expose event is emitted on the parent of the composited
window. It is the responsibility of the parent&#x2019;s expose handler
to manually merge the off-screen content onto the screen in
whatever way it sees fit.

It only makes sense for child windows to be composited; see
gdk_window_set_opacity() if you need translucent toplevel
windows.

An additional effect of this call is that the area of this
window is no longer clipped from regions marked for
invalidation on its parent. Draws done on the parent
window are also no longer clipped by the child.

This call is only supported on some systems (currently,
only X11 with new enough Xcomposite and Xdamage extensions).
You must call gdk_display_supports_composite() to check if
setting a window as composited is supported before
attempting to do so.</doc>
        <doc-deprecated xml:space="preserve">Compositing is an outdated technology that
  only ever worked on X11.</doc-deprecated>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
          <parameter name="composited" transfer-ownership="none">
            <doc xml:space="preserve">%TRUE to set the window as composited</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_cursor" c:identifier="gdk_window_set_cursor" glib:set-property="cursor">
        <doc xml:space="preserve">Sets the default mouse pointer for a #GdkWindow.

Note that @cursor must be for the same display as @window.

Use gdk_cursor_new_for_display() or gdk_cursor_new_from_pixbuf() to
create the cursor. To make the cursor invisible, use %GDK_BLANK_CURSOR.
Passing %NULL for the @cursor argument to gdk_window_set_cursor() means
that @window will use the cursor of its parent window. Most windows
should use this default.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
          <parameter name="cursor" transfer-ownership="none" nullable="1" allow-none="1">
            <doc xml:space="preserve">a cursor</doc>
            <type name="Cursor" c:type="GdkCursor*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_decorations" c:identifier="gdk_window_set_decorations">
        <doc xml:space="preserve">&#x201C;Decorations&#x201D; are the features the window manager adds to a toplevel #GdkWindow.
This function sets the traditional Motif window manager hints that tell the
window manager which decorations you would like your window to have.
Usually you should use gtk_window_set_decorated() on a #GtkWindow instead of
using the GDK function directly.

The @decorations argument is the logical OR of the fields in
the #GdkWMDecoration enumeration. If #GDK_DECOR_ALL is included in the
mask, the other bits indicate which decorations should be turned off.
If #GDK_DECOR_ALL is not included, then the other bits indicate
which decorations should be turned on.

Most window managers honor a decorations hint of 0 to disable all decorations,
but very few honor all possible combinations of bits.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a toplevel #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
          <parameter name="decorations" transfer-ownership="none">
            <doc xml:space="preserve">decoration hint mask</doc>
            <type name="WMDecoration" c:type="GdkWMDecoration"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_device_cursor" c:identifier="gdk_window_set_device_cursor" version="3.0">
        <doc xml:space="preserve">Sets a specific #GdkCursor for a given device when it gets inside @window.
Use gdk_cursor_new_for_display() or gdk_cursor_new_from_pixbuf() to create
the cursor. To make the cursor invisible, use %GDK_BLANK_CURSOR. Passing
%NULL for the @cursor argument to gdk_window_set_cursor() means that
@window will use the cursor of its parent window. Most windows should
use this default.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">a master, pointer #GdkDevice</doc>
            <type name="Device" c:type="GdkDevice*"/>
          </parameter>
          <parameter name="cursor" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkCursor</doc>
            <type name="Cursor" c:type="GdkCursor*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_device_events" c:identifier="gdk_window_set_device_events" version="3.0">
        <doc xml:space="preserve">Sets the event mask for a given device (Normally a floating device, not
attached to any visible pointer) to @window. For example, an event mask
including #GDK_BUTTON_PRESS_MASK means the window should report button
press events. The event mask is the bitwise OR of values from the
#GdkEventMask enumeration.

See the [input handling overview][event-masks] for details.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">#GdkDevice to enable events for.</doc>
            <type name="Device" c:type="GdkDevice*"/>
          </parameter>
          <parameter name="event_mask" transfer-ownership="none">
            <doc xml:space="preserve">event mask for @window</doc>
            <type name="EventMask" c:type="GdkEventMask"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_event_compression" c:identifier="gdk_window_set_event_compression" version="3.12">
        <doc xml:space="preserve">Determines whether or not extra unprocessed motion events in
the event queue can be discarded. If %TRUE only the most recent
event will be delivered.

Some types of applications, e.g. paint programs, need to see all
motion events and will benefit from turning off event compression.

By default, event compression is enabled.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
          <parameter name="event_compression" transfer-ownership="none">
            <doc xml:space="preserve">%TRUE if motion events should be compressed</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_events" c:identifier="gdk_window_set_events">
        <doc xml:space="preserve">The event mask for a window determines which events will be reported
for that window from all master input devices. For example, an event mask
including #GDK_BUTTON_PRESS_MASK means the window should report button
press events. The event mask is the bitwise OR of values from the
#GdkEventMask enumeration.

See the [input handling overview][event-masks] for details.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
          <parameter name="event_mask" transfer-ownership="none">
            <doc xml:space="preserve">event mask for @window</doc>
            <type name="EventMask" c:type="GdkEventMask"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_focus_on_map" c:identifier="gdk_window_set_focus_on_map" version="2.6">
        <doc xml:space="preserve">Setting @focus_on_map to %FALSE hints the desktop environment that the
window doesn&#x2019;t want to receive input focus when it is mapped.
focus_on_map should be turned off for windows that aren&#x2019;t triggered
interactively (such as popups from network activity).

On X, it is the responsibility of the window manager to interpret
this hint. Window managers following the freedesktop.org window
manager extension specification should respect it.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a toplevel #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
          <parameter name="focus_on_map" transfer-ownership="none">
            <doc xml:space="preserve">%TRUE if the window should receive input focus when mapped</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_fullscreen_mode" c:identifier="gdk_window_set_fullscreen_mode" version="3.8">
        <doc xml:space="preserve">Specifies whether the @window should span over all monitors (in a multi-head
setup) or only the current monitor when in fullscreen mode.

The @mode argument is from the #GdkFullscreenMode enumeration.
If #GDK_FULLSCREEN_ON_ALL_MONITORS is specified, the fullscreen @window will
span over all monitors from the #GdkScreen.

On X11, searches through the list of monitors from the #GdkScreen the ones
which delimit the 4 edges of the entire #GdkScreen and will ask the window
manager to span the @window over these monitors.

If the XINERAMA extension is not available or not usable, this function
has no effect.

Not all window managers support this, so you can&#x2019;t rely on the fullscreen
window to span over the multiple monitors when #GDK_FULLSCREEN_ON_ALL_MONITORS
is specified.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a toplevel #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
          <parameter name="mode" transfer-ownership="none">
            <doc xml:space="preserve">fullscreen mode</doc>
            <type name="FullscreenMode" c:type="GdkFullscreenMode"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_functions" c:identifier="gdk_window_set_functions">
        <doc xml:space="preserve">Sets hints about the window management functions to make available
via buttons on the window frame.

On the X backend, this function sets the traditional Motif window
manager hint for this purpose. However, few window managers do
anything reliable or interesting with this hint. Many ignore it
entirely.

The @functions argument is the logical OR of values from the
#GdkWMFunction enumeration. If the bitmask includes #GDK_FUNC_ALL,
then the other bits indicate which functions to disable; if
it doesn&#x2019;t include #GDK_FUNC_ALL, it indicates which functions to
enable.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a toplevel #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
          <parameter name="functions" transfer-ownership="none">
            <doc xml:space="preserve">bitmask of operations to allow on @window</doc>
            <type name="WMFunction" c:type="GdkWMFunction"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_geometry_hints" c:identifier="gdk_window_set_geometry_hints">
        <doc xml:space="preserve">Sets the geometry hints for @window. Hints flagged in @geom_mask
are set, hints not flagged in @geom_mask are unset.
To unset all hints, use a @geom_mask of 0 and a @geometry of %NULL.

This function provides hints to the windowing system about
acceptable sizes for a toplevel window. The purpose of
this is to constrain user resizing, but the windowing system
will typically  (but is not required to) also constrain the
current size of the window to the provided values and
constrain programatic resizing via gdk_window_resize() or
gdk_window_move_resize().

Note that on X11, this effect has no effect on windows
of type %GDK_WINDOW_TEMP or windows where override redirect
has been turned on via gdk_window_set_override_redirect()
since these windows are not resizable by the user.

Since you can&#x2019;t count on the windowing system doing the
constraints for programmatic resizes, you should generally
call gdk_window_constrain_size() yourself to determine
appropriate sizes.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a toplevel #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
          <parameter name="geometry" transfer-ownership="none">
            <doc xml:space="preserve">geometry hints</doc>
            <type name="Geometry" c:type="const GdkGeometry*"/>
          </parameter>
          <parameter name="geom_mask" transfer-ownership="none">
            <doc xml:space="preserve">bitmask indicating fields of @geometry to pay attention to</doc>
            <type name="WindowHints" c:type="GdkWindowHints"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_group" c:identifier="gdk_window_set_group">
        <doc xml:space="preserve">Sets the group leader window for @window. By default,
GDK sets the group leader for all toplevel windows
to a global window implicitly created by GDK. With this function
you can override this default.

The group leader window allows the window manager to distinguish
all windows that belong to a single application. It may for example
allow users to minimize/unminimize all windows belonging to an
application at once. You should only set a non-default group window
if your application pretends to be multiple applications.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a toplevel #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
          <parameter name="leader" transfer-ownership="none" nullable="1" allow-none="1">
            <doc xml:space="preserve">group leader window, or %NULL to restore the default group leader window</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_icon_list" c:identifier="gdk_window_set_icon_list">
        <doc xml:space="preserve">Sets a list of icons for the window. One of these will be used
to represent the window when it has been iconified. The icon is
usually shown in an icon box or some sort of task bar. Which icon
size is shown depends on the window manager. The window manager
can scale the icon  but setting several size icons can give better
image quality since the window manager may only need to scale the
icon by a small amount or not at all.

Note that some platforms don't support window icons.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">The #GdkWindow toplevel window to set the icon of.</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
          <parameter name="pixbufs" transfer-ownership="none">
            <doc xml:space="preserve">
    A list of pixbufs, of different sizes.</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="GdkPixbuf.Pixbuf"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <method name="set_icon_name" c:identifier="gdk_window_set_icon_name">
        <doc xml:space="preserve">Windows may have a name used while minimized, distinct from the
name they display in their titlebar. Most of the time this is a bad
idea from a user interface standpoint. But you can set such a name
with this function, if you like.

After calling this with a non-%NULL @name, calls to gdk_window_set_title()
will not update the icon title.

Using %NULL for @name unsets the icon title; further calls to
gdk_window_set_title() will again update the icon title as well.

Note that some platforms don't support window icons.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a toplevel #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none" nullable="1" allow-none="1">
            <doc xml:space="preserve">name of window while iconified (minimized)</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_invalidate_handler" c:identifier="gdk_window_set_invalidate_handler" version="3.10" introspectable="0">
        <doc xml:space="preserve">Registers an invalidate handler for a specific window. This
will get called whenever a region in the window or its children
is invalidated.

This can be used to record the invalidated region, which is
useful if you are keeping an offscreen copy of some region
and want to keep it up to date. You can also modify the
invalidated region in case you&#x2019;re doing some effect where
e.g. a child widget appears in multiple places.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
          <parameter name="handler" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkWindowInvalidateHandlerFunc callback function</doc>
            <type name="WindowInvalidateHandlerFunc" c:type="GdkWindowInvalidateHandlerFunc"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_keep_above" c:identifier="gdk_window_set_keep_above" version="2.4">
        <doc xml:space="preserve">Set if @window must be kept above other windows. If the
window was already above, then this function does nothing.

On X11, asks the window manager to keep @window above, if the window
manager supports this operation. Not all window managers support
this, and some deliberately ignore it or don&#x2019;t have a concept of
&#x201C;keep above&#x201D;; so you can&#x2019;t rely on the window being kept above.
But it will happen with most standard window managers,
and GDK makes a best effort to get it to happen.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a toplevel #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
          <parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve">whether to keep @window above other windows</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_keep_below" c:identifier="gdk_window_set_keep_below" version="2.4">
        <doc xml:space="preserve">Set if @window must be kept below other windows. If the
window was already below, then this function does nothing.

On X11, asks the window manager to keep @window below, if the window
manager supports this operation. Not all window managers support
this, and some deliberately ignore it or don&#x2019;t have a concept of
&#x201C;keep below&#x201D;; so you can&#x2019;t rely on the window being kept below.
But it will happen with most standard window managers,
and GDK makes a best effort to get it to happen.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a toplevel #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
          <parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve">whether to keep @window below other windows</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_modal_hint" c:identifier="gdk_window_set_modal_hint">
        <doc xml:space="preserve">The application can use this hint to tell the window manager
that a certain window has modal behaviour. The window manager
can use this information to handle modal windows in a special
way.

You should only use this on windows for which you have
previously called gdk_window_set_transient_for()</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">A toplevel #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
          <parameter name="modal" transfer-ownership="none">
            <doc xml:space="preserve">%TRUE if the window is modal, %FALSE otherwise.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_opacity" c:identifier="gdk_window_set_opacity" version="2.12">
        <doc xml:space="preserve">Set @window to render as partially transparent,
with opacity 0 being fully transparent and 1 fully opaque. (Values
of the opacity parameter are clamped to the [0,1] range.)

For toplevel windows this depends on support from the windowing system
that may not always be there. For instance, On X11, this works only on
X screens with a compositing manager running. On Wayland, there is no
per-window opacity value that the compositor would apply. Instead, use
`gdk_window_set_opaque_region (window, NULL)` to tell the compositor
that the entire window is (potentially) non-opaque, and draw your content
with alpha, or use gtk_widget_set_opacity() to set an overall opacity
for your widgets.

For child windows this function only works for non-native windows.

For setting up per-pixel alpha topelevels, see gdk_screen_get_rgba_visual(),
and for non-toplevels, see gdk_window_set_composited().

Support for non-toplevel windows was added in 3.8.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a top-level or non-native #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
          <parameter name="opacity" transfer-ownership="none">
            <doc xml:space="preserve">opacity</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_opaque_region" c:identifier="gdk_window_set_opaque_region" version="3.10">
        <doc xml:space="preserve">For optimisation purposes, compositing window managers may
like to not draw obscured regions of windows, or turn off blending
during for these regions. With RGB windows with no transparency,
this is just the shape of the window, but with ARGB32 windows, the
compositor does not know what regions of the window are transparent
or not.

This function only works for toplevel windows.

GTK+ will update this property automatically if
the @window background is opaque, as we know where the opaque regions
are. If your window background is not opaque, please update this
property in your #GtkWidget::style-updated handler.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a top-level or non-native #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
          <parameter name="region" transfer-ownership="none" nullable="1" allow-none="1">
            <doc xml:space="preserve">a region, or %NULL</doc>
            <type name="cairo.Region" c:type="cairo_region_t*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_override_redirect" c:identifier="gdk_window_set_override_redirect">
        <doc xml:space="preserve">An override redirect window is not under the control of the window manager.
This means it won&#x2019;t have a titlebar, won&#x2019;t be minimizable, etc. - it will
be entirely under the control of the application. The window manager
can&#x2019;t see the override redirect window at all.

Override redirect should only be used for short-lived temporary
windows, such as popup menus. #GtkMenu uses an override redirect
window in its implementation, for example.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a toplevel #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
          <parameter name="override_redirect" transfer-ownership="none">
            <doc xml:space="preserve">%TRUE if window should be override redirect</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_pass_through" c:identifier="gdk_window_set_pass_through" version="3.18">
        <doc xml:space="preserve">Sets whether input to the window is passed through to the window
below.

The default value of this is %FALSE, which means that pointer
events that happen inside the window are send first to the window,
but if the event is not selected by the event mask then the event
is sent to the parent window, and so on up the hierarchy.

If @pass_through is %TRUE then such pointer events happen as if the
window wasn't there at all, and thus will be sent first to any
windows below @window. This is useful if the window is used in a
transparent fashion. In the terminology of the web this would be called
"pointer-events: none".

Note that a window with @pass_through %TRUE can still have a subwindow
without pass through, so you can get events on a subset of a window. And in
that cases you would get the in-between related events such as the pointer
enter/leave events on its way to the destination window.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
          <parameter name="pass_through" transfer-ownership="none">
            <doc xml:space="preserve">a boolean</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_role" c:identifier="gdk_window_set_role">
        <doc xml:space="preserve">When using GTK+, typically you should use gtk_window_set_role() instead
of this low-level function.

The window manager and session manager use a window&#x2019;s role to
distinguish it from other kinds of window in the same application.
When an application is restarted after being saved in a previous
session, all windows with the same title and role are treated as
interchangeable.  So if you have two windows with the same title
that should be distinguished for session management purposes, you
should set the role on those windows. It doesn&#x2019;t matter what string
you use for the role, as long as you have a different role for each
non-interchangeable kind of window.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a toplevel #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
          <parameter name="role" transfer-ownership="none">
            <doc xml:space="preserve">a string indicating its role</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_shadow_width" c:identifier="gdk_window_set_shadow_width" version="3.12">
        <doc xml:space="preserve">Newer GTK+ windows using client-side decorations use extra geometry
around their frames for effects like shadows and invisible borders.
Window managers that want to maximize windows or snap to edges need
to know where the extents of the actual frame lie, so that users
don&#x2019;t feel like windows are snapping against random invisible edges.

Note that this property is automatically updated by GTK+, so this
function should only be used by applications which do not use GTK+
to create toplevel windows.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
          <parameter name="left" transfer-ownership="none">
            <doc xml:space="preserve">The left extent</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="right" transfer-ownership="none">
            <doc xml:space="preserve">The right extent</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="top" transfer-ownership="none">
            <doc xml:space="preserve">The top extent</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="bottom" transfer-ownership="none">
            <doc xml:space="preserve">The bottom extent</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_skip_pager_hint" c:identifier="gdk_window_set_skip_pager_hint" version="2.2">
        <doc xml:space="preserve">Toggles whether a window should appear in a pager (workspace
switcher, or other desktop utility program that displays a small
thumbnail representation of the windows on the desktop). If a
window&#x2019;s semantic type as specified with gdk_window_set_type_hint()
already fully describes the window, this function should
not be called in addition, instead you should
allow the window to be treated according to standard policy for
its semantic type.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a toplevel #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
          <parameter name="skips_pager" transfer-ownership="none">
            <doc xml:space="preserve">%TRUE to skip the pager</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_skip_taskbar_hint" c:identifier="gdk_window_set_skip_taskbar_hint" version="2.2">
        <doc xml:space="preserve">Toggles whether a window should appear in a task list or window
list. If a window&#x2019;s semantic type as specified with
gdk_window_set_type_hint() already fully describes the window, this
function should not be called in addition,
instead you should allow the window to be treated according to
standard policy for its semantic type.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a toplevel #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
          <parameter name="skips_taskbar" transfer-ownership="none">
            <doc xml:space="preserve">%TRUE to skip the taskbar</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_source_events" c:identifier="gdk_window_set_source_events" version="3.0">
        <doc xml:space="preserve">Sets the event mask for any floating device (i.e. not attached to any
visible pointer) that has the source defined as @source. This event
mask will be applied both to currently existing, newly added devices
after this call, and devices being attached/detached.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
          <parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkInputSource to define the source class.</doc>
            <type name="InputSource" c:type="GdkInputSource"/>
          </parameter>
          <parameter name="event_mask" transfer-ownership="none">
            <doc xml:space="preserve">event mask for @window</doc>
            <type name="EventMask" c:type="GdkEventMask"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_startup_id" c:identifier="gdk_window_set_startup_id" version="2.12">
        <doc xml:space="preserve">When using GTK+, typically you should use gtk_window_set_startup_id()
instead of this low-level function.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a toplevel #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
          <parameter name="startup_id" transfer-ownership="none">
            <doc xml:space="preserve">a string with startup-notification identifier</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_static_gravities" c:identifier="gdk_window_set_static_gravities" deprecated="1" deprecated-version="3.16">
        <doc xml:space="preserve">Used to set the bit gravity of the given window to static, and flag
it so all children get static subwindow gravity. This is used if you
are implementing scary features that involve deep knowledge of the
windowing system. Don&#x2019;t worry about it.</doc>
        <doc-deprecated xml:space="preserve">static gravities haven't worked on anything but X11
  for a long time.</doc-deprecated>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%FALSE</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
          <parameter name="use_static" transfer-ownership="none">
            <doc xml:space="preserve">%TRUE to turn on static gravity</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_support_multidevice" c:identifier="gdk_window_set_support_multidevice" version="3.0">
        <doc xml:space="preserve">This function will enable multidevice features in @window.

Multidevice aware windows will need to handle properly multiple,
per device enter/leave events, device grabs and grab ownerships.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkWindow.</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
          <parameter name="support_multidevice" transfer-ownership="none">
            <doc xml:space="preserve">%TRUE to enable multidevice support in @window.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_title" c:identifier="gdk_window_set_title">
        <doc xml:space="preserve">Sets the title of a toplevel window, to be displayed in the titlebar.
If you haven&#x2019;t explicitly set the icon name for the window
(using gdk_window_set_icon_name()), the icon name will be set to
@title as well. @title must be in UTF-8 encoding (as with all
user-readable strings in GDK/GTK+). @title may not be %NULL.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a toplevel #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
          <parameter name="title" transfer-ownership="none">
            <doc xml:space="preserve">title of @window</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_transient_for" c:identifier="gdk_window_set_transient_for">
        <doc xml:space="preserve">Indicates to the window manager that @window is a transient dialog
associated with the application window @parent. This allows the
window manager to do things like center @window on @parent and
keep @window above @parent.

See gtk_window_set_transient_for() if you&#x2019;re using #GtkWindow or
#GtkDialog.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a toplevel #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
          <parameter name="parent" transfer-ownership="none">
            <doc xml:space="preserve">another toplevel #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_type_hint" c:identifier="gdk_window_set_type_hint">
        <doc xml:space="preserve">The application can use this call to provide a hint to the window
manager about the functionality of a window. The window manager
can use this information when determining the decoration and behaviour
of the window.

The hint must be set before the window is mapped.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">A toplevel #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
          <parameter name="hint" transfer-ownership="none">
            <doc xml:space="preserve">A hint of the function this window will have</doc>
            <type name="WindowTypeHint" c:type="GdkWindowTypeHint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_urgency_hint" c:identifier="gdk_window_set_urgency_hint" version="2.8">
        <doc xml:space="preserve">Toggles whether a window needs the user's
urgent attention.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a toplevel #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
          <parameter name="urgent" transfer-ownership="none">
            <doc xml:space="preserve">%TRUE if the window is urgent</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_user_data" c:identifier="gdk_window_set_user_data">
        <doc xml:space="preserve">For most purposes this function is deprecated in favor of
g_object_set_data(). However, for historical reasons GTK+ stores
the #GtkWidget that owns a #GdkWindow as user data on the
#GdkWindow. So, custom widget implementations should use
this function for that. If GTK+ receives an event for a #GdkWindow,
and the user data for the window is non-%NULL, GTK+ will assume the
user data is a #GtkWidget, and forward the event to that widget.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
          <parameter name="user_data" transfer-ownership="none" nullable="1" allow-none="1">
            <doc xml:space="preserve">user data</doc>
            <type name="GObject.Object" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="shape_combine_region" c:identifier="gdk_window_shape_combine_region">
        <doc xml:space="preserve">Makes pixels in @window outside @shape_region be transparent,
so that the window may be nonrectangular.

If @shape_region is %NULL, the shape will be unset, so the whole
window will be opaque again. @offset_x and @offset_y are ignored
if @shape_region is %NULL.

On the X11 platform, this uses an X server extension which is
widely available on most common platforms, but not available on
very old X servers, and occasionally the implementation will be
buggy. On servers without the shape extension, this function
will do nothing.

This function works on both toplevel and child windows.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
          <parameter name="shape_region" transfer-ownership="none" nullable="1" allow-none="1">
            <doc xml:space="preserve">region of window to be non-transparent</doc>
            <type name="cairo.Region" c:type="const cairo_region_t*"/>
          </parameter>
          <parameter name="offset_x" transfer-ownership="none">
            <doc xml:space="preserve">X position of @shape_region in @window coordinates</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="offset_y" transfer-ownership="none">
            <doc xml:space="preserve">Y position of @shape_region in @window coordinates</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="show" c:identifier="gdk_window_show">
        <doc xml:space="preserve">Like gdk_window_show_unraised(), but also raises the window to the
top of the window stack (moves the window to the front of the
Z-order).

This function maps a window so it&#x2019;s visible onscreen. Its opposite
is gdk_window_hide().

When implementing a #GtkWidget, you should call this function on the widget's
#GdkWindow as part of the &#x201C;map&#x201D; method.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="show_unraised" c:identifier="gdk_window_show_unraised">
        <doc xml:space="preserve">Shows a #GdkWindow onscreen, but does not modify its stacking
order. In contrast, gdk_window_show() will raise the window
to the top of the window stack.

On the X11 platform, in Xlib terms, this function calls
XMapWindow() (it also updates some internal GDK state, which means
that you can&#x2019;t really use XMapWindow() directly on a GDK window).</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="show_window_menu" c:identifier="gdk_window_show_window_menu" version="3.14">
        <doc xml:space="preserve">Asks the windowing system to show the window menu. The window menu
is the menu shown when right-clicking the titlebar on traditional
windows managed by the window manager. This is useful for windows
using client-side decorations, activating it with a right-click
on the window decorations.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the window menu was shown and %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
          <parameter name="event" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkEvent to show the menu for</doc>
            <type name="Event" c:type="GdkEvent*"/>
          </parameter>
        </parameters>
      </method>
      <method name="stick" c:identifier="gdk_window_stick">
        <doc xml:space="preserve">&#x201C;Pins&#x201D; a window such that it&#x2019;s on all workspaces and does not scroll
with viewports, for window managers that have scrollable viewports.
(When using #GtkWindow, gtk_window_stick() may be more useful.)

On the X11 platform, this function depends on window manager
support, so may have no effect with many window managers. However,
GDK will do the best it can to convince the window manager to stick
the window. For window managers that don&#x2019;t support this operation,
there&#x2019;s nothing you can do to force it to happen.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a toplevel #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="thaw_toplevel_updates_libgtk_only" c:identifier="gdk_window_thaw_toplevel_updates_libgtk_only" deprecated="1" deprecated-version="3.16">
        <doc xml:space="preserve">Thaws a window frozen with
gdk_window_freeze_toplevel_updates_libgtk_only().

This function is not part of the GDK public API and is only
for use by GTK+.</doc>
        <doc-deprecated xml:space="preserve">This symbol was never meant to be used outside of GTK+</doc-deprecated>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="thaw_updates" c:identifier="gdk_window_thaw_updates">
        <doc xml:space="preserve">Thaws a window frozen with gdk_window_freeze_updates().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="unfullscreen" c:identifier="gdk_window_unfullscreen" version="2.2">
        <doc xml:space="preserve">Moves the window out of fullscreen mode. If the window was not
fullscreen, does nothing.

On X11, asks the window manager to move @window out of the fullscreen
state, if the window manager supports this operation. Not all
window managers support this, and some deliberately ignore it or
don&#x2019;t have a concept of &#x201C;fullscreen&#x201D;; so you can&#x2019;t rely on the
unfullscreenification actually happening. But it will happen with
most standard window managers, and GDK makes a best effort to get
it to happen.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a toplevel #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="unmaximize" c:identifier="gdk_window_unmaximize">
        <doc xml:space="preserve">Unmaximizes the window. If the window wasn&#x2019;t maximized, then this
function does nothing.

On X11, asks the window manager to unmaximize @window, if the
window manager supports this operation. Not all window managers
support this, and some deliberately ignore it or don&#x2019;t have a
concept of &#x201C;maximized&#x201D;; so you can&#x2019;t rely on the unmaximization
actually happening. But it will happen with most standard window
managers, and GDK makes a best effort to get it to happen.

On Windows, reliably unmaximizes the window.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a toplevel #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="unstick" c:identifier="gdk_window_unstick">
        <doc xml:space="preserve">Reverse operation for gdk_window_stick(); see gdk_window_stick(),
and gtk_window_unstick().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a toplevel #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="withdraw" c:identifier="gdk_window_withdraw">
        <doc xml:space="preserve">Withdraws a window (unmaps it and asks the window manager to forget about it).
This function is not really useful as gdk_window_hide() automatically
withdraws toplevel windows before hiding them.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a toplevel #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="cursor" version="2.18" writable="1" transfer-ownership="none" setter="set_cursor" getter="get_cursor">
        <doc xml:space="preserve">The mouse pointer for a #GdkWindow. See gdk_window_set_cursor() and
gdk_window_get_cursor() for details.</doc>
        <type name="Cursor"/>
      </property>
      <glib:signal name="create-surface" when="last" version="3.0">
        <doc xml:space="preserve">The ::create-surface signal is emitted when an offscreen window
needs its surface (re)created, which happens either when the
window is first drawn to, or when the window is being
resized. The first signal handler that returns a non-%NULL
surface will stop any further signal emission, and its surface
will be used.

Note that it is not possible to access the window's previous
surface from within any callback of this signal. Calling
gdk_offscreen_window_get_surface() will lead to a crash.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the newly created #cairo_surface_t for the offscreen window</doc>
          <type name="cairo.Surface"/>
        </return-value>
        <parameters>
          <parameter name="width" transfer-ownership="none">
            <doc xml:space="preserve">the width of the offscreen surface to create</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:space="preserve">the height of the offscreen surface to create</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="from-embedder" when="last" version="2.18">
        <doc xml:space="preserve">The ::from-embedder signal is emitted to translate coordinates
in the embedder of an offscreen window to the offscreen window.

See also #GdkWindow::to-embedder.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="embedder_x" transfer-ownership="none">
            <doc xml:space="preserve">x coordinate in the embedder window</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="embedder_y" transfer-ownership="none">
            <doc xml:space="preserve">y coordinate in the embedder window</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="offscreen_x" direction="out" caller-allocates="0" transfer-ownership="full">
            <doc xml:space="preserve">return location for the x
    coordinate in the offscreen window</doc>
            <type name="gdouble" c:type="gpointer"/>
          </parameter>
          <parameter name="offscreen_y" direction="out" caller-allocates="0" transfer-ownership="full">
            <doc xml:space="preserve">return location for the y
    coordinate in the offscreen window</doc>
            <type name="gdouble" c:type="gpointer"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="moved-to-rect" when="first" version="3.22" stability="Private">
        <doc xml:space="preserve">Emitted when the position of @window is finalized after being moved to a
destination rectangle.

@window might be flipped over the destination rectangle in order to keep
it on-screen, in which case @flipped_x and @flipped_y will be set to %TRUE
accordingly.

@flipped_rect is the ideal position of @window after any possible
flipping, but before any possible sliding. @final_rect is @flipped_rect,
but possibly translated in the case that flipping is still ineffective in
keeping @window on-screen.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="flipped_rect" transfer-ownership="none" nullable="1" allow-none="1">
            <doc xml:space="preserve">the position of @window after any possible
               flipping or %NULL if the backend can't obtain it</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="final_rect" transfer-ownership="none" nullable="1" allow-none="1">
            <doc xml:space="preserve">the final position of @window or %NULL if the
             backend can't obtain it</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="flipped_x" transfer-ownership="none">
            <doc xml:space="preserve">%TRUE if the anchors were flipped horizontally</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="flipped_y" transfer-ownership="none">
            <doc xml:space="preserve">%TRUE if the anchors were flipped vertically</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="pick-embedded-child" when="last" version="2.18">
        <doc xml:space="preserve">The ::pick-embedded-child signal is emitted to find an embedded
child at the given position.</doc>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">the #GdkWindow of the
    embedded child at @x, @y, or %NULL</doc>
          <type name="Window"/>
        </return-value>
        <parameters>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">x coordinate in the window</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve">y coordinate in the window</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="to-embedder" when="last" version="2.18">
        <doc xml:space="preserve">The ::to-embedder signal is emitted to translate coordinates
in an offscreen window to its embedder.

See also #GdkWindow::from-embedder.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="offscreen_x" transfer-ownership="none">
            <doc xml:space="preserve">x coordinate in the offscreen window</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="offscreen_y" transfer-ownership="none">
            <doc xml:space="preserve">y coordinate in the offscreen window</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="embedder_x" direction="out" caller-allocates="0" transfer-ownership="full">
            <doc xml:space="preserve">return location for the x
    coordinate in the embedder window</doc>
            <type name="gdouble" c:type="gpointer"/>
          </parameter>
          <parameter name="embedder_y" direction="out" caller-allocates="0" transfer-ownership="full">
            <doc xml:space="preserve">return location for the y
    coordinate in the embedder window</doc>
            <type name="gdouble" c:type="gpointer"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="WindowAttr" c:type="GdkWindowAttr">
      <doc xml:space="preserve">Attributes to use for a newly-created window.</doc>
      <field name="title" writable="1">
        <doc xml:space="preserve">title of the window (for toplevel windows)</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="event_mask" writable="1">
        <doc xml:space="preserve">event mask (see gdk_window_set_events())</doc>
        <type name="gint" c:type="gint"/>
      </field>
      <field name="x" writable="1">
        <doc xml:space="preserve">X coordinate relative to parent window (see gdk_window_move())</doc>
        <type name="gint" c:type="gint"/>
      </field>
      <field name="y" writable="1">
        <doc xml:space="preserve">Y coordinate relative to parent window (see gdk_window_move())</doc>
        <type name="gint" c:type="gint"/>
      </field>
      <field name="width" writable="1">
        <doc xml:space="preserve">width of window</doc>
        <type name="gint" c:type="gint"/>
      </field>
      <field name="height" writable="1">
        <doc xml:space="preserve">height of window</doc>
        <type name="gint" c:type="gint"/>
      </field>
      <field name="wclass" writable="1">
        <doc xml:space="preserve">#GDK_INPUT_OUTPUT (normal window) or #GDK_INPUT_ONLY (invisible
 window that receives events)</doc>
        <type name="WindowWindowClass" c:type="GdkWindowWindowClass"/>
      </field>
      <field name="visual" writable="1">
        <doc xml:space="preserve">#GdkVisual for window</doc>
        <type name="Visual" c:type="GdkVisual*"/>
      </field>
      <field name="window_type" writable="1">
        <doc xml:space="preserve">type of window</doc>
        <type name="WindowType" c:type="GdkWindowType"/>
      </field>
      <field name="cursor" writable="1">
        <doc xml:space="preserve">cursor for the window (see gdk_window_set_cursor())</doc>
        <type name="Cursor" c:type="GdkCursor*"/>
      </field>
      <field name="wmclass_name" writable="1">
        <doc xml:space="preserve">don&#x2019;t use (see gtk_window_set_wmclass())</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="wmclass_class" writable="1">
        <doc xml:space="preserve">don&#x2019;t use (see gtk_window_set_wmclass())</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="override_redirect" writable="1">
        <doc xml:space="preserve">%TRUE to bypass the window manager</doc>
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="type_hint" writable="1">
        <doc xml:space="preserve">a hint of the function of the window</doc>
        <type name="WindowTypeHint" c:type="GdkWindowTypeHint"/>
      </field>
    </record>
    <bitfield name="WindowAttributesType" glib:type-name="GdkWindowAttributesType" glib:get-type="gdk_window_attributes_type_get_type" c:type="GdkWindowAttributesType">
      <doc xml:space="preserve">Used to indicate which fields in the #GdkWindowAttr struct should be honored.
For example, if you filled in the &#x201C;cursor&#x201D; and &#x201C;x&#x201D; fields of #GdkWindowAttr,
pass &#x201C;@GDK_WA_X | @GDK_WA_CURSOR&#x201D; to gdk_window_new(). Fields in
#GdkWindowAttr not covered by a bit in this enum are required; for example,
the @width/@height, @wclass, and @window_type fields are required, they have
no corresponding flag in #GdkWindowAttributesType.</doc>
      <member name="title" value="2" c:identifier="GDK_WA_TITLE" glib:nick="title" glib:name="GDK_WA_TITLE">
        <doc xml:space="preserve">Honor the title field</doc>
      </member>
      <member name="x" value="4" c:identifier="GDK_WA_X" glib:nick="x" glib:name="GDK_WA_X">
        <doc xml:space="preserve">Honor the X coordinate field</doc>
      </member>
      <member name="y" value="8" c:identifier="GDK_WA_Y" glib:nick="y" glib:name="GDK_WA_Y">
        <doc xml:space="preserve">Honor the Y coordinate field</doc>
      </member>
      <member name="cursor" value="16" c:identifier="GDK_WA_CURSOR" glib:nick="cursor" glib:name="GDK_WA_CURSOR">
        <doc xml:space="preserve">Honor the cursor field</doc>
      </member>
      <member name="visual" value="32" c:identifier="GDK_WA_VISUAL" glib:nick="visual" glib:name="GDK_WA_VISUAL">
        <doc xml:space="preserve">Honor the visual field</doc>
      </member>
      <member name="wmclass" value="64" c:identifier="GDK_WA_WMCLASS" glib:nick="wmclass" glib:name="GDK_WA_WMCLASS">
        <doc xml:space="preserve">Honor the wmclass_class and wmclass_name fields</doc>
      </member>
      <member name="noredir" value="128" c:identifier="GDK_WA_NOREDIR" glib:nick="noredir" glib:name="GDK_WA_NOREDIR">
        <doc xml:space="preserve">Honor the override_redirect field</doc>
      </member>
      <member name="type_hint" value="256" c:identifier="GDK_WA_TYPE_HINT" glib:nick="type-hint" glib:name="GDK_WA_TYPE_HINT">
        <doc xml:space="preserve">Honor the type_hint field</doc>
      </member>
    </bitfield>
    <callback name="WindowChildFunc" c:type="GdkWindowChildFunc">
      <doc xml:space="preserve">A function of this type is passed to gdk_window_invalidate_maybe_recurse().
It gets called for each child of the window to determine whether to
recursively invalidate it or now.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">%TRUE to invalidate @window recursively</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="window" transfer-ownership="none">
          <doc xml:space="preserve">a #GdkWindow</doc>
          <type name="Window" c:type="GdkWindow*"/>
        </parameter>
        <parameter name="user_data" transfer-ownership="none" nullable="1" allow-none="1" closure="1">
          <doc xml:space="preserve">user data</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <record name="WindowClass" c:type="GdkWindowClass" glib:is-gtype-struct-for="Window">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="pick_embedded_child" introspectable="0">
        <callback name="pick_embedded_child" introspectable="0">
          <return-value>
            <type name="Window" c:type="GdkWindow*"/>
          </return-value>
          <parameters>
            <parameter name="window" transfer-ownership="none">
              <type name="Window" c:type="GdkWindow*"/>
            </parameter>
            <parameter name="x" transfer-ownership="none">
              <type name="gdouble" c:type="gdouble"/>
            </parameter>
            <parameter name="y" transfer-ownership="none">
              <type name="gdouble" c:type="gdouble"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="to_embedder">
        <callback name="to_embedder">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="window" transfer-ownership="none">
              <type name="Window" c:type="GdkWindow*"/>
            </parameter>
            <parameter name="offscreen_x" transfer-ownership="none">
              <type name="gdouble" c:type="gdouble"/>
            </parameter>
            <parameter name="offscreen_y" transfer-ownership="none">
              <type name="gdouble" c:type="gdouble"/>
            </parameter>
            <parameter name="embedder_x" transfer-ownership="none">
              <type name="gdouble" c:type="gdouble*"/>
            </parameter>
            <parameter name="embedder_y" transfer-ownership="none">
              <type name="gdouble" c:type="gdouble*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="from_embedder">
        <callback name="from_embedder">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="window" transfer-ownership="none">
              <type name="Window" c:type="GdkWindow*"/>
            </parameter>
            <parameter name="embedder_x" transfer-ownership="none">
              <type name="gdouble" c:type="gdouble"/>
            </parameter>
            <parameter name="embedder_y" transfer-ownership="none">
              <type name="gdouble" c:type="gdouble"/>
            </parameter>
            <parameter name="offscreen_x" transfer-ownership="none">
              <type name="gdouble" c:type="gdouble*"/>
            </parameter>
            <parameter name="offscreen_y" transfer-ownership="none">
              <type name="gdouble" c:type="gdouble*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="create_surface">
        <callback name="create_surface">
          <return-value transfer-ownership="full">
            <type name="cairo.Surface" c:type="cairo_surface_t*"/>
          </return-value>
          <parameters>
            <parameter name="window" transfer-ownership="none">
              <type name="Window" c:type="GdkWindow*"/>
            </parameter>
            <parameter name="width" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="height" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_gdk_reserved1" introspectable="0">
        <callback name="_gdk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gdk_reserved2" introspectable="0">
        <callback name="_gdk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gdk_reserved3" introspectable="0">
        <callback name="_gdk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gdk_reserved4" introspectable="0">
        <callback name="_gdk_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gdk_reserved5" introspectable="0">
        <callback name="_gdk_reserved5">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gdk_reserved6" introspectable="0">
        <callback name="_gdk_reserved6">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gdk_reserved7" introspectable="0">
        <callback name="_gdk_reserved7">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gdk_reserved8" introspectable="0">
        <callback name="_gdk_reserved8">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <enumeration name="WindowEdge" glib:type-name="GdkWindowEdge" glib:get-type="gdk_window_edge_get_type" c:type="GdkWindowEdge">
      <doc xml:space="preserve">Determines a window edge or corner.</doc>
      <member name="north_west" value="0" c:identifier="GDK_WINDOW_EDGE_NORTH_WEST" glib:nick="north-west" glib:name="GDK_WINDOW_EDGE_NORTH_WEST">
        <doc xml:space="preserve">the top left corner.</doc>
      </member>
      <member name="north" value="1" c:identifier="GDK_WINDOW_EDGE_NORTH" glib:nick="north" glib:name="GDK_WINDOW_EDGE_NORTH">
        <doc xml:space="preserve">the top edge.</doc>
      </member>
      <member name="north_east" value="2" c:identifier="GDK_WINDOW_EDGE_NORTH_EAST" glib:nick="north-east" glib:name="GDK_WINDOW_EDGE_NORTH_EAST">
        <doc xml:space="preserve">the top right corner.</doc>
      </member>
      <member name="west" value="3" c:identifier="GDK_WINDOW_EDGE_WEST" glib:nick="west" glib:name="GDK_WINDOW_EDGE_WEST">
        <doc xml:space="preserve">the left edge.</doc>
      </member>
      <member name="east" value="4" c:identifier="GDK_WINDOW_EDGE_EAST" glib:nick="east" glib:name="GDK_WINDOW_EDGE_EAST">
        <doc xml:space="preserve">the right edge.</doc>
      </member>
      <member name="south_west" value="5" c:identifier="GDK_WINDOW_EDGE_SOUTH_WEST" glib:nick="south-west" glib:name="GDK_WINDOW_EDGE_SOUTH_WEST">
        <doc xml:space="preserve">the lower left corner.</doc>
      </member>
      <member name="south" value="6" c:identifier="GDK_WINDOW_EDGE_SOUTH" glib:nick="south" glib:name="GDK_WINDOW_EDGE_SOUTH">
        <doc xml:space="preserve">the lower edge.</doc>
      </member>
      <member name="south_east" value="7" c:identifier="GDK_WINDOW_EDGE_SOUTH_EAST" glib:nick="south-east" glib:name="GDK_WINDOW_EDGE_SOUTH_EAST">
        <doc xml:space="preserve">the lower right corner.</doc>
      </member>
    </enumeration>
    <bitfield name="WindowHints" glib:type-name="GdkWindowHints" glib:get-type="gdk_window_hints_get_type" c:type="GdkWindowHints">
      <doc xml:space="preserve">Used to indicate which fields of a #GdkGeometry struct should be paid
attention to. Also, the presence/absence of @GDK_HINT_POS,
@GDK_HINT_USER_POS, and @GDK_HINT_USER_SIZE is significant, though they don't
directly refer to #GdkGeometry fields. @GDK_HINT_USER_POS will be set
automatically by #GtkWindow if you call gtk_window_move().
@GDK_HINT_USER_POS and @GDK_HINT_USER_SIZE should be set if the user
specified a size/position using a --geometry command-line argument;
gtk_window_parse_geometry() automatically sets these flags.</doc>
      <member name="pos" value="1" c:identifier="GDK_HINT_POS" glib:nick="pos" glib:name="GDK_HINT_POS">
        <doc xml:space="preserve">indicates that the program has positioned the window</doc>
      </member>
      <member name="min_size" value="2" c:identifier="GDK_HINT_MIN_SIZE" glib:nick="min-size" glib:name="GDK_HINT_MIN_SIZE">
        <doc xml:space="preserve">min size fields are set</doc>
      </member>
      <member name="max_size" value="4" c:identifier="GDK_HINT_MAX_SIZE" glib:nick="max-size" glib:name="GDK_HINT_MAX_SIZE">
        <doc xml:space="preserve">max size fields are set</doc>
      </member>
      <member name="base_size" value="8" c:identifier="GDK_HINT_BASE_SIZE" glib:nick="base-size" glib:name="GDK_HINT_BASE_SIZE">
        <doc xml:space="preserve">base size fields are set</doc>
      </member>
      <member name="aspect" value="16" c:identifier="GDK_HINT_ASPECT" glib:nick="aspect" glib:name="GDK_HINT_ASPECT">
        <doc xml:space="preserve">aspect ratio fields are set</doc>
      </member>
      <member name="resize_inc" value="32" c:identifier="GDK_HINT_RESIZE_INC" glib:nick="resize-inc" glib:name="GDK_HINT_RESIZE_INC">
        <doc xml:space="preserve">resize increment fields are set</doc>
      </member>
      <member name="win_gravity" value="64" c:identifier="GDK_HINT_WIN_GRAVITY" glib:nick="win-gravity" glib:name="GDK_HINT_WIN_GRAVITY">
        <doc xml:space="preserve">window gravity field is set</doc>
      </member>
      <member name="user_pos" value="128" c:identifier="GDK_HINT_USER_POS" glib:nick="user-pos" glib:name="GDK_HINT_USER_POS">
        <doc xml:space="preserve">indicates that the window&#x2019;s position was explicitly set
 by the user</doc>
      </member>
      <member name="user_size" value="256" c:identifier="GDK_HINT_USER_SIZE" glib:nick="user-size" glib:name="GDK_HINT_USER_SIZE">
        <doc xml:space="preserve">indicates that the window&#x2019;s size was explicitly set by
 the user</doc>
      </member>
    </bitfield>
    <callback name="WindowInvalidateHandlerFunc" c:type="GdkWindowInvalidateHandlerFunc" version="3.10">
      <doc xml:space="preserve">Whenever some area of the window is invalidated (directly in the
window or in a child window) this gets called with @region in
the coordinate space of @window. You can use @region to just
keep track of the dirty region, or you can actually change
@region in case you are doing display tricks like showing
a child in multiple places.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="window" transfer-ownership="none">
          <doc xml:space="preserve">a #GdkWindow</doc>
          <type name="Window" c:type="GdkWindow*"/>
        </parameter>
        <parameter name="region" transfer-ownership="none">
          <doc xml:space="preserve">a #cairo_region_t</doc>
          <type name="cairo.Region" c:type="cairo_region_t*"/>
        </parameter>
      </parameters>
    </callback>
    <record name="WindowRedirect" c:type="GdkWindowRedirect" disguised="1" opaque="1"/>
    <bitfield name="WindowState" glib:type-name="GdkWindowState" glib:get-type="gdk_window_state_get_type" c:type="GdkWindowState">
      <doc xml:space="preserve">Specifies the state of a toplevel window.</doc>
      <member name="withdrawn" value="1" c:identifier="GDK_WINDOW_STATE_WITHDRAWN" glib:nick="withdrawn" glib:name="GDK_WINDOW_STATE_WITHDRAWN">
        <doc xml:space="preserve">the window is not shown.</doc>
      </member>
      <member name="iconified" value="2" c:identifier="GDK_WINDOW_STATE_ICONIFIED" glib:nick="iconified" glib:name="GDK_WINDOW_STATE_ICONIFIED">
        <doc xml:space="preserve">the window is minimized.</doc>
      </member>
      <member name="maximized" value="4" c:identifier="GDK_WINDOW_STATE_MAXIMIZED" glib:nick="maximized" glib:name="GDK_WINDOW_STATE_MAXIMIZED">
        <doc xml:space="preserve">the window is maximized.</doc>
      </member>
      <member name="sticky" value="8" c:identifier="GDK_WINDOW_STATE_STICKY" glib:nick="sticky" glib:name="GDK_WINDOW_STATE_STICKY">
        <doc xml:space="preserve">the window is sticky.</doc>
      </member>
      <member name="fullscreen" value="16" c:identifier="GDK_WINDOW_STATE_FULLSCREEN" glib:nick="fullscreen" glib:name="GDK_WINDOW_STATE_FULLSCREEN">
        <doc xml:space="preserve">the window is maximized without
  decorations.</doc>
      </member>
      <member name="above" value="32" c:identifier="GDK_WINDOW_STATE_ABOVE" glib:nick="above" glib:name="GDK_WINDOW_STATE_ABOVE">
        <doc xml:space="preserve">the window is kept above other windows.</doc>
      </member>
      <member name="below" value="64" c:identifier="GDK_WINDOW_STATE_BELOW" glib:nick="below" glib:name="GDK_WINDOW_STATE_BELOW">
        <doc xml:space="preserve">the window is kept below other windows.</doc>
      </member>
      <member name="focused" value="128" c:identifier="GDK_WINDOW_STATE_FOCUSED" glib:nick="focused" glib:name="GDK_WINDOW_STATE_FOCUSED">
        <doc xml:space="preserve">the window is presented as focused (with active decorations).</doc>
      </member>
      <member name="tiled" value="256" c:identifier="GDK_WINDOW_STATE_TILED" glib:nick="tiled" glib:name="GDK_WINDOW_STATE_TILED">
        <doc xml:space="preserve">the window is in a tiled state, Since 3.10. Since 3.22.23, this
                         is deprecated in favor of per-edge information.</doc>
      </member>
      <member name="top_tiled" value="512" c:identifier="GDK_WINDOW_STATE_TOP_TILED" glib:nick="top-tiled" glib:name="GDK_WINDOW_STATE_TOP_TILED">
        <doc xml:space="preserve">whether the top edge is tiled, Since 3.22.23</doc>
      </member>
      <member name="top_resizable" value="1024" c:identifier="GDK_WINDOW_STATE_TOP_RESIZABLE" glib:nick="top-resizable" glib:name="GDK_WINDOW_STATE_TOP_RESIZABLE">
        <doc xml:space="preserve">whether the top edge is resizable, Since 3.22.23</doc>
      </member>
      <member name="right_tiled" value="2048" c:identifier="GDK_WINDOW_STATE_RIGHT_TILED" glib:nick="right-tiled" glib:name="GDK_WINDOW_STATE_RIGHT_TILED">
        <doc xml:space="preserve">whether the right edge is tiled, Since 3.22.23</doc>
      </member>
      <member name="right_resizable" value="4096" c:identifier="GDK_WINDOW_STATE_RIGHT_RESIZABLE" glib:nick="right-resizable" glib:name="GDK_WINDOW_STATE_RIGHT_RESIZABLE">
        <doc xml:space="preserve">whether the right edge is resizable, Since 3.22.23</doc>
      </member>
      <member name="bottom_tiled" value="8192" c:identifier="GDK_WINDOW_STATE_BOTTOM_TILED" glib:nick="bottom-tiled" glib:name="GDK_WINDOW_STATE_BOTTOM_TILED">
        <doc xml:space="preserve">whether the bottom edge is tiled, Since 3.22.23</doc>
      </member>
      <member name="bottom_resizable" value="16384" c:identifier="GDK_WINDOW_STATE_BOTTOM_RESIZABLE" glib:nick="bottom-resizable" glib:name="GDK_WINDOW_STATE_BOTTOM_RESIZABLE">
        <doc xml:space="preserve">whether the bottom edge is resizable, Since 3.22.23</doc>
      </member>
      <member name="left_tiled" value="32768" c:identifier="GDK_WINDOW_STATE_LEFT_TILED" glib:nick="left-tiled" glib:name="GDK_WINDOW_STATE_LEFT_TILED">
        <doc xml:space="preserve">whether the left edge is tiled, Since 3.22.23</doc>
      </member>
      <member name="left_resizable" value="65536" c:identifier="GDK_WINDOW_STATE_LEFT_RESIZABLE" glib:nick="left-resizable" glib:name="GDK_WINDOW_STATE_LEFT_RESIZABLE">
        <doc xml:space="preserve">whether the left edge is resizable, Since 3.22.23</doc>
      </member>
    </bitfield>
    <enumeration name="WindowType" glib:type-name="GdkWindowType" glib:get-type="gdk_window_type_get_type" c:type="GdkWindowType">
      <doc xml:space="preserve">Describes the kind of window.</doc>
      <member name="root" value="0" c:identifier="GDK_WINDOW_ROOT" glib:nick="root" glib:name="GDK_WINDOW_ROOT">
        <doc xml:space="preserve">root window; this window has no parent, covers the entire
 screen, and is created by the window system</doc>
      </member>
      <member name="toplevel" value="1" c:identifier="GDK_WINDOW_TOPLEVEL" glib:nick="toplevel" glib:name="GDK_WINDOW_TOPLEVEL">
        <doc xml:space="preserve">toplevel window (used to implement #GtkWindow)</doc>
      </member>
      <member name="child" value="2" c:identifier="GDK_WINDOW_CHILD" glib:nick="child" glib:name="GDK_WINDOW_CHILD">
        <doc xml:space="preserve">child window (used to implement e.g. #GtkEntry)</doc>
      </member>
      <member name="temp" value="3" c:identifier="GDK_WINDOW_TEMP" glib:nick="temp" glib:name="GDK_WINDOW_TEMP">
        <doc xml:space="preserve">override redirect temporary window (used to implement
 #GtkMenu)</doc>
      </member>
      <member name="foreign" value="4" c:identifier="GDK_WINDOW_FOREIGN" glib:nick="foreign" glib:name="GDK_WINDOW_FOREIGN">
        <doc xml:space="preserve">foreign window (see gdk_window_foreign_new())</doc>
      </member>
      <member name="offscreen" value="5" c:identifier="GDK_WINDOW_OFFSCREEN" glib:nick="offscreen" glib:name="GDK_WINDOW_OFFSCREEN">
        <doc xml:space="preserve">offscreen window (see
 [Offscreen Windows][OFFSCREEN-WINDOWS]). Since 2.18</doc>
      </member>
      <member name="subsurface" value="6" c:identifier="GDK_WINDOW_SUBSURFACE" glib:nick="subsurface" glib:name="GDK_WINDOW_SUBSURFACE">
        <doc xml:space="preserve">subsurface-based window; This window is visually
 tied to a toplevel, and is moved/stacked with it. Currently this window
 type is only implemented in Wayland. Since 3.14</doc>
      </member>
    </enumeration>
    <enumeration name="WindowTypeHint" glib:type-name="GdkWindowTypeHint" glib:get-type="gdk_window_type_hint_get_type" c:type="GdkWindowTypeHint">
      <doc xml:space="preserve">These are hints for the window manager that indicate what type of function
the window has. The window manager can use this when determining decoration
and behaviour of the window. The hint must be set before mapping the window.

See the [Extended Window Manager Hints](http://www.freedesktop.org/Standards/wm-spec)
specification for more details about window types.</doc>
      <member name="normal" value="0" c:identifier="GDK_WINDOW_TYPE_HINT_NORMAL" glib:nick="normal" glib:name="GDK_WINDOW_TYPE_HINT_NORMAL">
        <doc xml:space="preserve">Normal toplevel window.</doc>
      </member>
      <member name="dialog" value="1" c:identifier="GDK_WINDOW_TYPE_HINT_DIALOG" glib:nick="dialog" glib:name="GDK_WINDOW_TYPE_HINT_DIALOG">
        <doc xml:space="preserve">Dialog window.</doc>
      </member>
      <member name="menu" value="2" c:identifier="GDK_WINDOW_TYPE_HINT_MENU" glib:nick="menu" glib:name="GDK_WINDOW_TYPE_HINT_MENU">
        <doc xml:space="preserve">Window used to implement a menu; GTK+ uses
 this hint only for torn-off menus, see #GtkTearoffMenuItem.</doc>
      </member>
      <member name="toolbar" value="3" c:identifier="GDK_WINDOW_TYPE_HINT_TOOLBAR" glib:nick="toolbar" glib:name="GDK_WINDOW_TYPE_HINT_TOOLBAR">
        <doc xml:space="preserve">Window used to implement toolbars.</doc>
      </member>
      <member name="splashscreen" value="4" c:identifier="GDK_WINDOW_TYPE_HINT_SPLASHSCREEN" glib:nick="splashscreen" glib:name="GDK_WINDOW_TYPE_HINT_SPLASHSCREEN">
        <doc xml:space="preserve">Window used to display a splash
 screen during application startup.</doc>
      </member>
      <member name="utility" value="5" c:identifier="GDK_WINDOW_TYPE_HINT_UTILITY" glib:nick="utility" glib:name="GDK_WINDOW_TYPE_HINT_UTILITY">
        <doc xml:space="preserve">Utility windows which are not detached
 toolbars or dialogs.</doc>
      </member>
      <member name="dock" value="6" c:identifier="GDK_WINDOW_TYPE_HINT_DOCK" glib:nick="dock" glib:name="GDK_WINDOW_TYPE_HINT_DOCK">
        <doc xml:space="preserve">Used for creating dock or panel windows.</doc>
      </member>
      <member name="desktop" value="7" c:identifier="GDK_WINDOW_TYPE_HINT_DESKTOP" glib:nick="desktop" glib:name="GDK_WINDOW_TYPE_HINT_DESKTOP">
        <doc xml:space="preserve">Used for creating the desktop background
 window.</doc>
      </member>
      <member name="dropdown_menu" value="8" c:identifier="GDK_WINDOW_TYPE_HINT_DROPDOWN_MENU" glib:nick="dropdown-menu" glib:name="GDK_WINDOW_TYPE_HINT_DROPDOWN_MENU">
        <doc xml:space="preserve">A menu that belongs to a menubar.</doc>
      </member>
      <member name="popup_menu" value="9" c:identifier="GDK_WINDOW_TYPE_HINT_POPUP_MENU" glib:nick="popup-menu" glib:name="GDK_WINDOW_TYPE_HINT_POPUP_MENU">
        <doc xml:space="preserve">A menu that does not belong to a menubar,
 e.g. a context menu.</doc>
      </member>
      <member name="tooltip" value="10" c:identifier="GDK_WINDOW_TYPE_HINT_TOOLTIP" glib:nick="tooltip" glib:name="GDK_WINDOW_TYPE_HINT_TOOLTIP">
        <doc xml:space="preserve">A tooltip.</doc>
      </member>
      <member name="notification" value="11" c:identifier="GDK_WINDOW_TYPE_HINT_NOTIFICATION" glib:nick="notification" glib:name="GDK_WINDOW_TYPE_HINT_NOTIFICATION">
        <doc xml:space="preserve">A notification - typically a &#x201C;bubble&#x201D;
 that belongs to a status icon.</doc>
      </member>
      <member name="combo" value="12" c:identifier="GDK_WINDOW_TYPE_HINT_COMBO" glib:nick="combo" glib:name="GDK_WINDOW_TYPE_HINT_COMBO">
        <doc xml:space="preserve">A popup from a combo box.</doc>
      </member>
      <member name="dnd" value="13" c:identifier="GDK_WINDOW_TYPE_HINT_DND" glib:nick="dnd" glib:name="GDK_WINDOW_TYPE_HINT_DND">
        <doc xml:space="preserve">A window that is used to implement a DND cursor.</doc>
      </member>
    </enumeration>
    <enumeration name="WindowWindowClass" glib:type-name="GdkWindowWindowClass" glib:get-type="gdk_window_window_class_get_type" c:type="GdkWindowWindowClass">
      <doc xml:space="preserve">@GDK_INPUT_OUTPUT windows are the standard kind of window you might expect.
Such windows receive events and are also displayed on screen.
@GDK_INPUT_ONLY windows are invisible; they are usually placed above other
windows in order to trap or filter the events. You can&#x2019;t draw on
@GDK_INPUT_ONLY windows.</doc>
      <member name="input_output" value="0" c:identifier="GDK_INPUT_OUTPUT" glib:nick="input-output" glib:name="GDK_INPUT_OUTPUT">
        <doc xml:space="preserve">window for graphics and events</doc>
      </member>
      <member name="input_only" value="1" c:identifier="GDK_INPUT_ONLY" glib:nick="input-only" glib:name="GDK_INPUT_ONLY">
        <doc xml:space="preserve">window for events only</doc>
      </member>
    </enumeration>
    <function name="add_option_entries_libgtk_only" c:identifier="gdk_add_option_entries_libgtk_only" deprecated="1" deprecated-version="3.16">
      <doc xml:space="preserve">Appends gdk option entries to the passed in option group. This is
not public API and must not be used by applications.</doc>
      <doc-deprecated xml:space="preserve">This symbol was never meant to be used outside
  of GTK+</doc-deprecated>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="group" transfer-ownership="none">
          <doc xml:space="preserve">An option group.</doc>
          <type name="GLib.OptionGroup" c:type="GOptionGroup*"/>
        </parameter>
      </parameters>
    </function>
    <function name="atom_intern" c:identifier="gdk_atom_intern" moved-to="Atom.intern">
      <doc xml:space="preserve">Finds or creates an atom corresponding to a given string.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">the atom corresponding to @atom_name.</doc>
        <type name="Atom" c:type="GdkAtom"/>
      </return-value>
      <parameters>
        <parameter name="atom_name" transfer-ownership="none">
          <doc xml:space="preserve">a string.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="only_if_exists" transfer-ownership="none">
          <doc xml:space="preserve">if %TRUE, GDK is allowed to not create a new atom, but
  just return %GDK_NONE if the requested atom doesn&#x2019;t already
  exists. Currently, the flag is ignored, since checking the
  existance of an atom is as expensive as creating it.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="atom_intern_static_string" c:identifier="gdk_atom_intern_static_string" moved-to="Atom.intern_static_string" version="2.10">
      <doc xml:space="preserve">Finds or creates an atom corresponding to a given string.

Note that this function is identical to gdk_atom_intern() except
that if a new #GdkAtom is created the string itself is used rather
than a copy. This saves memory, but can only be used if the string
will always exist. It can be used with statically
allocated strings in the main program, but not with statically
allocated memory in dynamically loaded modules, if you expect to
ever unload the module again (e.g. do not use this function in
GTK+ theme engines).</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">the atom corresponding to @atom_name</doc>
        <type name="Atom" c:type="GdkAtom"/>
      </return-value>
      <parameters>
        <parameter name="atom_name" transfer-ownership="none">
          <doc xml:space="preserve">a static string</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="beep" c:identifier="gdk_beep">
      <doc xml:space="preserve">Emits a short beep on the default display.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="cairo_create" c:identifier="gdk_cairo_create" version="2.8" deprecated="1" deprecated-version="3.22">
      <doc xml:space="preserve">Creates a Cairo context for drawing to @window.

Note that calling cairo_reset_clip() on the resulting #cairo_t will
produce undefined results, so avoid it at all costs.

Typically, this function is used to draw on a #GdkWindow out of the paint
cycle of the toolkit; this should be avoided, as it breaks various assumptions
and optimizations.

If you are drawing on a native #GdkWindow in response to a %GDK_EXPOSE event
you should use gdk_window_begin_draw_frame() and gdk_drawing_context_get_cairo_context()
instead. GTK will automatically do this for you when drawing a widget.</doc>
      <doc-deprecated xml:space="preserve">Use gdk_window_begin_draw_frame() and
  gdk_drawing_context_get_cairo_context() instead</doc-deprecated>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">A newly created Cairo context. Free with
 cairo_destroy() when you are done drawing.</doc>
        <type name="cairo.Context" c:type="cairo_t*"/>
      </return-value>
      <parameters>
        <parameter name="window" transfer-ownership="none">
          <doc xml:space="preserve">a #GdkWindow</doc>
          <type name="Window" c:type="GdkWindow*"/>
        </parameter>
      </parameters>
    </function>
    <function name="cairo_draw_from_gl" c:identifier="gdk_cairo_draw_from_gl" version="3.16">
      <doc xml:space="preserve">This is the main way to draw GL content in GTK+. It takes a render buffer ID
(@source_type == #GL_RENDERBUFFER) or a texture id (@source_type == #GL_TEXTURE)
and draws it onto @cr with an OVER operation, respecting the current clip.
The top left corner of the rectangle specified by @x, @y, @width and @height
will be drawn at the current (0,0) position of the cairo_t.

This will work for *all* cairo_t, as long as @window is realized, but the
fallback implementation that reads back the pixels from the buffer may be
used in the general case. In the case of direct drawing to a window with
no special effects applied to @cr it will however use a more efficient
approach.

For #GL_RENDERBUFFER the code will always fall back to software for buffers
with alpha components, so make sure you use #GL_TEXTURE if using alpha.

Calling this may change the current GL context.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="cr" transfer-ownership="none">
          <doc xml:space="preserve">a cairo context</doc>
          <type name="cairo.Context" c:type="cairo_t*"/>
        </parameter>
        <parameter name="window" transfer-ownership="none">
          <doc xml:space="preserve">The window we're rendering for (not necessarily into)</doc>
          <type name="Window" c:type="GdkWindow*"/>
        </parameter>
        <parameter name="source" transfer-ownership="none">
          <doc xml:space="preserve">The GL ID of the source buffer</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="source_type" transfer-ownership="none">
          <doc xml:space="preserve">The type of the @source</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="buffer_scale" transfer-ownership="none">
          <doc xml:space="preserve">The scale-factor that the @source buffer is allocated for</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="x" transfer-ownership="none">
          <doc xml:space="preserve">The source x position in @source to start copying from in GL coordinates</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="y" transfer-ownership="none">
          <doc xml:space="preserve">The source y position in @source to start copying from in GL coordinates</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="width" transfer-ownership="none">
          <doc xml:space="preserve">The width of the region to draw</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="height" transfer-ownership="none">
          <doc xml:space="preserve">The height of the region to draw</doc>
          <type name="gint" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="cairo_get_clip_rectangle" c:identifier="gdk_cairo_get_clip_rectangle">
      <doc xml:space="preserve">This is a convenience function around cairo_clip_extents().
It rounds the clip extents to integer coordinates and returns
a boolean indicating if a clip area exists.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">%TRUE if a clip rectangle exists, %FALSE if all of @cr is
    clipped and all drawing can be skipped</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="cr" transfer-ownership="none">
          <doc xml:space="preserve">a cairo context</doc>
          <type name="cairo.Context" c:type="cairo_t*"/>
        </parameter>
        <parameter name="rect" direction="out" caller-allocates="1" transfer-ownership="none" optional="1" allow-none="1">
          <doc xml:space="preserve">return location for the clip, or %NULL</doc>
          <type name="Rectangle" c:type="GdkRectangle*"/>
        </parameter>
      </parameters>
    </function>
    <function name="cairo_get_drawing_context" c:identifier="gdk_cairo_get_drawing_context" version="3.22">
      <doc xml:space="preserve">Retrieves the #GdkDrawingContext that created the Cairo
context @cr.</doc>
      <return-value transfer-ownership="none" nullable="1">
        <doc xml:space="preserve">a #GdkDrawingContext, if any is set</doc>
        <type name="DrawingContext" c:type="GdkDrawingContext*"/>
      </return-value>
      <parameters>
        <parameter name="cr" transfer-ownership="none">
          <doc xml:space="preserve">a Cairo context</doc>
          <type name="cairo.Context" c:type="cairo_t*"/>
        </parameter>
      </parameters>
    </function>
    <docsection name="cairo_interaction">
      <doc xml:space="preserve">[Cairo](http://cairographics.org) is a graphics
library that supports vector graphics and image compositing that
can be used with GDK. GTK+ does all of its drawing using cairo.

GDK does not wrap the cairo API, instead it allows to create cairo
contexts which can be used to draw on #GdkWindows. Additional
functions allow use #GdkRectangles with cairo and to use #GdkColors,
#GdkRGBAs, #GdkPixbufs and #GdkWindows as sources for drawing
operations.</doc>
    </docsection>
    <function name="cairo_rectangle" c:identifier="gdk_cairo_rectangle" version="2.8">
      <doc xml:space="preserve">Adds the given rectangle to the current path of @cr.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="cr" transfer-ownership="none">
          <doc xml:space="preserve">a cairo context</doc>
          <type name="cairo.Context" c:type="cairo_t*"/>
        </parameter>
        <parameter name="rectangle" transfer-ownership="none">
          <doc xml:space="preserve">a #GdkRectangle</doc>
          <type name="Rectangle" c:type="const GdkRectangle*"/>
        </parameter>
      </parameters>
    </function>
    <function name="cairo_region" c:identifier="gdk_cairo_region" version="2.8">
      <doc xml:space="preserve">Adds the given region to the current path of @cr.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="cr" transfer-ownership="none">
          <doc xml:space="preserve">a cairo context</doc>
          <type name="cairo.Context" c:type="cairo_t*"/>
        </parameter>
        <parameter name="region" transfer-ownership="none">
          <doc xml:space="preserve">a #cairo_region_t</doc>
          <type name="cairo.Region" c:type="const cairo_region_t*"/>
        </parameter>
      </parameters>
    </function>
    <function name="cairo_region_create_from_surface" c:identifier="gdk_cairo_region_create_from_surface">
      <doc xml:space="preserve">Creates region that describes covers the area where the given
@surface is more than 50% opaque.

This function takes into account device offsets that might be
set with cairo_surface_set_device_offset().</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">A #cairo_region_t; must be freed with cairo_region_destroy()</doc>
        <type name="cairo.Region" c:type="cairo_region_t*"/>
      </return-value>
      <parameters>
        <parameter name="surface" transfer-ownership="none">
          <doc xml:space="preserve">a cairo surface</doc>
          <type name="cairo.Surface" c:type="cairo_surface_t*"/>
        </parameter>
      </parameters>
    </function>
    <function name="cairo_set_source_color" c:identifier="gdk_cairo_set_source_color" version="2.8" deprecated="1" deprecated-version="3.4">
      <doc xml:space="preserve">Sets the specified #GdkColor as the source color of @cr.</doc>
      <doc-deprecated xml:space="preserve">Use gdk_cairo_set_source_rgba() instead</doc-deprecated>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="cr" transfer-ownership="none">
          <doc xml:space="preserve">a cairo context</doc>
          <type name="cairo.Context" c:type="cairo_t*"/>
        </parameter>
        <parameter name="color" transfer-ownership="none">
          <doc xml:space="preserve">a #GdkColor</doc>
          <type name="Color" c:type="const GdkColor*"/>
        </parameter>
      </parameters>
    </function>
    <function name="cairo_set_source_pixbuf" c:identifier="gdk_cairo_set_source_pixbuf" version="2.8">
      <doc xml:space="preserve">Sets the given pixbuf as the source pattern for @cr.

The pattern has an extend mode of %CAIRO_EXTEND_NONE and is aligned
so that the origin of @pixbuf is @pixbuf_x, @pixbuf_y.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="cr" transfer-ownership="none">
          <doc xml:space="preserve">a cairo context</doc>
          <type name="cairo.Context" c:type="cairo_t*"/>
        </parameter>
        <parameter name="pixbuf" transfer-ownership="none">
          <doc xml:space="preserve">a #GdkPixbuf</doc>
          <type name="GdkPixbuf.Pixbuf" c:type="const GdkPixbuf*"/>
        </parameter>
        <parameter name="pixbuf_x" transfer-ownership="none">
          <doc xml:space="preserve">X coordinate of location to place upper left corner of @pixbuf</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="pixbuf_y" transfer-ownership="none">
          <doc xml:space="preserve">Y coordinate of location to place upper left corner of @pixbuf</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
      </parameters>
    </function>
    <function name="cairo_set_source_rgba" c:identifier="gdk_cairo_set_source_rgba" version="3.0">
      <doc xml:space="preserve">Sets the specified #GdkRGBA as the source color of @cr.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="cr" transfer-ownership="none">
          <doc xml:space="preserve">a cairo context</doc>
          <type name="cairo.Context" c:type="cairo_t*"/>
        </parameter>
        <parameter name="rgba" transfer-ownership="none">
          <doc xml:space="preserve">a #GdkRGBA</doc>
          <type name="RGBA" c:type="const GdkRGBA*"/>
        </parameter>
      </parameters>
    </function>
    <function name="cairo_set_source_window" c:identifier="gdk_cairo_set_source_window" version="2.24">
      <doc xml:space="preserve">Sets the given window as the source pattern for @cr.

The pattern has an extend mode of %CAIRO_EXTEND_NONE and is aligned
so that the origin of @window is @x, @y. The window contains all its
subwindows when rendering.

Note that the contents of @window are undefined outside of the
visible part of @window, so use this function with care.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="cr" transfer-ownership="none">
          <doc xml:space="preserve">a cairo context</doc>
          <type name="cairo.Context" c:type="cairo_t*"/>
        </parameter>
        <parameter name="window" transfer-ownership="none">
          <doc xml:space="preserve">a #GdkWindow</doc>
          <type name="Window" c:type="GdkWindow*"/>
        </parameter>
        <parameter name="x" transfer-ownership="none">
          <doc xml:space="preserve">X coordinate of location to place upper left corner of @window</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="y" transfer-ownership="none">
          <doc xml:space="preserve">Y coordinate of location to place upper left corner of @window</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
      </parameters>
    </function>
    <function name="cairo_surface_create_from_pixbuf" c:identifier="gdk_cairo_surface_create_from_pixbuf" version="3.10">
      <doc xml:space="preserve">Creates an image surface with the same contents as
the pixbuf.</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">a new cairo surface, must be freed with cairo_surface_destroy()</doc>
        <type name="cairo.Surface" c:type="cairo_surface_t*"/>
      </return-value>
      <parameters>
        <parameter name="pixbuf" transfer-ownership="none">
          <doc xml:space="preserve">a #GdkPixbuf</doc>
          <type name="GdkPixbuf.Pixbuf" c:type="const GdkPixbuf*"/>
        </parameter>
        <parameter name="scale" transfer-ownership="none">
          <doc xml:space="preserve">the scale of the new surface, or 0 to use same as @window</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="for_window" transfer-ownership="none" nullable="1" allow-none="1">
          <doc xml:space="preserve">The window this will be drawn to, or %NULL</doc>
          <type name="Window" c:type="GdkWindow*"/>
        </parameter>
      </parameters>
    </function>
    <function name="color_parse" c:identifier="gdk_color_parse" moved-to="Color.parse" deprecated="1" deprecated-version="3.14">
      <doc xml:space="preserve">Parses a textual specification of a color and fill in the
@red, @green, and @blue fields of a #GdkColor.

The string can either one of a large set of standard names
(taken from the X11 `rgb.txt` file), or it can be a hexadecimal
value in the form &#x201C;\#rgb&#x201D; &#x201C;\#rrggbb&#x201D;, &#x201C;\#rrrgggbbb&#x201D; or
&#x201C;\#rrrrggggbbbb&#x201D; where &#x201C;r&#x201D;, &#x201C;g&#x201D; and &#x201C;b&#x201D; are hex digits of
the red, green, and blue components of the color, respectively.
(White in the four forms is &#x201C;\#fff&#x201D;, &#x201C;\#ffffff&#x201D;, &#x201C;\#fffffffff&#x201D;
and &#x201C;\#ffffffffffff&#x201D;).</doc>
      <doc-deprecated xml:space="preserve">Use #GdkRGBA</doc-deprecated>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">%TRUE if the parsing succeeded</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="spec" transfer-ownership="none">
          <doc xml:space="preserve">the string specifying the color</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="color" direction="out" caller-allocates="1" transfer-ownership="none">
          <doc xml:space="preserve">the #GdkColor to fill in</doc>
          <type name="Color" c:type="GdkColor*"/>
        </parameter>
      </parameters>
    </function>
    <docsection name="colors">
      <doc xml:space="preserve">A #GdkColor represents a color.

When working with cairo, it is often more convenient
to use a #GdkRGBA instead, and #GdkColor has been
deprecated in favor of #GdkRGBA.</doc>
    </docsection>
    <docsection name="cursors">
      <doc xml:space="preserve">These functions are used to create and destroy cursors.
There is a number of standard cursors, but it is also
possible to construct new cursors from pixbufs. There
may be limitations as to what kinds of cursors can be
constructed on a given display, see
gdk_display_supports_cursor_alpha(),
gdk_display_supports_cursor_color(),
gdk_display_get_default_cursor_size() and
gdk_display_get_maximal_cursor_size().

Cursors by themselves are not very interesting, they must be be
bound to a window for users to see them. This is done with
gdk_window_set_cursor() or by setting the cursor member of the
#GdkWindowAttr passed to gdk_window_new().</doc>
    </docsection>
    <function name="disable_multidevice" c:identifier="gdk_disable_multidevice" version="3.0">
      <doc xml:space="preserve">Disables multidevice support in GDK. This call must happen prior
to gdk_display_open(), gtk_init(), gtk_init_with_args() or
gtk_init_check() in order to take effect.

Most common GTK+ applications won&#x2019;t ever need to call this. Only
applications that do mixed GDK/Xlib calls could want to disable
multidevice support if such Xlib code deals with input devices in
any way and doesn&#x2019;t observe the presence of XInput 2.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <docsection name="dnd">
      <doc xml:space="preserve">These functions provide a low level interface for drag and drop.
The X backend of GDK supports both the Xdnd and Motif drag and drop
protocols transparently, the Win32 backend supports the WM_DROPFILES
protocol.

GTK+ provides a higher level abstraction based on top of these functions,
and so they are not normally needed in GTK+ applications.
See the [Drag and Drop][gtk3-Drag-and-Drop] section of
the GTK+ documentation for more information.</doc>
    </docsection>
    <function name="drag_abort" c:identifier="gdk_drag_abort">
      <doc xml:space="preserve">Aborts a drag without dropping.

This function is called by the drag source.

This function does not need to be called in managed drag and drop
operations. See gdk_drag_context_manage_dnd() for more information.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="context" transfer-ownership="none">
          <doc xml:space="preserve">a #GdkDragContext</doc>
          <type name="DragContext" c:type="GdkDragContext*"/>
        </parameter>
        <parameter name="time_" transfer-ownership="none">
          <doc xml:space="preserve">the timestamp for this operation</doc>
          <type name="guint32" c:type="guint32"/>
        </parameter>
      </parameters>
    </function>
    <function name="drag_begin" c:identifier="gdk_drag_begin">
      <doc xml:space="preserve">Starts a drag and creates a new drag context for it.
This function assumes that the drag is controlled by the
client pointer device, use gdk_drag_begin_for_device() to
begin a drag with a different device.

This function is called by the drag source.</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">a newly created #GdkDragContext</doc>
        <type name="DragContext" c:type="GdkDragContext*"/>
      </return-value>
      <parameters>
        <parameter name="window" transfer-ownership="none">
          <doc xml:space="preserve">the source window for this drag.</doc>
          <type name="Window" c:type="GdkWindow*"/>
        </parameter>
        <parameter name="targets" transfer-ownership="none">
          <doc xml:space="preserve">the offered targets,
    as list of #GdkAtoms</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Atom"/>
          </type>
        </parameter>
      </parameters>
    </function>
    <function name="drag_begin_for_device" c:identifier="gdk_drag_begin_for_device">
      <doc xml:space="preserve">Starts a drag and creates a new drag context for it.

This function is called by the drag source.</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">a newly created #GdkDragContext</doc>
        <type name="DragContext" c:type="GdkDragContext*"/>
      </return-value>
      <parameters>
        <parameter name="window" transfer-ownership="none">
          <doc xml:space="preserve">the source window for this drag</doc>
          <type name="Window" c:type="GdkWindow*"/>
        </parameter>
        <parameter name="device" transfer-ownership="none">
          <doc xml:space="preserve">the device that controls this drag</doc>
          <type name="Device" c:type="GdkDevice*"/>
        </parameter>
        <parameter name="targets" transfer-ownership="none">
          <doc xml:space="preserve">the offered targets,
    as list of #GdkAtoms</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Atom"/>
          </type>
        </parameter>
      </parameters>
    </function>
    <function name="drag_begin_from_point" c:identifier="gdk_drag_begin_from_point" version="3.20">
      <doc xml:space="preserve">Starts a drag and creates a new drag context for it.

This function is called by the drag source.</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">a newly created #GdkDragContext</doc>
        <type name="DragContext" c:type="GdkDragContext*"/>
      </return-value>
      <parameters>
        <parameter name="window" transfer-ownership="none">
          <doc xml:space="preserve">the source window for this drag</doc>
          <type name="Window" c:type="GdkWindow*"/>
        </parameter>
        <parameter name="device" transfer-ownership="none">
          <doc xml:space="preserve">the device that controls this drag</doc>
          <type name="Device" c:type="GdkDevice*"/>
        </parameter>
        <parameter name="targets" transfer-ownership="none">
          <doc xml:space="preserve">the offered targets,
    as list of #GdkAtoms</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Atom"/>
          </type>
        </parameter>
        <parameter name="x_root" transfer-ownership="none">
          <doc xml:space="preserve">the x coordinate where the drag nominally started</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="y_root" transfer-ownership="none">
          <doc xml:space="preserve">the y coordinate where the drag nominally started</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="drag_drop" c:identifier="gdk_drag_drop">
      <doc xml:space="preserve">Drops on the current destination.

This function is called by the drag source.

This function does not need to be called in managed drag and drop
operations. See gdk_drag_context_manage_dnd() for more information.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="context" transfer-ownership="none">
          <doc xml:space="preserve">a #GdkDragContext</doc>
          <type name="DragContext" c:type="GdkDragContext*"/>
        </parameter>
        <parameter name="time_" transfer-ownership="none">
          <doc xml:space="preserve">the timestamp for this operation</doc>
          <type name="guint32" c:type="guint32"/>
        </parameter>
      </parameters>
    </function>
    <function name="drag_drop_done" c:identifier="gdk_drag_drop_done" version="3.20">
      <doc xml:space="preserve">Inform GDK if the drop ended successfully. Passing %FALSE
for @success may trigger a drag cancellation animation.

This function is called by the drag source, and should
be the last call before dropping the reference to the
@context.

The #GdkDragContext will only take the first gdk_drag_drop_done()
call as effective, if this function is called multiple times,
all subsequent calls will be ignored.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="context" transfer-ownership="none">
          <doc xml:space="preserve">a #GdkDragContext</doc>
          <type name="DragContext" c:type="GdkDragContext*"/>
        </parameter>
        <parameter name="success" transfer-ownership="none">
          <doc xml:space="preserve">whether the drag was ultimatively successful</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="drag_drop_succeeded" c:identifier="gdk_drag_drop_succeeded" version="2.6">
      <doc xml:space="preserve">Returns whether the dropped data has been successfully
transferred. This function is intended to be used while
handling a %GDK_DROP_FINISHED event, its return value is
meaningless at other times.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">%TRUE if the drop was successful.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="context" transfer-ownership="none">
          <doc xml:space="preserve">a #GdkDragContext</doc>
          <type name="DragContext" c:type="GdkDragContext*"/>
        </parameter>
      </parameters>
    </function>
    <function name="drag_find_window_for_screen" c:identifier="gdk_drag_find_window_for_screen" version="2.2">
      <doc xml:space="preserve">Finds the destination window and DND protocol to use at the
given pointer position.

This function is called by the drag source to obtain the
@dest_window and @protocol parameters for gdk_drag_motion().</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="context" transfer-ownership="none">
          <doc xml:space="preserve">a #GdkDragContext</doc>
          <type name="DragContext" c:type="GdkDragContext*"/>
        </parameter>
        <parameter name="drag_window" transfer-ownership="none">
          <doc xml:space="preserve">a window which may be at the pointer position, but
    should be ignored, since it is put up by the drag source as an icon</doc>
          <type name="Window" c:type="GdkWindow*"/>
        </parameter>
        <parameter name="screen" transfer-ownership="none">
          <doc xml:space="preserve">the screen where the destination window is sought</doc>
          <type name="Screen" c:type="GdkScreen*"/>
        </parameter>
        <parameter name="x_root" transfer-ownership="none">
          <doc xml:space="preserve">the x position of the pointer in root coordinates</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="y_root" transfer-ownership="none">
          <doc xml:space="preserve">the y position of the pointer in root coordinates</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="dest_window" direction="out" caller-allocates="0" transfer-ownership="full">
          <doc xml:space="preserve">location to store the destination window in</doc>
          <type name="Window" c:type="GdkWindow**"/>
        </parameter>
        <parameter name="protocol" direction="out" caller-allocates="0" transfer-ownership="full">
          <doc xml:space="preserve">location to store the DND protocol in</doc>
          <type name="DragProtocol" c:type="GdkDragProtocol*"/>
        </parameter>
      </parameters>
    </function>
    <function name="drag_get_selection" c:identifier="gdk_drag_get_selection">
      <doc xml:space="preserve">Returns the selection atom for the current source window.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">the selection atom, or %GDK_NONE</doc>
        <type name="Atom" c:type="GdkAtom"/>
      </return-value>
      <parameters>
        <parameter name="context" transfer-ownership="none">
          <doc xml:space="preserve">a #GdkDragContext.</doc>
          <type name="DragContext" c:type="GdkDragContext*"/>
        </parameter>
      </parameters>
    </function>
    <function name="drag_motion" c:identifier="gdk_drag_motion">
      <doc xml:space="preserve">Updates the drag context when the pointer moves or the
set of actions changes.

This function is called by the drag source.

This function does not need to be called in managed drag and drop
operations. See gdk_drag_context_manage_dnd() for more information.</doc>
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="context" transfer-ownership="none">
          <doc xml:space="preserve">a #GdkDragContext</doc>
          <type name="DragContext" c:type="GdkDragContext*"/>
        </parameter>
        <parameter name="dest_window" transfer-ownership="none">
          <doc xml:space="preserve">the new destination window, obtained by
    gdk_drag_find_window()</doc>
          <type name="Window" c:type="GdkWindow*"/>
        </parameter>
        <parameter name="protocol" transfer-ownership="none">
          <doc xml:space="preserve">the DND protocol in use, obtained by gdk_drag_find_window()</doc>
          <type name="DragProtocol" c:type="GdkDragProtocol"/>
        </parameter>
        <parameter name="x_root" transfer-ownership="none">
          <doc xml:space="preserve">the x position of the pointer in root coordinates</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="y_root" transfer-ownership="none">
          <doc xml:space="preserve">the y position of the pointer in root coordinates</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="suggested_action" transfer-ownership="none">
          <doc xml:space="preserve">the suggested action</doc>
          <type name="DragAction" c:type="GdkDragAction"/>
        </parameter>
        <parameter name="possible_actions" transfer-ownership="none">
          <doc xml:space="preserve">the possible actions</doc>
          <type name="DragAction" c:type="GdkDragAction"/>
        </parameter>
        <parameter name="time_" transfer-ownership="none">
          <doc xml:space="preserve">the timestamp for this operation</doc>
          <type name="guint32" c:type="guint32"/>
        </parameter>
      </parameters>
    </function>
    <function name="drag_status" c:identifier="gdk_drag_status">
      <doc xml:space="preserve">Selects one of the actions offered by the drag source.

This function is called by the drag destination in response to
gdk_drag_motion() called by the drag source.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="context" transfer-ownership="none">
          <doc xml:space="preserve">a #GdkDragContext</doc>
          <type name="DragContext" c:type="GdkDragContext*"/>
        </parameter>
        <parameter name="action" transfer-ownership="none">
          <doc xml:space="preserve">the selected action which will be taken when a drop happens,
   or 0 to indicate that a drop will not be accepted</doc>
          <type name="DragAction" c:type="GdkDragAction"/>
        </parameter>
        <parameter name="time_" transfer-ownership="none">
          <doc xml:space="preserve">the timestamp for this operation</doc>
          <type name="guint32" c:type="guint32"/>
        </parameter>
      </parameters>
    </function>
    <function name="drop_finish" c:identifier="gdk_drop_finish">
      <doc xml:space="preserve">Ends the drag operation after a drop.

This function is called by the drag destination.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="context" transfer-ownership="none">
          <doc xml:space="preserve">a #GdkDragContext</doc>
          <type name="DragContext" c:type="GdkDragContext*"/>
        </parameter>
        <parameter name="success" transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the data was successfully received</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="time_" transfer-ownership="none">
          <doc xml:space="preserve">the timestamp for this operation</doc>
          <type name="guint32" c:type="guint32"/>
        </parameter>
      </parameters>
    </function>
    <function name="drop_reply" c:identifier="gdk_drop_reply">
      <doc xml:space="preserve">Accepts or rejects a drop.

This function is called by the drag destination in response
to a drop initiated by the drag source.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="context" transfer-ownership="none">
          <doc xml:space="preserve">a #GdkDragContext</doc>
          <type name="DragContext" c:type="GdkDragContext*"/>
        </parameter>
        <parameter name="accepted" transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the drop is accepted</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="time_" transfer-ownership="none">
          <doc xml:space="preserve">the timestamp for this operation</doc>
          <type name="guint32" c:type="guint32"/>
        </parameter>
      </parameters>
    </function>
    <function name="error_trap_pop" c:identifier="gdk_error_trap_pop">
      <doc xml:space="preserve">Removes an error trap pushed with gdk_error_trap_push().
May block until an error has been definitively received
or not received from the X server. gdk_error_trap_pop_ignored()
is preferred if you don&#x2019;t need to know whether an error
occurred, because it never has to block. If you don't
need the return value of gdk_error_trap_pop(), use
gdk_error_trap_pop_ignored().

Prior to GDK 3.0, this function would not automatically
sync for you, so you had to gdk_flush() if your last
call to Xlib was not a blocking round trip.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">X error code or 0 on success</doc>
        <type name="gint" c:type="gint"/>
      </return-value>
    </function>
    <function name="error_trap_pop_ignored" c:identifier="gdk_error_trap_pop_ignored" version="3.0">
      <doc xml:space="preserve">Removes an error trap pushed with gdk_error_trap_push(), but
without bothering to wait and see whether an error occurred.  If an
error arrives later asynchronously that was triggered while the
trap was pushed, that error will be ignored.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="error_trap_push" c:identifier="gdk_error_trap_push">
      <doc xml:space="preserve">This function allows X errors to be trapped instead of the normal
behavior of exiting the application. It should only be used if it
is not possible to avoid the X error in any other way. Errors are
ignored on all #GdkDisplay currently known to the
#GdkDisplayManager. If you don&#x2019;t care which error happens and just
want to ignore everything, pop with gdk_error_trap_pop_ignored().
If you need the error code, use gdk_error_trap_pop() which may have
to block and wait for the error to arrive from the X server.

This API exists on all platforms but only does anything on X.

You can use gdk_x11_display_error_trap_push() to ignore errors
on only a single display.

## Trapping an X error

|[&lt;!-- language="C" --&gt;
gdk_error_trap_push ();

 // ... Call the X function which may cause an error here ...


if (gdk_error_trap_pop ())
 {
   // ... Handle the error here ...
 }
]|</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="event_get" c:identifier="gdk_event_get" moved-to="Event.get">
      <doc xml:space="preserve">Checks all open displays for a #GdkEvent to process,to be processed
on, fetching events from the windowing system if necessary.
See gdk_display_get_event().</doc>
      <return-value transfer-ownership="full" nullable="1">
        <doc xml:space="preserve">the next #GdkEvent to be processed, or %NULL
if no events are pending. The returned #GdkEvent should be freed
with gdk_event_free().</doc>
        <type name="Event" c:type="GdkEvent*"/>
      </return-value>
    </function>
    <function name="event_handler_set" c:identifier="gdk_event_handler_set" moved-to="Event.handler_set">
      <doc xml:space="preserve">Sets the function to call to handle all events from GDK.

Note that GTK+ uses this to install its own event handler, so it is
usually not useful for GTK+ applications. (Although an application
can call this function then call gtk_main_do_event() to pass
events to GTK+.)</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="func" transfer-ownership="none" scope="notified" closure="1" destroy="2">
          <doc xml:space="preserve">the function to call to handle events from GDK.</doc>
          <type name="EventFunc" c:type="GdkEventFunc"/>
        </parameter>
        <parameter name="data" transfer-ownership="none" nullable="1" allow-none="1">
          <doc xml:space="preserve">user data to pass to the function.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="notify" transfer-ownership="none" scope="async">
          <doc xml:space="preserve">the function to call when the handler function is removed, i.e. when
         gdk_event_handler_set() is called with another event handler.</doc>
          <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
        </parameter>
      </parameters>
    </function>
    <function name="event_peek" c:identifier="gdk_event_peek" moved-to="Event.peek">
      <doc xml:space="preserve">If there is an event waiting in the event queue of some open
display, returns a copy of it. See gdk_display_peek_event().</doc>
      <return-value transfer-ownership="full" nullable="1">
        <doc xml:space="preserve">a copy of the first #GdkEvent on some event
queue, or %NULL if no events are in any queues. The returned
#GdkEvent should be freed with gdk_event_free().</doc>
        <type name="Event" c:type="GdkEvent*"/>
      </return-value>
    </function>
    <function name="event_request_motions" c:identifier="gdk_event_request_motions" moved-to="Event.request_motions" version="2.12">
      <doc xml:space="preserve">Request more motion notifies if @event is a motion notify hint event.

This function should be used instead of gdk_window_get_pointer() to
request further motion notifies, because it also works for extension
events where motion notifies are provided for devices other than the
core pointer. Coordinate extraction, processing and requesting more
motion events from a %GDK_MOTION_NOTIFY event usually works like this:

|[&lt;!-- language="C" --&gt;
{
  // motion_event handler
  x = motion_event-&gt;x;
  y = motion_event-&gt;y;
  // handle (x,y) motion
  gdk_event_request_motions (motion_event); // handles is_hint events
}
]|</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="event" transfer-ownership="none">
          <doc xml:space="preserve">a valid #GdkEvent</doc>
          <type name="EventMotion" c:type="const GdkEventMotion*"/>
        </parameter>
      </parameters>
    </function>
    <docsection name="event_structs">
      <doc xml:space="preserve">The event structures contain data specific to each type of event in GDK.

&gt; A common mistake is to forget to set the event mask of a widget so that
&gt; the required events are received. See gtk_widget_set_events().</doc>
    </docsection>
    <docsection name="events">
      <doc xml:space="preserve">This section describes functions dealing with events from the window
system.

In GTK+ applications the events are handled automatically in
gtk_main_do_event() and passed on to the appropriate widgets, so these
functions are rarely needed. Though some of the fields in the
[Event Structures][gdk3-Event-Structures] are useful.</doc>
    </docsection>
    <function name="events_get_angle" c:identifier="gdk_events_get_angle" version="3.0">
      <doc xml:space="preserve">If both events contain X/Y information, this function will return %TRUE
and return in @angle the relative angle from @event1 to @event2. The rotation
direction for positive angles is from the positive X axis towards the positive
Y axis.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">%TRUE if the angle could be calculated.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="event1" transfer-ownership="none">
          <doc xml:space="preserve">first #GdkEvent</doc>
          <type name="Event" c:type="GdkEvent*"/>
        </parameter>
        <parameter name="event2" transfer-ownership="none">
          <doc xml:space="preserve">second #GdkEvent</doc>
          <type name="Event" c:type="GdkEvent*"/>
        </parameter>
        <parameter name="angle" direction="out" caller-allocates="0" transfer-ownership="full">
          <doc xml:space="preserve">return location for the relative angle between both events</doc>
          <type name="gdouble" c:type="gdouble*"/>
        </parameter>
      </parameters>
    </function>
    <function name="events_get_center" c:identifier="gdk_events_get_center" version="3.0">
      <doc xml:space="preserve">If both events contain X/Y information, the center of both coordinates
will be returned in @x and @y.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">%TRUE if the center could be calculated.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="event1" transfer-ownership="none">
          <doc xml:space="preserve">first #GdkEvent</doc>
          <type name="Event" c:type="GdkEvent*"/>
        </parameter>
        <parameter name="event2" transfer-ownership="none">
          <doc xml:space="preserve">second #GdkEvent</doc>
          <type name="Event" c:type="GdkEvent*"/>
        </parameter>
        <parameter name="x" direction="out" caller-allocates="0" transfer-ownership="full">
          <doc xml:space="preserve">return location for the X coordinate of the center</doc>
          <type name="gdouble" c:type="gdouble*"/>
        </parameter>
        <parameter name="y" direction="out" caller-allocates="0" transfer-ownership="full">
          <doc xml:space="preserve">return location for the Y coordinate of the center</doc>
          <type name="gdouble" c:type="gdouble*"/>
        </parameter>
      </parameters>
    </function>
    <function name="events_get_distance" c:identifier="gdk_events_get_distance" version="3.0">
      <doc xml:space="preserve">If both events have X/Y information, the distance between both coordinates
(as in a straight line going from @event1 to @event2) will be returned.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">%TRUE if the distance could be calculated.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="event1" transfer-ownership="none">
          <doc xml:space="preserve">first #GdkEvent</doc>
          <type name="Event" c:type="GdkEvent*"/>
        </parameter>
        <parameter name="event2" transfer-ownership="none">
          <doc xml:space="preserve">second #GdkEvent</doc>
          <type name="Event" c:type="GdkEvent*"/>
        </parameter>
        <parameter name="distance" direction="out" caller-allocates="0" transfer-ownership="full">
          <doc xml:space="preserve">return location for the distance</doc>
          <type name="gdouble" c:type="gdouble*"/>
        </parameter>
      </parameters>
    </function>
    <function name="events_pending" c:identifier="gdk_events_pending">
      <doc xml:space="preserve">Checks if any events are ready to be processed for any display.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">%TRUE if any events are pending.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
    </function>
    <function name="flush" c:identifier="gdk_flush">
      <doc xml:space="preserve">Flushes the output buffers of all display connections and waits
until all requests have been processed.
This is rarely needed by applications.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <docsection name="gdktestutils">
      <doc xml:space="preserve">The functions in this section are intended to be used in test programs.
They allow to simulate some user input.</doc>
    </docsection>
    <docsection name="general">
      <doc xml:space="preserve">This section describes the GDK initialization functions and miscellaneous
utility functions, as well as deprecation facilities.

The GDK and GTK+ headers annotate deprecated APIs in a way that produces
compiler warnings if these deprecated APIs are used. The warnings
can be turned off by defining the macro %GDK_DISABLE_DEPRECATION_WARNINGS
before including the glib.h header.

GDK and GTK+ also provide support for building applications against
defined subsets of deprecated or new APIs. Define the macro
%GDK_VERSION_MIN_REQUIRED to specify up to what version
you want to receive warnings about deprecated APIs. Define the
macro %GDK_VERSION_MAX_ALLOWED to specify the newest version
whose API you want to use.</doc>
    </docsection>
    <function name="get_default_root_window" c:identifier="gdk_get_default_root_window">
      <doc xml:space="preserve">Obtains the root window (parent all other windows are inside)
for the default display and screen.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">the default root window</doc>
        <type name="Window" c:type="GdkWindow*"/>
      </return-value>
    </function>
    <function name="get_display" c:identifier="gdk_get_display" deprecated="1" deprecated-version="3.8">
      <doc xml:space="preserve">Gets the name of the display, which usually comes from the
`DISPLAY` environment variable or the
`--display` command line option.</doc>
      <doc-deprecated xml:space="preserve">Call gdk_display_get_name (gdk_display_get_default ()))
   instead.</doc-deprecated>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">the name of the display.</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
    </function>
    <function name="get_display_arg_name" c:identifier="gdk_get_display_arg_name" version="2.2">
      <doc xml:space="preserve">Gets the display name specified in the command line arguments passed
to gdk_init() or gdk_parse_args(), if any.</doc>
      <return-value transfer-ownership="none" nullable="1">
        <doc xml:space="preserve">the display name, if specified explicitly,
  otherwise %NULL this string is owned by GTK+ and must not be
  modified or freed.</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
    </function>
    <function name="get_program_class" c:identifier="gdk_get_program_class">
      <doc xml:space="preserve">Gets the program class. Unless the program class has explicitly
been set with gdk_set_program_class() or with the `--class`
commandline option, the default value is the program name (determined
with g_get_prgname()) with the first character converted to uppercase.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">the program class.</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
    </function>
    <function name="get_show_events" c:identifier="gdk_get_show_events">
      <doc xml:space="preserve">Gets whether event debugging output is enabled.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">%TRUE if event debugging output is enabled.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
    </function>
    <function name="gl_error_quark" c:identifier="gdk_gl_error_quark" moved-to="GLError.quark">
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="init" c:identifier="gdk_init">
      <doc xml:space="preserve">Initializes the GDK library and connects to the windowing system.
If initialization fails, a warning message is output and the application
terminates with a call to `exit(1)`.

Any arguments used by GDK are removed from the array and @argc and @argv
are updated accordingly.

GTK+ initializes GDK in gtk_init() and so this function is not usually
needed by GTK+ applications.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="argc" direction="inout" caller-allocates="0" transfer-ownership="full">
          <doc xml:space="preserve">the number of command line arguments.</doc>
          <type name="gint" c:type="gint*"/>
        </parameter>
        <parameter name="argv" direction="inout" caller-allocates="0" transfer-ownership="full">
          <doc xml:space="preserve">the array of command line arguments.</doc>
          <array length="0" zero-terminated="0" c:type="gchar***">
            <type name="utf8" c:type="gchar**"/>
          </array>
        </parameter>
      </parameters>
    </function>
    <function name="init_check" c:identifier="gdk_init_check">
      <doc xml:space="preserve">Initializes the GDK library and connects to the windowing system,
returning %TRUE on success.

Any arguments used by GDK are removed from the array and @argc and @argv
are updated accordingly.

GTK+ initializes GDK in gtk_init() and so this function is not usually
needed by GTK+ applications.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">%TRUE if initialization succeeded.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="argc" direction="inout" caller-allocates="0" transfer-ownership="full">
          <doc xml:space="preserve">the number of command line arguments.</doc>
          <type name="gint" c:type="gint*"/>
        </parameter>
        <parameter name="argv" direction="inout" caller-allocates="0" transfer-ownership="full">
          <doc xml:space="preserve">the array of command line arguments.</doc>
          <array length="0" zero-terminated="0" c:type="gchar***">
            <type name="utf8" c:type="gchar**"/>
          </array>
        </parameter>
      </parameters>
    </function>
    <function name="keyboard_grab" c:identifier="gdk_keyboard_grab" deprecated="1" deprecated-version="3.0">
      <doc xml:space="preserve">Grabs the keyboard so that all events are passed to this
application until the keyboard is ungrabbed with gdk_keyboard_ungrab().
This overrides any previous keyboard grab by this client.

If you set up anything at the time you take the grab that needs to be cleaned
up when the grab ends, you should handle the #GdkEventGrabBroken events that
are emitted when the grab ends unvoluntarily.</doc>
      <doc-deprecated xml:space="preserve">Use gdk_device_grab() instead.</doc-deprecated>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">%GDK_GRAB_SUCCESS if the grab was successful.</doc>
        <type name="GrabStatus" c:type="GdkGrabStatus"/>
      </return-value>
      <parameters>
        <parameter name="window" transfer-ownership="none">
          <doc xml:space="preserve">the #GdkWindow which will own the grab (the grab window).</doc>
          <type name="Window" c:type="GdkWindow*"/>
        </parameter>
        <parameter name="owner_events" transfer-ownership="none">
          <doc xml:space="preserve">if %FALSE then all keyboard events are reported with respect to
  @window. If %TRUE then keyboard events for this application are
  reported as normal, but keyboard events outside this application
  are reported with respect to @window. Both key press and key
  release events are always reported, independant of the event mask
  set by the application.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="time_" transfer-ownership="none">
          <doc xml:space="preserve">a timestamp from a #GdkEvent, or %GDK_CURRENT_TIME if no timestamp is
  available.</doc>
          <type name="guint32" c:type="guint32"/>
        </parameter>
      </parameters>
    </function>
    <function name="keyboard_ungrab" c:identifier="gdk_keyboard_ungrab" deprecated="1" deprecated-version="3.0">
      <doc xml:space="preserve">Ungrabs the keyboard on the default display, if it is grabbed by this
application.</doc>
      <doc-deprecated xml:space="preserve">Use gdk_device_ungrab(), together with gdk_device_grab()
            instead.</doc-deprecated>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="time_" transfer-ownership="none">
          <doc xml:space="preserve">a timestamp from a #GdkEvent, or %GDK_CURRENT_TIME if no
       timestamp is available.</doc>
          <type name="guint32" c:type="guint32"/>
        </parameter>
      </parameters>
    </function>
    <docsection name="keys">
      <doc xml:space="preserve">Key values are the codes which are sent whenever a key is pressed or released.
They appear in the #GdkEventKey.keyval field of the
#GdkEventKey structure, which is passed to signal handlers for the
#GtkWidget::key-press-event and #GtkWidget::key-release-event signals.
The complete list of key values can be found in the
`gdk/gdkkeysyms.h` header file.

Key values are regularly updated from the upstream X.org X11 implementation,
so new values are added regularly. They will be prefixed with GDK_KEY_ rather
than XF86XK_ or XK_ (for older symbols).

Key values can be converted into a string representation using
gdk_keyval_name(). The reverse function, converting a string to a key value,
is provided by gdk_keyval_from_name().

The case of key values can be determined using gdk_keyval_is_upper() and
gdk_keyval_is_lower(). Key values can be converted to upper or lower case
using gdk_keyval_to_upper() and gdk_keyval_to_lower().

When it makes sense, key values can be converted to and from
Unicode characters with gdk_keyval_to_unicode() and gdk_unicode_to_keyval().

# Groups # {#key-group-explanation}

One #GdkKeymap object exists for each user display. gdk_keymap_get_default()
returns the #GdkKeymap for the default display; to obtain keymaps for other
displays, use gdk_keymap_get_for_display(). A keymap
is a mapping from #GdkKeymapKey to key values. You can think of a #GdkKeymapKey
as a representation of a symbol printed on a physical keyboard key. That is, it
contains three pieces of information. First, it contains the hardware keycode;
this is an identifying number for a physical key. Second, it contains the
&#x201C;level&#x201D; of the key. The level indicates which symbol on the
key will be used, in a vertical direction. So on a standard US keyboard, the key
with the number &#x201C;1&#x201C; on it also has the exclamation point (&#x201D;!&#x201D;) character on
it. The level indicates whether to use the &#x201C;1&#x201D; or the &#x201C;!&#x201D; symbol.  The letter
keys are considered to have a lowercase letter at level 0, and an uppercase
letter at level 1, though only the uppercase letter is printed.  Third, the
#GdkKeymapKey contains a group; groups are not used on standard US keyboards,
but are used in many other countries. On a keyboard with groups, there can be 3
or 4 symbols printed on a single key. The group indicates movement in a
horizontal direction. Usually groups are used for two different languages.  In
group 0, a key might have two English characters, and in group 1 it might have
two Hebrew characters. The Hebrew characters will be printed on the key next to
the English characters.

In order to use a keymap to interpret a key event, it&#x2019;s necessary to first
convert the keyboard state into an effective group and level. This is done via a
set of rules that varies widely according to type of keyboard and user
configuration. The function gdk_keymap_translate_keyboard_state() accepts a
keyboard state -- consisting of hardware keycode pressed, active modifiers, and
active group -- applies the appropriate rules, and returns the group/level to be
used to index the keymap, along with the modifiers which did not affect the
group and level. i.e. it returns &#x201C;unconsumed modifiers.&#x201D; The keyboard group may
differ from the effective group used for keymap lookups because some keys don't
have multiple groups - e.g. the Enter key is always in group 0 regardless of
keyboard state.

Note that gdk_keymap_translate_keyboard_state() also returns the keyval, i.e. it
goes ahead and performs the keymap lookup in addition to telling you which
effective group/level values were used for the lookup. #GdkEventKey already
contains this keyval, however, so you don&#x2019;t normally need to call
gdk_keymap_translate_keyboard_state() just to get the keyval.</doc>
    </docsection>
    <function name="keyval_convert_case" c:identifier="gdk_keyval_convert_case">
      <doc xml:space="preserve">Obtains the upper- and lower-case versions of the keyval @symbol.
Examples of keyvals are #GDK_KEY_a, #GDK_KEY_Enter, #GDK_KEY_F1, etc.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="symbol" transfer-ownership="none">
          <doc xml:space="preserve">a keyval</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="lower" direction="out" caller-allocates="0" transfer-ownership="full">
          <doc xml:space="preserve">return location for lowercase version of @symbol</doc>
          <type name="guint" c:type="guint*"/>
        </parameter>
        <parameter name="upper" direction="out" caller-allocates="0" transfer-ownership="full">
          <doc xml:space="preserve">return location for uppercase version of @symbol</doc>
          <type name="guint" c:type="guint*"/>
        </parameter>
      </parameters>
    </function>
    <function name="keyval_from_name" c:identifier="gdk_keyval_from_name">
      <doc xml:space="preserve">Converts a key name to a key value.

The names are the same as those in the
`gdk/gdkkeysyms.h` header file
but without the leading &#x201C;GDK_KEY_&#x201D;.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">the corresponding key value, or %GDK_KEY_VoidSymbol
    if the key name is not a valid key</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="keyval_name" transfer-ownership="none">
          <doc xml:space="preserve">a key name</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="keyval_is_lower" c:identifier="gdk_keyval_is_lower">
      <doc xml:space="preserve">Returns %TRUE if the given key value is in lower case.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">%TRUE if @keyval is in lower case, or if @keyval is not
  subject to case conversion.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="keyval" transfer-ownership="none">
          <doc xml:space="preserve">a key value.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="keyval_is_upper" c:identifier="gdk_keyval_is_upper">
      <doc xml:space="preserve">Returns %TRUE if the given key value is in upper case.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">%TRUE if @keyval is in upper case, or if @keyval is not subject to
 case conversion.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="keyval" transfer-ownership="none">
          <doc xml:space="preserve">a key value.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="keyval_name" c:identifier="gdk_keyval_name">
      <doc xml:space="preserve">Converts a key value into a symbolic name.

The names are the same as those in the
`gdk/gdkkeysyms.h` header file
but without the leading &#x201C;GDK_KEY_&#x201D;.</doc>
      <return-value transfer-ownership="none" nullable="1">
        <doc xml:space="preserve">a string containing the name
    of the key, or %NULL if @keyval is not a valid key. The string
    should not be modified.</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="keyval" transfer-ownership="none">
          <doc xml:space="preserve">a key value</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="keyval_to_lower" c:identifier="gdk_keyval_to_lower">
      <doc xml:space="preserve">Converts a key value to lower case, if applicable.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">the lower case form of @keyval, or @keyval itself if it is already
 in lower case or it is not subject to case conversion.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="keyval" transfer-ownership="none">
          <doc xml:space="preserve">a key value.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="keyval_to_unicode" c:identifier="gdk_keyval_to_unicode">
      <doc xml:space="preserve">Convert from a GDK key symbol to the corresponding ISO10646 (Unicode)
character.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">the corresponding unicode character, or 0 if there
              is no corresponding character.</doc>
        <type name="guint32" c:type="guint32"/>
      </return-value>
      <parameters>
        <parameter name="keyval" transfer-ownership="none">
          <doc xml:space="preserve">a GDK key symbol</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="keyval_to_upper" c:identifier="gdk_keyval_to_upper">
      <doc xml:space="preserve">Converts a key value to upper case, if applicable.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">the upper case form of @keyval, or @keyval itself if it is already
  in upper case or it is not subject to case conversion.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="keyval" transfer-ownership="none">
          <doc xml:space="preserve">a key value.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="list_visuals" c:identifier="gdk_list_visuals" deprecated="1" deprecated-version="3.22">
      <doc xml:space="preserve">Lists the available visuals for the default screen.
(See gdk_screen_list_visuals())
A visual describes a hardware image data format.
For example, a visual might support 24-bit color, or 8-bit color,
and might expect pixels to be in a certain format.

Call g_list_free() on the return value when you&#x2019;re finished with it.</doc>
      <doc-deprecated xml:space="preserve">Use gdk_screen_list_visuals (gdk_screen_get_default ()).</doc-deprecated>
      <return-value transfer-ownership="container">
        <doc xml:space="preserve">
    a list of visuals; the list must be freed, but not its contents</doc>
        <type name="GLib.List" c:type="GList*">
          <type name="Visual"/>
        </type>
      </return-value>
    </function>
    <function name="notify_startup_complete" c:identifier="gdk_notify_startup_complete" version="2.2">
      <doc xml:space="preserve">Indicates to the GUI environment that the application has finished
loading. If the applications opens windows, this function is
normally called after opening the application&#x2019;s initial set of
windows.

GTK+ will call this function automatically after opening the first
#GtkWindow unless gtk_window_set_auto_startup_notification() is called
to disable that feature.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="notify_startup_complete_with_id" c:identifier="gdk_notify_startup_complete_with_id" version="2.12">
      <doc xml:space="preserve">Indicates to the GUI environment that the application has
finished loading, using a given identifier.

GTK+ will call this function automatically for #GtkWindow
with custom startup-notification identifier unless
gtk_window_set_auto_startup_notification() is called to
disable that feature.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="startup_id" transfer-ownership="none">
          <doc xml:space="preserve">a startup-notification identifier, for which
    notification process should be completed</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="offscreen_window_get_embedder" c:identifier="gdk_offscreen_window_get_embedder" version="2.18">
      <doc xml:space="preserve">Gets the window that @window is embedded in.</doc>
      <return-value transfer-ownership="none" nullable="1">
        <doc xml:space="preserve">the embedding #GdkWindow, or
    %NULL if @window is not an mbedded offscreen window</doc>
        <type name="Window" c:type="GdkWindow*"/>
      </return-value>
      <parameters>
        <parameter name="window" transfer-ownership="none">
          <doc xml:space="preserve">a #GdkWindow</doc>
          <type name="Window" c:type="GdkWindow*"/>
        </parameter>
      </parameters>
    </function>
    <function name="offscreen_window_get_surface" c:identifier="gdk_offscreen_window_get_surface">
      <doc xml:space="preserve">Gets the offscreen surface that an offscreen window renders into.
If you need to keep this around over window resizes, you need to
add a reference to it.</doc>
      <return-value transfer-ownership="none" nullable="1">
        <doc xml:space="preserve">The offscreen surface, or
  %NULL if not offscreen</doc>
        <type name="cairo.Surface" c:type="cairo_surface_t*"/>
      </return-value>
      <parameters>
        <parameter name="window" transfer-ownership="none">
          <doc xml:space="preserve">a #GdkWindow</doc>
          <type name="Window" c:type="GdkWindow*"/>
        </parameter>
      </parameters>
    </function>
    <function name="offscreen_window_set_embedder" c:identifier="gdk_offscreen_window_set_embedder" version="2.18">
      <doc xml:space="preserve">Sets @window to be embedded in @embedder.

To fully embed an offscreen window, in addition to calling this
function, it is also necessary to handle the #GdkWindow::pick-embedded-child
signal on the @embedder and the #GdkWindow::to-embedder and
#GdkWindow::from-embedder signals on @window.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="window" transfer-ownership="none">
          <doc xml:space="preserve">a #GdkWindow</doc>
          <type name="Window" c:type="GdkWindow*"/>
        </parameter>
        <parameter name="embedder" transfer-ownership="none">
          <doc xml:space="preserve">the #GdkWindow that @window gets embedded in</doc>
          <type name="Window" c:type="GdkWindow*"/>
        </parameter>
      </parameters>
    </function>
    <function name="pango_context_get" c:identifier="gdk_pango_context_get">
      <doc xml:space="preserve">Creates a #PangoContext for the default GDK screen.

The context must be freed when you&#x2019;re finished with it.

When using GTK+, normally you should use gtk_widget_get_pango_context()
instead of this function, to get the appropriate context for
the widget you intend to render text onto.

The newly created context will have the default font options (see
#cairo_font_options_t) for the default screen; if these options
change it will not be updated. Using gtk_widget_get_pango_context()
is more convenient if you want to keep a context around and track
changes to the screen&#x2019;s font rendering settings.</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">a new #PangoContext for the default display</doc>
        <type name="Pango.Context" c:type="PangoContext*"/>
      </return-value>
    </function>
    <function name="pango_context_get_for_display" c:identifier="gdk_pango_context_get_for_display" version="3.22">
      <doc xml:space="preserve">Creates a #PangoContext for @display.

The context must be freed when you&#x2019;re finished with it.

When using GTK+, normally you should use gtk_widget_get_pango_context()
instead of this function, to get the appropriate context for
the widget you intend to render text onto.

The newly created context will have the default font options
(see #cairo_font_options_t) for the display; if these options
change it will not be updated. Using gtk_widget_get_pango_context()
is more convenient if you want to keep a context around and track
changes to the font rendering settings.</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">a new #PangoContext for @display</doc>
        <type name="Pango.Context" c:type="PangoContext*"/>
      </return-value>
      <parameters>
        <parameter name="display" transfer-ownership="none">
          <doc xml:space="preserve">the #GdkDisplay for which the context is to be created</doc>
          <type name="Display" c:type="GdkDisplay*"/>
        </parameter>
      </parameters>
    </function>
    <function name="pango_context_get_for_screen" c:identifier="gdk_pango_context_get_for_screen" version="2.2">
      <doc xml:space="preserve">Creates a #PangoContext for @screen.

The context must be freed when you&#x2019;re finished with it.

When using GTK+, normally you should use gtk_widget_get_pango_context()
instead of this function, to get the appropriate context for
the widget you intend to render text onto.

The newly created context will have the default font options
(see #cairo_font_options_t) for the screen; if these options
change it will not be updated. Using gtk_widget_get_pango_context()
is more convenient if you want to keep a context around and track
changes to the screen&#x2019;s font rendering settings.</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">a new #PangoContext for @screen</doc>
        <type name="Pango.Context" c:type="PangoContext*"/>
      </return-value>
      <parameters>
        <parameter name="screen" transfer-ownership="none">
          <doc xml:space="preserve">the #GdkScreen for which the context is to be created.</doc>
          <type name="Screen" c:type="GdkScreen*"/>
        </parameter>
      </parameters>
    </function>
    <docsection name="pango_interaction">
      <doc xml:space="preserve">Pango is the text layout system used by GDK and GTK+. The functions
and types in this section are used to obtain clip regions for
#PangoLayouts, and to get #PangoContexts that can be used with
GDK.

Creating a #PangoLayout object is the first step in rendering text,
and requires getting a handle to a #PangoContext. For GTK+ programs,
you&#x2019;ll usually want to use gtk_widget_get_pango_context(), or
gtk_widget_create_pango_layout(), rather than using the lowlevel
gdk_pango_context_get_for_screen(). Once you have a #PangoLayout, you
can set the text and attributes of it with Pango functions like
pango_layout_set_text() and get its size with pango_layout_get_size().
(Note that Pango uses a fixed point system internally, so converting
between Pango units and pixels using [PANGO_SCALE][PANGO-SCALE-CAPS]
or the PANGO_PIXELS() macro.)

Rendering a Pango layout is done most simply with pango_cairo_show_layout();
you can also draw pieces of the layout with pango_cairo_show_layout_line().

## Draw transformed text with Pango and cairo ## {#rotated-example}

|[&lt;!-- language="C" --&gt;
#define RADIUS 100
#define N_WORDS 10
#define FONT "Sans Bold 18"

PangoContext *context;
PangoLayout *layout;
PangoFontDescription *desc;

double radius;
int width, height;
int i;

// Set up a transformation matrix so that the user space coordinates for
// where we are drawing are [-RADIUS, RADIUS], [-RADIUS, RADIUS]
// We first center, then change the scale

width = gdk_window_get_width (window);
height = gdk_window_get_height (window);
radius = MIN (width, height) / 2.;

cairo_translate (cr,
                 radius + (width - 2 * radius) / 2,
                 radius + (height - 2 * radius) / 2);
                 cairo_scale (cr, radius / RADIUS, radius / RADIUS);

// Create a PangoLayout, set the font and text
context = gdk_pango_context_get_for_screen (screen);
layout = pango_layout_new (context);
pango_layout_set_text (layout, "Text", -1);
desc = pango_font_description_from_string (FONT);
pango_layout_set_font_description (layout, desc);
pango_font_description_free (desc);

// Draw the layout N_WORDS times in a circle
for (i = 0; i &lt; N_WORDS; i++)
  {
    double red, green, blue;
    double angle = 2 * G_PI * i / n_words;

    cairo_save (cr);

    // Gradient from red at angle == 60 to blue at angle == 300
    red = (1 + cos (angle - 60)) / 2;
    green = 0;
    blue = 1 - red;

    cairo_set_source_rgb (cr, red, green, blue);
    cairo_rotate (cr, angle);

    // Inform Pango to re-layout the text with the new transformation matrix
    pango_cairo_update_layout (cr, layout);

    pango_layout_get_size (layout, &amp;width, &amp;height);

    cairo_move_to (cr, - width / 2 / PANGO_SCALE, - DEFAULT_TEXT_RADIUS);
    pango_cairo_show_layout (cr, layout);

    cairo_restore (cr);
  }

g_object_unref (layout);
g_object_unref (context);
]|

## Output of the [example][rotated-example] above.

![](rotated-text.png)</doc>
    </docsection>
    <function name="pango_layout_get_clip_region" c:identifier="gdk_pango_layout_get_clip_region" introspectable="0">
      <doc xml:space="preserve">Obtains a clip region which contains the areas where the given ranges
of text would be drawn. @x_origin and @y_origin are the top left point
to center the layout. @index_ranges should contain
ranges of bytes in the layout&#x2019;s text.

Note that the regions returned correspond to logical extents of the text
ranges, not ink extents. So the drawn layout may in fact touch areas out of
the clip region.  The clip region is mainly useful for highlightling parts
of text, such as when text is selected.</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">a clip region containing the given ranges</doc>
        <type name="cairo.Region" c:type="cairo_region_t*"/>
      </return-value>
      <parameters>
        <parameter name="layout" transfer-ownership="none">
          <doc xml:space="preserve">a #PangoLayout</doc>
          <type name="Pango.Layout" c:type="PangoLayout*"/>
        </parameter>
        <parameter name="x_origin" transfer-ownership="none">
          <doc xml:space="preserve">X pixel where you intend to draw the layout with this clip</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="y_origin" transfer-ownership="none">
          <doc xml:space="preserve">Y pixel where you intend to draw the layout with this clip</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="index_ranges" transfer-ownership="none">
          <doc xml:space="preserve">array of byte indexes into the layout, where even members of array are start indexes and odd elements are end indexes</doc>
          <type name="gint" c:type="const gint*"/>
        </parameter>
        <parameter name="n_ranges" transfer-ownership="none">
          <doc xml:space="preserve">number of ranges in @index_ranges, i.e. half the size of @index_ranges</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="pango_layout_line_get_clip_region" c:identifier="gdk_pango_layout_line_get_clip_region" introspectable="0">
      <doc xml:space="preserve">Obtains a clip region which contains the areas where the given
ranges of text would be drawn. @x_origin and @y_origin are the top left
position of the layout. @index_ranges
should contain ranges of bytes in the layout&#x2019;s text. The clip
region will include space to the left or right of the line (to the
layout bounding box) if you have indexes above or below the indexes
contained inside the line. This is to draw the selection all the way
to the side of the layout. However, the clip region is in line coordinates,
not layout coordinates.

Note that the regions returned correspond to logical extents of the text
ranges, not ink extents. So the drawn line may in fact touch areas out of
the clip region.  The clip region is mainly useful for highlightling parts
of text, such as when text is selected.</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">a clip region containing the given ranges</doc>
        <type name="cairo.Region" c:type="cairo_region_t*"/>
      </return-value>
      <parameters>
        <parameter name="line" transfer-ownership="none">
          <doc xml:space="preserve">a #PangoLayoutLine</doc>
          <type name="Pango.LayoutLine" c:type="PangoLayoutLine*"/>
        </parameter>
        <parameter name="x_origin" transfer-ownership="none">
          <doc xml:space="preserve">X pixel where you intend to draw the layout line with this clip</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="y_origin" transfer-ownership="none">
          <doc xml:space="preserve">baseline pixel where you intend to draw the layout line with this clip</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="index_ranges" transfer-ownership="none">
          <doc xml:space="preserve">array of byte indexes into the layout,
    where even members of array are start indexes and odd elements
    are end indexes</doc>
          <array zero-terminated="0" c:type="const gint*">
            <type name="gint" c:type="gint"/>
          </array>
        </parameter>
        <parameter name="n_ranges" transfer-ownership="none">
          <doc xml:space="preserve">number of ranges in @index_ranges, i.e. half the size of @index_ranges</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="parse_args" c:identifier="gdk_parse_args" version="2.2">
      <doc xml:space="preserve">Parse command line arguments, and store for future
use by calls to gdk_display_open().

Any arguments used by GDK are removed from the array and @argc and @argv are
updated accordingly.

You shouldn&#x2019;t call this function explicitly if you are using
gtk_init(), gtk_init_check(), gdk_init(), or gdk_init_check().</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="argc" direction="inout" caller-allocates="0" transfer-ownership="none">
          <doc xml:space="preserve">the number of command line arguments.</doc>
          <type name="gint" c:type="gint*"/>
        </parameter>
        <parameter name="argv" direction="inout" caller-allocates="0" transfer-ownership="full">
          <doc xml:space="preserve">the array of command line arguments.</doc>
          <array length="0" zero-terminated="0" c:type="gchar***">
            <type name="utf8" c:type="gchar**"/>
          </array>
        </parameter>
      </parameters>
    </function>
    <function name="pixbuf_get_from_surface" c:identifier="gdk_pixbuf_get_from_surface">
      <doc xml:space="preserve">Transfers image data from a #cairo_surface_t and converts it to an RGB(A)
representation inside a #GdkPixbuf. This allows you to efficiently read
individual pixels from cairo surfaces. For #GdkWindows, use
gdk_pixbuf_get_from_window() instead.

This function will create an RGB pixbuf with 8 bits per channel.
The pixbuf will contain an alpha channel if the @surface contains one.</doc>
      <return-value transfer-ownership="full" nullable="1">
        <doc xml:space="preserve">A newly-created pixbuf with a
    reference count of 1, or %NULL on error</doc>
        <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
      </return-value>
      <parameters>
        <parameter name="surface" transfer-ownership="none">
          <doc xml:space="preserve">surface to copy from</doc>
          <type name="cairo.Surface" c:type="cairo_surface_t*"/>
        </parameter>
        <parameter name="src_x" transfer-ownership="none">
          <doc xml:space="preserve">Source X coordinate within @surface</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="src_y" transfer-ownership="none">
          <doc xml:space="preserve">Source Y coordinate within @surface</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="width" transfer-ownership="none">
          <doc xml:space="preserve">Width in pixels of region to get</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="height" transfer-ownership="none">
          <doc xml:space="preserve">Height in pixels of region to get</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="pixbuf_get_from_window" c:identifier="gdk_pixbuf_get_from_window">
      <doc xml:space="preserve">Transfers image data from a #GdkWindow and converts it to an RGB(A)
representation inside a #GdkPixbuf.

In other words, copies image data from a server-side drawable to a
client-side RGB(A) buffer. This allows you to efficiently read
individual pixels on the client side.

This function will create an RGB pixbuf with 8 bits per channel with
the size specified by the @width and @height arguments scaled by the
scale factor of @window. The pixbuf will contain an alpha channel if
the @window contains one.

If the window is off the screen, then there is no image data in the
obscured/offscreen regions to be placed in the pixbuf. The contents of
portions of the pixbuf corresponding to the offscreen region are
undefined.

If the window you&#x2019;re obtaining data from is partially obscured by
other windows, then the contents of the pixbuf areas corresponding
to the obscured regions are undefined.

If the window is not mapped (typically because it&#x2019;s iconified/minimized
or not on the current workspace), then %NULL will be returned.

If memory can&#x2019;t be allocated for the return value, %NULL will be returned
instead.

In short, there are several ways this function can fail, and if it fails
it returns %NULL; so check the return value.

You should rarely, if ever, need to call this function.</doc>
      <return-value transfer-ownership="full" nullable="1">
        <doc xml:space="preserve">A newly-created pixbuf with a
  reference count of 1, or %NULL on error</doc>
        <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
      </return-value>
      <parameters>
        <parameter name="window" transfer-ownership="none">
          <doc xml:space="preserve">Source window</doc>
          <type name="Window" c:type="GdkWindow*"/>
        </parameter>
        <parameter name="src_x" transfer-ownership="none">
          <doc xml:space="preserve">Source X coordinate within @window</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="src_y" transfer-ownership="none">
          <doc xml:space="preserve">Source Y coordinate within @window</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="width" transfer-ownership="none">
          <doc xml:space="preserve">Width in pixels of region to get</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="height" transfer-ownership="none">
          <doc xml:space="preserve">Height in pixels of region to get</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <docsection name="pixbufs">
      <doc xml:space="preserve">Pixbufs are client-side images. For details on how to create
and manipulate pixbufs, see the #GdkPixbuf API documentation.

The functions described here allow to obtain pixbufs from
#GdkWindows and cairo surfaces.</doc>
    </docsection>
    <function name="pointer_grab" c:identifier="gdk_pointer_grab" deprecated="1" deprecated-version="3.0">
      <doc xml:space="preserve">Grabs the pointer (usually a mouse) so that all events are passed to this
application until the pointer is ungrabbed with gdk_pointer_ungrab(), or
the grab window becomes unviewable.
This overrides any previous pointer grab by this client.

Pointer grabs are used for operations which need complete control over mouse
events, even if the mouse leaves the application.
For example in GTK+ it is used for Drag and Drop, for dragging the handle in
the #GtkHPaned and #GtkVPaned widgets.

Note that if the event mask of an X window has selected both button press and
button release events, then a button press event will cause an automatic
pointer grab until the button is released.
X does this automatically since most applications expect to receive button
press and release events in pairs.
It is equivalent to a pointer grab on the window with @owner_events set to
%TRUE.

If you set up anything at the time you take the grab that needs to be cleaned
up when the grab ends, you should handle the #GdkEventGrabBroken events that
are emitted when the grab ends unvoluntarily.</doc>
      <doc-deprecated xml:space="preserve">Use gdk_device_grab() instead.</doc-deprecated>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">%GDK_GRAB_SUCCESS if the grab was successful.</doc>
        <type name="GrabStatus" c:type="GdkGrabStatus"/>
      </return-value>
      <parameters>
        <parameter name="window" transfer-ownership="none">
          <doc xml:space="preserve">the #GdkWindow which will own the grab (the grab window).</doc>
          <type name="Window" c:type="GdkWindow*"/>
        </parameter>
        <parameter name="owner_events" transfer-ownership="none">
          <doc xml:space="preserve">if %FALSE then all pointer events are reported with respect to
               @window and are only reported if selected by @event_mask. If %TRUE then pointer
               events for this application are reported as normal, but pointer events outside
               this application are reported with respect to @window and only if selected by
               @event_mask. In either mode, unreported events are discarded.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="event_mask" transfer-ownership="none">
          <doc xml:space="preserve">specifies the event mask, which is used in accordance with
             @owner_events. Note that only pointer events (i.e. button and motion events)
             may be selected.</doc>
          <type name="EventMask" c:type="GdkEventMask"/>
        </parameter>
        <parameter name="confine_to" transfer-ownership="none" nullable="1" allow-none="1">
          <doc xml:space="preserve">If non-%NULL, the pointer will be confined to this
             window during the grab. If the pointer is outside @confine_to, it will
             automatically be moved to the closest edge of @confine_to and enter
             and leave events will be generated as necessary.</doc>
          <type name="Window" c:type="GdkWindow*"/>
        </parameter>
        <parameter name="cursor" transfer-ownership="none" nullable="1" allow-none="1">
          <doc xml:space="preserve">the cursor to display while the grab is active. If this is %NULL then
         the normal cursors are used for @window and its descendants, and the cursor
         for @window is used for all other windows.</doc>
          <type name="Cursor" c:type="GdkCursor*"/>
        </parameter>
        <parameter name="time_" transfer-ownership="none">
          <doc xml:space="preserve">the timestamp of the event which led to this pointer grab. This usually
        comes from a #GdkEventButton struct, though %GDK_CURRENT_TIME can be used if
        the time isn&#x2019;t known.</doc>
          <type name="guint32" c:type="guint32"/>
        </parameter>
      </parameters>
    </function>
    <function name="pointer_is_grabbed" c:identifier="gdk_pointer_is_grabbed" deprecated="1" deprecated-version="3.0">
      <doc xml:space="preserve">Returns %TRUE if the pointer on the default display is currently
grabbed by this application.

Note that this does not take the inmplicit pointer grab on button
presses into account.</doc>
      <doc-deprecated xml:space="preserve">Use gdk_display_device_is_grabbed() instead.</doc-deprecated>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">%TRUE if the pointer is currently grabbed by this application.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
    </function>
    <function name="pointer_ungrab" c:identifier="gdk_pointer_ungrab" deprecated="1" deprecated-version="3.0">
      <doc xml:space="preserve">Ungrabs the pointer on the default display, if it is grabbed by this
application.</doc>
      <doc-deprecated xml:space="preserve">Use gdk_device_ungrab(), together with gdk_device_grab()
            instead.</doc-deprecated>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="time_" transfer-ownership="none">
          <doc xml:space="preserve">a timestamp from a #GdkEvent, or %GDK_CURRENT_TIME if no
 timestamp is available.</doc>
          <type name="guint32" c:type="guint32"/>
        </parameter>
      </parameters>
    </function>
    <function name="pre_parse_libgtk_only" c:identifier="gdk_pre_parse_libgtk_only" deprecated="1" deprecated-version="3.16">
      <doc xml:space="preserve">Prepare for parsing command line arguments for GDK. This is not
public API and should not be used in application code.</doc>
      <doc-deprecated xml:space="preserve">This symbol was never meant to be used outside
  of GTK+</doc-deprecated>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <docsection name="properties">
      <doc xml:space="preserve">Each window under X can have any number of associated
&#x201C;properties&#x201D; attached to it.
Properties are arbitrary chunks of data identified by
&#x201C;atom&#x201D;s. (An &#x201C;atom&#x201D;
is a numeric index into a string table on the X server. They are used
to transfer strings efficiently between clients without
having to transfer the entire string.) A property
has an associated type, which is also identified
using an atom.

A property has an associated &#x201C;format&#x201D;,
an integer describing how many bits are in each unit
of data inside the property. It must be 8, 16, or 32.
When data is transferred between the server and client,
if they are of different endianesses it will be byteswapped
as necessary according to the format of the property.
Note that on the client side, properties of format 32
will be stored with one unit per long,
even if a long integer has more than 32 bits on the platform.
(This decision was apparently made for Xlib to maintain
compatibility with programs that assumed longs were 32
bits, at the expense of programs that knew better.)

The functions in this section are used to add, remove
and change properties on windows, to convert atoms
to and from strings and to manipulate some types of
data commonly stored in X window properties.</doc>
    </docsection>
    <function name="property_change" c:identifier="gdk_property_change" introspectable="0">
      <doc xml:space="preserve">Changes the contents of a property on a window.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="window" transfer-ownership="none">
          <doc xml:space="preserve">a #GdkWindow</doc>
          <type name="Window" c:type="GdkWindow*"/>
        </parameter>
        <parameter name="property" transfer-ownership="none">
          <doc xml:space="preserve">the property to change</doc>
          <type name="Atom" c:type="GdkAtom"/>
        </parameter>
        <parameter name="type" transfer-ownership="none">
          <doc xml:space="preserve">the new type for the property. If @mode is
  %GDK_PROP_MODE_PREPEND or %GDK_PROP_MODE_APPEND, then this
  must match the existing type or an error will occur.</doc>
          <type name="Atom" c:type="GdkAtom"/>
        </parameter>
        <parameter name="format" transfer-ownership="none">
          <doc xml:space="preserve">the new format for the property. If @mode is
  %GDK_PROP_MODE_PREPEND or %GDK_PROP_MODE_APPEND, then this
  must match the existing format or an error will occur.</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="mode" transfer-ownership="none">
          <doc xml:space="preserve">a value describing how the new data is to be combined
  with the current data.</doc>
          <type name="PropMode" c:type="GdkPropMode"/>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <doc xml:space="preserve">the data (a `guchar *`
  `gushort *`, or `gulong *`,
  depending on @format), cast to a `guchar *`.</doc>
          <type name="guint8" c:type="const guchar*"/>
        </parameter>
        <parameter name="nelements" transfer-ownership="none">
          <doc xml:space="preserve">the number of elements of size determined by the format,
  contained in @data.</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="property_delete" c:identifier="gdk_property_delete">
      <doc xml:space="preserve">Deletes a property from a window.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="window" transfer-ownership="none">
          <doc xml:space="preserve">a #GdkWindow</doc>
          <type name="Window" c:type="GdkWindow*"/>
        </parameter>
        <parameter name="property" transfer-ownership="none">
          <doc xml:space="preserve">the property to delete</doc>
          <type name="Atom" c:type="GdkAtom"/>
        </parameter>
      </parameters>
    </function>
    <function name="property_get" c:identifier="gdk_property_get">
      <doc xml:space="preserve">Retrieves a portion of the contents of a property. If the
property does not exist, then the function returns %FALSE,
and %GDK_NONE will be stored in @actual_property_type.

The XGetWindowProperty() function that gdk_property_get()
uses has a very confusing and complicated set of semantics.
Unfortunately, gdk_property_get() makes the situation
worse instead of better (the semantics should be considered
undefined), and also prints warnings to stderr in cases where it
should return a useful error to the program. You are advised to use
XGetWindowProperty() directly until a replacement function for
gdk_property_get() is provided.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">%TRUE if data was successfully received and stored
  in @data, otherwise %FALSE.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="window" transfer-ownership="none">
          <doc xml:space="preserve">a #GdkWindow</doc>
          <type name="Window" c:type="GdkWindow*"/>
        </parameter>
        <parameter name="property" transfer-ownership="none">
          <doc xml:space="preserve">the property to retrieve</doc>
          <type name="Atom" c:type="GdkAtom"/>
        </parameter>
        <parameter name="type" transfer-ownership="none">
          <doc xml:space="preserve">the desired property type, or %GDK_NONE, if any type of data
  is acceptable. If this does not match the actual
  type, then @actual_format and @actual_length will
  be filled in, a warning will be printed to stderr
  and no data will be returned.</doc>
          <type name="Atom" c:type="GdkAtom"/>
        </parameter>
        <parameter name="offset" transfer-ownership="none">
          <doc xml:space="preserve">the offset into the property at which to begin
  retrieving data, in 4 byte units.</doc>
          <type name="gulong" c:type="gulong"/>
        </parameter>
        <parameter name="length" transfer-ownership="none">
          <doc xml:space="preserve">the length of the data to retrieve in bytes.  Data is
  considered to be retrieved in 4 byte chunks, so @length
  will be rounded up to the next highest 4 byte boundary
  (so be careful not to pass a value that might overflow
  when rounded up).</doc>
          <type name="gulong" c:type="gulong"/>
        </parameter>
        <parameter name="pdelete" transfer-ownership="none">
          <doc xml:space="preserve">if %TRUE, delete the property after retrieving the
  data.</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="actual_property_type" direction="out" caller-allocates="1" transfer-ownership="none">
          <doc xml:space="preserve">location to store the
  actual type of the property.</doc>
          <type name="Atom" c:type="GdkAtom*"/>
        </parameter>
        <parameter name="actual_format" direction="out" caller-allocates="0" transfer-ownership="full">
          <doc xml:space="preserve">location to store the actual return format of the
  data; either 8, 16 or 32 bits.</doc>
          <type name="gint" c:type="gint*"/>
        </parameter>
        <parameter name="actual_length" direction="out" caller-allocates="0" transfer-ownership="full">
          <doc xml:space="preserve">location to store the length of the retrieved data, in
  bytes.  Data returned in the 32 bit format is stored
  in a long variable, so the actual number of 32 bit
  elements should be be calculated via
  @actual_length / sizeof(glong) to ensure portability to
  64 bit systems.</doc>
          <type name="gint" c:type="gint*"/>
        </parameter>
        <parameter name="data" direction="out" caller-allocates="0" transfer-ownership="full">
          <doc xml:space="preserve">location
  to store a pointer to the data. The retrieved data should be
  freed with g_free() when you are finished using it.</doc>
          <array length="8" zero-terminated="0" c:type="guchar**">
            <type name="guint8" c:type="guchar*"/>
          </array>
        </parameter>
      </parameters>
    </function>
    <function name="query_depths" c:identifier="gdk_query_depths" deprecated="1" deprecated-version="3.22">
      <doc xml:space="preserve">This function returns the available bit depths for the default
screen. It&#x2019;s equivalent to listing the visuals
(gdk_list_visuals()) and then looking at the depth field in each
visual, removing duplicates.

The array returned by this function should not be freed.</doc>
      <doc-deprecated xml:space="preserve">Visual selection should be done using
    gdk_screen_get_system_visual() and gdk_screen_get_rgba_visual()</doc-deprecated>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="depths" direction="out" caller-allocates="0" transfer-ownership="none">
          <doc xml:space="preserve">return
    location for available depths</doc>
          <array length="1" zero-terminated="0" c:type="gint**">
            <type name="gint" c:type="gint*"/>
          </array>
        </parameter>
        <parameter name="count" direction="out" caller-allocates="0" transfer-ownership="full">
          <doc xml:space="preserve">return location for number of available depths</doc>
          <type name="gint" c:type="gint*"/>
        </parameter>
      </parameters>
    </function>
    <function name="query_visual_types" c:identifier="gdk_query_visual_types" deprecated="1" deprecated-version="3.22">
      <doc xml:space="preserve">This function returns the available visual types for the default
screen. It&#x2019;s equivalent to listing the visuals
(gdk_list_visuals()) and then looking at the type field in each
visual, removing duplicates.

The array returned by this function should not be freed.</doc>
      <doc-deprecated xml:space="preserve">Visual selection should be done using
    gdk_screen_get_system_visual() and gdk_screen_get_rgba_visual()</doc-deprecated>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="visual_types" direction="out" caller-allocates="0" transfer-ownership="none">
          <doc xml:space="preserve">return
    location for the available visual types</doc>
          <array length="1" zero-terminated="0" c:type="GdkVisualType**">
            <type name="VisualType" c:type="GdkVisualType*"/>
          </array>
        </parameter>
        <parameter name="count" direction="out" caller-allocates="0" transfer-ownership="full">
          <doc xml:space="preserve">return location for the number of available visual types</doc>
          <type name="gint" c:type="gint*"/>
        </parameter>
      </parameters>
    </function>
    <docsection name="regions">
      <doc xml:space="preserve">GDK provides the #GdkPoint and #GdkRectangle data types for representing pixels
and sets of pixels on the screen. Together with Cairo&#x2019;s #cairo_region_t data
type, they make up the central types for representing graphical data.

A #GdkPoint represents an x and y coordinate of a point.

A #GdkRectangle represents the position and size of a rectangle.
The intersection of two rectangles can be computed with
gdk_rectangle_intersect(). To find the union of two rectangles use
gdk_rectangle_union().

#cairo_region_t is usually used for managing clipping of graphical operations.</doc>
    </docsection>
    <docsection name="rgba_colors">
      <doc xml:space="preserve">#GdkRGBA is a convenient way to pass rgba colors around.
It&#x2019;s based on cairo&#x2019;s way to deal with colors and mirrors its behavior.
All values are in the range from 0.0 to 1.0 inclusive. So the color
(0.0, 0.0, 0.0, 0.0) represents transparent black and
(1.0, 1.0, 1.0, 1.0) is opaque white. Other values will be clamped
to this range when drawing.</doc>
    </docsection>
    <function name="selection_convert" c:identifier="gdk_selection_convert">
      <doc xml:space="preserve">Retrieves the contents of a selection in a given
form.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="requestor" transfer-ownership="none">
          <doc xml:space="preserve">a #GdkWindow.</doc>
          <type name="Window" c:type="GdkWindow*"/>
        </parameter>
        <parameter name="selection" transfer-ownership="none">
          <doc xml:space="preserve">an atom identifying the selection to get the
  contents of.</doc>
          <type name="Atom" c:type="GdkAtom"/>
        </parameter>
        <parameter name="target" transfer-ownership="none">
          <doc xml:space="preserve">the form in which to retrieve the selection.</doc>
          <type name="Atom" c:type="GdkAtom"/>
        </parameter>
        <parameter name="time_" transfer-ownership="none">
          <doc xml:space="preserve">the timestamp to use when retrieving the
  selection. The selection owner may refuse the
  request if it did not own the selection at
  the time indicated by the timestamp.</doc>
          <type name="guint32" c:type="guint32"/>
        </parameter>
      </parameters>
    </function>
    <function name="selection_owner_get" c:identifier="gdk_selection_owner_get">
      <doc xml:space="preserve">Determines the owner of the given selection.</doc>
      <return-value transfer-ownership="none" nullable="1">
        <doc xml:space="preserve">if there is a selection owner
  for this window, and it is a window known to the current process,
  the #GdkWindow that owns the selection, otherwise %NULL. Note
  that the return value may be owned by a different process if a
  foreign window was previously created for that window, but a new
  foreign window will never be created by this call.</doc>
        <type name="Window" c:type="GdkWindow*"/>
      </return-value>
      <parameters>
        <parameter name="selection" transfer-ownership="none">
          <doc xml:space="preserve">an atom indentifying a selection.</doc>
          <type name="Atom" c:type="GdkAtom"/>
        </parameter>
      </parameters>
    </function>
    <function name="selection_owner_get_for_display" c:identifier="gdk_selection_owner_get_for_display" version="2.2">
      <doc xml:space="preserve">Determine the owner of the given selection.

Note that the return value may be owned by a different
process if a foreign window was previously created for that
window, but a new foreign window will never be created by this call.</doc>
      <return-value transfer-ownership="none" nullable="1">
        <doc xml:space="preserve">if there is a selection owner
   for this window, and it is a window known to the current
   process, the #GdkWindow that owns the selection, otherwise
   %NULL.</doc>
        <type name="Window" c:type="GdkWindow*"/>
      </return-value>
      <parameters>
        <parameter name="display" transfer-ownership="none">
          <doc xml:space="preserve">a #GdkDisplay</doc>
          <type name="Display" c:type="GdkDisplay*"/>
        </parameter>
        <parameter name="selection" transfer-ownership="none">
          <doc xml:space="preserve">an atom indentifying a selection</doc>
          <type name="Atom" c:type="GdkAtom"/>
        </parameter>
      </parameters>
    </function>
    <function name="selection_owner_set" c:identifier="gdk_selection_owner_set">
      <doc xml:space="preserve">Sets the owner of the given selection.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">%TRUE if the selection owner was successfully
  changed to @owner, otherwise %FALSE.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="owner" transfer-ownership="none" nullable="1" allow-none="1">
          <doc xml:space="preserve">a #GdkWindow or %NULL to indicate that the
  the owner for the given should be unset.</doc>
          <type name="Window" c:type="GdkWindow*"/>
        </parameter>
        <parameter name="selection" transfer-ownership="none">
          <doc xml:space="preserve">an atom identifying a selection.</doc>
          <type name="Atom" c:type="GdkAtom"/>
        </parameter>
        <parameter name="time_" transfer-ownership="none">
          <doc xml:space="preserve">timestamp to use when setting the selection.
  If this is older than the timestamp given last
  time the owner was set for the given selection, the
  request will be ignored.</doc>
          <type name="guint32" c:type="guint32"/>
        </parameter>
        <parameter name="send_event" transfer-ownership="none">
          <doc xml:space="preserve">if %TRUE, and the new owner is different
  from the current owner, the current owner
  will be sent a SelectionClear event.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="selection_owner_set_for_display" c:identifier="gdk_selection_owner_set_for_display" version="2.2">
      <doc xml:space="preserve">Sets the #GdkWindow @owner as the current owner of the selection @selection.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">%TRUE if the selection owner was successfully changed to owner,
   otherwise %FALSE.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="display" transfer-ownership="none">
          <doc xml:space="preserve">the #GdkDisplay</doc>
          <type name="Display" c:type="GdkDisplay*"/>
        </parameter>
        <parameter name="owner" transfer-ownership="none" nullable="1" allow-none="1">
          <doc xml:space="preserve">a #GdkWindow or %NULL to indicate that the owner for
        the given should be unset</doc>
          <type name="Window" c:type="GdkWindow*"/>
        </parameter>
        <parameter name="selection" transfer-ownership="none">
          <doc xml:space="preserve">an atom identifying a selection</doc>
          <type name="Atom" c:type="GdkAtom"/>
        </parameter>
        <parameter name="time_" transfer-ownership="none">
          <doc xml:space="preserve">timestamp to use when setting the selection
        If this is older than the timestamp given last time the owner was
        set for the given selection, the request will be ignored</doc>
          <type name="guint32" c:type="guint32"/>
        </parameter>
        <parameter name="send_event" transfer-ownership="none">
          <doc xml:space="preserve">if %TRUE, and the new owner is different from the current
             owner, the current owner will be sent a SelectionClear event</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="selection_property_get" c:identifier="gdk_selection_property_get" introspectable="0">
      <doc xml:space="preserve">Retrieves selection data that was stored by the selection
data in response to a call to gdk_selection_convert(). This function
will not be used by applications, who should use the #GtkClipboard
API instead.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">the length of the retrieved data.</doc>
        <type name="gint" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="requestor" transfer-ownership="none">
          <doc xml:space="preserve">the window on which the data is stored</doc>
          <type name="Window" c:type="GdkWindow*"/>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <doc xml:space="preserve">location to store a pointer to the retrieved data.
       If the retrieval failed, %NULL we be stored here, otherwise, it
       will be non-%NULL and the returned data should be freed with g_free()
       when you are finished using it. The length of the
       allocated memory is one more than the length
       of the returned data, and the final byte will always
       be zero, to ensure nul-termination of strings</doc>
          <type name="guint8" c:type="guchar**"/>
        </parameter>
        <parameter name="prop_type" transfer-ownership="none">
          <doc xml:space="preserve">location to store the type of the property</doc>
          <type name="Atom" c:type="GdkAtom*"/>
        </parameter>
        <parameter name="prop_format" transfer-ownership="none">
          <doc xml:space="preserve">location to store the format of the property</doc>
          <type name="gint" c:type="gint*"/>
        </parameter>
      </parameters>
    </function>
    <function name="selection_send_notify" c:identifier="gdk_selection_send_notify">
      <doc xml:space="preserve">Sends a response to SelectionRequest event.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="requestor" transfer-ownership="none">
          <doc xml:space="preserve">window to which to deliver response.</doc>
          <type name="Window" c:type="GdkWindow*"/>
        </parameter>
        <parameter name="selection" transfer-ownership="none">
          <doc xml:space="preserve">selection that was requested.</doc>
          <type name="Atom" c:type="GdkAtom"/>
        </parameter>
        <parameter name="target" transfer-ownership="none">
          <doc xml:space="preserve">target that was selected.</doc>
          <type name="Atom" c:type="GdkAtom"/>
        </parameter>
        <parameter name="property" transfer-ownership="none">
          <doc xml:space="preserve">property in which the selection owner stored the
  data, or %GDK_NONE to indicate that the request
  was rejected.</doc>
          <type name="Atom" c:type="GdkAtom"/>
        </parameter>
        <parameter name="time_" transfer-ownership="none">
          <doc xml:space="preserve">timestamp.</doc>
          <type name="guint32" c:type="guint32"/>
        </parameter>
      </parameters>
    </function>
    <function name="selection_send_notify_for_display" c:identifier="gdk_selection_send_notify_for_display" version="2.2">
      <doc xml:space="preserve">Send a response to SelectionRequest event.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="display" transfer-ownership="none">
          <doc xml:space="preserve">the #GdkDisplay where @requestor is realized</doc>
          <type name="Display" c:type="GdkDisplay*"/>
        </parameter>
        <parameter name="requestor" transfer-ownership="none">
          <doc xml:space="preserve">window to which to deliver response</doc>
          <type name="Window" c:type="GdkWindow*"/>
        </parameter>
        <parameter name="selection" transfer-ownership="none">
          <doc xml:space="preserve">selection that was requested</doc>
          <type name="Atom" c:type="GdkAtom"/>
        </parameter>
        <parameter name="target" transfer-ownership="none">
          <doc xml:space="preserve">target that was selected</doc>
          <type name="Atom" c:type="GdkAtom"/>
        </parameter>
        <parameter name="property" transfer-ownership="none">
          <doc xml:space="preserve">property in which the selection owner stored the data,
           or %GDK_NONE to indicate that the request was rejected</doc>
          <type name="Atom" c:type="GdkAtom"/>
        </parameter>
        <parameter name="time_" transfer-ownership="none">
          <doc xml:space="preserve">timestamp</doc>
          <type name="guint32" c:type="guint32"/>
        </parameter>
      </parameters>
    </function>
    <docsection name="selections">
      <doc xml:space="preserve">GDK&#x2019;s selection functions, based on the [X selection mechanism](
https://www.x.org/releases/X11R7.6/doc/xorg-docs/specs/ICCCM/icccm.html),
provide a way to transfer arbitrary chunks of
data between programs. A &#x201C;selection&#x201D; is a essentially
a named clipboard, identified by a string interned as a #GdkAtom. By
claiming ownership of a selection, an application indicates that it will
be responsible for supplying its contents. The most common selections are
`PRIMARY` and `CLIPBOARD`.

The contents of a selection can be represented in a number of formats,
called &#x201C;targets&#x201D;. Each target is identified by an atom.
A list of all possible targets supported by the selection owner can be
retrieved by requesting the special target `TARGETS`. When
a selection is retrieved, the data is accompanied by a type (an atom), and
a format (an integer, representing the number of bits per item).
See [Properties and Atoms][gdk3-Properties-and-Atoms]
for more information.

The functions in this section only contain the lowlevel parts of the
selection protocol. A considerably more complicated implementation is needed
on top of this. GTK+ contains such an implementation in the functions in
`gtkselection.h` and programmers should use those functions
instead of the ones presented here. If you plan to implement selection
handling directly on top of the functions here, you should refer to the
[X Inter-Client Communication Conventions Manual (ICCCM)](
https://www.x.org/releases/X11R7.6/doc/xorg-docs/specs/ICCCM/icccm.html).

Note that although much of the selection API design is based on that of X,
it will work on other GDK backends too.</doc>
    </docsection>
    <function name="set_allowed_backends" c:identifier="gdk_set_allowed_backends" version="3.10">
      <doc xml:space="preserve">Sets a list of backends that GDK should try to use.

This can be be useful if your application does not
work with certain GDK backends.

By default, GDK tries all included backends.

For example,
|[&lt;!-- language="C" --&gt;
gdk_set_allowed_backends ("wayland,quartz,*");
]|
instructs GDK to try the Wayland backend first,
followed by the Quartz backend, and then all
others.

If the `GDK_BACKEND` environment variable
is set, it determines what backends are tried in what
order, while still respecting the set of allowed backends
that are specified by this function.

The possible backend names are x11, win32, quartz,
broadway, wayland. You can also include a * in the
list to try all remaining backends.

This call must happen prior to gdk_display_open(),
gtk_init(), gtk_init_with_args() or gtk_init_check()
in order to take effect.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="backends" transfer-ownership="none">
          <doc xml:space="preserve">a comma-separated list of backends</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="set_double_click_time" c:identifier="gdk_set_double_click_time">
      <doc xml:space="preserve">Set the double click time for the default display. See
gdk_display_set_double_click_time().
See also gdk_display_set_double_click_distance().
Applications should not set this, it is a
global user-configured setting.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="msec" transfer-ownership="none">
          <doc xml:space="preserve">double click time in milliseconds (thousandths of a second)</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="set_program_class" c:identifier="gdk_set_program_class">
      <doc xml:space="preserve">Sets the program class. The X11 backend uses the program class to set
the class name part of the `WM_CLASS` property on
toplevel windows; see the ICCCM.

The program class can still be overridden with the --class command
line option.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="program_class" transfer-ownership="none">
          <doc xml:space="preserve">a string.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="set_show_events" c:identifier="gdk_set_show_events">
      <doc xml:space="preserve">Sets whether a trace of received events is output.
Note that GTK+ must be compiled with debugging (that is,
configured using the `--enable-debug` option)
to use this option.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="show_events" transfer-ownership="none">
          <doc xml:space="preserve">%TRUE to output event debugging information.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="setting_get" c:identifier="gdk_setting_get">
      <doc xml:space="preserve">Obtains a desktop-wide setting, such as the double-click time,
for the default screen. See gdk_screen_get_setting().</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">%TRUE if the setting existed and a value was stored
  in @value, %FALSE otherwise.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve">the name of the setting.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve">location to store the value of the setting.</doc>
          <type name="GObject.Value" c:type="GValue*"/>
        </parameter>
      </parameters>
    </function>
    <function name="synthesize_window_state" c:identifier="gdk_synthesize_window_state">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="window" transfer-ownership="none">
          <type name="Window" c:type="GdkWindow*"/>
        </parameter>
        <parameter name="unset_flags" transfer-ownership="none">
          <type name="WindowState" c:type="GdkWindowState"/>
        </parameter>
        <parameter name="set_flags" transfer-ownership="none">
          <type name="WindowState" c:type="GdkWindowState"/>
        </parameter>
      </parameters>
    </function>
    <function name="test_render_sync" c:identifier="gdk_test_render_sync" version="2.14">
      <doc xml:space="preserve">Retrieves a pixel from @window to force the windowing
system to carry out any pending rendering commands.

This function is intended to be used to synchronize with rendering
pipelines, to benchmark windowing system rendering operations.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="window" transfer-ownership="none">
          <doc xml:space="preserve">a mapped #GdkWindow</doc>
          <type name="Window" c:type="GdkWindow*"/>
        </parameter>
      </parameters>
    </function>
    <function name="test_simulate_button" c:identifier="gdk_test_simulate_button" version="2.14">
      <doc xml:space="preserve">This function is intended to be used in GTK+ test programs.
It will warp the mouse pointer to the given (@x,@y) coordinates
within @window and simulate a button press or release event.
Because the mouse pointer needs to be warped to the target
location, use of this function outside of test programs that
run in their own virtual windowing system (e.g. Xvfb) is not
recommended.

Also, gdk_test_simulate_button() is a fairly low level function,
for most testing purposes, gtk_test_widget_click() is the right
function to call which will generate a button press event followed
by its accompanying button release event.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">whether all actions necessary for a button event simulation
    were carried out successfully</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="window" transfer-ownership="none">
          <doc xml:space="preserve">a #GdkWindow to simulate a button event for</doc>
          <type name="Window" c:type="GdkWindow*"/>
        </parameter>
        <parameter name="x" transfer-ownership="none">
          <doc xml:space="preserve">x coordinate within @window for the button event</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="y" transfer-ownership="none">
          <doc xml:space="preserve">y coordinate within @window for the button event</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="button" transfer-ownership="none">
          <doc xml:space="preserve">Number of the pointer button for the event, usually 1, 2 or 3</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="modifiers" transfer-ownership="none">
          <doc xml:space="preserve">Keyboard modifiers the event is setup with</doc>
          <type name="ModifierType" c:type="GdkModifierType"/>
        </parameter>
        <parameter name="button_pressrelease" transfer-ownership="none">
          <doc xml:space="preserve">either %GDK_BUTTON_PRESS or %GDK_BUTTON_RELEASE</doc>
          <type name="EventType" c:type="GdkEventType"/>
        </parameter>
      </parameters>
    </function>
    <function name="test_simulate_key" c:identifier="gdk_test_simulate_key" version="2.14">
      <doc xml:space="preserve">This function is intended to be used in GTK+ test programs.
If (@x,@y) are &gt; (-1,-1), it will warp the mouse pointer to
the given (@x,@y) coordinates within @window and simulate a
key press or release event.

When the mouse pointer is warped to the target location, use
of this function outside of test programs that run in their
own virtual windowing system (e.g. Xvfb) is not recommended.
If (@x,@y) are passed as (-1,-1), the mouse pointer will not
be warped and @window origin will be used as mouse pointer
location for the event.

Also, gdk_test_simulate_key() is a fairly low level function,
for most testing purposes, gtk_test_widget_send_key() is the
right function to call which will generate a key press event
followed by its accompanying key release event.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">whether all actions necessary for a key event simulation
    were carried out successfully</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="window" transfer-ownership="none">
          <doc xml:space="preserve">a #GdkWindow to simulate a key event for</doc>
          <type name="Window" c:type="GdkWindow*"/>
        </parameter>
        <parameter name="x" transfer-ownership="none">
          <doc xml:space="preserve">x coordinate within @window for the key event</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="y" transfer-ownership="none">
          <doc xml:space="preserve">y coordinate within @window for the key event</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="keyval" transfer-ownership="none">
          <doc xml:space="preserve">A GDK keyboard value</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="modifiers" transfer-ownership="none">
          <doc xml:space="preserve">Keyboard modifiers the event is setup with</doc>
          <type name="ModifierType" c:type="GdkModifierType"/>
        </parameter>
        <parameter name="key_pressrelease" transfer-ownership="none">
          <doc xml:space="preserve">either %GDK_KEY_PRESS or %GDK_KEY_RELEASE</doc>
          <type name="EventType" c:type="GdkEventType"/>
        </parameter>
      </parameters>
    </function>
    <function name="text_property_to_utf8_list_for_display" c:identifier="gdk_text_property_to_utf8_list_for_display" version="2.2">
      <doc xml:space="preserve">Converts a text property in the given encoding to
a list of UTF-8 strings.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">the number of strings in the resulting list</doc>
        <type name="gint" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="display" transfer-ownership="none">
          <doc xml:space="preserve">a #GdkDisplay</doc>
          <type name="Display" c:type="GdkDisplay*"/>
        </parameter>
        <parameter name="encoding" transfer-ownership="none">
          <doc xml:space="preserve">an atom representing the encoding of the text</doc>
          <type name="Atom" c:type="GdkAtom"/>
        </parameter>
        <parameter name="format" transfer-ownership="none">
          <doc xml:space="preserve">the format of the property</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="text" transfer-ownership="none">
          <doc xml:space="preserve">the text to convert</doc>
          <array length="4" zero-terminated="0" c:type="const guchar*">
            <type name="guint8" c:type="guchar"/>
          </array>
        </parameter>
        <parameter name="length" transfer-ownership="none">
          <doc xml:space="preserve">the length of @text, in bytes</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="list" direction="out" caller-allocates="0" transfer-ownership="full">
          <doc xml:space="preserve">location to store the list
           of strings or %NULL. The list should be freed with
           g_strfreev().</doc>
          <array c:type="gchar***">
            <type name="utf8" c:type="gchar**"/>
          </array>
        </parameter>
      </parameters>
    </function>
    <docsection name="threads">
      <doc xml:space="preserve">For thread safety, GDK relies on the thread primitives in GLib,
and on the thread-safe GLib main loop.

GLib is completely thread safe (all global data is automatically
locked), but individual data structure instances are not automatically
locked for performance reasons. So e.g. you must coordinate
accesses to the same #GHashTable from multiple threads.

GTK+, however, is not thread safe. You should only use GTK+ and GDK
from the thread gtk_init() and gtk_main() were called on.
This is usually referred to as the &#x201C;main thread&#x201D;.

Signals on GTK+ and GDK types, as well as non-signal callbacks, are
emitted in the main thread.

You can schedule work in the main thread safely from other threads
by using gdk_threads_add_idle() and gdk_threads_add_timeout():

|[&lt;!-- language="C" --&gt;
static void
worker_thread (void)
{
  ExpensiveData *expensive_data = do_expensive_computation ();

  gdk_threads_add_idle (got_value, expensive_data);
}

static gboolean
got_value (gpointer user_data)
{
  ExpensiveData *expensive_data = user_data;

  my_app-&gt;expensive_data = expensive_data;
  gtk_button_set_sensitive (my_app-&gt;button, TRUE);
  gtk_button_set_label (my_app-&gt;button, expensive_data-&gt;result_label);

  return G_SOURCE_REMOVE;
}
]|

You should use gdk_threads_add_idle() and gdk_threads_add_timeout()
instead of g_idle_add() and g_timeout_add() since libraries not under
your control might be using the deprecated GDK locking mechanism.
If you are sure that none of the code in your application and libraries
use the deprecated gdk_threads_enter() or gdk_threads_leave() methods,
then you can safely use g_idle_add() and g_timeout_add().

For more information on this "worker thread" pattern, you should
also look at #GTask, which gives you high-level tools to perform
expensive tasks from worker threads, and will handle thread
management for you.</doc>
    </docsection>
    <function name="threads_add_idle" c:identifier="gdk_threads_add_idle" shadowed-by="threads_add_idle_full" version="2.12" introspectable="0">
      <doc xml:space="preserve">A wrapper for the common usage of gdk_threads_add_idle_full()
assigning the default priority, #G_PRIORITY_DEFAULT_IDLE.

See gdk_threads_add_idle_full().</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">the ID (greater than 0) of the event source.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="function" transfer-ownership="none" closure="1">
          <doc xml:space="preserve">function to call</doc>
          <type name="GLib.SourceFunc" c:type="GSourceFunc"/>
        </parameter>
        <parameter name="data" transfer-ownership="none" nullable="1" allow-none="1">
          <doc xml:space="preserve">data to pass to @function</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="threads_add_idle_full" c:identifier="gdk_threads_add_idle_full" shadows="threads_add_idle" version="2.12">
      <doc xml:space="preserve">Adds a function to be called whenever there are no higher priority
events pending.  If the function returns %FALSE it is automatically
removed from the list of event sources and will not be called again.

This variant of g_idle_add_full() calls @function with the GDK lock
held. It can be thought of a MT-safe version for GTK+ widgets for the
following use case, where you have to worry about idle_callback()
running in thread A and accessing @self after it has been finalized
in thread B:

|[&lt;!-- language="C" --&gt;
static gboolean
idle_callback (gpointer data)
{
   // gdk_threads_enter(); would be needed for g_idle_add()

   SomeWidget *self = data;
   // do stuff with self

   self-&gt;idle_id = 0;

   // gdk_threads_leave(); would be needed for g_idle_add()
   return FALSE;
}

static void
some_widget_do_stuff_later (SomeWidget *self)
{
   self-&gt;idle_id = gdk_threads_add_idle (idle_callback, self)
   // using g_idle_add() here would require thread protection in the callback
}

static void
some_widget_finalize (GObject *object)
{
   SomeWidget *self = SOME_WIDGET (object);
   if (self-&gt;idle_id)
     g_source_remove (self-&gt;idle_id);
   G_OBJECT_CLASS (parent_class)-&gt;finalize (object);
}
]|</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">the ID (greater than 0) of the event source.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="priority" transfer-ownership="none">
          <doc xml:space="preserve">the priority of the idle source. Typically this will be in the
           range between #G_PRIORITY_DEFAULT_IDLE and #G_PRIORITY_HIGH_IDLE</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="function" transfer-ownership="none" scope="notified" closure="2" destroy="3">
          <doc xml:space="preserve">function to call</doc>
          <type name="GLib.SourceFunc" c:type="GSourceFunc"/>
        </parameter>
        <parameter name="data" transfer-ownership="none" nullable="1" allow-none="1">
          <doc xml:space="preserve">data to pass to @function</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="notify" transfer-ownership="none" nullable="1" allow-none="1" scope="async">
          <doc xml:space="preserve">function to call when the idle is removed, or %NULL</doc>
          <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
        </parameter>
      </parameters>
    </function>
    <function name="threads_add_timeout" c:identifier="gdk_threads_add_timeout" shadowed-by="threads_add_timeout_full" version="2.12" introspectable="0">
      <doc xml:space="preserve">A wrapper for the common usage of gdk_threads_add_timeout_full()
assigning the default priority, #G_PRIORITY_DEFAULT.

See gdk_threads_add_timeout_full().</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">the ID (greater than 0) of the event source.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="interval" transfer-ownership="none">
          <doc xml:space="preserve">the time between calls to the function, in milliseconds
            (1/1000ths of a second)</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="function" transfer-ownership="none" closure="2">
          <doc xml:space="preserve">function to call</doc>
          <type name="GLib.SourceFunc" c:type="GSourceFunc"/>
        </parameter>
        <parameter name="data" transfer-ownership="none" nullable="1" allow-none="1">
          <doc xml:space="preserve">data to pass to @function</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="threads_add_timeout_full" c:identifier="gdk_threads_add_timeout_full" shadows="threads_add_timeout" version="2.12">
      <doc xml:space="preserve">Sets a function to be called at regular intervals holding the GDK lock,
with the given priority.  The function is called repeatedly until it
returns %FALSE, at which point the timeout is automatically destroyed
and the function will not be called again.  The @notify function is
called when the timeout is destroyed.  The first call to the
function will be at the end of the first @interval.

Note that timeout functions may be delayed, due to the processing of other
event sources. Thus they should not be relied on for precise timing.
After each call to the timeout function, the time of the next
timeout is recalculated based on the current time and the given interval
(it does not try to &#x201C;catch up&#x201D; time lost in delays).

This variant of g_timeout_add_full() can be thought of a MT-safe version
for GTK+ widgets for the following use case:

|[&lt;!-- language="C" --&gt;
static gboolean timeout_callback (gpointer data)
{
   SomeWidget *self = data;
   
   // do stuff with self
   
   self-&gt;timeout_id = 0;
   
   return G_SOURCE_REMOVE;
}
 
static void some_widget_do_stuff_later (SomeWidget *self)
{
   self-&gt;timeout_id = g_timeout_add (timeout_callback, self)
}
 
static void some_widget_finalize (GObject *object)
{
   SomeWidget *self = SOME_WIDGET (object);
   
   if (self-&gt;timeout_id)
     g_source_remove (self-&gt;timeout_id);
   
   G_OBJECT_CLASS (parent_class)-&gt;finalize (object);
}
]|</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">the ID (greater than 0) of the event source.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="priority" transfer-ownership="none">
          <doc xml:space="preserve">the priority of the timeout source. Typically this will be in the
           range between #G_PRIORITY_DEFAULT_IDLE and #G_PRIORITY_HIGH_IDLE.</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="interval" transfer-ownership="none">
          <doc xml:space="preserve">the time between calls to the function, in milliseconds
            (1/1000ths of a second)</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="function" transfer-ownership="none" scope="notified" closure="3" destroy="4">
          <doc xml:space="preserve">function to call</doc>
          <type name="GLib.SourceFunc" c:type="GSourceFunc"/>
        </parameter>
        <parameter name="data" transfer-ownership="none" nullable="1" allow-none="1">
          <doc xml:space="preserve">data to pass to @function</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="notify" transfer-ownership="none" nullable="1" allow-none="1" scope="async">
          <doc xml:space="preserve">function to call when the timeout is removed, or %NULL</doc>
          <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
        </parameter>
      </parameters>
    </function>
    <function name="threads_add_timeout_seconds" c:identifier="gdk_threads_add_timeout_seconds" shadowed-by="threads_add_timeout_seconds_full" version="2.14" introspectable="0">
      <doc xml:space="preserve">A wrapper for the common usage of gdk_threads_add_timeout_seconds_full()
assigning the default priority, #G_PRIORITY_DEFAULT.

For details, see gdk_threads_add_timeout_full().</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">the ID (greater than 0) of the event source.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="interval" transfer-ownership="none">
          <doc xml:space="preserve">the time between calls to the function, in seconds</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="function" transfer-ownership="none" closure="2">
          <doc xml:space="preserve">function to call</doc>
          <type name="GLib.SourceFunc" c:type="GSourceFunc"/>
        </parameter>
        <parameter name="data" transfer-ownership="none" nullable="1" allow-none="1">
          <doc xml:space="preserve">data to pass to @function</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="threads_add_timeout_seconds_full" c:identifier="gdk_threads_add_timeout_seconds_full" shadows="threads_add_timeout_seconds" version="2.14">
      <doc xml:space="preserve">A variant of gdk_threads_add_timeout_full() with second-granularity.
See g_timeout_add_seconds_full() for a discussion of why it is
a good idea to use this function if you don&#x2019;t need finer granularity.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">the ID (greater than 0) of the event source.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="priority" transfer-ownership="none">
          <doc xml:space="preserve">the priority of the timeout source. Typically this will be in the
           range between #G_PRIORITY_DEFAULT_IDLE and #G_PRIORITY_HIGH_IDLE.</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="interval" transfer-ownership="none">
          <doc xml:space="preserve">the time between calls to the function, in seconds</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="function" transfer-ownership="none" scope="notified" closure="3" destroy="4">
          <doc xml:space="preserve">function to call</doc>
          <type name="GLib.SourceFunc" c:type="GSourceFunc"/>
        </parameter>
        <parameter name="data" transfer-ownership="none" nullable="1" allow-none="1">
          <doc xml:space="preserve">data to pass to @function</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="notify" transfer-ownership="none" nullable="1" allow-none="1" scope="async">
          <doc xml:space="preserve">function to call when the timeout is removed, or %NULL</doc>
          <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
        </parameter>
      </parameters>
    </function>
    <function name="threads_enter" c:identifier="gdk_threads_enter" deprecated="1" deprecated-version="3.6">
      <doc xml:space="preserve">This function marks the beginning of a critical section in which
GDK and GTK+ functions can be called safely and without causing race
conditions. Only one thread at a time can be in such a critial
section.</doc>
      <doc-deprecated xml:space="preserve">All GDK and GTK+ calls should be made from the main
    thread</doc-deprecated>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="threads_init" c:identifier="gdk_threads_init" deprecated="1" deprecated-version="3.6">
      <doc xml:space="preserve">Initializes GDK so that it can be used from multiple threads
in conjunction with gdk_threads_enter() and gdk_threads_leave().

This call must be made before any use of the main loop from
GTK+; to be safe, call it before gtk_init().</doc>
      <doc-deprecated xml:space="preserve">All GDK and GTK+ calls should be made from the main
    thread</doc-deprecated>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="threads_leave" c:identifier="gdk_threads_leave" deprecated="1" deprecated-version="3.6">
      <doc xml:space="preserve">Leaves a critical region begun with gdk_threads_enter().</doc>
      <doc-deprecated xml:space="preserve">All GDK and GTK+ calls should be made from the main
    thread</doc-deprecated>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="threads_set_lock_functions" c:identifier="gdk_threads_set_lock_functions" version="2.4" introspectable="0" deprecated="1" deprecated-version="3.6">
      <doc xml:space="preserve">Allows the application to replace the standard method that
GDK uses to protect its data structures. Normally, GDK
creates a single #GMutex that is locked by gdk_threads_enter(),
and released by gdk_threads_leave(); using this function an
application provides, instead, a function @enter_fn that is
called by gdk_threads_enter() and a function @leave_fn that is
called by gdk_threads_leave().

The functions must provide at least same locking functionality
as the default implementation, but can also do extra application
specific processing.

As an example, consider an application that has its own recursive
lock that when held, holds the GTK+ lock as well. When GTK+ unlocks
the GTK+ lock when entering a recursive main loop, the application
must temporarily release its lock as well.

Most threaded GTK+ apps won&#x2019;t need to use this method.

This method must be called before gdk_threads_init(), and cannot
be called multiple times.</doc>
      <doc-deprecated xml:space="preserve">All GDK and GTK+ calls should be made from the main
    thread</doc-deprecated>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="enter_fn" transfer-ownership="none">
          <doc xml:space="preserve">function called to guard GDK</doc>
          <type name="GObject.Callback" c:type="GCallback"/>
        </parameter>
        <parameter name="leave_fn" transfer-ownership="none">
          <doc xml:space="preserve">function called to release the guard</doc>
          <type name="GObject.Callback" c:type="GCallback"/>
        </parameter>
      </parameters>
    </function>
    <function name="unicode_to_keyval" c:identifier="gdk_unicode_to_keyval">
      <doc xml:space="preserve">Convert from a ISO10646 character to a key symbol.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">the corresponding GDK key symbol, if one exists.
              or, if there is no corresponding symbol,
              wc | 0x01000000</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="wc" transfer-ownership="none">
          <doc xml:space="preserve">a ISO10646 encoded character</doc>
          <type name="guint32" c:type="guint32"/>
        </parameter>
      </parameters>
    </function>
    <function name="utf8_to_string_target" c:identifier="gdk_utf8_to_string_target">
      <doc xml:space="preserve">Converts an UTF-8 string into the best possible representation
as a STRING. The representation of characters not in STRING
is not specified; it may be as pseudo-escape sequences
\x{ABCD}, or it may be in some other form of approximation.</doc>
      <return-value transfer-ownership="full" nullable="1">
        <doc xml:space="preserve">the newly-allocated string, or %NULL if the
         conversion failed. (It should not fail for any properly
         formed UTF-8 string unless system limits like memory or
         file descriptors are exceeded.)</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="str" transfer-ownership="none">
          <doc xml:space="preserve">a UTF-8 string</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <docsection name="visuals">
      <doc xml:space="preserve">A #GdkVisual describes a particular video hardware display format.
It includes information about the number of bits used for each color,
the way the bits are translated into an RGB value for display, and
the way the bits are stored in memory. For example, a piece of display
hardware might support 24-bit color, 16-bit color, or 8-bit color;
meaning 24/16/8-bit pixel sizes. For a given pixel size, pixels can
be in different formats; for example the &#x201C;red&#x201D; element of an RGB pixel
may be in the top 8 bits of the pixel, or may be in the lower 4 bits.

There are several standard visuals. The visual returned by
gdk_screen_get_system_visual() is the system&#x2019;s default visual, and
the visual returned by gdk_screen_get_rgba_visual() should be used for
creating windows with an alpha channel.

A number of functions are provided for determining the &#x201C;best&#x201D; available
visual. For the purposes of making this determination, higher bit depths
are considered better, and for visuals of the same bit depth,
%GDK_VISUAL_PSEUDO_COLOR is preferred at 8bpp, otherwise, the visual
types are ranked in the order of(highest to lowest)
%GDK_VISUAL_DIRECT_COLOR, %GDK_VISUAL_TRUE_COLOR,
%GDK_VISUAL_PSEUDO_COLOR, %GDK_VISUAL_STATIC_COLOR,
%GDK_VISUAL_GRAYSCALE, then %GDK_VISUAL_STATIC_GRAY.</doc>
    </docsection>
    <docsection name="windows">
      <doc xml:space="preserve">A #GdkWindow is a (usually) rectangular region on the screen.
It&#x2019;s a low-level object, used to implement high-level objects such as
#GtkWidget and #GtkWindow on the GTK+ level. A #GtkWindow is a toplevel
window, the thing a user might think of as a &#x201C;window&#x201D; with a titlebar
and so on; a #GtkWindow may contain many #GdkWindows. For example,
each #GtkButton has a #GdkWindow associated with it.

# Composited Windows # {#COMPOSITED-WINDOWS}

Normally, the windowing system takes care of rendering the contents
of a child window onto its parent window. This mechanism can be
intercepted by calling gdk_window_set_composited() on the child
window. For a &#x201C;composited&#x201D; window it is the
responsibility of the application to render the window contents at
the right spot.

# Offscreen Windows # {#OFFSCREEN-WINDOWS}

Offscreen windows are more general than composited windows, since
they allow not only to modify the rendering of the child window onto
its parent, but also to apply coordinate transformations.

To integrate an offscreen window into a window hierarchy, one has
to call gdk_offscreen_window_set_embedder() and handle a number of
signals. The #GdkWindow::pick-embedded-child signal on the embedder
window is used to select an offscreen child at given coordinates,
and the #GdkWindow::to-embedder and #GdkWindow::from-embedder signals
on the offscreen window are used to translate coordinates between
the embedder and the offscreen window.

For rendering an offscreen window onto its embedder, the contents
of the offscreen window are available as a surface, via
gdk_offscreen_window_get_surface().</doc>
    </docsection>
  </namespace>
</repository>

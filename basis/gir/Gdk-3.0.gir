<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="GLib" version="2.0"/>
  <include name="GModule" version="2.0"/>
  <include name="GObject" version="2.0"/>
  <include name="GdkPixbuf" version="2.0"/>
  <include name="Gio" version="2.0"/>
  <include name="Pango" version="1.0"/>
  <include name="cairo" version="1.0"/>
  <namespace name="Gdk"
             version="3.0"
             shared-library="libgdk-x11-3.0.so.0"
             c:identifier-prefixes="Gdk"
             c:symbol-prefixes="gdk">
    <alias name="NativeWindow" c:type="GdkNativeWindow">
      <type name="guint32" c:type="guint32"/>
    </alias>
    <alias name="Rectangle" c:type="GdkRectangle">
      <type name="cairo.RectangleInt" c:type="cairo_rectangle_int_t"/>
    </alias>
    <alias name="XEvent" c:type="GdkXEvent">
      <doc xml:whitespace="preserve">Used to represent native events (&lt;type&gt;XEvent&lt;/type&gt;s for the X11
backend, &lt;type&gt;MSG&lt;/type&gt;s for Win32).</doc>
      <type name="gpointer" c:type="gpointer"/>
    </alias>
    <constant name="ANY_BUTTON_MASK" value="0">
      <type name="gint" c:type="gint"/>
    </constant>
    <class name="AppLaunchContext"
           c:symbol-prefix="app_launch_context"
           c:type="GdkAppLaunchContext"
           parent="Gio.AppLaunchContext"
           glib:type-name="GdkAppLaunchContext"
           glib:get-type="gdk_app_launch_context_get_type"
           glib:type-struct="AppLaunchContextClass">
      <constructor name="new"
                   c:identifier="gdk_app_launch_context_new"
                   version="2.14">
        <doc xml:whitespace="preserve">Creates a new #GdkAppLaunchContext.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new #GdkAppLaunchContext</doc>
          <type name="AppLaunchContext" c:type="GdkAppLaunchContext*"/>
        </return-value>
      </constructor>
      <method name="set_desktop"
              c:identifier="gdk_app_launch_context_set_desktop"
              version="2.14">
        <doc xml:whitespace="preserve">Sets the workspace on which applications will be launched when
using this context when running under a window manager that 
supports multiple workspaces, as described in the 
&lt;ulink url="http://www.freedesktop.org/Standards/wm-spec"&gt;Extended 
Window Manager Hints&lt;/ulink&gt;. 
When the workspace is not specified or @desktop is set to -1, 
it is up to the window manager to pick one, typically it will
be the current workspace.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="desktop" transfer-ownership="none">
            <doc xml:whitespace="preserve">the number of a workspace, or -1</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_display"
              c:identifier="gdk_app_launch_context_set_display"
              version="2.14">
        <doc xml:whitespace="preserve">Sets the display on which applications will be launched when
using this context. See also gdk_app_launch_context_set_screen().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="display" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GdkDisplay</doc>
            <type name="Display" c:type="GdkDisplay*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_icon"
              c:identifier="gdk_app_launch_context_set_icon"
              version="2.14">
        <doc xml:whitespace="preserve">Sets the icon for applications that are launched with this
context.
Window Managers can use this information when displaying startup
notification.
See also gdk_app_launch_context_set_icon_name().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="icon" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">a #GIcon, or %NULL</doc>
            <type name="Gio.Icon" c:type="GIcon*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_icon_name"
              c:identifier="gdk_app_launch_context_set_icon_name"
              version="2.14">
        <doc xml:whitespace="preserve">Sets the icon for applications that are launched with this context. 
The @icon_name will be interpreted in the same way as the Icon field 
in desktop files. See also gdk_app_launch_context_set_icon(). 
If both @icon and @icon_name are set, the @icon_name takes priority.
If neither @icon or @icon_name is set, the icon is taken from either 
the file that is passed to launched application or from the #GAppInfo 
for the launched application itself.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="icon_name" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">an icon name, or %NULL</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_screen"
              c:identifier="gdk_app_launch_context_set_screen"
              version="2.14">
        <doc xml:whitespace="preserve">Sets the screen on which applications will be launched when
using this context. See also gdk_app_launch_context_set_display().
If both @screen and @display are set, the @screen takes priority.
If neither @screen or @display are set, the default screen and
display are used.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="screen" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GdkScreen</doc>
            <type name="Screen" c:type="GdkScreen*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_timestamp"
              c:identifier="gdk_app_launch_context_set_timestamp"
              version="2.14">
        <doc xml:whitespace="preserve">Sets the timestamp of @context. The timestamp should ideally
be taken from the event that triggered the launch. 
Window managers can use this information to avoid moving the
focus to the newly launched application when the user is busy
typing in another window. This is also known as 'focus stealing
prevention'.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="timestamp" transfer-ownership="none">
            <doc xml:whitespace="preserve">a timestamp</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="Gio.AppLaunchContext" c:type="GAppLaunchContext"/>
      </field>
      <field name="priv">
        <type name="AppLaunchContextPrivate"
              c:type="GdkAppLaunchContextPrivate*"/>
      </field>
    </class>
    <record name="AppLaunchContextClass"
            c:type="GdkAppLaunchContextClass"
            glib:is-gtype-struct-for="AppLaunchContext">
      <field name="parent_class">
        <type name="Gio.AppLaunchContextClass"
              c:type="GAppLaunchContextClass"/>
      </field>
    </record>
    <record name="AppLaunchContextPrivate"
            c:type="GdkAppLaunchContextPrivate"
            disguised="1">
    </record>
    <record name="Atom" c:type="GdkAtom" disguised="1">
    </record>
    <enumeration name="AxisUse"
                 glib:type-name="GdkAxisUse"
                 glib:get-type="gdk_axis_use_get_type"
                 c:type="GdkAxisUse">
      <doc xml:whitespace="preserve">An enumeration describing the way in which a device
axis (valuator) maps onto the predefined valuator
types that GTK+ understands.</doc>
      <member name="ignore"
              value="0"
              c:identifier="GDK_AXIS_IGNORE"
              glib:nick="ignore"/>
      <member name="x" value="1" c:identifier="GDK_AXIS_X" glib:nick="x"/>
      <member name="y" value="2" c:identifier="GDK_AXIS_Y" glib:nick="y"/>
      <member name="pressure"
              value="3"
              c:identifier="GDK_AXIS_PRESSURE"
              glib:nick="pressure"/>
      <member name="xtilt"
              value="4"
              c:identifier="GDK_AXIS_XTILT"
              glib:nick="xtilt"/>
      <member name="ytilt"
              value="5"
              c:identifier="GDK_AXIS_YTILT"
              glib:nick="ytilt"/>
      <member name="wheel"
              value="6"
              c:identifier="GDK_AXIS_WHEEL"
              glib:nick="wheel"/>
      <member name="last"
              value="7"
              c:identifier="GDK_AXIS_LAST"
              glib:nick="last"/>
    </enumeration>
    <record name="Bitmap" c:type="GdkBitmap" disguised="1">
    </record>
    <enumeration name="ByteOrder"
                 glib:type-name="GdkByteOrder"
                 glib:get-type="gdk_byte_order_get_type"
                 c:type="GdkByteOrder">
      <member name="lsb_first"
              value="0"
              c:identifier="GDK_LSB_FIRST"
              glib:nick="lsb-first"/>
      <member name="msb_first"
              value="1"
              c:identifier="GDK_MSB_FIRST"
              glib:nick="msb-first"/>
    </enumeration>
    <constant name="CURRENT_TIME" value="0">
      <type name="gint" c:type="gint"/>
    </constant>
    <record name="Color"
            c:type="GdkColor"
            glib:type-name="GdkColor"
            glib:get-type="gdk_color_get_type"
            c:symbol-prefix="color">
      <field name="pixel" writable="1">
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="red" writable="1">
        <type name="guint16" c:type="guint16"/>
      </field>
      <field name="green" writable="1">
        <type name="guint16" c:type="guint16"/>
      </field>
      <field name="blue" writable="1">
        <type name="guint16" c:type="guint16"/>
      </field>
      <method name="copy" c:identifier="gdk_color_copy">
        <doc xml:whitespace="preserve">Makes a copy of a color structure. The result
must be freed using gdk_color_free().</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a copy of @color.</doc>
          <type name="Color" c:type="GdkColor*"/>
        </return-value>
      </method>
      <method name="equal" c:identifier="gdk_color_equal">
        <doc xml:whitespace="preserve">Compares two colors.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the two colors compare equal</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="colorb" transfer-ownership="none">
            <doc xml:whitespace="preserve">another #GdkColor.</doc>
            <type name="Color" c:type="GdkColor*"/>
          </parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="gdk_color_free">
        <doc xml:whitespace="preserve">Frees a color structure created with 
gdk_color_copy().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="hash" c:identifier="gdk_color_hash">
        <doc xml:whitespace="preserve">A hash function suitable for using for a hash
table that stores #GdkColor's.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The hash function applied to @colora</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
      </method>
      <method name="to_string"
              c:identifier="gdk_color_to_string"
              version="2.12">
        <doc xml:whitespace="preserve">Returns a textual specification of @color in the hexadecimal form
&lt;literal&gt;&amp;num;rrrrggggbbbb&lt;/literal&gt;, where &lt;literal&gt;r&lt;/literal&gt;,
&lt;literal&gt;g&lt;/literal&gt; and &lt;literal&gt;b&lt;/literal&gt; are hex digits
representing the red, green and blue components respectively.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a newly-allocated text string</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
    </record>
    <class name="Colormap"
           c:symbol-prefix="colormap"
           c:type="GdkColormap"
           parent="GObject.Object"
           glib:type-name="GdkColormap"
           glib:get-type="gdk_colormap_get_type"
           glib:type-struct="ColormapClass">
      <constructor name="new" c:identifier="gdk_colormap_new">
        <doc xml:whitespace="preserve">Creates a new colormap for the given visual.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the new #GdkColormap.</doc>
          <type name="Colormap" c:type="GdkColormap*"/>
        </return-value>
        <parameters>
          <parameter name="visual" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GdkVisual.</doc>
            <type name="Visual" c:type="GdkVisual*"/>
          </parameter>
          <parameter name="allocate" transfer-ownership="none">
            <doc xml:whitespace="preserve">if %TRUE, the newly created colormap will be a private colormap, and all colors in it will be allocated for the applications use.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="get_system"
                c:identifier="gdk_colormap_get_system"
                introspectable="0">
        <doc xml:whitespace="preserve">Gets the system's default colormap for the default screen. (See
gdk_colormap_get_system_for_screen ())</doc>
        <return-value>
          <doc xml:whitespace="preserve">the default colormap.</doc>
          <type name="Colormap" c:type="GdkColormap*"/>
        </return-value>
      </function>
      <method name="alloc_color" c:identifier="gdk_colormap_alloc_color">
        <doc xml:whitespace="preserve">Allocates a single color from a colormap.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the allocation succeeded.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="color" transfer-ownership="none">
            <doc xml:whitespace="preserve">the color to allocate. On return the &lt;structfield&gt;pixel&lt;/structfield&gt; field will be filled in if allocation succeeds.</doc>
            <type name="Color" c:type="GdkColor*"/>
          </parameter>
          <parameter name="writeable" transfer-ownership="none">
            <doc xml:whitespace="preserve">this parameter has no effect, and it's here for mere compatibility.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="best_match" transfer-ownership="none">
            <doc xml:whitespace="preserve">If %TRUE, GDK will attempt to do matching against existing colors if the color cannot be allocated as requested.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="alloc_colors" c:identifier="gdk_colormap_alloc_colors">
        <doc xml:whitespace="preserve">Allocates colors from a colormap.
allocated.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The number of colors that were not successfully</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <parameter name="colors" transfer-ownership="none">
            <doc xml:whitespace="preserve">The color values to allocate. On return, the pixel values for allocated colors will be filled in.</doc>
            <type name="Color" c:type="GdkColor*"/>
          </parameter>
          <parameter name="n_colors" transfer-ownership="none">
            <doc xml:whitespace="preserve">The number of colors in @colors.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="writeable" transfer-ownership="none">
            <doc xml:whitespace="preserve">this parameter has no effect, and it's here for mere compatibility.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="best_match" transfer-ownership="none">
            <doc xml:whitespace="preserve">If %TRUE, GDK will attempt to do matching against existing colors if the colors cannot be allocated as requested.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="success" transfer-ownership="none">
            <doc xml:whitespace="preserve">An array of length @ncolors. On return, this indicates whether the corresponding color in @colors was successfully allocated or not.</doc>
            <type name="gboolean" c:type="gboolean*"/>
          </parameter>
        </parameters>
      </method>
      <method name="free_colors" c:identifier="gdk_colormap_free_colors">
        <doc xml:whitespace="preserve">Frees previously allocated colors.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="colors" transfer-ownership="none">
            <doc xml:whitespace="preserve">the colors to free.</doc>
            <type name="Color" c:type="GdkColor*"/>
          </parameter>
          <parameter name="n_colors" transfer-ownership="none">
            <doc xml:whitespace="preserve">the number of colors in @colors.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_screen"
              c:identifier="gdk_colormap_get_screen"
              version="2.2"
              introspectable="0">
        <doc xml:whitespace="preserve">Gets the screen for which this colormap was created.</doc>
        <return-value>
          <doc xml:whitespace="preserve">the screen for which this colormap was created.</doc>
          <type name="Screen" c:type="GdkScreen*"/>
        </return-value>
      </method>
      <method name="get_visual"
              c:identifier="gdk_colormap_get_visual"
              introspectable="0">
        <doc xml:whitespace="preserve">Returns the visual for which a given colormap was created.</doc>
        <return-value>
          <doc xml:whitespace="preserve">the visual of the colormap.</doc>
          <type name="Visual" c:type="GdkVisual*"/>
        </return-value>
      </method>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="size">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="colors">
        <type name="Color" c:type="GdkColor*"/>
      </field>
      <field name="visual">
        <type name="Visual" c:type="GdkVisual*"/>
      </field>
      <field name="windowing_data">
        <type name="gpointer" c:type="gpointer"/>
      </field>
    </class>
    <record name="ColormapClass"
            c:type="GdkColormapClass"
            glib:is-gtype-struct-for="Colormap">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <enumeration name="CrossingMode"
                 glib:type-name="GdkCrossingMode"
                 glib:get-type="gdk_crossing_mode_get_type"
                 c:type="GdkCrossingMode">
      <member name="normal"
              value="0"
              c:identifier="GDK_CROSSING_NORMAL"
              glib:nick="normal"/>
      <member name="grab"
              value="1"
              c:identifier="GDK_CROSSING_GRAB"
              glib:nick="grab"/>
      <member name="ungrab"
              value="2"
              c:identifier="GDK_CROSSING_UNGRAB"
              glib:nick="ungrab"/>
      <member name="gtk_grab"
              value="3"
              c:identifier="GDK_CROSSING_GTK_GRAB"
              glib:nick="gtk-grab"/>
      <member name="gtk_ungrab"
              value="4"
              c:identifier="GDK_CROSSING_GTK_UNGRAB"
              glib:nick="gtk-ungrab"/>
      <member name="state_changed"
              value="5"
              c:identifier="GDK_CROSSING_STATE_CHANGED"
              glib:nick="state-changed"/>
    </enumeration>
    <record name="Cursor"
            c:type="GdkCursor"
            glib:type-name="GdkCursor"
            glib:get-type="gdk_cursor_get_type"
            c:symbol-prefix="cursor">
      <field name="type" writable="1">
        <type name="CursorType" c:type="GdkCursorType"/>
      </field>
      <field name="ref_count" writable="1">
        <type name="guint" c:type="guint"/>
      </field>
      <constructor name="new" c:identifier="gdk_cursor_new">
        <doc xml:whitespace="preserve">Creates a new cursor from the set of builtin cursors for the default display.
See gdk_cursor_new_for_display().
To make the cursor invisible, use %GDK_BLANK_CURSOR.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new #GdkCursor</doc>
          <type name="Cursor" c:type="GdkCursor*"/>
        </return-value>
        <parameters>
          <parameter name="cursor_type" transfer-ownership="none">
            <doc xml:whitespace="preserve">cursor to create</doc>
            <type name="CursorType" c:type="GdkCursorType"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_display"
                   c:identifier="gdk_cursor_new_for_display"
                   version="2.2">
        <doc xml:whitespace="preserve">Creates a new cursor from the set of builtin cursors.
Some useful ones are:
&lt;itemizedlist&gt;
&lt;listitem&gt;&lt;para&gt;
&lt;inlinegraphic format="PNG" fileref="right_ptr.png"&gt;&lt;/inlinegraphic&gt; #GDK_RIGHT_PTR (right-facing arrow)
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
&lt;inlinegraphic format="PNG" fileref="crosshair.png"&gt;&lt;/inlinegraphic&gt; #GDK_CROSSHAIR (crosshair)
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
&lt;inlinegraphic format="PNG" fileref="xterm.png"&gt;&lt;/inlinegraphic&gt; #GDK_XTERM (I-beam)
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
&lt;inlinegraphic format="PNG" fileref="watch.png"&gt;&lt;/inlinegraphic&gt; #GDK_WATCH (busy)
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
&lt;inlinegraphic format="PNG" fileref="fleur.png"&gt;&lt;/inlinegraphic&gt; #GDK_FLEUR (for moving objects)
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
&lt;inlinegraphic format="PNG" fileref="hand1.png"&gt;&lt;/inlinegraphic&gt; #GDK_HAND1 (a right-pointing hand)
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
&lt;inlinegraphic format="PNG" fileref="hand2.png"&gt;&lt;/inlinegraphic&gt; #GDK_HAND2 (a left-pointing hand)
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
&lt;inlinegraphic format="PNG" fileref="left_side.png"&gt;&lt;/inlinegraphic&gt; #GDK_LEFT_SIDE (resize left side)
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
&lt;inlinegraphic format="PNG" fileref="right_side.png"&gt;&lt;/inlinegraphic&gt; #GDK_RIGHT_SIDE (resize right side)
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
&lt;inlinegraphic format="PNG" fileref="top_left_corner.png"&gt;&lt;/inlinegraphic&gt; #GDK_TOP_LEFT_CORNER (resize northwest corner)
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
&lt;inlinegraphic format="PNG" fileref="top_right_corner.png"&gt;&lt;/inlinegraphic&gt; #GDK_TOP_RIGHT_CORNER (resize northeast corner)
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
&lt;inlinegraphic format="PNG" fileref="bottom_left_corner.png"&gt;&lt;/inlinegraphic&gt; #GDK_BOTTOM_LEFT_CORNER (resize southwest corner)
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
&lt;inlinegraphic format="PNG" fileref="bottom_right_corner.png"&gt;&lt;/inlinegraphic&gt; #GDK_BOTTOM_RIGHT_CORNER (resize southeast corner)
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
&lt;inlinegraphic format="PNG" fileref="top_side.png"&gt;&lt;/inlinegraphic&gt; #GDK_TOP_SIDE (resize top side)
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
&lt;inlinegraphic format="PNG" fileref="bottom_side.png"&gt;&lt;/inlinegraphic&gt; #GDK_BOTTOM_SIDE (resize bottom side)
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
&lt;inlinegraphic format="PNG" fileref="sb_h_double_arrow.png"&gt;&lt;/inlinegraphic&gt; #GDK_SB_H_DOUBLE_ARROW (move vertical splitter)
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
&lt;inlinegraphic format="PNG" fileref="sb_v_double_arrow.png"&gt;&lt;/inlinegraphic&gt; #GDK_SB_V_DOUBLE_ARROW (move horizontal splitter)
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
#GDK_BLANK_CURSOR (Blank cursor). Since 2.16
&lt;/para&gt;&lt;/listitem&gt;
&lt;/itemizedlist&gt;</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new #GdkCursor</doc>
          <type name="Cursor" c:type="GdkCursor*"/>
        </return-value>
        <parameters>
          <parameter name="display" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GdkDisplay for which the cursor will be created</doc>
            <type name="Display" c:type="GdkDisplay*"/>
          </parameter>
          <parameter name="cursor_type" transfer-ownership="none">
            <doc xml:whitespace="preserve">cursor to create</doc>
            <type name="CursorType" c:type="GdkCursorType"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_name"
                   c:identifier="gdk_cursor_new_from_name"
                   version="2.8">
        <doc xml:whitespace="preserve">Creates a new cursor by looking up @name in the current cursor
theme. 
the given name</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new #GdkCursor, or %NULL if there is no cursor with</doc>
          <type name="Cursor" c:type="GdkCursor*"/>
        </return-value>
        <parameters>
          <parameter name="display" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GdkDisplay for which the cursor will be created</doc>
            <type name="Display" c:type="GdkDisplay*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:whitespace="preserve">the name of the cursor</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_pixbuf"
                   c:identifier="gdk_cursor_new_from_pixbuf"
                   version="2.4">
        <doc xml:whitespace="preserve">Creates a new cursor from a pixbuf. 
Not all GDK backends support RGBA cursors. If they are not 
supported, a monochrome approximation will be displayed. 
The functions gdk_display_supports_cursor_alpha() and 
gdk_display_supports_cursor_color() can be used to determine
whether RGBA cursors are supported; 
gdk_display_get_default_cursor_size() and 
gdk_display_get_maximal_cursor_size() give information about 
cursor sizes.
On the X backend, support for RGBA cursors requires a
sufficently new version of the X Render extension.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new #GdkCursor.</doc>
          <type name="Cursor" c:type="GdkCursor*"/>
        </return-value>
        <parameters>
          <parameter name="display" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GdkDisplay for which the cursor will be created</doc>
            <type name="Display" c:type="GdkDisplay*"/>
          </parameter>
          <parameter name="pixbuf" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GdkPixbuf containing the cursor image</doc>
            <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:whitespace="preserve">the horizontal offset of the 'hotspot' of the cursor.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:whitespace="preserve">the vertical offset of the 'hotspot' of the cursor.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_pixmap"
                   c:identifier="gdk_cursor_new_from_pixmap">
        <doc xml:whitespace="preserve">Creates a new cursor from a given pixmap and mask. Both the pixmap and mask
must have a depth of 1 (i.e. each pixel has only 2 values - on or off).
The standard cursor size is 16 by 16 pixels.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new #GdkCursor.</doc>
          <type name="Cursor" c:type="GdkCursor*"/>
        </return-value>
        <parameters>
          <parameter name="source" transfer-ownership="none">
            <doc xml:whitespace="preserve">the pixmap specifying the cursor.</doc>
            <type name="Pixmap" c:type="GdkPixmap*"/>
          </parameter>
          <parameter name="mask" transfer-ownership="none">
            <doc xml:whitespace="preserve">the pixmap specifying the mask, which must be the same size as</doc>
            <type name="Pixmap" c:type="GdkPixmap*"/>
          </parameter>
          <parameter name="fg" transfer-ownership="none">
            <doc xml:whitespace="preserve">the foreground color, used for the bits in the source which are 1. The color does not have to be allocated first.</doc>
            <type name="Color" c:type="GdkColor*"/>
          </parameter>
          <parameter name="bg" transfer-ownership="none">
            <doc xml:whitespace="preserve">the background color, used for the bits in the source which are 0. The color does not have to be allocated first.</doc>
            <type name="Color" c:type="GdkColor*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:whitespace="preserve">the horizontal offset of the 'hotspot' of the cursor.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:whitespace="preserve">the vertical offset of the 'hotspot' of the cursor.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_cursor_type"
              c:identifier="gdk_cursor_get_cursor_type"
              version="2.22">
        <doc xml:whitespace="preserve">Returns the cursor type for this cursor.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GdkCursorType</doc>
          <type name="CursorType" c:type="GdkCursorType"/>
        </return-value>
      </method>
      <method name="get_display"
              c:identifier="gdk_cursor_get_display"
              introspectable="0">
        <return-value>
          <type name="Display" c:type="GdkDisplay*"/>
        </return-value>
      </method>
      <method name="get_image"
              c:identifier="gdk_cursor_get_image"
              version="2.8"
              introspectable="0">
        <doc xml:whitespace="preserve">Returns a #GdkPixbuf with the image used to display the cursor.
Note that depending on the capabilities of the windowing system and 
on the cursor, GDK may not be able to obtain the image data. In this 
case, %NULL is returned.</doc>
        <return-value>
          <doc xml:whitespace="preserve">a #GdkPixbuf representing @cursor, or %NULL</doc>
          <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
      </method>
      <method name="ref" c:identifier="gdk_cursor_ref">
        <doc xml:whitespace="preserve">Adds a reference to @cursor.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">Same @cursor that was passed in</doc>
          <type name="Cursor" c:type="GdkCursor*"/>
        </return-value>
      </method>
      <method name="unref" c:identifier="gdk_cursor_unref">
        <doc xml:whitespace="preserve">Removes a reference from @cursor, deallocating the cursor
if no references remain.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
    </record>
    <enumeration name="CursorType"
                 glib:type-name="GdkCursorType"
                 glib:get-type="gdk_cursor_type_get_type"
                 c:type="GdkCursorType">
      <member name="x_cursor"
              value="0"
              c:identifier="GDK_X_CURSOR"
              glib:nick="x-cursor"/>
      <member name="arrow"
              value="2"
              c:identifier="GDK_ARROW"
              glib:nick="arrow"/>
      <member name="based_arrow_down"
              value="4"
              c:identifier="GDK_BASED_ARROW_DOWN"
              glib:nick="based-arrow-down"/>
      <member name="based_arrow_up"
              value="6"
              c:identifier="GDK_BASED_ARROW_UP"
              glib:nick="based-arrow-up"/>
      <member name="boat" value="8" c:identifier="GDK_BOAT" glib:nick="boat"/>
      <member name="bogosity"
              value="10"
              c:identifier="GDK_BOGOSITY"
              glib:nick="bogosity"/>
      <member name="bottom_left_corner"
              value="12"
              c:identifier="GDK_BOTTOM_LEFT_CORNER"
              glib:nick="bottom-left-corner"/>
      <member name="bottom_right_corner"
              value="14"
              c:identifier="GDK_BOTTOM_RIGHT_CORNER"
              glib:nick="bottom-right-corner"/>
      <member name="bottom_side"
              value="16"
              c:identifier="GDK_BOTTOM_SIDE"
              glib:nick="bottom-side"/>
      <member name="bottom_tee"
              value="18"
              c:identifier="GDK_BOTTOM_TEE"
              glib:nick="bottom-tee"/>
      <member name="box_spiral"
              value="20"
              c:identifier="GDK_BOX_SPIRAL"
              glib:nick="box-spiral"/>
      <member name="center_ptr"
              value="22"
              c:identifier="GDK_CENTER_PTR"
              glib:nick="center-ptr"/>
      <member name="circle"
              value="24"
              c:identifier="GDK_CIRCLE"
              glib:nick="circle"/>
      <member name="clock"
              value="26"
              c:identifier="GDK_CLOCK"
              glib:nick="clock"/>
      <member name="coffee_mug"
              value="28"
              c:identifier="GDK_COFFEE_MUG"
              glib:nick="coffee-mug"/>
      <member name="cross"
              value="30"
              c:identifier="GDK_CROSS"
              glib:nick="cross"/>
      <member name="cross_reverse"
              value="32"
              c:identifier="GDK_CROSS_REVERSE"
              glib:nick="cross-reverse"/>
      <member name="crosshair"
              value="34"
              c:identifier="GDK_CROSSHAIR"
              glib:nick="crosshair"/>
      <member name="diamond_cross"
              value="36"
              c:identifier="GDK_DIAMOND_CROSS"
              glib:nick="diamond-cross"/>
      <member name="dot" value="38" c:identifier="GDK_DOT" glib:nick="dot"/>
      <member name="dotbox"
              value="40"
              c:identifier="GDK_DOTBOX"
              glib:nick="dotbox"/>
      <member name="double_arrow"
              value="42"
              c:identifier="GDK_DOUBLE_ARROW"
              glib:nick="double-arrow"/>
      <member name="draft_large"
              value="44"
              c:identifier="GDK_DRAFT_LARGE"
              glib:nick="draft-large"/>
      <member name="draft_small"
              value="46"
              c:identifier="GDK_DRAFT_SMALL"
              glib:nick="draft-small"/>
      <member name="draped_box"
              value="48"
              c:identifier="GDK_DRAPED_BOX"
              glib:nick="draped-box"/>
      <member name="exchange"
              value="50"
              c:identifier="GDK_EXCHANGE"
              glib:nick="exchange"/>
      <member name="fleur"
              value="52"
              c:identifier="GDK_FLEUR"
              glib:nick="fleur"/>
      <member name="gobbler"
              value="54"
              c:identifier="GDK_GOBBLER"
              glib:nick="gobbler"/>
      <member name="gumby"
              value="56"
              c:identifier="GDK_GUMBY"
              glib:nick="gumby"/>
      <member name="hand1"
              value="58"
              c:identifier="GDK_HAND1"
              glib:nick="hand1"/>
      <member name="hand2"
              value="60"
              c:identifier="GDK_HAND2"
              glib:nick="hand2"/>
      <member name="heart"
              value="62"
              c:identifier="GDK_HEART"
              glib:nick="heart"/>
      <member name="icon" value="64" c:identifier="GDK_ICON" glib:nick="icon"/>
      <member name="iron_cross"
              value="66"
              c:identifier="GDK_IRON_CROSS"
              glib:nick="iron-cross"/>
      <member name="left_ptr"
              value="68"
              c:identifier="GDK_LEFT_PTR"
              glib:nick="left-ptr"/>
      <member name="left_side"
              value="70"
              c:identifier="GDK_LEFT_SIDE"
              glib:nick="left-side"/>
      <member name="left_tee"
              value="72"
              c:identifier="GDK_LEFT_TEE"
              glib:nick="left-tee"/>
      <member name="leftbutton"
              value="74"
              c:identifier="GDK_LEFTBUTTON"
              glib:nick="leftbutton"/>
      <member name="ll_angle"
              value="76"
              c:identifier="GDK_LL_ANGLE"
              glib:nick="ll-angle"/>
      <member name="lr_angle"
              value="78"
              c:identifier="GDK_LR_ANGLE"
              glib:nick="lr-angle"/>
      <member name="man" value="80" c:identifier="GDK_MAN" glib:nick="man"/>
      <member name="middlebutton"
              value="82"
              c:identifier="GDK_MIDDLEBUTTON"
              glib:nick="middlebutton"/>
      <member name="mouse"
              value="84"
              c:identifier="GDK_MOUSE"
              glib:nick="mouse"/>
      <member name="pencil"
              value="86"
              c:identifier="GDK_PENCIL"
              glib:nick="pencil"/>
      <member name="pirate"
              value="88"
              c:identifier="GDK_PIRATE"
              glib:nick="pirate"/>
      <member name="plus" value="90" c:identifier="GDK_PLUS" glib:nick="plus"/>
      <member name="question_arrow"
              value="92"
              c:identifier="GDK_QUESTION_ARROW"
              glib:nick="question-arrow"/>
      <member name="right_ptr"
              value="94"
              c:identifier="GDK_RIGHT_PTR"
              glib:nick="right-ptr"/>
      <member name="right_side"
              value="96"
              c:identifier="GDK_RIGHT_SIDE"
              glib:nick="right-side"/>
      <member name="right_tee"
              value="98"
              c:identifier="GDK_RIGHT_TEE"
              glib:nick="right-tee"/>
      <member name="rightbutton"
              value="100"
              c:identifier="GDK_RIGHTBUTTON"
              glib:nick="rightbutton"/>
      <member name="rtl_logo"
              value="102"
              c:identifier="GDK_RTL_LOGO"
              glib:nick="rtl-logo"/>
      <member name="sailboat"
              value="104"
              c:identifier="GDK_SAILBOAT"
              glib:nick="sailboat"/>
      <member name="sb_down_arrow"
              value="106"
              c:identifier="GDK_SB_DOWN_ARROW"
              glib:nick="sb-down-arrow"/>
      <member name="sb_h_double_arrow"
              value="108"
              c:identifier="GDK_SB_H_DOUBLE_ARROW"
              glib:nick="sb-h-double-arrow"/>
      <member name="sb_left_arrow"
              value="110"
              c:identifier="GDK_SB_LEFT_ARROW"
              glib:nick="sb-left-arrow"/>
      <member name="sb_right_arrow"
              value="112"
              c:identifier="GDK_SB_RIGHT_ARROW"
              glib:nick="sb-right-arrow"/>
      <member name="sb_up_arrow"
              value="114"
              c:identifier="GDK_SB_UP_ARROW"
              glib:nick="sb-up-arrow"/>
      <member name="sb_v_double_arrow"
              value="116"
              c:identifier="GDK_SB_V_DOUBLE_ARROW"
              glib:nick="sb-v-double-arrow"/>
      <member name="shuttle"
              value="118"
              c:identifier="GDK_SHUTTLE"
              glib:nick="shuttle"/>
      <member name="sizing"
              value="120"
              c:identifier="GDK_SIZING"
              glib:nick="sizing"/>
      <member name="spider"
              value="122"
              c:identifier="GDK_SPIDER"
              glib:nick="spider"/>
      <member name="spraycan"
              value="124"
              c:identifier="GDK_SPRAYCAN"
              glib:nick="spraycan"/>
      <member name="star"
              value="126"
              c:identifier="GDK_STAR"
              glib:nick="star"/>
      <member name="target"
              value="128"
              c:identifier="GDK_TARGET"
              glib:nick="target"/>
      <member name="tcross"
              value="130"
              c:identifier="GDK_TCROSS"
              glib:nick="tcross"/>
      <member name="top_left_arrow"
              value="132"
              c:identifier="GDK_TOP_LEFT_ARROW"
              glib:nick="top-left-arrow"/>
      <member name="top_left_corner"
              value="134"
              c:identifier="GDK_TOP_LEFT_CORNER"
              glib:nick="top-left-corner"/>
      <member name="top_right_corner"
              value="136"
              c:identifier="GDK_TOP_RIGHT_CORNER"
              glib:nick="top-right-corner"/>
      <member name="top_side"
              value="138"
              c:identifier="GDK_TOP_SIDE"
              glib:nick="top-side"/>
      <member name="top_tee"
              value="140"
              c:identifier="GDK_TOP_TEE"
              glib:nick="top-tee"/>
      <member name="trek"
              value="142"
              c:identifier="GDK_TREK"
              glib:nick="trek"/>
      <member name="ul_angle"
              value="144"
              c:identifier="GDK_UL_ANGLE"
              glib:nick="ul-angle"/>
      <member name="umbrella"
              value="146"
              c:identifier="GDK_UMBRELLA"
              glib:nick="umbrella"/>
      <member name="ur_angle"
              value="148"
              c:identifier="GDK_UR_ANGLE"
              glib:nick="ur-angle"/>
      <member name="watch"
              value="150"
              c:identifier="GDK_WATCH"
              glib:nick="watch"/>
      <member name="xterm"
              value="152"
              c:identifier="GDK_XTERM"
              glib:nick="xterm"/>
      <member name="last_cursor"
              value="153"
              c:identifier="GDK_LAST_CURSOR"
              glib:nick="last-cursor"/>
      <member name="blank_cursor"
              value="-2"
              c:identifier="GDK_BLANK_CURSOR"
              glib:nick="blank-cursor"/>
      <member name="cursor_is_pixmap"
              value="-1"
              c:identifier="GDK_CURSOR_IS_PIXMAP"
              glib:nick="cursor-is-pixmap"/>
    </enumeration>
    <class name="Device"
           c:symbol-prefix="device"
           c:type="GdkDevice"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="GdkDevice"
           glib:get-type="gdk_device_get_type">
      <function name="free_history" c:identifier="gdk_device_free_history">
        <doc xml:whitespace="preserve">Frees an array of #GdkTimeCoord that was returned by gdk_device_get_history().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="events"
                     direction="inout"
                     caller-allocates="0"
                     transfer-ownership="none">
            <doc xml:whitespace="preserve">an array of #GdkTimeCoord.</doc>
            <type name="TimeCoord" c:type="GdkTimeCoord**"/>
          </parameter>
          <parameter name="n_events" transfer-ownership="none">
            <doc xml:whitespace="preserve">the length of the array.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_core_pointer"
                c:identifier="gdk_device_get_core_pointer"
                introspectable="0"
                deprecated="Use gdk_device_manager_get_client_pointer() instead, or"
                deprecated-version="3.0">
        <doc xml:whitespace="preserve">Returns the core pointer device for the default display.
display and should not be freed.
gdk_event_get_device() if a #GdkEvent with pointer device
information is available.</doc>
        <return-value>
          <doc xml:whitespace="preserve">the core pointer device; this is owned by the</doc>
          <type name="Device" c:type="GdkDevice*"/>
        </return-value>
      </function>
      <function name="grab_info_libgtk_only"
                c:identifier="gdk_device_grab_info_libgtk_only">
        <doc xml:whitespace="preserve">Determines information about the current keyboard grab.
This is not public API and must not be used by applications.
keyboard grabbed.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if this application currently has the</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="display" transfer-ownership="none">
            <doc xml:whitespace="preserve">the display for which to get the grab information</doc>
            <type name="Display" c:type="GdkDisplay*"/>
          </parameter>
          <parameter name="device" transfer-ownership="none">
            <doc xml:whitespace="preserve">device to get the grab information from</doc>
            <type name="Device" c:type="GdkDevice*"/>
          </parameter>
          <parameter name="grab_window" transfer-ownership="none">
            <doc xml:whitespace="preserve">location to store current grab window</doc>
            <type name="Window" c:type="GdkWindow**"/>
          </parameter>
          <parameter name="owner_events" transfer-ownership="none">
            <doc xml:whitespace="preserve">location to store boolean indicating whether the @owner_events flag to gdk_keyboard_grab() or gdk_pointer_grab() was %TRUE.</doc>
            <type name="gboolean" c:type="gboolean*"/>
          </parameter>
        </parameters>
      </function>
      <method name="get_associated_device"
              c:identifier="gdk_device_get_associated_device"
              version="3.0"
              introspectable="0">
        <doc xml:whitespace="preserve">Returns the associated device to @device, if @device is of type
%GDK_DEVICE_TYPE_MASTER, it will return the paired pointer or
keyboard.
If @device is of type %GDK_DEVICE_TYPE_SLAVE, it will return
the master device to which @device is attached to.
If @device is of type %GDK_DEVICE_TYPE_FLOATING, %NULL will be
returned, as there is no associated device.</doc>
        <return-value>
          <doc xml:whitespace="preserve">The associated device, or %NULL</doc>
          <type name="Device" c:type="GdkDevice*"/>
        </return-value>
      </method>
      <method name="get_axis" c:identifier="gdk_device_get_axis">
        <doc xml:whitespace="preserve">Interprets an array of double as axis values for a given device,
and locates the value in the array for a given axis use.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the given axis use was found, otherwise %FALSE</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="axes" transfer-ownership="none">
            <doc xml:whitespace="preserve">pointer to an array of axes</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="use" transfer-ownership="none">
            <doc xml:whitespace="preserve">the use to look for</doc>
            <type name="AxisUse" c:type="GdkAxisUse"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:whitespace="preserve">location to store the found value.</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_axis_use"
              c:identifier="gdk_device_get_axis_use"
              version="2.20">
        <doc xml:whitespace="preserve">Returns the axis use for @index_.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GdkAxisUse specifying how the axis is used.</doc>
          <type name="AxisUse" c:type="GdkAxisUse"/>
        </return-value>
        <parameters>
          <parameter name="index_" transfer-ownership="none">
            <doc xml:whitespace="preserve">the index of the axis.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_axis_value"
              c:identifier="gdk_device_get_axis_value"
              version="3.0">
        <doc xml:whitespace="preserve">Interprets an array of double as axis values for a given device,
and locates the value in the array for a given axis label, as returned
by gdk_device_list_axes()</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the given axis use was found, otherwise %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="axes" transfer-ownership="none">
            <doc xml:whitespace="preserve">pointer to an array of axes</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="axis_label" transfer-ownership="none">
            <doc xml:whitespace="preserve">#GdkAtom with the axis label.</doc>
            <type name="Atom" c:type="GdkAtom"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:whitespace="preserve">location to store the found value.</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_device_type"
              c:identifier="gdk_device_get_device_type"
              version="3.0">
        <doc xml:whitespace="preserve">Returns the device type for @device.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the #GdkDeviceType for @device.</doc>
          <type name="DeviceType" c:type="GdkDeviceType"/>
        </return-value>
      </method>
      <method name="get_display"
              c:identifier="gdk_device_get_display"
              version="3.0"
              introspectable="0">
        <doc xml:whitespace="preserve">Returns the #GdkDisplay to which @device pertains.
and must not be freed or unreffed.</doc>
        <return-value>
          <doc xml:whitespace="preserve">a #GdkDisplay. This memory is owned by GTK+,</doc>
          <type name="Display" c:type="GdkDisplay*"/>
        </return-value>
      </method>
      <method name="get_has_cursor"
              c:identifier="gdk_device_get_has_cursor"
              version="2.20">
        <doc xml:whitespace="preserve">Determines whether the pointer follows device motion.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the pointer follows device motion</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_history" c:identifier="gdk_device_get_history">
        <doc xml:whitespace="preserve">Obtains the motion history for a device; given a starting and
ending timestamp, return all events in the motion history for
the device in the given range of time. Some windowing systems
do not support motion history, in which case, %FALSE will
be returned. (This is not distinguishable from the case where
motion history is supported and no events were found.)
at least one event was found.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the windowing system supports motion history and</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="window" transfer-ownership="none">
            <doc xml:whitespace="preserve">the window with respect to which which the event coordinates will be reported</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </parameter>
          <parameter name="start" transfer-ownership="none">
            <doc xml:whitespace="preserve">starting timestamp for range of events to return</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
          <parameter name="stop" transfer-ownership="none">
            <doc xml:whitespace="preserve">ending timestamp for the range of events to return</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
          <parameter name="events"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none">
            <doc xml:whitespace="preserve">location to store a newly-allocated array of #GdkTimeCoord, or %NULL</doc>
            <array length="4" c:type="GdkTimeCoord***">
              <type name="TimeCoord"/>
            </array>
          </parameter>
          <parameter name="n_events"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:whitespace="preserve">location to store the length of @events, or %NULL</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_key" c:identifier="gdk_device_get_key" version="2.20">
        <doc xml:whitespace="preserve">If @index_ has a valid keyval, this function will return %TRUE
and fill in @keyval and @modifiers with the keyval settings.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if keyval is set for @index.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="index_" transfer-ownership="none">
            <doc xml:whitespace="preserve">the index of the macro button to get.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="keyval" transfer-ownership="none">
            <doc xml:whitespace="preserve">return value for the keyval.</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
          <parameter name="modifiers" transfer-ownership="none">
            <doc xml:whitespace="preserve">return value for modifiers.</doc>
            <type name="ModifierType" c:type="GdkModifierType*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_mode"
              c:identifier="gdk_device_get_mode"
              version="2.20">
        <doc xml:whitespace="preserve">Determines the mode of the device.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GdkInputSource</doc>
          <type name="InputMode" c:type="GdkInputMode"/>
        </return-value>
      </method>
      <method name="get_n_axes"
              c:identifier="gdk_device_get_n_axes"
              version="3.0">
        <doc xml:whitespace="preserve">Returns the number of axes the device currently has.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the number of axes.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
      </method>
      <method name="get_name"
              c:identifier="gdk_device_get_name"
              version="2.20">
        <doc xml:whitespace="preserve">Determines the name of the device.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a name</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_source"
              c:identifier="gdk_device_get_source"
              version="2.20">
        <doc xml:whitespace="preserve">Determines the type of the device.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GdkInputSource</doc>
          <type name="InputSource" c:type="GdkInputSource"/>
        </return-value>
      </method>
      <method name="get_state" c:identifier="gdk_device_get_state">
        <doc xml:whitespace="preserve">Gets the current state of a device relative to @window.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="window" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GdkWindow.</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </parameter>
          <parameter name="axes" transfer-ownership="none">
            <doc xml:whitespace="preserve">an array of doubles to store the values of the axes of @device in, or %NULL.</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="mask" transfer-ownership="none">
            <doc xml:whitespace="preserve">location to store the modifiers, or %NULL.</doc>
            <type name="ModifierType" c:type="GdkModifierType*"/>
          </parameter>
        </parameters>
      </method>
      <method name="grab" c:identifier="gdk_device_grab" version="3.0">
        <doc xml:whitespace="preserve">Grabs the device so that all events coming from this device are passed to
this application until the device is ungrabbed with gdk_device_ungrab(),
or the window becomes unviewable. This overrides any previous grab on the device
by this client.
Device grabs are used for operations which need complete control over the
given device events (either pointer or keyboard). For example in GTK+ this
is used for Drag and Drop operations, popup menus and such.
Note that if the event mask of an X window has selected both button press
and button release events, then a button press event will cause an automatic
pointer grab until the button is released. X does this automatically since
most applications expect to receive button press and release events in pairs.
It is equivalent to a pointer grab on the window with @owner_events set to
%TRUE.
If you set up anything at the time you take the grab that needs to be
cleaned up when the grab ends, you should handle the #GdkEventGrabBroken
events that are emitted when the grab ends unvoluntarily.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%GDK_GRAB_SUCCESS if the grab was successful.</doc>
          <type name="GrabStatus" c:type="GdkGrabStatus"/>
        </return-value>
        <parameters>
          <parameter name="window" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GdkWindow which will own the grab (the grab window)</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </parameter>
          <parameter name="grab_ownership" transfer-ownership="none">
            <doc xml:whitespace="preserve">specifies the grab ownership.</doc>
            <type name="GrabOwnership" c:type="GdkGrabOwnership"/>
          </parameter>
          <parameter name="owner_events" transfer-ownership="none">
            <doc xml:whitespace="preserve">if %FALSE then all device events are reported with respect to %TRUE then pointer events for this application are reported as normal, but pointer events outside this application are reported with respect to @window and only if selected by</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="event_mask" transfer-ownership="none">
            <doc xml:whitespace="preserve">specifies the event mask, which is used in accordance with</doc>
            <type name="EventMask" c:type="GdkEventMask"/>
          </parameter>
          <parameter name="cursor" transfer-ownership="none">
            <doc xml:whitespace="preserve">the cursor to display while the grab is active if the device is a pointer. If this is %NULL then the normal cursors are used for elsewhere.</doc>
            <type name="Cursor" c:type="GdkCursor*"/>
          </parameter>
          <parameter name="time_" transfer-ownership="none">
            <doc xml:whitespace="preserve">the timestamp of the event which led to this pointer grab. This usually comes from the #GdkEvent struct, though %GDK_CURRENT_TIME can be used if the time isn't known.</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="list_axes"
              c:identifier="gdk_device_list_axes"
              version="3.0">
        <doc xml:whitespace="preserve">Returns a #GList of #GdkAtom&lt;!-- --&gt;s, containing the labels for
the axes that @device currently has.
A #GList of #GdkAtom&lt;!-- --&gt;s, free with g_list_free().</doc>
        <return-value transfer-ownership="container">
          <type name="GLib.List" c:type="GList*">
            <type name="Atom"/>
          </type>
        </return-value>
      </method>
      <method name="set_axis_use" c:identifier="gdk_device_set_axis_use">
        <doc xml:whitespace="preserve">Specifies how an axis of a device is used.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="index_" transfer-ownership="none">
            <doc xml:whitespace="preserve">the index of the axis</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="use" transfer-ownership="none">
            <doc xml:whitespace="preserve">specifies how the axis is used</doc>
            <type name="AxisUse" c:type="GdkAxisUse"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_key" c:identifier="gdk_device_set_key">
        <doc xml:whitespace="preserve">Specifies the X key event to generate when a macro button of a device
is pressed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="index_" transfer-ownership="none">
            <doc xml:whitespace="preserve">the index of the macro button to set</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="keyval" transfer-ownership="none">
            <doc xml:whitespace="preserve">the keyval to generate</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="modifiers" transfer-ownership="none">
            <doc xml:whitespace="preserve">the modifiers to set</doc>
            <type name="ModifierType" c:type="GdkModifierType"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_mode" c:identifier="gdk_device_set_mode">
        <doc xml:whitespace="preserve">Sets a the mode of an input device. The mode controls if the
device is active and whether the device's range is mapped to the
entire screen or to a single window.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the mode was successfully changed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="mode" transfer-ownership="none">
            <doc xml:whitespace="preserve">the input mode.</doc>
            <type name="InputMode" c:type="GdkInputMode"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_source" c:identifier="gdk_device_set_source">
        <doc xml:whitespace="preserve">Sets the source type for an input device.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="source" transfer-ownership="none">
            <doc xml:whitespace="preserve">the source type.</doc>
            <type name="InputSource" c:type="GdkInputSource"/>
          </parameter>
        </parameters>
      </method>
      <method name="ungrab" c:identifier="gdk_device_ungrab" version="3.0">
        <doc xml:whitespace="preserve">Release any grab on @device.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="time_" transfer-ownership="none">
            <doc xml:whitespace="preserve">a timestap (e.g. %GDK_CURRENT_TIME).</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <property name="associated-device"
                version="3.0"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Associated pointer or keyboard with this device, if any. Devices of type #GDK_DEVICE_TYPE_MASTER
always come in keyboard/pointer pairs. Other device types will have a %NULL associated device.</doc>
        <type name="Device"/>
      </property>
      <property name="device-manager"
                version="3.0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The #GdkDeviceManager the #GdkDevice pertains to.</doc>
        <type name="DeviceManager"/>
      </property>
      <property name="display"
                version="3.0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The #GdkDisplay the #GdkDevice pertains to.</doc>
        <type name="Display"/>
      </property>
      <property name="has-cursor"
                version="3.0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Whether the device is represented by a cursor on the screen. Devices of type
%GDK_DEVICE_TYPE_MASTER will have %TRUE here.</doc>
        <type name="gboolean"/>
      </property>
      <property name="input-mode"
                version="3.0"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Input mode for the device.</doc>
        <type name="InputMode"/>
      </property>
      <property name="input-source"
                version="3.0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Source type for the device.</doc>
        <type name="InputSource"/>
      </property>
      <property name="n-axes" version="3.0" transfer-ownership="none">
        <doc xml:whitespace="preserve">Number of axes in the device.</doc>
        <type name="guint"/>
      </property>
      <property name="name"
                version="3.0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The device name.</doc>
        <type name="utf8"/>
      </property>
      <property name="type"
                version="3.0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Device role in the device manager.</doc>
        <type name="DeviceType"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="name">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="source">
        <type name="InputSource" c:type="GdkInputSource"/>
      </field>
      <field name="mode">
        <type name="InputMode" c:type="GdkInputMode"/>
      </field>
      <field name="has_cursor">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="num_axes">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="axes">
        <type name="DeviceAxis" c:type="GdkDeviceAxis*"/>
      </field>
      <field name="num_keys">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="keys">
        <type name="DeviceKey" c:type="GdkDeviceKey*"/>
      </field>
      <field name="priv">
        <type name="DevicePrivate" c:type="GdkDevicePrivate*"/>
      </field>
    </class>
    <record name="DeviceAxis" c:type="GdkDeviceAxis">
      <doc xml:whitespace="preserve">The &lt;structname&gt;GdkDeviceAxis&lt;/structname&gt; structure contains information
about the range and mapping of a device axis.</doc>
      <field name="use" writable="1">
        <type name="AxisUse" c:type="GdkAxisUse"/>
      </field>
      <field name="min" writable="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="max" writable="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
    </record>
    <record name="DeviceKey" c:type="GdkDeviceKey">
      <doc xml:whitespace="preserve">The &lt;structname&gt;GdkDeviceKey&lt;/structname&gt; structure contains information
about the mapping of one device macro button onto a normal X key event.</doc>
      <field name="keyval" writable="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="modifiers" writable="1">
        <type name="ModifierType" c:type="GdkModifierType"/>
      </field>
    </record>
    <class name="DeviceManager"
           c:symbol-prefix="device_manager"
           c:type="GdkDeviceManager"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="GdkDeviceManager"
           glib:get-type="gdk_device_manager_get_type"
           glib:type-struct="DeviceManagerClass">
      <virtual-method name="get_client_pointer"
                      invoker="get_client_pointer"
                      version="3.0"
                      introspectable="0">
        <doc xml:whitespace="preserve">Returns the client pointer, that is, the master pointer that acts as the core pointer
for this application. In X11, window managers may change this depending on the interaction
pattern under the presence of several pointers.
You should use this function sheldomly, only in code that isn't triggered by a #GdkEvent
and there aren't other means to get a meaningful #GdkDevice to operate on.</doc>
        <return-value>
          <doc xml:whitespace="preserve">The client pointer.</doc>
          <type name="Device" c:type="GdkDevice*"/>
        </return-value>
      </virtual-method>
      <virtual-method name="list_devices" invoker="list_devices" version="3.0">
        <doc xml:whitespace="preserve">Returns the list of devices of type @type currently attached to
#GdkDevice&lt;!-- --&gt;s. The returned list must be
freed with g_list_free (). The list elements are owned by
GTK+ and must not be freed or unreffed.</doc>
        <return-value transfer-ownership="container">
          <doc xml:whitespace="preserve">a list of</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Device"/>
          </type>
        </return-value>
        <parameters>
          <parameter name="type" transfer-ownership="none">
            <doc xml:whitespace="preserve">device type to get.</doc>
            <type name="DeviceType" c:type="GdkDeviceType"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="get_client_pointer"
              c:identifier="gdk_device_manager_get_client_pointer"
              version="3.0"
              introspectable="0">
        <doc xml:whitespace="preserve">Returns the client pointer, that is, the master pointer that acts as the core pointer
for this application. In X11, window managers may change this depending on the interaction
pattern under the presence of several pointers.
You should use this function sheldomly, only in code that isn't triggered by a #GdkEvent
and there aren't other means to get a meaningful #GdkDevice to operate on.</doc>
        <return-value>
          <doc xml:whitespace="preserve">The client pointer.</doc>
          <type name="Device" c:type="GdkDevice*"/>
        </return-value>
      </method>
      <method name="get_display"
              c:identifier="gdk_device_manager_get_display"
              version="3.0"
              introspectable="0">
        <doc xml:whitespace="preserve">Gets the #GdkDisplay associated to @device_manager.
associated to, or #NULL.</doc>
        <return-value>
          <doc xml:whitespace="preserve">the #GdkDisplay to which @device_manager is</doc>
          <type name="Display" c:type="GdkDisplay*"/>
        </return-value>
      </method>
      <method name="list_devices"
              c:identifier="gdk_device_manager_list_devices"
              version="3.0">
        <doc xml:whitespace="preserve">Returns the list of devices of type @type currently attached to
#GdkDevice&lt;!-- --&gt;s. The returned list must be
freed with g_list_free (). The list elements are owned by
GTK+ and must not be freed or unreffed.</doc>
        <return-value transfer-ownership="container">
          <doc xml:whitespace="preserve">a list of</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Device"/>
          </type>
        </return-value>
        <parameters>
          <parameter name="type" transfer-ownership="none">
            <doc xml:whitespace="preserve">device type to get.</doc>
            <type name="DeviceType" c:type="GdkDeviceType"/>
          </parameter>
        </parameters>
      </method>
      <property name="display"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Display"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="DeviceManagerPrivate" c:type="GdkDeviceManagerPrivate*"/>
      </field>
      <glib:signal name="device-added">
        <doc xml:whitespace="preserve">The ::device-added signal is emitted either when a new master
pointer is created, or when a slave (Hardware) input device
is plugged in.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the newly added #GdkDevice.</doc>
            <type name="Device"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="device-changed">
        <doc xml:whitespace="preserve">The ::device-changed signal is emitted either when some
#GdkDevice has changed the number of either axes or keys.
For example In X this will normally happen when the slave
device routing events through the master device changes,
in that case the master device will change to reflect the
new slave device axes and keys.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GdkDevice that changed.</doc>
            <type name="Device"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="device-removed">
        <doc xml:whitespace="preserve">The ::device-removed signal is emitted either when a master
pointer is removed, or when a slave (Hardware) input device
is unplugged.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the just removed #GdkDevice.</doc>
            <type name="Device"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="DeviceManagerClass"
            c:type="GdkDeviceManagerClass"
            glib:is-gtype-struct-for="DeviceManager">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="device_added">
        <callback name="device_added">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="device_manager" transfer-ownership="none">
              <type name="DeviceManager" c:type="GdkDeviceManager*"/>
            </parameter>
            <parameter name="device" transfer-ownership="none">
              <type name="Device" c:type="GdkDevice*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="device_removed">
        <callback name="device_removed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="device_manager" transfer-ownership="none">
              <type name="DeviceManager" c:type="GdkDeviceManager*"/>
            </parameter>
            <parameter name="device" transfer-ownership="none">
              <type name="Device" c:type="GdkDevice*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="device_changed">
        <callback name="device_changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="device_manager" transfer-ownership="none">
              <type name="DeviceManager" c:type="GdkDeviceManager*"/>
            </parameter>
            <parameter name="device" transfer-ownership="none">
              <type name="Device" c:type="GdkDevice*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="list_devices">
        <callback name="list_devices">
          <return-value transfer-ownership="container">
            <doc xml:whitespace="preserve">a list of</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="Device"/>
            </type>
          </return-value>
          <parameters>
            <parameter name="device_manager" transfer-ownership="none">
              <type name="DeviceManager" c:type="GdkDeviceManager*"/>
            </parameter>
            <parameter name="type" transfer-ownership="none">
              <doc xml:whitespace="preserve">device type to get.</doc>
              <type name="DeviceType" c:type="GdkDeviceType"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_client_pointer" introspectable="0">
        <callback name="get_client_pointer" introspectable="0">
          <return-value>
            <doc xml:whitespace="preserve">The client pointer.</doc>
            <type name="Device" c:type="GdkDevice*"/>
          </return-value>
          <parameters>
            <parameter name="device_manager" transfer-ownership="none">
              <type name="DeviceManager" c:type="GdkDeviceManager*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="DeviceManagerPrivate"
            c:type="GdkDeviceManagerPrivate"
            disguised="1">
    </record>
    <record name="DevicePrivate" c:type="GdkDevicePrivate" disguised="1">
    </record>
    <enumeration name="DeviceType"
                 glib:type-name="GdkDeviceType"
                 glib:get-type="gdk_device_type_get_type"
                 c:type="GdkDeviceType">
      <doc xml:whitespace="preserve">Indicates the device type. See &lt;link linkend="GdkDeviceManager.description"&gt;above&lt;/link&gt;
for more information about the meaning of these device types.</doc>
      <member name="master"
              value="0"
              c:identifier="GDK_DEVICE_TYPE_MASTER"
              glib:nick="master"/>
      <member name="slave"
              value="1"
              c:identifier="GDK_DEVICE_TYPE_SLAVE"
              glib:nick="slave"/>
      <member name="floating"
              value="2"
              c:identifier="GDK_DEVICE_TYPE_FLOATING"
              glib:nick="floating"/>
    </enumeration>
    <class name="Display"
           c:symbol-prefix="display"
           c:type="GdkDisplay"
           parent="GObject.Object"
           glib:type-name="GdkDisplay"
           glib:get-type="gdk_display_get_type"
           glib:type-struct="DisplayClass">
      <function name="get_default"
                c:identifier="gdk_display_get_default"
                version="2.2">
        <doc xml:whitespace="preserve">Gets the default #GdkDisplay. This is a convenience
function for
&lt;literal&gt;gdk_display_manager_get_default_display (gdk_display_manager_get ())&lt;/literal&gt;.
display.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GdkDisplay, or %NULL if there is no default</doc>
          <type name="Display" c:type="GdkDisplay*"/>
        </return-value>
      </function>
      <function name="open"
                c:identifier="gdk_display_open"
                version="2.2"
                introspectable="0">
        <doc xml:whitespace="preserve">Opens a display.</doc>
        <return-value>
          <doc xml:whitespace="preserve">a #GdkDisplay, or %NULL if the display could not be opened.</doc>
          <type name="Display" c:type="GdkDisplay*"/>
        </return-value>
        <parameters>
          <parameter name="display_name" transfer-ownership="none">
            <doc xml:whitespace="preserve">the name of the display to open</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="open_default_libgtk_only"
                c:identifier="gdk_display_open_default_libgtk_only"
                introspectable="0">
        <doc xml:whitespace="preserve">Opens the default display specified by command line arguments or
environment variables, sets it as the default display, and returns
it.  gdk_parse_args must have been called first. If the default
display has previously been set, simply returns that. An internal
function that should not be used by applications.
otherwise %NULL.</doc>
        <return-value>
          <doc xml:whitespace="preserve">the default display, if it could be opened,</doc>
          <type name="Display" c:type="GdkDisplay*"/>
        </return-value>
      </function>
      <virtual-method name="get_default_screen"
                      invoker="get_default_screen"
                      version="2.2"
                      introspectable="0">
        <doc xml:whitespace="preserve">Get the default #GdkScreen for @display.</doc>
        <return-value>
          <doc xml:whitespace="preserve">the default #GdkScreen object for @display</doc>
          <type name="Screen" c:type="GdkScreen*"/>
        </return-value>
      </virtual-method>
      <virtual-method name="get_display_name">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </virtual-method>
      <virtual-method name="get_n_screens"
                      invoker="get_n_screens"
                      version="2.2">
        <doc xml:whitespace="preserve">Gets the number of screen managed by the @display.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">number of screens.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </virtual-method>
      <virtual-method name="get_screen"
                      invoker="get_screen"
                      version="2.2"
                      introspectable="0">
        <doc xml:whitespace="preserve">Returns a screen object for one of the screens of the display.</doc>
        <return-value>
          <doc xml:whitespace="preserve">the #GdkScreen object</doc>
          <type name="Screen" c:type="GdkScreen*"/>
        </return-value>
        <parameters>
          <parameter name="screen_num" transfer-ownership="none">
            <doc xml:whitespace="preserve">the screen number</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="add_client_message_filter"
              c:identifier="gdk_display_add_client_message_filter"
              version="2.2"
              introspectable="0">
        <doc xml:whitespace="preserve">Adds a filter to be called when X ClientMessage events are received.
See gdk_window_add_filter() if you are interested in filtering other
types of events.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="message_type" transfer-ownership="none">
            <doc xml:whitespace="preserve">the type of ClientMessage events to receive. This will be checked against the @message_type field of the XClientMessage event struct.</doc>
            <type name="Atom" c:type="GdkAtom"/>
          </parameter>
          <parameter name="func" transfer-ownership="none" closure="2">
            <doc xml:whitespace="preserve">the function to call to process the event.</doc>
            <type name="FilterFunc" c:type="GdkFilterFunc"/>
          </parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:whitespace="preserve">user data to pass to @func.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="beep" c:identifier="gdk_display_beep" version="2.2">
        <doc xml:whitespace="preserve">Emits a short beep on @display</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="close" c:identifier="gdk_display_close" version="2.2">
        <doc xml:whitespace="preserve">Closes the connection to the windowing system for the given display,
and cleans up associated resources.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="device_is_grabbed"
              c:identifier="gdk_display_device_is_grabbed">
        <doc xml:whitespace="preserve">Returns %TRUE if there is an ongoing grab on @device for @display.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if there is a grab in effect for @device.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="device" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GdkDevice</doc>
            <type name="Device" c:type="GdkDevice*"/>
          </parameter>
        </parameters>
      </method>
      <method name="flush" c:identifier="gdk_display_flush" version="2.4">
        <doc xml:whitespace="preserve">Flushes any requests queued for the windowing system; this happens automatically
when the main loop blocks waiting for new events, but if your application
is drawing without returning control to the main loop, you may need
to call this function explicitely. A common case where this function
needs to be called is when an application is executing drawing commands
from a thread other than the thread where the main loop is running.
This is most useful for X11. On windowing systems where requests are
handled synchronously, this function will do nothing.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="get_core_pointer"
              c:identifier="gdk_display_get_core_pointer"
              version="2.2"
              introspectable="0"
              deprecated="Use gdk_device_manager_get_client_pointer() instead, or"
              deprecated-version="3.0">
        <doc xml:whitespace="preserve">Returns the core pointer device for the given display
display and should not be freed.
gdk_event_get_device() if a #GdkEvent with device
information is available.</doc>
        <return-value>
          <doc xml:whitespace="preserve">the core pointer device; this is owned by the</doc>
          <type name="Device" c:type="GdkDevice*"/>
        </return-value>
      </method>
      <method name="get_default_cursor_size"
              c:identifier="gdk_display_get_default_cursor_size"
              version="2.4">
        <doc xml:whitespace="preserve">Returns the default size to use for cursors on @display.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the default cursor size.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
      </method>
      <method name="get_default_group"
              c:identifier="gdk_display_get_default_group"
              version="2.4"
              introspectable="0">
        <doc xml:whitespace="preserve">Returns the default group leader window for all toplevel windows
on @display. This window is implicitly created by GDK. 
See gdk_window_set_group().</doc>
        <return-value>
          <doc xml:whitespace="preserve">The default group leader window for @display</doc>
          <type name="Window" c:type="GdkWindow*"/>
        </return-value>
      </method>
      <method name="get_default_screen"
              c:identifier="gdk_display_get_default_screen"
              version="2.2"
              introspectable="0">
        <doc xml:whitespace="preserve">Get the default #GdkScreen for @display.</doc>
        <return-value>
          <doc xml:whitespace="preserve">the default #GdkScreen object for @display</doc>
          <type name="Screen" c:type="GdkScreen*"/>
        </return-value>
      </method>
      <method name="get_device_manager"
              c:identifier="gdk_display_get_device_manager"
              version="3.0"
              introspectable="0">
        <doc xml:whitespace="preserve">Returns the #GdkDeviceManager associated to @display.
owned by GDK and must not be freed or unreferenced.</doc>
        <return-value>
          <doc xml:whitespace="preserve">A #GdkDeviceManager, or %NULL. This memory is</doc>
          <type name="DeviceManager" c:type="GdkDeviceManager*"/>
        </return-value>
      </method>
      <method name="get_device_state"
              c:identifier="gdk_display_get_device_state"
              version="3.0">
        <doc xml:whitespace="preserve">Gets the current location and state of @device for a given display.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="device" transfer-ownership="none">
            <doc xml:whitespace="preserve">device to query status to.</doc>
            <type name="Device" c:type="GdkDevice*"/>
          </parameter>
          <parameter name="screen" transfer-ownership="none">
            <doc xml:whitespace="preserve">location to store the #GdkScreen the @device is on, or %NULL.</doc>
            <type name="Screen" c:type="GdkScreen**"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:whitespace="preserve">location to store root window X coordinate of @device, or %NULL.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:whitespace="preserve">location to store root window Y coordinate of @device, or %NULL.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="mask" transfer-ownership="none">
            <doc xml:whitespace="preserve">location to store current modifier mask for @device, or %NULL.</doc>
            <type name="ModifierType" c:type="GdkModifierType*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_event"
              c:identifier="gdk_display_get_event"
              version="2.2">
        <doc xml:whitespace="preserve">Gets the next #GdkEvent to be processed for @display, fetching events from the
windowing system if necessary.
are pending. The returned #GdkEvent should be freed with gdk_event_free().</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the next #GdkEvent to be processed, or %NULL if no events</doc>
          <type name="Event" c:type="GdkEvent*"/>
        </return-value>
      </method>
      <method name="get_maximal_cursor_size"
              c:identifier="gdk_display_get_maximal_cursor_size"
              version="2.4">
        <doc xml:whitespace="preserve">Gets the maximal size to use for cursors on @display.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="width"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:whitespace="preserve">the return location for the maximal cursor width</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
          <parameter name="height"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:whitespace="preserve">the return location for the maximal cursor height</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_n_screens"
              c:identifier="gdk_display_get_n_screens"
              version="2.2">
        <doc xml:whitespace="preserve">Gets the number of screen managed by the @display.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">number of screens.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="get_name"
              c:identifier="gdk_display_get_name"
              version="2.2">
        <doc xml:whitespace="preserve">Gets the name of the display.
by GDK and should not be modified or freed.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a string representing the display name. This string is owned</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_pointer"
              c:identifier="gdk_display_get_pointer"
              version="2.2"
              deprecated="Use gdk_display_get_device_state() instead."
              deprecated-version="3.0">
        <doc xml:whitespace="preserve">Gets the current location of the pointer and the current modifier
mask for a given display.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="screen" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">location to store the screen that the cursor is on, or %NULL.</doc>
            <type name="Screen" c:type="GdkScreen**"/>
          </parameter>
          <parameter name="x"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     allow-none="1">
            <doc xml:whitespace="preserve">location to store root window X coordinate of pointer, or %NULL.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="y"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     allow-none="1">
            <doc xml:whitespace="preserve">location to store root window Y coordinate of pointer, or %NULL.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="mask"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">location to store current modifier mask, or %NULL</doc>
            <type name="ModifierType" c:type="GdkModifierType*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_screen"
              c:identifier="gdk_display_get_screen"
              version="2.2"
              introspectable="0">
        <doc xml:whitespace="preserve">Returns a screen object for one of the screens of the display.</doc>
        <return-value>
          <doc xml:whitespace="preserve">the #GdkScreen object</doc>
          <type name="Screen" c:type="GdkScreen*"/>
        </return-value>
        <parameters>
          <parameter name="screen_num" transfer-ownership="none">
            <doc xml:whitespace="preserve">the screen number</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_window_at_device_position"
              c:identifier="gdk_display_get_window_at_device_position"
              version="3.0"
              introspectable="0">
        <doc xml:whitespace="preserve">Obtains the window underneath @device, returning the location of the device in @win_x and @win_y. Returns
%NULL if the window tree under @device is not known to GDK (for example, belongs to another application).</doc>
        <return-value>
          <doc xml:whitespace="preserve">the #GdkWindow under the device position, or %NULL.</doc>
          <type name="Window" c:type="GdkWindow*"/>
        </return-value>
        <parameters>
          <parameter name="device" transfer-ownership="none">
            <doc xml:whitespace="preserve">#GdkDevice to query info to.</doc>
            <type name="Device" c:type="GdkDevice*"/>
          </parameter>
          <parameter name="win_x" transfer-ownership="none">
            <doc xml:whitespace="preserve">return location for the X coordinate of the device location, relative to the window origin, or %NULL.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="win_y" transfer-ownership="none">
            <doc xml:whitespace="preserve">return location for the Y coordinate of the device location, relative to the window origin, or %NULL.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_window_at_pointer"
              c:identifier="gdk_display_get_window_at_pointer"
              version="2.2"
              deprecated="Use gdk_display_get_window_at_device_position() instead."
              deprecated-version="3.0">
        <doc xml:whitespace="preserve">Obtains the window underneath the mouse pointer, returning the location
of the pointer in that window in @win_x, @win_y for @screen. Returns %NULL
if the window under the mouse pointer is not known to GDK (for example, 
belongs to another application).</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the window under the mouse pointer, or %NULL</doc>
          <type name="Window" c:type="GdkWindow*"/>
        </return-value>
        <parameters>
          <parameter name="win_x"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     allow-none="1">
            <doc xml:whitespace="preserve">return location for x coordinate of the pointer location relative to the window origin, or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="win_y"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     allow-none="1">
            <doc xml:whitespace="preserve">return location for y coordinate of the pointer location relative</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_closed"
              c:identifier="gdk_display_is_closed"
              version="2.22">
        <doc xml:whitespace="preserve">Finds out if the display has been closed.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the display is closed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="keyboard_ungrab"
              c:identifier="gdk_display_keyboard_ungrab"
              version="2.2"
              deprecated="Use gdk_device_ungrab(), together with gdk_device_grab()"
              deprecated-version="3.0">
        <doc xml:whitespace="preserve">Release any keyboard grab
instead.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="time_" transfer-ownership="none">
            <doc xml:whitespace="preserve">a timestap (e.g #GDK_CURRENT_TIME).</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="list_devices"
              c:identifier="gdk_display_list_devices"
              version="2.2"
              deprecated="Use gdk_device_manager_list_devices() instead."
              deprecated-version="3.0">
        <doc xml:whitespace="preserve">Returns the list of available input devices attached to @display.
The list is statically allocated and should not be freed.
a list of #GdkDevice</doc>
        <return-value transfer-ownership="none">
          <type name="GLib.List" c:type="GList*">
            <type name="Device"/>
          </type>
        </return-value>
      </method>
      <method name="peek_event"
              c:identifier="gdk_display_peek_event"
              version="2.2">
        <doc xml:whitespace="preserve">Gets a copy of the first #GdkEvent in the @display's event queue, without
removing the event from the queue.  (Note that this function will
not get more events from the windowing system.  It only checks the events
that have already been moved to the GDK event queue.)
if no events are in the queue. The returned #GdkEvent should be freed with
gdk_event_free().</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a copy of the first #GdkEvent on the event queue, or %NULL</doc>
          <type name="Event" c:type="GdkEvent*"/>
        </return-value>
      </method>
      <method name="pointer_is_grabbed"
              c:identifier="gdk_display_pointer_is_grabbed"
              version="2.2"
              deprecated="Use gdk_display_device_is_grabbed() instead."
              deprecated-version="3.0">
        <doc xml:whitespace="preserve">Test if the pointer is grabbed.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if an active X pointer grab is in effect</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="pointer_ungrab"
              c:identifier="gdk_display_pointer_ungrab"
              version="2.2"
              deprecated="Use gdk_device_ungrab(), together with gdk_device_grab()"
              deprecated-version="3.0">
        <doc xml:whitespace="preserve">Release any pointer grab.
instead.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="time_" transfer-ownership="none">
            <doc xml:whitespace="preserve">a timestap (e.g. %GDK_CURRENT_TIME).</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="put_event"
              c:identifier="gdk_display_put_event"
              version="2.2">
        <doc xml:whitespace="preserve">Appends a copy of the given event onto the front of the event
queue for @display.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="event" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GdkEvent.</doc>
            <type name="Event" c:type="GdkEvent*"/>
          </parameter>
        </parameters>
      </method>
      <method name="request_selection_notification"
              c:identifier="gdk_display_request_selection_notification"
              version="2.6">
        <doc xml:whitespace="preserve">Request #GdkEventOwnerChange events for ownership changes
of the selection named by the given atom.
be sent.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">whether #GdkEventOwnerChange events will</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="selection" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GdkAtom naming the selection for which ownership change notification is requested</doc>
            <type name="Atom" c:type="GdkAtom"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_device_hooks"
              c:identifier="gdk_display_set_device_hooks"
              version="3.0"
              introspectable="0">
        <doc xml:whitespace="preserve">This function allows for hooking into the operation of getting the current location of any
#GdkDevice on a particular #GdkDisplay. This is only useful for such low-level tools as
an event recorder. Applications should never have any reason to use this facility.</doc>
        <return-value>
          <doc xml:whitespace="preserve">The previous device hook table.</doc>
          <type name="DisplayDeviceHooks" c:type="GdkDisplayDeviceHooks*"/>
        </return-value>
        <parameters>
          <parameter name="new_hooks" transfer-ownership="none">
            <doc xml:whitespace="preserve">a table of pointers to functions for getting quantities related to all devices position, or %NULL to restore the default table.</doc>
            <type name="DisplayDeviceHooks" c:type="GdkDisplayDeviceHooks*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_double_click_distance"
              c:identifier="gdk_display_set_double_click_distance"
              version="2.4">
        <doc xml:whitespace="preserve">Sets the double click distance (two clicks within this distance
count as a double click and result in a #GDK_2BUTTON_PRESS event).
See also gdk_display_set_double_click_time().
Applications should &lt;emphasis&gt;not&lt;/emphasis&gt; set this, it is a global 
user-configured setting.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="distance" transfer-ownership="none">
            <doc xml:whitespace="preserve">distance in pixels</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_double_click_time"
              c:identifier="gdk_display_set_double_click_time"
              version="2.2">
        <doc xml:whitespace="preserve">Sets the double click time (two clicks within this time interval
count as a double click and result in a #GDK_2BUTTON_PRESS event).
Applications should &lt;emphasis&gt;not&lt;/emphasis&gt; set this, it is a global 
user-configured setting.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="msec" transfer-ownership="none">
            <doc xml:whitespace="preserve">double click time in milliseconds (thousandths of a second)</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_pointer_hooks"
              c:identifier="gdk_display_set_pointer_hooks"
              version="2.2"
              introspectable="0"
              deprecated="Use gdk_display_set_device_hooks() instead."
              deprecated-version="3.0">
        <doc xml:whitespace="preserve">This function allows for hooking into the operation
of getting the current location of the pointer on a particular
display. This is only useful for such low-level tools as an
event recorder. Applications should never have any
reason to use this facility.</doc>
        <return-value>
          <doc xml:whitespace="preserve">the previous pointer hook table</doc>
          <type name="DisplayPointerHooks" c:type="GdkDisplayPointerHooks*"/>
        </return-value>
        <parameters>
          <parameter name="new_hooks" transfer-ownership="none">
            <doc xml:whitespace="preserve">a table of pointers to functions for getting quantities related to the current pointer position, or %NULL to restore the default table.</doc>
            <type name="DisplayPointerHooks" c:type="GdkDisplayPointerHooks*"/>
          </parameter>
        </parameters>
      </method>
      <method name="store_clipboard"
              c:identifier="gdk_display_store_clipboard">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="clipboard_window" transfer-ownership="none">
            <type name="Window" c:type="GdkWindow*"/>
          </parameter>
          <parameter name="time_" transfer-ownership="none">
            <type name="guint32" c:type="guint32"/>
          </parameter>
          <parameter name="targets" transfer-ownership="none">
            <type name="Atom" c:type="GdkAtom*"/>
          </parameter>
          <parameter name="n_targets" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="supports_clipboard_persistence"
              c:identifier="gdk_display_supports_clipboard_persistence">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="supports_composite"
              c:identifier="gdk_display_supports_composite"
              version="2.12">
        <doc xml:whitespace="preserve">Returns %TRUE if gdk_window_set_composited() can be used
to redirect drawing on the window using compositing.
Currently this only works on X11 with XComposite and
XDamage extensions available.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if windows may be composited.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="supports_cursor_alpha"
              c:identifier="gdk_display_supports_cursor_alpha"
              version="2.4">
        <doc xml:whitespace="preserve">Returns %TRUE if cursors can use an 8bit alpha channel 
on @display. Otherwise, cursors are restricted to bilevel 
alpha (i.e. a mask).</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">whether cursors can have alpha channels.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="supports_cursor_color"
              c:identifier="gdk_display_supports_cursor_color"
              version="2.4">
        <doc xml:whitespace="preserve">Returns %TRUE if multicolored cursors are supported
on @display. Otherwise, cursors have only a forground
and a background color.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">whether cursors can have multiple colors.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="supports_input_shapes"
              c:identifier="gdk_display_supports_input_shapes"
              version="2.10">
        <doc xml:whitespace="preserve">Returns %TRUE if gdk_window_input_shape_combine_mask() can
be used to modify the input shape of windows on @display.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if windows with modified input shape are supported</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="supports_selection_notification"
              c:identifier="gdk_display_supports_selection_notification"
              version="2.6">
        <doc xml:whitespace="preserve">Returns whether #GdkEventOwnerChange events will be 
sent when the owner of a selection changes.
be sent.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">whether #GdkEventOwnerChange events will</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="supports_shapes"
              c:identifier="gdk_display_supports_shapes"
              version="2.10">
        <doc xml:whitespace="preserve">Returns %TRUE if gdk_window_shape_combine_mask() can
be used to create shaped windows on @display.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if shaped windows are supported</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="sync" c:identifier="gdk_display_sync" version="2.2">
        <doc xml:whitespace="preserve">Flushes any requests queued for the windowing system and waits until all
requests have been handled. This is often used for making sure that the
display is synchronized with the current state of the program. Calling
gdk_display_sync() before gdk_error_trap_pop() makes sure that any errors
generated from earlier requests are handled before the error trap is 
removed.
This is most useful for X11. On windowing systems where requests are
handled synchronously, this function will do nothing.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="warp_device"
              c:identifier="gdk_display_warp_device"
              version="3.0">
        <doc xml:whitespace="preserve">Warps @device in @display to the point @x,@y on
the screen @screen, unless the device is confined
to a window by a grab, in which case it will be moved
as far as allowed by the grab. Warping the pointer
creates events as if the user had moved the mouse
instantaneously to the destination.
Note that the pointer should normally be under the
control of the user. This function was added to cover
some rare use cases like keyboard navigation support
for the color picker in the #GtkColorSelectionDialog.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="device" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GdkDevice.</doc>
            <type name="Device" c:type="GdkDevice*"/>
          </parameter>
          <parameter name="screen" transfer-ownership="none">
            <doc xml:whitespace="preserve">the screen of @display to warp @device to.</doc>
            <type name="Screen" c:type="GdkScreen*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:whitespace="preserve">the X coordinate of the destination.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:whitespace="preserve">the Y coordinate of the destination.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="warp_pointer"
              c:identifier="gdk_display_warp_pointer"
              version="2.8"
              deprecated="Use gdk_display_warp_device() instead."
              deprecated-version="3.0">
        <doc xml:whitespace="preserve">Warps the pointer of @display to the point @x,@y on 
the screen @screen, unless the pointer is confined
to a window by a grab, in which case it will be moved
as far as allowed by the grab. Warping the pointer 
creates events as if the user had moved the mouse 
instantaneously to the destination.
Note that the pointer should normally be under the
control of the user. This function was added to cover
some rare use cases like keyboard navigation support
for the color picker in the #GtkColorSelectionDialog.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="screen" transfer-ownership="none">
            <doc xml:whitespace="preserve">the screen of @display to warp the pointer to</doc>
            <type name="Screen" c:type="GdkScreen*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:whitespace="preserve">the x coordinate of the destination</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:whitespace="preserve">the y coordinate of the destination</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="queued_events">
        <type name="GLib.List" c:type="GList*">
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </field>
      <field name="queued_tail">
        <type name="GLib.List" c:type="GList*">
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </field>
      <field name="multiple_click_info">
        <type name="GLib.HashTable" c:type="GHashTable*">
          <type name="gpointer" c:type="gpointer"/>
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </field>
      <field name="double_click_time">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="core_pointer">
        <type name="Device" c:type="GdkDevice*"/>
      </field>
      <field name="device_hooks">
        <type name="DisplayDeviceHooks" c:type="GdkDisplayDeviceHooks*"/>
      </field>
      <field name="closed" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="ignore_core_events" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="double_click_distance">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="device_grabs">
        <type name="GLib.HashTable" c:type="GHashTable*">
          <type name="gpointer" c:type="gpointer"/>
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </field>
      <field name="motion_hint_info">
        <type name="GLib.HashTable" c:type="GHashTable*">
          <type name="gpointer" c:type="gpointer"/>
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </field>
      <field name="pointers_info">
        <type name="GLib.HashTable" c:type="GHashTable*">
          <type name="gpointer" c:type="gpointer"/>
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </field>
      <field name="last_event_time">
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="device_manager">
        <type name="DeviceManager" c:type="GdkDeviceManager*"/>
      </field>
      <glib:signal name="closed" version="2.2">
        <doc xml:whitespace="preserve">The ::closed signal is emitted when the connection to the windowing
system for @display is closed.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE if the display was closed due to an error</doc>
            <type name="gboolean"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="opened">
        <doc xml:whitespace="preserve">The ::opened signal is emitted when the connection to the windowing
system for @display is opened.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="DisplayClass"
            c:type="GdkDisplayClass"
            glib:is-gtype-struct-for="Display">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="get_display_name">
        <callback name="get_display_name">
          <return-value transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </return-value>
          <parameters>
            <parameter name="display" transfer-ownership="none">
              <type name="Display" c:type="GdkDisplay*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_n_screens">
        <callback name="get_n_screens">
          <return-value transfer-ownership="none">
            <doc xml:whitespace="preserve">number of screens.</doc>
            <type name="gint" c:type="gint"/>
          </return-value>
          <parameters>
            <parameter name="display" transfer-ownership="none">
              <type name="Display" c:type="GdkDisplay*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_screen" introspectable="0">
        <callback name="get_screen" introspectable="0">
          <return-value>
            <doc xml:whitespace="preserve">the #GdkScreen object</doc>
            <type name="Screen" c:type="GdkScreen*"/>
          </return-value>
          <parameters>
            <parameter name="display" transfer-ownership="none">
              <type name="Display" c:type="GdkDisplay*"/>
            </parameter>
            <parameter name="screen_num" transfer-ownership="none">
              <doc xml:whitespace="preserve">the screen number</doc>
              <type name="gint" c:type="gint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_default_screen" introspectable="0">
        <callback name="get_default_screen" introspectable="0">
          <return-value>
            <doc xml:whitespace="preserve">the default #GdkScreen object for @display</doc>
            <type name="Screen" c:type="GdkScreen*"/>
          </return-value>
          <parameters>
            <parameter name="display" transfer-ownership="none">
              <type name="Display" c:type="GdkDisplay*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="closed">
        <callback name="closed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="display" transfer-ownership="none">
              <type name="Display" c:type="GdkDisplay*"/>
            </parameter>
            <parameter name="is_error" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="DisplayDeviceHooks" c:type="GdkDisplayDeviceHooks">
      <doc xml:whitespace="preserve">A table of pointers to functions for getting quantities related to
the current device position. Each #GdkDisplay has a table of this type,
which can be set using gdk_display_set_device_hooks().</doc>
      <field name="get_device_state">
        <callback name="get_device_state">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="display" transfer-ownership="none">
              <type name="Display" c:type="GdkDisplay*"/>
            </parameter>
            <parameter name="device" transfer-ownership="none">
              <type name="Device" c:type="GdkDevice*"/>
            </parameter>
            <parameter name="screen" transfer-ownership="none">
              <type name="Screen" c:type="GdkScreen**"/>
            </parameter>
            <parameter name="x" transfer-ownership="none">
              <type name="gint" c:type="gint*"/>
            </parameter>
            <parameter name="y" transfer-ownership="none">
              <type name="gint" c:type="gint*"/>
            </parameter>
            <parameter name="mask" transfer-ownership="none">
              <type name="ModifierType" c:type="GdkModifierType*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="window_get_device_position" introspectable="0">
        <callback name="window_get_device_position" introspectable="0">
          <return-value>
            <type name="Window" c:type="GdkWindow*"/>
          </return-value>
          <parameters>
            <parameter name="display" transfer-ownership="none">
              <type name="Display" c:type="GdkDisplay*"/>
            </parameter>
            <parameter name="device" transfer-ownership="none">
              <type name="Device" c:type="GdkDevice*"/>
            </parameter>
            <parameter name="window" transfer-ownership="none">
              <type name="Window" c:type="GdkWindow*"/>
            </parameter>
            <parameter name="x" transfer-ownership="none">
              <type name="gint" c:type="gint*"/>
            </parameter>
            <parameter name="y" transfer-ownership="none">
              <type name="gint" c:type="gint*"/>
            </parameter>
            <parameter name="mask" transfer-ownership="none">
              <type name="ModifierType" c:type="GdkModifierType*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="window_at_device_position" introspectable="0">
        <callback name="window_at_device_position" introspectable="0">
          <return-value>
            <type name="Window" c:type="GdkWindow*"/>
          </return-value>
          <parameters>
            <parameter name="display" transfer-ownership="none">
              <type name="Display" c:type="GdkDisplay*"/>
            </parameter>
            <parameter name="device" transfer-ownership="none">
              <type name="Device" c:type="GdkDevice*"/>
            </parameter>
            <parameter name="win_x" transfer-ownership="none">
              <type name="gint" c:type="gint*"/>
            </parameter>
            <parameter name="win_y" transfer-ownership="none">
              <type name="gint" c:type="gint*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="DisplayManager"
           c:symbol-prefix="display_manager"
           c:type="GdkDisplayManager"
           parent="GObject.Object"
           glib:type-name="GdkDisplayManager"
           glib:get-type="gdk_display_manager_get_type"
           glib:type-struct="DisplayManagerClass">
      <function name="get"
                c:identifier="gdk_display_manager_get"
                version="2.2">
        <doc xml:whitespace="preserve">Gets the singleton #GdkDisplayManager object.
gdk_init(), or gdk_init_check() must have been called first.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The global #GdkDisplayManager singleton; gdk_parse_pargs(),</doc>
          <type name="DisplayManager" c:type="GdkDisplayManager*"/>
        </return-value>
      </function>
      <method name="get_default_display"
              c:identifier="gdk_display_manager_get_default_display"
              version="2.2">
        <doc xml:whitespace="preserve">Gets the default #GdkDisplay.
display.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GdkDisplay, or %NULL if there is no default</doc>
          <type name="Display" c:type="GdkDisplay*"/>
        </return-value>
      </method>
      <method name="list_displays"
              c:identifier="gdk_display_manager_list_displays"
              version="2.2">
        <doc xml:whitespace="preserve">List all currently open displays.
#GSList of #GdkDisplay objects. Free this list with g_slist_free() when you
are done with it.</doc>
        <return-value transfer-ownership="container">
          <doc xml:whitespace="preserve">a newly allocated</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="Display"/>
          </type>
        </return-value>
      </method>
      <method name="set_default_display"
              c:identifier="gdk_display_manager_set_default_display"
              version="2.2">
        <doc xml:whitespace="preserve">Sets @display as the default display.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="display" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GdkDisplay</doc>
            <type name="Display" c:type="GdkDisplay*"/>
          </parameter>
        </parameters>
      </method>
      <property name="default-display" writable="1" transfer-ownership="none">
        <type name="Display"/>
      </property>
      <glib:signal name="display-opened" version="2.2">
        <doc xml:whitespace="preserve">The ::display_opened signal is emitted when a display is opened.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the opened display</doc>
            <type name="Display"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="DisplayManagerClass"
            c:type="GdkDisplayManagerClass"
            glib:is-gtype-struct-for="DisplayManager">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="display_opened">
        <callback name="display_opened">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="display_manager" transfer-ownership="none">
              <type name="DisplayManager" c:type="GdkDisplayManager*"/>
            </parameter>
            <parameter name="display" transfer-ownership="none">
              <type name="Display" c:type="GdkDisplay*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="DisplayPointerHooks" c:type="GdkDisplayPointerHooks">
      <field name="get_pointer">
        <callback name="get_pointer">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="display" transfer-ownership="none">
              <type name="Display" c:type="GdkDisplay*"/>
            </parameter>
            <parameter name="screen" transfer-ownership="none">
              <type name="Screen" c:type="GdkScreen**"/>
            </parameter>
            <parameter name="x" transfer-ownership="none">
              <type name="gint" c:type="gint*"/>
            </parameter>
            <parameter name="y" transfer-ownership="none">
              <type name="gint" c:type="gint*"/>
            </parameter>
            <parameter name="mask" transfer-ownership="none">
              <type name="ModifierType" c:type="GdkModifierType*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="window_get_pointer" introspectable="0">
        <callback name="window_get_pointer" introspectable="0">
          <return-value>
            <type name="Window" c:type="GdkWindow*"/>
          </return-value>
          <parameters>
            <parameter name="display" transfer-ownership="none">
              <type name="Display" c:type="GdkDisplay*"/>
            </parameter>
            <parameter name="window" transfer-ownership="none">
              <type name="Window" c:type="GdkWindow*"/>
            </parameter>
            <parameter name="x" transfer-ownership="none">
              <type name="gint" c:type="gint*"/>
            </parameter>
            <parameter name="y" transfer-ownership="none">
              <type name="gint" c:type="gint*"/>
            </parameter>
            <parameter name="mask" transfer-ownership="none">
              <type name="ModifierType" c:type="GdkModifierType*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="window_at_pointer" introspectable="0">
        <callback name="window_at_pointer" introspectable="0">
          <return-value>
            <type name="Window" c:type="GdkWindow*"/>
          </return-value>
          <parameters>
            <parameter name="display" transfer-ownership="none">
              <type name="Display" c:type="GdkDisplay*"/>
            </parameter>
            <parameter name="win_x" transfer-ownership="none">
              <type name="gint" c:type="gint*"/>
            </parameter>
            <parameter name="win_y" transfer-ownership="none">
              <type name="gint" c:type="gint*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <bitfield name="DragAction"
              glib:type-name="GdkDragAction"
              glib:get-type="gdk_drag_action_get_type"
              c:type="GdkDragAction">
      <doc xml:whitespace="preserve">Used in #GdkDragContext to indicate what the destination
should do with the dropped data.</doc>
      <member name="default"
              value="1"
              c:identifier="GDK_ACTION_DEFAULT"
              glib:nick="default"/>
      <member name="copy"
              value="2"
              c:identifier="GDK_ACTION_COPY"
              glib:nick="copy"/>
      <member name="move"
              value="4"
              c:identifier="GDK_ACTION_MOVE"
              glib:nick="move"/>
      <member name="link"
              value="8"
              c:identifier="GDK_ACTION_LINK"
              glib:nick="link"/>
      <member name="private"
              value="16"
              c:identifier="GDK_ACTION_PRIVATE"
              glib:nick="private"/>
      <member name="ask"
              value="32"
              c:identifier="GDK_ACTION_ASK"
              glib:nick="ask"/>
    </bitfield>
    <class name="DragContext"
           c:symbol-prefix="drag_context"
           c:type="GdkDragContext"
           parent="GObject.Object"
           glib:type-name="GdkDragContext"
           glib:get-type="gdk_drag_context_get_type"
           glib:type-struct="DragContextClass">
      <constructor name="new" c:identifier="gdk_drag_context_new">
        <doc xml:whitespace="preserve">Creates a new #GdkDragContext.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the newly created #GdkDragContext.</doc>
          <type name="DragContext" c:type="GdkDragContext*"/>
        </return-value>
      </constructor>
      <method name="get_actions"
              c:identifier="gdk_drag_context_get_actions"
              version="2.22">
        <doc xml:whitespace="preserve">Determines the bitmask of actions proposed by the source if
gdk_drag_context_suggested_action() returns GDK_ACTION_ASK.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the #GdkDragAction flags</doc>
          <type name="DragAction" c:type="GdkDragAction"/>
        </return-value>
      </method>
      <method name="get_device"
              c:identifier="gdk_drag_context_get_device"
              introspectable="0">
        <doc xml:whitespace="preserve">Returns the #GdkDevice associated to the drag context.</doc>
        <return-value>
          <doc xml:whitespace="preserve">The #GdkDevice associated to @context.</doc>
          <type name="Device" c:type="GdkDevice*"/>
        </return-value>
      </method>
      <method name="get_selected_action"
              c:identifier="gdk_drag_context_get_selected_action"
              version="2.22">
        <doc xml:whitespace="preserve">Determines the action chosen by the drag destination.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GdkDragAction value</doc>
          <type name="DragAction" c:type="GdkDragAction"/>
        </return-value>
      </method>
      <method name="get_source_window"
              c:identifier="gdk_drag_context_get_source_window"
              version="2.22">
        <doc xml:whitespace="preserve">Returns the #GdkWindow where the DND operation started.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GdkWindow</doc>
          <type name="Window" c:type="GdkWindow*"/>
        </return-value>
      </method>
      <method name="get_suggested_action"
              c:identifier="gdk_drag_context_get_suggested_action"
              version="2.22">
        <doc xml:whitespace="preserve">Determines the suggested drag action of the context.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GdkDragAction value</doc>
          <type name="DragAction" c:type="GdkDragAction"/>
        </return-value>
      </method>
      <method name="list_targets"
              c:identifier="gdk_drag_context_list_targets"
              version="2.22">
        <doc xml:whitespace="preserve">Retrieves the list of targets of the context.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GList of targets</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Atom"/>
          </type>
        </return-value>
      </method>
      <method name="set_device" c:identifier="gdk_drag_context_set_device">
        <doc xml:whitespace="preserve">Associates a #GdkDevice to @context, so all Drag and Drop events
for @context are emitted as if they came from this device.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="device" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GdkDevice</doc>
            <type name="Device" c:type="GdkDevice*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="protocol">
        <type name="DragProtocol" c:type="GdkDragProtocol"/>
      </field>
      <field name="is_source">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="source_window">
        <type name="Window" c:type="GdkWindow*"/>
      </field>
      <field name="dest_window">
        <type name="Window" c:type="GdkWindow*"/>
      </field>
      <field name="targets">
        <type name="GLib.List" c:type="GList*">
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </field>
      <field name="actions">
        <type name="DragAction" c:type="GdkDragAction"/>
      </field>
      <field name="suggested_action">
        <type name="DragAction" c:type="GdkDragAction"/>
      </field>
      <field name="action">
        <type name="DragAction" c:type="GdkDragAction"/>
      </field>
      <field name="start_time">
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="windowing_data">
        <type name="gpointer" c:type="gpointer"/>
      </field>
    </class>
    <record name="DragContextClass"
            c:type="GdkDragContextClass"
            glib:is-gtype-struct-for="DragContext">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <enumeration name="DragProtocol"
                 glib:type-name="GdkDragProtocol"
                 glib:get-type="gdk_drag_protocol_get_type"
                 c:type="GdkDragProtocol">
      <doc xml:whitespace="preserve">Used in #GdkDragContext to indicate the protocol according to
which DND is done.</doc>
      <member name="motif"
              value="0"
              c:identifier="GDK_DRAG_PROTO_MOTIF"
              glib:nick="motif"/>
      <member name="xdnd"
              value="1"
              c:identifier="GDK_DRAG_PROTO_XDND"
              glib:nick="xdnd"/>
      <member name="rootwin"
              value="2"
              c:identifier="GDK_DRAG_PROTO_ROOTWIN"
              glib:nick="rootwin"/>
      <member name="none"
              value="3"
              c:identifier="GDK_DRAG_PROTO_NONE"
              glib:nick="none"/>
      <member name="win32_dropfiles"
              value="4"
              c:identifier="GDK_DRAG_PROTO_WIN32_DROPFILES"
              glib:nick="win32-dropfiles"/>
      <member name="ole2"
              value="5"
              c:identifier="GDK_DRAG_PROTO_OLE2"
              glib:nick="ole2"/>
      <member name="local"
              value="6"
              c:identifier="GDK_DRAG_PROTO_LOCAL"
              glib:nick="local"/>
    </enumeration>
    <class name="Drawable"
           c:symbol-prefix="drawable"
           c:type="GdkDrawable"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="GdkDrawable"
           glib:get-type="gdk_drawable_get_type"
           glib:type-struct="DrawableClass">
      <virtual-method name="create_cairo_surface">
        <return-value transfer-ownership="full">
          <type name="cairo.Surface" c:type="cairo_surface_t*"/>
        </return-value>
        <parameters>
          <parameter name="width" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_clip_region" invoker="get_clip_region">
        <doc xml:whitespace="preserve">Computes the region of a drawable that potentially can be written
to by drawing primitives. This region will not take into account
the clip region for the GC, and may also not take into account
other factors such as if the window is obscured by other windows,
but no area outside of this region will be affected by drawing
primitives.
when you are done.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a #cairo_region_t. This must be freed with cairo_region_destroy()</doc>
          <type name="cairo.Region" c:type="cairo_region_t*"/>
        </return-value>
      </virtual-method>
      <virtual-method name="get_colormap"
                      invoker="get_colormap"
                      introspectable="0">
        <doc xml:whitespace="preserve">Gets the colormap for @drawable, if one is set; returns
%NULL otherwise.</doc>
        <return-value>
          <doc xml:whitespace="preserve">the colormap, or %NULL</doc>
          <type name="Colormap" c:type="GdkColormap*"/>
        </return-value>
      </virtual-method>
      <virtual-method name="get_depth" invoker="get_depth">
        <doc xml:whitespace="preserve">Obtains the bit depth of the drawable, that is, the number of bits
that make up a pixel in the drawable's visual. Examples are 8 bits
per pixel, 24 bits per pixel, etc.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">number of bits per pixel</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </virtual-method>
      <virtual-method name="get_screen"
                      invoker="get_screen"
                      version="2.2"
                      introspectable="0">
        <doc xml:whitespace="preserve">Gets the #GdkScreen associated with a #GdkDrawable.</doc>
        <return-value>
          <doc xml:whitespace="preserve">the #GdkScreen associated with @drawable</doc>
          <type name="Screen" c:type="GdkScreen*"/>
        </return-value>
      </virtual-method>
      <virtual-method name="get_size" invoker="get_size">
        <doc xml:whitespace="preserve">Fills *@width and *@height with the size of @drawable.
On the X11 platform, if @drawable is a #GdkWindow, the returned
size is the size reported in the most-recently-processed configure
event, rather than the current size on the X server.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="width"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     allow-none="1">
            <doc xml:whitespace="preserve">location to store drawable's width, or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="height"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     allow-none="1">
            <doc xml:whitespace="preserve">location to store drawable's height, or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_source_drawable" introspectable="0">
        <return-value>
          <type name="Drawable" c:type="GdkDrawable*"/>
        </return-value>
      </virtual-method>
      <virtual-method name="get_visible_region" invoker="get_visible_region">
        <doc xml:whitespace="preserve">Computes the region of a drawable that is potentially visible.
This does not necessarily take into account if the window is
obscured by other windows, but no area outside of this region
is visible.
when you are done.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a #cairo_region_t. This must be freed with cairo_region_destroy()</doc>
          <type name="cairo.Region" c:type="cairo_region_t*"/>
        </return-value>
      </virtual-method>
      <virtual-method name="get_visual"
                      invoker="get_visual"
                      introspectable="0">
        <doc xml:whitespace="preserve">Gets the #GdkVisual describing the pixel format of @drawable.</doc>
        <return-value>
          <doc xml:whitespace="preserve">a #GdkVisual</doc>
          <type name="Visual" c:type="GdkVisual*"/>
        </return-value>
      </virtual-method>
      <virtual-method name="ref_cairo_surface">
        <return-value transfer-ownership="full">
          <type name="cairo.Surface" c:type="cairo_surface_t*"/>
        </return-value>
      </virtual-method>
      <virtual-method name="set_cairo_clip">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="cr" transfer-ownership="none">
            <type name="cairo.Context" c:type="cairo_t*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_colormap" invoker="set_colormap">
        <doc xml:whitespace="preserve">Sets the colormap associated with @drawable. Normally this will
happen automatically when the drawable is created; you only need to
use this function if the drawable-creating function did not have a
way to determine the colormap, and you then use drawable operations
that require a colormap. The colormap for all drawables and
graphics contexts you intend to use together should match.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="cmap" transfer-ownership="none">
            <type name="Colormap" c:type="GdkColormap*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="get_clip_region"
              c:identifier="gdk_drawable_get_clip_region">
        <doc xml:whitespace="preserve">Computes the region of a drawable that potentially can be written
to by drawing primitives. This region will not take into account
the clip region for the GC, and may also not take into account
other factors such as if the window is obscured by other windows,
but no area outside of this region will be affected by drawing
primitives.
when you are done.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a #cairo_region_t. This must be freed with cairo_region_destroy()</doc>
          <type name="cairo.Region" c:type="cairo_region_t*"/>
        </return-value>
      </method>
      <method name="get_colormap"
              c:identifier="gdk_drawable_get_colormap"
              introspectable="0">
        <doc xml:whitespace="preserve">Gets the colormap for @drawable, if one is set; returns
%NULL otherwise.</doc>
        <return-value>
          <doc xml:whitespace="preserve">the colormap, or %NULL</doc>
          <type name="Colormap" c:type="GdkColormap*"/>
        </return-value>
      </method>
      <method name="get_depth" c:identifier="gdk_drawable_get_depth">
        <doc xml:whitespace="preserve">Obtains the bit depth of the drawable, that is, the number of bits
that make up a pixel in the drawable's visual. Examples are 8 bits
per pixel, 24 bits per pixel, etc.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">number of bits per pixel</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="get_display"
              c:identifier="gdk_drawable_get_display"
              version="2.2"
              introspectable="0">
        <doc xml:whitespace="preserve">Gets the #GdkDisplay associated with a #GdkDrawable.</doc>
        <return-value>
          <doc xml:whitespace="preserve">the #GdkDisplay associated with @drawable</doc>
          <type name="Display" c:type="GdkDisplay*"/>
        </return-value>
      </method>
      <method name="get_screen"
              c:identifier="gdk_drawable_get_screen"
              version="2.2"
              introspectable="0">
        <doc xml:whitespace="preserve">Gets the #GdkScreen associated with a #GdkDrawable.</doc>
        <return-value>
          <doc xml:whitespace="preserve">the #GdkScreen associated with @drawable</doc>
          <type name="Screen" c:type="GdkScreen*"/>
        </return-value>
      </method>
      <method name="get_size" c:identifier="gdk_drawable_get_size">
        <doc xml:whitespace="preserve">Fills *@width and *@height with the size of @drawable.
On the X11 platform, if @drawable is a #GdkWindow, the returned
size is the size reported in the most-recently-processed configure
event, rather than the current size on the X server.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="width"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     allow-none="1">
            <doc xml:whitespace="preserve">location to store drawable's width, or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="height"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     allow-none="1">
            <doc xml:whitespace="preserve">location to store drawable's height, or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_visible_region"
              c:identifier="gdk_drawable_get_visible_region">
        <doc xml:whitespace="preserve">Computes the region of a drawable that is potentially visible.
This does not necessarily take into account if the window is
obscured by other windows, but no area outside of this region
is visible.
when you are done.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a #cairo_region_t. This must be freed with cairo_region_destroy()</doc>
          <type name="cairo.Region" c:type="cairo_region_t*"/>
        </return-value>
      </method>
      <method name="get_visual"
              c:identifier="gdk_drawable_get_visual"
              introspectable="0">
        <doc xml:whitespace="preserve">Gets the #GdkVisual describing the pixel format of @drawable.</doc>
        <return-value>
          <doc xml:whitespace="preserve">a #GdkVisual</doc>
          <type name="Visual" c:type="GdkVisual*"/>
        </return-value>
      </method>
      <method name="set_colormap" c:identifier="gdk_drawable_set_colormap">
        <doc xml:whitespace="preserve">Sets the colormap associated with @drawable. Normally this will
happen automatically when the drawable is created; you only need to
use this function if the drawable-creating function did not have a
way to determine the colormap, and you then use drawable operations
that require a colormap. The colormap for all drawables and
graphics contexts you intend to use together should match.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="colormap" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GdkColormap</doc>
            <type name="Colormap" c:type="GdkColormap*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="DrawableClass"
            c:type="GdkDrawableClass"
            glib:is-gtype-struct-for="Drawable">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="get_depth">
        <callback name="get_depth">
          <return-value transfer-ownership="none">
            <doc xml:whitespace="preserve">number of bits per pixel</doc>
            <type name="gint" c:type="gint"/>
          </return-value>
          <parameters>
            <parameter name="drawable" transfer-ownership="none">
              <type name="Drawable" c:type="GdkDrawable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_size">
        <callback name="get_size">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="drawable" transfer-ownership="none">
              <type name="Drawable" c:type="GdkDrawable*"/>
            </parameter>
            <parameter name="width"
                       direction="out"
                       caller-allocates="0"
                       transfer-ownership="full"
                       allow-none="1">
              <doc xml:whitespace="preserve">location to store drawable's width, or %NULL</doc>
              <type name="gint" c:type="gint*"/>
            </parameter>
            <parameter name="height"
                       direction="out"
                       caller-allocates="0"
                       transfer-ownership="full"
                       allow-none="1">
              <doc xml:whitespace="preserve">location to store drawable's height, or %NULL</doc>
              <type name="gint" c:type="gint*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_colormap">
        <callback name="set_colormap">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="drawable" transfer-ownership="none">
              <type name="Drawable" c:type="GdkDrawable*"/>
            </parameter>
            <parameter name="cmap" transfer-ownership="none">
              <type name="Colormap" c:type="GdkColormap*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_colormap" introspectable="0">
        <callback name="get_colormap" introspectable="0">
          <return-value>
            <doc xml:whitespace="preserve">the colormap, or %NULL</doc>
            <type name="Colormap" c:type="GdkColormap*"/>
          </return-value>
          <parameters>
            <parameter name="drawable" transfer-ownership="none">
              <type name="Drawable" c:type="GdkDrawable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_visual" introspectable="0">
        <callback name="get_visual" introspectable="0">
          <return-value>
            <doc xml:whitespace="preserve">a #GdkVisual</doc>
            <type name="Visual" c:type="GdkVisual*"/>
          </return-value>
          <parameters>
            <parameter name="drawable" transfer-ownership="none">
              <type name="Drawable" c:type="GdkDrawable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_screen" introspectable="0">
        <callback name="get_screen" introspectable="0">
          <return-value>
            <doc xml:whitespace="preserve">the #GdkScreen associated with @drawable</doc>
            <type name="Screen" c:type="GdkScreen*"/>
          </return-value>
          <parameters>
            <parameter name="drawable" transfer-ownership="none">
              <type name="Drawable" c:type="GdkDrawable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_clip_region">
        <callback name="get_clip_region">
          <return-value transfer-ownership="full">
            <doc xml:whitespace="preserve">a #cairo_region_t. This must be freed with cairo_region_destroy()</doc>
            <type name="cairo.Region" c:type="cairo_region_t*"/>
          </return-value>
          <parameters>
            <parameter name="drawable" transfer-ownership="none">
              <type name="Drawable" c:type="GdkDrawable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_visible_region">
        <callback name="get_visible_region">
          <return-value transfer-ownership="full">
            <doc xml:whitespace="preserve">a #cairo_region_t. This must be freed with cairo_region_destroy()</doc>
            <type name="cairo.Region" c:type="cairo_region_t*"/>
          </return-value>
          <parameters>
            <parameter name="drawable" transfer-ownership="none">
              <type name="Drawable" c:type="GdkDrawable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="ref_cairo_surface">
        <callback name="ref_cairo_surface">
          <return-value transfer-ownership="full">
            <type name="cairo.Surface" c:type="cairo_surface_t*"/>
          </return-value>
          <parameters>
            <parameter name="drawable" transfer-ownership="none">
              <type name="Drawable" c:type="GdkDrawable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_source_drawable" introspectable="0">
        <callback name="get_source_drawable" introspectable="0">
          <return-value>
            <type name="Drawable" c:type="GdkDrawable*"/>
          </return-value>
          <parameters>
            <parameter name="drawable" transfer-ownership="none">
              <type name="Drawable" c:type="GdkDrawable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_cairo_clip">
        <callback name="set_cairo_clip">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="drawable" transfer-ownership="none">
              <type name="Drawable" c:type="GdkDrawable*"/>
            </parameter>
            <parameter name="cr" transfer-ownership="none">
              <type name="cairo.Context" c:type="cairo_t*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="create_cairo_surface">
        <callback name="create_cairo_surface">
          <return-value transfer-ownership="full">
            <type name="cairo.Surface" c:type="cairo_surface_t*"/>
          </return-value>
          <parameters>
            <parameter name="drawable" transfer-ownership="none">
              <type name="Drawable" c:type="GdkDrawable*"/>
            </parameter>
            <parameter name="width" transfer-ownership="none">
              <type name="gint" c:type="int"/>
            </parameter>
            <parameter name="height" transfer-ownership="none">
              <type name="gint" c:type="int"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_gdk_reserved7" introspectable="0">
        <callback name="_gdk_reserved7">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gdk_reserved9" introspectable="0">
        <callback name="_gdk_reserved9">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gdk_reserved10" introspectable="0">
        <callback name="_gdk_reserved10">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gdk_reserved11" introspectable="0">
        <callback name="_gdk_reserved11">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gdk_reserved12" introspectable="0">
        <callback name="_gdk_reserved12">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gdk_reserved13" introspectable="0">
        <callback name="_gdk_reserved13">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gdk_reserved14" introspectable="0">
        <callback name="_gdk_reserved14">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gdk_reserved15" introspectable="0">
        <callback name="_gdk_reserved15">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <union name="Event"
           c:type="GdkEvent"
           glib:type-name="GdkEvent"
           glib:get-type="gdk_event_get_type"
           c:symbol-prefix="event">
      <field name="type" writable="1">
        <type name="EventType" c:type="GdkEventType"/>
      </field>
      <field name="any" writable="1">
        <type name="EventAny" c:type="GdkEventAny"/>
      </field>
      <field name="expose" writable="1">
        <type name="EventExpose" c:type="GdkEventExpose"/>
      </field>
      <field name="no_expose" writable="1">
        <type name="EventNoExpose" c:type="GdkEventNoExpose"/>
      </field>
      <field name="visibility" writable="1">
        <type name="EventVisibility" c:type="GdkEventVisibility"/>
      </field>
      <field name="motion" writable="1">
        <type name="EventMotion" c:type="GdkEventMotion"/>
      </field>
      <field name="button" writable="1">
        <type name="EventButton" c:type="GdkEventButton"/>
      </field>
      <field name="scroll" writable="1">
        <type name="EventScroll" c:type="GdkEventScroll"/>
      </field>
      <field name="key" writable="1">
        <type name="EventKey" c:type="GdkEventKey"/>
      </field>
      <field name="crossing" writable="1">
        <type name="EventCrossing" c:type="GdkEventCrossing"/>
      </field>
      <field name="focus_change" writable="1">
        <type name="EventFocus" c:type="GdkEventFocus"/>
      </field>
      <field name="configure" writable="1">
        <type name="EventConfigure" c:type="GdkEventConfigure"/>
      </field>
      <field name="property" writable="1">
        <type name="EventProperty" c:type="GdkEventProperty"/>
      </field>
      <field name="selection" writable="1">
        <type name="EventSelection" c:type="GdkEventSelection"/>
      </field>
      <field name="owner_change" writable="1">
        <type name="EventOwnerChange" c:type="GdkEventOwnerChange"/>
      </field>
      <field name="proximity" writable="1">
        <type name="EventProximity" c:type="GdkEventProximity"/>
      </field>
      <field name="client" writable="1">
        <type name="EventClient" c:type="GdkEventClient"/>
      </field>
      <field name="dnd" writable="1">
        <type name="EventDND" c:type="GdkEventDND"/>
      </field>
      <field name="window_state" writable="1">
        <type name="EventWindowState" c:type="GdkEventWindowState"/>
      </field>
      <field name="setting" writable="1">
        <type name="EventSetting" c:type="GdkEventSetting"/>
      </field>
      <field name="grab_broken" writable="1">
        <type name="EventGrabBroken" c:type="GdkEventGrabBroken"/>
      </field>
      <constructor name="new" c:identifier="gdk_event_new" version="2.2">
        <doc xml:whitespace="preserve">Creates a new event of the given type. All fields are set to 0.
should be freed with gdk_event_free().</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a newly-allocated #GdkEvent. The returned #GdkEvent</doc>
          <type name="Event" c:type="GdkEvent*"/>
        </return-value>
        <parameters>
          <parameter name="type" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GdkEventType</doc>
            <type name="EventType" c:type="GdkEventType"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="_get_angle"
              c:identifier="gdk_events_get_angle"
              version="3.0">
        <doc xml:whitespace="preserve">If both events contain X/Y information, this function will return %TRUE
and return in @angle the relative angle from @event1 to @event2. The rotation
direction for positive angles is from the positive X axis towards the positive
Y axis.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the angle could be calculated.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="event2" transfer-ownership="none">
            <doc xml:whitespace="preserve">second #GdkEvent</doc>
            <type name="Event" c:type="GdkEvent*"/>
          </parameter>
          <parameter name="angle" transfer-ownership="none">
            <doc xml:whitespace="preserve">return location for the relative angle between both events</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="_get_center"
              c:identifier="gdk_events_get_center"
              version="3.0">
        <doc xml:whitespace="preserve">If both events contain X/Y information, the center of both coordinates
will be returned in @x and @y.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the center could be calculated.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="event2" transfer-ownership="none">
            <doc xml:whitespace="preserve">second #GdkEvent</doc>
            <type name="Event" c:type="GdkEvent*"/>
          </parameter>
          <parameter name="x"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:whitespace="preserve">return location for the X coordinate of the center</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="y"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:whitespace="preserve">return location for the Y coordinate of the center</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="_get_distance"
              c:identifier="gdk_events_get_distance"
              version="3.0">
        <doc xml:whitespace="preserve">If both events have X/Y information, the distance between both coordinates
(as in a straight line going from @event1 to @event2) will be returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the distance could be calculated.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="event2" transfer-ownership="none">
            <doc xml:whitespace="preserve">second #GdkEvent</doc>
            <type name="Event" c:type="GdkEvent*"/>
          </parameter>
          <parameter name="distance" transfer-ownership="none">
            <doc xml:whitespace="preserve">return location for the distance</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="copy" c:identifier="gdk_event_copy">
        <doc xml:whitespace="preserve">Copies a #GdkEvent, copying or incrementing the reference count of the
resources associated with it (e.g. #GdkWindow's and strings).
gdk_event_free().</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a copy of @event. The returned #GdkEvent should be freed with</doc>
          <type name="Event" c:type="GdkEvent*"/>
        </return-value>
      </method>
      <method name="free" c:identifier="gdk_event_free">
        <doc xml:whitespace="preserve">Frees a #GdkEvent, freeing or decrementing any resources associated with it.
Note that this function should only be called with events returned from
functions such as gdk_event_peek(), gdk_event_get(), gdk_event_copy()
and gdk_event_new().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="get_axis" c:identifier="gdk_event_get_axis">
        <doc xml:whitespace="preserve">Extract the axis value for a particular axis use from
an event structure.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the specified axis was found, otherwise %FALSE</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="axis_use"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:whitespace="preserve">the axis use to look for</doc>
            <type name="AxisUse" c:type="GdkAxisUse"/>
          </parameter>
          <parameter name="value"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:whitespace="preserve">location to store the value found</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_coords" c:identifier="gdk_event_get_coords">
        <doc xml:whitespace="preserve">Extract the event window relative x/y coordinates from an event.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the event delivered event window coordinates</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="x_win"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:whitespace="preserve">location to put event window x coordinate</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="y_win"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:whitespace="preserve">location to put event window y coordinate</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_device"
              c:identifier="gdk_event_get_device"
              version="3.0">
        <doc xml:whitespace="preserve">If the event contains a "device" field, this function will return
it, else it will return %NULL.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GdkDevice, or %NULL.</doc>
          <type name="Device" c:type="GdkDevice*"/>
        </return-value>
      </method>
      <method name="get_root_coords" c:identifier="gdk_event_get_root_coords">
        <doc xml:whitespace="preserve">Extract the root window relative x/y coordinates from an event.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the event delivered root window coordinates</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="x_root"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:whitespace="preserve">location to put root window x coordinate</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="y_root"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:whitespace="preserve">location to put root window y coordinate</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_screen"
              c:identifier="gdk_event_get_screen"
              version="2.2"
              introspectable="0">
        <doc xml:whitespace="preserve">Returns the screen for the event. The screen is
typically the screen for &lt;literal&gt;event-&gt;any.window&lt;/literal&gt;, but
for events such as mouse events, it is the screen
where the pointer was when the event occurs -
that is, the screen which has the root window 
to which &lt;literal&gt;event-&gt;motion.x_root&lt;/literal&gt; and
&lt;literal&gt;event-&gt;motion.y_root&lt;/literal&gt; are relative.</doc>
        <return-value>
          <doc xml:whitespace="preserve">the screen for the event</doc>
          <type name="Screen" c:type="GdkScreen*"/>
        </return-value>
      </method>
      <method name="get_state" c:identifier="gdk_event_get_state">
        <doc xml:whitespace="preserve">If the event contains a "state" field, puts that field in @state. Otherwise
stores an empty state (0). Returns %TRUE if there was a state field
in the event. @event may be %NULL, in which case it's treated
as if the event had no state field.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if there was a state field in the event</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="state"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:whitespace="preserve">return location for state</doc>
            <type name="ModifierType" c:type="GdkModifierType*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_time" c:identifier="gdk_event_get_time">
        <doc xml:whitespace="preserve">Returns the time stamp from @event, if there is one; otherwise
returns #GDK_CURRENT_TIME. If @event is %NULL, returns #GDK_CURRENT_TIME.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">time stamp field from @event</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
      </method>
      <method name="put" c:identifier="gdk_event_put">
        <doc xml:whitespace="preserve">Appends a copy of the given event onto the front of the event
queue for event-&gt;any.window's display, or the default event
queue if event-&gt;any.window is %NULL. See gdk_display_put_event().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="send_client_message"
              c:identifier="gdk_event_send_client_message">
        <doc xml:whitespace="preserve">Sends an X ClientMessage event to a given window (which must be
on the default #GdkDisplay.)
This could be used for communicating between different applications,
though the amount of data is limited to 20 bytes.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">non-zero on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="winid" transfer-ownership="none">
            <doc xml:whitespace="preserve">the window to send the X ClientMessage event to.</doc>
            <type name="NativeWindow" c:type="GdkNativeWindow"/>
          </parameter>
        </parameters>
      </method>
      <method name="send_clientmessage_toall"
              c:identifier="gdk_event_send_clientmessage_toall">
        <doc xml:whitespace="preserve">Sends an X ClientMessage event to all toplevel windows on the default
#GdkScreen.
Toplevel windows are determined by checking for the WM_STATE property, as
described in the Inter-Client Communication Conventions Manual (ICCCM).
If no windows are found with the WM_STATE property set, the message is sent
to all children of the root window.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="set_device"
              c:identifier="gdk_event_set_device"
              version="3.0">
        <doc xml:whitespace="preserve">Sets the device for @event to @device. The event must
have been allocated by GTK+, for instance, by
gdk_event_copy().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="device" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GdkDevice</doc>
            <type name="Device" c:type="GdkDevice*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_screen"
              c:identifier="gdk_event_set_screen"
              version="2.2">
        <doc xml:whitespace="preserve">Sets the screen for @event to @screen. The event must
have been allocated by GTK+, for instance, by
gdk_event_copy().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="screen" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GdkScreen</doc>
            <type name="Screen" c:type="GdkScreen*"/>
          </parameter>
        </parameters>
      </method>
    </union>
    <record name="EventAny" c:type="GdkEventAny">
      <field name="type" writable="1">
        <type name="EventType" c:type="GdkEventType"/>
      </field>
      <field name="window" writable="1">
        <type name="Window" c:type="GdkWindow*"/>
      </field>
      <field name="send_event" writable="1">
        <type name="gint8" c:type="gint8"/>
      </field>
    </record>
    <record name="EventButton" c:type="GdkEventButton">
      <field name="type" writable="1">
        <type name="EventType" c:type="GdkEventType"/>
      </field>
      <field name="window" writable="1">
        <type name="Window" c:type="GdkWindow*"/>
      </field>
      <field name="send_event" writable="1">
        <type name="gint8" c:type="gint8"/>
      </field>
      <field name="time" writable="1">
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="x" writable="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="y" writable="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="axes" writable="1">
        <type name="gdouble" c:type="gdouble*"/>
      </field>
      <field name="state" writable="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="button" writable="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="device" writable="1">
        <type name="Device" c:type="GdkDevice*"/>
      </field>
      <field name="x_root" writable="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="y_root" writable="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
    </record>
    <record name="EventClient" c:type="GdkEventClient">
      <field name="type" writable="1">
        <type name="EventType" c:type="GdkEventType"/>
      </field>
      <field name="window" writable="1">
        <type name="Window" c:type="GdkWindow*"/>
      </field>
      <field name="send_event" writable="1">
        <type name="gint8" c:type="gint8"/>
      </field>
      <field name="message_type" writable="1">
        <type name="Atom" c:type="GdkAtom"/>
      </field>
      <field name="data_format" writable="1">
        <type name="gushort" c:type="gushort"/>
      </field>
      <union name="data" c:type="data">
        <field name="b" writable="1">
          <array zero-terminated="0" c:type="gchar" fixed-size="20">
            <type name="gchar" c:type="char"/>
          </array>
        </field>
        <field name="s" writable="1">
          <array zero-terminated="0" c:type="gshort" fixed-size="10">
            <type name="gshort" c:type="short"/>
          </array>
        </field>
        <field name="l" writable="1">
          <array zero-terminated="0" c:type="glong" fixed-size="5">
            <type name="glong" c:type="long"/>
          </array>
        </field>
      </union>
    </record>
    <record name="EventConfigure" c:type="GdkEventConfigure">
      <field name="type" writable="1">
        <type name="EventType" c:type="GdkEventType"/>
      </field>
      <field name="window" writable="1">
        <type name="Window" c:type="GdkWindow*"/>
      </field>
      <field name="send_event" writable="1">
        <type name="gint8" c:type="gint8"/>
      </field>
      <field name="x" writable="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="y" writable="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="width" writable="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="height" writable="1">
        <type name="gint" c:type="gint"/>
      </field>
    </record>
    <record name="EventCrossing" c:type="GdkEventCrossing">
      <field name="type" writable="1">
        <type name="EventType" c:type="GdkEventType"/>
      </field>
      <field name="window" writable="1">
        <type name="Window" c:type="GdkWindow*"/>
      </field>
      <field name="send_event" writable="1">
        <type name="gint8" c:type="gint8"/>
      </field>
      <field name="subwindow" writable="1">
        <type name="Window" c:type="GdkWindow*"/>
      </field>
      <field name="time" writable="1">
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="x" writable="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="y" writable="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="x_root" writable="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="y_root" writable="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="mode" writable="1">
        <type name="CrossingMode" c:type="GdkCrossingMode"/>
      </field>
      <field name="detail" writable="1">
        <type name="NotifyType" c:type="GdkNotifyType"/>
      </field>
      <field name="focus" writable="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="state" writable="1">
        <type name="guint" c:type="guint"/>
      </field>
    </record>
    <record name="EventDND" c:type="GdkEventDND">
      <field name="type" writable="1">
        <type name="EventType" c:type="GdkEventType"/>
      </field>
      <field name="window" writable="1">
        <type name="Window" c:type="GdkWindow*"/>
      </field>
      <field name="send_event" writable="1">
        <type name="gint8" c:type="gint8"/>
      </field>
      <field name="context" writable="1">
        <type name="DragContext" c:type="GdkDragContext*"/>
      </field>
      <field name="time" writable="1">
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="x_root" writable="1">
        <type name="gshort" c:type="gshort"/>
      </field>
      <field name="y_root" writable="1">
        <type name="gshort" c:type="gshort"/>
      </field>
    </record>
    <record name="EventExpose" c:type="GdkEventExpose">
      <field name="type" writable="1">
        <type name="EventType" c:type="GdkEventType"/>
      </field>
      <field name="window" writable="1">
        <type name="Window" c:type="GdkWindow*"/>
      </field>
      <field name="send_event" writable="1">
        <type name="gint8" c:type="gint8"/>
      </field>
      <field name="area" writable="1">
        <type name="Rectangle" c:type="GdkRectangle"/>
      </field>
      <field name="region" writable="1">
        <type name="cairo.Region" c:type="cairo_region_t*"/>
      </field>
      <field name="count" writable="1">
        <type name="gint" c:type="gint"/>
      </field>
    </record>
    <record name="EventFocus" c:type="GdkEventFocus">
      <field name="type" writable="1">
        <type name="EventType" c:type="GdkEventType"/>
      </field>
      <field name="window" writable="1">
        <type name="Window" c:type="GdkWindow*"/>
      </field>
      <field name="send_event" writable="1">
        <type name="gint8" c:type="gint8"/>
      </field>
      <field name="in" writable="1">
        <type name="gint16" c:type="gint16"/>
      </field>
    </record>
    <callback name="EventFunc" c:type="GdkEventFunc">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="event" transfer-ownership="none">
          <type name="Event" c:type="GdkEvent*"/>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <record name="EventGrabBroken" c:type="GdkEventGrabBroken">
      <field name="type" writable="1">
        <type name="EventType" c:type="GdkEventType"/>
      </field>
      <field name="window" writable="1">
        <type name="Window" c:type="GdkWindow*"/>
      </field>
      <field name="send_event" writable="1">
        <type name="gint8" c:type="gint8"/>
      </field>
      <field name="keyboard" writable="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="implicit" writable="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="grab_window" writable="1">
        <type name="Window" c:type="GdkWindow*"/>
      </field>
    </record>
    <record name="EventKey" c:type="GdkEventKey">
      <field name="type" writable="1">
        <type name="EventType" c:type="GdkEventType"/>
      </field>
      <field name="window" writable="1">
        <type name="Window" c:type="GdkWindow*"/>
      </field>
      <field name="send_event" writable="1">
        <type name="gint8" c:type="gint8"/>
      </field>
      <field name="time" writable="1">
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="state" writable="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="keyval" writable="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="length" writable="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="string" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="hardware_keycode" writable="1">
        <type name="guint16" c:type="guint16"/>
      </field>
      <field name="group" writable="1">
        <type name="guint8" c:type="guint8"/>
      </field>
      <field name="is_modifier" writable="1" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
    </record>
    <bitfield name="EventMask"
              glib:type-name="GdkEventMask"
              glib:get-type="gdk_event_mask_get_type"
              c:type="GdkEventMask">
      <member name="exposure_mask"
              value="2"
              c:identifier="GDK_EXPOSURE_MASK"
              glib:nick="exposure-mask"/>
      <member name="pointer_motion_mask"
              value="4"
              c:identifier="GDK_POINTER_MOTION_MASK"
              glib:nick="pointer-motion-mask"/>
      <member name="pointer_motion_hint_mask"
              value="8"
              c:identifier="GDK_POINTER_MOTION_HINT_MASK"
              glib:nick="pointer-motion-hint-mask"/>
      <member name="button_motion_mask"
              value="16"
              c:identifier="GDK_BUTTON_MOTION_MASK"
              glib:nick="button-motion-mask"/>
      <member name="button1_motion_mask"
              value="32"
              c:identifier="GDK_BUTTON1_MOTION_MASK"
              glib:nick="button1-motion-mask"/>
      <member name="button2_motion_mask"
              value="64"
              c:identifier="GDK_BUTTON2_MOTION_MASK"
              glib:nick="button2-motion-mask"/>
      <member name="button3_motion_mask"
              value="128"
              c:identifier="GDK_BUTTON3_MOTION_MASK"
              glib:nick="button3-motion-mask"/>
      <member name="button_press_mask"
              value="256"
              c:identifier="GDK_BUTTON_PRESS_MASK"
              glib:nick="button-press-mask"/>
      <member name="button_release_mask"
              value="512"
              c:identifier="GDK_BUTTON_RELEASE_MASK"
              glib:nick="button-release-mask"/>
      <member name="key_press_mask"
              value="1024"
              c:identifier="GDK_KEY_PRESS_MASK"
              glib:nick="key-press-mask"/>
      <member name="key_release_mask"
              value="2048"
              c:identifier="GDK_KEY_RELEASE_MASK"
              glib:nick="key-release-mask"/>
      <member name="enter_notify_mask"
              value="4096"
              c:identifier="GDK_ENTER_NOTIFY_MASK"
              glib:nick="enter-notify-mask"/>
      <member name="leave_notify_mask"
              value="8192"
              c:identifier="GDK_LEAVE_NOTIFY_MASK"
              glib:nick="leave-notify-mask"/>
      <member name="focus_change_mask"
              value="16384"
              c:identifier="GDK_FOCUS_CHANGE_MASK"
              glib:nick="focus-change-mask"/>
      <member name="structure_mask"
              value="32768"
              c:identifier="GDK_STRUCTURE_MASK"
              glib:nick="structure-mask"/>
      <member name="property_change_mask"
              value="65536"
              c:identifier="GDK_PROPERTY_CHANGE_MASK"
              glib:nick="property-change-mask"/>
      <member name="visibility_notify_mask"
              value="131072"
              c:identifier="GDK_VISIBILITY_NOTIFY_MASK"
              glib:nick="visibility-notify-mask"/>
      <member name="proximity_in_mask"
              value="262144"
              c:identifier="GDK_PROXIMITY_IN_MASK"
              glib:nick="proximity-in-mask"/>
      <member name="proximity_out_mask"
              value="524288"
              c:identifier="GDK_PROXIMITY_OUT_MASK"
              glib:nick="proximity-out-mask"/>
      <member name="substructure_mask"
              value="1048576"
              c:identifier="GDK_SUBSTRUCTURE_MASK"
              glib:nick="substructure-mask"/>
      <member name="scroll_mask"
              value="2097152"
              c:identifier="GDK_SCROLL_MASK"
              glib:nick="scroll-mask"/>
      <member name="all_events_mask"
              value="4194302"
              c:identifier="GDK_ALL_EVENTS_MASK"
              glib:nick="all-events-mask"/>
    </bitfield>
    <record name="EventMotion" c:type="GdkEventMotion">
      <field name="type" writable="1">
        <type name="EventType" c:type="GdkEventType"/>
      </field>
      <field name="window" writable="1">
        <type name="Window" c:type="GdkWindow*"/>
      </field>
      <field name="send_event" writable="1">
        <type name="gint8" c:type="gint8"/>
      </field>
      <field name="time" writable="1">
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="x" writable="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="y" writable="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="axes" writable="1">
        <type name="gdouble" c:type="gdouble*"/>
      </field>
      <field name="state" writable="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="is_hint" writable="1">
        <type name="gint16" c:type="gint16"/>
      </field>
      <field name="device" writable="1">
        <type name="Device" c:type="GdkDevice*"/>
      </field>
      <field name="x_root" writable="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="y_root" writable="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
    </record>
    <record name="EventNoExpose" c:type="GdkEventNoExpose">
      <field name="type" writable="1">
        <type name="EventType" c:type="GdkEventType"/>
      </field>
      <field name="window" writable="1">
        <type name="Window" c:type="GdkWindow*"/>
      </field>
      <field name="send_event" writable="1">
        <type name="gint8" c:type="gint8"/>
      </field>
    </record>
    <record name="EventOwnerChange" c:type="GdkEventOwnerChange">
      <field name="type" writable="1">
        <type name="EventType" c:type="GdkEventType"/>
      </field>
      <field name="window" writable="1">
        <type name="Window" c:type="GdkWindow*"/>
      </field>
      <field name="send_event" writable="1">
        <type name="gint8" c:type="gint8"/>
      </field>
      <field name="owner" writable="1">
        <type name="NativeWindow" c:type="GdkNativeWindow"/>
      </field>
      <field name="reason" writable="1">
        <type name="OwnerChange" c:type="GdkOwnerChange"/>
      </field>
      <field name="selection" writable="1">
        <type name="Atom" c:type="GdkAtom"/>
      </field>
      <field name="time" writable="1">
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="selection_time" writable="1">
        <type name="guint32" c:type="guint32"/>
      </field>
    </record>
    <record name="EventProperty" c:type="GdkEventProperty">
      <field name="type" writable="1">
        <type name="EventType" c:type="GdkEventType"/>
      </field>
      <field name="window" writable="1">
        <type name="Window" c:type="GdkWindow*"/>
      </field>
      <field name="send_event" writable="1">
        <type name="gint8" c:type="gint8"/>
      </field>
      <field name="atom" writable="1">
        <type name="Atom" c:type="GdkAtom"/>
      </field>
      <field name="time" writable="1">
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="state" writable="1">
        <type name="guint" c:type="guint"/>
      </field>
    </record>
    <record name="EventProximity" c:type="GdkEventProximity">
      <field name="type" writable="1">
        <type name="EventType" c:type="GdkEventType"/>
      </field>
      <field name="window" writable="1">
        <type name="Window" c:type="GdkWindow*"/>
      </field>
      <field name="send_event" writable="1">
        <type name="gint8" c:type="gint8"/>
      </field>
      <field name="time" writable="1">
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="device" writable="1">
        <type name="Device" c:type="GdkDevice*"/>
      </field>
    </record>
    <record name="EventScroll" c:type="GdkEventScroll">
      <field name="type" writable="1">
        <type name="EventType" c:type="GdkEventType"/>
      </field>
      <field name="window" writable="1">
        <type name="Window" c:type="GdkWindow*"/>
      </field>
      <field name="send_event" writable="1">
        <type name="gint8" c:type="gint8"/>
      </field>
      <field name="time" writable="1">
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="x" writable="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="y" writable="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="state" writable="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="direction" writable="1">
        <type name="ScrollDirection" c:type="GdkScrollDirection"/>
      </field>
      <field name="device" writable="1">
        <type name="Device" c:type="GdkDevice*"/>
      </field>
      <field name="x_root" writable="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="y_root" writable="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
    </record>
    <record name="EventSelection" c:type="GdkEventSelection">
      <field name="type" writable="1">
        <type name="EventType" c:type="GdkEventType"/>
      </field>
      <field name="window" writable="1">
        <type name="Window" c:type="GdkWindow*"/>
      </field>
      <field name="send_event" writable="1">
        <type name="gint8" c:type="gint8"/>
      </field>
      <field name="selection" writable="1">
        <type name="Atom" c:type="GdkAtom"/>
      </field>
      <field name="target" writable="1">
        <type name="Atom" c:type="GdkAtom"/>
      </field>
      <field name="property" writable="1">
        <type name="Atom" c:type="GdkAtom"/>
      </field>
      <field name="time" writable="1">
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="requestor" writable="1">
        <type name="NativeWindow" c:type="GdkNativeWindow"/>
      </field>
    </record>
    <record name="EventSetting" c:type="GdkEventSetting">
      <field name="type" writable="1">
        <type name="EventType" c:type="GdkEventType"/>
      </field>
      <field name="window" writable="1">
        <type name="Window" c:type="GdkWindow*"/>
      </field>
      <field name="send_event" writable="1">
        <type name="gint8" c:type="gint8"/>
      </field>
      <field name="action" writable="1">
        <type name="SettingAction" c:type="GdkSettingAction"/>
      </field>
      <field name="name" writable="1">
        <type name="utf8" c:type="char*"/>
      </field>
    </record>
    <enumeration name="EventType"
                 glib:type-name="GdkEventType"
                 glib:get-type="gdk_event_type_get_type"
                 c:type="GdkEventType">
      <member name="nothing"
              value="-1"
              c:identifier="GDK_NOTHING"
              glib:nick="nothing"/>
      <member name="delete"
              value="0"
              c:identifier="GDK_DELETE"
              glib:nick="delete"/>
      <member name="destroy"
              value="1"
              c:identifier="GDK_DESTROY"
              glib:nick="destroy"/>
      <member name="expose"
              value="2"
              c:identifier="GDK_EXPOSE"
              glib:nick="expose"/>
      <member name="motion_notify"
              value="3"
              c:identifier="GDK_MOTION_NOTIFY"
              glib:nick="motion-notify"/>
      <member name="button_press"
              value="4"
              c:identifier="GDK_BUTTON_PRESS"
              glib:nick="button-press"/>
      <member name="2button_press"
              value="5"
              c:identifier="GDK_2BUTTON_PRESS"
              glib:nick="2button-press"/>
      <member name="3button_press"
              value="6"
              c:identifier="GDK_3BUTTON_PRESS"
              glib:nick="3button-press"/>
      <member name="button_release"
              value="7"
              c:identifier="GDK_BUTTON_RELEASE"
              glib:nick="button-release"/>
      <member name="key_press"
              value="8"
              c:identifier="GDK_KEY_PRESS"
              glib:nick="key-press"/>
      <member name="key_release"
              value="9"
              c:identifier="GDK_KEY_RELEASE"
              glib:nick="key-release"/>
      <member name="enter_notify"
              value="10"
              c:identifier="GDK_ENTER_NOTIFY"
              glib:nick="enter-notify"/>
      <member name="leave_notify"
              value="11"
              c:identifier="GDK_LEAVE_NOTIFY"
              glib:nick="leave-notify"/>
      <member name="focus_change"
              value="12"
              c:identifier="GDK_FOCUS_CHANGE"
              glib:nick="focus-change"/>
      <member name="configure"
              value="13"
              c:identifier="GDK_CONFIGURE"
              glib:nick="configure"/>
      <member name="map" value="14" c:identifier="GDK_MAP" glib:nick="map"/>
      <member name="unmap"
              value="15"
              c:identifier="GDK_UNMAP"
              glib:nick="unmap"/>
      <member name="property_notify"
              value="16"
              c:identifier="GDK_PROPERTY_NOTIFY"
              glib:nick="property-notify"/>
      <member name="selection_clear"
              value="17"
              c:identifier="GDK_SELECTION_CLEAR"
              glib:nick="selection-clear"/>
      <member name="selection_request"
              value="18"
              c:identifier="GDK_SELECTION_REQUEST"
              glib:nick="selection-request"/>
      <member name="selection_notify"
              value="19"
              c:identifier="GDK_SELECTION_NOTIFY"
              glib:nick="selection-notify"/>
      <member name="proximity_in"
              value="20"
              c:identifier="GDK_PROXIMITY_IN"
              glib:nick="proximity-in"/>
      <member name="proximity_out"
              value="21"
              c:identifier="GDK_PROXIMITY_OUT"
              glib:nick="proximity-out"/>
      <member name="drag_enter"
              value="22"
              c:identifier="GDK_DRAG_ENTER"
              glib:nick="drag-enter"/>
      <member name="drag_leave"
              value="23"
              c:identifier="GDK_DRAG_LEAVE"
              glib:nick="drag-leave"/>
      <member name="drag_motion"
              value="24"
              c:identifier="GDK_DRAG_MOTION"
              glib:nick="drag-motion"/>
      <member name="drag_status"
              value="25"
              c:identifier="GDK_DRAG_STATUS"
              glib:nick="drag-status"/>
      <member name="drop_start"
              value="26"
              c:identifier="GDK_DROP_START"
              glib:nick="drop-start"/>
      <member name="drop_finished"
              value="27"
              c:identifier="GDK_DROP_FINISHED"
              glib:nick="drop-finished"/>
      <member name="client_event"
              value="28"
              c:identifier="GDK_CLIENT_EVENT"
              glib:nick="client-event"/>
      <member name="visibility_notify"
              value="29"
              c:identifier="GDK_VISIBILITY_NOTIFY"
              glib:nick="visibility-notify"/>
      <member name="no_expose"
              value="30"
              c:identifier="GDK_NO_EXPOSE"
              glib:nick="no-expose"/>
      <member name="scroll"
              value="31"
              c:identifier="GDK_SCROLL"
              glib:nick="scroll"/>
      <member name="window_state"
              value="32"
              c:identifier="GDK_WINDOW_STATE"
              glib:nick="window-state"/>
      <member name="setting"
              value="33"
              c:identifier="GDK_SETTING"
              glib:nick="setting"/>
      <member name="owner_change"
              value="34"
              c:identifier="GDK_OWNER_CHANGE"
              glib:nick="owner-change"/>
      <member name="grab_broken"
              value="35"
              c:identifier="GDK_GRAB_BROKEN"
              glib:nick="grab-broken"/>
      <member name="damage"
              value="36"
              c:identifier="GDK_DAMAGE"
              glib:nick="damage"/>
      <member name="event_last"
              value="37"
              c:identifier="GDK_EVENT_LAST"
              glib:nick="event-last"/>
    </enumeration>
    <record name="EventVisibility" c:type="GdkEventVisibility">
      <field name="type" writable="1">
        <type name="EventType" c:type="GdkEventType"/>
      </field>
      <field name="window" writable="1">
        <type name="Window" c:type="GdkWindow*"/>
      </field>
      <field name="send_event" writable="1">
        <type name="gint8" c:type="gint8"/>
      </field>
      <field name="state" writable="1">
        <type name="VisibilityState" c:type="GdkVisibilityState"/>
      </field>
    </record>
    <record name="EventWindowState" c:type="GdkEventWindowState">
      <field name="type" writable="1">
        <type name="EventType" c:type="GdkEventType"/>
      </field>
      <field name="window" writable="1">
        <type name="Window" c:type="GdkWindow*"/>
      </field>
      <field name="send_event" writable="1">
        <type name="gint8" c:type="gint8"/>
      </field>
      <field name="changed_mask" writable="1">
        <type name="WindowState" c:type="GdkWindowState"/>
      </field>
      <field name="new_window_state" writable="1">
        <type name="WindowState" c:type="GdkWindowState"/>
      </field>
    </record>
    <enumeration name="ExtensionMode"
                 glib:type-name="GdkExtensionMode"
                 glib:get-type="gdk_extension_mode_get_type"
                 c:type="GdkExtensionMode">
      <doc xml:whitespace="preserve">An enumeration used to specify which extension events
are desired for a particular widget.</doc>
      <member name="none"
              value="0"
              c:identifier="GDK_EXTENSION_EVENTS_NONE"
              glib:nick="none"/>
      <member name="all"
              value="1"
              c:identifier="GDK_EXTENSION_EVENTS_ALL"
              glib:nick="all"/>
      <member name="cursor"
              value="2"
              c:identifier="GDK_EXTENSION_EVENTS_CURSOR"
              glib:nick="cursor"/>
    </enumeration>
    <callback name="FilterFunc" c:type="GdkFilterFunc">
      <doc xml:whitespace="preserve">Specifies the type of function used to filter native events before they are
converted to GDK events.
When a filter is called, @event is unpopulated, except for
&lt;literal&gt;event-&gt;window&lt;/literal&gt;. The filter may translate the native
event to a GDK event and store the result in @event, or handle it without
translation. If the filter translates the event and processing should
continue, it should return %GDK_FILTER_TRANSLATE.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">a #GdkFilterReturn value.</doc>
        <type name="FilterReturn" c:type="GdkFilterReturn"/>
      </return-value>
      <parameters>
        <parameter name="xevent" transfer-ownership="none">
          <doc xml:whitespace="preserve">the native event to filter.</doc>
          <type name="XEvent" c:type="GdkXEvent*"/>
        </parameter>
        <parameter name="event" transfer-ownership="none">
          <doc xml:whitespace="preserve">the GDK event to which the X event will be translated.</doc>
          <type name="Event" c:type="GdkEvent*"/>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <doc xml:whitespace="preserve">user data set when the filter was installed.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <enumeration name="FilterReturn"
                 glib:type-name="GdkFilterReturn"
                 glib:get-type="gdk_filter_return_get_type"
                 c:type="GdkFilterReturn">
      <doc xml:whitespace="preserve">Specifies the result of applying a #GdkFilterFunc to a native event.</doc>
      <member name="continue"
              value="0"
              c:identifier="GDK_FILTER_CONTINUE"
              glib:nick="continue"/>
      <member name="translate"
              value="1"
              c:identifier="GDK_FILTER_TRANSLATE"
              glib:nick="translate"/>
      <member name="remove"
              value="2"
              c:identifier="GDK_FILTER_REMOVE"
              glib:nick="remove"/>
    </enumeration>
    <record name="Geometry" c:type="GdkGeometry">
      <doc xml:whitespace="preserve">The #GdkGeometry struct gives the window manager information about
a window's geometry constraints. Normally you would set these on
the GTK+ level using gtk_window_set_geometry_hints(). #GtkWindow
then sets the hints on the #GdkWindow it creates.
gdk_window_set_geometry_hints() expects the hints to be fully valid already
and simply passes them to the window manager; in contrast,
gtk_window_set_geometry_hints() performs some interpretation. For example,
#GtkWindow will apply the hints to the geometry widget instead of the
toplevel window, if you set a geometry widget. Also, the
#GtkWindow will substitute the size request of the window or geometry widget.
If the minimum size hint is not provided, #GtkWindow will use its requisition
as the minimum size. If the minimum size is provided and a geometry widget is
set, #GtkWindow will take the minimum size as the minimum size of the
geometry widget rather than the entire window. The base size is treated
similarly.
The canonical use-case for gtk_window_set_geometry_hints() is to get a
terminal widget to resize properly. Here, the terminal text area should be
the geometry widget; #GtkWindow will then automatically set the base size to
the size of other widgets in the terminal window, such as the menubar and
scrollbar. Then, the @width_inc and @height_inc fields should be set to the
size of one character in the terminal. Finally, the base size should be set
to the size of one character. The net effect is that the minimum size of the
terminal will have a 1x1 character terminal area, and only terminal sizes on
the "character grid" will be allowed.
Here's an example of how the terminal example would be implemented, assuming
a terminal area widget called "terminal" and a toplevel window "toplevel":
&lt;informalexample&gt;&lt;programlisting&gt;&lt;![CDATA[
GdkGeometry hints;
hints.base_width = terminal-&gt;char_width;
hints.base_height = terminal-&gt;char_height;
hints.min_width = terminal-&gt;char_width;
hints.min_height = terminal-&gt;char_height;
hints.width_inc = terminal-&gt;char_width;
hints.height_inc = terminal-&gt;char_height;
gtk_window_set_geometry_hints (GTK_WINDOW (toplevel),
GTK_WIDGET (terminal),
&amp;hints,
GDK_HINT_RESIZE_INC |
GDK_HINT_MIN_SIZE |
GDK_HINT_BASE_SIZE);
]]&gt;&lt;/programlisting&gt;&lt;/informalexample&gt;
The other useful fields are the @min_aspect and @max_aspect fields; these
contain a width/height ratio as a floating point number. If a geometry widget
is set, the aspect applies to the geometry widget rather than the entire
window. The most common use of these hints is probably to set @min_aspect and
aspect ratio.</doc>
      <field name="min_width" writable="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="min_height" writable="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="max_width" writable="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="max_height" writable="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="base_width" writable="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="base_height" writable="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="width_inc" writable="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="height_inc" writable="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="min_aspect" writable="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="max_aspect" writable="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="win_gravity" writable="1">
        <type name="Gravity" c:type="GdkGravity"/>
      </field>
    </record>
    <enumeration name="GrabOwnership"
                 glib:type-name="GdkGrabOwnership"
                 glib:get-type="gdk_grab_ownership_get_type"
                 c:type="GdkGrabOwnership">
      <doc xml:whitespace="preserve">Defines how device grabs interact with other devices.</doc>
      <member name="none"
              value="0"
              c:identifier="GDK_OWNERSHIP_NONE"
              glib:nick="none"/>
      <member name="window"
              value="1"
              c:identifier="GDK_OWNERSHIP_WINDOW"
              glib:nick="window"/>
      <member name="application"
              value="2"
              c:identifier="GDK_OWNERSHIP_APPLICATION"
              glib:nick="application"/>
    </enumeration>
    <enumeration name="GrabStatus"
                 glib:type-name="GdkGrabStatus"
                 glib:get-type="gdk_grab_status_get_type"
                 c:type="GdkGrabStatus">
      <member name="success"
              value="0"
              c:identifier="GDK_GRAB_SUCCESS"
              glib:nick="success"/>
      <member name="already_grabbed"
              value="1"
              c:identifier="GDK_GRAB_ALREADY_GRABBED"
              glib:nick="already-grabbed"/>
      <member name="invalid_time"
              value="2"
              c:identifier="GDK_GRAB_INVALID_TIME"
              glib:nick="invalid-time"/>
      <member name="not_viewable"
              value="3"
              c:identifier="GDK_GRAB_NOT_VIEWABLE"
              glib:nick="not-viewable"/>
      <member name="frozen"
              value="4"
              c:identifier="GDK_GRAB_FROZEN"
              glib:nick="frozen"/>
    </enumeration>
    <enumeration name="Gravity"
                 glib:type-name="GdkGravity"
                 glib:get-type="gdk_gravity_get_type"
                 c:type="GdkGravity">
      <doc xml:whitespace="preserve">Defines the reference point of a window and the meaning of coordinates
passed to gtk_window_move(). See gtk_window_move() and the "implementation
notes" section of the
&lt;ulink url="http://www.freedesktop.org/Standards/wm-spec"&gt;Extended
Window Manager Hints&lt;/ulink&gt; specification for more details.</doc>
      <member name="north_west"
              value="1"
              c:identifier="GDK_GRAVITY_NORTH_WEST"
              glib:nick="north-west"/>
      <member name="north"
              value="2"
              c:identifier="GDK_GRAVITY_NORTH"
              glib:nick="north"/>
      <member name="north_east"
              value="3"
              c:identifier="GDK_GRAVITY_NORTH_EAST"
              glib:nick="north-east"/>
      <member name="west"
              value="4"
              c:identifier="GDK_GRAVITY_WEST"
              glib:nick="west"/>
      <member name="center"
              value="5"
              c:identifier="GDK_GRAVITY_CENTER"
              glib:nick="center"/>
      <member name="east"
              value="6"
              c:identifier="GDK_GRAVITY_EAST"
              glib:nick="east"/>
      <member name="south_west"
              value="7"
              c:identifier="GDK_GRAVITY_SOUTH_WEST"
              glib:nick="south-west"/>
      <member name="south"
              value="8"
              c:identifier="GDK_GRAVITY_SOUTH"
              glib:nick="south"/>
      <member name="south_east"
              value="9"
              c:identifier="GDK_GRAVITY_SOUTH_EAST"
              glib:nick="south-east"/>
      <member name="static"
              value="10"
              c:identifier="GDK_GRAVITY_STATIC"
              glib:nick="static"/>
    </enumeration>
    <enumeration name="InputMode"
                 glib:type-name="GdkInputMode"
                 glib:get-type="gdk_input_mode_get_type"
                 c:type="GdkInputMode">
      <doc xml:whitespace="preserve">An enumeration that describes the mode of an input device.</doc>
      <member name="disabled"
              value="0"
              c:identifier="GDK_MODE_DISABLED"
              glib:nick="disabled"/>
      <member name="screen"
              value="1"
              c:identifier="GDK_MODE_SCREEN"
              glib:nick="screen"/>
      <member name="window"
              value="2"
              c:identifier="GDK_MODE_WINDOW"
              glib:nick="window"/>
    </enumeration>
    <enumeration name="InputSource"
                 glib:type-name="GdkInputSource"
                 glib:get-type="gdk_input_source_get_type"
                 c:type="GdkInputSource">
      <doc xml:whitespace="preserve">An enumeration describing the type of an input device in general terms.</doc>
      <member name="mouse"
              value="0"
              c:identifier="GDK_SOURCE_MOUSE"
              glib:nick="mouse"/>
      <member name="pen"
              value="1"
              c:identifier="GDK_SOURCE_PEN"
              glib:nick="pen"/>
      <member name="eraser"
              value="2"
              c:identifier="GDK_SOURCE_ERASER"
              glib:nick="eraser"/>
      <member name="cursor"
              value="3"
              c:identifier="GDK_SOURCE_CURSOR"
              glib:nick="cursor"/>
      <member name="keyboard"
              value="4"
              c:identifier="GDK_SOURCE_KEYBOARD"
              glib:nick="keyboard"/>
    </enumeration>
    <constant name="KEY_0" value="48">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_1" value="49">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_2" value="50">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_3" value="51">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_3270_AltCursor" value="64784">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_3270_Attn" value="64782">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_3270_BackTab" value="64773">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_3270_ChangeScreen" value="64793">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_3270_Copy" value="64789">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_3270_CursorBlink" value="64783">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_3270_CursorSelect" value="64796">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_3270_DeleteWord" value="64794">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_3270_Duplicate" value="64769">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_3270_Enter" value="64798">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_3270_EraseEOF" value="64774">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_3270_EraseInput" value="64775">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_3270_ExSelect" value="64795">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_3270_FieldMark" value="64770">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_3270_Ident" value="64787">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_3270_Jump" value="64786">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_3270_KeyClick" value="64785">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_3270_Left2" value="64772">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_3270_PA1" value="64778">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_3270_PA2" value="64779">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_3270_PA3" value="64780">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_3270_Play" value="64790">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_3270_PrintScreen" value="64797">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_3270_Quit" value="64777">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_3270_Record" value="64792">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_3270_Reset" value="64776">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_3270_Right2" value="64771">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_3270_Rule" value="64788">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_3270_Setup" value="64791">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_3270_Test" value="64781">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_4" value="52">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_5" value="53">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_6" value="54">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_7" value="55">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_8" value="56">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_9" value="57">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_A" value="65">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_AE" value="198">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Aacute" value="193">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Abelowdot" value="16785056">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Abreve" value="451">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Abreveacute" value="16785070">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Abrevebelowdot" value="16785078">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Abrevegrave" value="16785072">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Abrevehook" value="16785074">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Abrevetilde" value="16785076">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_AccessX_Enable" value="65136">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_AccessX_Feedback_Enable" value="65137">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Acircumflex" value="194">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Acircumflexacute" value="16785060">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Acircumflexbelowdot" value="16785068">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Acircumflexgrave" value="16785062">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Acircumflexhook" value="16785064">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Acircumflextilde" value="16785066">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_AddFavorite" value="269025081">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Adiaeresis" value="196">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Agrave" value="192">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ahook" value="16785058">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Alt_L" value="65513">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Alt_R" value="65514">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Amacron" value="960">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Aogonek" value="417">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ApplicationLeft" value="269025104">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ApplicationRight" value="269025105">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_0" value="16778848">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_1" value="16778849">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_2" value="16778850">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_3" value="16778851">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_4" value="16778852">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_5" value="16778853">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_6" value="16778854">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_7" value="16778855">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_8" value="16778856">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_9" value="16778857">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_ain" value="1497">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_alef" value="1479">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_alefmaksura" value="1513">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_beh" value="1480">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_comma" value="1452">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_dad" value="1494">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_dal" value="1487">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_damma" value="1519">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_dammatan" value="1516">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_ddal" value="16778888">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_farsi_yeh" value="16778956">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_fatha" value="1518">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_fathatan" value="1515">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_feh" value="1505">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_fullstop" value="16778964">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_gaf" value="16778927">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_ghain" value="1498">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_ha" value="1511">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_hah" value="1485">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_hamza" value="1473">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_hamza_above" value="16778836">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_hamza_below" value="16778837">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_hamzaonalef" value="1475">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_hamzaonwaw" value="1476">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_hamzaonyeh" value="1478">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_hamzaunderalef" value="1477">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_heh" value="1511">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_heh_doachashmee" value="16778942">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_heh_goal" value="16778945">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_jeem" value="1484">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_jeh" value="16778904">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_kaf" value="1507">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_kasra" value="1520">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_kasratan" value="1517">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_keheh" value="16778921">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_khah" value="1486">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_lam" value="1508">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_madda_above" value="16778835">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_maddaonalef" value="1474">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_meem" value="1509">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_noon" value="1510">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_noon_ghunna" value="16778938">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_peh" value="16778878">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_percent" value="16778858">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_qaf" value="1506">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_question_mark" value="1471">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_ra" value="1489">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_rreh" value="16778897">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_sad" value="1493">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_seen" value="1491">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_semicolon" value="1467">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_shadda" value="1521">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_sheen" value="1492">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_sukun" value="1522">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_superscript_alef" value="16778864">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_switch" value="65406">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_tah" value="1495">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_tatweel" value="1504">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_tcheh" value="16778886">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_teh" value="1482">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_tehmarbuta" value="1481">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_thal" value="1488">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_theh" value="1483">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_tteh" value="16778873">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_veh" value="16778916">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_waw" value="1512">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_yeh" value="1514">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_yeh_baree" value="16778962">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_zah" value="1496">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Arabic_zain" value="1490">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Aring" value="197">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_AT" value="16778552">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_AYB" value="16778545">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_BEN" value="16778546">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_CHA" value="16778569">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_DA" value="16778548">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_DZA" value="16778561">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_E" value="16778551">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_FE" value="16778582">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_GHAT" value="16778562">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_GIM" value="16778547">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_HI" value="16778565">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_HO" value="16778560">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_INI" value="16778555">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_JE" value="16778571">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_KE" value="16778580">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_KEN" value="16778559">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_KHE" value="16778557">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_LYUN" value="16778556">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_MEN" value="16778564">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_NU" value="16778566">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_O" value="16778581">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_PE" value="16778570">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_PYUR" value="16778579">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_RA" value="16778572">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_RE" value="16778576">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_SE" value="16778573">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_SHA" value="16778567">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_TCHE" value="16778563">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_TO" value="16778553">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_TSA" value="16778558">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_TSO" value="16778577">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_TYUN" value="16778575">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_VEV" value="16778574">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_VO" value="16778568">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_VYUN" value="16778578">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_YECH" value="16778549">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_ZA" value="16778550">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_ZHE" value="16778554">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_accent" value="16778587">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_amanak" value="16778588">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_apostrophe" value="16778586">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_at" value="16778600">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_ayb" value="16778593">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_ben" value="16778594">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_but" value="16778589">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_cha" value="16778617">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_da" value="16778596">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_dza" value="16778609">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_e" value="16778599">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_exclam" value="16778588">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_fe" value="16778630">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_full_stop" value="16778633">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_ghat" value="16778610">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_gim" value="16778595">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_hi" value="16778613">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_ho" value="16778608">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_hyphen" value="16778634">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_ini" value="16778603">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_je" value="16778619">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_ke" value="16778628">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_ken" value="16778607">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_khe" value="16778605">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_ligature_ew" value="16778631">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_lyun" value="16778604">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_men" value="16778612">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_nu" value="16778614">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_o" value="16778629">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_paruyk" value="16778590">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_pe" value="16778618">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_pyur" value="16778627">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_question" value="16778590">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_ra" value="16778620">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_re" value="16778624">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_se" value="16778621">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_separation_mark" value="16778589">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_sha" value="16778615">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_shesht" value="16778587">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_tche" value="16778611">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_to" value="16778601">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_tsa" value="16778606">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_tso" value="16778625">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_tyun" value="16778623">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_verjaket" value="16778633">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_vev" value="16778622">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_vo" value="16778616">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_vyun" value="16778626">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_yech" value="16778597">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_yentamna" value="16778634">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_za" value="16778598">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Armenian_zhe" value="16778602">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Atilde" value="195">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_AudibleBell_Enable" value="65146">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_AudioCycleTrack" value="269025179">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_AudioForward" value="269025175">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_AudioLowerVolume" value="269025041">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_AudioMedia" value="269025074">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_AudioMute" value="269025042">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_AudioNext" value="269025047">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_AudioPause" value="269025073">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_AudioPlay" value="269025044">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_AudioPrev" value="269025046">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_AudioRaiseVolume" value="269025043">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_AudioRandomPlay" value="269025177">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_AudioRecord" value="269025052">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_AudioRepeat" value="269025176">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_AudioRewind" value="269025086">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_AudioStop" value="269025045">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Away" value="269025165">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_B" value="66">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Babovedot" value="16784898">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Back" value="269025062">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_BackForward" value="269025087">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_BackSpace" value="65288">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Battery" value="269025171">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Begin" value="65368">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Blue" value="269025190">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Bluetooth" value="269025172">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Book" value="269025106">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_BounceKeys_Enable" value="65140">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Break" value="65387">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_BrightnessAdjust" value="269025083">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Byelorussian_SHORTU" value="1726">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Byelorussian_shortu" value="1710">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_C" value="67">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_CD" value="269025107">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cabovedot" value="709">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cacute" value="454">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Calculator" value="269025053">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Calendar" value="269025056">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cancel" value="65385">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Caps_Lock" value="65509">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ccaron" value="456">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ccedilla" value="199">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ccircumflex" value="710">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Clear" value="65291">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ClearGrab" value="269024801">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Close" value="269025110">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Codeinput" value="65335">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ColonSign" value="16785569">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Community" value="269025085">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ContrastAdjust" value="269025058">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Control_L" value="65507">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Control_R" value="65508">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Copy" value="269025111">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_CruzeiroSign" value="16785570">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cut" value="269025112">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_CycleAngle" value="269025180">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_A" value="1761">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_BE" value="1762">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_CHE" value="1790">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_CHE_descender" value="16778422">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_CHE_vertstroke" value="16778424">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_DE" value="1764">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_DZHE" value="1727">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_E" value="1788">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_EF" value="1766">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_EL" value="1772">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_EM" value="1773">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_EN" value="1774">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_EN_descender" value="16778402">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_ER" value="1778">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_ES" value="1779">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_GHE" value="1767">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_GHE_bar" value="16778386">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_HA" value="1768">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_HARDSIGN" value="1791">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_HA_descender" value="16778418">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_I" value="1769">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_IE" value="1765">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_IO" value="1715">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_I_macron" value="16778466">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_JE" value="1720">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_KA" value="1771">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_KA_descender" value="16778394">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_KA_vertstroke" value="16778396">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_LJE" value="1721">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_NJE" value="1722">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_O" value="1775">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_O_bar" value="16778472">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_PE" value="1776">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_SCHWA" value="16778456">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_SHA" value="1787">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_SHCHA" value="1789">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_SHHA" value="16778426">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_SHORTI" value="1770">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_SOFTSIGN" value="1784">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_TE" value="1780">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_TSE" value="1763">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_U" value="1781">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_U_macron" value="16778478">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_U_straight" value="16778414">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_U_straight_bar" value="16778416">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_VE" value="1783">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_YA" value="1777">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_YERU" value="1785">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_YU" value="1760">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_ZE" value="1786">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_ZHE" value="1782">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_ZHE_descender" value="16778390">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_a" value="1729">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_be" value="1730">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_che" value="1758">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_che_descender" value="16778423">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_che_vertstroke" value="16778425">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_de" value="1732">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_dzhe" value="1711">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_e" value="1756">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_ef" value="1734">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_el" value="1740">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_em" value="1741">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_en" value="1742">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_en_descender" value="16778403">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_er" value="1746">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_es" value="1747">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_ghe" value="1735">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_ghe_bar" value="16778387">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_ha" value="1736">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_ha_descender" value="16778419">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_hardsign" value="1759">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_i" value="1737">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_i_macron" value="16778467">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_ie" value="1733">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_io" value="1699">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_je" value="1704">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_ka" value="1739">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_ka_descender" value="16778395">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_ka_vertstroke" value="16778397">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_lje" value="1705">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_nje" value="1706">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_o" value="1743">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_o_bar" value="16778473">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_pe" value="1744">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_schwa" value="16778457">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_sha" value="1755">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_shcha" value="1757">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_shha" value="16778427">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_shorti" value="1738">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_softsign" value="1752">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_te" value="1748">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_tse" value="1731">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_u" value="1749">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_u_macron" value="16778479">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_u_straight" value="16778415">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_u_straight_bar" value="16778417">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_ve" value="1751">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_ya" value="1745">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_yeru" value="1753">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_yu" value="1728">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_ze" value="1754">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_zhe" value="1750">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Cyrillic_zhe_descender" value="16778391">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_D" value="68">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_DOS" value="269025114">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Dabovedot" value="16784906">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Dcaron" value="463">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Delete" value="65535">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Display" value="269025113">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Documents" value="269025115">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_DongSign" value="16785579">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Down" value="65364">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Dstroke" value="464">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_E" value="69">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ENG" value="957">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ETH" value="208">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Eabovedot" value="972">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Eacute" value="201">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ebelowdot" value="16785080">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ecaron" value="460">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ecircumflex" value="202">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ecircumflexacute" value="16785086">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ecircumflexbelowdot" value="16785094">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ecircumflexgrave" value="16785088">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ecircumflexhook" value="16785090">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ecircumflextilde" value="16785092">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_EcuSign" value="16785568">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ediaeresis" value="203">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Egrave" value="200">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ehook" value="16785082">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Eisu_Shift" value="65327">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Eisu_toggle" value="65328">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Eject" value="269025068">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Emacron" value="938">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_End" value="65367">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Eogonek" value="458">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Escape" value="65307">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Eth" value="208">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Etilde" value="16785084">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_EuroSign" value="8364">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Excel" value="269025116">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Execute" value="65378">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Explorer" value="269025117">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_F" value="70">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_F1" value="65470">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_F10" value="65479">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_F11" value="65480">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_F12" value="65481">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_F13" value="65482">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_F14" value="65483">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_F15" value="65484">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_F16" value="65485">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_F17" value="65486">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_F18" value="65487">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_F19" value="65488">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_F2" value="65471">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_F20" value="65489">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_F21" value="65490">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_F22" value="65491">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_F23" value="65492">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_F24" value="65493">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_F25" value="65494">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_F26" value="65495">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_F27" value="65496">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_F28" value="65497">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_F29" value="65498">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_F3" value="65472">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_F30" value="65499">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_F31" value="65500">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_F32" value="65501">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_F33" value="65502">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_F34" value="65503">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_F35" value="65504">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_F4" value="65473">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_F5" value="65474">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_F6" value="65475">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_F7" value="65476">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_F8" value="65477">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_F9" value="65478">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_FFrancSign" value="16785571">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Fabovedot" value="16784926">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Farsi_0" value="16778992">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Farsi_1" value="16778993">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Farsi_2" value="16778994">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Farsi_3" value="16778995">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Farsi_4" value="16778996">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Farsi_5" value="16778997">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Farsi_6" value="16778998">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Farsi_7" value="16778999">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Farsi_8" value="16779000">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Farsi_9" value="16779001">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Farsi_yeh" value="16778956">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Favorites" value="269025072">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Finance" value="269025084">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Find" value="65384">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_First_Virtual_Screen" value="65232">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Forward" value="269025063">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_FrameBack" value="269025181">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_FrameForward" value="269025182">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_G" value="71">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Gabovedot" value="725">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Game" value="269025118">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Gbreve" value="683">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Gcaron" value="16777702">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Gcedilla" value="939">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Gcircumflex" value="728">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Georgian_an" value="16781520">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Georgian_ban" value="16781521">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Georgian_can" value="16781546">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Georgian_char" value="16781549">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Georgian_chin" value="16781545">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Georgian_cil" value="16781548">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Georgian_don" value="16781523">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Georgian_en" value="16781524">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Georgian_fi" value="16781558">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Georgian_gan" value="16781522">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Georgian_ghan" value="16781542">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Georgian_hae" value="16781552">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Georgian_har" value="16781556">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Georgian_he" value="16781553">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Georgian_hie" value="16781554">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Georgian_hoe" value="16781557">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Georgian_in" value="16781528">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Georgian_jhan" value="16781551">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Georgian_jil" value="16781547">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Georgian_kan" value="16781529">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Georgian_khar" value="16781541">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Georgian_las" value="16781530">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Georgian_man" value="16781531">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Georgian_nar" value="16781532">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Georgian_on" value="16781533">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Georgian_par" value="16781534">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Georgian_phar" value="16781540">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Georgian_qar" value="16781543">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Georgian_rae" value="16781536">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Georgian_san" value="16781537">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Georgian_shin" value="16781544">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Georgian_tan" value="16781527">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Georgian_tar" value="16781538">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Georgian_un" value="16781539">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Georgian_vin" value="16781525">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Georgian_we" value="16781555">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Georgian_xan" value="16781550">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Georgian_zen" value="16781526">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Georgian_zhar" value="16781535">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Go" value="269025119">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_ALPHA" value="1985">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_ALPHAaccent" value="1953">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_BETA" value="1986">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_CHI" value="2007">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_DELTA" value="1988">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_EPSILON" value="1989">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_EPSILONaccent" value="1954">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_ETA" value="1991">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_ETAaccent" value="1955">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_GAMMA" value="1987">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_IOTA" value="1993">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_IOTAaccent" value="1956">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_IOTAdiaeresis" value="1957">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_IOTAdieresis" value="1957">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_KAPPA" value="1994">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_LAMBDA" value="1995">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_LAMDA" value="1995">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_MU" value="1996">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_NU" value="1997">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_OMEGA" value="2009">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_OMEGAaccent" value="1963">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_OMICRON" value="1999">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_OMICRONaccent" value="1959">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_PHI" value="2006">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_PI" value="2000">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_PSI" value="2008">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_RHO" value="2001">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_SIGMA" value="2002">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_TAU" value="2004">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_THETA" value="1992">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_UPSILON" value="2005">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_UPSILONaccent" value="1960">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_UPSILONdieresis" value="1961">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_XI" value="1998">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_ZETA" value="1990">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_accentdieresis" value="1966">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_alpha" value="2017">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_alphaaccent" value="1969">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_beta" value="2018">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_chi" value="2039">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_delta" value="2020">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_epsilon" value="2021">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_epsilonaccent" value="1970">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_eta" value="2023">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_etaaccent" value="1971">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_finalsmallsigma" value="2035">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_gamma" value="2019">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_horizbar" value="1967">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_iota" value="2025">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_iotaaccent" value="1972">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_iotaaccentdieresis" value="1974">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_iotadieresis" value="1973">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_kappa" value="2026">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_lambda" value="2027">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_lamda" value="2027">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_mu" value="2028">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_nu" value="2029">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_omega" value="2041">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_omegaaccent" value="1979">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_omicron" value="2031">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_omicronaccent" value="1975">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_phi" value="2038">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_pi" value="2032">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_psi" value="2040">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_rho" value="2033">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_sigma" value="2034">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_switch" value="65406">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_tau" value="2036">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_theta" value="2024">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_upsilon" value="2037">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_upsilonaccent" value="1976">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_upsilonaccentdieresis" value="1978">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_upsilondieresis" value="1977">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_xi" value="2030">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Greek_zeta" value="2022">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Green" value="269025188">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_H" value="72">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul" value="65329">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_A" value="3775">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_AE" value="3776">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_AraeA" value="3830">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_AraeAE" value="3831">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_Banja" value="65337">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_Cieuc" value="3770">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_Codeinput" value="65335">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_Dikeud" value="3751">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_E" value="3780">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_EO" value="3779">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_EU" value="3793">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_End" value="65331">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_Hanja" value="65332">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_Hieuh" value="3774">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_I" value="3795">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_Ieung" value="3767">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_J_Cieuc" value="3818">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_J_Dikeud" value="3802">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_J_Hieuh" value="3822">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_J_Ieung" value="3816">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_J_Jieuj" value="3817">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_J_Khieuq" value="3819">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_J_Kiyeog" value="3796">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_J_KiyeogSios" value="3798">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_J_KkogjiDalrinIeung" value="3833">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_J_Mieum" value="3811">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_J_Nieun" value="3799">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_J_NieunHieuh" value="3801">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_J_NieunJieuj" value="3800">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_J_PanSios" value="3832">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_J_Phieuf" value="3821">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_J_Pieub" value="3812">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_J_PieubSios" value="3813">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_J_Rieul" value="3803">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_J_RieulHieuh" value="3810">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_J_RieulKiyeog" value="3804">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_J_RieulMieum" value="3805">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_J_RieulPhieuf" value="3809">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_J_RieulPieub" value="3806">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_J_RieulSios" value="3807">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_J_RieulTieut" value="3808">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_J_Sios" value="3814">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_J_SsangKiyeog" value="3797">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_J_SsangSios" value="3815">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_J_Tieut" value="3820">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_J_YeorinHieuh" value="3834">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_Jamo" value="65333">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_Jeonja" value="65336">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_Jieuj" value="3768">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_Khieuq" value="3771">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_Kiyeog" value="3745">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_KiyeogSios" value="3747">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_KkogjiDalrinIeung" value="3827">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_Mieum" value="3761">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_MultipleCandidate" value="65341">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_Nieun" value="3748">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_NieunHieuh" value="3750">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_NieunJieuj" value="3749">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_O" value="3783">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_OE" value="3786">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_PanSios" value="3826">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_Phieuf" value="3773">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_Pieub" value="3762">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_PieubSios" value="3764">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_PostHanja" value="65339">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_PreHanja" value="65338">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_PreviousCandidate" value="65342">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_Rieul" value="3753">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_RieulHieuh" value="3760">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_RieulKiyeog" value="3754">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_RieulMieum" value="3755">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_RieulPhieuf" value="3759">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_RieulPieub" value="3756">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_RieulSios" value="3757">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_RieulTieut" value="3758">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_RieulYeorinHieuh" value="3823">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_Romaja" value="65334">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_SingleCandidate" value="65340">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_Sios" value="3765">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_Special" value="65343">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_SsangDikeud" value="3752">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_SsangJieuj" value="3769">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_SsangKiyeog" value="3746">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_SsangPieub" value="3763">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_SsangSios" value="3766">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_Start" value="65330">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_SunkyeongeumMieum" value="3824">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_SunkyeongeumPhieuf" value="3828">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_SunkyeongeumPieub" value="3825">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_Tieut" value="3772">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_U" value="3788">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_WA" value="3784">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_WAE" value="3785">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_WE" value="3790">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_WEO" value="3789">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_WI" value="3791">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_YA" value="3777">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_YAE" value="3778">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_YE" value="3782">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_YEO" value="3781">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_YI" value="3794">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_YO" value="3787">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_YU" value="3792">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_YeorinHieuh" value="3829">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hangul_switch" value="65406">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hankaku" value="65321">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hcircumflex" value="678">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hebrew_switch" value="65406">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Help" value="65386">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Henkan" value="65315">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Henkan_Mode" value="65315">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hibernate" value="269025192">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hiragana" value="65317">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hiragana_Katakana" value="65319">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_History" value="269025079">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Home" value="65360">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_HomePage" value="269025048">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_HotLinks" value="269025082">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hstroke" value="673">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hyper_L" value="65517">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Hyper_R" value="65518">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_I" value="73">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ISO_Center_Object" value="65075">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ISO_Continuous_Underline" value="65072">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ISO_Discontinuous_Underline" value="65073">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ISO_Emphasize" value="65074">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ISO_Enter" value="65076">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ISO_Fast_Cursor_Down" value="65071">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ISO_Fast_Cursor_Left" value="65068">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ISO_Fast_Cursor_Right" value="65069">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ISO_Fast_Cursor_Up" value="65070">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ISO_First_Group" value="65036">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ISO_First_Group_Lock" value="65037">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ISO_Group_Latch" value="65030">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ISO_Group_Lock" value="65031">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ISO_Group_Shift" value="65406">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ISO_Last_Group" value="65038">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ISO_Last_Group_Lock" value="65039">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ISO_Left_Tab" value="65056">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ISO_Level2_Latch" value="65026">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ISO_Level3_Latch" value="65028">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ISO_Level3_Lock" value="65029">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ISO_Level3_Shift" value="65027">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ISO_Level5_Latch" value="65042">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ISO_Level5_Lock" value="65043">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ISO_Level5_Shift" value="65041">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ISO_Lock" value="65025">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ISO_Move_Line_Down" value="65058">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ISO_Move_Line_Up" value="65057">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ISO_Next_Group" value="65032">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ISO_Next_Group_Lock" value="65033">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ISO_Partial_Line_Down" value="65060">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ISO_Partial_Line_Up" value="65059">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ISO_Partial_Space_Left" value="65061">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ISO_Partial_Space_Right" value="65062">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ISO_Prev_Group" value="65034">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ISO_Prev_Group_Lock" value="65035">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ISO_Release_Both_Margins" value="65067">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ISO_Release_Margin_Left" value="65065">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ISO_Release_Margin_Right" value="65066">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ISO_Set_Margin_Left" value="65063">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ISO_Set_Margin_Right" value="65064">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Iabovedot" value="681">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Iacute" value="205">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ibelowdot" value="16785098">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ibreve" value="16777516">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Icircumflex" value="206">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Idiaeresis" value="207">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Igrave" value="204">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ihook" value="16785096">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Imacron" value="975">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Insert" value="65379">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Iogonek" value="967">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Itilde" value="933">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_J" value="74">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Jcircumflex" value="684">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_K" value="75">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_KP_0" value="65456">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_KP_1" value="65457">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_KP_2" value="65458">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_KP_3" value="65459">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_KP_4" value="65460">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_KP_5" value="65461">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_KP_6" value="65462">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_KP_7" value="65463">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_KP_8" value="65464">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_KP_9" value="65465">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_KP_Add" value="65451">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_KP_Begin" value="65437">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_KP_Decimal" value="65454">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_KP_Delete" value="65439">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_KP_Divide" value="65455">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_KP_Down" value="65433">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_KP_End" value="65436">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_KP_Enter" value="65421">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_KP_Equal" value="65469">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_KP_F1" value="65425">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_KP_F2" value="65426">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_KP_F3" value="65427">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_KP_F4" value="65428">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_KP_Home" value="65429">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_KP_Insert" value="65438">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_KP_Left" value="65430">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_KP_Multiply" value="65450">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_KP_Next" value="65435">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_KP_Page_Down" value="65435">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_KP_Page_Up" value="65434">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_KP_Prior" value="65434">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_KP_Right" value="65432">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_KP_Separator" value="65452">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_KP_Space" value="65408">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_KP_Subtract" value="65453">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_KP_Tab" value="65417">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_KP_Up" value="65431">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Kana_Lock" value="65325">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Kana_Shift" value="65326">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Kanji" value="65313">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Kanji_Bangou" value="65335">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Katakana" value="65318">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_KbdBrightnessDown" value="269025030">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_KbdBrightnessUp" value="269025029">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_KbdLightOnOff" value="269025028">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Kcedilla" value="979">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Korean_Won" value="3839">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_L" value="76">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_L1" value="65480">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_L10" value="65489">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_L2" value="65481">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_L3" value="65482">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_L4" value="65483">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_L5" value="65484">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_L6" value="65485">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_L7" value="65486">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_L8" value="65487">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_L9" value="65488">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Lacute" value="453">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Last_Virtual_Screen" value="65236">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Launch0" value="269025088">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Launch1" value="269025089">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Launch2" value="269025090">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Launch3" value="269025091">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Launch4" value="269025092">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Launch5" value="269025093">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Launch6" value="269025094">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Launch7" value="269025095">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Launch8" value="269025096">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Launch9" value="269025097">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_LaunchA" value="269025098">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_LaunchB" value="269025099">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_LaunchC" value="269025100">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_LaunchD" value="269025101">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_LaunchE" value="269025102">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_LaunchF" value="269025103">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Lbelowdot" value="16784950">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Lcaron" value="421">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Lcedilla" value="934">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Left" value="65361">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_LightBulb" value="269025077">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Linefeed" value="65290">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_LiraSign" value="16785572">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_LogOff" value="269025121">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Lstroke" value="419">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_M" value="77">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Mabovedot" value="16784960">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Macedonia_DSE" value="1717">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Macedonia_GJE" value="1714">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Macedonia_KJE" value="1724">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Macedonia_dse" value="1701">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Macedonia_gje" value="1698">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Macedonia_kje" value="1708">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Mae_Koho" value="65342">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Mail" value="269025049">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_MailForward" value="269025168">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Market" value="269025122">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Massyo" value="65324">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Meeting" value="269025123">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Memo" value="269025054">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Menu" value="65383">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_MenuKB" value="269025125">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_MenuPB" value="269025126">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Messenger" value="269025166">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Meta_L" value="65511">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Meta_R" value="65512">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_MillSign" value="16785573">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ModeLock" value="269025025">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Mode_switch" value="65406">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_MonBrightnessDown" value="269025027">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_MonBrightnessUp" value="269025026">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_MouseKeys_Accel_Enable" value="65143">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_MouseKeys_Enable" value="65142">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Muhenkan" value="65314">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Multi_key" value="65312">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_MultipleCandidate" value="65341">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Music" value="269025170">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_MyComputer" value="269025075">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_MySites" value="269025127">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_N" value="78">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Nacute" value="465">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_NairaSign" value="16785574">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ncaron" value="466">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ncedilla" value="977">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_New" value="269025128">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_NewSheqelSign" value="16785578">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_News" value="269025129">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Next" value="65366">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Next_VMode" value="269024802">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Next_Virtual_Screen" value="65234">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ntilde" value="209">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Num_Lock" value="65407">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_O" value="79">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_OE" value="5052">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Oacute" value="211">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Obarred" value="16777631">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Obelowdot" value="16785100">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ocaron" value="16777681">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ocircumflex" value="212">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ocircumflexacute" value="16785104">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ocircumflexbelowdot" value="16785112">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ocircumflexgrave" value="16785106">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ocircumflexhook" value="16785108">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ocircumflextilde" value="16785110">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Odiaeresis" value="214">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Odoubleacute" value="469">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_OfficeHome" value="269025130">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ograve" value="210">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ohook" value="16785102">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ohorn" value="16777632">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ohornacute" value="16785114">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ohornbelowdot" value="16785122">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ohorngrave" value="16785116">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ohornhook" value="16785118">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ohorntilde" value="16785120">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Omacron" value="978">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ooblique" value="216">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Open" value="269025131">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_OpenURL" value="269025080">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Option" value="269025132">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Oslash" value="216">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Otilde" value="213">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Overlay1_Enable" value="65144">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Overlay2_Enable" value="65145">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_P" value="80">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Pabovedot" value="16784982">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Page_Down" value="65366">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Page_Up" value="65365">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Paste" value="269025133">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Pause" value="65299">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_PesetaSign" value="16785575">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Phone" value="269025134">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Pictures" value="269025169">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Pointer_Accelerate" value="65274">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Pointer_Button1" value="65257">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Pointer_Button2" value="65258">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Pointer_Button3" value="65259">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Pointer_Button4" value="65260">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Pointer_Button5" value="65261">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Pointer_Button_Dflt" value="65256">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Pointer_DblClick1" value="65263">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Pointer_DblClick2" value="65264">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Pointer_DblClick3" value="65265">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Pointer_DblClick4" value="65266">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Pointer_DblClick5" value="65267">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Pointer_DblClick_Dflt" value="65262">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Pointer_DfltBtnNext" value="65275">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Pointer_DfltBtnPrev" value="65276">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Pointer_Down" value="65251">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Pointer_DownLeft" value="65254">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Pointer_DownRight" value="65255">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Pointer_Drag1" value="65269">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Pointer_Drag2" value="65270">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Pointer_Drag3" value="65271">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Pointer_Drag4" value="65272">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Pointer_Drag5" value="65277">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Pointer_Drag_Dflt" value="65268">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Pointer_EnableKeys" value="65273">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Pointer_Left" value="65248">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Pointer_Right" value="65249">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Pointer_Up" value="65250">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Pointer_UpLeft" value="65252">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Pointer_UpRight" value="65253">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_PowerDown" value="269025057">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_PowerOff" value="269025066">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Prev_VMode" value="269024803">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Prev_Virtual_Screen" value="65233">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_PreviousCandidate" value="65342">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Print" value="65377">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Prior" value="65365">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Q" value="81">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_R" value="82">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_R1" value="65490">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_R10" value="65499">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_R11" value="65500">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_R12" value="65501">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_R13" value="65502">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_R14" value="65503">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_R15" value="65504">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_R2" value="65491">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_R3" value="65492">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_R4" value="65493">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_R5" value="65494">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_R6" value="65495">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_R7" value="65496">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_R8" value="65497">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_R9" value="65498">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Racute" value="448">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Rcaron" value="472">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Rcedilla" value="931">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Red" value="269025187">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Redo" value="65382">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Refresh" value="269025065">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Reload" value="269025139">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_RepeatKeys_Enable" value="65138">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Reply" value="269025138">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Return" value="65293">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Right" value="65363">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_RockerDown" value="269025060">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_RockerEnter" value="269025061">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_RockerUp" value="269025059">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Romaji" value="65316">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_RotateWindows" value="269025140">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_RotationKB" value="269025142">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_RotationPB" value="269025141">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_RupeeSign" value="16785576">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_S" value="83">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_SCHWA" value="16777615">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Sabovedot" value="16784992">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Sacute" value="422">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Save" value="269025143">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Scaron" value="425">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Scedilla" value="426">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Scircumflex" value="734">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ScreenSaver" value="269025069">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ScrollClick" value="269025146">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ScrollDown" value="269025145">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ScrollUp" value="269025144">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Scroll_Lock" value="65300">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Search" value="269025051">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Select" value="65376">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_SelectButton" value="269025184">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Send" value="269025147">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Serbian_DJE" value="1713">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Serbian_DZE" value="1727">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Serbian_JE" value="1720">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Serbian_LJE" value="1721">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Serbian_NJE" value="1722">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Serbian_TSHE" value="1723">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Serbian_dje" value="1697">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Serbian_dze" value="1711">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Serbian_je" value="1704">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Serbian_lje" value="1705">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Serbian_nje" value="1706">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Serbian_tshe" value="1707">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Shift_L" value="65505">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Shift_Lock" value="65510">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Shift_R" value="65506">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Shop" value="269025078">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_SingleCandidate" value="65340">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Sleep" value="269025071">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_SlowKeys_Enable" value="65139">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Spell" value="269025148">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_SplitScreen" value="269025149">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Standby" value="269025040">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Start" value="269025050">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_StickyKeys_Enable" value="65141">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Stop" value="269025064">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Subtitle" value="269025178">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Super_L" value="65515">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Super_R" value="65516">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Support" value="269025150">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Suspend" value="269025191">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Switch_VT_1" value="269024769">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Switch_VT_10" value="269024778">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Switch_VT_11" value="269024779">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Switch_VT_12" value="269024780">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Switch_VT_2" value="269024770">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Switch_VT_3" value="269024771">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Switch_VT_4" value="269024772">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Switch_VT_5" value="269024773">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Switch_VT_6" value="269024774">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Switch_VT_7" value="269024775">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Switch_VT_8" value="269024776">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Switch_VT_9" value="269024777">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Sys_Req" value="65301">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_T" value="84">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_THORN" value="222">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Tab" value="65289">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Tabovedot" value="16785002">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_TaskPane" value="269025151">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Tcaron" value="427">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Tcedilla" value="478">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Terminal" value="269025152">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Terminate_Server" value="65237">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_baht" value="3551">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_bobaimai" value="3514">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_chochan" value="3496">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_chochang" value="3498">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_choching" value="3497">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_chochoe" value="3500">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_dochada" value="3502">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_dodek" value="3508">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_fofa" value="3517">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_fofan" value="3519">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_hohip" value="3531">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_honokhuk" value="3534">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_khokhai" value="3490">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_khokhon" value="3493">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_khokhuat" value="3491">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_khokhwai" value="3492">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_khorakhang" value="3494">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_kokai" value="3489">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_lakkhangyao" value="3557">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_lekchet" value="3575">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_lekha" value="3573">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_lekhok" value="3574">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_lekkao" value="3577">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_leknung" value="3569">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_lekpaet" value="3576">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_leksam" value="3571">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_leksi" value="3572">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_leksong" value="3570">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_leksun" value="3568">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_lochula" value="3532">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_loling" value="3525">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_lu" value="3526">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_maichattawa" value="3563">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_maiek" value="3560">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_maihanakat" value="3537">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_maihanakat_maitho" value="3550">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_maitaikhu" value="3559">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_maitho" value="3561">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_maitri" value="3562">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_maiyamok" value="3558">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_moma" value="3521">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_ngongu" value="3495">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_nikhahit" value="3565">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_nonen" value="3507">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_nonu" value="3513">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_oang" value="3533">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_paiyannoi" value="3535">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_phinthu" value="3546">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_phophan" value="3518">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_phophung" value="3516">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_phosamphao" value="3520">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_popla" value="3515">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_rorua" value="3523">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_ru" value="3524">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_saraa" value="3536">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_saraaa" value="3538">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_saraae" value="3553">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_saraaimaimalai" value="3556">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_saraaimaimuan" value="3555">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_saraam" value="3539">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_sarae" value="3552">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_sarai" value="3540">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_saraii" value="3541">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_sarao" value="3554">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_sarau" value="3544">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_saraue" value="3542">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_sarauee" value="3543">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_sarauu" value="3545">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_sorusi" value="3529">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_sosala" value="3528">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_soso" value="3499">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_sosua" value="3530">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_thanthakhat" value="3564">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_thonangmontho" value="3505">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_thophuthao" value="3506">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_thothahan" value="3511">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_thothan" value="3504">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_thothong" value="3512">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_thothung" value="3510">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_topatak" value="3503">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_totao" value="3509">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_wowaen" value="3527">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_yoyak" value="3522">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thai_yoying" value="3501">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Thorn" value="222">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Time" value="269025183">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ToDoList" value="269025055">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Tools" value="269025153">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_TopMenu" value="269025186">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_TouchpadToggle" value="269025193">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Touroku" value="65323">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Travel" value="269025154">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Tslash" value="940">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_U" value="85">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_UWB" value="269025174">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Uacute" value="218">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ubelowdot" value="16785124">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ubreve" value="733">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ucircumflex" value="219">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Udiaeresis" value="220">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Udoubleacute" value="475">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ugrave" value="217">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Uhook" value="16785126">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Uhorn" value="16777647">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Uhornacute" value="16785128">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Uhornbelowdot" value="16785136">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Uhorngrave" value="16785130">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Uhornhook" value="16785132">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Uhorntilde" value="16785134">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ukrainian_GHE_WITH_UPTURN" value="1725">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ukrainian_I" value="1718">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ukrainian_IE" value="1716">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ukrainian_YI" value="1719">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ukrainian_ghe_with_upturn" value="1709">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ukrainian_i" value="1702">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ukrainian_ie" value="1700">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ukrainian_yi" value="1703">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ukranian_I" value="1718">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ukranian_JE" value="1716">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ukranian_YI" value="1719">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ukranian_i" value="1702">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ukranian_je" value="1700">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ukranian_yi" value="1703">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Umacron" value="990">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Undo" value="65381">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ungrab" value="269024800">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Uogonek" value="985">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Up" value="65362">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Uring" value="473">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_User1KB" value="269025157">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_User2KB" value="269025158">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_UserPB" value="269025156">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Utilde" value="989">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_V" value="86">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_VendorHome" value="269025076">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Video" value="269025159">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_View" value="269025185">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_VoidSymbol" value="16777215">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_W" value="87">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_WLAN" value="269025173">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_WWW" value="269025070">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Wacute" value="16785026">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_WakeUp" value="269025067">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Wcircumflex" value="16777588">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Wdiaeresis" value="16785028">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_WebCam" value="269025167">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Wgrave" value="16785024">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_WheelButton" value="269025160">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_WindowClear" value="269025109">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_WonSign" value="16785577">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Word" value="269025161">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_X" value="88">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Xabovedot" value="16785034">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Xfer" value="269025162">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Y" value="89">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Yacute" value="221">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ybelowdot" value="16785140">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ycircumflex" value="16777590">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ydiaeresis" value="5054">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Yellow" value="269025189">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ygrave" value="16785138">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Yhook" value="16785142">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Ytilde" value="16785144">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Z" value="90">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Zabovedot" value="431">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Zacute" value="428">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Zcaron" value="430">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Zen_Koho" value="65341">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Zenkaku" value="65320">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Zenkaku_Hankaku" value="65322">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ZoomIn" value="269025163">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ZoomOut" value="269025164">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_Zstroke" value="16777653">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_a" value="97">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_aacute" value="225">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_abelowdot" value="16785057">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_abovedot" value="511">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_abreve" value="483">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_abreveacute" value="16785071">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_abrevebelowdot" value="16785079">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_abrevegrave" value="16785073">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_abrevehook" value="16785075">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_abrevetilde" value="16785077">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_acircumflex" value="226">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_acircumflexacute" value="16785061">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_acircumflexbelowdot" value="16785069">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_acircumflexgrave" value="16785063">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_acircumflexhook" value="16785065">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_acircumflextilde" value="16785067">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_acute" value="180">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_adiaeresis" value="228">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ae" value="230">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_agrave" value="224">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ahook" value="16785059">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_amacron" value="992">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ampersand" value="38">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_aogonek" value="433">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_apostrophe" value="39">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_approxeq" value="16785992">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_approximate" value="2248">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_aring" value="229">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_asciicircum" value="94">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_asciitilde" value="126">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_asterisk" value="42">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_at" value="64">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_atilde" value="227">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_b" value="98">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_babovedot" value="16784899">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_backslash" value="92">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ballotcross" value="2804">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_bar" value="124">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_because" value="16785973">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_blank" value="2527">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_botintegral" value="2213">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_botleftparens" value="2220">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_botleftsqbracket" value="2216">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_botleftsummation" value="2226">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_botrightparens" value="2222">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_botrightsqbracket" value="2218">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_botrightsummation" value="2230">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_bott" value="2550">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_botvertsummationconnector" value="2228">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braceleft" value="123">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braceright" value="125">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_bracketleft" value="91">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_bracketright" value="93">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_blank" value="16787456">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dot_1" value="65521">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dot_10" value="65530">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dot_2" value="65522">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dot_3" value="65523">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dot_4" value="65524">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dot_5" value="65525">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dot_6" value="65526">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dot_7" value="65527">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dot_8" value="65528">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dot_9" value="65529">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_1" value="16787457">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_12" value="16787459">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_123" value="16787463">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_1234" value="16787471">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_12345" value="16787487">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_123456" value="16787519">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_1234567" value="16787583">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_12345678" value="16787711">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_1234568" value="16787647">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_123457" value="16787551">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_1234578" value="16787679">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_123458" value="16787615">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_12346" value="16787503">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_123467" value="16787567">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_1234678" value="16787695">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_123468" value="16787631">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_12347" value="16787535">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_123478" value="16787663">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_12348" value="16787599">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_1235" value="16787479">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_12356" value="16787511">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_123567" value="16787575">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_1235678" value="16787703">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_123568" value="16787639">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_12357" value="16787543">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_123578" value="16787671">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_12358" value="16787607">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_1236" value="16787495">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_12367" value="16787559">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_123678" value="16787687">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_12368" value="16787623">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_1237" value="16787527">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_12378" value="16787655">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_1238" value="16787591">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_124" value="16787467">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_1245" value="16787483">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_12456" value="16787515">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_124567" value="16787579">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_1245678" value="16787707">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_124568" value="16787643">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_12457" value="16787547">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_124578" value="16787675">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_12458" value="16787611">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_1246" value="16787499">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_12467" value="16787563">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_124678" value="16787691">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_12468" value="16787627">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_1247" value="16787531">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_12478" value="16787659">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_1248" value="16787595">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_125" value="16787475">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_1256" value="16787507">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_12567" value="16787571">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_125678" value="16787699">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_12568" value="16787635">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_1257" value="16787539">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_12578" value="16787667">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_1258" value="16787603">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_126" value="16787491">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_1267" value="16787555">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_12678" value="16787683">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_1268" value="16787619">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_127" value="16787523">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_1278" value="16787651">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_128" value="16787587">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_13" value="16787461">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_134" value="16787469">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_1345" value="16787485">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_13456" value="16787517">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_134567" value="16787581">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_1345678" value="16787709">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_134568" value="16787645">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_13457" value="16787549">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_134578" value="16787677">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_13458" value="16787613">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_1346" value="16787501">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_13467" value="16787565">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_134678" value="16787693">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_13468" value="16787629">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_1347" value="16787533">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_13478" value="16787661">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_1348" value="16787597">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_135" value="16787477">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_1356" value="16787509">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_13567" value="16787573">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_135678" value="16787701">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_13568" value="16787637">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_1357" value="16787541">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_13578" value="16787669">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_1358" value="16787605">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_136" value="16787493">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_1367" value="16787557">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_13678" value="16787685">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_1368" value="16787621">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_137" value="16787525">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_1378" value="16787653">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_138" value="16787589">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_14" value="16787465">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_145" value="16787481">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_1456" value="16787513">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_14567" value="16787577">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_145678" value="16787705">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_14568" value="16787641">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_1457" value="16787545">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_14578" value="16787673">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_1458" value="16787609">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_146" value="16787497">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_1467" value="16787561">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_14678" value="16787689">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_1468" value="16787625">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_147" value="16787529">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_1478" value="16787657">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_148" value="16787593">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_15" value="16787473">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_156" value="16787505">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_1567" value="16787569">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_15678" value="16787697">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_1568" value="16787633">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_157" value="16787537">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_1578" value="16787665">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_158" value="16787601">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_16" value="16787489">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_167" value="16787553">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_1678" value="16787681">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_168" value="16787617">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_17" value="16787521">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_178" value="16787649">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_18" value="16787585">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_2" value="16787458">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_23" value="16787462">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_234" value="16787470">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_2345" value="16787486">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_23456" value="16787518">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_234567" value="16787582">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_2345678" value="16787710">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_234568" value="16787646">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_23457" value="16787550">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_234578" value="16787678">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_23458" value="16787614">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_2346" value="16787502">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_23467" value="16787566">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_234678" value="16787694">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_23468" value="16787630">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_2347" value="16787534">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_23478" value="16787662">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_2348" value="16787598">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_235" value="16787478">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_2356" value="16787510">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_23567" value="16787574">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_235678" value="16787702">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_23568" value="16787638">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_2357" value="16787542">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_23578" value="16787670">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_2358" value="16787606">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_236" value="16787494">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_2367" value="16787558">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_23678" value="16787686">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_2368" value="16787622">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_237" value="16787526">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_2378" value="16787654">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_238" value="16787590">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_24" value="16787466">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_245" value="16787482">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_2456" value="16787514">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_24567" value="16787578">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_245678" value="16787706">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_24568" value="16787642">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_2457" value="16787546">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_24578" value="16787674">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_2458" value="16787610">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_246" value="16787498">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_2467" value="16787562">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_24678" value="16787690">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_2468" value="16787626">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_247" value="16787530">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_2478" value="16787658">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_248" value="16787594">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_25" value="16787474">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_256" value="16787506">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_2567" value="16787570">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_25678" value="16787698">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_2568" value="16787634">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_257" value="16787538">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_2578" value="16787666">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_258" value="16787602">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_26" value="16787490">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_267" value="16787554">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_2678" value="16787682">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_268" value="16787618">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_27" value="16787522">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_278" value="16787650">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_28" value="16787586">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_3" value="16787460">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_34" value="16787468">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_345" value="16787484">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_3456" value="16787516">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_34567" value="16787580">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_345678" value="16787708">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_34568" value="16787644">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_3457" value="16787548">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_34578" value="16787676">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_3458" value="16787612">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_346" value="16787500">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_3467" value="16787564">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_34678" value="16787692">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_3468" value="16787628">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_347" value="16787532">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_3478" value="16787660">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_348" value="16787596">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_35" value="16787476">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_356" value="16787508">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_3567" value="16787572">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_35678" value="16787700">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_3568" value="16787636">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_357" value="16787540">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_3578" value="16787668">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_358" value="16787604">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_36" value="16787492">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_367" value="16787556">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_3678" value="16787684">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_368" value="16787620">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_37" value="16787524">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_378" value="16787652">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_38" value="16787588">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_4" value="16787464">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_45" value="16787480">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_456" value="16787512">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_4567" value="16787576">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_45678" value="16787704">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_4568" value="16787640">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_457" value="16787544">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_4578" value="16787672">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_458" value="16787608">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_46" value="16787496">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_467" value="16787560">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_4678" value="16787688">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_468" value="16787624">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_47" value="16787528">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_478" value="16787656">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_48" value="16787592">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_5" value="16787472">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_56" value="16787504">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_567" value="16787568">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_5678" value="16787696">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_568" value="16787632">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_57" value="16787536">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_578" value="16787664">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_58" value="16787600">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_6" value="16787488">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_67" value="16787552">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_678" value="16787680">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_68" value="16787616">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_7" value="16787520">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_78" value="16787648">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_braille_dots_8" value="16787584">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_breve" value="418">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_brokenbar" value="166">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_c" value="99">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_cabovedot" value="741">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_cacute" value="486">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_careof" value="2744">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_caret" value="2812">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_caron" value="439">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ccaron" value="488">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ccedilla" value="231">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ccircumflex" value="742">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_cedilla" value="184">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_cent" value="162">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_checkerboard" value="2529">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_checkmark" value="2803">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_circle" value="3023">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_club" value="2796">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_colon" value="58">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_comma" value="44">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_containsas" value="16785931">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_copyright" value="169">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_cr" value="2532">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_crossinglines" value="2542">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_cuberoot" value="16785947">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_currency" value="164">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_cursor" value="2815">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_d" value="100">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_dabovedot" value="16784907">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_dagger" value="2801">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_dcaron" value="495">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_dead_A" value="65153">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_dead_E" value="65155">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_dead_I" value="65157">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_dead_O" value="65159">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_dead_U" value="65161">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_dead_a" value="65152">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_dead_abovecomma" value="65124">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_dead_abovedot" value="65110">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_dead_abovereversedcomma" value="65125">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_dead_abovering" value="65112">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_dead_acute" value="65105">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_dead_belowbreve" value="65131">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_dead_belowcircumflex" value="65129">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_dead_belowcomma" value="65134">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_dead_belowdiaeresis" value="65132">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_dead_belowdot" value="65120">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_dead_belowmacron" value="65128">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_dead_belowring" value="65127">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_dead_belowtilde" value="65130">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_dead_breve" value="65109">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_dead_capital_schwa" value="65163">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_dead_caron" value="65114">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_dead_cedilla" value="65115">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_dead_circumflex" value="65106">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_dead_currency" value="65135">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_dead_dasia" value="65125">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_dead_diaeresis" value="65111">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_dead_doubleacute" value="65113">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_dead_doublegrave" value="65126">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_dead_e" value="65154">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_dead_grave" value="65104">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_dead_hook" value="65121">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_dead_horn" value="65122">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_dead_i" value="65156">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_dead_invertedbreve" value="65133">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_dead_iota" value="65117">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_dead_macron" value="65108">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_dead_o" value="65158">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_dead_ogonek" value="65116">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_dead_perispomeni" value="65107">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_dead_psili" value="65124">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_dead_semivoiced_sound" value="65119">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_dead_small_schwa" value="65162">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_dead_stroke" value="65123">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_dead_tilde" value="65107">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_dead_u" value="65160">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_dead_voiced_sound" value="65118">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_decimalpoint" value="2749">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_degree" value="176">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_diaeresis" value="168">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_diamond" value="2797">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_digitspace" value="2725">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_dintegral" value="16785964">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_division" value="247">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_dollar" value="36">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_doubbaselinedot" value="2735">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_doubleacute" value="445">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_doubledagger" value="2802">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_doublelowquotemark" value="2814">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_downarrow" value="2302">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_downcaret" value="2984">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_downshoe" value="3030">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_downstile" value="3012">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_downtack" value="3010">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_dstroke" value="496">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_e" value="101">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_eabovedot" value="1004">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_eacute" value="233">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ebelowdot" value="16785081">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ecaron" value="492">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ecircumflex" value="234">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ecircumflexacute" value="16785087">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ecircumflexbelowdot" value="16785095">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ecircumflexgrave" value="16785089">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ecircumflexhook" value="16785091">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ecircumflextilde" value="16785093">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ediaeresis" value="235">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_egrave" value="232">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ehook" value="16785083">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_eightsubscript" value="16785544">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_eightsuperior" value="16785528">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_elementof" value="16785928">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ellipsis" value="2734">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_em3space" value="2723">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_em4space" value="2724">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_emacron" value="954">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_emdash" value="2729">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_emfilledcircle" value="2782">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_emfilledrect" value="2783">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_emopencircle" value="2766">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_emopenrectangle" value="2767">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_emptyset" value="16785925">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_emspace" value="2721">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_endash" value="2730">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_enfilledcircbullet" value="2790">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_enfilledsqbullet" value="2791">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_eng" value="959">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_enopencircbullet" value="2784">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_enopensquarebullet" value="2785">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_enspace" value="2722">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_eogonek" value="490">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_equal" value="61">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_eth" value="240">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_etilde" value="16785085">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_exclam" value="33">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_exclamdown" value="161">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_f" value="102">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_fabovedot" value="16784927">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_femalesymbol" value="2808">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ff" value="2531">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_figdash" value="2747">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_filledlefttribullet" value="2780">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_filledrectbullet" value="2779">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_filledrighttribullet" value="2781">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_filledtribulletdown" value="2793">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_filledtribulletup" value="2792">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_fiveeighths" value="2757">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_fivesixths" value="2743">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_fivesubscript" value="16785541">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_fivesuperior" value="16785525">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_fourfifths" value="2741">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_foursubscript" value="16785540">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_foursuperior" value="16785524">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_fourthroot" value="16785948">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_function" value="2294">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_g" value="103">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_gabovedot" value="757">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_gbreve" value="699">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_gcaron" value="16777703">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_gcedilla" value="955">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_gcircumflex" value="760">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_grave" value="96">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_greater" value="62">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_greaterthanequal" value="2238">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_guillemotleft" value="171">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_guillemotright" value="187">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_h" value="104">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_hairspace" value="2728">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_hcircumflex" value="694">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_heart" value="2798">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_hebrew_aleph" value="3296">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_hebrew_ayin" value="3314">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_hebrew_bet" value="3297">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_hebrew_beth" value="3297">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_hebrew_chet" value="3303">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_hebrew_dalet" value="3299">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_hebrew_daleth" value="3299">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_hebrew_doublelowline" value="3295">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_hebrew_finalkaph" value="3306">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_hebrew_finalmem" value="3309">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_hebrew_finalnun" value="3311">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_hebrew_finalpe" value="3315">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_hebrew_finalzade" value="3317">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_hebrew_finalzadi" value="3317">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_hebrew_gimel" value="3298">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_hebrew_gimmel" value="3298">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_hebrew_he" value="3300">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_hebrew_het" value="3303">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_hebrew_kaph" value="3307">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_hebrew_kuf" value="3319">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_hebrew_lamed" value="3308">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_hebrew_mem" value="3310">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_hebrew_nun" value="3312">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_hebrew_pe" value="3316">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_hebrew_qoph" value="3319">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_hebrew_resh" value="3320">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_hebrew_samech" value="3313">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_hebrew_samekh" value="3313">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_hebrew_shin" value="3321">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_hebrew_taf" value="3322">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_hebrew_taw" value="3322">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_hebrew_tet" value="3304">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_hebrew_teth" value="3304">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_hebrew_waw" value="3301">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_hebrew_yod" value="3305">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_hebrew_zade" value="3318">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_hebrew_zadi" value="3318">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_hebrew_zain" value="3302">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_hebrew_zayin" value="3302">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_hexagram" value="2778">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_horizconnector" value="2211">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_horizlinescan1" value="2543">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_horizlinescan3" value="2544">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_horizlinescan5" value="2545">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_horizlinescan7" value="2546">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_horizlinescan9" value="2547">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_hstroke" value="689">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ht" value="2530">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_hyphen" value="173">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_i" value="105">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_iTouch" value="269025120">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_iacute" value="237">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ibelowdot" value="16785099">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ibreve" value="16777517">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_icircumflex" value="238">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_identical" value="2255">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_idiaeresis" value="239">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_idotless" value="697">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ifonlyif" value="2253">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_igrave" value="236">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ihook" value="16785097">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_imacron" value="1007">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_implies" value="2254">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_includedin" value="2266">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_includes" value="2267">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_infinity" value="2242">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_integral" value="2239">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_intersection" value="2268">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_iogonek" value="999">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_itilde" value="949">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_j" value="106">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_jcircumflex" value="700">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_jot" value="3018">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_k" value="107">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_A" value="1201">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_CHI" value="1217">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_E" value="1204">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_FU" value="1228">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_HA" value="1226">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_HE" value="1229">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_HI" value="1227">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_HO" value="1230">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_HU" value="1228">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_I" value="1202">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_KA" value="1206">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_KE" value="1209">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_KI" value="1207">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_KO" value="1210">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_KU" value="1208">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_MA" value="1231">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_ME" value="1234">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_MI" value="1232">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_MO" value="1235">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_MU" value="1233">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_N" value="1245">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_NA" value="1221">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_NE" value="1224">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_NI" value="1222">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_NO" value="1225">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_NU" value="1223">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_O" value="1205">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_RA" value="1239">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_RE" value="1242">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_RI" value="1240">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_RO" value="1243">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_RU" value="1241">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_SA" value="1211">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_SE" value="1214">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_SHI" value="1212">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_SO" value="1215">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_SU" value="1213">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_TA" value="1216">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_TE" value="1219">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_TI" value="1217">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_TO" value="1220">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_TSU" value="1218">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_TU" value="1218">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_U" value="1203">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_WA" value="1244">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_WO" value="1190">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_YA" value="1236">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_YO" value="1238">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_YU" value="1237">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_a" value="1191">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_closingbracket" value="1187">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_comma" value="1188">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_conjunctive" value="1189">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_e" value="1194">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_fullstop" value="1185">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_i" value="1192">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_middledot" value="1189">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_o" value="1195">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_openingbracket" value="1186">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_switch" value="65406">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_tsu" value="1199">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_tu" value="1199">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_u" value="1193">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_ya" value="1196">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_yo" value="1198">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kana_yu" value="1197">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kappa" value="930">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kcedilla" value="1011">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_kra" value="930">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_l" value="108">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_lacute" value="485">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_latincross" value="2777">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_lbelowdot" value="16784951">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_lcaron" value="437">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_lcedilla" value="950">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_leftanglebracket" value="2748">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_leftarrow" value="2299">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_leftcaret" value="2979">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_leftdoublequotemark" value="2770">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_leftmiddlecurlybrace" value="2223">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_leftopentriangle" value="2764">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_leftpointer" value="2794">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_leftradical" value="2209">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_leftshoe" value="3034">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_leftsinglequotemark" value="2768">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_leftt" value="2548">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_lefttack" value="3036">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_less" value="60">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_lessthanequal" value="2236">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_lf" value="2533">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_logicaland" value="2270">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_logicalor" value="2271">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_lowleftcorner" value="2541">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_lowrightcorner" value="2538">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_lstroke" value="435">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_m" value="109">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_mabovedot" value="16784961">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_macron" value="175">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_malesymbol" value="2807">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_maltesecross" value="2800">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_marker" value="2751">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_masculine" value="186">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_minus" value="45">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_minutes" value="2774">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_mu" value="181">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_multiply" value="215">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_musicalflat" value="2806">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_musicalsharp" value="2805">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_n" value="110">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_nabla" value="2245">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_nacute" value="497">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ncaron" value="498">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ncedilla" value="1009">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ninesubscript" value="16785545">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ninesuperior" value="16785529">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_nl" value="2536">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_nobreakspace" value="160">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_notapproxeq" value="16785991">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_notelementof" value="16785929">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_notequal" value="2237">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_notidentical" value="16786018">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_notsign" value="172">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ntilde" value="241">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_numbersign" value="35">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_numerosign" value="1712">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_o" value="111">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_oacute" value="243">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_obarred" value="16777845">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_obelowdot" value="16785101">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ocaron" value="16777682">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ocircumflex" value="244">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ocircumflexacute" value="16785105">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ocircumflexbelowdot" value="16785113">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ocircumflexgrave" value="16785107">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ocircumflexhook" value="16785109">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ocircumflextilde" value="16785111">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_odiaeresis" value="246">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_odoubleacute" value="501">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_oe" value="5053">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ogonek" value="434">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ograve" value="242">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ohook" value="16785103">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ohorn" value="16777633">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ohornacute" value="16785115">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ohornbelowdot" value="16785123">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ohorngrave" value="16785117">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ohornhook" value="16785119">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ohorntilde" value="16785121">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_omacron" value="1010">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_oneeighth" value="2755">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_onefifth" value="2738">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_onehalf" value="189">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_onequarter" value="188">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_onesixth" value="2742">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_onesubscript" value="16785537">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_onesuperior" value="185">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_onethird" value="2736">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ooblique" value="248">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_openrectbullet" value="2786">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_openstar" value="2789">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_opentribulletdown" value="2788">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_opentribulletup" value="2787">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ordfeminine" value="170">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_oslash" value="248">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_otilde" value="245">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_overbar" value="3008">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_overline" value="1150">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_p" value="112">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_pabovedot" value="16784983">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_paragraph" value="182">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_parenleft" value="40">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_parenright" value="41">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_partdifferential" value="16785922">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_partialderivative" value="2287">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_percent" value="37">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_period" value="46">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_periodcentered" value="183">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_phonographcopyright" value="2811">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_plus" value="43">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_plusminus" value="177">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_prescription" value="2772">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_prolongedsound" value="1200">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_punctspace" value="2726">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_q" value="113">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_quad" value="3020">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_question" value="63">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_questiondown" value="191">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_quotedbl" value="34">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_quoteleft" value="96">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_quoteright" value="39">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_r" value="114">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_racute" value="480">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_radical" value="2262">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_rcaron" value="504">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_rcedilla" value="947">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_registered" value="174">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_rightanglebracket" value="2750">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_rightarrow" value="2301">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_rightcaret" value="2982">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_rightdoublequotemark" value="2771">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_rightmiddlecurlybrace" value="2224">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_rightmiddlesummation" value="2231">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_rightopentriangle" value="2765">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_rightpointer" value="2795">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_rightshoe" value="3032">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_rightsinglequotemark" value="2769">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_rightt" value="2549">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_righttack" value="3068">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_s" value="115">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_sabovedot" value="16784993">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_sacute" value="438">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_scaron" value="441">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_scedilla" value="442">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_schwa" value="16777817">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_scircumflex" value="766">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_script_switch" value="65406">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_seconds" value="2775">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_section" value="167">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_semicolon" value="59">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_semivoicedsound" value="1247">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_seveneighths" value="2758">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_sevensubscript" value="16785543">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_sevensuperior" value="16785527">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_signaturemark" value="2762">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_signifblank" value="2732">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_similarequal" value="2249">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_singlelowquotemark" value="2813">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_sixsubscript" value="16785542">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_sixsuperior" value="16785526">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_slash" value="47">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_soliddiamond" value="2528">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_space" value="32">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_squareroot" value="16785946">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ssharp" value="223">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_sterling" value="163">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_stricteq" value="16786019">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_t" value="116">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_tabovedot" value="16785003">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_tcaron" value="443">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_tcedilla" value="510">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_telephone" value="2809">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_telephonerecorder" value="2810">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_therefore" value="2240">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_thinspace" value="2727">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_thorn" value="254">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_threeeighths" value="2756">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_threefifths" value="2740">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_threequarters" value="190">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_threesubscript" value="16785539">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_threesuperior" value="179">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_tintegral" value="16785965">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_topintegral" value="2212">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_topleftparens" value="2219">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_topleftradical" value="2210">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_topleftsqbracket" value="2215">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_topleftsummation" value="2225">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_toprightparens" value="2221">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_toprightsqbracket" value="2217">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_toprightsummation" value="2229">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_topt" value="2551">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_topvertsummationconnector" value="2227">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_trademark" value="2761">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_trademarkincircle" value="2763">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_tslash" value="956">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_twofifths" value="2739">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_twosubscript" value="16785538">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_twosuperior" value="178">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_twothirds" value="2737">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_u" value="117">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_uacute" value="250">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ubelowdot" value="16785125">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ubreve" value="765">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ucircumflex" value="251">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_udiaeresis" value="252">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_udoubleacute" value="507">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ugrave" value="249">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_uhook" value="16785127">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_uhorn" value="16777648">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_uhornacute" value="16785129">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_uhornbelowdot" value="16785137">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_uhorngrave" value="16785131">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_uhornhook" value="16785133">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_uhorntilde" value="16785135">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_umacron" value="1022">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_underbar" value="3014">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_underscore" value="95">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_union" value="2269">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_uogonek" value="1017">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_uparrow" value="2300">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_upcaret" value="2985">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_upleftcorner" value="2540">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_uprightcorner" value="2539">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_upshoe" value="3011">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_upstile" value="3027">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_uptack" value="3022">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_uring" value="505">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_utilde" value="1021">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_v" value="118">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_variation" value="2241">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_vertbar" value="2552">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_vertconnector" value="2214">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_voicedsound" value="1246">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_vt" value="2537">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_w" value="119">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_wacute" value="16785027">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_wcircumflex" value="16777589">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_wdiaeresis" value="16785029">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_wgrave" value="16785025">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_x" value="120">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_xabovedot" value="16785035">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_y" value="121">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_yacute" value="253">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ybelowdot" value="16785141">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ycircumflex" value="16777591">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ydiaeresis" value="255">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_yen" value="165">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ygrave" value="16785139">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_yhook" value="16785143">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_ytilde" value="16785145">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_z" value="122">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_zabovedot" value="447">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_zacute" value="444">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_zcaron" value="446">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_zerosubscript" value="16785536">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_zerosuperior" value="16785520">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KEY_zstroke" value="16777654">
      <type name="gint" c:type="gint"/>
    </constant>
    <record name="KeyboardGrabInfo" c:type="GdkKeyboardGrabInfo">
      <field name="window" writable="1">
        <type name="Window" c:type="GdkWindow*"/>
      </field>
      <field name="native_window" writable="1">
        <type name="Window" c:type="GdkWindow*"/>
      </field>
      <field name="serial" writable="1">
        <type name="gulong" c:type="gulong"/>
      </field>
      <field name="owner_events" writable="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="time" writable="1">
        <type name="guint32" c:type="guint32"/>
      </field>
    </record>
    <class name="Keymap"
           c:symbol-prefix="keymap"
           c:type="GdkKeymap"
           parent="GObject.Object"
           glib:type-name="GdkKeymap"
           glib:get-type="gdk_keymap_get_type"
           glib:type-struct="KeymapClass">
      <function name="get_default"
                c:identifier="gdk_keymap_get_default"
                introspectable="0">
        <return-value>
          <type name="Keymap" c:type="GdkKeymap*"/>
        </return-value>
      </function>
      <function name="get_for_display"
                c:identifier="gdk_keymap_get_for_display"
                introspectable="0">
        <return-value>
          <type name="Keymap" c:type="GdkKeymap*"/>
        </return-value>
        <parameters>
          <parameter name="display" transfer-ownership="none">
            <type name="Display" c:type="GdkDisplay*"/>
          </parameter>
        </parameters>
      </function>
      <method name="add_virtual_modifiers"
              c:identifier="gdk_keymap_add_virtual_modifiers"
              version="2.20">
        <doc xml:whitespace="preserve">Adds virtual modifiers (i.e. Super, Hyper and Meta) which correspond
to the real modifiers (i.e Mod2, Mod3, ...) in @modifiers.
are set in @state to their non-virtual counterparts (i.e. Mod2,
Mod3,...) and set the corresponding bits in @state.
GDK already does this before delivering key events, but for
compatibility reasons, it only sets the first virtual modifier
it finds, whereas this function sets all matching virtual modifiers.
This function is useful when matching key events against
accelerators.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="state" transfer-ownership="none">
            <doc xml:whitespace="preserve">pointer to the modifier mask to change</doc>
            <type name="ModifierType" c:type="GdkModifierType*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_caps_lock_state"
              c:identifier="gdk_keymap_get_caps_lock_state"
              version="2.16">
        <doc xml:whitespace="preserve">Returns whether the Caps Lock modifer is locked.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if Caps Lock is on</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_direction" c:identifier="gdk_keymap_get_direction">
        <return-value transfer-ownership="none">
          <type name="Pango.Direction" c:type="PangoDirection"/>
        </return-value>
      </method>
      <method name="get_entries_for_keycode"
              c:identifier="gdk_keymap_get_entries_for_keycode">
        <doc xml:whitespace="preserve">Returns the keyvals bound to @hardware_keycode.
The Nth #GdkKeymapKey in @keys is bound to the Nth
keyval in @keyvals. Free the returned arrays with g_free().
When a keycode is pressed by the user, the keyval from
this list of entries is selected by considering the effective
keyboard group and level. See gdk_keymap_translate_keyboard_state().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if there were any entries</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="hardware_keycode" transfer-ownership="none">
            <doc xml:whitespace="preserve">a keycode</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="keys"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:whitespace="preserve">return location for array of #GdkKeymapKey, or %NULL</doc>
            <type name="KeymapKey" c:type="GdkKeymapKey**"/>
          </parameter>
          <parameter name="keyvals"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:whitespace="preserve">return location for array of keyvals, or %NULL</doc>
            <type name="guint" c:type="guint**"/>
          </parameter>
          <parameter name="n_entries" transfer-ownership="none">
            <doc xml:whitespace="preserve">length of @keys and @keyvals</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_entries_for_keyval"
              c:identifier="gdk_keymap_get_entries_for_keyval">
        <doc xml:whitespace="preserve">Obtains a list of keycode/group/level combinations that will
generate @keyval. Groups and levels are two kinds of keyboard mode;
in general, the level determines whether the top or bottom symbol
on a key is used, and the group determines whether the left or
right symbol is used. On US keyboards, the shift key changes the
keyboard level, and there are no groups. A group switch key might
convert a keyboard between Hebrew to English modes, for example.
#GdkEventKey contains a %group field that indicates the active
keyboard group. The level is computed from the modifier mask.
The returned array should be freed
with g_free().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if keys were found and returned</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="keyval" transfer-ownership="none">
            <doc xml:whitespace="preserve">a keyval, such as %GDK_a, %GDK_Up, %GDK_Return, etc.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="keys"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:whitespace="preserve">return location for an array of #GdkKeymapKey</doc>
            <type name="KeymapKey" c:type="GdkKeymapKey**"/>
          </parameter>
          <parameter name="n_keys"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:whitespace="preserve">return location for number of elements in returned array</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_num_lock_state"
              c:identifier="gdk_keymap_get_num_lock_state"
              version="3.0">
        <doc xml:whitespace="preserve">Returns whether the Num Lock modifer is locked.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if Num Lock is on</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="have_bidi_layouts"
              c:identifier="gdk_keymap_have_bidi_layouts">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="lookup_key" c:identifier="gdk_keymap_lookup_key">
        <doc xml:whitespace="preserve">Looks up the keyval mapped to a keycode/group/level triplet.
If no keyval is bound to @key, returns 0. For normal user input,
you want to use gdk_keymap_translate_keyboard_state() instead of
this function, since the effective group/level may not be
the same as the current keyboard state.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a keyval, or 0 if none was mapped to the given @key</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="key" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GdkKeymapKey with keycode, group, and level initialized</doc>
            <type name="KeymapKey" c:type="GdkKeymapKey*"/>
          </parameter>
        </parameters>
      </method>
      <method name="map_virtual_modifiers"
              c:identifier="gdk_keymap_map_virtual_modifiers"
              version="2.20">
        <doc xml:whitespace="preserve">Maps the virtual modifiers (i.e. Super, Hyper and Meta) which
are set in @state to their non-virtual counterparts (i.e. Mod2,
Mod3,...) and set the corresponding bits in @state.
This function is useful when matching key events against
accelerators.
same non-virtual modifier. Note that %FALSE is also returned
if a virtual modifier is mapped to a non-virtual modifier that
was already set in @state.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if no virtual modifiers were mapped to the</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="state" transfer-ownership="none">
            <doc xml:whitespace="preserve">pointer to the modifier state to map</doc>
            <type name="ModifierType" c:type="GdkModifierType*"/>
          </parameter>
        </parameters>
      </method>
      <method name="translate_keyboard_state"
              c:identifier="gdk_keymap_translate_keyboard_state">
        <doc xml:whitespace="preserve">Translates the contents of a #GdkEventKey into a keyval, effective
group, and level. Modifiers that affected the translation and
are thus unavailable for application use are returned in
groups and levels.  The @effective_group is the group that was
actually used for the translation; some keys such as Enter are not
affected by the active keyboard group. The @level is derived from
keyval, so this function isn't as useful as you might think.
&lt;note&gt;&lt;para&gt;
from @state when comparing this key press to a hot key. For
instance, on a US keyboard, the &lt;literal&gt;plus&lt;/literal&gt;
symbol is shifted, so when comparing a key press to a
&lt;literal&gt;&amp;lt;Control&amp;gt;plus&lt;/literal&gt; accelerator &amp;lt;Shift&amp;gt; should
be masked out.
&lt;/para&gt;
&lt;informalexample&gt;&lt;programlisting&gt;
&amp;sol;* We want to ignore irrelevant modifiers like ScrollLock *&amp;sol;
&amp;num;define ALL_ACCELS_MASK (GDK_CONTROL_MASK | GDK_SHIFT_MASK | GDK_MOD1_MASK)
gdk_keymap_translate_keyboard_state (keymap, event-&gt;hardware_keycode,
event-&gt;state, event-&gt;group,
&amp;amp;keyval, NULL, NULL, &amp;amp;consumed);
if (keyval == GDK_PLUS &amp;&amp;
(event-&gt;state &amp;amp; ~consumed &amp;amp; ALL_ACCELS_MASK) == GDK_CONTROL_MASK)
&amp;sol;* Control was pressed *&amp;sol;
&lt;/programlisting&gt;&lt;/informalexample&gt;
&lt;para&gt;
An older interpretation @consumed_modifiers was that it contained
all modifiers that might affect the translation of the key;
this allowed accelerators to be stored with irrelevant consumed
modifiers, by doing:&lt;/para&gt;
&lt;informalexample&gt;&lt;programlisting&gt;
&amp;sol;* XXX Don't do this XXX *&amp;sol;
if (keyval == accel_keyval &amp;&amp;
(event-&gt;state &amp;amp; ~consumed &amp;amp; ALL_ACCELS_MASK) == (accel_mods &amp;amp; ~consumed))
&amp;sol;* Accelerator was pressed *&amp;sol;
&lt;/programlisting&gt;&lt;/informalexample&gt;
&lt;para&gt;
However, this did not work if multi-modifier combinations were
used in the keymap, since, for instance, &lt;literal&gt;&amp;lt;Control&amp;gt;&lt;/literal&gt;
would be masked out even if only &lt;literal&gt;&amp;lt;Control&amp;gt;&amp;lt;Alt&amp;gt;&lt;/literal&gt;
was used in the keymap. To support this usage as well as well as
possible, all &lt;emphasis&gt;single modifier&lt;/emphasis&gt; combinations
that could affect the key for any combination of modifiers will
be returned in @consumed_modifiers; multi-modifier combinations
are returned only when actually found in @state. When you store
accelerators, you should always store them with consumed modifiers
removed. Store &lt;literal&gt;&amp;lt;Control&amp;gt;plus&lt;/literal&gt;,
not &lt;literal&gt;&amp;lt;Control&amp;gt;&amp;lt;Shift&amp;gt;plus&lt;/literal&gt;,
&lt;/para&gt;&lt;/note&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if there was a keyval bound to the keycode/state/group</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="hardware_keycode" transfer-ownership="none">
            <doc xml:whitespace="preserve">a keycode</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="state" transfer-ownership="none">
            <doc xml:whitespace="preserve">a modifier state</doc>
            <type name="ModifierType" c:type="GdkModifierType"/>
          </parameter>
          <parameter name="group" transfer-ownership="none">
            <doc xml:whitespace="preserve">active keyboard group</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="keyval"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     allow-none="1">
            <doc xml:whitespace="preserve">return location for keyval, or %NULL</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
          <parameter name="effective_group"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     allow-none="1">
            <doc xml:whitespace="preserve">return location for effective group, or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="level"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     allow-none="1">
            <doc xml:whitespace="preserve">return location for level, or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="consumed_modifiers"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">return location for modifiers that were used to determine the group or level, or %NULL</doc>
            <type name="ModifierType" c:type="GdkModifierType*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="display">
        <type name="Display" c:type="GdkDisplay*"/>
      </field>
      <glib:signal name="direction-changed" version="2.0">
        <doc xml:whitespace="preserve">The ::direction-changed signal gets emitted when the direction of
the keymap changes.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
      <glib:signal name="keys-changed" version="2.2">
        <doc xml:whitespace="preserve">The ::keys-changed signal is emitted when the mapping represented by</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
      <glib:signal name="state-changed" version="2.16">
        <doc xml:whitespace="preserve">The ::state-changed signal is emitted when the state of the
keyboard changes, e.g when Caps Lock is turned on or off.
See gdk_keymap_get_caps_lock_state().</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="KeymapClass"
            c:type="GdkKeymapClass"
            glib:is-gtype-struct-for="Keymap">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="direction_changed">
        <callback name="direction_changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="keymap" transfer-ownership="none">
              <type name="Keymap" c:type="GdkKeymap*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="keys_changed">
        <callback name="keys_changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="keymap" transfer-ownership="none">
              <type name="Keymap" c:type="GdkKeymap*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="state_changed">
        <callback name="state_changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="keymap" transfer-ownership="none">
              <type name="Keymap" c:type="GdkKeymap*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="KeymapKey" c:type="GdkKeymapKey">
      <field name="keycode" writable="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="group" writable="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="level" writable="1">
        <type name="gint" c:type="gint"/>
      </field>
    </record>
    <constant name="MAX_TIMECOORD_AXES" value="128">
      <type name="gint" c:type="gint"/>
    </constant>
    <bitfield name="ModifierType"
              glib:type-name="GdkModifierType"
              glib:get-type="gdk_modifier_type_get_type"
              c:type="GdkModifierType">
      <doc xml:whitespace="preserve">A set of bit-flags to indicate the state of modifier keys and mouse buttons
in various event types. Typical modifier keys are Shift, Control, Meta,
Super, Hyper, Alt, Compose, Apple, CapsLock or ShiftLock.
Like the X Window System, GDK supports 8 modifier keys and 5 mouse buttons.
Since 2.10, GDK recognizes which of the Meta, Super or Hyper keys are mapped
to Mod2 - Mod5, and indicates this by setting %GDK_SUPER_MASK,
%GDK_HYPER_MASK or %GDK_META_MASK in the state field of key events.</doc>
      <member name="shift_mask"
              value="1"
              c:identifier="GDK_SHIFT_MASK"
              glib:nick="shift-mask"/>
      <member name="lock_mask"
              value="2"
              c:identifier="GDK_LOCK_MASK"
              glib:nick="lock-mask"/>
      <member name="control_mask"
              value="4"
              c:identifier="GDK_CONTROL_MASK"
              glib:nick="control-mask"/>
      <member name="mod1_mask"
              value="8"
              c:identifier="GDK_MOD1_MASK"
              glib:nick="mod1-mask"/>
      <member name="mod2_mask"
              value="16"
              c:identifier="GDK_MOD2_MASK"
              glib:nick="mod2-mask"/>
      <member name="mod3_mask"
              value="32"
              c:identifier="GDK_MOD3_MASK"
              glib:nick="mod3-mask"/>
      <member name="mod4_mask"
              value="64"
              c:identifier="GDK_MOD4_MASK"
              glib:nick="mod4-mask"/>
      <member name="mod5_mask"
              value="128"
              c:identifier="GDK_MOD5_MASK"
              glib:nick="mod5-mask"/>
      <member name="button1_mask"
              value="256"
              c:identifier="GDK_BUTTON1_MASK"
              glib:nick="button1-mask"/>
      <member name="button2_mask"
              value="512"
              c:identifier="GDK_BUTTON2_MASK"
              glib:nick="button2-mask"/>
      <member name="button3_mask"
              value="1024"
              c:identifier="GDK_BUTTON3_MASK"
              glib:nick="button3-mask"/>
      <member name="button4_mask"
              value="2048"
              c:identifier="GDK_BUTTON4_MASK"
              glib:nick="button4-mask"/>
      <member name="button5_mask"
              value="4096"
              c:identifier="GDK_BUTTON5_MASK"
              glib:nick="button5-mask"/>
      <member name="super_mask"
              value="67108864"
              c:identifier="GDK_SUPER_MASK"
              glib:nick="super-mask"/>
      <member name="hyper_mask"
              value="134217728"
              c:identifier="GDK_HYPER_MASK"
              glib:nick="hyper-mask"/>
      <member name="meta_mask"
              value="268435456"
              c:identifier="GDK_META_MASK"
              glib:nick="meta-mask"/>
      <member name="release_mask"
              value="1073741824"
              c:identifier="GDK_RELEASE_MASK"
              glib:nick="release-mask"/>
      <member name="modifier_mask"
              value="1543512063"
              c:identifier="GDK_MODIFIER_MASK"
              glib:nick="modifier-mask"/>
    </bitfield>
    <record name="MultipleClickInfo" c:type="GdkMultipleClickInfo">
      <field name="button_click_time" writable="1">
        <array zero-terminated="0" c:type="guint32" fixed-size="2">
          <type name="guint32" c:type="guint32"/>
        </array>
      </field>
      <field name="button_window" writable="1">
        <array zero-terminated="0" c:type="GdkWindow" fixed-size="2">
          <type name="Window" c:type="GdkWindow*"/>
        </array>
      </field>
      <field name="button_number" writable="1">
        <array zero-terminated="0" c:type="gint" fixed-size="2">
          <type name="gint" c:type="gint"/>
        </array>
      </field>
      <field name="button_x" writable="1">
        <array zero-terminated="0" c:type="gint" fixed-size="2">
          <type name="gint" c:type="gint"/>
        </array>
      </field>
      <field name="button_y" writable="1">
        <array zero-terminated="0" c:type="gint" fixed-size="2">
          <type name="gint" c:type="gint"/>
        </array>
      </field>
    </record>
    <enumeration name="NotifyType"
                 glib:type-name="GdkNotifyType"
                 glib:get-type="gdk_notify_type_get_type"
                 c:type="GdkNotifyType">
      <member name="ancestor"
              value="0"
              c:identifier="GDK_NOTIFY_ANCESTOR"
              glib:nick="ancestor"/>
      <member name="virtual"
              value="1"
              c:identifier="GDK_NOTIFY_VIRTUAL"
              glib:nick="virtual"/>
      <member name="inferior"
              value="2"
              c:identifier="GDK_NOTIFY_INFERIOR"
              glib:nick="inferior"/>
      <member name="nonlinear"
              value="3"
              c:identifier="GDK_NOTIFY_NONLINEAR"
              glib:nick="nonlinear"/>
      <member name="nonlinear_virtual"
              value="4"
              c:identifier="GDK_NOTIFY_NONLINEAR_VIRTUAL"
              glib:nick="nonlinear-virtual"/>
      <member name="unknown"
              value="5"
              c:identifier="GDK_NOTIFY_UNKNOWN"
              glib:nick="unknown"/>
    </enumeration>
    <enumeration name="OwnerChange"
                 glib:type-name="GdkOwnerChange"
                 glib:get-type="gdk_owner_change_get_type"
                 c:type="GdkOwnerChange">
      <member name="new_owner"
              value="0"
              c:identifier="GDK_OWNER_CHANGE_NEW_OWNER"
              glib:nick="new-owner"/>
      <member name="destroy"
              value="1"
              c:identifier="GDK_OWNER_CHANGE_DESTROY"
              glib:nick="destroy"/>
      <member name="close"
              value="2"
              c:identifier="GDK_OWNER_CHANGE_CLOSE"
              glib:nick="close"/>
    </enumeration>
    <constant name="PARENT_RELATIVE" value="1">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="PRIORITY_REDRAW" value="20">
      <type name="gint" c:type="gint"/>
    </constant>
    <class name="Pixmap"
           c:symbol-prefix="pixmap"
           c:type="GdkPixmap"
           parent="Drawable"
           glib:type-name="GdkPixmap"
           glib:get-type="gdk_pixmap_get_type">
      <constructor name="foreign_new" c:identifier="gdk_pixmap_foreign_new">
        <doc xml:whitespace="preserve">Wraps a native window for the default display in a #GdkPixmap.
This may fail if the pixmap has been destroyed.
For example in the X backend, a native pixmap handle is an Xlib
&lt;type&gt;XID&lt;/type&gt;.
native pixmap or %NULL if the pixmap has been destroyed.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the newly-created #GdkPixmap wrapper for the</doc>
          <type name="Pixmap" c:type="GdkPixmap*"/>
        </return-value>
        <parameters>
          <parameter name="anid" transfer-ownership="none">
            <doc xml:whitespace="preserve">a native pixmap handle.</doc>
            <type name="NativeWindow" c:type="GdkNativeWindow"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="foreign_new_for_display"
                   c:identifier="gdk_pixmap_foreign_new_for_display"
                   version="2.2">
        <doc xml:whitespace="preserve">Wraps a native pixmap in a #GdkPixmap.
This may fail if the pixmap has been destroyed.
For example in the X backend, a native pixmap handle is an Xlib
&lt;type&gt;XID&lt;/type&gt;.
native pixmap or %NULL if the pixmap has been destroyed.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the newly-created #GdkPixmap wrapper for the</doc>
          <type name="Pixmap" c:type="GdkPixmap*"/>
        </return-value>
        <parameters>
          <parameter name="display" transfer-ownership="none">
            <doc xml:whitespace="preserve">The #GdkDisplay where @anid is located.</doc>
            <type name="Display" c:type="GdkDisplay*"/>
          </parameter>
          <parameter name="anid" transfer-ownership="none">
            <doc xml:whitespace="preserve">a native pixmap handle.</doc>
            <type name="NativeWindow" c:type="GdkNativeWindow"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="foreign_new_for_screen"
                   c:identifier="gdk_pixmap_foreign_new_for_screen"
                   version="2.10">
        <doc xml:whitespace="preserve">Wraps a native pixmap in a #GdkPixmap.
This may fail if the pixmap has been destroyed.
For example in the X backend, a native pixmap handle is an Xlib
&lt;type&gt;XID&lt;/type&gt;.
This function is an alternative to gdk_pixmap_foreign_new_for_display()
for cases where the dimensions of the pixmap are known. For the X
backend, this avoids a roundtrip to the server.
native pixmap or %NULL if the pixmap has been destroyed.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the newly-created #GdkPixmap wrapper for the</doc>
          <type name="Pixmap" c:type="GdkPixmap*"/>
        </return-value>
        <parameters>
          <parameter name="screen" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GdkScreen</doc>
            <type name="Screen" c:type="GdkScreen*"/>
          </parameter>
          <parameter name="anid" transfer-ownership="none">
            <doc xml:whitespace="preserve">a native pixmap handle</doc>
            <type name="NativeWindow" c:type="GdkNativeWindow"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:whitespace="preserve">the width of the pixmap identified by @anid</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:whitespace="preserve">the height of the pixmap identified by @anid</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="depth" transfer-ownership="none">
            <doc xml:whitespace="preserve">the depth of the pixmap identified by @anid</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new" c:identifier="gdk_pixmap_new">
        <return-value transfer-ownership="full">
          <type name="Pixmap" c:type="GdkPixmap*"/>
        </return-value>
        <parameters>
          <parameter name="drawable" transfer-ownership="none">
            <type name="Drawable" c:type="GdkDrawable*"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="depth" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="lookup"
                c:identifier="gdk_pixmap_lookup"
                introspectable="0">
        <doc xml:whitespace="preserve">Looks up the #GdkPixmap that wraps the given native pixmap handle.
For example in the X backend, a native pixmap handle is an Xlib
&lt;type&gt;XID&lt;/type&gt;.
or %NULL if there is none.</doc>
        <return-value>
          <doc xml:whitespace="preserve">the #GdkPixmap wrapper for the native pixmap,</doc>
          <type name="Pixmap" c:type="GdkPixmap*"/>
        </return-value>
        <parameters>
          <parameter name="anid" transfer-ownership="none">
            <doc xml:whitespace="preserve">a native pixmap handle.</doc>
            <type name="NativeWindow" c:type="GdkNativeWindow"/>
          </parameter>
        </parameters>
      </function>
      <function name="lookup_for_display"
                c:identifier="gdk_pixmap_lookup_for_display"
                version="2.2"
                introspectable="0">
        <doc xml:whitespace="preserve">Looks up the #GdkPixmap that wraps the given native pixmap handle.
For example in the X backend, a native pixmap handle is an Xlib
&lt;type&gt;XID&lt;/type&gt;.
or %NULL if there is none.</doc>
        <return-value>
          <doc xml:whitespace="preserve">the #GdkPixmap wrapper for the native pixmap,</doc>
          <type name="Pixmap" c:type="GdkPixmap*"/>
        </return-value>
        <parameters>
          <parameter name="display" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GdkDisplay associated with @anid</doc>
            <type name="Display" c:type="GdkDisplay*"/>
          </parameter>
          <parameter name="anid" transfer-ownership="none">
            <doc xml:whitespace="preserve">a native pixmap handle.</doc>
            <type name="NativeWindow" c:type="GdkNativeWindow"/>
          </parameter>
        </parameters>
      </function>
    </class>
    <record name="PixmapObject" c:type="GdkPixmapObject">
      <field name="parent_instance" writable="1">
        <type name="Drawable" c:type="GdkDrawable"/>
      </field>
      <field name="impl" writable="1">
        <type name="Drawable" c:type="GdkDrawable*"/>
      </field>
      <field name="depth" writable="1">
        <type name="gint" c:type="gint"/>
      </field>
    </record>
    <record name="PixmapObjectClass" c:type="GdkPixmapObjectClass">
      <field name="parent_class" writable="1">
        <type name="DrawableClass" c:type="GdkDrawableClass"/>
      </field>
    </record>
    <record name="Point" c:type="GdkPoint">
      <field name="x" writable="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="y" writable="1">
        <type name="gint" c:type="gint"/>
      </field>
    </record>
    <record name="PointerHooks" c:type="GdkPointerHooks">
      <doc xml:whitespace="preserve">A table of pointers to functions for getting quantities related to
the current pointer position. GDK has one global table of this type,
which can be set using gdk_set_pointer_hooks().
This is only useful for such low-level tools as an event recorder.
Applications should never have any reason to use this facility</doc>
      <field name="get_pointer" introspectable="0">
        <callback name="get_pointer" introspectable="0">
          <return-value>
            <type name="Window" c:type="GdkWindow*"/>
          </return-value>
          <parameters>
            <parameter name="window" transfer-ownership="none">
              <type name="Window" c:type="GdkWindow*"/>
            </parameter>
            <parameter name="x" transfer-ownership="none">
              <type name="gint" c:type="gint*"/>
            </parameter>
            <parameter name="y" transfer-ownership="none">
              <type name="gint" c:type="gint*"/>
            </parameter>
            <parameter name="mask" transfer-ownership="none">
              <type name="ModifierType" c:type="GdkModifierType*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="window_at_pointer" introspectable="0">
        <callback name="window_at_pointer" introspectable="0">
          <return-value>
            <type name="Window" c:type="GdkWindow*"/>
          </return-value>
          <parameters>
            <parameter name="screen" transfer-ownership="none">
              <type name="Screen" c:type="GdkScreen*"/>
            </parameter>
            <parameter name="win_x" transfer-ownership="none">
              <type name="gint" c:type="gint*"/>
            </parameter>
            <parameter name="win_y" transfer-ownership="none">
              <type name="gint" c:type="gint*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="PointerWindowInfo" c:type="GdkPointerWindowInfo">
      <field name="toplevel_under_pointer" writable="1">
        <type name="Window" c:type="GdkWindow*"/>
      </field>
      <field name="window_under_pointer" writable="1">
        <type name="Window" c:type="GdkWindow*"/>
      </field>
      <field name="toplevel_x" writable="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="toplevel_y" writable="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="state" writable="1">
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="button" writable="1">
        <type name="guint32" c:type="guint32"/>
      </field>
    </record>
    <enumeration name="PropMode"
                 glib:type-name="GdkPropMode"
                 glib:get-type="gdk_prop_mode_get_type"
                 c:type="GdkPropMode">
      <member name="replace"
              value="0"
              c:identifier="GDK_PROP_MODE_REPLACE"
              glib:nick="replace"/>
      <member name="prepend"
              value="1"
              c:identifier="GDK_PROP_MODE_PREPEND"
              glib:nick="prepend"/>
      <member name="append"
              value="2"
              c:identifier="GDK_PROP_MODE_APPEND"
              glib:nick="append"/>
    </enumeration>
    <enumeration name="PropertyState"
                 glib:type-name="GdkPropertyState"
                 glib:get-type="gdk_property_state_get_type"
                 c:type="GdkPropertyState">
      <member name="new_value"
              value="0"
              c:identifier="GDK_PROPERTY_NEW_VALUE"
              glib:nick="new-value"/>
      <member name="delete"
              value="1"
              c:identifier="GDK_PROPERTY_DELETE"
              glib:nick="delete"/>
    </enumeration>
    <class name="Screen"
           c:symbol-prefix="screen"
           c:type="GdkScreen"
           parent="GObject.Object"
           glib:type-name="GdkScreen"
           glib:get-type="gdk_screen_get_type"
           glib:type-struct="ScreenClass">
      <function name="get_default"
                c:identifier="gdk_screen_get_default"
                version="2.2">
        <doc xml:whitespace="preserve">Gets the default screen for the default display. (See
gdk_display_get_default ()).</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GdkScreen, or %NULL if there is no default display.</doc>
          <type name="Screen" c:type="GdkScreen*"/>
        </return-value>
      </function>
      <function name="height" c:identifier="gdk_screen_height">
        <doc xml:whitespace="preserve">Returns the height of the default screen in pixels.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the height of the default screen in pixels.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </function>
      <function name="height_mm" c:identifier="gdk_screen_height_mm">
        <doc xml:whitespace="preserve">Returns the height of the default screen in millimeters.
Note that on many X servers this value will not be correct.
though it is not always correct.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the height of the default screen in millimeters,</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </function>
      <function name="width" c:identifier="gdk_screen_width">
        <doc xml:whitespace="preserve">Returns the width of the default screen in pixels.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the width of the default screen in pixels.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </function>
      <function name="width_mm" c:identifier="gdk_screen_width_mm">
        <doc xml:whitespace="preserve">Returns the width of the default screen in millimeters.
Note that on many X servers this value will not be correct.
though it is not always correct.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the width of the default screen in millimeters,</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </function>
      <method name="broadcast_client_message"
              c:identifier="gdk_screen_broadcast_client_message"
              version="2.2">
        <doc xml:whitespace="preserve">On X11, sends an X ClientMessage event to all toplevel windows on
Toplevel windows are determined by checking for the WM_STATE property,
as described in the Inter-Client Communication Conventions Manual (ICCCM).
If no windows are found with the WM_STATE property set, the message is
sent to all children of the root window.
On Windows, broadcasts a message registered with the name
GDK_WIN32_CLIENT_MESSAGE to all top-level windows. The amount of
data is limited to one long, i.e. four bytes.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="event" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GdkEvent.</doc>
            <type name="Event" c:type="GdkEvent*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_active_window"
              c:identifier="gdk_screen_get_active_window"
              introspectable="0">
        <return-value>
          <type name="Window" c:type="GdkWindow*"/>
        </return-value>
      </method>
      <method name="get_default_colormap"
              c:identifier="gdk_screen_get_default_colormap"
              version="2.2">
        <doc xml:whitespace="preserve">Gets the default colormap for @screen.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the default #GdkColormap.</doc>
          <type name="Colormap" c:type="GdkColormap*"/>
        </return-value>
      </method>
      <method name="get_display"
              c:identifier="gdk_screen_get_display"
              version="2.2"
              introspectable="0">
        <doc xml:whitespace="preserve">Gets the display to which the @screen belongs.</doc>
        <return-value>
          <doc xml:whitespace="preserve">the display to which @screen belongs</doc>
          <type name="Display" c:type="GdkDisplay*"/>
        </return-value>
      </method>
      <method name="get_font_options"
              c:identifier="gdk_screen_get_font_options"
              version="2.10">
        <doc xml:whitespace="preserve">Gets any options previously set with gdk_screen_set_font_options().
font options have been set.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the current font options, or %NULL if no default</doc>
          <type name="cairo.FontOptions" c:type="cairo_font_options_t*"/>
        </return-value>
      </method>
      <method name="get_height"
              c:identifier="gdk_screen_get_height"
              version="2.2">
        <doc xml:whitespace="preserve">Gets the height of @screen in pixels</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the height of @screen in pixels.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="get_height_mm"
              c:identifier="gdk_screen_get_height_mm"
              version="2.2">
        <doc xml:whitespace="preserve">Returns the height of @screen in millimeters. 
Note that on some X servers this value will not be correct.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the heigth of @screen in millimeters.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="get_monitor_at_point"
              c:identifier="gdk_screen_get_monitor_at_point"
              version="2.2">
        <doc xml:whitespace="preserve">Returns the monitor number in which the point (@x,@y) is located.
a monitor close to (@x,@y) if the point is not in any monitor.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the monitor number in which the point (@x,@y) lies, or</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <parameter name="x" transfer-ownership="none">
            <doc xml:whitespace="preserve">the x coordinate in the virtual screen.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:whitespace="preserve">the y coordinate in the virtual screen.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_monitor_at_window"
              c:identifier="gdk_screen_get_monitor_at_window"
              version="2.2">
        <doc xml:whitespace="preserve">Returns the number of the monitor in which the largest area of the 
bounding rectangle of @window resides.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the monitor number in which most of @window is located, or if @window does not intersect any monitors, a monitor, close to @window.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <parameter name="window" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_monitor_geometry"
              c:identifier="gdk_screen_get_monitor_geometry"
              version="2.2">
        <doc xml:whitespace="preserve">Retrieves the #GdkRectangle representing the size and position of
the individual monitor within the entire screen area.
Note that the size of the entire screen area can be retrieved via
gdk_screen_get_width() and gdk_screen_get_height().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="monitor_num" transfer-ownership="none">
            <doc xml:whitespace="preserve">the monitor number, between 0 and gdk_screen_get_n_monitors (screen)</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="dest" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GdkRectangle to be filled with the monitor geometry</doc>
            <type name="Rectangle" c:type="GdkRectangle*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_monitor_height_mm"
              c:identifier="gdk_screen_get_monitor_height_mm"
              version="2.14">
        <doc xml:whitespace="preserve">Gets the height in millimeters of the specified monitor.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the height of the monitor, or -1 if not available</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <parameter name="monitor_num" transfer-ownership="none">
            <doc xml:whitespace="preserve">number of the monitor, between 0 and gdk_screen_get_n_monitors (screen)</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_monitor_plug_name"
              c:identifier="gdk_screen_get_monitor_plug_name"
              version="2.14">
        <doc xml:whitespace="preserve">Returns the output name of the specified monitor.
Usually something like VGA, DVI, or TV, not the actual
product name of the display device.
or %NULL if the name cannot be determined</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a newly-allocated string containing the name of the monitor,</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="monitor_num" transfer-ownership="none">
            <doc xml:whitespace="preserve">number of the monitor, between 0 and gdk_screen_get_n_monitors (screen)</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_monitor_width_mm"
              c:identifier="gdk_screen_get_monitor_width_mm"
              version="2.14">
        <doc xml:whitespace="preserve">Gets the width in millimeters of the specified monitor, if available.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the width of the monitor, or -1 if not available</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <parameter name="monitor_num" transfer-ownership="none">
            <doc xml:whitespace="preserve">number of the monitor, between 0 and gdk_screen_get_n_monitors (screen)</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_n_monitors"
              c:identifier="gdk_screen_get_n_monitors"
              version="2.2">
        <doc xml:whitespace="preserve">Returns the number of monitors which @screen consists of.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">number of monitors which @screen consists of</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="get_number"
              c:identifier="gdk_screen_get_number"
              version="2.2">
        <doc xml:whitespace="preserve">Gets the index of @screen among the screens in the display
to which it belongs. (See gdk_screen_get_display())</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the index</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="get_primary_monitor"
              c:identifier="gdk_screen_get_primary_monitor"
              version="2.20">
        <doc xml:whitespace="preserve">Gets the primary monitor for @screen.  The primary monitor
is considered the monitor where the 'main desktop' lives.
While normal application windows typically allow the window
manager to place the windows, specialized desktop applications
such as panels should place themselves on the primary monitor.
If no primary monitor is configured by the user, the return value
will be 0, defaulting to the first monitor.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">An integer index for the primary monitor, or 0 if none is configured.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="get_resolution"
              c:identifier="gdk_screen_get_resolution"
              version="2.10">
        <doc xml:whitespace="preserve">Gets the resolution for font handling on the screen; see
gdk_screen_set_resolution() for full details.
has been set.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the current resolution, or -1 if no resolution</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </method>
      <method name="get_rgba_colormap"
              c:identifier="gdk_screen_get_rgba_colormap"
              version="2.8">
        <doc xml:whitespace="preserve">Gets a colormap to use for creating windows or pixmaps with an
alpha channel. The windowing system on which GTK+ is running
may not support this capability, in which case %NULL will
be returned. Even if a non-%NULL value is returned, its
possible that the window's alpha channel won't be honored
X an appropriate windowing manager and compositing manager
must be running to provide appropriate display.
This functionality is not implemented in the Windows backend.
For setting an overall opacity for a top-level window, see
gdk_window_set_opacity().
an alpha channel or %NULL if the capability is not available.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a colormap to use for windows with</doc>
          <type name="Colormap" c:type="GdkColormap*"/>
        </return-value>
      </method>
      <method name="get_rgba_visual"
              c:identifier="gdk_screen_get_rgba_visual"
              version="2.8">
        <doc xml:whitespace="preserve">Gets a visual to use for creating windows or pixmaps with an
alpha channel. See the docs for gdk_screen_get_rgba_colormap()
for caveats.
alpha channel or %NULL if the capability is not available.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a visual to use for windows with an</doc>
          <type name="Visual" c:type="GdkVisual*"/>
        </return-value>
      </method>
      <method name="get_root_window"
              c:identifier="gdk_screen_get_root_window"
              version="2.2">
        <doc xml:whitespace="preserve">Gets the root window of @screen.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the root window</doc>
          <type name="Window" c:type="GdkWindow*"/>
        </return-value>
      </method>
      <method name="get_setting"
              c:identifier="gdk_screen_get_setting"
              version="2.2">
        <doc xml:whitespace="preserve">Retrieves a desktop-wide setting such as double-click time
for the #GdkScreen @screen.
FIXME needs a list of valid settings here, or a link to
more information.
in @value, %FALSE otherwise.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the setting existed and a value was stored</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:whitespace="preserve">the name of the setting</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:whitespace="preserve">location to store the value of the setting</doc>
            <type name="GObject.Value" c:type="GValue*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_system_colormap"
              c:identifier="gdk_screen_get_system_colormap"
              version="2.2">
        <doc xml:whitespace="preserve">Gets the system's default colormap for @screen</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the default colormap for @screen.</doc>
          <type name="Colormap" c:type="GdkColormap*"/>
        </return-value>
      </method>
      <method name="get_system_visual"
              c:identifier="gdk_screen_get_system_visual"
              version="2.2">
        <doc xml:whitespace="preserve">Get the system's default visual for @screen.
This is the visual for the root window of the display.
The return value should not be freed.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the system visual</doc>
          <type name="Visual" c:type="GdkVisual*"/>
        </return-value>
      </method>
      <method name="get_toplevel_windows"
              c:identifier="gdk_screen_get_toplevel_windows"
              version="2.2">
        <doc xml:whitespace="preserve">Obtains a list of all toplevel windows known to GDK on the screen @screen.
A toplevel window is a child of the root window (see
gdk_get_default_root_window()).
The returned list should be freed with g_list_free(), but
its elements need not be freed.
list of toplevel windows, free with g_list_free()</doc>
        <return-value transfer-ownership="container">
          <type name="GLib.List" c:type="GList*">
            <type name="Window"/>
          </type>
        </return-value>
      </method>
      <method name="get_width"
              c:identifier="gdk_screen_get_width"
              version="2.2">
        <doc xml:whitespace="preserve">Gets the width of @screen in pixels</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the width of @screen in pixels.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="get_width_mm"
              c:identifier="gdk_screen_get_width_mm"
              version="2.2">
        <doc xml:whitespace="preserve">Gets the width of @screen in millimeters. 
Note that on some X servers this value will not be correct.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the width of @screen in millimeters.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="get_window_stack"
              c:identifier="gdk_screen_get_window_stack"
              version="2.10">
        <doc xml:whitespace="preserve">Returns a #GList of #GdkWindow&lt;!-- --&gt;s representing the current
window stack.
On X11, this is done by inspecting the _NET_CLIENT_LIST_STACKING
property on the root window, as described in the &lt;ulink
url="http://www.freedesktop.org/Standards/wm-spec"&gt;Extended Window
Manager Hints&lt;/ulink&gt;. If the window manager does not support the
_NET_CLIENT_LIST_STACKING hint, this function returns %NULL.
On other platforms, this function may return %NULL, depending on whether
it is implementable on that platform.
The returned list is newly allocated and owns references to the
windows it contains, so it should be freed using g_list_free() and
its windows unrefed using g_object_unref() when no longer needed.
a list of #GdkWindow&lt;!-- --&gt;s for the current window stack,
or %NULL.</doc>
        <return-value transfer-ownership="full">
          <type name="GLib.List" c:type="GList*">
            <type name="Window"/>
          </type>
        </return-value>
      </method>
      <method name="is_composited"
              c:identifier="gdk_screen_is_composited"
              version="2.10">
        <doc xml:whitespace="preserve">Returns whether windows with an RGBA visual can reasonably
be expected to have their alpha channel drawn correctly on
the screen.
On X11 this function returns whether a compositing manager is
compositing @screen.
expected to have their alpha channels drawn correctly on the screen.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">Whether windows with RGBA visuals can reasonably be</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="list_visuals"
              c:identifier="gdk_screen_list_visuals"
              version="2.2">
        <doc xml:whitespace="preserve">Lists the available visuals for the specified @screen.
A visual describes a hardware image data format.
For example, a visual might support 24-bit color, or 8-bit color,
and might expect pixels to be in a certain format.
Call g_list_free() on the return value when you're finished with it.
a list of visuals; the list must be freed, but not its contents</doc>
        <return-value transfer-ownership="container">
          <type name="GLib.List" c:type="GList*">
            <type name="Visual"/>
          </type>
        </return-value>
      </method>
      <method name="make_display_name"
              c:identifier="gdk_screen_make_display_name"
              version="2.2">
        <doc xml:whitespace="preserve">Determines the name to pass to gdk_display_open() to get
a #GdkDisplay with this screen as the default screen.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a newly allocated string, free with g_free()</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="set_default_colormap"
              c:identifier="gdk_screen_set_default_colormap"
              version="2.2">
        <doc xml:whitespace="preserve">Sets the default @colormap for @screen.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="colormap" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GdkColormap</doc>
            <type name="Colormap" c:type="GdkColormap*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_font_options"
              c:identifier="gdk_screen_set_font_options"
              version="2.10">
        <doc xml:whitespace="preserve">Sets the default font options for the screen. These
options will be set on any #PangoContext's newly created
with gdk_pango_context_get_for_screen(). Changing the
default set of font options does not affect contexts that
have already been created.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="options" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">a #cairo_font_options_t, or %NULL to unset any previously set default font options.</doc>
            <type name="cairo.FontOptions" c:type="cairo_font_options_t*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_resolution"
              c:identifier="gdk_screen_set_resolution"
              version="2.10">
        <doc xml:whitespace="preserve">Sets the resolution for font handling on the screen. This is a
scale factor between points specified in a #PangoFontDescription
and cairo units. The default value is 96, meaning that a 10 point
font will be 13 units high. (10 * 96. / 72. = 13.3).</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="dpi" transfer-ownership="none">
            <doc xml:whitespace="preserve">the resolution in "dots per inch". (Physical inches aren't actually involved; the terminology is conventional.)</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <property name="font-options" writable="1" transfer-ownership="none">
        <type name="gpointer"/>
      </property>
      <property name="resolution" writable="1" transfer-ownership="none">
        <type name="gdouble"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="closed" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="font_options">
        <type name="cairo.FontOptions" c:type="cairo_font_options_t*"/>
      </field>
      <field name="resolution">
        <type name="gdouble" c:type="double"/>
      </field>
      <glib:signal name="composited-changed" version="2.10">
        <doc xml:whitespace="preserve">The ::composited-changed signal is emitted when the composited
status of the screen changes</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
      <glib:signal name="monitors-changed" version="2.14">
        <doc xml:whitespace="preserve">The ::monitors-changed signal is emitted when the number, size
or position of the monitors attached to the screen change. 
Only for X11 and OS X for now. A future implementation for Win32
may be a possibility.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
      <glib:signal name="size-changed" version="2.2">
        <doc xml:whitespace="preserve">The ::size-changed signal is emitted when the pixel width or 
height of a screen changes.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="ScreenClass"
            c:type="GdkScreenClass"
            glib:is-gtype-struct-for="Screen">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="size_changed">
        <callback name="size_changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="screen" transfer-ownership="none">
              <type name="Screen" c:type="GdkScreen*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="composited_changed">
        <callback name="composited_changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="screen" transfer-ownership="none">
              <type name="Screen" c:type="GdkScreen*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="monitors_changed">
        <callback name="monitors_changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="screen" transfer-ownership="none">
              <type name="Screen" c:type="GdkScreen*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <enumeration name="ScrollDirection"
                 glib:type-name="GdkScrollDirection"
                 glib:get-type="gdk_scroll_direction_get_type"
                 c:type="GdkScrollDirection">
      <member name="up" value="0" c:identifier="GDK_SCROLL_UP" glib:nick="up"/>
      <member name="down"
              value="1"
              c:identifier="GDK_SCROLL_DOWN"
              glib:nick="down"/>
      <member name="left"
              value="2"
              c:identifier="GDK_SCROLL_LEFT"
              glib:nick="left"/>
      <member name="right"
              value="3"
              c:identifier="GDK_SCROLL_RIGHT"
              glib:nick="right"/>
    </enumeration>
    <enumeration name="SettingAction"
                 glib:type-name="GdkSettingAction"
                 glib:get-type="gdk_setting_action_get_type"
                 c:type="GdkSettingAction">
      <member name="new"
              value="0"
              c:identifier="GDK_SETTING_ACTION_NEW"
              glib:nick="new"/>
      <member name="changed"
              value="1"
              c:identifier="GDK_SETTING_ACTION_CHANGED"
              glib:nick="changed"/>
      <member name="deleted"
              value="2"
              c:identifier="GDK_SETTING_ACTION_DELETED"
              glib:nick="deleted"/>
    </enumeration>
    <record name="Span" c:type="GdkSpan">
      <field name="x" writable="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="y" writable="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="width" writable="1">
        <type name="gint" c:type="gint"/>
      </field>
    </record>
    <enumeration name="Status"
                 glib:type-name="GdkStatus"
                 glib:get-type="gdk_status_get_type"
                 c:type="GdkStatus">
      <member name="ok" value="0" c:identifier="GDK_OK" glib:nick="ok"/>
      <member name="error"
              value="-1"
              c:identifier="GDK_ERROR"
              glib:nick="error"/>
      <member name="error_param"
              value="-2"
              c:identifier="GDK_ERROR_PARAM"
              glib:nick="error-param"/>
      <member name="error_file"
              value="-3"
              c:identifier="GDK_ERROR_FILE"
              glib:nick="error-file"/>
      <member name="error_mem"
              value="-4"
              c:identifier="GDK_ERROR_MEM"
              glib:nick="error-mem"/>
    </enumeration>
    <record name="TimeCoord" c:type="GdkTimeCoord">
      <doc xml:whitespace="preserve">The #GdkTimeCoord structure stores a single event in a motion history.</doc>
      <field name="time" writable="1">
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="axes" writable="1">
        <array zero-terminated="0" c:type="gdouble" fixed-size="128">
          <type name="gdouble" c:type="gdouble"/>
        </array>
      </field>
    </record>
    <enumeration name="VisibilityState"
                 glib:type-name="GdkVisibilityState"
                 glib:get-type="gdk_visibility_state_get_type"
                 c:type="GdkVisibilityState">
      <member name="unobscured"
              value="0"
              c:identifier="GDK_VISIBILITY_UNOBSCURED"
              glib:nick="unobscured"/>
      <member name="partial"
              value="1"
              c:identifier="GDK_VISIBILITY_PARTIAL"
              glib:nick="partial"/>
      <member name="fully_obscured"
              value="2"
              c:identifier="GDK_VISIBILITY_FULLY_OBSCURED"
              glib:nick="fully-obscured"/>
    </enumeration>
    <class name="Visual"
           c:symbol-prefix="visual"
           c:type="GdkVisual"
           parent="GObject.Object"
           glib:type-name="GdkVisual"
           glib:get-type="gdk_visual_get_type"
           glib:type-struct="VisualClass">
      <function name="get_best" c:identifier="gdk_visual_get_best">
        <doc xml:whitespace="preserve">Get the visual with the most available colors for the default
GDK screen. The return value should not be freed.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">best visual</doc>
          <type name="Visual" c:type="GdkVisual*"/>
        </return-value>
      </function>
      <function name="get_best_depth" c:identifier="gdk_visual_get_best_depth">
        <doc xml:whitespace="preserve">Get the best available depth for the default GDK screen.  "Best"
means "largest," i.e. 32 preferred over 24 preferred over 8 bits
per pixel.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">best available depth</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </function>
      <function name="get_best_type" c:identifier="gdk_visual_get_best_type">
        <doc xml:whitespace="preserve">Return the best available visual type for the default GDK screen.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">best visual type</doc>
          <type name="VisualType" c:type="GdkVisualType"/>
        </return-value>
      </function>
      <function name="get_best_with_both"
                c:identifier="gdk_visual_get_best_with_both">
        <doc xml:whitespace="preserve">Combines gdk_visual_get_best_with_depth() and gdk_visual_get_best_with_type().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">best visual with both @depth and</doc>
          <type name="Visual" c:type="GdkVisual*"/>
        </return-value>
        <parameters>
          <parameter name="depth" transfer-ownership="none">
            <doc xml:whitespace="preserve">a bit depth</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="visual_type" transfer-ownership="none">
            <doc xml:whitespace="preserve">a visual type</doc>
            <type name="VisualType" c:type="GdkVisualType"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_best_with_depth"
                c:identifier="gdk_visual_get_best_with_depth">
        <doc xml:whitespace="preserve">Get the best visual with depth @depth for the default GDK screen.
Color visuals and visuals with mutable colormaps are preferred
over grayscale or fixed-colormap visuals. The return value should not
be freed. %NULL may be returned if no visual supports @depth.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">best visual for the given depth</doc>
          <type name="Visual" c:type="GdkVisual*"/>
        </return-value>
        <parameters>
          <parameter name="depth" transfer-ownership="none">
            <doc xml:whitespace="preserve">a bit depth</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_best_with_type"
                c:identifier="gdk_visual_get_best_with_type">
        <doc xml:whitespace="preserve">Get the best visual of the given @visual_type for the default GDK screen.
Visuals with higher color depths are considered better. The return value
should not be freed. %NULL may be returned if no visual has type</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">best visual of the given type</doc>
          <type name="Visual" c:type="GdkVisual*"/>
        </return-value>
        <parameters>
          <parameter name="visual_type" transfer-ownership="none">
            <doc xml:whitespace="preserve">a visual type</doc>
            <type name="VisualType" c:type="GdkVisualType"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_system" c:identifier="gdk_visual_get_system">
        <doc xml:whitespace="preserve">Get the system's default visual for the default GDK screen.
This is the visual for the root window of the display.
The return value should not be freed.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">system visual</doc>
          <type name="Visual" c:type="GdkVisual*"/>
        </return-value>
      </function>
      <method name="get_bits_per_rgb"
              c:identifier="gdk_visual_get_bits_per_rgb"
              version="2.22">
        <doc xml:whitespace="preserve">Returns the number of significant bits per red, green and blue value.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The number of significant bits per color value for @visual.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="get_blue_pixel_details"
              c:identifier="gdk_visual_get_blue_pixel_details"
              version="2.22">
        <doc xml:whitespace="preserve">Obtains values that are needed to calculate blue pixel values in TrueColor
and DirectColor.  The "mask" is the significant bits within the pixel.
The "shift" is the number of bits left we must shift a primary for it
to be in position (according to the "mask").  Finally, "precision" refers
to how much precision the pixel value contains for a particular primary.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="mask"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     allow-none="1">
            <doc xml:whitespace="preserve">A pointer to a #guint32 to be filled in, or %NULL.</doc>
            <type name="guint32" c:type="guint32*"/>
          </parameter>
          <parameter name="shift"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     allow-none="1">
            <doc xml:whitespace="preserve">A pointer to a #gint to be filled in, or %NULL.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="precision"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     allow-none="1">
            <doc xml:whitespace="preserve">A pointer to a #gint to be filled in, or %NULL.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_byte_order"
              c:identifier="gdk_visual_get_byte_order"
              version="2.22">
        <doc xml:whitespace="preserve">Returns the byte order of this visual.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">A #GdkByteOrder stating the byte order of @visual.</doc>
          <type name="ByteOrder" c:type="GdkByteOrder"/>
        </return-value>
      </method>
      <method name="get_colormap_size"
              c:identifier="gdk_visual_get_colormap_size"
              version="2.22">
        <doc xml:whitespace="preserve">Returns the size of a colormap for this visual.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The size of a colormap that is suitable for @visual.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="get_depth"
              c:identifier="gdk_visual_get_depth"
              version="2.22">
        <doc xml:whitespace="preserve">Returns the bit depth of this visual.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The bit depth of this visual.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="get_green_pixel_details"
              c:identifier="gdk_visual_get_green_pixel_details"
              version="2.22">
        <doc xml:whitespace="preserve">Obtains values that are needed to calculate green pixel values in TrueColor
and DirectColor.  The "mask" is the significant bits within the pixel.
The "shift" is the number of bits left we must shift a primary for it
to be in position (according to the "mask").  Finally, "precision" refers
to how much precision the pixel value contains for a particular primary.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="mask"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     allow-none="1">
            <doc xml:whitespace="preserve">A pointer to a #guint32 to be filled in, or %NULL.</doc>
            <type name="guint32" c:type="guint32*"/>
          </parameter>
          <parameter name="shift"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     allow-none="1">
            <doc xml:whitespace="preserve">A pointer to a #gint to be filled in, or %NULL.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="precision"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     allow-none="1">
            <doc xml:whitespace="preserve">A pointer to a #gint to be filled in, or %NULL.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_red_pixel_details"
              c:identifier="gdk_visual_get_red_pixel_details"
              version="2.22">
        <doc xml:whitespace="preserve">Obtains values that are needed to calculate red pixel values in TrueColor
and DirectColor.  The "mask" is the significant bits within the pixel.
The "shift" is the number of bits left we must shift a primary for it
to be in position (according to the "mask").  Finally, "precision" refers
to how much precision the pixel value contains for a particular primary.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="mask"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     allow-none="1">
            <doc xml:whitespace="preserve">A pointer to a #guint32 to be filled in, or %NULL.</doc>
            <type name="guint32" c:type="guint32*"/>
          </parameter>
          <parameter name="shift"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     allow-none="1">
            <doc xml:whitespace="preserve">A pointer to a #gint to be filled in, or %NULL.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="precision"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     allow-none="1">
            <doc xml:whitespace="preserve">A pointer to a #gint to be filled in, or %NULL.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_screen"
              c:identifier="gdk_visual_get_screen"
              version="2.2">
        <doc xml:whitespace="preserve">Gets the screen to which this visual belongs</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the screen to which this visual belongs.</doc>
          <type name="Screen" c:type="GdkScreen*"/>
        </return-value>
      </method>
      <method name="get_visual_type"
              c:identifier="gdk_visual_get_visual_type"
              version="2.22">
        <doc xml:whitespace="preserve">Returns the type of visual this is (PseudoColor, TrueColor, etc).</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">A #GdkVisualType stating the type of @visual.</doc>
          <type name="VisualType" c:type="GdkVisualType"/>
        </return-value>
      </method>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="type">
        <type name="VisualType" c:type="GdkVisualType"/>
      </field>
      <field name="depth">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="byte_order">
        <type name="ByteOrder" c:type="GdkByteOrder"/>
      </field>
      <field name="colormap_size">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="bits_per_rgb">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="red_mask">
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="red_shift">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="red_prec">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="green_mask">
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="green_shift">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="green_prec">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="blue_mask">
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="blue_shift">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="blue_prec">
        <type name="gint" c:type="gint"/>
      </field>
    </class>
    <record name="VisualClass"
            c:type="GdkVisualClass"
            disguised="1"
            glib:is-gtype-struct-for="Visual">
    </record>
    <enumeration name="VisualType"
                 glib:type-name="GdkVisualType"
                 glib:get-type="gdk_visual_type_get_type"
                 c:type="GdkVisualType">
      <member name="static_gray"
              value="0"
              c:identifier="GDK_VISUAL_STATIC_GRAY"
              glib:nick="static-gray"/>
      <member name="grayscale"
              value="1"
              c:identifier="GDK_VISUAL_GRAYSCALE"
              glib:nick="grayscale"/>
      <member name="static_color"
              value="2"
              c:identifier="GDK_VISUAL_STATIC_COLOR"
              glib:nick="static-color"/>
      <member name="pseudo_color"
              value="3"
              c:identifier="GDK_VISUAL_PSEUDO_COLOR"
              glib:nick="pseudo-color"/>
      <member name="true_color"
              value="4"
              c:identifier="GDK_VISUAL_TRUE_COLOR"
              glib:nick="true-color"/>
      <member name="direct_color"
              value="5"
              c:identifier="GDK_VISUAL_DIRECT_COLOR"
              glib:nick="direct-color"/>
    </enumeration>
    <bitfield name="WMDecoration"
              glib:type-name="GdkWMDecoration"
              glib:get-type="gdk_wm_decoration_get_type"
              c:type="GdkWMDecoration">
      <doc xml:whitespace="preserve">These are hints originally defined by the Motif toolkit.
The window manager can use them when determining how to decorate
the window. The hint must be set before mapping the window.</doc>
      <member name="all"
              value="1"
              c:identifier="GDK_DECOR_ALL"
              glib:nick="all"/>
      <member name="border"
              value="2"
              c:identifier="GDK_DECOR_BORDER"
              glib:nick="border"/>
      <member name="resizeh"
              value="4"
              c:identifier="GDK_DECOR_RESIZEH"
              glib:nick="resizeh"/>
      <member name="title"
              value="8"
              c:identifier="GDK_DECOR_TITLE"
              glib:nick="title"/>
      <member name="menu"
              value="16"
              c:identifier="GDK_DECOR_MENU"
              glib:nick="menu"/>
      <member name="minimize"
              value="32"
              c:identifier="GDK_DECOR_MINIMIZE"
              glib:nick="minimize"/>
      <member name="maximize"
              value="64"
              c:identifier="GDK_DECOR_MAXIMIZE"
              glib:nick="maximize"/>
    </bitfield>
    <bitfield name="WMFunction"
              glib:type-name="GdkWMFunction"
              glib:get-type="gdk_wm_function_get_type"
              c:type="GdkWMFunction">
      <doc xml:whitespace="preserve">These are hints originally defined by the Motif toolkit. The window manager
can use them when determining the functions to offer for the window. The
hint must be set before mapping the window.</doc>
      <member name="all"
              value="1"
              c:identifier="GDK_FUNC_ALL"
              glib:nick="all"/>
      <member name="resize"
              value="2"
              c:identifier="GDK_FUNC_RESIZE"
              glib:nick="resize"/>
      <member name="move"
              value="4"
              c:identifier="GDK_FUNC_MOVE"
              glib:nick="move"/>
      <member name="minimize"
              value="8"
              c:identifier="GDK_FUNC_MINIMIZE"
              glib:nick="minimize"/>
      <member name="maximize"
              value="16"
              c:identifier="GDK_FUNC_MAXIMIZE"
              glib:nick="maximize"/>
      <member name="close"
              value="32"
              c:identifier="GDK_FUNC_CLOSE"
              glib:nick="close"/>
    </bitfield>
    <class name="Window"
           c:symbol-prefix="window_object"
           c:type="GdkWindow"
           parent="Drawable"
           glib:type-name="GdkWindow"
           glib:get-type="gdk_window_object_get_type">
      <doc xml:whitespace="preserve">An opaque structure representing an onscreen drawable. Pointers to structures
of type #GdkPixmap, #GdkBitmap, and #GdkWindow can often be used
interchangeably. The type #GdkDrawable refers generically to any of these
types.</doc>
      <method name="add_filter"
              c:identifier="gdk_window_add_filter"
              introspectable="0">
        <doc xml:whitespace="preserve">Adds an event filter to @window, allowing you to intercept events
before they reach GDK. This is a low-level operation and makes it
easy to break GDK and/or GTK+, so you have to know what you're
doing. Pass %NULL for @window to get all events for all windows,
instead of events for a specific window.
See gdk_display_add_client_message_filter() if you are interested
in X ClientMessage events.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="function" transfer-ownership="none" closure="1">
            <doc xml:whitespace="preserve">filter callback</doc>
            <type name="FilterFunc" c:type="GdkFilterFunc"/>
          </parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:whitespace="preserve">data to pass to filter callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="beep" c:identifier="gdk_window_beep" version="2.12">
        <doc xml:whitespace="preserve">Emits a short beep associated to @window in the appropriate
display, if supported. Otherwise, emits a short beep on
the display just as gdk_display_beep().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="begin_move_drag" c:identifier="gdk_window_begin_move_drag">
        <doc xml:whitespace="preserve">Begins a window move operation (for a toplevel window).  You might
use this function to implement a "window move grip," for
example. The function works best with window managers that support
the &lt;ulink url="http://www.freedesktop.org/Standards/wm-spec"&gt;Extended 
Window Manager Hints&lt;/ulink&gt;, but has a fallback implementation for
other window managers.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="button" transfer-ownership="none">
            <doc xml:whitespace="preserve">the button being used to drag</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="root_x" transfer-ownership="none">
            <doc xml:whitespace="preserve">root window X coordinate of mouse click that began the drag</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="root_y" transfer-ownership="none">
            <doc xml:whitespace="preserve">root window Y coordinate of mouse click that began the drag</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="timestamp" transfer-ownership="none">
            <doc xml:whitespace="preserve">timestamp of mouse click that began the drag</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="begin_paint_rect"
              c:identifier="gdk_window_begin_paint_rect">
        <doc xml:whitespace="preserve">A convenience wrapper around gdk_window_begin_paint_region() which
creates a rectangular region for you. See
gdk_window_begin_paint_region() for details.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="rectangle" transfer-ownership="none">
            <doc xml:whitespace="preserve">rectangle you intend to draw to</doc>
            <type name="Rectangle" c:type="GdkRectangle*"/>
          </parameter>
        </parameters>
      </method>
      <method name="begin_paint_region"
              c:identifier="gdk_window_begin_paint_region">
        <doc xml:whitespace="preserve">Indicates that you are beginning the process of redrawing @region.
A backing store (offscreen buffer) large enough to contain @region
will be created. The backing store will be initialized with the
background color or background pixmap for @window. Then, all
drawing operations performed on @window will be diverted to the
backing store.  When you call gdk_window_end_paint(), the backing
store will be copied to @window, making it visible onscreen. Only
the part of @window contained in @region will be modified; that is,
drawing operations are clipped to @region.
The net result of all this is to remove flicker, because the user
sees the finished product appear all at once when you call
gdk_window_end_paint(). If you draw to @window directly without
calling gdk_window_begin_paint_region(), the user may see flicker
as individual drawing operations are performed in sequence.  The
clipping and background-initializing features of
gdk_window_begin_paint_region() are conveniences for the
programmer, so you can avoid doing that work yourself.
When using GTK+, the widget system automatically places calls to
gdk_window_begin_paint_region() and gdk_window_end_paint() around
emissions of the expose_event signal. That is, if you're writing an
expose event handler, you can assume that the exposed area in
#GdkEventExpose has already been cleared to the window background,
is already set as the clip region, and already has a backing store.
Therefore in most cases, application code need not call
gdk_window_begin_paint_region(). (You can disable the automatic
calls around expose events on a widget-by-widget basis by calling
gtk_widget_set_double_buffered().)
If you call this function multiple times before calling the
matching gdk_window_end_paint(), the backing stores are pushed onto
a stack. gdk_window_end_paint() copies the topmost backing store
onscreen, subtracts the topmost region from all other regions in
the stack, and pops the stack. All drawing operations affect only
the topmost backing store in the stack. One matching call to
gdk_window_end_paint() is required for each call to
gdk_window_begin_paint_region().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="region" transfer-ownership="none">
            <doc xml:whitespace="preserve">region you intend to draw to</doc>
            <type name="cairo.Region" c:type="cairo_region_t*"/>
          </parameter>
        </parameters>
      </method>
      <method name="begin_resize_drag"
              c:identifier="gdk_window_begin_resize_drag">
        <doc xml:whitespace="preserve">Begins a window resize operation (for a toplevel window).
You might use this function to implement a "window resize grip," for
example; in fact #GtkStatusbar uses it. The function works best
with window managers that support the &lt;ulink url="http://www.freedesktop.org/Standards/wm-spec"&gt;Extended Window Manager Hints&lt;/ulink&gt;, but has a 
fallback implementation for other window managers.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="edge" transfer-ownership="none">
            <doc xml:whitespace="preserve">the edge or corner from which the drag is started</doc>
            <type name="WindowEdge" c:type="GdkWindowEdge"/>
          </parameter>
          <parameter name="button" transfer-ownership="none">
            <doc xml:whitespace="preserve">the button being used to drag</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="root_x" transfer-ownership="none">
            <doc xml:whitespace="preserve">root window X coordinate of mouse click that began the drag</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="root_y" transfer-ownership="none">
            <doc xml:whitespace="preserve">root window Y coordinate of mouse click that began the drag</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="timestamp" transfer-ownership="none">
            <doc xml:whitespace="preserve">timestamp of mouse click that began the drag (use gdk_event_get_time())</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="clear" c:identifier="gdk_window_clear">
        <doc xml:whitespace="preserve">Clears an entire @window to the background color or background pixmap.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="clear_area" c:identifier="gdk_window_clear_area">
        <doc xml:whitespace="preserve">Clears an area of @window to the background color or background pixmap.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="x" transfer-ownership="none">
            <doc xml:whitespace="preserve">x coordinate of rectangle to clear</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:whitespace="preserve">y coordinate of rectangle to clear</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:whitespace="preserve">width of rectangle to clear</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:whitespace="preserve">height of rectangle to clear</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="clear_area_e" c:identifier="gdk_window_clear_area_e">
        <doc xml:whitespace="preserve">Like gdk_window_clear_area(), but also generates an expose event for
the cleared area.
This function has a stupid name because it dates back to the mists
time, pre-GDK-1.0.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="x" transfer-ownership="none">
            <doc xml:whitespace="preserve">x coordinate of rectangle to clear</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:whitespace="preserve">y coordinate of rectangle to clear</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:whitespace="preserve">width of rectangle to clear</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:whitespace="preserve">height of rectangle to clear</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="configure_finished"
              c:identifier="gdk_window_configure_finished"
              version="2.6">
        <doc xml:whitespace="preserve">Signal to the window system that the application has finished
handling Configure events it has received. Window Managers can
use this to better synchronize the frame repaint with the
application. GTK+ applications will automatically call this
function when appropriate.
This function can only be called if gdk_window_enable_synchronized_configure()
was called previously.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="coords_from_parent"
              c:identifier="gdk_window_coords_from_parent"
              version="2.22">
        <doc xml:whitespace="preserve">Transforms window coordinates from a parent window to a child
window, where the parent window is the normal parent as returned by
gdk_window_get_parent() for normal windows, and the window's
embedder as returned by gdk_offscreen_window_get_embedder() for
offscreen windows.
For normal windows, calling this function is equivalent to subtracting
the return values of gdk_window_get_position() from the parent coordinates.
For offscreen windows however (which can be arbitrarily transformed),
the coordinates.
You should always use this function when writing generic code that
walks down a window hierarchy.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="parent_x" transfer-ownership="none">
            <doc xml:whitespace="preserve">X coordinate in parent's coordinate system</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="parent_y" transfer-ownership="none">
            <doc xml:whitespace="preserve">Y coordinate in parent's coordinate system</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="x"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     allow-none="1">
            <doc xml:whitespace="preserve">return location for X coordinate in child's coordinate system</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="y"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     allow-none="1">
            <doc xml:whitespace="preserve">return location for Y coordinate in child's coordinate system</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="coords_to_parent"
              c:identifier="gdk_window_coords_to_parent"
              version="2.22">
        <doc xml:whitespace="preserve">Transforms window coordinates from a child window to its parent
window, where the parent window is the normal parent as returned by
gdk_window_get_parent() for normal windows, and the window's
embedder as returned by gdk_offscreen_window_get_embedder() for
offscreen windows.
For normal windows, calling this function is equivalent to adding
the return values of gdk_window_get_position() to the child coordinates.
For offscreen windows however (which can be arbitrarily transformed),
the coordinates.
You should always use this function when writing generic code that
walks up a window hierarchy.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="x" transfer-ownership="none">
            <doc xml:whitespace="preserve">X coordinate in child's coordinate system</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:whitespace="preserve">Y coordinate in child's coordinate system</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="parent_x"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     allow-none="1">
            <doc xml:whitespace="preserve">return location for X coordinate in parent's coordinate system, or %NULL</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="parent_y"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     allow-none="1">
            <doc xml:whitespace="preserve">return location for Y coordinate in parent's coordinate system, or %NULL</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_similar_surface"
              c:identifier="gdk_window_create_similar_surface"
              version="2.22">
        <doc xml:whitespace="preserve">Create a new surface that is as compatible as possible with the
given @window. For example the new surface will have the same
fallback resolution and font options as @window. Generally, the new
surface will also use the same backend as @window, unless that is
not possible for some reason. The type of the returned surface may
be examined with cairo_surface_get_type().
Initially the surface contents are all 0 (transparent if contents
have transparency, black otherwise.)
owns the surface and should call cairo_surface_destroy() when done
with it.
This function always returns a valid pointer, but it will return a
pointer to a "nil" surface if @other is already in an error state
or any other error occurs.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a pointer to the newly allocated surface. The caller</doc>
          <type name="cairo.Surface" c:type="cairo_surface_t*"/>
        </return-value>
        <parameters>
          <parameter name="content" transfer-ownership="none">
            <doc xml:whitespace="preserve">the content for the new surface</doc>
            <type name="cairo.Content" c:type="cairo_content_t"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:whitespace="preserve">width of the new surface</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:whitespace="preserve">height of the new surface</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="deiconify" c:identifier="gdk_window_deiconify">
        <doc xml:whitespace="preserve">Attempt to deiconify (unminimize) @window. On X11 the window manager may
choose to ignore the request to deiconify. When using GTK+,
use gtk_window_deiconify() instead of the #GdkWindow variant. Or better yet,
you probably want to use gtk_window_present(), which raises the window, focuses it,
unminimizes it, and puts it on the current desktop.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="destroy" c:identifier="gdk_window_destroy">
        <doc xml:whitespace="preserve">Destroys the window system resources associated with @window and decrements @window's
reference count. The window system resources for all children of @window are also
destroyed, but the children's reference counts are not decremented.
Note that a window will not be destroyed automatically when its reference count
reaches zero. You must call this function yourself before that happens.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="destroy_notify" c:identifier="gdk_window_destroy_notify">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="enable_synchronized_configure"
              c:identifier="gdk_window_enable_synchronized_configure"
              version="2.6">
        <doc xml:whitespace="preserve">Indicates that the application will cooperate with the window
system in synchronizing the window repaint with the window
manager during resizing operations. After an application calls
this function, it must call gdk_window_configure_finished() every
time it has finished all processing associated with a set of
Configure events. Toplevel GTK+ windows automatically use this
protocol.
On X, calling this function makes @window participate in the
_NET_WM_SYNC_REQUEST window manager protocol.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="end_paint" c:identifier="gdk_window_end_paint">
        <doc xml:whitespace="preserve">Indicates that the backing store created by the most recent call to
gdk_window_begin_paint_region() should be copied onscreen and
deleted, leaving the next-most-recent backing store or no backing
store at all as the active paint region. See
gdk_window_begin_paint_region() for full details. It is an error to
call this function without a matching
gdk_window_begin_paint_region() first.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="ensure_native"
              c:identifier="gdk_window_ensure_native"
              version="2.18">
        <doc xml:whitespace="preserve">Tries to ensure that there is a window-system native window for this
GdkWindow. This may fail in some situations, returning %FALSE.
Offscreen window and children of them can never have native windows.
Some backends may not support native child windows.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the window has a native window, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="flush" c:identifier="gdk_window_flush" version="2.18">
        <doc xml:whitespace="preserve">Flush all outstanding cached operations on a window, leaving the
window in a state which reflects all that has been drawn before.
Gdk uses multiple kinds of caching to get better performance and
nicer drawing. For instance, during exposes all paints to a window
using double buffered rendering are keep on a pixmap until the last
window has been exposed. It also delays window moves/scrolls until
as long as possible until next update to avoid tearing when moving
windows.
Normally this should be completely invisible to applications, as
we automatically flush the windows when required, but this might
be needed if you for instance mix direct native drawing with
gdk drawing. For Gtk widgets that don't use double buffering this
will be called automatically before sending the expose event.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="focus" c:identifier="gdk_window_focus">
        <doc xml:whitespace="preserve">Sets keyboard focus to @window. In most cases, gtk_window_present() 
should be used on a #GtkWindow, rather than calling this function.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="timestamp" transfer-ownership="none">
            <doc xml:whitespace="preserve">timestamp of the event triggering the window focus</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="freeze_toplevel_updates_libgtk_only"
              c:identifier="gdk_window_freeze_toplevel_updates_libgtk_only">
        <doc xml:whitespace="preserve">Temporarily freezes a window and all its descendants such that it won't
receive expose events.  The window will begin receiving expose events
again when gdk_window_thaw_toplevel_updates_libgtk_only() is called. If
gdk_window_freeze_toplevel_updates_libgtk_only()
has been called more than once,
gdk_window_thaw_toplevel_updates_libgtk_only() must be called
an equal number of times to begin processing exposes.
This function is not part of the GDK public API and is only
for use by GTK+.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="freeze_updates" c:identifier="gdk_window_freeze_updates">
        <doc xml:whitespace="preserve">Temporarily freezes a window such that it won't receive expose
events.  The window will begin receiving expose events again when
gdk_window_thaw_updates() is called. If gdk_window_freeze_updates()
has been called more than once, gdk_window_thaw_updates() must be called
an equal number of times to begin processing exposes.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="fullscreen"
              c:identifier="gdk_window_fullscreen"
              version="2.2">
        <doc xml:whitespace="preserve">Moves the window into fullscreen mode. This means the
window covers the entire screen and is above any panels
or task bars.
If the window was already fullscreen, then this function does nothing.
On X11, asks the window manager to put @window in a fullscreen
state, if the window manager supports this operation. Not all
window managers support this, and some deliberately ignore it or
don't have a concept of "fullscreen"; so you can't rely on the
fullscreenification actually happening. But it will happen with
most standard window managers, and GDK makes a best effort to get
it to happen.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="geometry_changed"
              c:identifier="gdk_window_geometry_changed"
              version="2.18">
        <doc xml:whitespace="preserve">This function informs GDK that the geometry of an embedded
offscreen window has changed. This is necessary for GDK to keep
track of which offscreen window the pointer is in.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="get_accept_focus"
              c:identifier="gdk_window_get_accept_focus"
              version="2.22">
        <doc xml:whitespace="preserve">Determines whether or not the desktop environment shuld be hinted that
the window does not want to receive input focus.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">whether or not the window should receive input focus.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_background_pattern"
              c:identifier="gdk_window_get_background_pattern"
              version="2.22">
        <doc xml:whitespace="preserve">Gets the pattern used to clear the background on @window. If @window
does not have its own background and reuses the parent's, %NULL is
returned and you'll have to query it yourself.
parent's background.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">The pattern to use for the background or %NULL to use the</doc>
          <type name="cairo.Pattern" c:type="cairo_pattern_t*"/>
        </return-value>
      </method>
      <method name="get_children" c:identifier="gdk_window_get_children">
        <doc xml:whitespace="preserve">Gets the list of children of @window known to GDK.
This function only returns children created via GDK,
so for example it's useless when used with the root window;
it only returns windows an application created itself.
The returned list must be freed, but the elements in the
list need not be.
list of child windows inside @window</doc>
        <return-value transfer-ownership="container">
          <type name="GLib.List" c:type="GList*">
            <type name="Window"/>
          </type>
        </return-value>
      </method>
      <method name="get_composited"
              c:identifier="gdk_window_get_composited"
              version="2.22">
        <doc xml:whitespace="preserve">Determines whether @window is composited.
See gdk_window_set_composited().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the window is composited.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_cursor"
              c:identifier="gdk_window_get_cursor"
              version="2.18">
        <doc xml:whitespace="preserve">Retrieves a #GdkCursor pointer for the cursor currently set on the
specified #GdkWindow, or %NULL.  If the return value is %NULL then
there is no custom cursor set on the specified window, and it is
using the cursor for its parent window.
by the #GdkWindow and should not be unreferenced directly. Use
gdk_window_set_cursor() to unset the cursor of the window</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a #GdkCursor, or %NULL. The returned object is owned</doc>
          <type name="Cursor" c:type="GdkCursor*"/>
        </return-value>
      </method>
      <method name="get_decorations" c:identifier="gdk_window_get_decorations">
        <doc xml:whitespace="preserve">Returns the decorations set on the GdkWindow with
gdk_window_set_decorations().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the window has decorations set, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="decorations" transfer-ownership="none">
            <doc xml:whitespace="preserve">The window decorations will be written here</doc>
            <type name="WMDecoration" c:type="GdkWMDecoration*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_device_cursor"
              c:identifier="gdk_window_get_device_cursor"
              version="3.0">
        <doc xml:whitespace="preserve">Retrieves a #GdkCursor pointer for the @device currently set on the
specified #GdkWindow, or %NULL.  If the return value is %NULL then
there is no custom cursor set on the specified window, and it is
using the cursor for its parent window.
by the #GdkWindow and should not be unreferenced directly. Use
gdk_window_set_cursor() to unset the cursor of the window</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a #GdkCursor, or %NULL. The returned object is owned</doc>
          <type name="Cursor" c:type="GdkCursor*"/>
        </return-value>
        <parameters>
          <parameter name="device" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GdkDevice.</doc>
            <type name="Device" c:type="GdkDevice*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_device_events"
              c:identifier="gdk_window_get_device_events"
              version="3.0">
        <doc xml:whitespace="preserve">Returns the event mask for @window corresponding to an specific device.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">device event mask for @window</doc>
          <type name="EventMask" c:type="GdkEventMask"/>
        </return-value>
        <parameters>
          <parameter name="device" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GdkDevice.</doc>
            <type name="Device" c:type="GdkDevice*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_device_position"
              c:identifier="gdk_window_get_device_position"
              version="3.0">
        <doc xml:whitespace="preserve">Obtains the current device position and modifier state.
The position is given in coordinates relative to the upper left
corner of @window.
gdk_display_get_window_at_device_position()), or %NULL if the
window is not known to GDK.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The window underneath @device (as with</doc>
          <type name="Window" c:type="GdkWindow*"/>
        </return-value>
        <parameters>
          <parameter name="device" transfer-ownership="none">
            <doc xml:whitespace="preserve">#GdkDevice to query to.</doc>
            <type name="Device" c:type="GdkDevice*"/>
          </parameter>
          <parameter name="x"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     allow-none="1">
            <doc xml:whitespace="preserve">return location for the X coordinate of @device, or %NULL.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="y"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     allow-none="1">
            <doc xml:whitespace="preserve">return location for the Y coordinate of @device, or %NULL.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="mask"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">return location for the modifier mask, or %NULL.</doc>
            <type name="ModifierType" c:type="GdkModifierType*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_effective_parent"
              c:identifier="gdk_window_get_effective_parent"
              version="2.22">
        <doc xml:whitespace="preserve">Obtains the parent of @window, as known to GDK. Works like
gdk_window_get_parent() for normal windows, but returns the
window's embedder for offscreen windows.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">effective parent of @window</doc>
          <type name="Window" c:type="GdkWindow*"/>
        </return-value>
      </method>
      <method name="get_effective_toplevel"
              c:identifier="gdk_window_get_effective_toplevel"
              version="2.22">
        <doc xml:whitespace="preserve">Gets the toplevel window that's an ancestor of @window.
Works like gdk_window_get_toplevel(), but treats an offscreen window's
embedder as its parent, using gdk_window_get_effective_parent().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the effective toplevel window containing @window</doc>
          <type name="Window" c:type="GdkWindow*"/>
        </return-value>
      </method>
      <method name="get_events" c:identifier="gdk_window_get_events">
        <doc xml:whitespace="preserve">Gets the event mask for @window for all master input devices. See
gdk_window_set_events().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">event mask for @window</doc>
          <type name="EventMask" c:type="GdkEventMask"/>
        </return-value>
      </method>
      <method name="get_focus_on_map"
              c:identifier="gdk_window_get_focus_on_map"
              version="2.22">
        <doc xml:whitespace="preserve">Determines whether or not the desktop environment should be hinted that the
window does not want to receive input focus when it is mapped.
it is mapped.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">whether or not the window wants to receive input focus when</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_frame_extents"
              c:identifier="gdk_window_get_frame_extents">
        <doc xml:whitespace="preserve">Obtains the bounding box of the window, including window manager
titlebar/borders if any. The frame position is given in root window
coordinates. To get the position of the window itself (rather than
the frame) in root window coordinates, use gdk_window_get_origin().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="rect" transfer-ownership="none">
            <doc xml:whitespace="preserve">rectangle to fill with bounding box of the window frame</doc>
            <type name="Rectangle" c:type="GdkRectangle*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_geometry" c:identifier="gdk_window_get_geometry">
        <doc xml:whitespace="preserve">Any of the return location arguments to this function may be %NULL,
if you aren't interested in getting the value of that field.
The X and Y coordinates returned are relative to the parent window
of @window, which for toplevels usually means relative to the
window decorations (titlebar, etc.) rather than relative to the
root window (screen-size background window).
On the X11 platform, the geometry is obtained from the X server,
so reflects the latest position of @window; this may be out-of-sync
with the position of @window delivered in the most-recently-processed
#GdkEventConfigure. gdk_window_get_position() in contrast gets the
position from the most recent configure event.
&lt;note&gt;
If @window is not a toplevel, it is &lt;emphasis&gt;much&lt;/emphasis&gt; better
to call gdk_window_get_position() and gdk_drawable_get_size() instead,
because it avoids the roundtrip to the X server and because
gdk_drawable_get_size() supports the full 32-bit coordinate space,
whereas gdk_window_get_geometry() is restricted to the 16-bit
coordinates of X11.
&lt;/note&gt;</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="x" transfer-ownership="none">
            <doc xml:whitespace="preserve">return location for X coordinate of window (relative to its parent)</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:whitespace="preserve">return location for Y coordinate of window (relative to its parent)</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:whitespace="preserve">return location for width of window</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:whitespace="preserve">return location for height of window</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="depth" transfer-ownership="none">
            <doc xml:whitespace="preserve">return location for bit depth of window</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_group"
              c:identifier="gdk_window_get_group"
              version="2.4">
        <doc xml:whitespace="preserve">Returns the group leader window for @window. See gdk_window_set_group().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the group leader window for @window</doc>
          <type name="Window" c:type="GdkWindow*"/>
        </return-value>
      </method>
      <method name="get_internal_paint_info"
              c:identifier="gdk_window_get_internal_paint_info">
        <doc xml:whitespace="preserve">If you bypass the GDK layer and use windowing system primitives to
draw directly onto a #GdkWindow, then you need to deal with two
system coordinates, and GDK may have redirected drawing to a offscreen
pixmap as the result of a gdk_window_begin_paint_region() calls.
This function allows retrieving the information you need to compensate
for these effects.
This function exposes details of the GDK implementation, and is thus
likely to change in future releases of GDK.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="real_drawable"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:whitespace="preserve">location to store the drawable to which drawing should be done.</doc>
            <type name="Drawable" c:type="GdkDrawable**"/>
          </parameter>
          <parameter name="x_offset"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:whitespace="preserve">location to store the X offset between coordinates in @window, and the underlying window system primitive coordinates for *@real_drawable.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="y_offset"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:whitespace="preserve">location to store the Y offset between coordinates in @window, and the underlying window system primitive coordinates for *@real_drawable.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_modal_hint"
              c:identifier="gdk_window_get_modal_hint"
              version="2.22">
        <doc xml:whitespace="preserve">Determines whether or not the window manager is hinted that @window
has modal behaviour.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">whether or not the window has the modal hint set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_origin" c:identifier="gdk_window_get_origin">
        <doc xml:whitespace="preserve">Obtains the position of a window in root window coordinates.
(Compare with gdk_window_get_position() and
gdk_window_get_geometry() which return the position of a window
relative to its parent window.)</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">not meaningful, ignore</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <parameter name="x" transfer-ownership="none">
            <doc xml:whitespace="preserve">return location for X coordinate</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:whitespace="preserve">return location for Y coordinate</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_parent" c:identifier="gdk_window_get_parent">
        <doc xml:whitespace="preserve">Obtains the parent of @window, as known to GDK. Does not query the
X server; thus this returns the parent as passed to gdk_window_new(),
not the actual parent. This should never matter unless you're using
Xlib calls mixed with GDK calls on the X11 platform. It may also
matter for toplevel windows, because the window manager may choose
to reparent them.
Note that you should use gdk_window_get_effective_parent() when
writing generic code that walks up a window hierarchy, because
gdk_window_get_parent() will most likely not do what you expect if
there are offscreen windows in the hierarchy.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">parent of @window</doc>
          <type name="Window" c:type="GdkWindow*"/>
        </return-value>
      </method>
      <method name="get_pointer"
              c:identifier="gdk_window_get_pointer"
              deprecated="Use gdk_window_get_device_position() instead."
              deprecated-version="3.0">
        <doc xml:whitespace="preserve">Obtains the current pointer position and modifier state.
The position is given in coordinates relative to the upper left
corner of @window.
gdk_window_at_pointer()), or %NULL if the window containing the
pointer isn't known to GDK</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the window containing the pointer (as with</doc>
          <type name="Window" c:type="GdkWindow*"/>
        </return-value>
        <parameters>
          <parameter name="x"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     allow-none="1">
            <doc xml:whitespace="preserve">return location for X coordinate of pointer or %NULL to not return the X coordinate</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="y"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     allow-none="1">
            <doc xml:whitespace="preserve">return location for Y coordinate of pointer or %NULL to not return the Y coordinate</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="mask"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">return location for modifier mask or %NULL to not return the modifier mask</doc>
            <type name="ModifierType" c:type="GdkModifierType*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_position" c:identifier="gdk_window_get_position">
        <doc xml:whitespace="preserve">Obtains the position of the window as reported in the
most-recently-processed #GdkEventConfigure. Contrast with
gdk_window_get_geometry() which queries the X server for the
current window position, regardless of which events have been
received or processed.
The position coordinates are relative to the window's parent window.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="x" transfer-ownership="none">
            <doc xml:whitespace="preserve">X coordinate of window</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:whitespace="preserve">Y coordinate of window</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_root_coords"
              c:identifier="gdk_window_get_root_coords"
              version="2.18">
        <doc xml:whitespace="preserve">Obtains the position of a window position in root
window coordinates. This is similar to
gdk_window_get_origin() but allows you go pass
in any position in the window, not just the origin.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="x" transfer-ownership="none">
            <doc xml:whitespace="preserve">X coordinate in window</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:whitespace="preserve">Y coordinate in window</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="root_x" transfer-ownership="none">
            <doc xml:whitespace="preserve">return location for X coordinate</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="root_y" transfer-ownership="none">
            <doc xml:whitespace="preserve">return location for Y coordinate</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_root_origin" c:identifier="gdk_window_get_root_origin">
        <doc xml:whitespace="preserve">Obtains the top-left corner of the window manager frame in root
window coordinates.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="x" transfer-ownership="none">
            <doc xml:whitespace="preserve">return location for X position of window frame</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:whitespace="preserve">return location for Y position of window frame</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_state" c:identifier="gdk_window_get_state">
        <doc xml:whitespace="preserve">Gets the bitwise OR of the currently active window state flags,
from the #GdkWindowState enumeration.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">window state bitfield</doc>
          <type name="WindowState" c:type="GdkWindowState"/>
        </return-value>
      </method>
      <method name="get_support_multidevice"
              c:identifier="gdk_window_get_support_multidevice"
              version="3.0">
        <doc xml:whitespace="preserve">Returns %TRUE if the window is aware of the existence of multiple
devices.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the window handles multidevice features.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_toplevel" c:identifier="gdk_window_get_toplevel">
        <doc xml:whitespace="preserve">Gets the toplevel window that's an ancestor of @window.
Any window type but %GDK_WINDOW_CHILD is considered a
toplevel window, as is a %GDK_WINDOW_CHILD window that
has a root window as parent.
Note that you should use gdk_window_get_effective_toplevel() when
you want to get to a window's toplevel as seen on screen, because
gdk_window_get_toplevel() will most likely not do what you expect
if there are offscreen windows in the hierarchy.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the toplevel window containing @window</doc>
          <type name="Window" c:type="GdkWindow*"/>
        </return-value>
      </method>
      <method name="get_type_hint"
              c:identifier="gdk_window_get_type_hint"
              version="2.10">
        <doc xml:whitespace="preserve">This function returns the type hint set for a window.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The type hint set for @window</doc>
          <type name="WindowTypeHint" c:type="GdkWindowTypeHint"/>
        </return-value>
      </method>
      <method name="get_update_area" c:identifier="gdk_window_get_update_area">
        <doc xml:whitespace="preserve">Transfers ownership of the update area from @window to the caller
of the function. That is, after calling this function, @window will
no longer have an invalid/dirty region; the update area is removed
from @window and handed to you. If a window has no update area,
gdk_window_get_update_area() returns %NULL. You are responsible for
calling cairo_region_destroy() on the returned region if it's non-%NULL.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the update area for @window</doc>
          <type name="cairo.Region" c:type="cairo_region_t*"/>
        </return-value>
      </method>
      <method name="get_user_data" c:identifier="gdk_window_get_user_data">
        <doc xml:whitespace="preserve">Retrieves the user data for @window, which is normally the widget
that @window belongs to. See gdk_window_set_user_data().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="data" transfer-ownership="none">
            <doc xml:whitespace="preserve">return location for user data</doc>
            <type name="gpointer" c:type="gpointer*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_window_type" c:identifier="gdk_window_get_window_type">
        <doc xml:whitespace="preserve">Gets the type of the window. See #GdkWindowType.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">type of window</doc>
          <type name="WindowType" c:type="GdkWindowType"/>
        </return-value>
      </method>
      <method name="has_native"
              c:identifier="gdk_window_has_native"
              version="2.22">
        <doc xml:whitespace="preserve">Checks whether the window has a native window or not. Note that
you can use gdk_window_ensure_native() if a native window is needed.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the %window has a native window, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="hide" c:identifier="gdk_window_hide">
        <doc xml:whitespace="preserve">For toplevel windows, withdraws them, so they will no longer be
known to the window manager; for all windows, unmaps them, so
they won't be displayed. Normally done automatically as
part of gtk_widget_hide().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="iconify" c:identifier="gdk_window_iconify">
        <doc xml:whitespace="preserve">Asks to iconify (minimize) @window. The window manager may choose
to ignore the request, but normally will honor it. Using
gtk_window_iconify() is preferred, if you have a #GtkWindow widget.
This function only makes sense when @window is a toplevel window.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="input_shape_combine_mask"
              c:identifier="gdk_window_input_shape_combine_mask"
              version="2.10">
        <doc xml:whitespace="preserve">Like gdk_window_shape_combine_mask(), but the shape applies
only to event handling. Mouse events which happen while
the pointer position corresponds to an unset bit in the
mask will be passed on the window below @window.
An input shape is typically used with RGBA windows.
The alpha channel of the window defines which pixels are
invisible and allows for nicely antialiased borders,
and the input shape controls where the window is
"clickable".
On the X11 platform, this requires version 1.1 of the
shape extension.
On the Win32 platform, this functionality is not present and the
function does nothing.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="mask" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">shape mask, or %NULL</doc>
            <type name="Bitmap" c:type="GdkBitmap*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:whitespace="preserve">X position of shape mask with respect to @window</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:whitespace="preserve">Y position of shape mask with respect to @window</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="input_shape_combine_region"
              c:identifier="gdk_window_input_shape_combine_region"
              version="2.10">
        <doc xml:whitespace="preserve">Like gdk_window_shape_combine_region(), but the shape applies
only to event handling. Mouse events which happen while
the pointer position corresponds to an unset bit in the
mask will be passed on the window below @window.
An input shape is typically used with RGBA windows.
The alpha channel of the window defines which pixels are
invisible and allows for nicely antialiased borders,
and the input shape controls where the window is
"clickable".
On the X11 platform, this requires version 1.1 of the
shape extension.
On the Win32 platform, this functionality is not present and the
function does nothing.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="shape_region" transfer-ownership="none">
            <doc xml:whitespace="preserve">region of window to be non-transparent</doc>
            <type name="cairo.Region" c:type="cairo_region_t*"/>
          </parameter>
          <parameter name="offset_x" transfer-ownership="none">
            <doc xml:whitespace="preserve">X position of @shape_region in @window coordinates</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="offset_y" transfer-ownership="none">
            <doc xml:whitespace="preserve">Y position of @shape_region in @window coordinates</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="invalidate_maybe_recurse"
              c:identifier="gdk_window_invalidate_maybe_recurse">
        <doc xml:whitespace="preserve">Adds @region to the update area for @window. The update area is the
region that needs to be redrawn, or "dirty region." The call
gdk_window_process_updates() sends one or more expose events to the
window, which together cover the entire update area. An
application would normally redraw the contents of @window in
response to those expose events.
GDK will call gdk_window_process_all_updates() on your behalf
whenever your program returns to the main loop and becomes idle, so
normally there's no need to do that manually, you just need to
invalidate regions that you know should be redrawn.
The @child_func parameter controls whether the region of
each child window that intersects @region will also be invalidated.
Only children for which @child_func returns TRUE will have the area
invalidated.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="region" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #cairo_region_t</doc>
            <type name="cairo.Region" c:type="cairo_region_t*"/>
          </parameter>
          <parameter name="child_func" transfer-ownership="none">
            <doc xml:whitespace="preserve">function to use to decide if to recurse to a child, %NULL means never recurse.</doc>
            <type name="gpointer" c:type="gpointer*"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:whitespace="preserve">data passed to @child_func</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="invalidate_rect" c:identifier="gdk_window_invalidate_rect">
        <doc xml:whitespace="preserve">A convenience wrapper around gdk_window_invalidate_region() which
invalidates a rectangular region. See
gdk_window_invalidate_region() for details.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="rect" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">rectangle to invalidate or %NULL to invalidate the whole window</doc>
            <type name="Rectangle" c:type="GdkRectangle*"/>
          </parameter>
          <parameter name="invalidate_children" transfer-ownership="none">
            <doc xml:whitespace="preserve">whether to also invalidate child windows</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="invalidate_region"
              c:identifier="gdk_window_invalidate_region">
        <doc xml:whitespace="preserve">Adds @region to the update area for @window. The update area is the
region that needs to be redrawn, or "dirty region." The call
gdk_window_process_updates() sends one or more expose events to the
window, which together cover the entire update area. An
application would normally redraw the contents of @window in
response to those expose events.
GDK will call gdk_window_process_all_updates() on your behalf
whenever your program returns to the main loop and becomes idle, so
normally there's no need to do that manually, you just need to
invalidate regions that you know should be redrawn.
The @invalidate_children parameter controls whether the region of
each child window that intersects @region will also be invalidated.
If %FALSE, then the update area for child windows will remain
unaffected. See gdk_window_invalidate_maybe_recurse if you need
fine grained control over which children are invalidated.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="region" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #cairo_region_t</doc>
            <type name="cairo.Region" c:type="cairo_region_t*"/>
          </parameter>
          <parameter name="invalidate_children" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE to also invalidate child windows</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_destroyed"
              c:identifier="gdk_window_is_destroyed"
              version="2.18">
        <doc xml:whitespace="preserve">Check to see if a window is destroyed..</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the window is destroyed</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="is_input_only"
              c:identifier="gdk_window_is_input_only"
              version="2.22">
        <doc xml:whitespace="preserve">Determines whether or not the window is an input only window.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if @window is input only</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="is_shaped"
              c:identifier="gdk_window_is_shaped"
              version="2.22">
        <doc xml:whitespace="preserve">Determines whether or not the window is shaped.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if @window is shaped</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="is_viewable" c:identifier="gdk_window_is_viewable">
        <doc xml:whitespace="preserve">Check if the window and all ancestors of the window are
mapped. (This is not necessarily "viewable" in the X sense, since
we only check as far as we have GDK window parents, not to the root
window.)</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the window is viewable</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="is_visible" c:identifier="gdk_window_is_visible">
        <doc xml:whitespace="preserve">Checks whether the window has been mapped (with gdk_window_show() or
gdk_window_show_unraised()).</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the window is mapped</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="lower" c:identifier="gdk_window_lower">
        <doc xml:whitespace="preserve">Lowers @window to the bottom of the Z-order (stacking order), so that
other windows with the same parent window appear above @window.
This is true whether or not the other windows are visible.
If @window is a toplevel, the window manager may choose to deny the
request to move the window in the Z-order, gdk_window_lower() only
requests the restack, does not guarantee it.
Note that gdk_window_show() raises the window again, so don't call this
function before gdk_window_show(). (Try gdk_window_show_unraised().)</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="maximize" c:identifier="gdk_window_maximize">
        <doc xml:whitespace="preserve">Maximizes the window. If the window was already maximized, then
this function does nothing.
On X11, asks the window manager to maximize @window, if the window
manager supports this operation. Not all window managers support
this, and some deliberately ignore it or don't have a concept of
"maximized"; so you can't rely on the maximization actually
happening. But it will happen with most standard window managers,
and GDK makes a best effort to get it to happen.
On Windows, reliably maximizes the window.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="merge_child_input_shapes"
              c:identifier="gdk_window_merge_child_input_shapes"
              version="2.10">
        <doc xml:whitespace="preserve">Merges the input shape masks for any child windows into the
input shape mask for @window. i.e. the union of all input masks
for @window and its children will become the new input mask
for @window. See gdk_window_input_shape_combine_mask().
This function is distinct from gdk_window_set_child_input_shapes()
because it includes @window's input shape mask in the set of
shapes to be merged.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="merge_child_shapes"
              c:identifier="gdk_window_merge_child_shapes">
        <doc xml:whitespace="preserve">Merges the shape masks for any child windows into the
shape mask for @window. i.e. the union of all masks
for @window and its children will become the new mask
for @window. See gdk_window_shape_combine_mask().
This function is distinct from gdk_window_set_child_shapes()
because it includes @window's shape mask in the set of shapes to
be merged.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="move" c:identifier="gdk_window_move">
        <doc xml:whitespace="preserve">Repositions a window relative to its parent window.
For toplevel windows, window managers may ignore or modify the move;
you should probably use gtk_window_move() on a #GtkWindow widget
anyway, instead of using GDK functions. For child windows,
the move will reliably succeed.
If you're also planning to resize the window, use gdk_window_move_resize()
to both move and resize simultaneously, for a nicer visual effect.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="x" transfer-ownership="none">
            <doc xml:whitespace="preserve">X coordinate relative to window's parent</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:whitespace="preserve">Y coordinate relative to window's parent</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="move_region"
              c:identifier="gdk_window_move_region"
              version="2.8">
        <doc xml:whitespace="preserve">Move the part of @window indicated by @region by @dy pixels in the Y
direction and @dx pixels in the X direction. The portions of @region
that not covered by the new position of @region are invalidated.
Child windows are not moved.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="region" transfer-ownership="none">
            <doc xml:whitespace="preserve">The #cairo_region_t to move</doc>
            <type name="cairo.Region" c:type="cairo_region_t*"/>
          </parameter>
          <parameter name="dx" transfer-ownership="none">
            <doc xml:whitespace="preserve">Amount to move in the X direction</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="dy" transfer-ownership="none">
            <doc xml:whitespace="preserve">Amount to move in the Y direction</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="move_resize" c:identifier="gdk_window_move_resize">
        <doc xml:whitespace="preserve">Equivalent to calling gdk_window_move() and gdk_window_resize(),
except that both operations are performed at once, avoiding strange
visual effects. (i.e. the user may be able to see the window first
move, then resize, if you don't use gdk_window_move_resize().)</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="x" transfer-ownership="none">
            <doc xml:whitespace="preserve">new X position relative to window's parent</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:whitespace="preserve">new Y position relative to window's parent</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:whitespace="preserve">new width</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:whitespace="preserve">new height</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="new" c:identifier="gdk_window_new">
        <doc xml:whitespace="preserve">Creates a new #GdkWindow using the attributes from
display, @parent must be specified.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the new #GdkWindow</doc>
          <type name="Window" c:type="GdkWindow*"/>
        </return-value>
        <parameters>
          <parameter name="attributes" transfer-ownership="none">
            <doc xml:whitespace="preserve">attributes of the new window</doc>
            <type name="WindowAttr" c:type="GdkWindowAttr*"/>
          </parameter>
          <parameter name="attributes_mask" transfer-ownership="none">
            <doc xml:whitespace="preserve">mask indicating which fields in @attributes are valid</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="peek_children" c:identifier="gdk_window_peek_children">
        <doc xml:whitespace="preserve">Like gdk_window_get_children(), but does not copy the list of
children, so the list does not need to be freed.
a reference to the list of child windows in @window</doc>
        <return-value transfer-ownership="none">
          <type name="GLib.List" c:type="GList*">
            <type name="Window"/>
          </type>
        </return-value>
      </method>
      <method name="process_updates" c:identifier="gdk_window_process_updates">
        <doc xml:whitespace="preserve">Sends one or more expose events to @window. The areas in each
expose event will cover the entire update area for the window (see
gdk_window_invalidate_region() for details). Normally GDK calls
gdk_window_process_all_updates() on your behalf, so there's no
need to call this function unless you want to force expose events
to be delivered immediately and synchronously (vs. the usual
case, where GDK delivers them in an idle handler). Occasionally
this is useful to produce nicer scrolling behavior, for example.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="update_children" transfer-ownership="none">
            <doc xml:whitespace="preserve">whether to also process updates for child windows</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="raise" c:identifier="gdk_window_raise">
        <doc xml:whitespace="preserve">Raises @window to the top of the Z-order (stacking order), so that
other windows with the same parent window appear below @window.
This is true whether or not the windows are visible.
If @window is a toplevel, the window manager may choose to deny the
request to move the window in the Z-order, gdk_window_raise() only
requests the restack, does not guarantee it.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="redirect_to_drawable"
              c:identifier="gdk_window_redirect_to_drawable"
              version="2.14">
        <doc xml:whitespace="preserve">Redirects drawing into @window so that drawing to the
window in the rectangle specified by @src_x, @src_y,
Only drawing between gdk_window_begin_paint_region() or
gdk_window_begin_paint_rect() and gdk_window_end_paint() is
redirected.
Redirection is active until gdk_window_remove_redirection()
is called.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="drawable" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GdkDrawable</doc>
            <type name="Drawable" c:type="GdkDrawable*"/>
          </parameter>
          <parameter name="src_x" transfer-ownership="none">
            <doc xml:whitespace="preserve">x position in @window</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="src_y" transfer-ownership="none">
            <doc xml:whitespace="preserve">y position in @window</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="dest_x" transfer-ownership="none">
            <doc xml:whitespace="preserve">x position in @drawable</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="dest_y" transfer-ownership="none">
            <doc xml:whitespace="preserve">y position in @drawable</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:whitespace="preserve">width of redirection, or -1 to use the width of @window</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:whitespace="preserve">height of redirection or -1 to use the height of @window</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="register_dnd" c:identifier="gdk_window_register_dnd">
        <doc xml:whitespace="preserve">Registers a window as a potential drop destination.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="remove_filter"
              c:identifier="gdk_window_remove_filter"
              introspectable="0">
        <doc xml:whitespace="preserve">Remove a filter previously added with gdk_window_add_filter().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="function" transfer-ownership="none" closure="1">
            <doc xml:whitespace="preserve">previously-added filter function</doc>
            <type name="FilterFunc" c:type="GdkFilterFunc"/>
          </parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:whitespace="preserve">user data for previously-added filter function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_redirection"
              c:identifier="gdk_window_remove_redirection"
              version="2.14">
        <doc xml:whitespace="preserve">Removes any active redirection started by
gdk_window_redirect_to_drawable().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="reparent" c:identifier="gdk_window_reparent">
        <doc xml:whitespace="preserve">Reparents @window into the given @new_parent. The window being
reparented will be unmapped as a side effect.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="new_parent" transfer-ownership="none">
            <doc xml:whitespace="preserve">new parent to move @window into</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:whitespace="preserve">X location inside the new parent</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:whitespace="preserve">Y location inside the new parent</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="resize" c:identifier="gdk_window_resize">
        <doc xml:whitespace="preserve">Resizes @window; for toplevel windows, asks the window manager to resize
the window. The window manager may not allow the resize. When using GTK+,
use gtk_window_resize() instead of this low-level GDK function.
Windows may not be resized below 1x1.
If you're also planning to move the window, use gdk_window_move_resize()
to both move and resize simultaneously, for a nicer visual effect.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="width" transfer-ownership="none">
            <doc xml:whitespace="preserve">new width of the window</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:whitespace="preserve">new height of the window</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="restack" c:identifier="gdk_window_restack" version="2.18">
        <doc xml:whitespace="preserve">Changes the position of  @window in the Z-order (stacking order), so that
it is above @sibling (if @above is %TRUE) or below @sibling (if @above is
%FALSE).
If @sibling is %NULL, then this either raises (if @above is %TRUE) or
lowers the window.
If @window is a toplevel, the window manager may choose to deny the
request to move the window in the Z-order, gdk_window_restack() only
requests the restack, does not guarantee it.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="sibling" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">a #GdkWindow that is a sibling of @window, or %NULL</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </parameter>
          <parameter name="above" transfer-ownership="none">
            <doc xml:whitespace="preserve">a boolean</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="scroll" c:identifier="gdk_window_scroll">
        <doc xml:whitespace="preserve">Scroll the contents of @window, both pixels and children, by the
given amount. @window itself does not move. Portions of the window
that the scroll operation brings in from offscreen areas are
invalidated. The invalidated region may be bigger than what would
strictly be necessary.
For X11, a minimum area will be invalidated if the window has no
subwindows, or if the edges of the window's parent do not extend
beyond the edges of the window. In other cases, a multi-step process
is used to scroll the window which may produce temporary visual
artifacts and unnecessary invalidations.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="dx" transfer-ownership="none">
            <doc xml:whitespace="preserve">Amount to scroll in the X direction</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="dy" transfer-ownership="none">
            <doc xml:whitespace="preserve">Amount to scroll in the Y direction</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_accept_focus"
              c:identifier="gdk_window_set_accept_focus"
              version="2.4 ">
        <doc xml:whitespace="preserve">Setting @accept_focus to %FALSE hints the desktop environment that the
window doesn't want to receive input focus. 
On X, it is the responsibility of the window manager to interpret this 
hint. ICCCM-compliant window manager usually respect it.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="accept_focus" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE if the window should receive input focus</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_back_pixmap" c:identifier="gdk_window_set_back_pixmap">
        <doc xml:whitespace="preserve">Sets the background pixmap of @window. May also be used to set a
background of "None" on @window, by setting a background pixmap
of %NULL.
A background pixmap will be tiled, positioning the first tile at
the origin of @window, or if @parent_relative is %TRUE, the tiling
will be done based on the origin of the parent window (useful to
align tiles in a parent with tiles in a child).
A background pixmap of %NULL means that the window will have no
background.  A window with no background will never have its
background filled by the windowing system, instead the window will
contain whatever pixels were already in the corresponding area of
the display.
The windowing system will normally fill a window with its background
when the window is obscured then exposed, and when you call
gdk_window_clear().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="pixmap" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">a #GdkPixmap, or %NULL</doc>
            <type name="Pixmap" c:type="GdkPixmap*"/>
          </parameter>
          <parameter name="parent_relative" transfer-ownership="none">
            <doc xml:whitespace="preserve">whether the tiling origin is at the origin of</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_background" c:identifier="gdk_window_set_background">
        <doc xml:whitespace="preserve">Sets the background color of @window. (However, when using GTK+,
set the background of a widget with gtk_widget_modify_bg() - if
you're an application - or gtk_style_set_background() - if you're
implementing a custom widget.)
See also gdk_window_set_background_pixmap().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="color" transfer-ownership="none">
            <doc xml:whitespace="preserve">an allocated #GdkColor</doc>
            <type name="Color" c:type="GdkColor*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_child_input_shapes"
              c:identifier="gdk_window_set_child_input_shapes"
              version="2.10">
        <doc xml:whitespace="preserve">Sets the input shape mask of @window to the union of input shape masks
for all children of @window, ignoring the input shape mask of @window
itself. Contrast with gdk_window_merge_child_input_shapes() which includes
the input shape mask of @window in the masks to be merged.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="set_child_shapes"
              c:identifier="gdk_window_set_child_shapes">
        <doc xml:whitespace="preserve">Sets the shape mask of @window to the union of shape masks
for all children of @window, ignoring the shape mask of @window
itself. Contrast with gdk_window_merge_child_shapes() which includes
the shape mask of @window in the masks to be merged.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="set_composited"
              c:identifier="gdk_window_set_composited"
              version="2.12">
        <doc xml:whitespace="preserve">Sets a #GdkWindow as composited, or unsets it. Composited
windows do not automatically have their contents drawn to
the screen. Drawing is redirected to an offscreen buffer
and an expose event is emitted on the parent of the composited
window. It is the responsibility of the parent's expose handler
to manually merge the off-screen content onto the screen in
whatever way it sees fit. See &lt;xref linkend="composited-window-example"/&gt;
for an example.
It only makes sense for child windows to be composited; see
gdk_window_set_opacity() if you need translucent toplevel
windows.
An additional effect of this call is that the area of this
window is no longer clipped from regions marked for
invalidation on its parent. Draws done on the parent
window are also no longer clipped by the child.
This call is only supported on some systems (currently,
only X11 with new enough Xcomposite and Xdamage extensions).
You must call gdk_display_supports_composite() to check if
setting a window as composited is supported before
attempting to do so.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="composited" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE to set the window as composited</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_cursor" c:identifier="gdk_window_set_cursor">
        <doc xml:whitespace="preserve">Sets the default mouse pointer for a #GdkWindow. Use gdk_cursor_new_for_display()
or gdk_cursor_new_from_pixmap() to create the cursor. To make the cursor
invisible, use %GDK_BLANK_CURSOR. Passing %NULL for the @cursor argument
to gdk_window_set_cursor() means that @window will use the cursor of its
parent window. Most windows should use this default.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="cursor" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">a cursor</doc>
            <type name="Cursor" c:type="GdkCursor*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_decorations" c:identifier="gdk_window_set_decorations">
        <doc xml:whitespace="preserve">"Decorations" are the features the window manager adds to a toplevel #GdkWindow.
This function sets the traditional Motif window manager hints that tell the
window manager which decorations you would like your window to have.
Usually you should use gtk_window_set_decorated() on a #GtkWindow instead of
using the GDK function directly.
The @decorations argument is the logical OR of the fields in
the #GdkWMDecoration enumeration. If #GDK_DECOR_ALL is included in the
mask, the other bits indicate which decorations should be turned off.
If #GDK_DECOR_ALL is not included, then the other bits indicate
which decorations should be turned on.
Most window managers honor a decorations hint of 0 to disable all decorations,
but very few honor all possible combinations of bits.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="decorations" transfer-ownership="none">
            <doc xml:whitespace="preserve">decoration hint mask</doc>
            <type name="WMDecoration" c:type="GdkWMDecoration"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_device_cursor"
              c:identifier="gdk_window_set_device_cursor"
              version="3.0">
        <doc xml:whitespace="preserve">Sets a specific #GdkCursor for a given device when it gets inside @window.
Use gdk_cursor_new_for_display() or gdk_cursor_new_from_pixmap() to create
the cursor. To make the cursor invisible, use %GDK_BLANK_CURSOR. Passing
%NULL for the @cursor argument to gdk_window_set_cursor() means that
use this default.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="device" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GdkDevice</doc>
            <type name="Device" c:type="GdkDevice*"/>
          </parameter>
          <parameter name="cursor" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GdkCursor</doc>
            <type name="Cursor" c:type="GdkCursor*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_device_events"
              c:identifier="gdk_window_set_device_events"
              version="3.0">
        <doc xml:whitespace="preserve">Sets the event mask for a given device (Normally a floating device, not
attached to any visible pointer) to @window. For example, an event mask
including #GDK_BUTTON_PRESS_MASK means the window should report button
press events. The event mask is the bitwise OR of values from the
#GdkEventMask enumeration.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="device" transfer-ownership="none">
            <doc xml:whitespace="preserve">#GdkDevice to enable events for.</doc>
            <type name="Device" c:type="GdkDevice*"/>
          </parameter>
          <parameter name="event_mask" transfer-ownership="none">
            <doc xml:whitespace="preserve">event mask for @window</doc>
            <type name="EventMask" c:type="GdkEventMask"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_events" c:identifier="gdk_window_set_events">
        <doc xml:whitespace="preserve">The event mask for a window determines which events will be reported
for that window from all master input devices. For example, an event mask
including #GDK_BUTTON_PRESS_MASK means the window should report button
press events. The event mask is the bitwise OR of values from the
#GdkEventMask enumeration.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="event_mask" transfer-ownership="none">
            <doc xml:whitespace="preserve">event mask for @window</doc>
            <type name="EventMask" c:type="GdkEventMask"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_focus_on_map"
              c:identifier="gdk_window_set_focus_on_map"
              version="2.6 ">
        <doc xml:whitespace="preserve">Setting @focus_on_map to %FALSE hints the desktop environment that the
window doesn't want to receive input focus when it is mapped.  
focus_on_map should be turned off for windows that aren't triggered
interactively (such as popups from network activity).
On X, it is the responsibility of the window manager to interpret
this hint. Window managers following the freedesktop.org window
manager extension specification should respect it.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="focus_on_map" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE if the window should receive input focus when mapped</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_functions" c:identifier="gdk_window_set_functions">
        <doc xml:whitespace="preserve">Sets hints about the window management functions to make available
via buttons on the window frame.
On the X backend, this function sets the traditional Motif window 
manager hint for this purpose. However, few window managers do
anything reliable or interesting with this hint. Many ignore it
entirely.
The @functions argument is the logical OR of values from the
#GdkWMFunction enumeration. If the bitmask includes #GDK_FUNC_ALL,
then the other bits indicate which functions to disable; if
it doesn't include #GDK_FUNC_ALL, it indicates which functions to
enable.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="functions" transfer-ownership="none">
            <doc xml:whitespace="preserve">bitmask of operations to allow on @window</doc>
            <type name="WMFunction" c:type="GdkWMFunction"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_geometry_hints"
              c:identifier="gdk_window_set_geometry_hints">
        <doc xml:whitespace="preserve">Sets the geometry hints for @window. Hints flagged in @geom_mask
are set, hints not flagged in @geom_mask are unset.
To unset all hints, use a @geom_mask of 0 and a @geometry of %NULL.
This function provides hints to the windowing system about
acceptable sizes for a toplevel window. The purpose of 
this is to constrain user resizing, but the windowing system
will typically  (but is not required to) also constrain the
current size of the window to the provided values and
constrain programatic resizing via gdk_window_resize() or
gdk_window_move_resize().
Note that on X11, this effect has no effect on windows
of type %GDK_WINDOW_TEMP or windows where override redirect
has been turned on via gdk_window_set_override_redirect()
since these windows are not resizable by the user.
Since you can't count on the windowing system doing the
constraints for programmatic resizes, you should generally
call gdk_window_constrain_size() yourself to determine
appropriate sizes.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="geometry" transfer-ownership="none">
            <doc xml:whitespace="preserve">geometry hints</doc>
            <type name="Geometry" c:type="GdkGeometry*"/>
          </parameter>
          <parameter name="geom_mask" transfer-ownership="none">
            <doc xml:whitespace="preserve">bitmask indicating fields of @geometry to pay attention to</doc>
            <type name="WindowHints" c:type="GdkWindowHints"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_group" c:identifier="gdk_window_set_group">
        <doc xml:whitespace="preserve">Sets the group leader window for @window. By default,
GDK sets the group leader for all toplevel windows
to a global window implicitly created by GDK. With this function
you can override this default.
The group leader window allows the window manager to distinguish
all windows that belong to a single application. It may for example
allow users to minimize/unminimize all windows belonging to an
application at once. You should only set a non-default group window
if your application pretends to be multiple applications.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="leader" transfer-ownership="none">
            <doc xml:whitespace="preserve">group leader window, or %NULL to restore the default group leader window</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_icon" c:identifier="gdk_window_set_icon">
        <doc xml:whitespace="preserve">Sets the icon of @window as a pixmap or window. If using GTK+, investigate
gtk_window_set_default_icon_list() first, and then gtk_window_set_icon_list()
and gtk_window_set_icon(). If those don't meet your needs, look at
gdk_window_set_icon_list(). Only if all those are too high-level do you
want to fall back to gdk_window_set_icon().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="icon_window" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GdkWindow to use for the icon, or %NULL to unset</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </parameter>
          <parameter name="pixmap" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GdkPixmap to use as the icon, or %NULL to unset</doc>
            <type name="Pixmap" c:type="GdkPixmap*"/>
          </parameter>
          <parameter name="mask" transfer-ownership="none">
            <doc xml:whitespace="preserve">a 1-bit pixmap (#GdkBitmap) to use as mask for @pixmap, or %NULL to have none</doc>
            <type name="Bitmap" c:type="GdkBitmap*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_icon_list" c:identifier="gdk_window_set_icon_list">
        <doc xml:whitespace="preserve">Sets a list of icons for the window. One of these will be used
to represent the window when it has been iconified. The icon is
usually shown in an icon box or some sort of task bar. Which icon
size is shown depends on the window manager. The window manager
can scale the icon  but setting several size icons can give better
image quality since the window manager may only need to scale the
icon by a small amount or not at all.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="pixbufs" transfer-ownership="none">
            <doc xml:whitespace="preserve">A list of pixbufs, of different sizes.</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="GdkPixbuf.Pixbuf"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <method name="set_icon_name" c:identifier="gdk_window_set_icon_name">
        <doc xml:whitespace="preserve">Windows may have a name used while minimized, distinct from the
name they display in their titlebar. Most of the time this is a bad
idea from a user interface standpoint. But you can set such a name
with this function, if you like.
After calling this with a non-%NULL @name, calls to gdk_window_set_title()
will not update the icon title.
Using %NULL for @name unsets the icon title; further calls to
gdk_window_set_title() will again update the icon title as well.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:whitespace="preserve">name of window while iconified (minimized)</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_keep_above"
              c:identifier="gdk_window_set_keep_above"
              version="2.4">
        <doc xml:whitespace="preserve">Set if @window must be kept above other windows. If the
window was already above, then this function does nothing.
On X11, asks the window manager to keep @window above, if the window
manager supports this operation. Not all window managers support
this, and some deliberately ignore it or don't have a concept of
"keep above"; so you can't rely on the window being kept above.
But it will happen with most standard window managers,
and GDK makes a best effort to get it to happen.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="setting" transfer-ownership="none">
            <doc xml:whitespace="preserve">whether to keep @window above other windows</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_keep_below"
              c:identifier="gdk_window_set_keep_below"
              version="2.4">
        <doc xml:whitespace="preserve">Set if @window must be kept below other windows. If the
window was already below, then this function does nothing.
On X11, asks the window manager to keep @window below, if the window
manager supports this operation. Not all window managers support
this, and some deliberately ignore it or don't have a concept of
"keep below"; so you can't rely on the window being kept below.
But it will happen with most standard window managers,
and GDK makes a best effort to get it to happen.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="setting" transfer-ownership="none">
            <doc xml:whitespace="preserve">whether to keep @window below other windows</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_modal_hint" c:identifier="gdk_window_set_modal_hint">
        <doc xml:whitespace="preserve">The application can use this hint to tell the window manager
that a certain window has modal behaviour. The window manager
can use this information to handle modal windows in a special
way.
You should only use this on windows for which you have
previously called gdk_window_set_transient_for()</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="modal" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE if the window is modal, %FALSE otherwise.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_opacity"
              c:identifier="gdk_window_set_opacity"
              version="2.12">
        <doc xml:whitespace="preserve">Request the windowing system to make @window partially transparent,
with opacity 0 being fully transparent and 1 fully opaque. (Values
of the opacity parameter are clamped to the [0,1] range.) 
On X11, this works only on X screens with a compositing manager 
running.
For setting up per-pixel alpha, see gdk_screen_get_rgba_colormap().
For making non-toplevel windows translucent, see 
gdk_window_set_composited().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="opacity" transfer-ownership="none">
            <doc xml:whitespace="preserve">opacity</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_override_redirect"
              c:identifier="gdk_window_set_override_redirect">
        <doc xml:whitespace="preserve">An override redirect window is not under the control of the window manager.
This means it won't have a titlebar, won't be minimizable, etc. - it will
be entirely under the control of the application. The window manager
can't see the override redirect window at all.
Override redirect should only be used for short-lived temporary
windows, such as popup menus. #GtkMenu uses an override redirect
window in its implementation, for example.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="override_redirect" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE if window should be override redirect</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_role" c:identifier="gdk_window_set_role">
        <doc xml:whitespace="preserve">When using GTK+, typically you should use gtk_window_set_role() instead
of this low-level function.
The window manager and session manager use a window's role to
distinguish it from other kinds of window in the same application.
When an application is restarted after being saved in a previous
session, all windows with the same title and role are treated as
interchangeable.  So if you have two windows with the same title
that should be distinguished for session management purposes, you
should set the role on those windows. It doesn't matter what string
you use for the role, as long as you have a different role for each
non-interchangeable kind of window.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="role" transfer-ownership="none">
            <doc xml:whitespace="preserve">a string indicating its role</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_skip_pager_hint"
              c:identifier="gdk_window_set_skip_pager_hint"
              version="2.2">
        <doc xml:whitespace="preserve">Toggles whether a window should appear in a pager (workspace
switcher, or other desktop utility program that displays a small
thumbnail representation of the windows on the desktop). If a
window's semantic type as specified with gdk_window_set_type_hint()
already fully describes the window, this function should 
&lt;emphasis&gt;not&lt;/emphasis&gt; be called in addition, instead you should 
allow the window to be treated according to standard policy for 
its semantic type.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="skips_pager" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE to skip the pager</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_skip_taskbar_hint"
              c:identifier="gdk_window_set_skip_taskbar_hint"
              version="2.2">
        <doc xml:whitespace="preserve">Toggles whether a window should appear in a task list or window
list. If a window's semantic type as specified with
gdk_window_set_type_hint() already fully describes the window, this
function should &lt;emphasis&gt;not&lt;/emphasis&gt; be called in addition, 
instead you should allow the window to be treated according to 
standard policy for its semantic type.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="skips_taskbar" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE to skip the taskbar</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_startup_id"
              c:identifier="gdk_window_set_startup_id"
              version="2.12">
        <doc xml:whitespace="preserve">When using GTK+, typically you should use gtk_window_set_startup_id()
instead of this low-level function.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="startup_id" transfer-ownership="none">
            <doc xml:whitespace="preserve">a string with startup-notification identifier</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_static_gravities"
              c:identifier="gdk_window_set_static_gravities">
        <doc xml:whitespace="preserve">Set the bit gravity of the given window to static, and flag it so
all children get static subwindow gravity. This is used if you are
implementing scary features that involve deep knowledge of the
windowing system. Don't worry about it unless you have to.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the server supports static gravity</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="use_static" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE to turn on static gravity</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_support_multidevice"
              c:identifier="gdk_window_set_support_multidevice"
              version="3.0">
        <doc xml:whitespace="preserve">This function will enable multidevice features in @window.
Multidevice aware windows will need to handle properly multiple,
per device enter/leave events, device grabs and grab ownerships.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="support_multidevice" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE to enable multidevice support in @window.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_title" c:identifier="gdk_window_set_title">
        <doc xml:whitespace="preserve">Sets the title of a toplevel window, to be displayed in the titlebar.
If you haven't explicitly set the icon name for the window
(using gdk_window_set_icon_name()), the icon name will be set to
user-readable strings in GDK/GTK+). @title may not be %NULL.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="title" transfer-ownership="none">
            <doc xml:whitespace="preserve">title of @window</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_transient_for"
              c:identifier="gdk_window_set_transient_for">
        <doc xml:whitespace="preserve">Indicates to the window manager that @window is a transient dialog
associated with the application window @parent. This allows the
window manager to do things like center @window on @parent and
keep @window above @parent.
See gtk_window_set_transient_for() if you're using #GtkWindow or
#GtkDialog.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="parent" transfer-ownership="none">
            <doc xml:whitespace="preserve">another toplevel #GdkWindow</doc>
            <type name="Window" c:type="GdkWindow*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_type_hint" c:identifier="gdk_window_set_type_hint">
        <doc xml:whitespace="preserve">The application can use this call to provide a hint to the window
manager about the functionality of a window. The window manager
can use this information when determining the decoration and behaviour
of the window.
The hint must be set before the window is mapped.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="hint" transfer-ownership="none">
            <doc xml:whitespace="preserve">A hint of the function this window will have</doc>
            <type name="WindowTypeHint" c:type="GdkWindowTypeHint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_urgency_hint"
              c:identifier="gdk_window_set_urgency_hint"
              version="2.8">
        <doc xml:whitespace="preserve">Toggles whether a window needs the user's
urgent attention.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="urgent" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE if the window is urgent</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_user_data" c:identifier="gdk_window_set_user_data">
        <doc xml:whitespace="preserve">For most purposes this function is deprecated in favor of
g_object_set_data(). However, for historical reasons GTK+ stores
the #GtkWidget that owns a #GdkWindow as user data on the
#GdkWindow. So, custom widget implementations should use
this function for that. If GTK+ receives an event for a #GdkWindow,
and the user data for the window is non-%NULL, GTK+ will assume the
user data is a #GtkWidget, and forward the event to that widget.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:whitespace="preserve">user data</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="shape_combine_mask"
              c:identifier="gdk_window_shape_combine_mask">
        <doc xml:whitespace="preserve">Applies a shape mask to @window. Pixels in @window corresponding to
set bits in the @mask will be visible; pixels in @window
corresponding to unset bits in the @mask will be transparent. This
gives a non-rectangular window.
If @mask is %NULL, the shape mask will be unset, and the @x/@y
parameters are not used.
On the X11 platform, this uses an X server extension which is
widely available on most common platforms, but not available on
very old X servers, and occasionally the implementation will be
buggy. On servers without the shape extension, this function
will do nothing.
This function works on both toplevel and child windows.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="mask" transfer-ownership="none">
            <doc xml:whitespace="preserve">shape mask</doc>
            <type name="Bitmap" c:type="GdkBitmap*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:whitespace="preserve">X position of shape mask with respect to @window</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:whitespace="preserve">Y position of shape mask with respect to @window</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="shape_combine_region"
              c:identifier="gdk_window_shape_combine_region">
        <doc xml:whitespace="preserve">Makes pixels in @window outside @shape_region be transparent,
so that the window may be nonrectangular. See also
gdk_window_shape_combine_mask() to use a bitmap as the mask.
If @shape_region is %NULL, the shape will be unset, so the whole
window will be opaque again. @offset_x and @offset_y are ignored
if @shape_region is %NULL.
On the X11 platform, this uses an X server extension which is
widely available on most common platforms, but not available on
very old X servers, and occasionally the implementation will be
buggy. On servers without the shape extension, this function
will do nothing.
This function works on both toplevel and child windows.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="shape_region" transfer-ownership="none">
            <doc xml:whitespace="preserve">region of window to be non-transparent</doc>
            <type name="cairo.Region" c:type="cairo_region_t*"/>
          </parameter>
          <parameter name="offset_x" transfer-ownership="none">
            <doc xml:whitespace="preserve">X position of @shape_region in @window coordinates</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="offset_y" transfer-ownership="none">
            <doc xml:whitespace="preserve">Y position of @shape_region in @window coordinates</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="show" c:identifier="gdk_window_show">
        <doc xml:whitespace="preserve">Like gdk_window_show_unraised(), but also raises the window to the
top of the window stack (moves the window to the front of the
Z-order).
This function maps a window so it's visible onscreen. Its opposite
is gdk_window_hide().
When implementing a #GtkWidget, you should call this function on the widget's
#GdkWindow as part of the "map" method.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="show_unraised" c:identifier="gdk_window_show_unraised">
        <doc xml:whitespace="preserve">Shows a #GdkWindow onscreen, but does not modify its stacking
order. In contrast, gdk_window_show() will raise the window
to the top of the window stack.
On the X11 platform, in Xlib terms, this function calls
XMapWindow() (it also updates some internal GDK state, which means
that you can't really use XMapWindow() directly on a GDK window).</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="stick" c:identifier="gdk_window_stick">
        <doc xml:whitespace="preserve">"Pins" a window such that it's on all workspaces and does not scroll
with viewports, for window managers that have scrollable viewports.
(When using #GtkWindow, gtk_window_stick() may be more useful.)
On the X11 platform, this function depends on window manager
support, so may have no effect with many window managers. However,
GDK will do the best it can to convince the window manager to stick
the window. For window managers that don't support this operation,
there's nothing you can do to force it to happen.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="thaw_toplevel_updates_libgtk_only"
              c:identifier="gdk_window_thaw_toplevel_updates_libgtk_only">
        <doc xml:whitespace="preserve">Thaws a window frozen with
gdk_window_freeze_toplevel_updates_libgtk_only().
This function is not part of the GDK public API and is only
for use by GTK+.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="thaw_updates" c:identifier="gdk_window_thaw_updates">
        <doc xml:whitespace="preserve">Thaws a window frozen with gdk_window_freeze_updates().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="unfullscreen"
              c:identifier="gdk_window_unfullscreen"
              version="2.2">
        <doc xml:whitespace="preserve">Moves the window out of fullscreen mode. If the window was not
fullscreen, does nothing.
On X11, asks the window manager to move @window out of the fullscreen
state, if the window manager supports this operation. Not all
window managers support this, and some deliberately ignore it or
don't have a concept of "fullscreen"; so you can't rely on the
unfullscreenification actually happening. But it will happen with
most standard window managers, and GDK makes a best effort to get
it to happen.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="unmaximize" c:identifier="gdk_window_unmaximize">
        <doc xml:whitespace="preserve">Unmaximizes the window. If the window wasn't maximized, then this
function does nothing.
On X11, asks the window manager to unmaximize @window, if the
window manager supports this operation. Not all window managers
support this, and some deliberately ignore it or don't have a
concept of "maximized"; so you can't rely on the unmaximization
actually happening. But it will happen with most standard window
managers, and GDK makes a best effort to get it to happen.
On Windows, reliably unmaximizes the window.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="unstick" c:identifier="gdk_window_unstick">
        <doc xml:whitespace="preserve">Reverse operation for gdk_window_stick(); see gdk_window_stick(),
and gtk_window_unstick().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="withdraw" c:identifier="gdk_window_withdraw">
        <doc xml:whitespace="preserve">Withdraws a window (unmaps it and asks the window manager to forget about it).
This function is not really useful as gdk_window_hide() automatically
withdraws toplevel windows before hiding them.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <property name="cursor"
                version="2.18"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The mouse pointer for a #GdkWindow. See gdk_window_set_cursor() and
gdk_window_get_cursor() for details.</doc>
        <type name="Cursor"/>
      </property>
      <glib:signal name="from-embedder" version="2.18">
        <doc xml:whitespace="preserve">The ::from-embedder signal is emitted to translate coordinates
in the embedder of an offscreen window to the offscreen window.
See also #GtkWindow::to-embedder.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">x coordinate in the embedder window</doc>
            <type name="gdouble"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <doc xml:whitespace="preserve">y coordinate in the embedder window</doc>
            <type name="gdouble"/>
          </parameter>
          <parameter name="p1" transfer-ownership="none">
            <doc xml:whitespace="preserve">return location for the x coordinate in the offscreen window</doc>
            <type name="gpointer"/>
          </parameter>
          <parameter name="p2" transfer-ownership="none">
            <doc xml:whitespace="preserve">return location for the y coordinate in the offscreen window</doc>
            <type name="gpointer"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="pick-embedded-child"
                   version="2.18"
                   introspectable="0">
        <doc xml:whitespace="preserve">The ::pick-embedded-child signal is emitted to find an embedded
child at the given position.</doc>
        <return-value>
          <doc xml:whitespace="preserve">the #GdkWindow of the embedded child at @x, @y, or %NULL</doc>
          <type name="Window"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">x coordinate in the window</doc>
            <type name="gdouble"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <doc xml:whitespace="preserve">y coordinate in the window</doc>
            <type name="gdouble"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="to-embedder" version="2.18">
        <doc xml:whitespace="preserve">The ::to-embedder signal is emitted to translate coordinates
in an offscreen window to its embedder.
See also #GtkWindow::from-embedder.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">x coordinate in the offscreen window</doc>
            <type name="gdouble"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <doc xml:whitespace="preserve">y coordinate in the offscreen window</doc>
            <type name="gdouble"/>
          </parameter>
          <parameter name="p1" transfer-ownership="none">
            <doc xml:whitespace="preserve">return location for the x coordinate in the embedder window</doc>
            <type name="gpointer"/>
          </parameter>
          <parameter name="p2" transfer-ownership="none">
            <doc xml:whitespace="preserve">return location for the y coordinate in the embedder window</doc>
            <type name="gpointer"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="WindowAttr" c:type="GdkWindowAttr">
      <doc xml:whitespace="preserve">Attributes to use for a newly-created window.</doc>
      <field name="title" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="event_mask" writable="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="x" writable="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="y" writable="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="width" writable="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="height" writable="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="wclass" writable="1">
        <type name="WindowClass" c:type="GdkWindowClass"/>
      </field>
      <field name="visual" writable="1">
        <type name="Visual" c:type="GdkVisual*"/>
      </field>
      <field name="colormap" writable="1">
        <type name="Colormap" c:type="GdkColormap*"/>
      </field>
      <field name="window_type" writable="1">
        <type name="WindowType" c:type="GdkWindowType"/>
      </field>
      <field name="cursor" writable="1">
        <type name="Cursor" c:type="GdkCursor*"/>
      </field>
      <field name="wmclass_name" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="wmclass_class" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="override_redirect" writable="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="type_hint" writable="1">
        <type name="WindowTypeHint" c:type="GdkWindowTypeHint"/>
      </field>
    </record>
    <bitfield name="WindowAttributesType"
              glib:type-name="GdkWindowAttributesType"
              glib:get-type="gdk_window_attributes_type_get_type"
              c:type="GdkWindowAttributesType">
      <doc xml:whitespace="preserve">Used to indicate which fields in the #GdkWindowAttr struct should be honored.
For example, if you filled in the "cursor" and "x" fields of #GdkWindowAttr,
pass "@GDK_WA_X | @GDK_WA_CURSOR" to gdk_window_new(). Fields in
#GdkWindowAttr not covered by a bit in this enum are required; for example,
the @width/@height, @wclass, and @window_type fields are required, they have
no corresponding flag in #GdkWindowAttributesType.</doc>
      <member name="title"
              value="2"
              c:identifier="GDK_WA_TITLE"
              glib:nick="title"/>
      <member name="x" value="4" c:identifier="GDK_WA_X" glib:nick="x"/>
      <member name="y" value="8" c:identifier="GDK_WA_Y" glib:nick="y"/>
      <member name="cursor"
              value="16"
              c:identifier="GDK_WA_CURSOR"
              glib:nick="cursor"/>
      <member name="colormap"
              value="32"
              c:identifier="GDK_WA_COLORMAP"
              glib:nick="colormap"/>
      <member name="visual"
              value="64"
              c:identifier="GDK_WA_VISUAL"
              glib:nick="visual"/>
      <member name="wmclass"
              value="128"
              c:identifier="GDK_WA_WMCLASS"
              glib:nick="wmclass"/>
      <member name="noredir"
              value="256"
              c:identifier="GDK_WA_NOREDIR"
              glib:nick="noredir"/>
      <member name="type_hint"
              value="512"
              c:identifier="GDK_WA_TYPE_HINT"
              glib:nick="type-hint"/>
    </bitfield>
    <enumeration name="WindowClass"
                 glib:type-name="GdkWindowClass"
                 glib:get-type="gdk_window_class_get_type"
                 c:type="GdkWindowClass">
      <doc xml:whitespace="preserve">Such windows receive events and are also displayed on screen.
windows in order to trap or filter the events. You can't draw on</doc>
      <member name="output"
              value="0"
              c:identifier="GDK_INPUT_OUTPUT"
              glib:nick="output"/>
      <member name="only"
              value="1"
              c:identifier="GDK_INPUT_ONLY"
              glib:nick="only"/>
    </enumeration>
    <enumeration name="WindowEdge"
                 glib:type-name="GdkWindowEdge"
                 glib:get-type="gdk_window_edge_get_type"
                 c:type="GdkWindowEdge">
      <doc xml:whitespace="preserve">Determines a window edge or corner.</doc>
      <member name="north_west"
              value="0"
              c:identifier="GDK_WINDOW_EDGE_NORTH_WEST"
              glib:nick="north-west"/>
      <member name="north"
              value="1"
              c:identifier="GDK_WINDOW_EDGE_NORTH"
              glib:nick="north"/>
      <member name="north_east"
              value="2"
              c:identifier="GDK_WINDOW_EDGE_NORTH_EAST"
              glib:nick="north-east"/>
      <member name="west"
              value="3"
              c:identifier="GDK_WINDOW_EDGE_WEST"
              glib:nick="west"/>
      <member name="east"
              value="4"
              c:identifier="GDK_WINDOW_EDGE_EAST"
              glib:nick="east"/>
      <member name="south_west"
              value="5"
              c:identifier="GDK_WINDOW_EDGE_SOUTH_WEST"
              glib:nick="south-west"/>
      <member name="south"
              value="6"
              c:identifier="GDK_WINDOW_EDGE_SOUTH"
              glib:nick="south"/>
      <member name="south_east"
              value="7"
              c:identifier="GDK_WINDOW_EDGE_SOUTH_EAST"
              glib:nick="south-east"/>
    </enumeration>
    <bitfield name="WindowHints"
              glib:type-name="GdkWindowHints"
              glib:get-type="gdk_window_hints_get_type"
              c:type="GdkWindowHints">
      <doc xml:whitespace="preserve">Used to indicate which fields of a #GdkGeometry struct should be paid
attention to. Also, the presence/absence of @GDK_HINT_POS,
directly refer to #GdkGeometry fields. @GDK_HINT_USER_POS will be set
automatically by #GtkWindow if you call gtk_window_move().
specified a size/position using a --geometry command-line argument;
gtk_window_parse_geometry() automatically sets these flags.</doc>
      <member name="pos"
              value="1"
              c:identifier="GDK_HINT_POS"
              glib:nick="pos"/>
      <member name="min_size"
              value="2"
              c:identifier="GDK_HINT_MIN_SIZE"
              glib:nick="min-size"/>
      <member name="max_size"
              value="4"
              c:identifier="GDK_HINT_MAX_SIZE"
              glib:nick="max-size"/>
      <member name="base_size"
              value="8"
              c:identifier="GDK_HINT_BASE_SIZE"
              glib:nick="base-size"/>
      <member name="aspect"
              value="16"
              c:identifier="GDK_HINT_ASPECT"
              glib:nick="aspect"/>
      <member name="resize_inc"
              value="32"
              c:identifier="GDK_HINT_RESIZE_INC"
              glib:nick="resize-inc"/>
      <member name="win_gravity"
              value="64"
              c:identifier="GDK_HINT_WIN_GRAVITY"
              glib:nick="win-gravity"/>
      <member name="user_pos"
              value="128"
              c:identifier="GDK_HINT_USER_POS"
              glib:nick="user-pos"/>
      <member name="user_size"
              value="256"
              c:identifier="GDK_HINT_USER_SIZE"
              glib:nick="user-size"/>
    </bitfield>
    <record name="WindowObject" c:type="GdkWindowObject" disguised="1">
    </record>
    <record name="WindowObjectClass" c:type="GdkWindowObjectClass">
      <field name="parent_class" writable="1">
        <type name="DrawableClass" c:type="GdkDrawableClass"/>
      </field>
    </record>
    <record name="WindowRedirect" c:type="GdkWindowRedirect" disguised="1">
    </record>
    <bitfield name="WindowState"
              glib:type-name="GdkWindowState"
              glib:get-type="gdk_window_state_get_type"
              c:type="GdkWindowState">
      <member name="withdrawn"
              value="1"
              c:identifier="GDK_WINDOW_STATE_WITHDRAWN"
              glib:nick="withdrawn"/>
      <member name="iconified"
              value="2"
              c:identifier="GDK_WINDOW_STATE_ICONIFIED"
              glib:nick="iconified"/>
      <member name="maximized"
              value="4"
              c:identifier="GDK_WINDOW_STATE_MAXIMIZED"
              glib:nick="maximized"/>
      <member name="sticky"
              value="8"
              c:identifier="GDK_WINDOW_STATE_STICKY"
              glib:nick="sticky"/>
      <member name="fullscreen"
              value="16"
              c:identifier="GDK_WINDOW_STATE_FULLSCREEN"
              glib:nick="fullscreen"/>
      <member name="above"
              value="32"
              c:identifier="GDK_WINDOW_STATE_ABOVE"
              glib:nick="above"/>
      <member name="below"
              value="64"
              c:identifier="GDK_WINDOW_STATE_BELOW"
              glib:nick="below"/>
    </bitfield>
    <enumeration name="WindowType"
                 glib:type-name="GdkWindowType"
                 glib:get-type="gdk_window_type_get_type"
                 c:type="GdkWindowType">
      <doc xml:whitespace="preserve">Describes the kind of window.</doc>
      <member name="root"
              value="0"
              c:identifier="GDK_WINDOW_ROOT"
              glib:nick="root"/>
      <member name="toplevel"
              value="1"
              c:identifier="GDK_WINDOW_TOPLEVEL"
              glib:nick="toplevel"/>
      <member name="child"
              value="2"
              c:identifier="GDK_WINDOW_CHILD"
              glib:nick="child"/>
      <member name="temp"
              value="3"
              c:identifier="GDK_WINDOW_TEMP"
              glib:nick="temp"/>
      <member name="foreign"
              value="4"
              c:identifier="GDK_WINDOW_FOREIGN"
              glib:nick="foreign"/>
      <member name="offscreen"
              value="5"
              c:identifier="GDK_WINDOW_OFFSCREEN"
              glib:nick="offscreen"/>
    </enumeration>
    <enumeration name="WindowTypeHint"
                 glib:type-name="GdkWindowTypeHint"
                 glib:get-type="gdk_window_type_hint_get_type"
                 c:type="GdkWindowTypeHint">
      <doc xml:whitespace="preserve">These are hints for the window manager that indicate what type of function
the window has. The window manager can use this when determining decoration
and behaviour of the window. The hint must be set before mapping the window.
See the
&lt;ulink url="http://www.freedesktop.org/Standards/wm-spec"&gt;Extended
Window Manager Hints&lt;/ulink&gt; specification for more details about
window types.</doc>
      <member name="normal"
              value="0"
              c:identifier="GDK_WINDOW_TYPE_HINT_NORMAL"
              glib:nick="normal"/>
      <member name="dialog"
              value="1"
              c:identifier="GDK_WINDOW_TYPE_HINT_DIALOG"
              glib:nick="dialog"/>
      <member name="menu"
              value="2"
              c:identifier="GDK_WINDOW_TYPE_HINT_MENU"
              glib:nick="menu"/>
      <member name="toolbar"
              value="3"
              c:identifier="GDK_WINDOW_TYPE_HINT_TOOLBAR"
              glib:nick="toolbar"/>
      <member name="splashscreen"
              value="4"
              c:identifier="GDK_WINDOW_TYPE_HINT_SPLASHSCREEN"
              glib:nick="splashscreen"/>
      <member name="utility"
              value="5"
              c:identifier="GDK_WINDOW_TYPE_HINT_UTILITY"
              glib:nick="utility"/>
      <member name="dock"
              value="6"
              c:identifier="GDK_WINDOW_TYPE_HINT_DOCK"
              glib:nick="dock"/>
      <member name="desktop"
              value="7"
              c:identifier="GDK_WINDOW_TYPE_HINT_DESKTOP"
              glib:nick="desktop"/>
      <member name="dropdown_menu"
              value="8"
              c:identifier="GDK_WINDOW_TYPE_HINT_DROPDOWN_MENU"
              glib:nick="dropdown-menu"/>
      <member name="popup_menu"
              value="9"
              c:identifier="GDK_WINDOW_TYPE_HINT_POPUP_MENU"
              glib:nick="popup-menu"/>
      <member name="tooltip"
              value="10"
              c:identifier="GDK_WINDOW_TYPE_HINT_TOOLTIP"
              glib:nick="tooltip"/>
      <member name="notification"
              value="11"
              c:identifier="GDK_WINDOW_TYPE_HINT_NOTIFICATION"
              glib:nick="notification"/>
      <member name="combo"
              value="12"
              c:identifier="GDK_WINDOW_TYPE_HINT_COMBO"
              glib:nick="combo"/>
      <member name="dnd"
              value="13"
              c:identifier="GDK_WINDOW_TYPE_HINT_DND"
              glib:nick="dnd"/>
    </enumeration>
    <function name="add_client_message_filter"
              c:identifier="gdk_add_client_message_filter"
              introspectable="0">
      <doc xml:whitespace="preserve">Adds a filter to the default display to be called when X ClientMessage events
are received. See gdk_display_add_client_message_filter().</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="message_type" transfer-ownership="none">
          <doc xml:whitespace="preserve">the type of ClientMessage events to receive. This will be checked against the &lt;structfield&gt;message_type&lt;/structfield&gt; field of the XClientMessage event struct.</doc>
          <type name="Atom" c:type="GdkAtom"/>
        </parameter>
        <parameter name="func" transfer-ownership="none" closure="2">
          <doc xml:whitespace="preserve">the function to call to process the event.</doc>
          <type name="FilterFunc" c:type="GdkFilterFunc"/>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <doc xml:whitespace="preserve">user data to pass to @func.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="add_option_entries_libgtk_only"
              c:identifier="gdk_add_option_entries_libgtk_only">
      <doc xml:whitespace="preserve">Appends gdk option entries to the passed in option group. This is
not public API and must not be used by applications.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="group" transfer-ownership="none">
          <doc xml:whitespace="preserve">An option group.</doc>
          <type name="GLib.OptionGroup" c:type="GOptionGroup*"/>
        </parameter>
      </parameters>
    </function>
    <function name="atom_intern"
              c:identifier="gdk_atom_intern"
              introspectable="0">
      <return-value>
        <type name="Atom" c:type="GdkAtom"/>
      </return-value>
      <parameters>
        <parameter name="atom_name" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="only_if_exists" transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="atom_intern_static_string"
              c:identifier="gdk_atom_intern_static_string"
              version="2.10"
              introspectable="0">
      <doc xml:whitespace="preserve">Finds or creates an atom corresponding to a given string.
Note that this function is identical to gdk_atom_intern() except
that if a new #GdkAtom is created the string itself is used rather 
than a copy. This saves memory, but can only be used if the string 
will &lt;emphasis&gt;always&lt;/emphasis&gt; exist. It can be used with statically
allocated strings in the main program, but not with statically 
allocated memory in dynamically loaded modules, if you expect to
ever unload the module again (e.g. do not use this function in
GTK+ theme engines).</doc>
      <return-value>
        <doc xml:whitespace="preserve">the atom corresponding to @atom_name</doc>
        <type name="Atom" c:type="GdkAtom"/>
      </return-value>
      <parameters>
        <parameter name="atom_name" transfer-ownership="none">
          <doc xml:whitespace="preserve">a static string</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="atom_name" c:identifier="gdk_atom_name">
      <return-value transfer-ownership="full">
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="atom" transfer-ownership="none">
          <type name="Atom" c:type="GdkAtom"/>
        </parameter>
      </parameters>
    </function>
    <function name="beep" c:identifier="gdk_beep">
      <doc xml:whitespace="preserve">Emits a short beep on the default display.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="cairo_create"
              c:identifier="gdk_cairo_create"
              version="2.8">
      <doc xml:whitespace="preserve">Creates a Cairo context for drawing to @drawable.
&lt;note&gt;&lt;para&gt;
Note that due to double-buffering, Cairo contexts created 
in a GTK+ expose event handler cannot be cached and reused 
between different expose events. 
&lt;/para&gt;&lt;/note&gt;
cairo_destroy() when you are done drawing.</doc>
      <return-value transfer-ownership="full">
        <doc xml:whitespace="preserve">A newly created Cairo context. Free with</doc>
        <type name="cairo.Context" c:type="cairo_t*"/>
      </return-value>
      <parameters>
        <parameter name="drawable" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GdkDrawable</doc>
          <type name="Drawable" c:type="GdkDrawable*"/>
        </parameter>
      </parameters>
    </function>
    <function name="cairo_rectangle"
              c:identifier="gdk_cairo_rectangle"
              version="2.8">
      <doc xml:whitespace="preserve">Adds the given rectangle to the current path of @cr.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="cr" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #cairo_t</doc>
          <type name="cairo.Context" c:type="cairo_t*"/>
        </parameter>
        <parameter name="rectangle" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GdkRectangle</doc>
          <type name="Rectangle" c:type="GdkRectangle*"/>
        </parameter>
      </parameters>
    </function>
    <function name="cairo_region"
              c:identifier="gdk_cairo_region"
              version="2.8">
      <doc xml:whitespace="preserve">Adds the given region to the current path of @cr.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="cr" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #cairo_t</doc>
          <type name="cairo.Context" c:type="cairo_t*"/>
        </parameter>
        <parameter name="region" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #cairo_region_t</doc>
          <type name="cairo.Region" c:type="cairo_region_t*"/>
        </parameter>
      </parameters>
    </function>
    <function name="cairo_reset_clip"
              c:identifier="gdk_cairo_reset_clip"
              version="2.18">
      <doc xml:whitespace="preserve">Resets the clip region for a Cairo context created by gdk_cairo_create().
This resets the clip region to the "empty" state for the given drawable.
This is required for non-native windows since a direct call to
cairo_reset_clip() would unset the clip region inherited from the
drawable (i.e. the window clip region), and thus let you e.g.
draw outside your window.
This is rarely needed though, since most code just create a new cairo_t
using gdk_cairo_create() each time they want to draw something.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="cr" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #cairo_t</doc>
          <type name="cairo.Context" c:type="cairo_t*"/>
        </parameter>
        <parameter name="drawable" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GdkDrawable</doc>
          <type name="Drawable" c:type="GdkDrawable*"/>
        </parameter>
      </parameters>
    </function>
    <function name="cairo_set_source_color"
              c:identifier="gdk_cairo_set_source_color"
              version="2.8">
      <doc xml:whitespace="preserve">Sets the specified #GdkColor as the source color of @cr.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="cr" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #cairo_t</doc>
          <type name="cairo.Context" c:type="cairo_t*"/>
        </parameter>
        <parameter name="color" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GdkColor</doc>
          <type name="Color" c:type="GdkColor*"/>
        </parameter>
      </parameters>
    </function>
    <function name="cairo_set_source_pixbuf"
              c:identifier="gdk_cairo_set_source_pixbuf"
              version="2.8">
      <doc xml:whitespace="preserve">Sets the given pixbuf as the source pattern for the Cairo context.
The pattern has an extend mode of %CAIRO_EXTEND_NONE and is aligned
so that the origin of @pixbuf is @pixbuf_x, @pixbuf_y</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="cr" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #Cairo context</doc>
          <type name="cairo.Context" c:type="cairo_t*"/>
        </parameter>
        <parameter name="pixbuf" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GdkPixbuf</doc>
          <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
        </parameter>
        <parameter name="pixbuf_x" transfer-ownership="none">
          <doc xml:whitespace="preserve">X coordinate of location to place upper left corner of @pixbuf</doc>
          <type name="gdouble" c:type="double"/>
        </parameter>
        <parameter name="pixbuf_y" transfer-ownership="none">
          <doc xml:whitespace="preserve">Y coordinate of location to place upper left corner of @pixbuf</doc>
          <type name="gdouble" c:type="double"/>
        </parameter>
      </parameters>
    </function>
    <function name="cairo_set_source_pixmap"
              c:identifier="gdk_cairo_set_source_pixmap"
              version="2.10">
      <doc xml:whitespace="preserve">Sets the given pixmap as the source pattern for the Cairo context.
The pattern has an extend mode of %CAIRO_EXTEND_NONE and is aligned
so that the origin of @pixmap is @pixmap_x, @pixmap_y</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="cr" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #Cairo context</doc>
          <type name="cairo.Context" c:type="cairo_t*"/>
        </parameter>
        <parameter name="pixmap" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GdkPixmap</doc>
          <type name="Pixmap" c:type="GdkPixmap*"/>
        </parameter>
        <parameter name="pixmap_x" transfer-ownership="none">
          <doc xml:whitespace="preserve">X coordinate of location to place upper left corner of @pixmap</doc>
          <type name="gdouble" c:type="double"/>
        </parameter>
        <parameter name="pixmap_y" transfer-ownership="none">
          <doc xml:whitespace="preserve">Y coordinate of location to place upper left corner of @pixmap</doc>
          <type name="gdouble" c:type="double"/>
        </parameter>
      </parameters>
    </function>
    <function name="color_parse" c:identifier="gdk_color_parse">
      <doc xml:whitespace="preserve">Parses a textual specification of a color and fill in the
&lt;structfield&gt;red&lt;/structfield&gt;, &lt;structfield&gt;green&lt;/structfield&gt;,
and &lt;structfield&gt;blue&lt;/structfield&gt; fields of a #GdkColor
structure. The color is &lt;emphasis&gt;not&lt;/emphasis&gt; allocated, you
must call gdk_colormap_alloc_color() yourself. The string can
either one of a large set of standard names. (Taken from the X11
&lt;filename&gt;rgb.txt&lt;/filename&gt; file), or it can be a hex value in the
form '&amp;num;rgb' '&amp;num;rrggbb' '&amp;num;rrrgggbbb' or
'&amp;num;rrrrggggbbbb' where 'r', 'g' and 'b' are hex digits of the
red, green, and blue components of the color, respectively. (White
in the four forms is '&amp;num;fff' '&amp;num;ffffff' '&amp;num;fffffffff' and
'&amp;num;ffffffffffff')</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">%TRUE if the parsing succeeded.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="spec" transfer-ownership="none">
          <doc xml:whitespace="preserve">the string specifying the color.</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="color"
                   direction="out"
                   caller-allocates="1"
                   transfer-ownership="none">
          <doc xml:whitespace="preserve">the #GdkColor to fill in</doc>
          <type name="Color" c:type="GdkColor*"/>
        </parameter>
      </parameters>
    </function>
    <function name="devices_list"
              c:identifier="gdk_devices_list"
              deprecated="Use gdk_device_manager_list_devices() instead."
              deprecated-version="3.0">
      <doc xml:whitespace="preserve">Returns the list of available input devices for the default display.
The list is statically allocated and should not be freed.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">a list of #GdkDevice</doc>
        <type name="GLib.List" c:type="GList*">
          <type name="Device"/>
        </type>
      </return-value>
    </function>
    <function name="drag_abort" c:identifier="gdk_drag_abort">
      <doc xml:whitespace="preserve">Aborts a drag without dropping. 
This function is called by the drag source.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="context" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GdkDragContext.</doc>
          <type name="DragContext" c:type="GdkDragContext*"/>
        </parameter>
        <parameter name="time_" transfer-ownership="none">
          <doc xml:whitespace="preserve">the timestamp for this operation.</doc>
          <type name="guint32" c:type="guint32"/>
        </parameter>
      </parameters>
    </function>
    <function name="drag_begin"
              c:identifier="gdk_drag_begin"
              introspectable="0">
      <doc xml:whitespace="preserve">Starts a drag and creates a new drag context for it.
This function is called by the drag source.</doc>
      <return-value>
        <doc xml:whitespace="preserve">a newly created #GdkDragContext.</doc>
        <type name="DragContext" c:type="GdkDragContext*"/>
      </return-value>
      <parameters>
        <parameter name="window" transfer-ownership="none">
          <doc xml:whitespace="preserve">the source window for this drag.</doc>
          <type name="Window" c:type="GdkWindow*"/>
        </parameter>
        <parameter name="targets" transfer-ownership="none">
          <doc xml:whitespace="preserve">the offered targets, as list of #GdkAtom&lt;!-- --&gt;s</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Atom"/>
          </type>
        </parameter>
      </parameters>
    </function>
    <function name="drag_drop" c:identifier="gdk_drag_drop">
      <doc xml:whitespace="preserve">Drops on the current destination.
This function is called by the drag source.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="context" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GdkDragContext.</doc>
          <type name="DragContext" c:type="GdkDragContext*"/>
        </parameter>
        <parameter name="time_" transfer-ownership="none">
          <doc xml:whitespace="preserve">the timestamp for this operation.</doc>
          <type name="guint32" c:type="guint32"/>
        </parameter>
      </parameters>
    </function>
    <function name="drag_drop_succeeded"
              c:identifier="gdk_drag_drop_succeeded"
              version="2.6">
      <doc xml:whitespace="preserve">Returns whether the dropped data has been successfully 
transferred. This function is intended to be used while 
handling a %GDK_DROP_FINISHED event, its return value is
meaningless at other times.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">%TRUE if the drop was successful.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="context" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GdkDragContext</doc>
          <type name="DragContext" c:type="GdkDragContext*"/>
        </parameter>
      </parameters>
    </function>
    <function name="drag_find_window" c:identifier="gdk_drag_find_window">
      <doc xml:whitespace="preserve">Finds the destination window and DND protocol to use at the
given pointer position.
This function is called by the drag source to obtain the</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="context" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GdkDragContext.</doc>
          <type name="DragContext" c:type="GdkDragContext*"/>
        </parameter>
        <parameter name="drag_window" transfer-ownership="none">
          <doc xml:whitespace="preserve">a window which may be at the pointer position, but should be ignored, since it is put up by the drag source as an icon.</doc>
          <type name="Window" c:type="GdkWindow*"/>
        </parameter>
        <parameter name="x_root" transfer-ownership="none">
          <doc xml:whitespace="preserve">the x position of the pointer in root coordinates.</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="y_root" transfer-ownership="none">
          <doc xml:whitespace="preserve">the y position of the pointer in root coordinates.</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="dest_window"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:whitespace="preserve">location to store the destination window in.</doc>
          <type name="Window" c:type="GdkWindow**"/>
        </parameter>
        <parameter name="protocol"
                   direction="out"
                   caller-allocates="1"
                   transfer-ownership="none">
          <doc xml:whitespace="preserve">location to store the DND protocol in.</doc>
          <type name="DragProtocol" c:type="GdkDragProtocol*"/>
        </parameter>
      </parameters>
    </function>
    <function name="drag_find_window_for_screen"
              c:identifier="gdk_drag_find_window_for_screen"
              version="2.2">
      <doc xml:whitespace="preserve">Finds the destination window and DND protocol to use at the
given pointer position.
This function is called by the drag source to obtain the</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="context" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GdkDragContext</doc>
          <type name="DragContext" c:type="GdkDragContext*"/>
        </parameter>
        <parameter name="drag_window" transfer-ownership="none">
          <doc xml:whitespace="preserve">a window which may be at the pointer position, but should be ignored, since it is put up by the drag source as an icon.</doc>
          <type name="Window" c:type="GdkWindow*"/>
        </parameter>
        <parameter name="screen" transfer-ownership="none">
          <doc xml:whitespace="preserve">the screen where the destination window is sought.</doc>
          <type name="Screen" c:type="GdkScreen*"/>
        </parameter>
        <parameter name="x_root" transfer-ownership="none">
          <doc xml:whitespace="preserve">the x position of the pointer in root coordinates.</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="y_root" transfer-ownership="none">
          <doc xml:whitespace="preserve">the y position of the pointer in root coordinates.</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="dest_window"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:whitespace="preserve">location to store the destination window in.</doc>
          <type name="Window" c:type="GdkWindow**"/>
        </parameter>
        <parameter name="protocol"
                   direction="out"
                   caller-allocates="1"
                   transfer-ownership="none">
          <doc xml:whitespace="preserve">location to store the DND protocol in.</doc>
          <type name="DragProtocol" c:type="GdkDragProtocol*"/>
        </parameter>
      </parameters>
    </function>
    <function name="drag_get_protocol" c:identifier="gdk_drag_get_protocol">
      <doc xml:whitespace="preserve">Finds out the DND protocol supported by a window.
the drop should happen. This may be @xid or the id of a proxy
window, or zero if @xid doesn't support Drag and Drop.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">the windowing system specific id for the window where</doc>
        <type name="NativeWindow" c:type="GdkNativeWindow"/>
      </return-value>
      <parameters>
        <parameter name="xid" transfer-ownership="none">
          <doc xml:whitespace="preserve">the windowing system id of the destination window.</doc>
          <type name="NativeWindow" c:type="GdkNativeWindow"/>
        </parameter>
        <parameter name="protocol" transfer-ownership="none">
          <doc xml:whitespace="preserve">location where the supported DND protocol is returned.</doc>
          <type name="DragProtocol" c:type="GdkDragProtocol*"/>
        </parameter>
      </parameters>
    </function>
    <function name="drag_get_protocol_for_display"
              c:identifier="gdk_drag_get_protocol_for_display"
              version="2.2">
      <doc xml:whitespace="preserve">Finds out the DND protocol supported by a window.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">the windowing system id of the window where the drop should happen. This may be @xid or the id of a proxy window, or zero if @xid doesn't support Drag and Drop.</doc>
        <type name="NativeWindow" c:type="GdkNativeWindow"/>
      </return-value>
      <parameters>
        <parameter name="display" transfer-ownership="none">
          <doc xml:whitespace="preserve">the #GdkDisplay where the destination window resides</doc>
          <type name="Display" c:type="GdkDisplay*"/>
        </parameter>
        <parameter name="xid" transfer-ownership="none">
          <doc xml:whitespace="preserve">the windowing system id of the destination window.</doc>
          <type name="NativeWindow" c:type="GdkNativeWindow"/>
        </parameter>
        <parameter name="protocol" transfer-ownership="none">
          <doc xml:whitespace="preserve">location where the supported DND protocol is returned.</doc>
          <type name="DragProtocol" c:type="GdkDragProtocol*"/>
        </parameter>
      </parameters>
    </function>
    <function name="drag_get_selection"
              c:identifier="gdk_drag_get_selection"
              introspectable="0">
      <doc xml:whitespace="preserve">Returns the selection atom for the current source window.</doc>
      <return-value>
        <doc xml:whitespace="preserve">the selection atom.</doc>
        <type name="Atom" c:type="GdkAtom"/>
      </return-value>
      <parameters>
        <parameter name="context" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GdkDragContext.</doc>
          <type name="DragContext" c:type="GdkDragContext*"/>
        </parameter>
      </parameters>
    </function>
    <function name="drag_motion" c:identifier="gdk_drag_motion">
      <doc xml:whitespace="preserve">Updates the drag context when the pointer moves or the 
set of actions changes.
This function is called by the drag source.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">FIXME</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="context" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GdkDragContext.</doc>
          <type name="DragContext" c:type="GdkDragContext*"/>
        </parameter>
        <parameter name="dest_window" transfer-ownership="none">
          <doc xml:whitespace="preserve">the new destination window, obtained by gdk_drag_find_window().</doc>
          <type name="Window" c:type="GdkWindow*"/>
        </parameter>
        <parameter name="protocol" transfer-ownership="none">
          <doc xml:whitespace="preserve">the DND protocol in use, obtained by gdk_drag_find_window().</doc>
          <type name="DragProtocol" c:type="GdkDragProtocol"/>
        </parameter>
        <parameter name="x_root" transfer-ownership="none">
          <doc xml:whitespace="preserve">the x position of the pointer in root coordinates.</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="y_root" transfer-ownership="none">
          <doc xml:whitespace="preserve">the y position of the pointer in root coordinates.</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="suggested_action" transfer-ownership="none">
          <doc xml:whitespace="preserve">the suggested action.</doc>
          <type name="DragAction" c:type="GdkDragAction"/>
        </parameter>
        <parameter name="possible_actions" transfer-ownership="none">
          <doc xml:whitespace="preserve">the possible actions.</doc>
          <type name="DragAction" c:type="GdkDragAction"/>
        </parameter>
        <parameter name="time_" transfer-ownership="none">
          <doc xml:whitespace="preserve">the timestamp for this operation.</doc>
          <type name="guint32" c:type="guint32"/>
        </parameter>
      </parameters>
    </function>
    <function name="drag_status" c:identifier="gdk_drag_status">
      <doc xml:whitespace="preserve">Selects one of the actions offered by the drag source.
This function is called by the drag destination in response to
gdk_drag_motion() called by the drag source.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="context" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GdkDragContext.</doc>
          <type name="DragContext" c:type="GdkDragContext*"/>
        </parameter>
        <parameter name="action" transfer-ownership="none">
          <doc xml:whitespace="preserve">the selected action which will be taken when a drop happens, or 0 to indicate that a drop will not be accepted.</doc>
          <type name="DragAction" c:type="GdkDragAction"/>
        </parameter>
        <parameter name="time_" transfer-ownership="none">
          <doc xml:whitespace="preserve">the timestamp for this operation.</doc>
          <type name="guint32" c:type="guint32"/>
        </parameter>
      </parameters>
    </function>
    <function name="drop_finish" c:identifier="gdk_drop_finish">
      <doc xml:whitespace="preserve">Ends the drag operation after a drop.
This function is called by the drag destination.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="context" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GtkDragContext.</doc>
          <type name="DragContext" c:type="GdkDragContext*"/>
        </parameter>
        <parameter name="success" transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the data was successfully received.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="time_" transfer-ownership="none">
          <doc xml:whitespace="preserve">the timestamp for this operation.</doc>
          <type name="guint32" c:type="guint32"/>
        </parameter>
      </parameters>
    </function>
    <function name="drop_reply" c:identifier="gdk_drop_reply">
      <doc xml:whitespace="preserve">Accepts or rejects a drop. 
This function is called by the drag destination in response
to a drop initiated by the drag source.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="context" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GdkDragContext.</doc>
          <type name="DragContext" c:type="GdkDragContext*"/>
        </parameter>
        <parameter name="ok" transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the drop is accepted.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="time_" transfer-ownership="none">
          <doc xml:whitespace="preserve">the timestamp for this operation.</doc>
          <type name="guint32" c:type="guint32"/>
        </parameter>
      </parameters>
    </function>
    <function name="enable_multidevice"
              c:identifier="gdk_enable_multidevice"
              version="3.0">
      <doc xml:whitespace="preserve">Enables multidevice support in GDK. This call must happen prior
to gdk_display_open(), gtk_init(), gtk_init_with_args() or
gtk_init_check() in order to take effect.
Note that individual #GdkWindow&lt;!-- --&gt;s still need to explicitly
enable multidevice awareness through gdk_window_set_support_multidevice().
This function must be called before initializing GDK.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="error_trap_pop" c:identifier="gdk_error_trap_pop">
      <doc xml:whitespace="preserve">Removes an error trap pushed with gdk_error_trap_push().
May block until an error has been definitively received
or not received from the X server. gdk_error_trap_pop_ignored()
is preferred if you don't need to know whether an error
occurred, because it never has to block. If you don't
need the return value of gdk_error_trap_pop(), use
gdk_error_trap_pop_ignored().
Prior to GDK 3.0, this function would not automatically
sync for you, so you had to gdk_flush() if your last
call to Xlib was not a blocking round trip.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">X error code or 0 on success</doc>
        <type name="gint" c:type="gint"/>
      </return-value>
    </function>
    <function name="error_trap_pop_ignored"
              c:identifier="gdk_error_trap_pop_ignored"
              version="3.0">
      <doc xml:whitespace="preserve">Removes an error trap pushed with gdk_error_trap_push(), but
without bothering to wait and see whether an error occurred.  If an
error arrives later asynchronously that was triggered while the
trap was pushed, that error will be ignored.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="error_trap_push" c:identifier="gdk_error_trap_push">
      <doc xml:whitespace="preserve">This function allows X errors to be trapped instead of the normal
behavior of exiting the application. It should only be used if it
is not possible to avoid the X error in any other way. Errors are
ignored on all #GdkDisplay currently known to the
#GdkDisplayManager. If you don't care which error happens and just
want to ignore everything, pop with gdk_error_trap_pop_ignored().
If you need the error code, use gdk_error_trap_pop() which may have
to block and wait for the error to arrive from the X server.
This API exists on all platforms but only does anything on X.
You can use gdk_x11_display_error_trap_push() to ignore errors
on only a single display.
&lt;example&gt;
&lt;title&gt;Trapping an X error&lt;/title&gt;
&lt;programlisting&gt;
gdk_error_trap_push (&lt;!-- --&gt;);
// ... Call the X function which may cause an error here ...
if (gdk_error_trap_pop (&lt;!-- --&gt;))
{
// ... Handle the error here ...
}
&lt;/programlisting&gt;
&lt;/example&gt;</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="event_get" c:identifier="gdk_event_get">
      <doc xml:whitespace="preserve">Checks all open displays for a #GdkEvent to process,to be processed
on, fetching events from the windowing system if necessary.
See gdk_display_get_event().
are pending. The returned #GdkEvent should be freed with gdk_event_free().</doc>
      <return-value transfer-ownership="full">
        <doc xml:whitespace="preserve">the next #GdkEvent to be processed, or %NULL if no events</doc>
        <type name="Event" c:type="GdkEvent*"/>
      </return-value>
    </function>
    <function name="event_handler_set" c:identifier="gdk_event_handler_set">
      <doc xml:whitespace="preserve">Sets the function to call to handle all events from GDK.
Note that GTK+ uses this to install its own event handler, so it is
usually not useful for GTK+ applications. (Although an application
can call this function then call gtk_main_do_event() to pass
events to GTK+.)</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="func"
                   transfer-ownership="none"
                   scope="notified"
                   closure="1"
                   destroy="2">
          <doc xml:whitespace="preserve">the function to call to handle events from GDK.</doc>
          <type name="EventFunc" c:type="GdkEventFunc"/>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <doc xml:whitespace="preserve">user data to pass to the function.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="notify" transfer-ownership="none" scope="async">
          <doc xml:whitespace="preserve">the function to call when the handler function is removed, i.e. when gdk_event_handler_set() is called with another event handler.</doc>
          <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
        </parameter>
      </parameters>
    </function>
    <function name="event_peek" c:identifier="gdk_event_peek">
      <doc xml:whitespace="preserve">If there is an event waiting in the event queue of some open
display, returns a copy of it. See gdk_display_peek_event().
events are in any queues. The returned #GdkEvent should be freed with
gdk_event_free().</doc>
      <return-value transfer-ownership="full">
        <doc xml:whitespace="preserve">a copy of the first #GdkEvent on some event queue, or %NULL if no</doc>
        <type name="Event" c:type="GdkEvent*"/>
      </return-value>
    </function>
    <function name="event_request_motions"
              c:identifier="gdk_event_request_motions"
              version="2.12">
      <doc xml:whitespace="preserve">Request more motion notifies if @event is a motion notify hint event.
This function should be used instead of gdk_window_get_pointer() to
request further motion notifies, because it also works for extension
events where motion notifies are provided for devices other than the
core pointer. Coordinate extraction, processing and requesting more
motion events from a %GDK_MOTION_NOTIFY event usually works like this:
|[
{ 
/&amp;ast; motion_event handler &amp;ast;/
x = motion_event-&gt;x;
y = motion_event-&gt;y;
/&amp;ast; handle (x,y) motion &amp;ast;/
gdk_event_request_motions (motion_event); /&amp;ast; handles is_hint events &amp;ast;/
}
]|</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="event" transfer-ownership="none">
          <doc xml:whitespace="preserve">a valid #GdkEvent</doc>
          <type name="EventMotion" c:type="GdkEventMotion*"/>
        </parameter>
      </parameters>
    </function>
    <function name="event_send_client_message_for_display"
              c:identifier="gdk_event_send_client_message_for_display"
              version="2.2">
      <doc xml:whitespace="preserve">On X11, sends an X ClientMessage event to a given window. On
Windows, sends a message registered with the name
GDK_WIN32_CLIENT_MESSAGE.
This could be used for communicating between different
applications, though the amount of data is limited to 20 bytes on
X11, and to just four bytes on Windows.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">non-zero on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="display" transfer-ownership="none">
          <doc xml:whitespace="preserve">the #GdkDisplay for the window where the message is to be sent.</doc>
          <type name="Display" c:type="GdkDisplay*"/>
        </parameter>
        <parameter name="event" transfer-ownership="none">
          <doc xml:whitespace="preserve">the #GdkEvent to send, which should be a #GdkEventClient.</doc>
          <type name="Event" c:type="GdkEvent*"/>
        </parameter>
        <parameter name="winid" transfer-ownership="none">
          <doc xml:whitespace="preserve">the window to send the client message to.</doc>
          <type name="NativeWindow" c:type="GdkNativeWindow"/>
        </parameter>
      </parameters>
    </function>
    <function name="events_pending" c:identifier="gdk_events_pending">
      <doc xml:whitespace="preserve">Checks if any events are ready to be processed for any display.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">%TRUE if any events are pending.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
    </function>
    <function name="flush" c:identifier="gdk_flush">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="free_compound_text" c:identifier="gdk_free_compound_text">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="ctext" transfer-ownership="none">
          <type name="guint8" c:type="guchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="free_text_list" c:identifier="gdk_free_text_list">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="list" transfer-ownership="none">
          <type name="utf8" c:type="gchar**"/>
        </parameter>
      </parameters>
    </function>
    <function name="get_default_root_window"
              c:identifier="gdk_get_default_root_window"
              introspectable="0">
      <doc xml:whitespace="preserve">Obtains the root window (parent all other windows are inside)
for the default display and screen.</doc>
      <return-value>
        <doc xml:whitespace="preserve">the default root window</doc>
        <type name="Window" c:type="GdkWindow*"/>
      </return-value>
    </function>
    <function name="get_display" c:identifier="gdk_get_display">
      <return-value transfer-ownership="full">
        <type name="utf8" c:type="gchar*"/>
      </return-value>
    </function>
    <function name="get_display_arg_name"
              c:identifier="gdk_get_display_arg_name">
      <return-value transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </return-value>
    </function>
    <function name="get_program_class" c:identifier="gdk_get_program_class">
      <return-value transfer-ownership="none">
        <type name="utf8" c:type="char*"/>
      </return-value>
    </function>
    <function name="get_show_events" c:identifier="gdk_get_show_events">
      <doc xml:whitespace="preserve">Gets whether event debugging output is enabled.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">%TRUE if event debugging output is enabled.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
    </function>
    <function name="init" c:identifier="gdk_init">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="argc"
                   direction="inout"
                   caller-allocates="0"
                   transfer-ownership="full">
          <type name="gint" c:type="gint*"/>
        </parameter>
        <parameter name="argv"
                   direction="inout"
                   caller-allocates="0"
                   transfer-ownership="full">
          <array length="0" c:type="gchar***">
            <type name="utf8"/>
          </array>
        </parameter>
      </parameters>
    </function>
    <function name="init_check" c:identifier="gdk_init_check">
      <doc xml:whitespace="preserve">Initialize the library for use.
Arguments:
"argc" is the number of arguments.
"argv" is an array of strings.
Results:
"argc" and "argv" are modified to reflect any arguments
which were not handled. (Such arguments should either
be handled by the application or dismissed). If initialization
fails, returns FALSE, otherwise TRUE.
Side effects:
The library is initialized.
--------------------------------------------------------------</doc>
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="argc"
                   direction="inout"
                   caller-allocates="0"
                   transfer-ownership="full">
          <type name="gint" c:type="gint*"/>
        </parameter>
        <parameter name="argv"
                   direction="inout"
                   caller-allocates="0"
                   transfer-ownership="full">
          <array length="0" c:type="gchar***">
            <type name="utf8"/>
          </array>
        </parameter>
      </parameters>
    </function>
    <function name="input_set_extension_events"
              c:identifier="gdk_input_set_extension_events"
              deprecated="Use gdk_window_set_device_events() instead."
              deprecated-version="3.0">
      <doc xml:whitespace="preserve">Turns extension events on or off for a particular window,
and specifies the event mask for extension events.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="window" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GdkWindow.</doc>
          <type name="Window" c:type="GdkWindow*"/>
        </parameter>
        <parameter name="mask" transfer-ownership="none">
          <doc xml:whitespace="preserve">the event mask</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="mode" transfer-ownership="none">
          <doc xml:whitespace="preserve">the type of extension events that are desired.</doc>
          <type name="ExtensionMode" c:type="GdkExtensionMode"/>
        </parameter>
      </parameters>
    </function>
    <function name="keyboard_grab"
              c:identifier="gdk_keyboard_grab"
              deprecated="Use gdk_device_grab() instead."
              deprecated-version="3.0">
      <doc xml:whitespace="preserve">Grabs the keyboard so that all events are passed to this
application until the keyboard is ungrabbed with gdk_keyboard_ungrab().
This overrides any previous keyboard grab by this client.
If you set up anything at the time you take the grab that needs to be cleaned
up when the grab ends, you should handle the #GdkEventGrabBroken events that
are emitted when the grab ends unvoluntarily.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">%GDK_GRAB_SUCCESS if the grab was successful.</doc>
        <type name="GrabStatus" c:type="GdkGrabStatus"/>
      </return-value>
      <parameters>
        <parameter name="window" transfer-ownership="none">
          <doc xml:whitespace="preserve">the #GdkWindow which will own the grab (the grab window).</doc>
          <type name="Window" c:type="GdkWindow*"/>
        </parameter>
        <parameter name="owner_events" transfer-ownership="none">
          <doc xml:whitespace="preserve">if %FALSE then all keyboard events are reported with respect to reported as normal, but keyboard events outside this application are reported with respect to @window. Both key press and key release events are always reported, independant of the event mask set by the application.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="time_" transfer-ownership="none">
          <type name="guint32" c:type="guint32"/>
        </parameter>
      </parameters>
    </function>
    <function name="keyboard_ungrab"
              c:identifier="gdk_keyboard_ungrab"
              deprecated="Use gdk_device_ungrab(), together with gdk_device_grab()"
              deprecated-version="3.0">
      <doc xml:whitespace="preserve">Ungrabs the keyboard on the default display, if it is grabbed by this 
application.
instead.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="time_" transfer-ownership="none">
          <doc xml:whitespace="preserve">a timestamp from a #GdkEvent, or %GDK_CURRENT_TIME if no timestamp is available.</doc>
          <type name="guint32" c:type="guint32"/>
        </parameter>
      </parameters>
    </function>
    <function name="keyval_convert_case"
              c:identifier="gdk_keyval_convert_case">
      <doc xml:whitespace="preserve">Obtains the upper- and lower-case versions of the keyval @symbol.
Examples of keyvals are #GDK_KEY_a, #GDK_KEY_Enter, #GDK_KEY_F1, etc.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="symbol" transfer-ownership="none">
          <doc xml:whitespace="preserve">a keyval</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="lower"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:whitespace="preserve">return location for lowercase version of @symbol</doc>
          <type name="guint" c:type="guint*"/>
        </parameter>
        <parameter name="upper"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:whitespace="preserve">return location for uppercase version of @symbol</doc>
          <type name="guint" c:type="guint*"/>
        </parameter>
      </parameters>
    </function>
    <function name="keyval_from_name" c:identifier="gdk_keyval_from_name">
      <return-value transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="keyval_name" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="keyval_is_lower" c:identifier="gdk_keyval_is_lower">
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="keyval" transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="keyval_is_upper" c:identifier="gdk_keyval_is_upper">
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="keyval" transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="keyval_name" c:identifier="gdk_keyval_name">
      <return-value transfer-ownership="full">
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="keyval" transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="keyval_to_lower" c:identifier="gdk_keyval_to_lower">
      <return-value transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="keyval" transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="keyval_to_unicode" c:identifier="gdk_keyval_to_unicode">
      <doc xml:whitespace="preserve">Convert from a GDK key symbol to the corresponding ISO10646 (Unicode)
character.
is no corresponding character.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">the corresponding unicode character, or 0 if there</doc>
        <type name="guint32" c:type="guint32"/>
      </return-value>
      <parameters>
        <parameter name="keyval" transfer-ownership="none">
          <doc xml:whitespace="preserve">a GDK key symbol</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="keyval_to_upper" c:identifier="gdk_keyval_to_upper">
      <return-value transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="keyval" transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="list_visuals" c:identifier="gdk_list_visuals">
      <doc xml:whitespace="preserve">Lists the available visuals for the default screen.
(See gdk_screen_list_visuals())
A visual describes a hardware image data format.
For example, a visual might support 24-bit color, or 8-bit color,
and might expect pixels to be in a certain format.
Call g_list_free() on the return value when you're finished with it.
a list of visuals; the list must be freed, but not its contents</doc>
      <return-value transfer-ownership="container">
        <type name="GLib.List" c:type="GList*">
          <type name="Visual"/>
        </type>
      </return-value>
    </function>
    <function name="notify_startup_complete"
              c:identifier="gdk_notify_startup_complete"
              version="2.2">
      <doc xml:whitespace="preserve">Indicates to the GUI environment that the application has finished
loading. If the applications opens windows, this function is
normally called after opening the application's initial set of
windows.
GTK+ will call this function automatically after opening the first
#GtkWindow unless gtk_window_set_auto_startup_notification() is called 
to disable that feature.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="notify_startup_complete_with_id"
              c:identifier="gdk_notify_startup_complete_with_id"
              version="2.12">
      <doc xml:whitespace="preserve">Indicates to the GUI environment that the application has finished
loading, using a given identifier.
GTK+ will call this function automatically for #GtkWindow with custom
startup-notification identifier unless
gtk_window_set_auto_startup_notification() is called to disable
that feature.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="startup_id" transfer-ownership="none">
          <doc xml:whitespace="preserve">a startup-notification identifier, for which notification process should be completed</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="offscreen_window_get_embedder"
              c:identifier="gdk_offscreen_window_get_embedder"
              version="2.18"
              introspectable="0">
      <doc xml:whitespace="preserve">Gets the window that @window is embedded in.
embedded offscreen window</doc>
      <return-value>
        <doc xml:whitespace="preserve">the embedding #GdkWindow, or %NULL if @window is not an</doc>
        <type name="Window" c:type="GdkWindow*"/>
      </return-value>
      <parameters>
        <parameter name="window" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GdkWindow</doc>
          <type name="Window" c:type="GdkWindow*"/>
        </parameter>
      </parameters>
    </function>
    <function name="offscreen_window_get_pixmap"
              c:identifier="gdk_offscreen_window_get_pixmap"
              version="2.18"
              introspectable="0">
      <doc xml:whitespace="preserve">Gets the offscreen pixmap that an offscreen window renders into.
If you need to keep this around over window resizes, you need to
add a reference to it.</doc>
      <return-value>
        <doc xml:whitespace="preserve">The offscreen pixmap, or %NULL if not offscreen</doc>
        <type name="Pixmap" c:type="GdkPixmap*"/>
      </return-value>
      <parameters>
        <parameter name="window" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GdkWindow</doc>
          <type name="Window" c:type="GdkWindow*"/>
        </parameter>
      </parameters>
    </function>
    <function name="offscreen_window_set_embedder"
              c:identifier="gdk_offscreen_window_set_embedder"
              version="2.18">
      <doc xml:whitespace="preserve">Sets @window to be embedded in @embedder.
To fully embed an offscreen window, in addition to calling this
function, it is also necessary to handle the #GdkWindow::pick-embedded-child
signal on the @embedder and the #GdkWindow::to-embedder and
#GdkWindow::from-embedder signals on @window.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="window" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GdkWindow</doc>
          <type name="Window" c:type="GdkWindow*"/>
        </parameter>
        <parameter name="embedder" transfer-ownership="none">
          <doc xml:whitespace="preserve">the #GdkWindow that @window gets embedded in</doc>
          <type name="Window" c:type="GdkWindow*"/>
        </parameter>
      </parameters>
    </function>
    <function name="pango_context_get"
              c:identifier="gdk_pango_context_get"
              introspectable="0">
      <doc xml:whitespace="preserve">Creates a #PangoContext for the default GDK screen.
The context must be freed when you're finished with it.
When using GTK+, normally you should use gtk_widget_get_pango_context()
instead of this function, to get the appropriate context for
the widget you intend to render text onto.
The newly created context will have the default font options (see
#cairo_font_options_t) for the default screen; if these options
change it will not be updated. Using gtk_widget_get_pango_context()
is more convenient if you want to keep a context around and track
changes to the screen's font rendering settings.</doc>
      <return-value>
        <doc xml:whitespace="preserve">a new #PangoContext for the default display</doc>
        <type name="Pango.Context" c:type="PangoContext*"/>
      </return-value>
    </function>
    <function name="pango_context_get_for_screen"
              c:identifier="gdk_pango_context_get_for_screen"
              version="2.2"
              introspectable="0">
      <doc xml:whitespace="preserve">Creates a #PangoContext for @screen.
The context must be freed when you're finished with it.
When using GTK+, normally you should use gtk_widget_get_pango_context()
instead of this function, to get the appropriate context for
the widget you intend to render text onto.
The newly created context will have the default font options
(see #cairo_font_options_t) for the screen; if these options
change it will not be updated. Using gtk_widget_get_pango_context()
is more convenient if you want to keep a context around and track
changes to the screen's font rendering settings.</doc>
      <return-value>
        <doc xml:whitespace="preserve">a new #PangoContext for @screen</doc>
        <type name="Pango.Context" c:type="PangoContext*"/>
      </return-value>
      <parameters>
        <parameter name="screen" transfer-ownership="none">
          <doc xml:whitespace="preserve">the #GdkScreen for which the context is to be created.</doc>
          <type name="Screen" c:type="GdkScreen*"/>
        </parameter>
      </parameters>
    </function>
    <function name="pango_layout_get_clip_region"
              c:identifier="gdk_pango_layout_get_clip_region">
      <doc xml:whitespace="preserve">Obtains a clip region which contains the areas where the given ranges
of text would be drawn. @x_origin and @y_origin are the top left point
to center the layout. @index_ranges should contain
ranges of bytes in the layout's text.
Note that the regions returned correspond to logical extents of the text
ranges, not ink extents. So the drawn layout may in fact touch areas out of
the clip region.  The clip region is mainly useful for highlightling parts
of text, such as when text is selected.</doc>
      <return-value transfer-ownership="full">
        <doc xml:whitespace="preserve">a clip region containing the given ranges</doc>
        <type name="cairo.Region" c:type="cairo_region_t*"/>
      </return-value>
      <parameters>
        <parameter name="layout" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #PangoLayout</doc>
          <type name="Pango.Layout" c:type="PangoLayout*"/>
        </parameter>
        <parameter name="x_origin" transfer-ownership="none">
          <doc xml:whitespace="preserve">X pixel where you intend to draw the layout with this clip</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="y_origin" transfer-ownership="none">
          <doc xml:whitespace="preserve">Y pixel where you intend to draw the layout with this clip</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="index_ranges" transfer-ownership="none">
          <doc xml:whitespace="preserve">array of byte indexes into the layout, where even members of array are start indexes and odd elements are end indexes</doc>
          <type name="gint" c:type="gint*"/>
        </parameter>
        <parameter name="n_ranges" transfer-ownership="none">
          <doc xml:whitespace="preserve">number of ranges in @index_ranges, i.e. half the size of @index_ranges</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="pango_layout_line_get_clip_region"
              c:identifier="gdk_pango_layout_line_get_clip_region">
      <doc xml:whitespace="preserve">Obtains a clip region which contains the areas where the given
ranges of text would be drawn. @x_origin and @y_origin are the top left
position of the layout. @index_ranges
should contain ranges of bytes in the layout's text. The clip
region will include space to the left or right of the line (to the
layout bounding box) if you have indexes above or below the indexes
contained inside the line. This is to draw the selection all the way
to the side of the layout. However, the clip region is in line coordinates,
not layout coordinates.
Note that the regions returned correspond to logical extents of the text
ranges, not ink extents. So the drawn line may in fact touch areas out of
the clip region.  The clip region is mainly useful for highlightling parts
of text, such as when text is selected.</doc>
      <return-value transfer-ownership="full">
        <doc xml:whitespace="preserve">a clip region containing the given ranges</doc>
        <type name="cairo.Region" c:type="cairo_region_t*"/>
      </return-value>
      <parameters>
        <parameter name="line" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #PangoLayoutLine</doc>
          <type name="Pango.LayoutLine" c:type="PangoLayoutLine*"/>
        </parameter>
        <parameter name="x_origin" transfer-ownership="none">
          <doc xml:whitespace="preserve">X pixel where you intend to draw the layout line with this clip</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="y_origin" transfer-ownership="none">
          <doc xml:whitespace="preserve">baseline pixel where you intend to draw the layout line with this clip</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="index_ranges" transfer-ownership="none">
          <doc xml:whitespace="preserve">array of byte indexes into the layout, where even members of array are start indexes and odd elements are end indexes</doc>
          <type name="gint" c:type="gint*"/>
        </parameter>
        <parameter name="n_ranges" transfer-ownership="none">
          <doc xml:whitespace="preserve">number of ranges in @index_ranges, i.e. half the size of @index_ranges</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="parse_args" c:identifier="gdk_parse_args" version="2.2">
      <doc xml:whitespace="preserve">Parse command line arguments, and store for future
use by calls to gdk_display_open().
Any arguments used by GDK are removed from the array and @argc and @argv are
updated accordingly.
You shouldn't call this function explicitely if you are using
gtk_init(), gtk_init_check(), gdk_init(), or gdk_init_check().</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="argc" transfer-ownership="none">
          <doc xml:whitespace="preserve">the number of command line arguments.</doc>
          <type name="gint" c:type="gint*"/>
        </parameter>
        <parameter name="argv" transfer-ownership="none">
          <doc xml:whitespace="preserve">the array of command line arguments.</doc>
          <type name="utf8" c:type="gchar***"/>
        </parameter>
      </parameters>
    </function>
    <function name="pixbuf_get_from_drawable"
              c:identifier="gdk_pixbuf_get_from_drawable"
              introspectable="0">
      <doc xml:whitespace="preserve">Transfers image data from a #GdkDrawable and converts it to an RGB(A)
representation inside a #GdkPixbuf. In other words, copies
image data from a server-side drawable to a client-side RGB(A) buffer.
This allows you to efficiently read individual pixels on the client side.
If the drawable @src has no colormap (gdk_drawable_get_colormap()
returns %NULL), then a suitable colormap must be specified.
Typically a #GdkWindow or a pixmap created by passing a #GdkWindow
to gdk_pixmap_new() will already have a colormap associated with
it.  If the drawable has a colormap, the @cmap argument will be
ignored.  If the drawable is a bitmap (1 bit per pixel pixmap),
then a colormap is not required; pixels with a value of 1 are
assumed to be white, and pixels with a value of 0 are assumed to be
black. For taking screenshots, gdk_colormap_get_system() returns
the correct colormap to use.
If the specified destination pixbuf @dest is %NULL, then this
function will create an RGB pixbuf with 8 bits per channel and no
alpha, with the same size specified by the @width and @height
arguments.  In this case, the @dest_x and @dest_y arguments must be
specified as 0.  If the specified destination pixbuf is not %NULL
and it contains alpha information, then the filled pixels will be
set to full opacity (alpha = 255).
If the specified drawable is a pixmap, then the requested source
rectangle must be completely contained within the pixmap, otherwise
the function will return %NULL. For pixmaps only (not for windows)
passing -1 for width or height is allowed to mean the full width
or height of the pixmap.
If the specified drawable is a window, and the window is off the
screen, then there is no image data in the obscured/offscreen
regions to be placed in the pixbuf. The contents of portions of the
pixbuf corresponding to the offscreen region are undefined.
If the window you're obtaining data from is partially obscured by
other windows, then the contents of the pixbuf areas corresponding
to the obscured regions are undefined.
If the target drawable is not mapped (typically because it's
iconified/minimized or not on the current workspace), then %NULL
will be returned.
If memory can't be allocated for the return value, %NULL will be returned
instead.
(In short, there are several ways this function can fail, and if it fails
it returns %NULL; so check the return value.)
pixbuf with a reference count of 1 if no destination pixbuf was specified, or %NULL on error</doc>
      <return-value>
        <doc xml:whitespace="preserve">The same pixbuf as @dest if it was non-%NULL, or a newly-created</doc>
        <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
      </return-value>
      <parameters>
        <parameter name="dest" transfer-ownership="none" allow-none="1">
          <doc xml:whitespace="preserve">Destination pixbuf, or %NULL if a new pixbuf should be created.</doc>
          <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
        </parameter>
        <parameter name="src" transfer-ownership="none">
          <doc xml:whitespace="preserve">Source drawable.</doc>
          <type name="Drawable" c:type="GdkDrawable*"/>
        </parameter>
        <parameter name="cmap" transfer-ownership="none">
          <doc xml:whitespace="preserve">A colormap if @src doesn't have one set.</doc>
          <type name="Colormap" c:type="GdkColormap*"/>
        </parameter>
        <parameter name="src_x" transfer-ownership="none">
          <doc xml:whitespace="preserve">Source X coordinate within drawable.</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="src_y" transfer-ownership="none">
          <doc xml:whitespace="preserve">Source Y coordinate within drawable.</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="dest_x" transfer-ownership="none">
          <doc xml:whitespace="preserve">Destination X coordinate in pixbuf, or 0 if @dest is NULL.</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="dest_y" transfer-ownership="none">
          <doc xml:whitespace="preserve">Destination Y coordinate in pixbuf, or 0 if @dest is NULL.</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="width" transfer-ownership="none">
          <doc xml:whitespace="preserve">Width in pixels of region to get.</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="height" transfer-ownership="none">
          <doc xml:whitespace="preserve">Height in pixels of region to get.</doc>
          <type name="gint" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="pixbuf_get_from_surface"
              c:identifier="gdk_pixbuf_get_from_surface"
              introspectable="0">
      <doc xml:whitespace="preserve">Transfers image data from a #cairo_surface_t and converts it to an RGB(A)
representation inside a #GdkPixbuf. This allows you to efficiently read individual
pixels from Cairo surfaces. For #GdkWindows, use gdk_pixbuf_get_from_drawable()
instead.
If the specified destination pixbuf @dest is %NULL, then this
function will create an RGB pixbuf with 8 bits per channel. The pixbuf will
contain an alpha channel if the @surface contains one. In this case, the @dest_x 
and @dest_y arguments must be specified as 0.
If the specified drawable is a window, and the window is off the
screen, then there is no image data in the obscured/offscreen
regions to be placed in the pixbuf. The contents of portions of the
pixbuf corresponding to the offscreen region are undefined.
If the window you're obtaining data from is partially obscured by
other windows, then the contents of the pixbuf areas corresponding
to the obscured regions are undefined.
If memory can't be allocated for the return value, %NULL will be returned
instead.
(In short, there are several ways this function can fail, and if it fails
it returns %NULL; so check the return value.)
pixbuf with a reference count of 1 if no destination pixbuf was specified, or %NULL on error</doc>
      <return-value>
        <doc xml:whitespace="preserve">The same pixbuf as @dest if it was non-%NULL, or a newly-created</doc>
        <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
      </return-value>
      <parameters>
        <parameter name="dest" transfer-ownership="none" allow-none="1">
          <doc xml:whitespace="preserve">Destination pixbuf, or %NULL if a new pixbuf should be created.</doc>
          <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
        </parameter>
        <parameter name="surface" transfer-ownership="none">
          <doc xml:whitespace="preserve">surface to copy from</doc>
          <type name="cairo.Surface" c:type="cairo_surface_t*"/>
        </parameter>
        <parameter name="src_x" transfer-ownership="none">
          <doc xml:whitespace="preserve">Source X coordinate within drawable.</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="src_y" transfer-ownership="none">
          <doc xml:whitespace="preserve">Source Y coordinate within drawable.</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="dest_x" transfer-ownership="none">
          <doc xml:whitespace="preserve">Destination X coordinate in pixbuf, or 0 if @dest is NULL.</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="dest_y" transfer-ownership="none">
          <doc xml:whitespace="preserve">Destination Y coordinate in pixbuf, or 0 if @dest is NULL.</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="width" transfer-ownership="none">
          <doc xml:whitespace="preserve">Width in pixels of region to get.</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="height" transfer-ownership="none">
          <doc xml:whitespace="preserve">Height in pixels of region to get.</doc>
          <type name="gint" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="pixbuf_render_pixmap_and_mask"
              c:identifier="gdk_pixbuf_render_pixmap_and_mask">
      <doc xml:whitespace="preserve">Creates a pixmap and a mask bitmap which are returned in the @pixmap_return
and @mask_return arguments, respectively, and renders a pixbuf and its
corresponding thresholded alpha mask to them.  This is merely a convenience
function; applications that need to render pixbufs with dither offsets or to
given drawables should use Cairo and gdk_pixbuf_render_threshold_alpha().
The pixmap that is created is created for the colormap returned
by gdk_colormap_get_system(). You normally will want to instead use
the actual colormap for a widget, and use
gdk_pixbuf_render_pixmap_and_mask_for_colormap().
If the pixbuf does not have an alpha channel, then *@mask_return will be set
to %NULL.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="pixbuf" transfer-ownership="none">
          <doc xml:whitespace="preserve">A pixbuf.</doc>
          <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
        </parameter>
        <parameter name="pixmap_return" transfer-ownership="none">
          <doc xml:whitespace="preserve">Location to store a pointer to the created pixmap, or %NULL if the pixmap is not needed.</doc>
          <type name="Pixmap" c:type="GdkPixmap**"/>
        </parameter>
        <parameter name="mask_return" transfer-ownership="none">
          <doc xml:whitespace="preserve">Location to store a pointer to the created mask, or %NULL if the mask is not needed.</doc>
          <type name="Bitmap" c:type="GdkBitmap**"/>
        </parameter>
        <parameter name="alpha_threshold" transfer-ownership="none">
          <doc xml:whitespace="preserve">Threshold value for opacity values.</doc>
          <type name="gint" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="pixbuf_render_pixmap_and_mask_for_colormap"
              c:identifier="gdk_pixbuf_render_pixmap_and_mask_for_colormap">
      <doc xml:whitespace="preserve">Creates a pixmap and a mask bitmap which are returned in the @pixmap_return
and @mask_return arguments, respectively, and renders a pixbuf and its
corresponding tresholded alpha mask to them.  This is merely a convenience
function; applications that need to render pixbufs with dither offsets or to
given drawables should use Cairo and gdk_pixbuf_render_threshold_alpha().
The pixmap that is created uses the #GdkColormap specified by @colormap.
This colormap must match the colormap of the window where the pixmap
will eventually be used or an error will result.
If the pixbuf does not have an alpha channel, then *@mask_return will be set
to %NULL.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="pixbuf" transfer-ownership="none">
          <doc xml:whitespace="preserve">A pixbuf.</doc>
          <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
        </parameter>
        <parameter name="colormap" transfer-ownership="none">
          <doc xml:whitespace="preserve">A #GdkColormap</doc>
          <type name="Colormap" c:type="GdkColormap*"/>
        </parameter>
        <parameter name="pixmap_return" transfer-ownership="none">
          <doc xml:whitespace="preserve">Location to store a pointer to the created pixmap, or %NULL if the pixmap is not needed.</doc>
          <type name="Pixmap" c:type="GdkPixmap**"/>
        </parameter>
        <parameter name="mask_return" transfer-ownership="none">
          <doc xml:whitespace="preserve">Location to store a pointer to the created mask, or %NULL if the mask is not needed.</doc>
          <type name="Bitmap" c:type="GdkBitmap**"/>
        </parameter>
        <parameter name="alpha_threshold" transfer-ownership="none">
          <doc xml:whitespace="preserve">Threshold value for opacity values.</doc>
          <type name="gint" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="pixbuf_render_threshold_alpha"
              c:identifier="gdk_pixbuf_render_threshold_alpha">
      <doc xml:whitespace="preserve">Takes the opacity values in a rectangular portion of a pixbuf and thresholds
them to produce a bi-level alpha mask that can be used as a clipping mask for
a drawable.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="pixbuf" transfer-ownership="none">
          <doc xml:whitespace="preserve">A pixbuf.</doc>
          <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
        </parameter>
        <parameter name="bitmap" transfer-ownership="none">
          <doc xml:whitespace="preserve">Bitmap where the bilevel mask will be painted to.</doc>
          <type name="Bitmap" c:type="GdkBitmap*"/>
        </parameter>
        <parameter name="src_x" transfer-ownership="none">
          <doc xml:whitespace="preserve">Source X coordinate.</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="src_y" transfer-ownership="none">
          <doc xml:whitespace="preserve">source Y coordinate.</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="dest_x" transfer-ownership="none">
          <doc xml:whitespace="preserve">Destination X coordinate.</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="dest_y" transfer-ownership="none">
          <doc xml:whitespace="preserve">Destination Y coordinate.</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="width" transfer-ownership="none">
          <doc xml:whitespace="preserve">Width of region to threshold, or -1 to use pixbuf width</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="height" transfer-ownership="none">
          <doc xml:whitespace="preserve">Height of region to threshold, or -1 to use pixbuf height</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="alpha_threshold" transfer-ownership="none">
          <doc xml:whitespace="preserve">Opacity values below this will be painted as zero; all other values will be painted as one.</doc>
          <type name="gint" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="pointer_grab"
              c:identifier="gdk_pointer_grab"
              deprecated="Use gdk_device_grab() instead."
              deprecated-version="3.0">
      <doc xml:whitespace="preserve">Grabs the pointer (usually a mouse) so that all events are passed to this
application until the pointer is ungrabbed with gdk_pointer_ungrab(), or
the grab window becomes unviewable.
This overrides any previous pointer grab by this client.
Pointer grabs are used for operations which need complete control over mouse
events, even if the mouse leaves the application.
For example in GTK+ it is used for Drag and Drop, for dragging the handle in
the #GtkHPaned and #GtkVPaned widgets, and for resizing columns in #GtkCList
widgets.
Note that if the event mask of an X window has selected both button press and
button release events, then a button press event will cause an automatic
pointer grab until the button is released.
X does this automatically since most applications expect to receive button
press and release events in pairs.
It is equivalent to a pointer grab on the window with @owner_events set to
%TRUE.
If you set up anything at the time you take the grab that needs to be cleaned
up when the grab ends, you should handle the #GdkEventGrabBroken events that
are emitted when the grab ends unvoluntarily.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">%GDK_GRAB_SUCCESS if the grab was successful.</doc>
        <type name="GrabStatus" c:type="GdkGrabStatus"/>
      </return-value>
      <parameters>
        <parameter name="window" transfer-ownership="none">
          <doc xml:whitespace="preserve">the #GdkWindow which will own the grab (the grab window).</doc>
          <type name="Window" c:type="GdkWindow*"/>
        </parameter>
        <parameter name="owner_events" transfer-ownership="none">
          <doc xml:whitespace="preserve">if %FALSE then all pointer events are reported with respect to events for this application are reported as normal, but pointer events outside this application are reported with respect to @window and only if selected by</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="event_mask" transfer-ownership="none">
          <doc xml:whitespace="preserve">specifies the event mask, which is used in accordance with may be selected.</doc>
          <type name="EventMask" c:type="GdkEventMask"/>
        </parameter>
        <parameter name="confine_to" transfer-ownership="none">
          <doc xml:whitespace="preserve">If non-%NULL, the pointer will be confined to this window during the grab. If the pointer is outside @confine_to, it will automatically be moved to the closest edge of @confine_to and enter and leave events will be generated as necessary.</doc>
          <type name="Window" c:type="GdkWindow*"/>
        </parameter>
        <parameter name="cursor" transfer-ownership="none">
          <doc xml:whitespace="preserve">the cursor to display while the grab is active. If this is %NULL then the normal cursors are used for @window and its descendants, and the cursor for @window is used for all other windows.</doc>
          <type name="Cursor" c:type="GdkCursor*"/>
        </parameter>
        <parameter name="time_" transfer-ownership="none">
          <doc xml:whitespace="preserve">the timestamp of the event which led to this pointer grab. This usually comes from a #GdkEventButton struct, though %GDK_CURRENT_TIME can be used if the time isn't known.</doc>
          <type name="guint32" c:type="guint32"/>
        </parameter>
      </parameters>
    </function>
    <function name="pointer_is_grabbed"
              c:identifier="gdk_pointer_is_grabbed"
              deprecated="Use gdk_display_device_is_grabbed() instead."
              deprecated-version="3.0">
      <doc xml:whitespace="preserve">Returns %TRUE if the pointer on the default display is currently 
grabbed by this application.
Note that this does not take the inmplicit pointer grab on button
presses into account.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">%TRUE if the pointer is currently grabbed by this application.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
    </function>
    <function name="pointer_ungrab"
              c:identifier="gdk_pointer_ungrab"
              deprecated="Use gdk_device_ungrab(), together with gdk_device_grab()"
              deprecated-version="3.0">
      <doc xml:whitespace="preserve">Ungrabs the pointer on the default display, if it is grabbed by this 
application.
instead.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="time_" transfer-ownership="none">
          <doc xml:whitespace="preserve">a timestamp from a #GdkEvent, or %GDK_CURRENT_TIME if no timestamp is available.</doc>
          <type name="guint32" c:type="guint32"/>
        </parameter>
      </parameters>
    </function>
    <function name="pre_parse_libgtk_only"
              c:identifier="gdk_pre_parse_libgtk_only">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="property_change" c:identifier="gdk_property_change">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="window" transfer-ownership="none">
          <type name="Window" c:type="GdkWindow*"/>
        </parameter>
        <parameter name="property" transfer-ownership="none">
          <type name="Atom" c:type="GdkAtom"/>
        </parameter>
        <parameter name="type" transfer-ownership="none">
          <type name="Atom" c:type="GdkAtom"/>
        </parameter>
        <parameter name="format" transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="mode" transfer-ownership="none">
          <type name="PropMode" c:type="GdkPropMode"/>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <type name="guint8" c:type="guchar*"/>
        </parameter>
        <parameter name="nelements" transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="property_delete" c:identifier="gdk_property_delete">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="window" transfer-ownership="none">
          <type name="Window" c:type="GdkWindow*"/>
        </parameter>
        <parameter name="property" transfer-ownership="none">
          <type name="Atom" c:type="GdkAtom"/>
        </parameter>
      </parameters>
    </function>
    <function name="property_get" c:identifier="gdk_property_get">
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="window" transfer-ownership="none">
          <type name="Window" c:type="GdkWindow*"/>
        </parameter>
        <parameter name="property" transfer-ownership="none">
          <type name="Atom" c:type="GdkAtom"/>
        </parameter>
        <parameter name="type" transfer-ownership="none">
          <type name="Atom" c:type="GdkAtom"/>
        </parameter>
        <parameter name="offset" transfer-ownership="none">
          <type name="gulong" c:type="gulong"/>
        </parameter>
        <parameter name="length" transfer-ownership="none">
          <type name="gulong" c:type="gulong"/>
        </parameter>
        <parameter name="pdelete" transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="actual_property_type" transfer-ownership="none">
          <type name="Atom" c:type="GdkAtom*"/>
        </parameter>
        <parameter name="actual_format" transfer-ownership="none">
          <type name="gint" c:type="gint*"/>
        </parameter>
        <parameter name="actual_length" transfer-ownership="none">
          <type name="gint" c:type="gint*"/>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <type name="guint8" c:type="guchar**"/>
        </parameter>
      </parameters>
    </function>
    <function name="query_depths" c:identifier="gdk_query_depths">
      <doc xml:whitespace="preserve">This function returns the available bit depths for the default
screen. It's equivalent to listing the visuals
(gdk_list_visuals()) and then looking at the depth field in each
visual, removing duplicates.
The array returned by this function should not be freed.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="depths"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:whitespace="preserve">return location for available depths</doc>
          <array c:type="gint**">
            <type name="gint"/>
          </array>
        </parameter>
        <parameter name="count"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:whitespace="preserve">return location for number of available depths</doc>
          <type name="gint" c:type="gint*"/>
        </parameter>
      </parameters>
    </function>
    <function name="query_visual_types" c:identifier="gdk_query_visual_types">
      <doc xml:whitespace="preserve">This function returns the available visual types for the default
screen. It's equivalent to listing the visuals
(gdk_list_visuals()) and then looking at the type field in each
visual, removing duplicates.
The array returned by this function should not be freed.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="visual_types" transfer-ownership="none">
          <doc xml:whitespace="preserve">return location for the available visual types</doc>
          <type name="VisualType" c:type="GdkVisualType**"/>
        </parameter>
        <parameter name="count" transfer-ownership="none">
          <doc xml:whitespace="preserve">return location for the number of available visual types</doc>
          <type name="gint" c:type="gint*"/>
        </parameter>
      </parameters>
    </function>
    <function name="rectangle_get_type" c:identifier="gdk_rectangle_get_type">
      <return-value transfer-ownership="none">
        <type name="GType" c:type="GType"/>
      </return-value>
    </function>
    <function name="rectangle_intersect"
              c:identifier="gdk_rectangle_intersect">
      <doc xml:whitespace="preserve">Calculates the intersection of two rectangles. It is allowed for
do not intersect, @dest's width and height is set to 0 and its x 
and y values are undefined. If you are only interested in whether
the rectangles intersect, but not in the intersecting area itself,
pass %NULL for @dest.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">%TRUE if the rectangles intersect.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="src1" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GdkRectangle</doc>
          <type name="Rectangle" c:type="GdkRectangle*"/>
        </parameter>
        <parameter name="src2" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GdkRectangle</doc>
          <type name="Rectangle" c:type="GdkRectangle*"/>
        </parameter>
        <parameter name="dest"
                   direction="out"
                   caller-allocates="1"
                   transfer-ownership="none"
                   allow-none="1">
          <doc xml:whitespace="preserve">return location for the intersection of @src1 and @src2, or %NULL</doc>
          <type name="Rectangle" c:type="GdkRectangle*"/>
        </parameter>
      </parameters>
    </function>
    <function name="rectangle_union" c:identifier="gdk_rectangle_union">
      <doc xml:whitespace="preserve">Calculates the union of two rectangles.
The union of rectangles @src1 and @src2 is the smallest rectangle which
includes both @src1 and @src2 within it.
It is allowed for @dest to be the same as either @src1 or @src2.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="src1" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GdkRectangle</doc>
          <type name="Rectangle" c:type="GdkRectangle*"/>
        </parameter>
        <parameter name="src2" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GdkRectangle</doc>
          <type name="Rectangle" c:type="GdkRectangle*"/>
        </parameter>
        <parameter name="dest" transfer-ownership="none">
          <doc xml:whitespace="preserve">return location for the union of @src1 and @src2</doc>
          <type name="Rectangle" c:type="GdkRectangle*"/>
        </parameter>
      </parameters>
    </function>
    <function name="selection_convert" c:identifier="gdk_selection_convert">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="requestor" transfer-ownership="none">
          <type name="Window" c:type="GdkWindow*"/>
        </parameter>
        <parameter name="selection" transfer-ownership="none">
          <type name="Atom" c:type="GdkAtom"/>
        </parameter>
        <parameter name="target" transfer-ownership="none">
          <type name="Atom" c:type="GdkAtom"/>
        </parameter>
        <parameter name="time_" transfer-ownership="none">
          <type name="guint32" c:type="guint32"/>
        </parameter>
      </parameters>
    </function>
    <function name="selection_owner_get"
              c:identifier="gdk_selection_owner_get"
              introspectable="0">
      <return-value>
        <type name="Window" c:type="GdkWindow*"/>
      </return-value>
      <parameters>
        <parameter name="selection" transfer-ownership="none">
          <type name="Atom" c:type="GdkAtom"/>
        </parameter>
      </parameters>
    </function>
    <function name="selection_owner_get_for_display"
              c:identifier="gdk_selection_owner_get_for_display"
              version="2.2"
              introspectable="0">
      <doc xml:whitespace="preserve">Determine the owner of the given selection.
Note that the return value may be owned by a different 
process if a foreign window was previously created for that
window, but a new foreign window will never be created by this call. 
window known to the current process, the #GdkWindow that owns the 
selection, otherwise %NULL.</doc>
      <return-value>
        <doc xml:whitespace="preserve">if there is a selection owner for this window, and it is a</doc>
        <type name="Window" c:type="GdkWindow*"/>
      </return-value>
      <parameters>
        <parameter name="display" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GdkDisplay.</doc>
          <type name="Display" c:type="GdkDisplay*"/>
        </parameter>
        <parameter name="selection" transfer-ownership="none">
          <doc xml:whitespace="preserve">an atom indentifying a selection.</doc>
          <type name="Atom" c:type="GdkAtom"/>
        </parameter>
      </parameters>
    </function>
    <function name="selection_owner_set"
              c:identifier="gdk_selection_owner_set">
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="owner" transfer-ownership="none">
          <type name="Window" c:type="GdkWindow*"/>
        </parameter>
        <parameter name="selection" transfer-ownership="none">
          <type name="Atom" c:type="GdkAtom"/>
        </parameter>
        <parameter name="time_" transfer-ownership="none">
          <type name="guint32" c:type="guint32"/>
        </parameter>
        <parameter name="send_event" transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="selection_owner_set_for_display"
              c:identifier="gdk_selection_owner_set_for_display"
              version="2.2">
      <doc xml:whitespace="preserve">Sets the #GdkWindow @owner as the current owner of the selection @selection.
otherwise %FALSE.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">%TRUE if the selection owner was successfully changed to owner,</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="display" transfer-ownership="none">
          <doc xml:whitespace="preserve">the #GdkDisplay.</doc>
          <type name="Display" c:type="GdkDisplay*"/>
        </parameter>
        <parameter name="owner" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GdkWindow or %NULL to indicate that the owner for the given should be unset.</doc>
          <type name="Window" c:type="GdkWindow*"/>
        </parameter>
        <parameter name="selection" transfer-ownership="none">
          <doc xml:whitespace="preserve">an atom identifying a selection.</doc>
          <type name="Atom" c:type="GdkAtom"/>
        </parameter>
        <parameter name="time_" transfer-ownership="none">
          <doc xml:whitespace="preserve">timestamp to use when setting the selection. If this is older than the timestamp given last time the owner was set for the given selection, the request will be ignored.</doc>
          <type name="guint32" c:type="guint32"/>
        </parameter>
        <parameter name="send_event" transfer-ownership="none">
          <doc xml:whitespace="preserve">if %TRUE, and the new owner is different from the current owner, the current owner will be sent a SelectionClear event.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="selection_property_get"
              c:identifier="gdk_selection_property_get">
      <doc xml:whitespace="preserve">Retrieves selection data that was stored by the selection
data in response to a call to gdk_selection_convert(). This function
will not be used by applications, who should use the #GtkClipboard
API instead.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">the length of the retrieved data.</doc>
        <type name="gint" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="requestor" transfer-ownership="none">
          <doc xml:whitespace="preserve">the window on which the data is stored</doc>
          <type name="Window" c:type="GdkWindow*"/>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <doc xml:whitespace="preserve">location to store a pointer to the retrieved data.</doc>
          <type name="guint8" c:type="guchar**"/>
        </parameter>
        <parameter name="prop_type" transfer-ownership="none">
          <doc xml:whitespace="preserve">location to store the type of the property.</doc>
          <type name="Atom" c:type="GdkAtom*"/>
        </parameter>
        <parameter name="prop_format" transfer-ownership="none">
          <doc xml:whitespace="preserve">location to store the format of the property.</doc>
          <type name="gint" c:type="gint*"/>
        </parameter>
      </parameters>
    </function>
    <function name="selection_send_notify"
              c:identifier="gdk_selection_send_notify">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="requestor" transfer-ownership="none">
          <type name="NativeWindow" c:type="GdkNativeWindow"/>
        </parameter>
        <parameter name="selection" transfer-ownership="none">
          <type name="Atom" c:type="GdkAtom"/>
        </parameter>
        <parameter name="target" transfer-ownership="none">
          <type name="Atom" c:type="GdkAtom"/>
        </parameter>
        <parameter name="property" transfer-ownership="none">
          <type name="Atom" c:type="GdkAtom"/>
        </parameter>
        <parameter name="time_" transfer-ownership="none">
          <type name="guint32" c:type="guint32"/>
        </parameter>
      </parameters>
    </function>
    <function name="selection_send_notify_for_display"
              c:identifier="gdk_selection_send_notify_for_display"
              version="2.2">
      <doc xml:whitespace="preserve">Send a response to SelectionRequest event.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="display" transfer-ownership="none">
          <doc xml:whitespace="preserve">the #GdkDisplay where @requestor is realized</doc>
          <type name="Display" c:type="GdkDisplay*"/>
        </parameter>
        <parameter name="requestor" transfer-ownership="none">
          <doc xml:whitespace="preserve">window to which to deliver response.</doc>
          <type name="NativeWindow" c:type="GdkNativeWindow"/>
        </parameter>
        <parameter name="selection" transfer-ownership="none">
          <doc xml:whitespace="preserve">selection that was requested.</doc>
          <type name="Atom" c:type="GdkAtom"/>
        </parameter>
        <parameter name="target" transfer-ownership="none">
          <doc xml:whitespace="preserve">target that was selected.</doc>
          <type name="Atom" c:type="GdkAtom"/>
        </parameter>
        <parameter name="property" transfer-ownership="none">
          <doc xml:whitespace="preserve">property in which the selection owner stored the data, or %GDK_NONE to indicate that the request was rejected.</doc>
          <type name="Atom" c:type="GdkAtom"/>
        </parameter>
        <parameter name="time_" transfer-ownership="none">
          <doc xml:whitespace="preserve">timestamp.</doc>
          <type name="guint32" c:type="guint32"/>
        </parameter>
      </parameters>
    </function>
    <function name="set_double_click_time"
              c:identifier="gdk_set_double_click_time">
      <doc xml:whitespace="preserve">Set the double click time for the default display. See
gdk_display_set_double_click_time(). 
See also gdk_display_set_double_click_distance().
Applications should &lt;emphasis&gt;not&lt;/emphasis&gt; set this, it is a 
global user-configured setting.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="msec" transfer-ownership="none">
          <doc xml:whitespace="preserve">double click time in milliseconds (thousandths of a second)</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="set_locale" c:identifier="gdk_set_locale">
      <return-value transfer-ownership="full">
        <type name="utf8" c:type="gchar*"/>
      </return-value>
    </function>
    <function name="set_pointer_hooks"
              c:identifier="gdk_set_pointer_hooks"
              introspectable="0"
              deprecated="Use gdk_display_set_device_hooks() instead."
              deprecated-version="3.0">
      <doc xml:whitespace="preserve">This function allows for hooking into the operation
of getting the current location of the pointer. This
is only useful for such low-level tools as an
event recorder. Applications should never have any
reason to use this facility.
This function is not multihead safe. For multihead operation,
see gdk_display_set_pointer_hooks().</doc>
      <return-value>
        <doc xml:whitespace="preserve">the previous pointer hook table</doc>
        <type name="PointerHooks" c:type="GdkPointerHooks*"/>
      </return-value>
      <parameters>
        <parameter name="new_hooks" transfer-ownership="none">
          <doc xml:whitespace="preserve">a table of pointers to functions for getting quantities related to the current pointer position, or %NULL to restore the default table.</doc>
          <type name="PointerHooks" c:type="GdkPointerHooks*"/>
        </parameter>
      </parameters>
    </function>
    <function name="set_program_class" c:identifier="gdk_set_program_class">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="program_class" transfer-ownership="none">
          <type name="utf8" c:type="char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="set_show_events" c:identifier="gdk_set_show_events">
      <doc xml:whitespace="preserve">Sets whether a trace of received events is output.
Note that GTK+ must be compiled with debugging (that is,
configured using the &lt;option&gt;--enable-debug&lt;/option&gt; option)
to use this option.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="show_events" transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE to output event debugging information.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="set_sm_client_id" c:identifier="gdk_set_sm_client_id">
      <doc xml:whitespace="preserve">Sets the &lt;literal&gt;SM_CLIENT_ID&lt;/literal&gt; property on the application's leader window so that
the window manager can save the application's state using the X11R6 ICCCM
session management protocol.
See the X Session Management Library documentation for more information on
session management and the Inter-Client Communication Conventions Manual
(ICCCM) for information on the &lt;literal&gt;WM_CLIENT_LEADER&lt;/literal&gt; property. 
(Both documents are part of the X Window System distribution.)</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="sm_client_id" transfer-ownership="none">
          <doc xml:whitespace="preserve">the client id assigned by the session manager when the connection was opened, or %NULL to remove the property.</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="setting_get" c:identifier="gdk_setting_get">
      <doc xml:whitespace="preserve">Obtains a desktop-wide setting, such as the double-click time,
for the default screen. See gdk_screen_get_setting().
in @value, %FALSE otherwise.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">%TRUE if the setting existed and a value was stored</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:whitespace="preserve">the name of the setting.</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <doc xml:whitespace="preserve">location to store the value of the setting.</doc>
          <type name="GObject.Value" c:type="GValue*"/>
        </parameter>
      </parameters>
    </function>
    <function name="spawn_command_line_on_screen"
              c:identifier="gdk_spawn_command_line_on_screen"
              version="2.4"
              throws="1">
      <doc xml:whitespace="preserve">Like g_spawn_command_line_async(), except the child process is
spawned in such an environment that on calling gdk_display_open()
it would be returned a #GdkDisplay with @screen as the default
screen.
This is useful for applications which wish to launch an application
on a specific screen.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">%TRUE on success, %FALSE if error is set.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="screen" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GdkScreen</doc>
          <type name="Screen" c:type="GdkScreen*"/>
        </parameter>
        <parameter name="command_line" transfer-ownership="none">
          <doc xml:whitespace="preserve">a command line</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="spawn_on_screen"
              c:identifier="gdk_spawn_on_screen"
              version="2.4"
              introspectable="0"
              throws="1">
      <doc xml:whitespace="preserve">Like g_spawn_async(), except the child process is spawned in such
an environment that on calling gdk_display_open() it would be
returned a #GdkDisplay with @screen as the default screen.
This is useful for applications which wish to launch an application
on a specific screen.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">%TRUE on success, %FALSE if error is set</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="screen" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GdkScreen</doc>
          <type name="Screen" c:type="GdkScreen*"/>
        </parameter>
        <parameter name="working_directory" transfer-ownership="none">
          <doc xml:whitespace="preserve">child's current working directory, or %NULL to inherit parent's</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="argv" transfer-ownership="none">
          <doc xml:whitespace="preserve">child's argument vector</doc>
          <type name="utf8" c:type="gchar**"/>
        </parameter>
        <parameter name="envp" transfer-ownership="none">
          <doc xml:whitespace="preserve">child's environment, or %NULL to inherit parent's</doc>
          <type name="utf8" c:type="gchar**"/>
        </parameter>
        <parameter name="flags" transfer-ownership="none">
          <doc xml:whitespace="preserve">flags from #GSpawnFlags</doc>
          <type name="GLib.SpawnFlags" c:type="GSpawnFlags"/>
        </parameter>
        <parameter name="child_setup" transfer-ownership="none" closure="6">
          <doc xml:whitespace="preserve">function to run in the child just before exec()</doc>
          <type name="GLib.SpawnChildSetupFunc" c:type="GSpawnChildSetupFunc"/>
        </parameter>
        <parameter name="user_data" transfer-ownership="none">
          <doc xml:whitespace="preserve">user data for @child_setup</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="child_pid" transfer-ownership="none">
          <doc xml:whitespace="preserve">return location for child process ID, or %NULL</doc>
          <type name="GLib.Pid" c:type="GPid*"/>
        </parameter>
      </parameters>
    </function>
    <function name="spawn_on_screen_with_pipes"
              c:identifier="gdk_spawn_on_screen_with_pipes"
              version="2.4"
              introspectable="0"
              throws="1">
      <doc xml:whitespace="preserve">Like g_spawn_async_with_pipes(), except the child process is
spawned in such an environment that on calling gdk_display_open()
it would be returned a #GdkDisplay with @screen as the default
screen.
This is useful for applications which wish to launch an application
on a specific screen.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">%TRUE on success, %FALSE if an error was set</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="screen" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GdkScreen</doc>
          <type name="Screen" c:type="GdkScreen*"/>
        </parameter>
        <parameter name="working_directory" transfer-ownership="none">
          <doc xml:whitespace="preserve">child's current working directory, or %NULL to inherit parent's</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="argv" transfer-ownership="none">
          <doc xml:whitespace="preserve">child's argument vector</doc>
          <type name="utf8" c:type="gchar**"/>
        </parameter>
        <parameter name="envp" transfer-ownership="none">
          <doc xml:whitespace="preserve">child's environment, or %NULL to inherit parent's</doc>
          <type name="utf8" c:type="gchar**"/>
        </parameter>
        <parameter name="flags" transfer-ownership="none">
          <doc xml:whitespace="preserve">flags from #GSpawnFlags</doc>
          <type name="GLib.SpawnFlags" c:type="GSpawnFlags"/>
        </parameter>
        <parameter name="child_setup" transfer-ownership="none" closure="6">
          <doc xml:whitespace="preserve">function to run in the child just before exec()</doc>
          <type name="GLib.SpawnChildSetupFunc" c:type="GSpawnChildSetupFunc"/>
        </parameter>
        <parameter name="user_data" transfer-ownership="none">
          <doc xml:whitespace="preserve">user data for @child_setup</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="child_pid" transfer-ownership="none">
          <doc xml:whitespace="preserve">return location for child process ID, or %NULL</doc>
          <type name="GLib.Pid" c:type="GPid*"/>
        </parameter>
        <parameter name="standard_input" transfer-ownership="none">
          <doc xml:whitespace="preserve">return location for file descriptor to write to child's stdin, or %NULL</doc>
          <type name="gint" c:type="gint*"/>
        </parameter>
        <parameter name="standard_output" transfer-ownership="none">
          <doc xml:whitespace="preserve">return location for file descriptor to read child's stdout, or %NULL</doc>
          <type name="gint" c:type="gint*"/>
        </parameter>
        <parameter name="standard_error" transfer-ownership="none">
          <doc xml:whitespace="preserve">return location for file descriptor to read child's stderr, or %NULL</doc>
          <type name="gint" c:type="gint*"/>
        </parameter>
      </parameters>
    </function>
    <function name="string_to_compound_text"
              c:identifier="gdk_string_to_compound_text">
      <return-value transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="str" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="encoding" transfer-ownership="none">
          <type name="Atom" c:type="GdkAtom*"/>
        </parameter>
        <parameter name="format" transfer-ownership="none">
          <type name="gint" c:type="gint*"/>
        </parameter>
        <parameter name="ctext" transfer-ownership="none">
          <type name="guint8" c:type="guchar**"/>
        </parameter>
        <parameter name="length" transfer-ownership="none">
          <type name="gint" c:type="gint*"/>
        </parameter>
      </parameters>
    </function>
    <function name="string_to_compound_text_for_display"
              c:identifier="gdk_string_to_compound_text_for_display"
              version="2.2">
      <doc xml:whitespace="preserve">Convert a string from the encoding of the current 
locale into a form suitable for storing in a window property.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">0 upon success, non-zero upon failure.</doc>
        <type name="gint" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="display" transfer-ownership="none">
          <doc xml:whitespace="preserve">the #GdkDisplay where the encoding is defined.</doc>
          <type name="Display" c:type="GdkDisplay*"/>
        </parameter>
        <parameter name="str" transfer-ownership="none">
          <doc xml:whitespace="preserve">a nul-terminated string.</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="encoding" transfer-ownership="none">
          <doc xml:whitespace="preserve">location to store the encoding atom (to be used as the type for the property).</doc>
          <type name="Atom" c:type="GdkAtom*"/>
        </parameter>
        <parameter name="format" transfer-ownership="none">
          <doc xml:whitespace="preserve">location to store the format of the property</doc>
          <type name="gint" c:type="gint*"/>
        </parameter>
        <parameter name="ctext" transfer-ownership="none">
          <doc xml:whitespace="preserve">location to store newly allocated data for the property.</doc>
          <type name="guint8" c:type="guchar**"/>
        </parameter>
        <parameter name="length" transfer-ownership="none">
          <doc xml:whitespace="preserve">the length of @text, in bytes</doc>
          <type name="gint" c:type="gint*"/>
        </parameter>
      </parameters>
    </function>
    <function name="synthesize_window_state"
              c:identifier="gdk_synthesize_window_state">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="window" transfer-ownership="none">
          <type name="Window" c:type="GdkWindow*"/>
        </parameter>
        <parameter name="unset_flags" transfer-ownership="none">
          <type name="WindowState" c:type="GdkWindowState"/>
        </parameter>
        <parameter name="set_flags" transfer-ownership="none">
          <type name="WindowState" c:type="GdkWindowState"/>
        </parameter>
      </parameters>
    </function>
    <function name="test_render_sync"
              c:identifier="gdk_test_render_sync"
              version="2.14">
      <doc xml:whitespace="preserve">This function retrieves a pixel from @window to force the windowing
system to carry out any pending rendering commands.
This function is intended to be used to syncronize with rendering
pipelines, to benchmark windowing system rendering operations.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="window" transfer-ownership="none">
          <doc xml:whitespace="preserve">a mapped #GdkWindow</doc>
          <type name="Window" c:type="GdkWindow*"/>
        </parameter>
      </parameters>
    </function>
    <function name="test_simulate_button"
              c:identifier="gdk_test_simulate_button">
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="window" transfer-ownership="none">
          <type name="Window" c:type="GdkWindow*"/>
        </parameter>
        <parameter name="x" transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="y" transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="button" transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="modifiers" transfer-ownership="none">
          <type name="ModifierType" c:type="GdkModifierType"/>
        </parameter>
        <parameter name="button_pressrelease" transfer-ownership="none">
          <type name="EventType" c:type="GdkEventType"/>
        </parameter>
      </parameters>
    </function>
    <function name="test_simulate_key" c:identifier="gdk_test_simulate_key">
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="window" transfer-ownership="none">
          <type name="Window" c:type="GdkWindow*"/>
        </parameter>
        <parameter name="x" transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="y" transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="keyval" transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="modifiers" transfer-ownership="none">
          <type name="ModifierType" c:type="GdkModifierType"/>
        </parameter>
        <parameter name="key_pressrelease" transfer-ownership="none">
          <type name="EventType" c:type="GdkEventType"/>
        </parameter>
      </parameters>
    </function>
    <function name="text_property_to_text_list"
              c:identifier="gdk_text_property_to_text_list">
      <return-value transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="encoding" transfer-ownership="none">
          <type name="Atom" c:type="GdkAtom"/>
        </parameter>
        <parameter name="format" transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="text" transfer-ownership="none">
          <type name="guint8" c:type="guchar*"/>
        </parameter>
        <parameter name="length" transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="list" transfer-ownership="none">
          <type name="utf8" c:type="gchar***"/>
        </parameter>
      </parameters>
    </function>
    <function name="text_property_to_text_list_for_display"
              c:identifier="gdk_text_property_to_text_list_for_display"
              version="2.2">
      <doc xml:whitespace="preserve">Convert a text string from the encoding as it is stored 
in a property into an array of strings in the encoding of
the current locale. (The elements of the array represent the
nul-separated elements of the original text string.)
if the conversion failed.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">the number of strings stored in list, or 0,</doc>
        <type name="gint" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="display" transfer-ownership="none">
          <doc xml:whitespace="preserve">The #GdkDisplay where the encoding is defined.</doc>
          <type name="Display" c:type="GdkDisplay*"/>
        </parameter>
        <parameter name="encoding" transfer-ownership="none">
          <doc xml:whitespace="preserve">an atom representing the encoding. The most common values for this are STRING, or COMPOUND_TEXT. This is value used as the type for the property.</doc>
          <type name="Atom" c:type="GdkAtom"/>
        </parameter>
        <parameter name="format" transfer-ownership="none">
          <doc xml:whitespace="preserve">the format of the property.</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="text" transfer-ownership="none">
          <doc xml:whitespace="preserve">The text data.</doc>
          <type name="guint8" c:type="guchar*"/>
        </parameter>
        <parameter name="length" transfer-ownership="none">
          <doc xml:whitespace="preserve">The number of items to transform.</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="list" transfer-ownership="none">
          <doc xml:whitespace="preserve">location to store a terminated array of strings in the encoding of the current locale. This array should be freed using gdk_free_text_list().</doc>
          <type name="utf8" c:type="gchar***"/>
        </parameter>
      </parameters>
    </function>
    <function name="text_property_to_utf8_list"
              c:identifier="gdk_text_property_to_utf8_list">
      <doc xml:whitespace="preserve">Convert a text property in the giving encoding to
a list of UTF-8 strings. 
list.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">the number of strings in the resulting</doc>
        <type name="gint" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="encoding" transfer-ownership="none">
          <doc xml:whitespace="preserve">an atom representing the encoding of the text</doc>
          <type name="Atom" c:type="GdkAtom"/>
        </parameter>
        <parameter name="format" transfer-ownership="none">
          <doc xml:whitespace="preserve">the format of the property</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="text" transfer-ownership="none">
          <doc xml:whitespace="preserve">the text to convert</doc>
          <type name="guint8" c:type="guchar*"/>
        </parameter>
        <parameter name="length" transfer-ownership="none">
          <doc xml:whitespace="preserve">the length of @text, in bytes</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="list" transfer-ownership="none" allow-none="1">
          <doc xml:whitespace="preserve">location to store the list of strings or %NULL. The list should be freed with g_strfreev().</doc>
          <type name="utf8" c:type="gchar***"/>
        </parameter>
      </parameters>
    </function>
    <function name="text_property_to_utf8_list_for_display"
              c:identifier="gdk_text_property_to_utf8_list_for_display"
              version="2.2">
      <doc xml:whitespace="preserve">Converts a text property in the given encoding to
a list of UTF-8 strings. 
list.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">the number of strings in the resulting</doc>
        <type name="gint" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="display" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GdkDisplay</doc>
          <type name="Display" c:type="GdkDisplay*"/>
        </parameter>
        <parameter name="encoding" transfer-ownership="none">
          <doc xml:whitespace="preserve">an atom representing the encoding of the text</doc>
          <type name="Atom" c:type="GdkAtom"/>
        </parameter>
        <parameter name="format" transfer-ownership="none">
          <doc xml:whitespace="preserve">the format of the property</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="text" transfer-ownership="none">
          <doc xml:whitespace="preserve">the text to convert</doc>
          <type name="guint8" c:type="guchar*"/>
        </parameter>
        <parameter name="length" transfer-ownership="none">
          <doc xml:whitespace="preserve">the length of @text, in bytes</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="list" transfer-ownership="none">
          <doc xml:whitespace="preserve">location to store the list of strings or %NULL. The list should be freed with g_strfreev().</doc>
          <type name="utf8" c:type="gchar***"/>
        </parameter>
      </parameters>
    </function>
    <function name="threads_add_idle"
              c:identifier="gdk_threads_add_idle"
              version="2.12"
              introspectable="0">
      <doc xml:whitespace="preserve">A wrapper for the common usage of gdk_threads_add_idle_full() 
assigning the default priority, #G_PRIORITY_DEFAULT_IDLE.
See gdk_threads_add_idle_full().</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">the ID (greater than 0) of the event source.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="function" transfer-ownership="none" closure="1">
          <doc xml:whitespace="preserve">function to call</doc>
          <type name="GLib.SourceFunc" c:type="GSourceFunc"/>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <doc xml:whitespace="preserve">data to pass to @function</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="threads_add_idle_full"
              c:identifier="gdk_threads_add_idle_full"
              version="2.12">
      <doc xml:whitespace="preserve">Adds a function to be called whenever there are no higher priority
events pending.  If the function returns %FALSE it is automatically
removed from the list of event sources and will not be called again.
This variant of g_idle_add_full() calls @function with the GDK lock
held. It can be thought of a MT-safe version for GTK+ widgets for the 
following use case, where you have to worry about idle_callback()
running in thread A and accessing @self after it has been finalized
in thread B:
|[
static gboolean
idle_callback (gpointer data)
{
/&amp;ast; gdk_threads_enter(); would be needed for g_idle_add() &amp;ast;/
SomeWidget *self = data;
/&amp;ast; do stuff with self &amp;ast;/
self-&gt;idle_id = 0;
/&amp;ast; gdk_threads_leave(); would be needed for g_idle_add() &amp;ast;/
return FALSE;
}
static void
some_widget_do_stuff_later (SomeWidget *self)
{
self-&gt;idle_id = gdk_threads_add_idle (idle_callback, self)
/&amp;ast; using g_idle_add() here would require thread protection in the callback &amp;ast;/
}
static void
some_widget_finalize (GObject *object)
{
SomeWidget *self = SOME_WIDGET (object);
if (self-&gt;idle_id)
g_source_remove (self-&gt;idle_id);
G_OBJECT_CLASS (parent_class)-&gt;finalize (object);
}
]|</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">the ID (greater than 0) of the event source.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="priority" transfer-ownership="none">
          <doc xml:whitespace="preserve">the priority of the idle source. Typically this will be in the range btweeen #G_PRIORITY_DEFAULT_IDLE and #G_PRIORITY_HIGH_IDLE</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="function"
                   transfer-ownership="none"
                   scope="notified"
                   closure="2"
                   destroy="3">
          <doc xml:whitespace="preserve">function to call</doc>
          <type name="GLib.SourceFunc" c:type="GSourceFunc"/>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <doc xml:whitespace="preserve">data to pass to @function</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="notify"
                   transfer-ownership="none"
                   allow-none="1"
                   scope="async">
          <doc xml:whitespace="preserve">function to call when the idle is removed, or %NULL</doc>
          <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
        </parameter>
      </parameters>
    </function>
    <function name="threads_add_timeout"
              c:identifier="gdk_threads_add_timeout"
              version="2.12"
              introspectable="0">
      <doc xml:whitespace="preserve">A wrapper for the common usage of gdk_threads_add_timeout_full() 
assigning the default priority, #G_PRIORITY_DEFAULT.
See gdk_threads_add_timeout_full().</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">the ID (greater than 0) of the event source.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="interval" transfer-ownership="none">
          <doc xml:whitespace="preserve">the time between calls to the function, in milliseconds (1/1000ths of a second)</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="function" transfer-ownership="none" closure="2">
          <doc xml:whitespace="preserve">function to call</doc>
          <type name="GLib.SourceFunc" c:type="GSourceFunc"/>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <doc xml:whitespace="preserve">data to pass to @function</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="threads_add_timeout_full"
              c:identifier="gdk_threads_add_timeout_full"
              version="2.12">
      <doc xml:whitespace="preserve">Sets a function to be called at regular intervals holding the GDK lock,
with the given priority.  The function is called repeatedly until it 
returns %FALSE, at which point the timeout is automatically destroyed 
and the function will not be called again.  The @notify function is
called when the timeout is destroyed.  The first call to the
function will be at the end of the first @interval.
Note that timeout functions may be delayed, due to the processing of other
event sources. Thus they should not be relied on for precise timing.
After each call to the timeout function, the time of the next
timeout is recalculated based on the current time and the given interval
(it does not try to 'catch up' time lost in delays).
This variant of g_timeout_add_full() can be thought of a MT-safe version 
for GTK+ widgets for the following use case:
|[
static gboolean timeout_callback (gpointer data)
{
SomeWidget *self = data;
/&amp;ast; do stuff with self &amp;ast;/
self-&gt;timeout_id = 0;
return FALSE;
}
static void some_widget_do_stuff_later (SomeWidget *self)
{
self-&gt;timeout_id = g_timeout_add (timeout_callback, self)
}
static void some_widget_finalize (GObject *object)
{
SomeWidget *self = SOME_WIDGET (object);
if (self-&gt;timeout_id)
g_source_remove (self-&gt;timeout_id);
G_OBJECT_CLASS (parent_class)-&gt;finalize (object);
}
]|</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">the ID (greater than 0) of the event source.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="priority" transfer-ownership="none">
          <doc xml:whitespace="preserve">the priority of the timeout source. Typically this will be in the range between #G_PRIORITY_DEFAULT_IDLE and #G_PRIORITY_HIGH_IDLE.</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="interval" transfer-ownership="none">
          <doc xml:whitespace="preserve">the time between calls to the function, in milliseconds (1/1000ths of a second)</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="function"
                   transfer-ownership="none"
                   scope="notified"
                   closure="3"
                   destroy="4">
          <doc xml:whitespace="preserve">function to call</doc>
          <type name="GLib.SourceFunc" c:type="GSourceFunc"/>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <doc xml:whitespace="preserve">data to pass to @function</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="notify"
                   transfer-ownership="none"
                   allow-none="1"
                   scope="async">
          <doc xml:whitespace="preserve">function to call when the timeout is removed, or %NULL</doc>
          <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
        </parameter>
      </parameters>
    </function>
    <function name="threads_add_timeout_seconds"
              c:identifier="gdk_threads_add_timeout_seconds"
              version="2.14"
              introspectable="0">
      <doc xml:whitespace="preserve">A wrapper for the common usage of gdk_threads_add_timeout_seconds_full() 
assigning the default priority, #G_PRIORITY_DEFAULT.
For details, see gdk_threads_add_timeout_full().</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">the ID (greater than 0) of the event source.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="interval" transfer-ownership="none">
          <doc xml:whitespace="preserve">the time between calls to the function, in seconds</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="function" transfer-ownership="none" closure="2">
          <doc xml:whitespace="preserve">function to call</doc>
          <type name="GLib.SourceFunc" c:type="GSourceFunc"/>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <doc xml:whitespace="preserve">data to pass to @function</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="threads_add_timeout_seconds_full"
              c:identifier="gdk_threads_add_timeout_seconds_full"
              version="2.14">
      <doc xml:whitespace="preserve">A variant of gdk_threads_add_timout_full() with second-granularity.
See g_timeout_add_seconds_full() for a discussion of why it is
a good idea to use this function if you don't need finer granularity.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">the ID (greater than 0) of the event source.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="priority" transfer-ownership="none">
          <doc xml:whitespace="preserve">the priority of the timeout source. Typically this will be in the range between #G_PRIORITY_DEFAULT_IDLE and #G_PRIORITY_HIGH_IDLE.</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="interval" transfer-ownership="none">
          <doc xml:whitespace="preserve">the time between calls to the function, in seconds</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="function"
                   transfer-ownership="none"
                   scope="notified"
                   closure="3"
                   destroy="4">
          <doc xml:whitespace="preserve">function to call</doc>
          <type name="GLib.SourceFunc" c:type="GSourceFunc"/>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <doc xml:whitespace="preserve">data to pass to @function</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="notify"
                   transfer-ownership="none"
                   allow-none="1"
                   scope="async">
          <doc xml:whitespace="preserve">function to call when the timeout is removed, or %NULL</doc>
          <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
        </parameter>
      </parameters>
    </function>
    <function name="threads_enter" c:identifier="gdk_threads_enter">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="threads_init" c:identifier="gdk_threads_init">
      <doc xml:whitespace="preserve">Initializes GDK so that it can be used from multiple threads
in conjunction with gdk_threads_enter() and gdk_threads_leave().
g_thread_init() must be called previous to this function.
This call must be made before any use of the main loop from
GTK+; to be safe, call it before gtk_init().</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="threads_leave" c:identifier="gdk_threads_leave">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="threads_set_lock_functions"
              c:identifier="gdk_threads_set_lock_functions"
              version="2.4"
              introspectable="0">
      <doc xml:whitespace="preserve">Allows the application to replace the standard method that
GDK uses to protect its data structures. Normally, GDK
creates a single #GMutex that is locked by gdk_threads_enter(),
and released by gdk_threads_leave(); using this function an
application provides, instead, a function @enter_fn that is
called by gdk_threads_enter() and a function @leave_fn that is
called by gdk_threads_leave().
The functions must provide at least same locking functionality
as the default implementation, but can also do extra application
specific processing.
As an example, consider an application that has its own recursive
lock that when held, holds the GTK+ lock as well. When GTK+ unlocks
the GTK+ lock when entering a recursive main loop, the application
must temporarily release its lock as well.
Most threaded GTK+ apps won't need to use this method.
This method must be called before gdk_threads_init(), and cannot
be called multiple times.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="enter_fn" transfer-ownership="none">
          <doc xml:whitespace="preserve">function called to guard GDK</doc>
          <type name="GObject.Callback" c:type="GCallback"/>
        </parameter>
        <parameter name="leave_fn" transfer-ownership="none">
          <doc xml:whitespace="preserve">function called to release the guard</doc>
          <type name="GObject.Callback" c:type="GCallback"/>
        </parameter>
      </parameters>
    </function>
    <function name="unicode_to_keyval" c:identifier="gdk_unicode_to_keyval">
      <doc xml:whitespace="preserve">Convert from a ISO10646 character to a key symbol.
or, if there is no corresponding symbol, 
wc | 0x01000000</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">the corresponding GDK key symbol, if one exists.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="wc" transfer-ownership="none">
          <doc xml:whitespace="preserve">a ISO10646 encoded character</doc>
          <type name="guint32" c:type="guint32"/>
        </parameter>
      </parameters>
    </function>
    <function name="utf8_to_compound_text"
              c:identifier="gdk_utf8_to_compound_text">
      <doc xml:whitespace="preserve">Convert from UTF-8 to compound text. 
false.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">%TRUE if the conversion succeeded, otherwise</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="str" transfer-ownership="none">
          <doc xml:whitespace="preserve">a UTF-8 string</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="encoding" transfer-ownership="none">
          <doc xml:whitespace="preserve">location to store resulting encoding</doc>
          <type name="Atom" c:type="GdkAtom*"/>
        </parameter>
        <parameter name="format" transfer-ownership="none">
          <doc xml:whitespace="preserve">location to store format of the result</doc>
          <type name="gint" c:type="gint*"/>
        </parameter>
        <parameter name="ctext" transfer-ownership="none">
          <doc xml:whitespace="preserve">location to store the data of the result</doc>
          <type name="guint8" c:type="guchar**"/>
        </parameter>
        <parameter name="length" transfer-ownership="none">
          <doc xml:whitespace="preserve">location to store the length of the data stored in @ctext</doc>
          <type name="gint" c:type="gint*"/>
        </parameter>
      </parameters>
    </function>
    <function name="utf8_to_compound_text_for_display"
              c:identifier="gdk_utf8_to_compound_text_for_display"
              version="2.2">
      <doc xml:whitespace="preserve">Converts from UTF-8 to compound text. 
%FALSE.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">%TRUE if the conversion succeeded, otherwise</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="display" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GdkDisplay</doc>
          <type name="Display" c:type="GdkDisplay*"/>
        </parameter>
        <parameter name="str" transfer-ownership="none">
          <doc xml:whitespace="preserve">a UTF-8 string</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="encoding" transfer-ownership="none">
          <doc xml:whitespace="preserve">location to store resulting encoding</doc>
          <type name="Atom" c:type="GdkAtom*"/>
        </parameter>
        <parameter name="format" transfer-ownership="none">
          <doc xml:whitespace="preserve">location to store format of the result</doc>
          <type name="gint" c:type="gint*"/>
        </parameter>
        <parameter name="ctext" transfer-ownership="none">
          <doc xml:whitespace="preserve">location to store the data of the result</doc>
          <type name="guint8" c:type="guchar**"/>
        </parameter>
        <parameter name="length" transfer-ownership="none">
          <doc xml:whitespace="preserve">location to store the length of the data stored in @ctext</doc>
          <type name="gint" c:type="gint*"/>
        </parameter>
      </parameters>
    </function>
    <function name="utf8_to_string_target"
              c:identifier="gdk_utf8_to_string_target">
      <doc xml:whitespace="preserve">Converts an UTF-8 string into the best possible representation
as a STRING. The representation of characters not in STRING
is not specified; it may be as pseudo-escape sequences
\x{ABCD}, or it may be in some other form of approximation.
conversion failed. (It should not fail for
any properly formed UTF-8 string unless system
limits like memory or file descriptors are exceeded.)</doc>
      <return-value transfer-ownership="full">
        <doc xml:whitespace="preserve">the newly-allocated string, or %NULL if the</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="str" transfer-ownership="none">
          <doc xml:whitespace="preserve">a UTF-8 string</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="window_at_pointer"
              c:identifier="gdk_window_at_pointer"
              deprecated="Use gdk_display_get_window_at_device_position() instead."
              deprecated-version="3.0">
      <doc xml:whitespace="preserve">Obtains the window underneath the mouse pointer, returning the
location of that window in @win_x, @win_y. Returns %NULL if the
window under the mouse pointer is not known to GDK (if the window
belongs to another application and a #GdkWindow hasn't been created
for it with gdk_window_foreign_new())
gdk_display_get_window_at_pointer() instead.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">window under the mouse pointer</doc>
        <type name="Window" c:type="GdkWindow*"/>
      </return-value>
      <parameters>
        <parameter name="win_x"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full"
                   allow-none="1">
          <doc xml:whitespace="preserve">return location for origin of the window under the pointer</doc>
          <type name="gint" c:type="gint*"/>
        </parameter>
        <parameter name="win_y"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full"
                   allow-none="1">
          <doc xml:whitespace="preserve">return location for origin of the window under the pointer</doc>
          <type name="gint" c:type="gint*"/>
        </parameter>
      </parameters>
    </function>
    <function name="window_constrain_size"
              c:identifier="gdk_window_constrain_size">
      <doc xml:whitespace="preserve">Constrains a desired width and height according to a
set of geometry hints (such as minimum and maximum size).</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="geometry" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GdkGeometry structure</doc>
          <type name="Geometry" c:type="GdkGeometry*"/>
        </parameter>
        <parameter name="flags" transfer-ownership="none">
          <doc xml:whitespace="preserve">a mask indicating what portions of @geometry are set</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="width" transfer-ownership="none">
          <doc xml:whitespace="preserve">desired width of window</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="height" transfer-ownership="none">
          <doc xml:whitespace="preserve">desired height of the window</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="new_width" transfer-ownership="none">
          <doc xml:whitespace="preserve">location to store resulting width</doc>
          <type name="gint" c:type="gint*"/>
        </parameter>
        <parameter name="new_height" transfer-ownership="none">
          <doc xml:whitespace="preserve">location to store resulting height</doc>
          <type name="gint" c:type="gint*"/>
        </parameter>
      </parameters>
    </function>
    <function name="window_foreign_new"
              c:identifier="gdk_window_foreign_new"
              introspectable="0">
      <doc xml:whitespace="preserve">Wraps a native window for the default display in a #GdkWindow.
This may fail if the window has been destroyed.
For example in the X backend, a native window handle is an Xlib
&lt;type&gt;XID&lt;/type&gt;.
native window or %NULL if the window has been destroyed.</doc>
      <return-value>
        <doc xml:whitespace="preserve">the newly-created #GdkWindow wrapper for the</doc>
        <type name="Window" c:type="GdkWindow*"/>
      </return-value>
      <parameters>
        <parameter name="anid" transfer-ownership="none">
          <doc xml:whitespace="preserve">a native window handle.</doc>
          <type name="NativeWindow" c:type="GdkNativeWindow"/>
        </parameter>
      </parameters>
    </function>
    <function name="window_foreign_new_for_display"
              c:identifier="gdk_window_foreign_new_for_display"
              version="2.2"
              introspectable="0">
      <doc xml:whitespace="preserve">Wraps a native window in a #GdkWindow.
This may fail if the window has been destroyed. If the window
was already known to GDK, a new reference to the existing 
#GdkWindow is returned.
For example in the X backend, a native window handle is an Xlib
&lt;type&gt;XID&lt;/type&gt;.
%NULL if the window has been destroyed. The wrapper will be
newly created, if one doesn't exist already.</doc>
      <return-value>
        <doc xml:whitespace="preserve">a #GdkWindow wrapper for the native window or</doc>
        <type name="Window" c:type="GdkWindow*"/>
      </return-value>
      <parameters>
        <parameter name="display" transfer-ownership="none">
          <doc xml:whitespace="preserve">the #GdkDisplay where the window handle comes from.</doc>
          <type name="Display" c:type="GdkDisplay*"/>
        </parameter>
        <parameter name="anid" transfer-ownership="none">
          <doc xml:whitespace="preserve">a native window handle.</doc>
          <type name="NativeWindow" c:type="GdkNativeWindow"/>
        </parameter>
      </parameters>
    </function>
    <function name="window_lookup"
              c:identifier="gdk_window_lookup"
              introspectable="0">
      <doc xml:whitespace="preserve">Looks up the #GdkWindow that wraps the given native window handle. 
For example in the X backend, a native window handle is an Xlib
&lt;type&gt;XID&lt;/type&gt;.
or %NULL if there is none.</doc>
      <return-value>
        <doc xml:whitespace="preserve">the #GdkWindow wrapper for the native window,</doc>
        <type name="Window" c:type="GdkWindow*"/>
      </return-value>
      <parameters>
        <parameter name="anid" transfer-ownership="none">
          <doc xml:whitespace="preserve">a native window handle.</doc>
          <type name="NativeWindow" c:type="GdkNativeWindow"/>
        </parameter>
      </parameters>
    </function>
    <function name="window_lookup_for_display"
              c:identifier="gdk_window_lookup_for_display"
              version="2.2"
              introspectable="0">
      <doc xml:whitespace="preserve">Looks up the #GdkWindow that wraps the given native window handle.
For example in the X backend, a native window handle is an Xlib
&lt;type&gt;XID&lt;/type&gt;.
or %NULL if there is none.</doc>
      <return-value>
        <doc xml:whitespace="preserve">the #GdkWindow wrapper for the native window,</doc>
        <type name="Window" c:type="GdkWindow*"/>
      </return-value>
      <parameters>
        <parameter name="display" transfer-ownership="none">
          <doc xml:whitespace="preserve">the #GdkDisplay corresponding to the window handle</doc>
          <type name="Display" c:type="GdkDisplay*"/>
        </parameter>
        <parameter name="anid" transfer-ownership="none">
          <doc xml:whitespace="preserve">a native window handle.</doc>
          <type name="NativeWindow" c:type="GdkNativeWindow"/>
        </parameter>
      </parameters>
    </function>
    <function name="window_process_all_updates"
              c:identifier="gdk_window_process_all_updates">
      <doc xml:whitespace="preserve">Calls gdk_window_process_updates() for all windows (see #GdkWindow)
in the application.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="window_set_debug_updates"
              c:identifier="gdk_window_set_debug_updates">
      <doc xml:whitespace="preserve">With update debugging enabled, calls to
gdk_window_invalidate_region() clear the invalidated region of the
screen to a noticeable color, and GDK pauses for a short time
before sending exposes to windows during
gdk_window_process_updates().  The net effect is that you can see
the invalid region for each window and watch redraws as they
occur. This allows you to diagnose inefficiencies in your application.
In essence, because the GDK rendering model prevents all flicker,
if you are redrawing the same region 400 times you may never
notice, aside from noticing a speed problem. Enabling update
debugging causes GTK to flicker slowly and noticeably, so you can
see exactly what's being redrawn when, in what order.
The --gtk-debug=updates command line option passed to GTK+ programs
enables this debug option at application startup time. That's
usually more useful than calling gdk_window_set_debug_updates()
yourself, though you might want to use this function to enable
updates sometime after application startup time.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="setting" transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE to turn on update debugging</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
  </namespace>
</repository>

<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="Atk" version="1.0"/>
  <include name="GLib" version="2.0"/>
  <include name="GModule" version="2.0"/>
  <include name="GObject" version="2.0"/>
  <include name="Gdk" version="3.0"/>
  <include name="GdkPixbuf" version="2.0"/>
  <include name="Gio" version="2.0"/>
  <include name="Pango" version="1.0"/>
  <include name="cairo" version="1.0"/>
  <namespace name="Gtk"
             version="3.0"
             shared-library="libgtk-x11-3.0.so.0"
             c:identifier-prefixes="Gtk"
             c:symbol-prefixes="gtk">
    <alias name="Allocation" c:type="GtkAllocation">
      <doc xml:whitespace="preserve">A &lt;structname&gt;GtkAllocation&lt;/structname&gt; of a widget represents region which has been allocated to the
widget by its parent. It is a subregion of its parents allocation. See
&lt;xref linkend="size-allocation"/&gt; for more information.</doc>
      <type name="Gdk.Rectangle" c:type="GdkRectangle"/>
    </alias>
    <class name="AboutDialog"
           c:symbol-prefix="about_dialog"
           c:type="GtkAboutDialog"
           parent="Dialog"
           glib:type-name="GtkAboutDialog"
           glib:get-type="gtk_about_dialog_get_type"
           glib:type-struct="AboutDialogClass">
      <doc xml:whitespace="preserve">The &lt;structname&gt;GtkAboutDialog&lt;/structname&gt; struct contains
only private fields and should not be directly accessed.</doc>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Buildable"/>
      <implements name="SizeRequest"/>
      <constructor name="new"
                   c:identifier="gtk_about_dialog_new"
                   version="2.6">
        <doc xml:whitespace="preserve">Creates a new #GtkAboutDialog.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a newly created #GtkAboutDialog</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="get_artists"
              c:identifier="gtk_about_dialog_get_artists"
              version="2.6"
              introspectable="0">
        <doc xml:whitespace="preserve">Returns the string which are displayed in the artists tab
of the secondary credits dialog.
the artists. The array is owned by the about dialog
and must not be modified.</doc>
        <return-value>
          <doc xml:whitespace="preserve">A %NULL-terminated string array containing</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
      </method>
      <method name="get_authors"
              c:identifier="gtk_about_dialog_get_authors"
              version="2.6"
              introspectable="0">
        <doc xml:whitespace="preserve">Returns the string which are displayed in the authors tab
of the secondary credits dialog.
the authors. The array is owned by the about dialog
and must not be modified.</doc>
        <return-value>
          <doc xml:whitespace="preserve">A %NULL-terminated string array containing</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
      </method>
      <method name="get_comments"
              c:identifier="gtk_about_dialog_get_comments"
              version="2.6">
        <doc xml:whitespace="preserve">Returns the comments string.
dialog and must not be modified.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The comments. The string is owned by the about</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_copyright"
              c:identifier="gtk_about_dialog_get_copyright"
              version="2.6">
        <doc xml:whitespace="preserve">Returns the copyright string.
dialog and must not be modified.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The copyright string. The string is owned by the about</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_documenters"
              c:identifier="gtk_about_dialog_get_documenters"
              version="2.6"
              introspectable="0">
        <doc xml:whitespace="preserve">Returns the string which are displayed in the documenters
tab of the secondary credits dialog.
the documenters. The array is owned by the about dialog
and must not be modified.</doc>
        <return-value>
          <doc xml:whitespace="preserve">A %NULL-terminated string array containing</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
      </method>
      <method name="get_license"
              c:identifier="gtk_about_dialog_get_license"
              version="2.6">
        <doc xml:whitespace="preserve">Returns the license information.
dialog and must not be modified.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The license information. The string is owned by the about</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_license_type"
              c:identifier="gtk_about_dialog_get_license_type"
              version="3.0">
        <doc xml:whitespace="preserve">Retrieves the license set using gtk_about_dialog_set_license_type()</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GtkLicense value</doc>
          <type name="License" c:type="GtkLicense"/>
        </return-value>
      </method>
      <method name="get_logo"
              c:identifier="gtk_about_dialog_get_logo"
              version="2.6"
              introspectable="0">
        <doc xml:whitespace="preserve">Returns the pixbuf displayed as logo in the about dialog.
owned by the about dialog. If you want to keep a reference
to it, you have to call g_object_ref() on it.</doc>
        <return-value>
          <doc xml:whitespace="preserve">the pixbuf displayed as logo. The pixbuf is</doc>
          <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
      </method>
      <method name="get_logo_icon_name"
              c:identifier="gtk_about_dialog_get_logo_icon_name"
              version="2.6">
        <doc xml:whitespace="preserve">Returns the icon name displayed as logo in the about dialog.
owned by the dialog. If you want to keep a reference
to it, you have to call g_strdup() on it.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the icon name displayed as logo. The string is</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_program_name"
              c:identifier="gtk_about_dialog_get_program_name"
              version="2.12">
        <doc xml:whitespace="preserve">Returns the program name displayed in the about dialog.
dialog and must not be modified.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The program name. The string is owned by the about</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_translator_credits"
              c:identifier="gtk_about_dialog_get_translator_credits"
              version="2.6">
        <doc xml:whitespace="preserve">Returns the translator credits string which is displayed
in the translators tab of the secondary credits dialog.
owned by the about dialog and must not be modified.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The translator credits string. The string is</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_version"
              c:identifier="gtk_about_dialog_get_version"
              version="2.6">
        <doc xml:whitespace="preserve">Returns the version string.
dialog and must not be modified.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The version string. The string is owned by the about</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_website"
              c:identifier="gtk_about_dialog_get_website"
              version="2.6">
        <doc xml:whitespace="preserve">Returns the website URL.
dialog and must not be modified.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The website URL. The string is owned by the about</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_website_label"
              c:identifier="gtk_about_dialog_get_website_label"
              version="2.6">
        <doc xml:whitespace="preserve">Returns the label used for the website link.
owned by the about dialog and must not be modified.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The label used for the website link. The string is</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_wrap_license"
              c:identifier="gtk_about_dialog_get_wrap_license"
              version="2.8">
        <doc xml:whitespace="preserve">Returns whether the license text in @about is
automatically wrapped.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the license text is wrapped</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="set_artists"
              c:identifier="gtk_about_dialog_set_artists"
              version="2.6">
        <doc xml:whitespace="preserve">Sets the strings which are displayed in the artists tab
of the secondary credits dialog.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="artists" transfer-ownership="none">
            <doc xml:whitespace="preserve">a %NULL-terminated array of strings</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_authors"
              c:identifier="gtk_about_dialog_set_authors"
              version="2.6">
        <doc xml:whitespace="preserve">Sets the strings which are displayed in the authors tab
of the secondary credits dialog.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="authors" transfer-ownership="none">
            <doc xml:whitespace="preserve">a %NULL-terminated array of strings</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_comments"
              c:identifier="gtk_about_dialog_set_comments"
              version="2.6">
        <doc xml:whitespace="preserve">Sets the comments string to display in the about dialog.
This should be a short string of one or two lines.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="comments" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">a comments string</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_copyright"
              c:identifier="gtk_about_dialog_set_copyright"
              version="2.6">
        <doc xml:whitespace="preserve">Sets the copyright string to display in the about dialog.
This should be a short string of one or two lines.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="copyright" transfer-ownership="none">
            <doc xml:whitespace="preserve">(allow-none) the copyright string</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_documenters"
              c:identifier="gtk_about_dialog_set_documenters"
              version="2.6">
        <doc xml:whitespace="preserve">Sets the strings which are displayed in the documenters tab
of the secondary credits dialog.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="documenters" transfer-ownership="none">
            <doc xml:whitespace="preserve">a %NULL-terminated array of strings</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_license"
              c:identifier="gtk_about_dialog_set_license"
              version="2.6">
        <doc xml:whitespace="preserve">Sets the license information to be displayed in the secondary
license dialog. If @license is %NULL, the license button is
hidden.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="license" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">the license information or %NULL</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_license_type"
              c:identifier="gtk_about_dialog_set_license_type"
              version="3.0">
        <doc xml:whitespace="preserve">Sets the license of the application showing the @about dialog from a
list of known licenses.
This function overrides the license set using
gtk_about_dialog_set_license().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="license_type" transfer-ownership="none">
            <doc xml:whitespace="preserve">the type of license</doc>
            <type name="License" c:type="GtkLicense"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_logo"
              c:identifier="gtk_about_dialog_set_logo"
              version="2.6">
        <doc xml:whitespace="preserve">Sets the pixbuf to be displayed as logo in the about dialog.
If it is %NULL, the default window icon set with
gtk_window_set_default_icon() will be used.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="logo" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">a #GdkPixbuf, or %NULL</doc>
            <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_logo_icon_name"
              c:identifier="gtk_about_dialog_set_logo_icon_name"
              version="2.6">
        <doc xml:whitespace="preserve">Sets the pixbuf to be displayed as logo in the about dialog.
If it is %NULL, the default window icon set with
gtk_window_set_default_icon() will be used.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="icon_name" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">an icon name, or %NULL</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_program_name"
              c:identifier="gtk_about_dialog_set_program_name"
              version="2.12">
        <doc xml:whitespace="preserve">Sets the name to display in the about dialog.
If this is not set, it defaults to g_get_application_name().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:whitespace="preserve">the program name</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_translator_credits"
              c:identifier="gtk_about_dialog_set_translator_credits"
              version="2.6">
        <doc xml:whitespace="preserve">Sets the translator credits string which is displayed in
the translators tab of the secondary credits dialog.
The intended use for this string is to display the translator
of the language which is currently used in the user interface.
Using gettext(), a simple way to achieve that is to mark the
string for translation:
|[
gtk_about_dialog_set_translator_credits (about, _("translator-credits"));
]|
It is a good idea to use the customary msgid "translator-credits" for this
purpose, since translators will already know the purpose of that msgid, and
since #GtkAboutDialog will detect if "translator-credits" is untranslated
and hide the tab.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="translator_credits"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">the translator credits</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_version"
              c:identifier="gtk_about_dialog_set_version"
              version="2.6">
        <doc xml:whitespace="preserve">Sets the version string to display in the about dialog.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="version" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">the version string</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_website"
              c:identifier="gtk_about_dialog_set_website"
              version="2.6">
        <doc xml:whitespace="preserve">Sets the URL to use for the website link.
Note that that the hook functions need to be set up
before calling this function.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="website" transfer-ownership="none">
            <doc xml:whitespace="preserve">(allow-none): a URL string starting with "http://"</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_website_label"
              c:identifier="gtk_about_dialog_set_website_label"
              version="2.6">
        <doc xml:whitespace="preserve">Sets the label to be used for the website link.
It defaults to the website URL.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="website_label" transfer-ownership="none">
            <doc xml:whitespace="preserve">the label used for the website link</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_wrap_license"
              c:identifier="gtk_about_dialog_set_wrap_license"
              version="2.8">
        <doc xml:whitespace="preserve">Sets whether the license text in @about is
automatically wrapped.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="wrap_license" transfer-ownership="none">
            <doc xml:whitespace="preserve">whether to wrap the license</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="artists"
                version="2.6"
                introspectable="0"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The people who contributed artwork to the program, as a %NULL-terminated
array of strings. Each string may contain email addresses and URLs, which
will be displayed as links, see the introduction for more details.</doc>
        <type/>
      </property>
      <property name="authors"
                version="2.6"
                introspectable="0"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The authors of the program, as a %NULL-terminated array of strings.
Each string may contain email addresses and URLs, which will be displayed
as links, see the introduction for more details.</doc>
        <type/>
      </property>
      <property name="comments"
                version="2.6"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Comments about the program. This string is displayed in a label
in the main dialog, thus it should be a short explanation of
the main purpose of the program, not a detailed list of features.</doc>
        <type name="utf8"/>
      </property>
      <property name="copyright"
                version="2.6"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Copyright information for the program.</doc>
        <type name="utf8"/>
      </property>
      <property name="documenters"
                version="2.6"
                introspectable="0"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The people documenting the program, as a %NULL-terminated array of strings.
Each string may contain email addresses and URLs, which will be displayed
as links, see the introduction for more details.</doc>
        <type/>
      </property>
      <property name="license"
                version="2.6"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The license of the program. This string is displayed in a
text view in a secondary dialog, therefore it is fine to use
a long multi-paragraph text. Note that the text is only wrapped
in the text view if the "wrap-license" property is set to %TRUE;
otherwise the text itself must contain the intended linebreaks.
When setting this property to a non-%NULL value, the
#GtkAboutDialog:license-type property is set to %GTK_LICENSE_CUSTOM
as a side effect.</doc>
        <type name="utf8"/>
      </property>
      <property name="license-type"
                version="3.0"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The license of the program, as a value of the %GtkLicense enumeration.
The #GtkAboutDialog will automatically fill out a standard disclaimer
and link the user to the appropriate online resource for the license
text.
If %GTK_LICENSE_UNKNOWN is used, the link used will be the same
specified in the #GtkAboutDialog:website property.
If %GTK_LICENSE_CUSTOM is used, the current contents of the
#GtkAboutDialog:license property are used.
For any other #GtkLicense value, the contents of the
#GtkAboutDialog:license property are also set by this property as
a side effect.</doc>
        <type name="License"/>
      </property>
      <property name="logo"
                version="2.6"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">A logo for the about box. If this is not set, it defaults to
gtk_window_get_default_icon_list().</doc>
        <type name="GdkPixbuf.Pixbuf"/>
      </property>
      <property name="logo-icon-name"
                version="2.6"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">A named icon to use as the logo for the about box. This property
overrides the #GtkAboutDialog:logo property.</doc>
        <type name="utf8"/>
      </property>
      <property name="program-name"
                version="2.12"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The name of the program.
If this is not set, it defaults to g_get_application_name().</doc>
        <type name="utf8"/>
      </property>
      <property name="translator-credits"
                version="2.6"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Credits to the translators. This string should be marked as translatable.
The string may contain email addresses and URLs, which will be displayed
as links, see the introduction for more details.</doc>
        <type name="utf8"/>
      </property>
      <property name="version"
                version="2.6"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The version of the program.</doc>
        <type name="utf8"/>
      </property>
      <property name="website"
                version="2.6"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The URL for the link to the website of the program.
This should be a string starting with "http://.</doc>
        <type name="utf8"/>
      </property>
      <property name="website-label"
                version="2.6"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The label for the link to the website of the program. If this is not set,
it defaults to the URL specified in the #GtkAboutDialog:website property.</doc>
        <type name="utf8"/>
      </property>
      <property name="wrap-license"
                version="2.8"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Whether to wrap the text in the license dialog.</doc>
        <type name="gboolean"/>
      </property>
      <field name="parent_instance">
        <type name="Dialog" c:type="GtkDialog"/>
      </field>
      <field name="priv">
        <type name="AboutDialogPrivate" c:type="GtkAboutDialogPrivate*"/>
      </field>
      <glib:signal name="activate-link" version="2.24">
        <doc xml:whitespace="preserve">The signal which gets emitted to activate a URI.
Applications may connect to it to override the default behaviour,
which is to call gtk_show_uri().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the link has been activated</doc>
          <type name="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the URI that is activated</doc>
            <type name="utf8"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="AboutDialogClass"
            c:type="GtkAboutDialogClass"
            glib:is-gtype-struct-for="AboutDialog">
      <field name="parent_class">
        <type name="DialogClass" c:type="GtkDialogClass"/>
      </field>
      <field name="activate_link">
        <callback name="activate_link">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="dialog" transfer-ownership="none">
              <type name="AboutDialog" c:type="GtkAboutDialog*"/>
            </parameter>
            <parameter name="uri" transfer-ownership="none">
              <type name="utf8" c:type="gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_gtk_reserved1" introspectable="0">
        <callback name="_gtk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved2" introspectable="0">
        <callback name="_gtk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved3" introspectable="0">
        <callback name="_gtk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved4" introspectable="0">
        <callback name="_gtk_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="AboutDialogPrivate"
            c:type="GtkAboutDialogPrivate"
            disguised="1">
    </record>
    <bitfield name="AccelFlags"
              glib:type-name="GtkAccelFlags"
              glib:get-type="gtk_accel_flags_get_type"
              c:type="GtkAccelFlags">
      <member name="visible"
              value="1"
              c:identifier="GTK_ACCEL_VISIBLE"
              glib:nick="visible"/>
      <member name="locked"
              value="2"
              c:identifier="GTK_ACCEL_LOCKED"
              glib:nick="locked"/>
      <member name="mask"
              value="7"
              c:identifier="GTK_ACCEL_MASK"
              glib:nick="mask"/>
    </bitfield>
    <class name="AccelGroup"
           c:symbol-prefix="accel_group"
           c:type="GtkAccelGroup"
           parent="GObject.Object"
           glib:type-name="GtkAccelGroup"
           glib:get-type="gtk_accel_group_get_type"
           glib:type-struct="AccelGroupClass">
      <doc xml:whitespace="preserve">An object representing and maintaining a group of accelerators.</doc>
      <constructor name="new" c:identifier="gtk_accel_group_new">
        <doc xml:whitespace="preserve">Creates a new #GtkAccelGroup.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new #GtkAccelGroup object</doc>
          <type name="AccelGroup" c:type="GtkAccelGroup*"/>
        </return-value>
      </constructor>
      <function name="from_accel_closure"
                c:identifier="gtk_accel_group_from_accel_closure"
                introspectable="0">
        <doc xml:whitespace="preserve">Finds the #GtkAccelGroup to which @closure is connected; 
see gtk_accel_group_connect().</doc>
        <return-value>
          <doc xml:whitespace="preserve">the #GtkAccelGroup to which @closure is connected, or %NULL.</doc>
          <type name="AccelGroup" c:type="GtkAccelGroup*"/>
        </return-value>
        <parameters>
          <parameter name="closure" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GClosure</doc>
            <type name="GObject.Closure" c:type="GClosure*"/>
          </parameter>
        </parameters>
      </function>
      <method name="activate" c:identifier="gtk_accel_group_activate">
        <doc xml:whitespace="preserve">Finds the first accelerator in @accel_group 
that matches @accel_key and @accel_mods, and
activates it.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if an accelerator was activated and handled this keypress</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="accel_quark" transfer-ownership="none">
            <doc xml:whitespace="preserve">the quark for the accelerator name</doc>
            <type name="GLib.Quark" c:type="GQuark"/>
          </parameter>
          <parameter name="acceleratable" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GObject, usually a #GtkWindow, on which to activate the accelerator.</doc>
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
          <parameter name="accel_key" transfer-ownership="none">
            <doc xml:whitespace="preserve">accelerator keyval from a key event</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="accel_mods" transfer-ownership="none">
            <doc xml:whitespace="preserve">keyboard state mask from a key event</doc>
            <type name="Gdk.ModifierType" c:type="GdkModifierType"/>
          </parameter>
        </parameters>
      </method>
      <method name="connect" c:identifier="gtk_accel_group_connect">
        <doc xml:whitespace="preserve">Installs an accelerator in this group. When @accel_group is being activated
in response to a call to gtk_accel_groups_activate(), @closure will be
invoked if the @accel_key and @accel_mods from gtk_accel_groups_activate()
match those of this connection.
The signature used for the @closure is that of #GtkAccelGroupActivate.
Note that, due to implementation details, a single closure can only be
connected to one accelerator group.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="accel_key" transfer-ownership="none">
            <doc xml:whitespace="preserve">key value of the accelerator</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="accel_mods" transfer-ownership="none">
            <doc xml:whitespace="preserve">modifier combination of the accelerator</doc>
            <type name="Gdk.ModifierType" c:type="GdkModifierType"/>
          </parameter>
          <parameter name="accel_flags" transfer-ownership="none">
            <doc xml:whitespace="preserve">a flag mask to configure this accelerator</doc>
            <type name="AccelFlags" c:type="GtkAccelFlags"/>
          </parameter>
          <parameter name="closure" transfer-ownership="none">
            <doc xml:whitespace="preserve">closure to be executed upon accelerator activation</doc>
            <type name="GObject.Closure" c:type="GClosure*"/>
          </parameter>
        </parameters>
      </method>
      <method name="connect_by_path"
              c:identifier="gtk_accel_group_connect_by_path">
        <doc xml:whitespace="preserve">Installs an accelerator in this group, using an accelerator path to look
up the appropriate key and modifiers (see gtk_accel_map_add_entry()).
When @accel_group is being activated in response to a call to
gtk_accel_groups_activate(), @closure will be invoked if the @accel_key and
for the path.
The signature used for the @closure is that of #GtkAccelGroupActivate.
Note that @accel_path string will be stored in a #GQuark. Therefore, if you
pass a static string, you can save some memory by interning it first with 
g_intern_static_string().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="accel_path" transfer-ownership="none">
            <doc xml:whitespace="preserve">path used for determining key and modifiers.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="closure" transfer-ownership="none">
            <doc xml:whitespace="preserve">closure to be executed upon accelerator activation</doc>
            <type name="GObject.Closure" c:type="GClosure*"/>
          </parameter>
        </parameters>
      </method>
      <method name="disconnect" c:identifier="gtk_accel_group_disconnect">
        <doc xml:whitespace="preserve">Removes an accelerator previously installed through
gtk_accel_group_connect().
Since 2.20 @closure can be %NULL.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the closure was found and got disconnected</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="closure" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">the closure to remove from this accelerator group, or %NULL to remove all closures</doc>
            <type name="GObject.Closure" c:type="GClosure*"/>
          </parameter>
        </parameters>
      </method>
      <method name="disconnect_key"
              c:identifier="gtk_accel_group_disconnect_key">
        <doc xml:whitespace="preserve">Removes an accelerator previously installed through
gtk_accel_group_connect().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if there was an accelerator which could be removed, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="accel_key" transfer-ownership="none">
            <doc xml:whitespace="preserve">key value of the accelerator</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="accel_mods" transfer-ownership="none">
            <doc xml:whitespace="preserve">modifier combination of the accelerator</doc>
            <type name="Gdk.ModifierType" c:type="GdkModifierType"/>
          </parameter>
        </parameters>
      </method>
      <method name="find"
              c:identifier="gtk_accel_group_find"
              introspectable="0">
        <doc xml:whitespace="preserve">Finds the first entry in an accelerator group for which</doc>
        <return-value>
          <doc xml:whitespace="preserve">the key of the first entry passing @find_func. The key is owned by GTK+ and must not be freed.</doc>
          <type name="AccelKey" c:type="GtkAccelKey*"/>
        </return-value>
        <parameters>
          <parameter name="find_func" transfer-ownership="none" closure="1">
            <doc xml:whitespace="preserve">a function to filter the entries of @accel_group with</doc>
            <type name="AccelGroupFindFunc" c:type="GtkAccelGroupFindFunc"/>
          </parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:whitespace="preserve">data to pass to @find_func</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_is_locked"
              c:identifier="gtk_accel_group_get_is_locked"
              version="2.14">
        <doc xml:whitespace="preserve">Locks are added and removed using gtk_accel_group_lock() and
gtk_accel_group_unlock().
%FALSE otherwise.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if there are 1 or more locks on the @accel_group,</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_modifier_mask"
              c:identifier="gtk_accel_group_get_modifier_mask"
              version="2.14">
        <doc xml:whitespace="preserve">Gets a #GdkModifierType representing the mask for this</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the modifier mask for this accel group.</doc>
          <type name="Gdk.ModifierType" c:type="GdkModifierType"/>
        </return-value>
      </method>
      <method name="lock" c:identifier="gtk_accel_group_lock">
        <doc xml:whitespace="preserve">Locks the given accelerator group.
Locking an acelerator group prevents the accelerators contained
within it to be changed during runtime. Refer to
gtk_accel_map_change_entry() about runtime accelerator changes.
If called more than once, @accel_group remains locked until
gtk_accel_group_unlock() has been called an equivalent number
of times.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="query"
              c:identifier="gtk_accel_group_query"
              introspectable="0">
        <doc xml:whitespace="preserve">Queries an accelerator group for all entries matching @accel_key and</doc>
        <return-value>
          <doc xml:whitespace="preserve">an array of @n_entries #GtkAccelGroupEntry elements, or %NULL. The array is owned by GTK+ and must not be freed.</doc>
          <type name="AccelGroupEntry" c:type="GtkAccelGroupEntry*"/>
        </return-value>
        <parameters>
          <parameter name="accel_key" transfer-ownership="none">
            <doc xml:whitespace="preserve">key value of the accelerator</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="accel_mods" transfer-ownership="none">
            <doc xml:whitespace="preserve">modifier combination of the accelerator</doc>
            <type name="Gdk.ModifierType" c:type="GdkModifierType"/>
          </parameter>
          <parameter name="n_entries" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">location to return the number of entries found, or %NULL</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unlock" c:identifier="gtk_accel_group_unlock">
        <doc xml:whitespace="preserve">Undoes the last call to gtk_accel_group_lock() on this @accel_group.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <property name="is-locked" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="modifier-mask" transfer-ownership="none">
        <type name="Gdk.ModifierType"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="AccelGroupPrivate" c:type="GtkAccelGroupPrivate*"/>
      </field>
      <glib:signal name="accel-activate">
        <doc xml:whitespace="preserve">The accel-activate signal is an implementation detail of
#GtkAccelGroup and not meant to be used by applications.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the accelerator was activated</doc>
          <type name="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the object on which the accelerator was activated</doc>
            <type name="GObject.Object"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <doc xml:whitespace="preserve">the accelerator keyval</doc>
            <type name="guint"/>
          </parameter>
          <parameter name="p1" transfer-ownership="none">
            <doc xml:whitespace="preserve">the modifier combination of the accelerator</doc>
            <type name="Gdk.ModifierType"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="accel-changed">
        <doc xml:whitespace="preserve">The accel-changed signal is emitted when a #GtkAccelGroupEntry
is added to or removed from the accel group. 
Widgets like #GtkAccelLabel which display an associated 
accelerator should connect to this signal, and rebuild 
their visual representation if the @accel_closure is theirs.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the accelerator keyval</doc>
            <type name="guint"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <doc xml:whitespace="preserve">the modifier combination of the accelerator</doc>
            <type name="Gdk.ModifierType"/>
          </parameter>
          <parameter name="p1" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GClosure of the accelerator</doc>
            <type name="GObject.Closure"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <callback name="AccelGroupActivate" c:type="GtkAccelGroupActivate">
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="accel_group" transfer-ownership="none">
          <type name="AccelGroup" c:type="GtkAccelGroup*"/>
        </parameter>
        <parameter name="acceleratable" transfer-ownership="none">
          <type name="GObject.Object" c:type="GObject*"/>
        </parameter>
        <parameter name="keyval" transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="modifier" transfer-ownership="none">
          <type name="Gdk.ModifierType" c:type="GdkModifierType"/>
        </parameter>
      </parameters>
    </callback>
    <record name="AccelGroupClass"
            c:type="GtkAccelGroupClass"
            glib:is-gtype-struct-for="AccelGroup">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="accel_changed">
        <callback name="accel_changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="accel_group" transfer-ownership="none">
              <type name="AccelGroup" c:type="GtkAccelGroup*"/>
            </parameter>
            <parameter name="keyval" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="modifier" transfer-ownership="none">
              <type name="Gdk.ModifierType" c:type="GdkModifierType"/>
            </parameter>
            <parameter name="accel_closure" transfer-ownership="none">
              <type name="GObject.Closure" c:type="GClosure*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_gtk_reserved1" introspectable="0">
        <callback name="_gtk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved2" introspectable="0">
        <callback name="_gtk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved3" introspectable="0">
        <callback name="_gtk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved4" introspectable="0">
        <callback name="_gtk_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="AccelGroupEntry" c:type="GtkAccelGroupEntry">
      <field name="key" writable="1">
        <type name="AccelKey" c:type="GtkAccelKey"/>
      </field>
      <field name="closure" writable="1">
        <type name="GObject.Closure" c:type="GClosure*"/>
      </field>
      <field name="accel_path_quark" writable="1">
        <type name="GLib.Quark" c:type="GQuark"/>
      </field>
    </record>
    <callback name="AccelGroupFindFunc"
              c:type="GtkAccelGroupFindFunc"
              version="2.2">
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="key" transfer-ownership="none">
          <type name="AccelKey" c:type="GtkAccelKey*"/>
        </parameter>
        <parameter name="closure" transfer-ownership="none">
          <type name="GObject.Closure" c:type="GClosure*"/>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <record name="AccelGroupPrivate" c:type="GtkAccelGroupPrivate">
      <field name="lock_count" writable="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="modifier_mask" writable="1">
        <type name="Gdk.ModifierType" c:type="GdkModifierType"/>
      </field>
      <field name="acceleratables" writable="1">
        <type name="GLib.SList" c:type="GSList*">
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </field>
      <field name="n_accels" writable="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="priv_accels" writable="1">
        <type name="AccelGroupEntry" c:type="GtkAccelGroupEntry*"/>
      </field>
    </record>
    <record name="AccelKey" c:type="GtkAccelKey">
      <field name="accel_key" writable="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="accel_mods" writable="1">
        <type name="Gdk.ModifierType" c:type="GdkModifierType"/>
      </field>
      <field name="accel_flags" writable="1" bits="16">
        <type name="guint" c:type="guint"/>
      </field>
    </record>
    <class name="AccelLabel"
           c:symbol-prefix="accel_label"
           c:type="GtkAccelLabel"
           parent="Label"
           glib:type-name="GtkAccelLabel"
           glib:get-type="gtk_accel_label_get_type"
           glib:type-struct="AccelLabelClass">
      <doc xml:whitespace="preserve">The #GtkAccelLabel-struct struct contains private data only, and
should be accessed using the functions below.</doc>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Buildable"/>
      <implements name="SizeRequest"/>
      <constructor name="new" c:identifier="gtk_accel_label_new">
        <doc xml:whitespace="preserve">Creates a new #GtkAccelLabel.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a new #GtkAccelLabel.</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="string" transfer-ownership="none">
            <doc xml:whitespace="preserve">the label string. Must be non-%NULL.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_accel_widget"
              c:identifier="gtk_accel_label_get_accel_widget">
        <doc xml:whitespace="preserve">Fetches the widget monitored by this accelerator label. See
gtk_accel_label_set_accel_widget().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the object monitored by the accelerator label, or %NULL.</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
      </method>
      <method name="get_accel_width"
              c:identifier="gtk_accel_label_get_accel_width">
        <doc xml:whitespace="preserve">Returns the width needed to display the accelerator key(s).
This is used by menus to align all of the #GtkMenuItem widgets, and shouldn't
be needed by applications.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the width needed to display the accelerator key(s).</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
      </method>
      <method name="refetch" c:identifier="gtk_accel_label_refetch">
        <doc xml:whitespace="preserve">Recreates the string representing the accelerator keys.
This should not be needed since the string is automatically updated whenever
accelerators are added or removed from the associated widget.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">always returns %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="set_accel_closure"
              c:identifier="gtk_accel_label_set_accel_closure">
        <doc xml:whitespace="preserve">Sets the closure to be monitored by this accelerator label. The closure
must be connected to an accelerator group; see gtk_accel_group_connect().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="accel_closure" transfer-ownership="none">
            <doc xml:whitespace="preserve">the closure to monitor for accelerator changes.</doc>
            <type name="GObject.Closure" c:type="GClosure*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_accel_widget"
              c:identifier="gtk_accel_label_set_accel_widget">
        <doc xml:whitespace="preserve">Sets the widget to be monitored by this accelerator label.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="accel_widget" transfer-ownership="none">
            <doc xml:whitespace="preserve">the widget to be monitored.</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <property name="accel-closure" writable="1" transfer-ownership="none">
        <type name="GObject.Closure"/>
      </property>
      <property name="accel-widget" writable="1" transfer-ownership="none">
        <type name="Widget"/>
      </property>
      <field name="label">
        <type name="Label" c:type="GtkLabel"/>
      </field>
      <field name="priv">
        <type name="AccelLabelPrivate" c:type="GtkAccelLabelPrivate*"/>
      </field>
    </class>
    <record name="AccelLabelClass"
            c:type="GtkAccelLabelClass"
            glib:is-gtype-struct-for="AccelLabel">
      <field name="parent_class">
        <type name="LabelClass" c:type="GtkLabelClass"/>
      </field>
      <field name="signal_quote1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="signal_quote2">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="mod_name_shift">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="mod_name_control">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="mod_name_alt">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="mod_separator">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="_gtk_reserved1" introspectable="0">
        <callback name="_gtk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved2" introspectable="0">
        <callback name="_gtk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved3" introspectable="0">
        <callback name="_gtk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved4" introspectable="0">
        <callback name="_gtk_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="AccelLabelPrivate"
            c:type="GtkAccelLabelPrivate"
            disguised="1">
    </record>
    <class name="AccelMap"
           c:symbol-prefix="accel_map"
           c:type="GtkAccelMap"
           parent="GObject.Object"
           glib:type-name="GtkAccelMap"
           glib:get-type="gtk_accel_map_get_type"
           glib:type-struct="AccelMapClass">
      <function name="add_entry" c:identifier="gtk_accel_map_add_entry">
        <doc xml:whitespace="preserve">Registers a new accelerator with the global accelerator map.
This function should only be called once per @accel_path
with the canonical @accel_key and @accel_mods for this path.
To change the accelerator during runtime programatically, use
gtk_accel_map_change_entry().
The accelerator path must consist of "&amp;lt;WINDOWTYPE&amp;gt;/Category1/Category2/.../Action",
where &amp;lt;WINDOWTYPE&amp;gt; should be a unique application-specific identifier, that
corresponds to the kind of window the accelerator is being used in, e.g. "Gimp-Image",
"Abiword-Document" or "Gnumeric-Settings".
The Category1/.../Action portion is most appropriately chosen by the action the
accelerator triggers, i.e. for accelerators on menu items, choose the item's menu path,
e.g. "File/Save As", "Image/View/Zoom" or "Edit/Select All".
So a full valid accelerator path may look like:
"&amp;lt;Gimp-Toolbox&amp;gt;/File/Dialogs/Tool Options...".
Note that @accel_path string will be stored in a #GQuark. Therefore, if you
pass a static string, you can save some memory by interning it first with 
g_intern_static_string().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="accel_path" transfer-ownership="none">
            <doc xml:whitespace="preserve">valid accelerator path</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="accel_key" transfer-ownership="none">
            <doc xml:whitespace="preserve">the accelerator key</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="accel_mods" transfer-ownership="none">
            <doc xml:whitespace="preserve">the accelerator modifiers</doc>
            <type name="Gdk.ModifierType" c:type="GdkModifierType"/>
          </parameter>
        </parameters>
      </function>
      <function name="add_filter" c:identifier="gtk_accel_map_add_filter">
        <doc xml:whitespace="preserve">Adds a filter to the global list of accel path filters.
Accel map entries whose accel path matches one of the filters
are skipped by gtk_accel_map_foreach().
This function is intended for GTK+ modules that create their own
menus, but don't want them to be saved into the applications accelerator
map dump.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="filter_pattern" transfer-ownership="none">
            <doc xml:whitespace="preserve">a pattern (see #GPatternSpec)</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="change_entry" c:identifier="gtk_accel_map_change_entry">
        <doc xml:whitespace="preserve">Changes the @accel_key and @accel_mods currently associated with @accel_path.
Due to conflicts with other accelerators, a change may not always be possible,
conflicts. A change will only occur if all conflicts could be resolved (which
might not be the case if conflicting accelerators are locked). Successful
changes are indicated by a %TRUE return value.
Note that @accel_path string will be stored in a #GQuark. Therefore, if you
pass a static string, you can save some memory by interning it first with 
g_intern_static_string().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the accelerator could be changed, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="accel_path" transfer-ownership="none">
            <doc xml:whitespace="preserve">a valid accelerator path</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="accel_key" transfer-ownership="none">
            <doc xml:whitespace="preserve">the new accelerator key</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="accel_mods" transfer-ownership="none">
            <doc xml:whitespace="preserve">the new accelerator modifiers</doc>
            <type name="Gdk.ModifierType" c:type="GdkModifierType"/>
          </parameter>
          <parameter name="replace" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE if other accelerators may be deleted upon conflicts</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </function>
      <function name="foreach"
                c:identifier="gtk_accel_map_foreach"
                introspectable="0">
        <doc xml:whitespace="preserve">Loops over the entries in the accelerator map whose accel path 
doesn't match any of the filters added with gtk_accel_map_add_filter(), 
and execute @foreach_func on each. The signature of @foreach_func is 
that of #GtkAccelMapForeach, the @changed parameter indicates whether
this accelerator was changed during runtime (thus, would need
saving during an accelerator map dump).</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="data" transfer-ownership="none">
            <doc xml:whitespace="preserve">data to be passed into @foreach_func</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="foreach_func" transfer-ownership="none">
            <doc xml:whitespace="preserve">function to be executed for each accel map entry which is not filtered out</doc>
            <type name="AccelMapForeach" c:type="GtkAccelMapForeach"/>
          </parameter>
        </parameters>
      </function>
      <function name="foreach_unfiltered"
                c:identifier="gtk_accel_map_foreach_unfiltered"
                introspectable="0">
        <doc xml:whitespace="preserve">Loops over all entries in the accelerator map, and execute
#GtkAccelMapForeach, the @changed parameter indicates whether
this accelerator was changed during runtime (thus, would need
saving during an accelerator map dump).</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="data" transfer-ownership="none">
            <doc xml:whitespace="preserve">data to be passed into @foreach_func</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="foreach_func" transfer-ownership="none">
            <doc xml:whitespace="preserve">function to be executed for each accel map entry</doc>
            <type name="AccelMapForeach" c:type="GtkAccelMapForeach"/>
          </parameter>
        </parameters>
      </function>
      <function name="get" c:identifier="gtk_accel_map_get" version="2.4">
        <doc xml:whitespace="preserve">Gets the singleton global #GtkAccelMap object. This object
is useful only for notification of changes to the accelerator
map via the ::changed signal; it isn't a parameter to the
other accelerator map functions.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the global #GtkAccelMap object</doc>
          <type name="AccelMap" c:type="GtkAccelMap*"/>
        </return-value>
      </function>
      <function name="load" c:identifier="gtk_accel_map_load">
        <doc xml:whitespace="preserve">Parses a file previously saved with gtk_accel_map_save() for
accelerator specifications, and propagates them accordingly.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="file_name" transfer-ownership="none">
            <doc xml:whitespace="preserve">a file containing accelerator specifications, in the GLib file name encoding</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="load_fd" c:identifier="gtk_accel_map_load_fd">
        <doc xml:whitespace="preserve">Filedescriptor variant of gtk_accel_map_load().
Note that the file descriptor will not be closed by this function.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="fd" transfer-ownership="none">
            <doc xml:whitespace="preserve">a valid readable file descriptor</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </function>
      <function name="load_scanner" c:identifier="gtk_accel_map_load_scanner">
        <doc xml:whitespace="preserve">#GScanner variant of gtk_accel_map_load().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="scanner" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GScanner which has already been provided with an input file</doc>
            <type name="GLib.Scanner" c:type="GScanner*"/>
          </parameter>
        </parameters>
      </function>
      <function name="lock_path"
                c:identifier="gtk_accel_map_lock_path"
                version="2.4">
        <doc xml:whitespace="preserve">Locks the given accelerator path. If the accelerator map doesn't yet contain
an entry for @accel_path, a new one is created.
Locking an accelerator path prevents its accelerator from being changed 
during runtime. A locked accelerator path can be unlocked by 
gtk_accel_map_unlock_path(). Refer to gtk_accel_map_change_entry() 
for information about runtime accelerator changes.
If called more than once, @accel_path remains locked until
gtk_accel_map_unlock_path() has been called an equivalent number
of times.
Note that locking of individual accelerator paths is independent from 
locking the #GtkAccelGroup containing them. For runtime accelerator
changes to be possible both the accelerator path and its #GtkAccelGroup
have to be unlocked.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="accel_path" transfer-ownership="none">
            <doc xml:whitespace="preserve">a valid accelerator path</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="lookup_entry" c:identifier="gtk_accel_map_lookup_entry">
        <doc xml:whitespace="preserve">Looks up the accelerator entry for @accel_path and fills in @key.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if @accel_path is known, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="accel_path" transfer-ownership="none">
            <doc xml:whitespace="preserve">a valid accelerator path</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="key"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">the accelerator key to be filled in (optional)</doc>
            <type name="AccelKey" c:type="GtkAccelKey*"/>
          </parameter>
        </parameters>
      </function>
      <function name="save" c:identifier="gtk_accel_map_save">
        <doc xml:whitespace="preserve">Saves current accelerator specifications (accelerator path, key
and modifiers) to @file_name.
The file is written in a format suitable to be read back in by
gtk_accel_map_load().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="file_name" transfer-ownership="none">
            <doc xml:whitespace="preserve">the name of the file to contain accelerator specifications, in the GLib file name encoding</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="save_fd" c:identifier="gtk_accel_map_save_fd">
        <doc xml:whitespace="preserve">Filedescriptor variant of gtk_accel_map_save().
Note that the file descriptor will not be closed by this function.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="fd" transfer-ownership="none">
            <doc xml:whitespace="preserve">a valid writable file descriptor</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </function>
      <function name="unlock_path"
                c:identifier="gtk_accel_map_unlock_path"
                version="2.4">
        <doc xml:whitespace="preserve">Undoes the last call to gtk_accel_map_lock_path() on this @accel_path.
Refer to gtk_accel_map_lock_path() for information about accelerator path locking.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="accel_path" transfer-ownership="none">
            <doc xml:whitespace="preserve">a valid accelerator path</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </function>
      <glib:signal name="changed" version="2.4">
        <doc xml:whitespace="preserve">Notifies of a change in the global accelerator map.
The path is also used as the detail for the signal,
so it is possible to connect to
changed::&lt;replaceable&gt;accel_path&lt;/replaceable&gt;.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the path of the accelerator that changed</doc>
            <type name="utf8"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <doc xml:whitespace="preserve">the key value for the new accelerator</doc>
            <type name="guint"/>
          </parameter>
          <parameter name="p1" transfer-ownership="none">
            <doc xml:whitespace="preserve">the modifier mask for the new accelerator</doc>
            <type name="Gdk.ModifierType"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="AccelMapClass"
            c:type="GtkAccelMapClass"
            disguised="1"
            glib:is-gtype-struct-for="AccelMap">
    </record>
    <callback name="AccelMapForeach" c:type="GtkAccelMapForeach">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="data" transfer-ownership="none">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="accel_path" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="accel_key" transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="accel_mods" transfer-ownership="none">
          <type name="Gdk.ModifierType" c:type="GdkModifierType"/>
        </parameter>
        <parameter name="changed" transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </callback>
    <class name="Accessible"
           c:symbol-prefix="accessible"
           c:type="GtkAccessible"
           parent="Atk.Object"
           glib:type-name="GtkAccessible"
           glib:get-type="gtk_accessible_get_type"
           glib:type-struct="AccessibleClass">
      <virtual-method name="connect_widget_destroyed"
                      invoker="connect_widget_destroyed">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </virtual-method>
      <method name="connect_widget_destroyed"
              c:identifier="gtk_accessible_connect_widget_destroyed">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="get_widget"
              c:identifier="gtk_accessible_get_widget"
              version="2.22">
        <doc xml:whitespace="preserve">Gets the #GtkWidget corresponding to the #GtkAccessible. The returned widget
does not have a reference added, so you do not need to unref it.
the #GtkAccessible, or %NULL.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">pointer to the #GtkWidget corresponding to</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
      </method>
      <method name="set_widget"
              c:identifier="gtk_accessible_set_widget"
              version="2.22">
        <doc xml:whitespace="preserve">Sets the #GtkWidget corresponding to the #GtkAccessible.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="widget" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkWidget</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="Atk.Object" c:type="AtkObject"/>
      </field>
      <field name="priv">
        <type name="AccessiblePrivate" c:type="GtkAccessiblePrivate*"/>
      </field>
    </class>
    <record name="AccessibleClass"
            c:type="GtkAccessibleClass"
            glib:is-gtype-struct-for="Accessible">
      <field name="parent_class">
        <type name="Atk.ObjectClass" c:type="AtkObjectClass"/>
      </field>
      <field name="connect_widget_destroyed">
        <callback name="connect_widget_destroyed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="accessible" transfer-ownership="none">
              <type name="Accessible" c:type="GtkAccessible*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_gtk_reserved1" introspectable="0">
        <callback name="_gtk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved2" introspectable="0">
        <callback name="_gtk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved3" introspectable="0">
        <callback name="_gtk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved4" introspectable="0">
        <callback name="_gtk_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="AccessiblePrivate"
            c:type="GtkAccessiblePrivate"
            disguised="1">
    </record>
    <class name="Action"
           c:symbol-prefix="action"
           c:type="GtkAction"
           parent="GObject.Object"
           glib:type-name="GtkAction"
           glib:get-type="gtk_action_get_type"
           glib:type-struct="ActionClass">
      <implements name="Buildable"/>
      <constructor name="new" c:identifier="gtk_action_new" version="2.4">
        <doc xml:whitespace="preserve">Creates a new #GtkAction object. To add the action to a
#GtkActionGroup and set the accelerator for the action,
call gtk_action_group_add_action_with_accel().
See &lt;xref linkend="XML-UI"/&gt; for information on allowed action
names.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new #GtkAction</doc>
          <type name="Action" c:type="GtkAction*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:whitespace="preserve">A unique name for the action</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="label" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">the label displayed in menu items and on buttons, or %NULL</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="tooltip" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">a tooltip for the action, or %NULL</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="stock_id" transfer-ownership="none">
            <doc xml:whitespace="preserve">the stock icon to display in widgets representing the action, or %NULL</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <virtual-method name="connect_proxy">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="proxy" transfer-ownership="none">
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="create_menu" invoker="create_menu" version="2.12">
        <doc xml:whitespace="preserve">If @action provides a #GtkMenu widget as a submenu for the menu
item or the toolbar item it creates, this function returns an
instance of that menu.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the menu item provided by the action, or %NULL.</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
      </virtual-method>
      <virtual-method name="create_menu_item"
                      invoker="create_menu_item"
                      version="2.4">
        <doc xml:whitespace="preserve">Creates a menu item widget that proxies for the given action.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a menu item connected to the action.</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
      </virtual-method>
      <virtual-method name="create_tool_item"
                      invoker="create_tool_item"
                      version="2.4">
        <doc xml:whitespace="preserve">Creates a toolbar item widget that proxies for the given action.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a toolbar item connected to the action.</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
      </virtual-method>
      <virtual-method name="disconnect_proxy">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="proxy" transfer-ownership="none">
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="activate" c:identifier="gtk_action_activate" version="2.4">
        <doc xml:whitespace="preserve">Emits the "activate" signal on the specified action, if it isn't 
insensitive. This gets called by the proxy widgets when they get 
activated.
It can also be used to manually activate an action.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="block_activate"
              c:identifier="gtk_action_block_activate"
              version="2.16">
        <doc xml:whitespace="preserve">Disable activation signals from the action 
This is needed when updating the state of your proxy
#GtkActivatable widget could result in calling gtk_action_activate(),
this is a convenience function to avoid recursing in those
cases (updating toggle state for instance).</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="connect_accelerator"
              c:identifier="gtk_action_connect_accelerator"
              version="2.4">
        <doc xml:whitespace="preserve">Installs the accelerator for @action if @action has an
accel path and group. See gtk_action_set_accel_path() and 
gtk_action_set_accel_group()
Since multiple proxies may independently trigger the installation
of the accelerator, the @action counts the number of times this
function has been called and doesn't remove the accelerator until
gtk_action_disconnect_accelerator() has been called as many times.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="create_icon"
              c:identifier="gtk_action_create_icon"
              version="2.4">
        <doc xml:whitespace="preserve">This function is intended for use by action implementations to
create icons displayed in the proxy widgets.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a widget that displays the icon for this action.</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="icon_size" transfer-ownership="none">
            <doc xml:whitespace="preserve">the size of the icon that should be created.</doc>
            <type name="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_menu"
              c:identifier="gtk_action_create_menu"
              version="2.12">
        <doc xml:whitespace="preserve">If @action provides a #GtkMenu widget as a submenu for the menu
item or the toolbar item it creates, this function returns an
instance of that menu.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the menu item provided by the action, or %NULL.</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
      </method>
      <method name="create_menu_item"
              c:identifier="gtk_action_create_menu_item"
              version="2.4">
        <doc xml:whitespace="preserve">Creates a menu item widget that proxies for the given action.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a menu item connected to the action.</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
      </method>
      <method name="create_tool_item"
              c:identifier="gtk_action_create_tool_item"
              version="2.4">
        <doc xml:whitespace="preserve">Creates a toolbar item widget that proxies for the given action.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a toolbar item connected to the action.</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
      </method>
      <method name="disconnect_accelerator"
              c:identifier="gtk_action_disconnect_accelerator"
              version="2.4">
        <doc xml:whitespace="preserve">Undoes the effect of one call to gtk_action_connect_accelerator().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="get_accel_closure"
              c:identifier="gtk_action_get_accel_closure"
              version="2.8">
        <doc xml:whitespace="preserve">Returns the accel closure for this action.
owned by GTK+ and must not be unreffed or modified.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the accel closure for this action. The returned closure is</doc>
          <type name="GObject.Closure" c:type="GClosure*"/>
        </return-value>
      </method>
      <method name="get_accel_path"
              c:identifier="gtk_action_get_accel_path"
              version="2.6">
        <doc xml:whitespace="preserve">Returns the accel path for this action.  
if none is set. The returned string is owned by GTK+ 
and must not be freed or modified.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the accel path for this action, or %NULL</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_always_show_image"
              c:identifier="gtk_action_get_always_show_image"
              version="2.20">
        <doc xml:whitespace="preserve">Returns whether @action&lt;!-- --&gt;'s menu item proxies will ignore the
#GtkSettings:gtk-menu-images setting and always show their image,
if available.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the menu item proxies will always show their image</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_gicon"
              c:identifier="gtk_action_get_gicon"
              version="2.16">
        <doc xml:whitespace="preserve">Gets the gicon of @action.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The action's #GIcon if one is set.</doc>
          <type name="Gio.Icon" c:type="GIcon*"/>
        </return-value>
      </method>
      <method name="get_icon_name"
              c:identifier="gtk_action_get_icon_name"
              version="2.16">
        <doc xml:whitespace="preserve">Gets the icon name of @action.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the icon name</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_is_important"
              c:identifier="gtk_action_get_is_important"
              version="2.16">
        <doc xml:whitespace="preserve">Checks whether @action is important or not</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">whether @action is important</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_label"
              c:identifier="gtk_action_get_label"
              version="2.16">
        <doc xml:whitespace="preserve">Gets the label text of @action.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the label text</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_name" c:identifier="gtk_action_get_name" version="2.4">
        <doc xml:whitespace="preserve">Returns the name of the action.
be freed.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the name of the action. The string belongs to GTK+ and should not</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_proxies"
              c:identifier="gtk_action_get_proxies"
              version="2.4">
        <doc xml:whitespace="preserve">Returns the proxy widgets for an action.
See also gtk_activatable_get_related_action().
and must not be modified.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GSList of proxy widgets. The list is owned by GTK+</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="Widget"/>
          </type>
        </return-value>
      </method>
      <method name="get_sensitive"
              c:identifier="gtk_action_get_sensitive"
              version="2.4">
        <doc xml:whitespace="preserve">Returns whether the action itself is sensitive. Note that this doesn't 
necessarily mean effective sensitivity. See gtk_action_is_sensitive() 
for that.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the action itself is sensitive.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_short_label"
              c:identifier="gtk_action_get_short_label"
              version="2.16">
        <doc xml:whitespace="preserve">Gets the short label text of @action.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the short label text.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_stock_id"
              c:identifier="gtk_action_get_stock_id"
              version="2.16">
        <doc xml:whitespace="preserve">Gets the stock id of @action.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the stock id</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_tooltip"
              c:identifier="gtk_action_get_tooltip"
              version="2.16">
        <doc xml:whitespace="preserve">Gets the tooltip text of @action.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the tooltip text</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_visible"
              c:identifier="gtk_action_get_visible"
              version="2.4">
        <doc xml:whitespace="preserve">Returns whether the action itself is visible. Note that this doesn't 
necessarily mean effective visibility. See gtk_action_is_sensitive() 
for that.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the action itself is visible.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_visible_horizontal"
              c:identifier="gtk_action_get_visible_horizontal"
              version="2.16">
        <doc xml:whitespace="preserve">Checks whether @action is visible when horizontal</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">whether @action is visible when horizontal</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_visible_vertical"
              c:identifier="gtk_action_get_visible_vertical"
              version="2.16">
        <doc xml:whitespace="preserve">Checks whether @action is visible when horizontal</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">whether @action is visible when horizontal</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="is_sensitive"
              c:identifier="gtk_action_is_sensitive"
              version="2.4">
        <doc xml:whitespace="preserve">Returns whether the action is effectively sensitive.
are both sensitive.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the action and its associated action group</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="is_visible"
              c:identifier="gtk_action_is_visible"
              version="2.4">
        <doc xml:whitespace="preserve">Returns whether the action is effectively visible.
are both visible.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the action and its associated action group</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="set_accel_group"
              c:identifier="gtk_action_set_accel_group"
              version="2.4">
        <doc xml:whitespace="preserve">Sets the #GtkAccelGroup in which the accelerator for this action
will be installed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="accel_group"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">a #GtkAccelGroup or %NULL</doc>
            <type name="AccelGroup" c:type="GtkAccelGroup*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_accel_path"
              c:identifier="gtk_action_set_accel_path"
              version="2.4">
        <doc xml:whitespace="preserve">Sets the accel path for this action.  All proxy widgets associated
with the action will have this accel path, so that their
accelerators are consistent.
Note that @accel_path string will be stored in a #GQuark. Therefore, if you
pass a static string, you can save some memory by interning it first with 
g_intern_static_string().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="accel_path" transfer-ownership="none">
            <doc xml:whitespace="preserve">the accelerator path</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_always_show_image"
              c:identifier="gtk_action_set_always_show_image"
              version="2.20">
        <doc xml:whitespace="preserve">Sets whether @action&lt;!-- --&gt;'s menu item proxies will ignore the
#GtkSettings:gtk-menu-images setting and always show their image, if available.
Use this if the menu item would be useless or hard to use
without their image.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="always_show" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE if menuitem proxies should always show their image</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_gicon"
              c:identifier="gtk_action_set_gicon"
              version="2.16">
        <doc xml:whitespace="preserve">Sets the icon of @action.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="icon" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GIcon to set</doc>
            <type name="Gio.Icon" c:type="GIcon*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_icon_name"
              c:identifier="gtk_action_set_icon_name"
              version="2.16">
        <doc xml:whitespace="preserve">Sets the icon name on @action</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="icon_name" transfer-ownership="none">
            <doc xml:whitespace="preserve">the icon name to set</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_is_important"
              c:identifier="gtk_action_set_is_important"
              version="2.16">
        <doc xml:whitespace="preserve">Sets whether the action is important, this attribute is used
primarily by toolbar items to decide whether to show a label
or not.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="is_important" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE to make the action important</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_label"
              c:identifier="gtk_action_set_label"
              version="2.16">
        <doc xml:whitespace="preserve">Sets the label of @action.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="label" transfer-ownership="none">
            <doc xml:whitespace="preserve">the label text to set</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_sensitive"
              c:identifier="gtk_action_set_sensitive"
              version="2.6">
        <doc xml:whitespace="preserve">Sets the ::sensitive property of the action to @sensitive. Note that 
this doesn't necessarily mean effective sensitivity. See 
gtk_action_is_sensitive() 
for that.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="sensitive" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE to make the action sensitive</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_short_label"
              c:identifier="gtk_action_set_short_label"
              version="2.16">
        <doc xml:whitespace="preserve">Sets a shorter label text on @action.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="short_label" transfer-ownership="none">
            <doc xml:whitespace="preserve">the label text to set</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_stock_id"
              c:identifier="gtk_action_set_stock_id"
              version="2.16">
        <doc xml:whitespace="preserve">Sets the stock id on @action</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="stock_id" transfer-ownership="none">
            <doc xml:whitespace="preserve">the stock id</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_tooltip"
              c:identifier="gtk_action_set_tooltip"
              version="2.16">
        <doc xml:whitespace="preserve">Sets the tooltip text on @action</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="tooltip" transfer-ownership="none">
            <doc xml:whitespace="preserve">the tooltip text</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_visible"
              c:identifier="gtk_action_set_visible"
              version="2.6">
        <doc xml:whitespace="preserve">Sets the ::visible property of the action to @visible. Note that 
this doesn't necessarily mean effective visibility. See 
gtk_action_is_visible() 
for that.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="visible" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE to make the action visible</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_visible_horizontal"
              c:identifier="gtk_action_set_visible_horizontal"
              version="2.16">
        <doc xml:whitespace="preserve">Sets whether @action is visible when horizontal</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="visible_horizontal" transfer-ownership="none">
            <doc xml:whitespace="preserve">whether the action is visible horizontally</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_visible_vertical"
              c:identifier="gtk_action_set_visible_vertical"
              version="2.16">
        <doc xml:whitespace="preserve">Sets whether @action is visible when vertical</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="visible_vertical" transfer-ownership="none">
            <doc xml:whitespace="preserve">whether the action is visible vertically</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="unblock_activate"
              c:identifier="gtk_action_unblock_activate"
              version="2.16">
        <doc xml:whitespace="preserve">Reenable activation signals from the action</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <property name="action-group" writable="1" transfer-ownership="none">
        <type name="ActionGroup"/>
      </property>
      <property name="always-show-image"
                version="2.20"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">If %TRUE, the action's menu item proxies will ignore the #GtkSettings:gtk-menu-images 
setting and always show their image, if available.
Use this property if the menu item would be useless or hard to use
without their image.</doc>
        <type name="gboolean"/>
      </property>
      <property name="gicon"
                version="2.16"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The #GIcon displayed in the #GtkAction.
Note that the stock icon is preferred, if the #GtkAction:stock-id 
property holds the id of an existing stock icon.
This is an appearance property and thus only applies if 
#GtkActivatable:use-action-appearance is %TRUE.</doc>
        <type name="Gio.Icon"/>
      </property>
      <property name="hide-if-empty" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="icon-name"
                version="2.10"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The name of the icon from the icon theme. 
Note that the stock icon is preferred, if the #GtkAction:stock-id 
property holds the id of an existing stock icon, and the #GIcon is
preferred if the #GtkAction:gicon property is set. 
This is an appearance property and thus only applies if 
#GtkActivatable:use-action-appearance is %TRUE.</doc>
        <type name="utf8"/>
      </property>
      <property name="is-important" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="label" writable="1" transfer-ownership="none">
        <doc xml:whitespace="preserve">The label used for menu items and buttons that activate
this action. If the label is %NULL, GTK+ uses the stock 
label specified via the stock-id property.
This is an appearance property and thus only applies if 
#GtkActivatable:use-action-appearance is %TRUE.</doc>
        <type name="utf8"/>
      </property>
      <property name="name"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8"/>
      </property>
      <property name="sensitive" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="short-label" writable="1" transfer-ownership="none">
        <doc xml:whitespace="preserve">A shorter label that may be used on toolbar buttons.
This is an appearance property and thus only applies if 
#GtkActivatable:use-action-appearance is %TRUE.</doc>
        <type name="utf8"/>
      </property>
      <property name="stock-id" writable="1" transfer-ownership="none">
        <doc xml:whitespace="preserve">The stock icon displayed in widgets representing this action.
This is an appearance property and thus only applies if 
#GtkActivatable:use-action-appearance is %TRUE.</doc>
        <type name="utf8"/>
      </property>
      <property name="tooltip" writable="1" transfer-ownership="none">
        <type name="utf8"/>
      </property>
      <property name="visible" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="visible-horizontal"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="visible-overflown"
                version="2.6"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">When %TRUE, toolitem proxies for this action are represented in the 
toolbar overflow menu.</doc>
        <type name="gboolean"/>
      </property>
      <property name="visible-vertical" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <field name="object">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="private_data">
        <type name="ActionPrivate" c:type="GtkActionPrivate*"/>
      </field>
      <glib:signal name="activate" version="2.4">
        <doc xml:whitespace="preserve">The "activate" signal is emitted when the action is activated.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="ActionClass"
            c:type="GtkActionClass"
            glib:is-gtype-struct-for="Action">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="activate">
        <callback name="activate">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="action" transfer-ownership="none">
              <type name="Action" c:type="GtkAction*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="menu_item_type">
        <type name="GType" c:type="GType"/>
      </field>
      <field name="toolbar_item_type">
        <type name="GType" c:type="GType"/>
      </field>
      <field name="create_menu_item">
        <callback name="create_menu_item">
          <return-value transfer-ownership="full">
            <doc xml:whitespace="preserve">a menu item connected to the action.</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </return-value>
          <parameters>
            <parameter name="action" transfer-ownership="none">
              <type name="Action" c:type="GtkAction*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="create_tool_item">
        <callback name="create_tool_item">
          <return-value transfer-ownership="full">
            <doc xml:whitespace="preserve">a toolbar item connected to the action.</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </return-value>
          <parameters>
            <parameter name="action" transfer-ownership="none">
              <type name="Action" c:type="GtkAction*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="connect_proxy">
        <callback name="connect_proxy">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="action" transfer-ownership="none">
              <type name="Action" c:type="GtkAction*"/>
            </parameter>
            <parameter name="proxy" transfer-ownership="none">
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="disconnect_proxy">
        <callback name="disconnect_proxy">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="action" transfer-ownership="none">
              <type name="Action" c:type="GtkAction*"/>
            </parameter>
            <parameter name="proxy" transfer-ownership="none">
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="create_menu">
        <callback name="create_menu">
          <return-value transfer-ownership="full">
            <doc xml:whitespace="preserve">the menu item provided by the action, or %NULL.</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </return-value>
          <parameters>
            <parameter name="action" transfer-ownership="none">
              <type name="Action" c:type="GtkAction*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_gtk_reserved2" introspectable="0">
        <callback name="_gtk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved3" introspectable="0">
        <callback name="_gtk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved4" introspectable="0">
        <callback name="_gtk_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="ActionEntry" c:type="GtkActionEntry">
      <doc xml:whitespace="preserve">#GtkActionEntry structs are used with gtk_action_group_add_actions() to
construct actions.</doc>
      <field name="name" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="stock_id" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="label" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="accelerator" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="tooltip" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="callback" writable="1">
        <type name="GObject.Callback" c:type="GCallback"/>
      </field>
    </record>
    <class name="ActionGroup"
           c:symbol-prefix="action_group"
           c:type="GtkActionGroup"
           parent="GObject.Object"
           glib:type-name="GtkActionGroup"
           glib:get-type="gtk_action_group_get_type"
           glib:type-struct="ActionGroupClass">
      <implements name="Buildable"/>
      <constructor name="new"
                   c:identifier="gtk_action_group_new"
                   version="2.4">
        <doc xml:whitespace="preserve">Creates a new #GtkActionGroup object. The name of the action group
is used when associating &lt;link linkend="Action-Accel"&gt;keybindings&lt;/link&gt; 
with the actions.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the new #GtkActionGroup</doc>
          <type name="ActionGroup" c:type="GtkActionGroup*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:whitespace="preserve">the name of the action group.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <virtual-method name="get_action" invoker="get_action" version="2.4">
        <doc xml:whitespace="preserve">Looks up an action in the action group by name.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the action, or %NULL if no action by that name exists</doc>
          <type name="Action" c:type="GtkAction*"/>
        </return-value>
        <parameters>
          <parameter name="action_name" transfer-ownership="none">
            <doc xml:whitespace="preserve">the name of the action</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="add_action"
              c:identifier="gtk_action_group_add_action"
              version="2.4">
        <doc xml:whitespace="preserve">Adds an action object to the action group. Note that this function
does not set up the accel path of the action, which can lead to problems
if a user tries to modify the accelerator of a menuitem associated with
the action. Therefore you must either set the accel path yourself with
gtk_action_set_accel_path(), or use 
&lt;literal&gt;gtk_action_group_add_action_with_accel (..., NULL)&lt;/literal&gt;.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="action" transfer-ownership="none">
            <doc xml:whitespace="preserve">an action</doc>
            <type name="Action" c:type="GtkAction*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_action_with_accel"
              c:identifier="gtk_action_group_add_action_with_accel"
              version="2.4">
        <doc xml:whitespace="preserve">Adds an action object to the action group and sets up the accelerator.
If @accelerator is %NULL, attempts to use the accelerator associated 
with the stock_id of the action. 
Accel paths are set to
&lt;literal&gt;&amp;lt;Actions&amp;gt;/&lt;replaceable&gt;group-name&lt;/replaceable&gt;/&lt;replaceable&gt;action-name&lt;/replaceable&gt;&lt;/literal&gt;.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="action" transfer-ownership="none">
            <doc xml:whitespace="preserve">the action to add</doc>
            <type name="Action" c:type="GtkAction*"/>
          </parameter>
          <parameter name="accelerator"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">the accelerator for the action, in the format understood by gtk_accelerator_parse(), or "" for no accelerator, or %NULL to use the stock accelerator</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_actions"
              c:identifier="gtk_action_group_add_actions"
              version="2.4">
        <doc xml:whitespace="preserve">This is a convenience function to create a number of actions and add them 
to the action group.
The "activate" signals of the actions are connected to the callbacks and 
their accel paths are set to 
&lt;literal&gt;&amp;lt;Actions&amp;gt;/&lt;replaceable&gt;group-name&lt;/replaceable&gt;/&lt;replaceable&gt;action-name&lt;/replaceable&gt;&lt;/literal&gt;.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="entries" transfer-ownership="none">
            <doc xml:whitespace="preserve">an array of action descriptions</doc>
            <type name="ActionEntry" c:type="GtkActionEntry*"/>
          </parameter>
          <parameter name="n_entries" transfer-ownership="none">
            <doc xml:whitespace="preserve">the number of entries</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:whitespace="preserve">data to pass to the action callbacks</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_actions_full"
              c:identifier="gtk_action_group_add_actions_full"
              version="2.4">
        <doc xml:whitespace="preserve">This variant of gtk_action_group_add_actions() adds a #GDestroyNotify
callback for @user_data.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="entries" transfer-ownership="none">
            <doc xml:whitespace="preserve">an array of action descriptions</doc>
            <type name="ActionEntry" c:type="GtkActionEntry*"/>
          </parameter>
          <parameter name="n_entries" transfer-ownership="none">
            <doc xml:whitespace="preserve">the number of entries</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:whitespace="preserve">data to pass to the action callbacks</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="destroy" transfer-ownership="none" scope="async">
            <doc xml:whitespace="preserve">destroy notification callback for @user_data</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_radio_actions"
              c:identifier="gtk_action_group_add_radio_actions"
              version="2.4"
              introspectable="0">
        <doc xml:whitespace="preserve">This is a convenience routine to create a group of radio actions and
add them to the action group. 
The "changed" signal of the first radio action is connected to the 
&lt;literal&gt;&amp;lt;Actions&amp;gt;/&lt;replaceable&gt;group-name&lt;/replaceable&gt;/&lt;replaceable&gt;action-name&lt;/replaceable&gt;&lt;/literal&gt;.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="entries" transfer-ownership="none">
            <doc xml:whitespace="preserve">an array of radio action descriptions</doc>
            <type name="RadioActionEntry" c:type="GtkRadioActionEntry*"/>
          </parameter>
          <parameter name="n_entries" transfer-ownership="none">
            <doc xml:whitespace="preserve">the number of entries</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:whitespace="preserve">the value of the action to activate initially, or -1 if no action should be activated</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="on_change" transfer-ownership="none" closure="4">
            <doc xml:whitespace="preserve">the callback to connect to the changed signal</doc>
            <type name="GObject.Callback" c:type="GCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:whitespace="preserve">data to pass to the action callbacks</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_radio_actions_full"
              c:identifier="gtk_action_group_add_radio_actions_full"
              version="2.4">
        <doc xml:whitespace="preserve">This variant of gtk_action_group_add_radio_actions() adds a 
#GDestroyNotify callback for @user_data.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="entries" transfer-ownership="none">
            <doc xml:whitespace="preserve">an array of radio action descriptions</doc>
            <type name="RadioActionEntry" c:type="GtkRadioActionEntry*"/>
          </parameter>
          <parameter name="n_entries" transfer-ownership="none">
            <doc xml:whitespace="preserve">the number of entries</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:whitespace="preserve">the value of the action to activate initially, or -1 if no action should be activated</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="on_change"
                     transfer-ownership="none"
                     scope="notified"
                     closure="4"
                     destroy="5">
            <doc xml:whitespace="preserve">the callback to connect to the changed signal</doc>
            <type name="GObject.Callback" c:type="GCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:whitespace="preserve">data to pass to the action callbacks</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="destroy" transfer-ownership="none" scope="async">
            <doc xml:whitespace="preserve">destroy notification callback for @user_data</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_toggle_actions"
              c:identifier="gtk_action_group_add_toggle_actions"
              version="2.4">
        <doc xml:whitespace="preserve">This is a convenience function to create a number of toggle actions and add them 
to the action group.
The "activate" signals of the actions are connected to the callbacks and 
their accel paths are set to 
&lt;literal&gt;&amp;lt;Actions&amp;gt;/&lt;replaceable&gt;group-name&lt;/replaceable&gt;/&lt;replaceable&gt;action-name&lt;/replaceable&gt;&lt;/literal&gt;.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="entries" transfer-ownership="none">
            <doc xml:whitespace="preserve">an array of toggle action descriptions</doc>
            <type name="ToggleActionEntry" c:type="GtkToggleActionEntry*"/>
          </parameter>
          <parameter name="n_entries" transfer-ownership="none">
            <doc xml:whitespace="preserve">the number of entries</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:whitespace="preserve">data to pass to the action callbacks</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_toggle_actions_full"
              c:identifier="gtk_action_group_add_toggle_actions_full"
              version="2.4">
        <doc xml:whitespace="preserve">This variant of gtk_action_group_add_toggle_actions() adds a 
#GDestroyNotify callback for @user_data.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="entries" transfer-ownership="none">
            <doc xml:whitespace="preserve">an array of toggle action descriptions</doc>
            <type name="ToggleActionEntry" c:type="GtkToggleActionEntry*"/>
          </parameter>
          <parameter name="n_entries" transfer-ownership="none">
            <doc xml:whitespace="preserve">the number of entries</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:whitespace="preserve">data to pass to the action callbacks</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="destroy" transfer-ownership="none" scope="async">
            <doc xml:whitespace="preserve">destroy notification callback for @user_data</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_action"
              c:identifier="gtk_action_group_get_action"
              version="2.4">
        <doc xml:whitespace="preserve">Looks up an action in the action group by name.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the action, or %NULL if no action by that name exists</doc>
          <type name="Action" c:type="GtkAction*"/>
        </return-value>
        <parameters>
          <parameter name="action_name" transfer-ownership="none">
            <doc xml:whitespace="preserve">the name of the action</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_name"
              c:identifier="gtk_action_group_get_name"
              version="2.4">
        <doc xml:whitespace="preserve">Gets the name of the action group.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the name of the action group.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_sensitive"
              c:identifier="gtk_action_group_get_sensitive"
              version="2.4">
        <doc xml:whitespace="preserve">Returns %TRUE if the group is sensitive.  The constituent actions
can only be logically sensitive (see gtk_action_is_sensitive()) if
they are sensitive (see gtk_action_get_sensitive()) and their group
is sensitive.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the group is sensitive.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_visible"
              c:identifier="gtk_action_group_get_visible"
              version="2.4">
        <doc xml:whitespace="preserve">Returns %TRUE if the group is visible.  The constituent actions
can only be logically visible (see gtk_action_is_visible()) if
they are visible (see gtk_action_get_visible()) and their group
is visible.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the group is visible.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="list_actions"
              c:identifier="gtk_action_group_list_actions"
              version="2.4">
        <doc xml:whitespace="preserve">Lists the actions in the action group.</doc>
        <return-value transfer-ownership="container">
          <doc xml:whitespace="preserve">an allocated list of the action objects in the action group</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Action"/>
          </type>
        </return-value>
      </method>
      <method name="remove_action"
              c:identifier="gtk_action_group_remove_action"
              version="2.4">
        <doc xml:whitespace="preserve">Removes an action object from the action group.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="action" transfer-ownership="none">
            <doc xml:whitespace="preserve">an action</doc>
            <type name="Action" c:type="GtkAction*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_sensitive"
              c:identifier="gtk_action_group_set_sensitive"
              version="2.4">
        <doc xml:whitespace="preserve">Changes the sensitivity of @action_group</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="sensitive" transfer-ownership="none">
            <doc xml:whitespace="preserve">new sensitivity</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_translate_func"
              c:identifier="gtk_action_group_set_translate_func"
              version="2.4 ">
        <doc xml:whitespace="preserve">Sets a function to be used for translating the @label and @tooltip of 
#GtkActionGroupEntry&lt;!-- --&gt;s added by gtk_action_group_add_actions().
If you're using gettext(), it is enough to set the translation domain
with gtk_action_group_set_translation_domain().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="func"
                     transfer-ownership="none"
                     scope="notified"
                     closure="1"
                     destroy="2">
            <doc xml:whitespace="preserve">a #GtkTranslateFunc</doc>
            <type name="TranslateFunc" c:type="GtkTranslateFunc"/>
          </parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:whitespace="preserve">data to be passed to @func and @notify</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="notify" transfer-ownership="none" scope="async">
            <doc xml:whitespace="preserve">a #GDestroyNotify function to be called when @action_group is destroyed and when the translation function is changed again</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_translation_domain"
              c:identifier="gtk_action_group_set_translation_domain"
              version="2.4">
        <doc xml:whitespace="preserve">Sets the translation domain and uses g_dgettext() for translating the 
gtk_action_group_add_actions().
If you're not using gettext() for localization, see 
gtk_action_group_set_translate_func().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="domain" transfer-ownership="none">
            <doc xml:whitespace="preserve">the translation domain to use for g_dgettext() calls</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_visible"
              c:identifier="gtk_action_group_set_visible"
              version="2.4">
        <doc xml:whitespace="preserve">Changes the visible of @action_group.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="visible" transfer-ownership="none">
            <doc xml:whitespace="preserve">new visiblity</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="translate_string"
              c:identifier="gtk_action_group_translate_string"
              version="2.6">
        <doc xml:whitespace="preserve">Translates a string using the specified translate_func(). This
is mainly intended for language bindings.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the translation of @string</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="string" transfer-ownership="none">
            <doc xml:whitespace="preserve">a string</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="name"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8"/>
      </property>
      <property name="sensitive" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="visible" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="ActionGroupPrivate" c:type="GtkActionGroupPrivate*"/>
      </field>
      <glib:signal name="connect-proxy" version="2.4">
        <doc xml:whitespace="preserve">The ::connect-proxy signal is emitted after connecting a proxy to 
an action in the group. Note that the proxy may have been connected 
to a different action before.
This is intended for simple customizations for which a custom action
class would be too clumsy, e.g. showing tooltips for menuitems in the
statusbar.
#GtkUIManager proxies the signal and provides global notification 
just before any action is connected to a proxy, which is probably more
convenient to use.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the action</doc>
            <type name="Action"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <doc xml:whitespace="preserve">the proxy</doc>
            <type name="Widget"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="disconnect-proxy" version="2.4">
        <doc xml:whitespace="preserve">The ::disconnect-proxy signal is emitted after disconnecting a proxy 
from an action in the group. 
#GtkUIManager proxies the signal and provides global notification 
just before any action is connected to a proxy, which is probably more
convenient to use.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the action</doc>
            <type name="Action"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <doc xml:whitespace="preserve">the proxy</doc>
            <type name="Widget"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="post-activate" version="2.4">
        <doc xml:whitespace="preserve">The ::post-activate signal is emitted just after the @action in the
This is intended for #GtkUIManager to proxy the signal and provide global
notification just after any action is activated.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the action</doc>
            <type name="Action"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="pre-activate" version="2.4">
        <doc xml:whitespace="preserve">The ::pre-activate signal is emitted just before the @action in the
This is intended for #GtkUIManager to proxy the signal and provide global
notification just before any action is activated.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the action</doc>
            <type name="Action"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="ActionGroupClass"
            c:type="GtkActionGroupClass"
            glib:is-gtype-struct-for="ActionGroup">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="get_action">
        <callback name="get_action">
          <return-value transfer-ownership="none">
            <doc xml:whitespace="preserve">the action, or %NULL if no action by that name exists</doc>
            <type name="Action" c:type="GtkAction*"/>
          </return-value>
          <parameters>
            <parameter name="action_group" transfer-ownership="none">
              <type name="ActionGroup" c:type="GtkActionGroup*"/>
            </parameter>
            <parameter name="action_name" transfer-ownership="none">
              <doc xml:whitespace="preserve">the name of the action</doc>
              <type name="utf8" c:type="gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_gtk_reserved1" introspectable="0">
        <callback name="_gtk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved2" introspectable="0">
        <callback name="_gtk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved3" introspectable="0">
        <callback name="_gtk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved4" introspectable="0">
        <callback name="_gtk_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="ActionGroupPrivate"
            c:type="GtkActionGroupPrivate"
            disguised="1">
    </record>
    <record name="ActionPrivate" c:type="GtkActionPrivate" disguised="1">
    </record>
    <interface name="Activatable"
               c:symbol-prefix="activatable"
               c:type="GtkActivatable"
               glib:type-name="GtkActivatable"
               glib:get-type="gtk_activatable_get_type"
               glib:type-struct="ActivatableIface">
      <virtual-method name="sync_action_properties"
                      invoker="sync_action_properties"
                      version="2.16">
        <doc xml:whitespace="preserve">This is called to update the activatable completely, this is called
internally when the #GtkActivatable::related-action property is set
or unset and by the implementing class when
#GtkActivatable::use-action-appearance changes.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="action" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">the related #GtkAction or %NULL</doc>
            <type name="Action" c:type="GtkAction*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="update">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="action" transfer-ownership="none">
            <type name="Action" c:type="GtkAction*"/>
          </parameter>
          <parameter name="property_name" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="do_set_related_action"
              c:identifier="gtk_activatable_do_set_related_action"
              version="2.16">
        <doc xml:whitespace="preserve">This is a utility function for #GtkActivatable implementors.
When implementing #GtkActivatable you must call this when
handling changes of the #GtkActivatable:related-action, and
you must also use this to break references in #GObject-&gt;dispose().
This function adds a reference to the currently set related
action for you, it also makes sure the #GtkActivatable-&gt;update()
method is called when the related #GtkAction properties change
and registers to the action's proxy list.
&lt;note&gt;&lt;para&gt;Be careful to call this before setting the local
copy of the #GtkAction property, since this function uses 
gtk_activatable_get_action() to retrieve the previous action&lt;/para&gt;&lt;/note&gt;</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="action" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GtkAction to set</doc>
            <type name="Action" c:type="GtkAction*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_related_action"
              c:identifier="gtk_activatable_get_related_action"
              version="2.16">
        <doc xml:whitespace="preserve">Gets the related #GtkAction for @activatable.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the related #GtkAction if one is set.</doc>
          <type name="Action" c:type="GtkAction*"/>
        </return-value>
      </method>
      <method name="get_use_action_appearance"
              c:identifier="gtk_activatable_get_use_action_appearance"
              version="2.16">
        <doc xml:whitespace="preserve">Gets whether this activatable should reset its layout
and appearance when setting the related action or when
the action changes appearance.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">whether @activatable uses its actions appearance.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="set_related_action"
              c:identifier="gtk_activatable_set_related_action"
              version="2.16">
        <doc xml:whitespace="preserve">Sets the related action on the @activatable object.
&lt;note&gt;&lt;para&gt;#GtkActivatable implementors need to handle the #GtkActivatable:related-action
property and call gtk_activatable_do_set_related_action() when it changes.&lt;/para&gt;&lt;/note&gt;</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="action" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GtkAction to set</doc>
            <type name="Action" c:type="GtkAction*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_use_action_appearance"
              c:identifier="gtk_activatable_set_use_action_appearance"
              version="2.16">
        <doc xml:whitespace="preserve">Sets whether this activatable should reset its layout and appearance
when setting the related action or when the action changes appearance
&lt;note&gt;&lt;para&gt;#GtkActivatable implementors need to handle the
#GtkActivatable:use-action-appearance property and call
gtk_activatable_sync_action_properties() to update @activatable
if needed.&lt;/para&gt;&lt;/note&gt;</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="use_appearance" transfer-ownership="none">
            <doc xml:whitespace="preserve">whether to use the actions appearance</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="sync_action_properties"
              c:identifier="gtk_activatable_sync_action_properties"
              version="2.16">
        <doc xml:whitespace="preserve">This is called to update the activatable completely, this is called
internally when the #GtkActivatable::related-action property is set
or unset and by the implementing class when
#GtkActivatable::use-action-appearance changes.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="action" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">the related #GtkAction or %NULL</doc>
            <type name="Action" c:type="GtkAction*"/>
          </parameter>
        </parameters>
      </method>
      <property name="related-action"
                version="2.16"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The action that this activatable will activate and receive
updates from for various states and possibly appearance.
&lt;note&gt;&lt;para&gt;#GtkActivatable implementors need to handle the this property and 
call gtk_activatable_do_set_related_action() when it changes.&lt;/para&gt;&lt;/note&gt;</doc>
        <type name="Action"/>
      </property>
      <property name="use-action-appearance"
                version="2.16"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Whether this activatable should reset its layout
and appearance when setting the related action or when
the action changes appearance.
See the #GtkAction documentation directly to find which properties
should be ignored by the #GtkActivatable when this property is %FALSE.
&lt;note&gt;&lt;para&gt;#GtkActivatable implementors need to handle this property
and call gtk_activatable_sync_action_properties() on the activatable
widget when it changes.&lt;/para&gt;&lt;/note&gt;</doc>
        <type name="gboolean"/>
      </property>
    </interface>
    <record name="ActivatableIface"
            c:type="GtkActivatableIface"
            glib:is-gtype-struct-for="Activatable"
            version="2.16">
      <field name="g_iface">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="update">
        <callback name="update">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="activatable" transfer-ownership="none">
              <type name="Activatable" c:type="GtkActivatable*"/>
            </parameter>
            <parameter name="action" transfer-ownership="none">
              <type name="Action" c:type="GtkAction*"/>
            </parameter>
            <parameter name="property_name" transfer-ownership="none">
              <type name="utf8" c:type="gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="sync_action_properties">
        <callback name="sync_action_properties">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="activatable" transfer-ownership="none">
              <type name="Activatable" c:type="GtkActivatable*"/>
            </parameter>
            <parameter name="action" transfer-ownership="none" allow-none="1">
              <doc xml:whitespace="preserve">the related #GtkAction or %NULL</doc>
              <type name="Action" c:type="GtkAction*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="Adjustment"
           c:symbol-prefix="adjustment"
           c:type="GtkAdjustment"
           parent="Object"
           glib:type-name="GtkAdjustment"
           glib:get-type="gtk_adjustment_get_type"
           glib:type-struct="AdjustmentClass">
      <constructor name="new" c:identifier="gtk_adjustment_new">
        <return-value transfer-ownership="none">
          <type name="Object" c:type="GtkObject*"/>
        </return-value>
        <parameters>
          <parameter name="value" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="lower" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="upper" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="step_increment" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="page_increment" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="page_size" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="changed" c:identifier="gtk_adjustment_changed">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="clamp_page" c:identifier="gtk_adjustment_clamp_page">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="lower" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="upper" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="configure"
              c:identifier="gtk_adjustment_configure"
              version="2.14">
        <doc xml:whitespace="preserve">Sets all properties of the adjustment at once.
Use this function to avoid multiple emissions of the "changed"
signal. See gtk_adjustment_set_lower() for an alternative way
of compressing multiple emissions of "changed" into one.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="value" transfer-ownership="none">
            <doc xml:whitespace="preserve">the new value</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="lower" transfer-ownership="none">
            <doc xml:whitespace="preserve">the new minimum value</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="upper" transfer-ownership="none">
            <doc xml:whitespace="preserve">the new maximum value</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="step_increment" transfer-ownership="none">
            <doc xml:whitespace="preserve">the new step increment</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="page_increment" transfer-ownership="none">
            <doc xml:whitespace="preserve">the new page increment</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="page_size" transfer-ownership="none">
            <doc xml:whitespace="preserve">the new page size</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_lower"
              c:identifier="gtk_adjustment_get_lower"
              version="2.14">
        <doc xml:whitespace="preserve">Retrieves the minimum value of the adjustment.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The current minimum value of the adjustment.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </method>
      <method name="get_page_increment"
              c:identifier="gtk_adjustment_get_page_increment"
              version="2.14">
        <doc xml:whitespace="preserve">Retrieves the page increment of the adjustment.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The current page increment of the adjustment.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </method>
      <method name="get_page_size"
              c:identifier="gtk_adjustment_get_page_size"
              version="2.14">
        <doc xml:whitespace="preserve">Retrieves the page size of the adjustment.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The current page size of the adjustment.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </method>
      <method name="get_step_increment"
              c:identifier="gtk_adjustment_get_step_increment"
              version="2.14">
        <doc xml:whitespace="preserve">Retrieves the step increment of the adjustment.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The current step increment of the adjustment.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </method>
      <method name="get_upper"
              c:identifier="gtk_adjustment_get_upper"
              version="2.14">
        <doc xml:whitespace="preserve">Retrieves the maximum value of the adjustment.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The current maximum value of the adjustment.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </method>
      <method name="get_value" c:identifier="gtk_adjustment_get_value">
        <doc xml:whitespace="preserve">Gets the current value of the adjustment. See
gtk_adjustment_set_value ().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The current value of the adjustment.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </method>
      <method name="set_lower"
              c:identifier="gtk_adjustment_set_lower"
              version="2.14">
        <doc xml:whitespace="preserve">Sets the minimum value of the adjustment.
When setting multiple adjustment properties via their individual
setters, multiple "changed" signals will be emitted. However, since
the emission of the "changed" signal is tied to the emission of the
"GObject::notify" signals of the changed properties, it's possible
to compress the "changed" signals into one by calling
g_object_freeze_notify() and g_object_thaw_notify() around the
calls to the individual setters.
Alternatively, using a single g_object_set() for all the properties
to change, or using gtk_adjustment_configure() has the same effect
of compressing "changed" emissions.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="lower" transfer-ownership="none">
            <doc xml:whitespace="preserve">the new minimum value</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_page_increment"
              c:identifier="gtk_adjustment_set_page_increment"
              version="2.14">
        <doc xml:whitespace="preserve">Sets the page increment of the adjustment.
See gtk_adjustment_set_lower() about how to compress multiple
emissions of the "changed" signal when setting multiple adjustment
properties.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="page_increment" transfer-ownership="none">
            <doc xml:whitespace="preserve">the new page increment</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_page_size"
              c:identifier="gtk_adjustment_set_page_size"
              version="2.14">
        <doc xml:whitespace="preserve">Sets the page size of the adjustment.
See gtk_adjustment_set_lower() about how to compress multiple
emissions of the "changed" signal when setting multiple adjustment
properties.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="page_size" transfer-ownership="none">
            <doc xml:whitespace="preserve">the new page size</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_step_increment"
              c:identifier="gtk_adjustment_set_step_increment"
              version="2.14">
        <doc xml:whitespace="preserve">Sets the step increment of the adjustment.
See gtk_adjustment_set_lower() about how to compress multiple
emissions of the "changed" signal when setting multiple adjustment
properties.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="step_increment" transfer-ownership="none">
            <doc xml:whitespace="preserve">the new step increment</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_upper"
              c:identifier="gtk_adjustment_set_upper"
              version="2.14">
        <doc xml:whitespace="preserve">Sets the maximum value of the adjustment.
Note that values will be restricted by
&lt;literal&gt;upper - page-size&lt;/literal&gt; if the page-size
property is nonzero.
See gtk_adjustment_set_lower() about how to compress multiple
emissions of the "changed" signal when setting multiple adjustment
properties.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="upper" transfer-ownership="none">
            <doc xml:whitespace="preserve">the new maximum value</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_value" c:identifier="gtk_adjustment_set_value">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="value" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="value_changed" c:identifier="gtk_adjustment_value_changed">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <property name="lower"
                version="2.4"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The minimum value of the adjustment.</doc>
        <type name="gdouble"/>
      </property>
      <property name="page-increment"
                version="2.4"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The page increment of the adjustment.</doc>
        <type name="gdouble"/>
      </property>
      <property name="page-size"
                version="2.4"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The page size of the adjustment. 
Note that the page-size is irrelevant and should be set to zero
if the adjustment is used for a simple scalar value, e.g. in a 
#GtkSpinButton.</doc>
        <type name="gdouble"/>
      </property>
      <property name="step-increment"
                version="2.4"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The step increment of the adjustment.</doc>
        <type name="gdouble"/>
      </property>
      <property name="upper"
                version="2.4"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The maximum value of the adjustment. 
Note that values will be restricted by 
&lt;literal&gt;upper - page-size&lt;/literal&gt; if the page-size 
property is nonzero.</doc>
        <type name="gdouble"/>
      </property>
      <property name="value"
                version="2.4"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The value of the adjustment.</doc>
        <type name="gdouble"/>
      </property>
      <field name="parent_instance">
        <type name="Object" c:type="GtkObject"/>
      </field>
      <field name="lower">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="upper">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="value">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="step_increment">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="page_increment">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="page_size">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <glib:signal name="changed">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
      <glib:signal name="value-changed">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="AdjustmentClass"
            c:type="GtkAdjustmentClass"
            glib:is-gtype-struct-for="Adjustment">
      <field name="parent_class">
        <type name="ObjectClass" c:type="GtkObjectClass"/>
      </field>
      <field name="changed">
        <callback name="changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="adjustment" transfer-ownership="none">
              <type name="Adjustment" c:type="GtkAdjustment*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="value_changed">
        <callback name="value_changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="adjustment" transfer-ownership="none">
              <type name="Adjustment" c:type="GtkAdjustment*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_gtk_reserved1" introspectable="0">
        <callback name="_gtk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved2" introspectable="0">
        <callback name="_gtk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved3" introspectable="0">
        <callback name="_gtk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved4" introspectable="0">
        <callback name="_gtk_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <enumeration name="Align"
                 glib:type-name="GtkAlign"
                 glib:get-type="gtk_align_get_type"
                 c:type="GtkAlign">
      <doc xml:whitespace="preserve">no meaningful way to stretch
or bottom
or top
allocation
Controls how a widget deals with extra space in a single (x or y)
dimension.
Alignment only matters if the widget receives a "too large"
allocation, for example if you packed the widget with the "expand"
flag inside a #GtkBox, then the widget might get extra space.  If
you have for example a 16x16 icon inside a 32x32 space, the icon
could be scaled and stretched, it could be centered, or it could be
positioned to one side of the space.</doc>
      <member name="fill"
              value="0"
              c:identifier="GTK_ALIGN_FILL"
              glib:nick="fill"/>
      <member name="start"
              value="1"
              c:identifier="GTK_ALIGN_START"
              glib:nick="start"/>
      <member name="end"
              value="2"
              c:identifier="GTK_ALIGN_END"
              glib:nick="end"/>
      <member name="center"
              value="3"
              c:identifier="GTK_ALIGN_CENTER"
              glib:nick="center"/>
    </enumeration>
    <class name="Alignment"
           c:symbol-prefix="alignment"
           c:type="GtkAlignment"
           parent="Bin"
           glib:type-name="GtkAlignment"
           glib:get-type="gtk_alignment_get_type"
           glib:type-struct="AlignmentClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Buildable"/>
      <implements name="SizeRequest"/>
      <constructor name="new" c:identifier="gtk_alignment_new">
        <doc xml:whitespace="preserve">Creates a new #GtkAlignment.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the new #GtkAlignment.</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="xalign" transfer-ownership="none">
            <doc xml:whitespace="preserve">the horizontal alignment of the child widget, from 0 (left) to 1 (right).</doc>
            <type name="gfloat" c:type="gfloat"/>
          </parameter>
          <parameter name="yalign" transfer-ownership="none">
            <doc xml:whitespace="preserve">the vertical alignment of the child widget, from 0 (top) to 1 (bottom).</doc>
            <type name="gfloat" c:type="gfloat"/>
          </parameter>
          <parameter name="xscale" transfer-ownership="none">
            <doc xml:whitespace="preserve">the amount that the child widget expands horizontally to fill up unused space, from 0 to 1. A value of 0 indicates that the child widget should never expand. A value of 1 indicates that the child widget will expand to fill all of the space allocated for the #GtkAlignment.</doc>
            <type name="gfloat" c:type="gfloat"/>
          </parameter>
          <parameter name="yscale" transfer-ownership="none">
            <doc xml:whitespace="preserve">the amount that the child widget expands vertically to fill up unused space, from 0 to 1. The values are similar to @xscale.</doc>
            <type name="gfloat" c:type="gfloat"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_padding"
              c:identifier="gtk_alignment_get_padding"
              version="2.4">
        <doc xml:whitespace="preserve">Gets the padding on the different sides of the widget.
See gtk_alignment_set_padding ().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="padding_top"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">location to store the padding for the top of the widget, or %NULL</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
          <parameter name="padding_bottom"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">location to store the padding for the bottom of the widget, or %NULL</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
          <parameter name="padding_left"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">location to store the padding for the left of the widget, or %NULL</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
          <parameter name="padding_right"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">location to store the padding for the right of the widget, or %NULL</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set" c:identifier="gtk_alignment_set">
        <doc xml:whitespace="preserve">Sets the #GtkAlignment values.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="xalign" transfer-ownership="none">
            <doc xml:whitespace="preserve">the horizontal alignment of the child widget, from 0 (left) to 1 (right).</doc>
            <type name="gfloat" c:type="gfloat"/>
          </parameter>
          <parameter name="yalign" transfer-ownership="none">
            <doc xml:whitespace="preserve">the vertical alignment of the child widget, from 0 (top) to 1 (bottom).</doc>
            <type name="gfloat" c:type="gfloat"/>
          </parameter>
          <parameter name="xscale" transfer-ownership="none">
            <doc xml:whitespace="preserve">the amount that the child widget expands horizontally to fill up unused space, from 0 to 1. A value of 0 indicates that the child widget should never expand. A value of 1 indicates that the child widget will expand to fill all of the space allocated for the #GtkAlignment.</doc>
            <type name="gfloat" c:type="gfloat"/>
          </parameter>
          <parameter name="yscale" transfer-ownership="none">
            <doc xml:whitespace="preserve">the amount that the child widget expands vertically to fill up unused space, from 0 to 1. The values are similar to @xscale.</doc>
            <type name="gfloat" c:type="gfloat"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_padding"
              c:identifier="gtk_alignment_set_padding"
              version="2.4">
        <doc xml:whitespace="preserve">Sets the padding on the different sides of the widget.
The padding adds blank space to the sides of the widget. For instance,
this can be used to indent the child widget towards the right by adding
padding on the left.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="padding_top" transfer-ownership="none">
            <doc xml:whitespace="preserve">the padding at the top of the widget</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="padding_bottom" transfer-ownership="none">
            <doc xml:whitespace="preserve">the padding at the bottom of the widget</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="padding_left" transfer-ownership="none">
            <doc xml:whitespace="preserve">the padding at the left of the widget</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="padding_right" transfer-ownership="none">
            <doc xml:whitespace="preserve">the padding at the right of the widget.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <property name="bottom-padding"
                version="2.4"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The padding to insert at the bottom of the widget.</doc>
        <type name="guint"/>
      </property>
      <property name="left-padding"
                version="2.4"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The padding to insert at the left of the widget.</doc>
        <type name="guint"/>
      </property>
      <property name="right-padding"
                version="2.4"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The padding to insert at the right of the widget.</doc>
        <type name="guint"/>
      </property>
      <property name="top-padding"
                version="2.4"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The padding to insert at the top of the widget.</doc>
        <type name="guint"/>
      </property>
      <property name="xalign" writable="1" transfer-ownership="none">
        <type name="gfloat"/>
      </property>
      <property name="xscale" writable="1" transfer-ownership="none">
        <type name="gfloat"/>
      </property>
      <property name="yalign" writable="1" transfer-ownership="none">
        <type name="gfloat"/>
      </property>
      <property name="yscale" writable="1" transfer-ownership="none">
        <type name="gfloat"/>
      </property>
      <field name="bin">
        <type name="Bin" c:type="GtkBin"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="AlignmentPrivate" c:type="GtkAlignmentPrivate*"/>
      </field>
    </class>
    <record name="AlignmentClass"
            c:type="GtkAlignmentClass"
            glib:is-gtype-struct-for="Alignment">
      <field name="parent_class">
        <type name="BinClass" c:type="GtkBinClass"/>
      </field>
    </record>
    <record name="AlignmentPrivate" c:type="GtkAlignmentPrivate" disguised="1">
    </record>
    <class name="Application"
           c:symbol-prefix="application"
           c:type="GtkApplication"
           parent="Gio.Application"
           glib:type-name="GtkApplication"
           glib:get-type="gtk_application_get_type"
           glib:type-struct="ApplicationClass">
      <implements name="Gio.Initable"/>
      <constructor name="new" c:identifier="gtk_application_new" version="3.0">
        <doc xml:whitespace="preserve">Create a new #GtkApplication, or if one has already been initialized
in this process, return the existing instance. This function will as
a side effect initialize the display system; see gtk_init().
For the behavior if this application is running in another process,
see g_application_new().</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A newly-referenced #GtkApplication</doc>
          <type name="Application" c:type="GtkApplication*"/>
        </return-value>
        <parameters>
          <parameter name="appid" transfer-ownership="none">
            <doc xml:whitespace="preserve">System-dependent application identifier</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="argc"
                     direction="inout"
                     caller-allocates="0"
                     transfer-ownership="full"
                     allow-none="1">
            <doc xml:whitespace="preserve">System argument count</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="argv"
                     direction="inout"
                     caller-allocates="0"
                     transfer-ownership="full"
                     allow-none="1">
            <doc xml:whitespace="preserve">System argument vector</doc>
            <type name="utf8" c:type="gchar***"/>
          </parameter>
        </parameters>
      </constructor>
      <virtual-method name="create_window"
                      invoker="create_window"
                      version="3.0">
        <doc xml:whitespace="preserve">Creates a new #GtkWindow for the application.
This function calls the #GtkApplication::create_window() virtual function,
which can be overridden by sub-classes, for instance to use #GtkBuilder to
create the user interface. After creating a new #GtkWindow instance, it will
be added to the list of toplevels associated to the application.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the newly created application #GtkWindow</doc>
          <type name="Window" c:type="GtkWindow*"/>
        </return-value>
      </virtual-method>
      <method name="add_window"
              c:identifier="gtk_application_add_window"
              version="3.0">
        <doc xml:whitespace="preserve">Adds a window to the #GtkApplication.
If all the windows managed by #GtkApplication are closed, the
#GtkApplication will call gtk_application_quit(), and quit
the application.
If your application uses only a single toplevel window, you can
use gtk_application_get_window(). If you are using a sub-class
of #GtkApplication you should call gtk_application_create_window()
to let the #GtkApplication instance create a #GtkWindow and add
it to the list of toplevels of the application. You should call
this function only to add #GtkWindow&lt;!-- --&gt;s that you created
directly using gtk_window_new().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="window" transfer-ownership="none">
            <doc xml:whitespace="preserve">a toplevel window to add to @app</doc>
            <type name="Window" c:type="GtkWindow*"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_window"
              c:identifier="gtk_application_create_window"
              version="3.0">
        <doc xml:whitespace="preserve">Creates a new #GtkWindow for the application.
This function calls the #GtkApplication::create_window() virtual function,
which can be overridden by sub-classes, for instance to use #GtkBuilder to
create the user interface. After creating a new #GtkWindow instance, it will
be added to the list of toplevels associated to the application.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the newly created application #GtkWindow</doc>
          <type name="Window" c:type="GtkWindow*"/>
        </return-value>
      </method>
      <method name="get_window"
              c:identifier="gtk_application_get_window"
              version="3.0">
        <doc xml:whitespace="preserve">A simple #GtkApplication has a "default window". This window should
act as the primary user interaction point with your application.
The window returned by this function is of type #GTK_WINDOW_TYPE_TOPLEVEL
and its properties such as "title" and "icon-name" will be initialized
as appropriate for the platform.
If the user closes this window, and your application hasn't created
any other windows, the default action will be to call gtk_application_quit().
If your application has more than one toplevel window (e.g. an
single-document-interface application with multiple open documents),
or if you are constructing your toplevel windows yourself (e.g. using
#GtkBuilder), use gtk_application_create_window() or
gtk_application_add_window() instead.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The default #GtkWindow for this application</doc>
          <type name="Window" c:type="GtkWindow*"/>
        </return-value>
      </method>
      <method name="get_windows"
              c:identifier="gtk_application_get_windows"
              version="3.0">
        <doc xml:whitespace="preserve">Retrieves the list of windows previously registered with
gtk_application_create_window() or gtk_application_add_window().
to the list of #GtkWindow&lt;!-- --&gt;s registered by this application,
or %NULL. The returned #GSList is owned by the #GtkApplication
and it should not be modified or freed directly.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">A pointer</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="Window"/>
          </type>
        </return-value>
      </method>
      <method name="quit" c:identifier="gtk_application_quit" version="3.0">
        <doc xml:whitespace="preserve">Request the application exit.  This function invokes
g_application_quit_with_data(), which normally will
in turn cause @app to emit #GtkApplication::quit.
To control an application's quit behavior (for example, to ask for
files to be saved), connect to the #GtkApplication::quit signal
handler.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="run" c:identifier="gtk_application_run" version="3.0">
        <doc xml:whitespace="preserve">Runs the main loop; see g_application_run().
The default implementation for #GtkApplication uses gtk_main().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="set_action_group"
              c:identifier="gtk_application_set_action_group"
              version="3.0">
        <doc xml:whitespace="preserve">Set @group as this application's global action group.
This will ensure the operating system interface uses
these actions as follows:
&lt;itemizedlist&gt;
&lt;listitem&gt;In GNOME 2 this exposes the actions for scripting.&lt;/listitem&gt;
&lt;listitem&gt;In GNOME 3, this function populates the application menu.&lt;/listitem&gt;
&lt;listitem&gt;In Windows prior to version 7, this function does nothing.&lt;/listitem&gt;
&lt;listitem&gt;In Windows 7, this function adds "Tasks" to the Jump List.&lt;/listitem&gt;
&lt;listitem&gt;In Mac OS X, this function extends the Dock menu.&lt;/listitem&gt;
&lt;/itemizedlist&gt;
It is an error to call this function more than once.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="group" transfer-ownership="none">
            <doc xml:whitespace="preserve">A #GtkActionGroup</doc>
            <type name="ActionGroup" c:type="GtkActionGroup*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="Gio.Application" c:type="GApplication"/>
      </field>
      <field name="priv">
        <type name="ApplicationPrivate" c:type="GtkApplicationPrivate*"/>
      </field>
      <glib:signal name="action" version="3.0">
        <doc xml:whitespace="preserve">This signal is emitted when an action is activated. The action name
is passed as the first argument, but also as signal detail, so it
is possible to connect to this signal for individual actions.
See also the #GApplication::action-with-data signal which may in
turn trigger this signal.
The signal is never emitted for disabled actions.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">The name of the activated action</doc>
            <type name="utf8"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="activated" version="3.0">
        <doc xml:whitespace="preserve">This signal is emitted when a non-primary process for a given
application is invoked while your application is running; for
example, when a file browser launches your program to open a
file.  The raw operating system arguments are passed in the
variant @arguments.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="quit" version="3.0">
        <doc xml:whitespace="preserve">This signal is emitted when a quit is initiated.  See also
the #GApplication::quit-with-data signal which may in
turn trigger this signal.
The default handler for this signal exits the mainloop of the
application. It is possible to override the default handler
by simply returning %TRUE from a callback, e.g.:
|[
static gboolean
my_application_quit (GtkApplication *application)
{
/&amp;ast; if some_condition is TRUE, do not quit &amp;ast;/
if (some_condition)
return TRUE;
/&amp;ast; this will cause the application to quit &amp;ast;
return FALSE;
}
g_signal_connect (application, "quit",
G_CALLBACK (my_application_quit),
NULL);
]|
signal emission</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the signal has been handled, %FALSE to continue</doc>
          <type name="gboolean"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="ApplicationClass"
            c:type="GtkApplicationClass"
            glib:is-gtype-struct-for="Application">
      <field name="parent_class">
        <type name="Gio.ApplicationClass" c:type="GApplicationClass"/>
      </field>
      <field name="create_window">
        <callback name="create_window">
          <return-value transfer-ownership="none">
            <doc xml:whitespace="preserve">the newly created application #GtkWindow</doc>
            <type name="Window" c:type="GtkWindow*"/>
          </return-value>
          <parameters>
            <parameter name="app" transfer-ownership="none">
              <type name="Application" c:type="GtkApplication*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="activated">
        <callback name="activated">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="app" transfer-ownership="none">
              <type name="Application" c:type="GtkApplication*"/>
            </parameter>
            <parameter name="args" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="action">
        <callback name="action">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="app" transfer-ownership="none">
              <type name="Application" c:type="GtkApplication*"/>
            </parameter>
            <parameter name="action_name" transfer-ownership="none">
              <type name="utf8" c:type="gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="quit">
        <callback name="quit">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="app" transfer-ownership="none">
              <type name="Application" c:type="GtkApplication*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_gtk_reserved1" introspectable="0">
        <callback name="_gtk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved2" introspectable="0">
        <callback name="_gtk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved3" introspectable="0">
        <callback name="_gtk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved4" introspectable="0">
        <callback name="_gtk_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved5" introspectable="0">
        <callback name="_gtk_reserved5">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved6" introspectable="0">
        <callback name="_gtk_reserved6">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved7" introspectable="0">
        <callback name="_gtk_reserved7">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved8" introspectable="0">
        <callback name="_gtk_reserved8">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved9" introspectable="0">
        <callback name="_gtk_reserved9">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved10" introspectable="0">
        <callback name="_gtk_reserved10">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="ApplicationPrivate"
            c:type="GtkApplicationPrivate"
            disguised="1">
    </record>
    <record name="Arg" c:type="GtkArg">
      <doc xml:whitespace="preserve">This is a structure that we use to pass in typed values (and names).</doc>
      <field name="type" writable="1">
        <type name="GType" c:type="GType"/>
      </field>
      <field name="name" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <union name="d" c:type="d">
        <field name="char_data" writable="1">
          <type name="gchar" c:type="gchar"/>
        </field>
        <field name="uchar_data" writable="1">
          <type name="guint8" c:type="guchar"/>
        </field>
        <field name="bool_data" writable="1">
          <type name="gboolean" c:type="gboolean"/>
        </field>
        <field name="int_data" writable="1">
          <type name="gint" c:type="gint"/>
        </field>
        <field name="uint_data" writable="1">
          <type name="guint" c:type="guint"/>
        </field>
        <field name="long_data" writable="1">
          <type name="glong" c:type="glong"/>
        </field>
        <field name="ulong_data" writable="1">
          <type name="gulong" c:type="gulong"/>
        </field>
        <field name="float_data" writable="1">
          <type name="gfloat" c:type="gfloat"/>
        </field>
        <field name="double_data" writable="1">
          <type name="gdouble" c:type="gdouble"/>
        </field>
        <field name="string_data" writable="1">
          <type name="utf8" c:type="gchar*"/>
        </field>
        <field name="object_data" writable="1">
          <type name="Object" c:type="GtkObject*"/>
        </field>
        <field name="pointer_data" writable="1">
          <type name="gpointer" c:type="gpointer"/>
        </field>
        <record name="signal_data" c:type="signal_data">
          <field name="f" writable="1">
            <type name="GObject.Callback" c:type="GCallback"/>
          </field>
          <field name="d" writable="1">
            <type name="gpointer" c:type="gpointer"/>
          </field>
        </record>
      </union>
    </record>
    <class name="Arrow"
           c:symbol-prefix="arrow"
           c:type="GtkArrow"
           parent="Misc"
           glib:type-name="GtkArrow"
           glib:get-type="gtk_arrow_get_type"
           glib:type-struct="ArrowClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Buildable"/>
      <implements name="SizeRequest"/>
      <constructor name="new" c:identifier="gtk_arrow_new">
        <doc xml:whitespace="preserve">Creates a new #GtkArrow widget.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the new #GtkArrow widget.</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="arrow_type" transfer-ownership="none">
            <doc xml:whitespace="preserve">a valid #GtkArrowType.</doc>
            <type name="ArrowType" c:type="GtkArrowType"/>
          </parameter>
          <parameter name="shadow_type" transfer-ownership="none">
            <doc xml:whitespace="preserve">a valid #GtkShadowType.</doc>
            <type name="ShadowType" c:type="GtkShadowType"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="set" c:identifier="gtk_arrow_set">
        <doc xml:whitespace="preserve">Sets the direction and style of the #GtkArrow, @arrow.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arrow_type" transfer-ownership="none">
            <doc xml:whitespace="preserve">a valid #GtkArrowType.</doc>
            <type name="ArrowType" c:type="GtkArrowType"/>
          </parameter>
          <parameter name="shadow_type" transfer-ownership="none">
            <doc xml:whitespace="preserve">a valid #GtkShadowType.</doc>
            <type name="ShadowType" c:type="GtkShadowType"/>
          </parameter>
        </parameters>
      </method>
      <property name="arrow-type" writable="1" transfer-ownership="none">
        <type name="ArrowType"/>
      </property>
      <property name="shadow-type" writable="1" transfer-ownership="none">
        <type name="ShadowType"/>
      </property>
      <field name="misc">
        <type name="Misc" c:type="GtkMisc"/>
      </field>
      <field name="priv">
        <type name="ArrowPrivate" c:type="GtkArrowPrivate*"/>
      </field>
    </class>
    <record name="ArrowClass"
            c:type="GtkArrowClass"
            glib:is-gtype-struct-for="Arrow">
      <field name="parent_class">
        <type name="MiscClass" c:type="GtkMiscClass"/>
      </field>
    </record>
    <enumeration name="ArrowPlacement"
                 glib:type-name="GtkArrowPlacement"
                 glib:get-type="gtk_arrow_placement_get_type"
                 c:type="GtkArrowPlacement">
      <member name="both"
              value="0"
              c:identifier="GTK_ARROWS_BOTH"
              glib:nick="both"/>
      <member name="start"
              value="1"
              c:identifier="GTK_ARROWS_START"
              glib:nick="start"/>
      <member name="end"
              value="2"
              c:identifier="GTK_ARROWS_END"
              glib:nick="end"/>
    </enumeration>
    <record name="ArrowPrivate" c:type="GtkArrowPrivate" disguised="1">
    </record>
    <enumeration name="ArrowType"
                 glib:type-name="GtkArrowType"
                 glib:get-type="gtk_arrow_type_get_type"
                 c:type="GtkArrowType">
      <member name="up" value="0" c:identifier="GTK_ARROW_UP" glib:nick="up"/>
      <member name="down"
              value="1"
              c:identifier="GTK_ARROW_DOWN"
              glib:nick="down"/>
      <member name="left"
              value="2"
              c:identifier="GTK_ARROW_LEFT"
              glib:nick="left"/>
      <member name="right"
              value="3"
              c:identifier="GTK_ARROW_RIGHT"
              glib:nick="right"/>
      <member name="none"
              value="4"
              c:identifier="GTK_ARROW_NONE"
              glib:nick="none"/>
    </enumeration>
    <class name="AspectFrame"
           c:symbol-prefix="aspect_frame"
           c:type="GtkAspectFrame"
           parent="Frame"
           glib:type-name="GtkAspectFrame"
           glib:get-type="gtk_aspect_frame_get_type"
           glib:type-struct="AspectFrameClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Buildable"/>
      <implements name="SizeRequest"/>
      <constructor name="new" c:identifier="gtk_aspect_frame_new">
        <doc xml:whitespace="preserve">Create a new #GtkAspectFrame.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the new #GtkAspectFrame.</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="label" transfer-ownership="none">
            <doc xml:whitespace="preserve">Label text.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="xalign" transfer-ownership="none">
            <doc xml:whitespace="preserve">Horizontal alignment of the child within the allocation of the #GtkAspectFrame. This ranges from 0.0 (left aligned) to 1.0 (right aligned)</doc>
            <type name="gfloat" c:type="gfloat"/>
          </parameter>
          <parameter name="yalign" transfer-ownership="none">
            <doc xml:whitespace="preserve">Vertical alignment of the child within the allocation of the #GtkAspectFrame. This ranges from 0.0 (left aligned) to 1.0 (right aligned)</doc>
            <type name="gfloat" c:type="gfloat"/>
          </parameter>
          <parameter name="ratio" transfer-ownership="none">
            <doc xml:whitespace="preserve">The desired aspect ratio.</doc>
            <type name="gfloat" c:type="gfloat"/>
          </parameter>
          <parameter name="obey_child" transfer-ownership="none">
            <doc xml:whitespace="preserve">If %TRUE, @ratio is ignored, and the aspect ratio is taken from the requistion of the child.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="set" c:identifier="gtk_aspect_frame_set">
        <doc xml:whitespace="preserve">Set parameters for an existing #GtkAspectFrame.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="xalign" transfer-ownership="none">
            <doc xml:whitespace="preserve">Horizontal alignment of the child within the allocation of the #GtkAspectFrame. This ranges from 0.0 (left aligned) to 1.0 (right aligned)</doc>
            <type name="gfloat" c:type="gfloat"/>
          </parameter>
          <parameter name="yalign" transfer-ownership="none">
            <doc xml:whitespace="preserve">Vertical alignment of the child within the allocation of the #GtkAspectFrame. This ranges from 0.0 (left aligned) to 1.0 (right aligned)</doc>
            <type name="gfloat" c:type="gfloat"/>
          </parameter>
          <parameter name="ratio" transfer-ownership="none">
            <doc xml:whitespace="preserve">The desired aspect ratio.</doc>
            <type name="gfloat" c:type="gfloat"/>
          </parameter>
          <parameter name="obey_child" transfer-ownership="none">
            <doc xml:whitespace="preserve">If %TRUE, @ratio is ignored, and the aspect ratio is taken from the requistion of the child.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="obey-child" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="ratio" writable="1" transfer-ownership="none">
        <type name="gfloat"/>
      </property>
      <property name="xalign" writable="1" transfer-ownership="none">
        <type name="gfloat"/>
      </property>
      <property name="yalign" writable="1" transfer-ownership="none">
        <type name="gfloat"/>
      </property>
      <field name="frame">
        <type name="Frame" c:type="GtkFrame"/>
      </field>
      <field name="priv">
        <type name="AspectFramePrivate" c:type="GtkAspectFramePrivate*"/>
      </field>
    </class>
    <record name="AspectFrameClass"
            c:type="GtkAspectFrameClass"
            glib:is-gtype-struct-for="AspectFrame">
      <field name="parent_class">
        <type name="FrameClass" c:type="GtkFrameClass"/>
      </field>
    </record>
    <record name="AspectFramePrivate"
            c:type="GtkAspectFramePrivate"
            disguised="1">
    </record>
    <class name="Assistant"
           c:symbol-prefix="assistant"
           c:type="GtkAssistant"
           parent="Window"
           glib:type-name="GtkAssistant"
           glib:get-type="gtk_assistant_get_type"
           glib:type-struct="AssistantClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Buildable"/>
      <implements name="SizeRequest"/>
      <constructor name="new" c:identifier="gtk_assistant_new" version="2.10">
        <doc xml:whitespace="preserve">Creates a new #GtkAssistant.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a newly created #GtkAssistant</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="add_action_widget"
              c:identifier="gtk_assistant_add_action_widget"
              version="2.10">
        <doc xml:whitespace="preserve">Adds a widget to the action area of a #GtkAssistant.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="child" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkWidget</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="append_page"
              c:identifier="gtk_assistant_append_page"
              version="2.10">
        <doc xml:whitespace="preserve">Appends a page to the @assistant.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the index (starting at 0) of the inserted page</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <parameter name="page" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkWidget</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="commit" c:identifier="gtk_assistant_commit" version="2.22">
        <doc xml:whitespace="preserve">Erases the visited page history so the back button is not
shown on the current page, and removes the cancel button
from subsequent pages.
Use this when the information provided up to the current
page is hereafter deemed permanent and cannot be modified
or undone.  For example, showing a progress page to track
a long-running, unreversible operation after the user has
clicked apply on a confirmation page.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="get_current_page"
              c:identifier="gtk_assistant_get_current_page"
              version="2.10">
        <doc xml:whitespace="preserve">Returns the page number of the current page
the @assistant, if the @assistant has no pages, -1 will be returned</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The index (starting from 0) of the current page in</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="get_n_pages"
              c:identifier="gtk_assistant_get_n_pages"
              version="2.10">
        <doc xml:whitespace="preserve">Returns the number of pages in the @assistant</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The number of pages in the @assistant.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="get_nth_page"
              c:identifier="gtk_assistant_get_nth_page"
              version="2.10">
        <doc xml:whitespace="preserve">Returns the child widget contained in page number @page_num.
if @page_num is out of bounds.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The child widget, or %NULL</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="page_num" transfer-ownership="none">
            <doc xml:whitespace="preserve">The index of a page in the @assistant, or -1 to get the last page;</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_page_complete"
              c:identifier="gtk_assistant_get_page_complete"
              version="2.10">
        <doc xml:whitespace="preserve">Gets whether @page is complete.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if @page is complete.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="page" transfer-ownership="none">
            <doc xml:whitespace="preserve">a page of @assistant</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_page_header_image"
              c:identifier="gtk_assistant_get_page_header_image"
              version="2.10">
        <doc xml:whitespace="preserve">Gets the header image for @page.
if there's no header image for the page.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the header image for @page, or %NULL</doc>
          <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
        <parameters>
          <parameter name="page" transfer-ownership="none">
            <doc xml:whitespace="preserve">a page of @assistant</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_page_side_image"
              c:identifier="gtk_assistant_get_page_side_image"
              version="2.10">
        <doc xml:whitespace="preserve">Gets the header image for @page.
if there's no side image for the page.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the side image for @page, or %NULL</doc>
          <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
        <parameters>
          <parameter name="page" transfer-ownership="none">
            <doc xml:whitespace="preserve">a page of @assistant</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_page_title"
              c:identifier="gtk_assistant_get_page_title"
              version="2.10">
        <doc xml:whitespace="preserve">Gets the title for @page.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the title for @page.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="page" transfer-ownership="none">
            <doc xml:whitespace="preserve">a page of @assistant</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_page_type"
              c:identifier="gtk_assistant_get_page_type"
              version="2.10">
        <doc xml:whitespace="preserve">Gets the page type of @page.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the page type of @page.</doc>
          <type name="AssistantPageType" c:type="GtkAssistantPageType"/>
        </return-value>
        <parameters>
          <parameter name="page" transfer-ownership="none">
            <doc xml:whitespace="preserve">a page of @assistant</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="insert_page"
              c:identifier="gtk_assistant_insert_page"
              version="2.10">
        <doc xml:whitespace="preserve">Inserts a page in the @assistant at a given position.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the index (starting from 0) of the inserted page</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <parameter name="page" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkWidget</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="position" transfer-ownership="none">
            <doc xml:whitespace="preserve">the index (starting at 0) at which to insert the page, or -1 to append the page to the @assistant</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="prepend_page"
              c:identifier="gtk_assistant_prepend_page"
              version="2.10">
        <doc xml:whitespace="preserve">Prepends a page to the @assistant.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the index (starting at 0) of the inserted page</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <parameter name="page" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkWidget</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_action_widget"
              c:identifier="gtk_assistant_remove_action_widget"
              version="2.10">
        <doc xml:whitespace="preserve">Removes a widget from the action area of a #GtkAssistant.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="child" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkWidget</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_current_page"
              c:identifier="gtk_assistant_set_current_page"
              version="2.10">
        <doc xml:whitespace="preserve">Switches the page to @page_num. Note that this will only be necessary
in custom buttons, as the @assistant flow can be set with
gtk_assistant_set_forward_page_func().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="page_num" transfer-ownership="none">
            <doc xml:whitespace="preserve">index of the page to switch to, starting from 0. If negative, the last page will be used. If greater than the number of pages in the @assistant, nothing will be done.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_forward_page_func"
              c:identifier="gtk_assistant_set_forward_page_func"
              version="2.10">
        <doc xml:whitespace="preserve">Sets the page forwarding function to be @page_func, this function will
be used to determine what will be the next page when the user presses
the forward button. Setting @page_func to %NULL will make the assistant
to use the default forward function, which just goes to the next visible 
page.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="page_func"
                     transfer-ownership="none"
                     allow-none="1"
                     scope="notified"
                     closure="1"
                     destroy="2">
            <doc xml:whitespace="preserve">the #GtkAssistantPageFunc, or %NULL to use the default one</doc>
            <type name="AssistantPageFunc" c:type="GtkAssistantPageFunc"/>
          </parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:whitespace="preserve">user data for @page_func</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="destroy" transfer-ownership="none" scope="async">
            <doc xml:whitespace="preserve">destroy notifier for @data</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_page_complete"
              c:identifier="gtk_assistant_set_page_complete"
              version="2.10">
        <doc xml:whitespace="preserve">Sets whether @page contents are complete. This will make</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="page" transfer-ownership="none">
            <doc xml:whitespace="preserve">a page of @assistant</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="complete" transfer-ownership="none">
            <doc xml:whitespace="preserve">the completeness status of the page</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_page_header_image"
              c:identifier="gtk_assistant_set_page_header_image"
              version="2.10">
        <doc xml:whitespace="preserve">Sets a header image for @page. This image is displayed in the header
area of the assistant when @page is the current page.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="page" transfer-ownership="none">
            <doc xml:whitespace="preserve">a page of @assistant</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="pixbuf" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">the new header image @page</doc>
            <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_page_side_image"
              c:identifier="gtk_assistant_set_page_side_image"
              version="2.10">
        <doc xml:whitespace="preserve">Sets a header image for @page. This image is displayed in the side
area of the assistant when @page is the current page.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="page" transfer-ownership="none">
            <doc xml:whitespace="preserve">a page of @assistant</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="pixbuf" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">the new header image @page</doc>
            <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_page_title"
              c:identifier="gtk_assistant_set_page_title"
              version="2.10">
        <doc xml:whitespace="preserve">Sets a title for @page. The title is displayed in the header
area of the assistant when @page is the current page.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="page" transfer-ownership="none">
            <doc xml:whitespace="preserve">a page of @assistant</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="title" transfer-ownership="none">
            <doc xml:whitespace="preserve">the new title for @page</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_page_type"
              c:identifier="gtk_assistant_set_page_type"
              version="2.10">
        <doc xml:whitespace="preserve">Sets the page type for @page. The page type determines the page
behavior in the @assistant.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="page" transfer-ownership="none">
            <doc xml:whitespace="preserve">a page of @assistant</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:whitespace="preserve">the new type for @page</doc>
            <type name="AssistantPageType" c:type="GtkAssistantPageType"/>
          </parameter>
        </parameters>
      </method>
      <method name="update_buttons_state"
              c:identifier="gtk_assistant_update_buttons_state"
              version="2.10">
        <doc xml:whitespace="preserve">Forces @assistant to recompute the buttons state.
GTK+ automatically takes care of this in most situations, 
e.g. when the user goes to a different page, or when the
visibility or completeness of a page changes.
One situation where it can be necessary to call this
function is when changing a value on the current page
affects the future page flow of the assistant.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <field name="parent">
        <type name="Window" c:type="GtkWindow"/>
      </field>
      <field name="priv">
        <type name="AssistantPrivate" c:type="GtkAssistantPrivate*"/>
      </field>
      <glib:signal name="apply" version="2.10">
        <doc xml:whitespace="preserve">The ::apply signal is emitted when the apply button is clicked. The default
behavior of the #GtkAssistant is to switch to the page after the current
page, unless the current page is the last one.
A handler for the ::apply signal should carry out the actions for which
the wizard has collected data. If the action takes a long time to complete,
you might consider putting a page of type %GTK_ASSISTANT_PAGE_PROGRESS
after the confirmation page and handle this operation within the
#GtkAssistant::prepare signal of the progress page.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
      <glib:signal name="cancel" version="2.10">
        <doc xml:whitespace="preserve">The ::cancel signal is emitted when then the cancel button is clicked.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
      <glib:signal name="close" version="2.10">
        <doc xml:whitespace="preserve">The ::close signal is emitted either when the close button of
a summary page is clicked, or when the apply button in the last
page in the flow (of type %GTK_ASSISTANT_PAGE_CONFIRM) is clicked.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
      <glib:signal name="prepare" version="2.10">
        <doc xml:whitespace="preserve">The ::prepare signal is emitted when a new page is set as the assistant's
current page, before making the new page visible. A handler for this signal
can do any preparation which are necessary before showing @page.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the current page</doc>
            <type name="Widget"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="AssistantClass"
            c:type="GtkAssistantClass"
            glib:is-gtype-struct-for="Assistant">
      <field name="parent_class">
        <type name="WindowClass" c:type="GtkWindowClass"/>
      </field>
      <field name="prepare">
        <callback name="prepare">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="assistant" transfer-ownership="none">
              <type name="Assistant" c:type="GtkAssistant*"/>
            </parameter>
            <parameter name="page" transfer-ownership="none">
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="apply">
        <callback name="apply">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="assistant" transfer-ownership="none">
              <type name="Assistant" c:type="GtkAssistant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="close">
        <callback name="close">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="assistant" transfer-ownership="none">
              <type name="Assistant" c:type="GtkAssistant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="cancel">
        <callback name="cancel">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="assistant" transfer-ownership="none">
              <type name="Assistant" c:type="GtkAssistant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_gtk_reserved1" introspectable="0">
        <callback name="_gtk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved2" introspectable="0">
        <callback name="_gtk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved3" introspectable="0">
        <callback name="_gtk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved4" introspectable="0">
        <callback name="_gtk_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved5" introspectable="0">
        <callback name="_gtk_reserved5">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <callback name="AssistantPageFunc" c:type="GtkAssistantPageFunc">
      <doc xml:whitespace="preserve">A function used by gtk_assistant_set_forward_page_func() to know which
is the next page given a current one. It's called both for computing the
next page when the user presses the "forward" button and for handling
the behavior of the "last" button.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">The next page number.</doc>
        <type name="gint" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="current_page" transfer-ownership="none">
          <doc xml:whitespace="preserve">The page number used to calculate the next page.</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <doc xml:whitespace="preserve">user data.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <enumeration name="AssistantPageType"
                 glib:type-name="GtkAssistantPageType"
                 glib:get-type="gtk_assistant_page_type_get_type"
                 c:type="GtkAssistantPageType">
      <doc xml:whitespace="preserve">An enum for determining the page role inside the #GtkAssistant. It's
used to handle buttons sensitivity and visibility.
Note that an assistant needs to end its page flow with a page of type
%GTK_ASSISTANT_PAGE_CONFIRM, %GTK_ASSISTANT_PAGE_SUMMARY or
%GTK_ASSISTANT_PAGE_PROGRESS to be correct.</doc>
      <member name="content"
              value="0"
              c:identifier="GTK_ASSISTANT_PAGE_CONTENT"
              glib:nick="content"/>
      <member name="intro"
              value="1"
              c:identifier="GTK_ASSISTANT_PAGE_INTRO"
              glib:nick="intro"/>
      <member name="confirm"
              value="2"
              c:identifier="GTK_ASSISTANT_PAGE_CONFIRM"
              glib:nick="confirm"/>
      <member name="summary"
              value="3"
              c:identifier="GTK_ASSISTANT_PAGE_SUMMARY"
              glib:nick="summary"/>
      <member name="progress"
              value="4"
              c:identifier="GTK_ASSISTANT_PAGE_PROGRESS"
              glib:nick="progress"/>
    </enumeration>
    <record name="AssistantPrivate" c:type="GtkAssistantPrivate" disguised="1">
    </record>
    <bitfield name="AttachOptions"
              glib:type-name="GtkAttachOptions"
              glib:get-type="gtk_attach_options_get_type"
              c:type="GtkAttachOptions">
      <member name="expand"
              value="1"
              c:identifier="GTK_EXPAND"
              glib:nick="expand"/>
      <member name="shrink"
              value="2"
              c:identifier="GTK_SHRINK"
              glib:nick="shrink"/>
      <member name="fill" value="4" c:identifier="GTK_FILL" glib:nick="fill"/>
    </bitfield>
    <constant name="BINARY_AGE" value="9008">
      <type name="gint" c:type="gint"/>
    </constant>
    <class name="Bin"
           c:symbol-prefix="bin"
           c:type="GtkBin"
           parent="Container"
           abstract="1"
           glib:type-name="GtkBin"
           glib:get-type="gtk_bin_get_type"
           glib:type-struct="BinClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Buildable"/>
      <implements name="SizeRequest"/>
      <method name="get_child" c:identifier="gtk_bin_get_child">
        <doc xml:whitespace="preserve">Gets the child of the #GtkBin, or %NULL if the bin contains
no child widget. The returned widget does not have a reference
added, so you do not need to unref it.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">pointer to child of the #GtkBin</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
      </method>
      <field name="container">
        <type name="Container" c:type="GtkContainer"/>
      </field>
      <field name="priv">
        <type name="BinPrivate" c:type="GtkBinPrivate*"/>
      </field>
    </class>
    <record name="BinClass"
            c:type="GtkBinClass"
            glib:is-gtype-struct-for="Bin">
      <field name="parent_class">
        <type name="ContainerClass" c:type="GtkContainerClass"/>
      </field>
    </record>
    <record name="BinPrivate" c:type="GtkBinPrivate" disguised="1">
    </record>
    <record name="BindingArg" c:type="GtkBindingArg">
      <field name="arg_type" writable="1">
        <type name="GType" c:type="GType"/>
      </field>
      <union name="d" c:type="d">
        <field name="long_data" writable="1">
          <type name="glong" c:type="glong"/>
        </field>
        <field name="double_data" writable="1">
          <type name="gdouble" c:type="gdouble"/>
        </field>
        <field name="string_data" writable="1">
          <type name="utf8" c:type="gchar*"/>
        </field>
      </union>
    </record>
    <record name="BindingEntry" c:type="GtkBindingEntry">
      <field name="keyval" writable="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="modifiers" writable="1">
        <type name="Gdk.ModifierType" c:type="GdkModifierType"/>
      </field>
      <field name="binding_set" writable="1">
        <type name="BindingSet" c:type="GtkBindingSet*"/>
      </field>
      <field name="destroyed" writable="1" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="in_emission" writable="1" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="marks_unbound" writable="1" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="set_next" writable="1">
        <type name="BindingEntry" c:type="GtkBindingEntry*"/>
      </field>
      <field name="hash_next" writable="1">
        <type name="BindingEntry" c:type="GtkBindingEntry*"/>
      </field>
      <field name="signals" writable="1">
        <type name="BindingSignal" c:type="GtkBindingSignal*"/>
      </field>
    </record>
    <record name="BindingSet" c:type="GtkBindingSet">
      <field name="set_name" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="priority" writable="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="widget_path_pspecs" writable="1">
        <type name="GLib.SList" c:type="GSList*">
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </field>
      <field name="widget_class_pspecs" writable="1">
        <type name="GLib.SList" c:type="GSList*">
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </field>
      <field name="class_branch_pspecs" writable="1">
        <type name="GLib.SList" c:type="GSList*">
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </field>
      <field name="entries" writable="1">
        <type name="BindingEntry" c:type="GtkBindingEntry*"/>
      </field>
      <field name="current" writable="1">
        <type name="BindingEntry" c:type="GtkBindingEntry*"/>
      </field>
      <field name="parsed" writable="1" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <method name="activate" c:identifier="gtk_binding_set_activate">
        <doc xml:whitespace="preserve">Find a key binding matching @keyval and @modifiers within</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if a binding was found and activated</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="keyval" transfer-ownership="none">
            <doc xml:whitespace="preserve">key value of the binding</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="modifiers" transfer-ownership="none">
            <doc xml:whitespace="preserve">key modifier of the binding</doc>
            <type name="Gdk.ModifierType" c:type="GdkModifierType"/>
          </parameter>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">object to activate when binding found</doc>
            <type name="Object" c:type="GtkObject*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_path" c:identifier="gtk_binding_set_add_path">
        <doc xml:whitespace="preserve">This function is used internally by the GtkRC parsing mechanism to
assign match patterns to #GtkBindingSet structures.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="path_type" transfer-ownership="none">
            <doc xml:whitespace="preserve">path type the pattern applies to</doc>
            <type name="PathType" c:type="GtkPathType"/>
          </parameter>
          <parameter name="path_pattern" transfer-ownership="none">
            <doc xml:whitespace="preserve">the actual match pattern</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="priority" transfer-ownership="none">
            <doc xml:whitespace="preserve">binding priority</doc>
            <type name="PathPriorityType" c:type="GtkPathPriorityType"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <record name="BindingSignal" c:type="GtkBindingSignal">
      <field name="next" writable="1">
        <type name="BindingSignal" c:type="GtkBindingSignal*"/>
      </field>
      <field name="signal_name" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="n_args" writable="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="args" writable="1">
        <type name="BindingArg" c:type="GtkBindingArg*"/>
      </field>
    </record>
    <record name="Border"
            c:type="GtkBorder"
            glib:type-name="GtkBorder"
            glib:get-type="gtk_border_get_type"
            c:symbol-prefix="border">
      <doc xml:whitespace="preserve">A struct that specifies a border around a rectangular area that can
be of different width on each side.</doc>
      <field name="left" writable="1">
        <type name="gint16" c:type="gint16"/>
      </field>
      <field name="right" writable="1">
        <type name="gint16" c:type="gint16"/>
      </field>
      <field name="top" writable="1">
        <type name="gint16" c:type="gint16"/>
      </field>
      <field name="bottom" writable="1">
        <type name="gint16" c:type="gint16"/>
      </field>
      <constructor name="new" c:identifier="gtk_border_new" version="2.14">
        <doc xml:whitespace="preserve">Allocates a new #GtkBorder structure and initializes its elements to zero.
freed with gtk_border_free()</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new empty #GtkBorder. The newly allocated #GtkBorder should be</doc>
          <type name="Border" c:type="GtkBorder*"/>
        </return-value>
      </constructor>
      <method name="copy" c:identifier="gtk_border_copy">
        <doc xml:whitespace="preserve">Copies a #GtkBorder structure.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a copy of @border_.</doc>
          <type name="Border" c:type="GtkBorder*"/>
        </return-value>
      </method>
      <method name="free" c:identifier="gtk_border_free">
        <doc xml:whitespace="preserve">Frees a #GtkBorder structure.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
    </record>
    <class name="Box"
           c:symbol-prefix="box"
           c:type="GtkBox"
           parent="Container"
           glib:type-name="GtkBox"
           glib:get-type="gtk_box_get_type"
           glib:type-struct="BoxClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Buildable"/>
      <implements name="Orientable"/>
      <implements name="SizeRequest"/>
      <constructor name="new" c:identifier="gtk_box_new" version="3.0">
        <doc xml:whitespace="preserve">Creates a new #GtkBox.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a new #GtkBox.</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="orientation" transfer-ownership="none">
            <doc xml:whitespace="preserve">the box' orientation.</doc>
            <type name="Orientation" c:type="GtkOrientation"/>
          </parameter>
          <parameter name="homogeneous" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE if all children are to be given equal space allocations.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="spacing" transfer-ownership="none">
            <doc xml:whitespace="preserve">the number of pixels to place by default between children.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_homogeneous" c:identifier="gtk_box_get_homogeneous">
        <doc xml:whitespace="preserve">Returns whether the box is homogeneous (all children are the
same size). See gtk_box_set_homogeneous().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the box is homogeneous.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_spacing" c:identifier="gtk_box_get_spacing">
        <doc xml:whitespace="preserve">Gets the value set by gtk_box_set_spacing().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">spacing between children</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="pack_end" c:identifier="gtk_box_pack_end">
        <doc xml:whitespace="preserve">Adds @child to @box, packed with reference to the end of @box.  
The @child is packed after (away from end of) any other child 
packed with reference to the end of @box.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="child" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GtkWidget to be added to @box</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="expand" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE if the new child is to be given extra space allocated to @box. The extra space will be divided evenly between all children of @box that use this option</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="fill" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE if space given to @child by the @expand option is actually allocated to @child, rather than just padding it.  This parameter has no effect if @expand is set to %FALSE.  A child is always allocated the full height of a #GtkHBox and the full width of a #GtkVBox.  This option affects the other dimension</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="padding" transfer-ownership="none">
            <doc xml:whitespace="preserve">extra space in pixels to put between this child and its neighbors, over and above the global amount specified by #GtkBox:spacing property.  If @child is a widget at one of the reference ends of @box, then @padding pixels are also put between</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="pack_start" c:identifier="gtk_box_pack_start">
        <doc xml:whitespace="preserve">Adds @child to @box, packed with reference to the start of @box.
The @child is packed after any other child packed with reference 
to the start of @box.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="child" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GtkWidget to be added to @box</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="expand" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE if the new child is to be given extra space allocated to</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="fill" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE if space given to @child by the @expand option is actually allocated to @child, rather than just padding it.  This parameter has no effect if @expand is set to %FALSE.  A child is always allocated the full height of a #GtkHBox and the full width of a #GtkVBox. This option affects the other dimension</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="padding" transfer-ownership="none">
            <doc xml:whitespace="preserve">extra space in pixels to put between this child and its neighbors, over and above the global amount specified by #GtkBox:spacing property.  If @child is a widget at one of the reference ends of @box, then @padding pixels are also put between</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="query_child_packing"
              c:identifier="gtk_box_query_child_packing">
        <doc xml:whitespace="preserve">Obtains information about how @child is packed into @box.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="child" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GtkWidget of the child to query</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="expand" transfer-ownership="none">
            <doc xml:whitespace="preserve">pointer to return location for #GtkBox:expand child property</doc>
            <type name="gboolean" c:type="gboolean*"/>
          </parameter>
          <parameter name="fill" transfer-ownership="none">
            <doc xml:whitespace="preserve">pointer to return location for #GtkBox:fill child property</doc>
            <type name="gboolean" c:type="gboolean*"/>
          </parameter>
          <parameter name="padding" transfer-ownership="none">
            <doc xml:whitespace="preserve">pointer to return location for #GtkBox:padding child property</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
          <parameter name="pack_type" transfer-ownership="none">
            <doc xml:whitespace="preserve">pointer to return location for #GtkBox:pack-type child property</doc>
            <type name="PackType" c:type="GtkPackType*"/>
          </parameter>
        </parameters>
      </method>
      <method name="reorder_child" c:identifier="gtk_box_reorder_child">
        <doc xml:whitespace="preserve">Moves @child to a new @position in the list of @box children.  
The list is the &lt;structfield&gt;children&lt;/structfield&gt; field of
#GtkBox-struct, and contains both widgets packed #GTK_PACK_START 
as well as widgets packed #GTK_PACK_END, in the order that these 
widgets were added to @box.
A widget's position in the @box children list determines where 
the widget is packed into @box.  A child widget at some position 
in the list will be packed just after all other widgets of the 
same packing type that appear earlier in the list.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="child" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GtkWidget to move</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="position" transfer-ownership="none">
            <doc xml:whitespace="preserve">the new position for @child in the list of children of @box, starting from 0. If negative, indicates the end of the list</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_child_packing"
              c:identifier="gtk_box_set_child_packing">
        <doc xml:whitespace="preserve">Sets the way @child is packed into @box.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="child" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GtkWidget of the child to set</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="expand" transfer-ownership="none">
            <doc xml:whitespace="preserve">the new value of the #GtkBox:expand child property</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="fill" transfer-ownership="none">
            <doc xml:whitespace="preserve">the new value of the #GtkBox:fill child property</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="padding" transfer-ownership="none">
            <doc xml:whitespace="preserve">the new value of the #GtkBox:padding child property</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="pack_type" transfer-ownership="none">
            <doc xml:whitespace="preserve">the new value of the #GtkBox:pack-type child property</doc>
            <type name="PackType" c:type="GtkPackType"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_homogeneous" c:identifier="gtk_box_set_homogeneous">
        <doc xml:whitespace="preserve">Sets the #GtkBox:homogeneous property of @box, controlling 
whether or not all children of @box are given equal space 
in the box.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="homogeneous" transfer-ownership="none">
            <doc xml:whitespace="preserve">a boolean value, %TRUE to create equal allotments, %FALSE for variable allotments</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_spacing" c:identifier="gtk_box_set_spacing">
        <doc xml:whitespace="preserve">Sets the #GtkBox:spacing property of @box, which is the 
number of pixels to place between children of @box.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="spacing" transfer-ownership="none">
            <doc xml:whitespace="preserve">the number of pixels to put between children</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <property name="homogeneous" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="spacing" writable="1" transfer-ownership="none">
        <type name="gint"/>
      </property>
      <field name="container">
        <type name="Container" c:type="GtkContainer"/>
      </field>
      <field name="priv">
        <type name="BoxPrivate" c:type="GtkBoxPrivate*"/>
      </field>
    </class>
    <record name="BoxClass"
            c:type="GtkBoxClass"
            glib:is-gtype-struct-for="Box">
      <field name="parent_class">
        <type name="ContainerClass" c:type="GtkContainerClass"/>
      </field>
    </record>
    <record name="BoxPrivate" c:type="GtkBoxPrivate" disguised="1">
    </record>
    <interface name="Buildable"
               c:symbol-prefix="buildable"
               c:type="GtkBuildable"
               glib:type-name="GtkBuildable"
               glib:get-type="gtk_buildable_get_type"
               glib:type-struct="BuildableIface">
      <virtual-method name="add_child" invoker="add_child" version="2.12">
        <doc xml:whitespace="preserve">Adds a child to @buildable. @type is an optional string
describing how the child should be added.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="builder" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkBuilder</doc>
            <type name="Builder" c:type="GtkBuilder*"/>
          </parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:whitespace="preserve">child to add</doc>
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
          <parameter name="type" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">kind of child or %NULL</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="construct_child"
                      invoker="construct_child"
                      version="2.12">
        <doc xml:whitespace="preserve">Constructs a child of @buildable with the name @name.
#GtkBuilder calls this function if a "constructor" has been
specified in the UI definition.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the constructed child</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </return-value>
        <parameters>
          <parameter name="builder" transfer-ownership="none">
            <doc xml:whitespace="preserve">#GtkBuilder used to construct this object</doc>
            <type name="Builder" c:type="GtkBuilder*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:whitespace="preserve">name of child to construct</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="custom_finished"
                      invoker="custom_finished"
                      version="2.12">
        <doc xml:whitespace="preserve">This is similar to gtk_buildable_parser_finished() but is
called once for each custom tag handled by the @buildable.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="builder" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkBuilder</doc>
            <type name="Builder" c:type="GtkBuilder*"/>
          </parameter>
          <parameter name="child" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">child object or %NULL for non-child tags</doc>
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
          <parameter name="tagname" transfer-ownership="none">
            <doc xml:whitespace="preserve">the name of the tag</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:whitespace="preserve">user data created in custom_tag_start</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="custom_tag_end"
                      invoker="custom_tag_end"
                      version="2.12">
        <doc xml:whitespace="preserve">This is called at the end of each custom element handled by 
the buildable.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="builder" transfer-ownership="none">
            <doc xml:whitespace="preserve">#GtkBuilder used to construct this object</doc>
            <type name="Builder" c:type="GtkBuilder*"/>
          </parameter>
          <parameter name="child" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">child object or %NULL for non-child tags</doc>
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
          <parameter name="tagname" transfer-ownership="none">
            <doc xml:whitespace="preserve">name of tag</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:whitespace="preserve">user data that will be passed in to parser functions</doc>
            <type name="gpointer" c:type="gpointer*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="custom_tag_start"
                      invoker="custom_tag_start"
                      version="2.12">
        <doc xml:whitespace="preserve">This is called for each unknown element under &amp;lt;child&amp;gt;.
if it doesn't.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if a object has a custom implementation, %FALSE</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="builder" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkBuilder used to construct this object</doc>
            <type name="Builder" c:type="GtkBuilder*"/>
          </parameter>
          <parameter name="child" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">child object or %NULL for non-child tags</doc>
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
          <parameter name="tagname" transfer-ownership="none">
            <doc xml:whitespace="preserve">name of tag</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="parser" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GMarkupParser structure to fill in</doc>
            <type name="GLib.MarkupParser" c:type="GMarkupParser*"/>
          </parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:whitespace="preserve">return location for user data that will be passed in to parser functions</doc>
            <type name="gpointer" c:type="gpointer*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_internal_child"
                      invoker="get_internal_child"
                      version="2.12">
        <doc xml:whitespace="preserve">Get the internal child called @childname of the @buildable object.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the internal child of the buildable object</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </return-value>
        <parameters>
          <parameter name="builder" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkBuilder</doc>
            <type name="Builder" c:type="GtkBuilder*"/>
          </parameter>
          <parameter name="childname" transfer-ownership="none">
            <doc xml:whitespace="preserve">name of child</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_name" invoker="get_name" version="2.12">
        <doc xml:whitespace="preserve">Gets the name of the @buildable object. 
#GtkBuilder sets the name based on the the 
&lt;link linkend="BUILDER-UI"&gt;GtkBuilder UI definition&lt;/link&gt; 
used to construct the @buildable.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the name set with gtk_buildable_set_name()</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </virtual-method>
      <virtual-method name="parser_finished"
                      invoker="parser_finished"
                      version="2.12">
        <doc xml:whitespace="preserve">Called when the builder finishes the parsing of a 
&lt;link linkend="BUILDER-UI"&gt;GtkBuilder UI definition&lt;/link&gt;. 
Note that this will be called once for each time 
gtk_builder_add_from_file() or gtk_builder_add_from_string() 
is called on a builder.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="builder" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkBuilder</doc>
            <type name="Builder" c:type="GtkBuilder*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_buildable_property"
                      invoker="set_buildable_property"
                      version="2.12">
        <doc xml:whitespace="preserve">Sets the property name @name to @value on the @buildable object.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="builder" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkBuilder</doc>
            <type name="Builder" c:type="GtkBuilder*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:whitespace="preserve">name of property</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:whitespace="preserve">value of property</doc>
            <type name="GObject.Value" c:type="GValue*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_name" invoker="set_name" version="2.12">
        <doc xml:whitespace="preserve">Sets the name of the @buildable object.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:whitespace="preserve">name to set</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="add_child"
              c:identifier="gtk_buildable_add_child"
              version="2.12">
        <doc xml:whitespace="preserve">Adds a child to @buildable. @type is an optional string
describing how the child should be added.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="builder" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkBuilder</doc>
            <type name="Builder" c:type="GtkBuilder*"/>
          </parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:whitespace="preserve">child to add</doc>
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
          <parameter name="type" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">kind of child or %NULL</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="construct_child"
              c:identifier="gtk_buildable_construct_child"
              version="2.12">
        <doc xml:whitespace="preserve">Constructs a child of @buildable with the name @name.
#GtkBuilder calls this function if a "constructor" has been
specified in the UI definition.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the constructed child</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </return-value>
        <parameters>
          <parameter name="builder" transfer-ownership="none">
            <doc xml:whitespace="preserve">#GtkBuilder used to construct this object</doc>
            <type name="Builder" c:type="GtkBuilder*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:whitespace="preserve">name of child to construct</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="custom_finished"
              c:identifier="gtk_buildable_custom_finished"
              version="2.12">
        <doc xml:whitespace="preserve">This is similar to gtk_buildable_parser_finished() but is
called once for each custom tag handled by the @buildable.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="builder" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkBuilder</doc>
            <type name="Builder" c:type="GtkBuilder*"/>
          </parameter>
          <parameter name="child" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">child object or %NULL for non-child tags</doc>
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
          <parameter name="tagname" transfer-ownership="none">
            <doc xml:whitespace="preserve">the name of the tag</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:whitespace="preserve">user data created in custom_tag_start</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="custom_tag_end"
              c:identifier="gtk_buildable_custom_tag_end"
              version="2.12">
        <doc xml:whitespace="preserve">This is called at the end of each custom element handled by 
the buildable.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="builder" transfer-ownership="none">
            <doc xml:whitespace="preserve">#GtkBuilder used to construct this object</doc>
            <type name="Builder" c:type="GtkBuilder*"/>
          </parameter>
          <parameter name="child" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">child object or %NULL for non-child tags</doc>
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
          <parameter name="tagname" transfer-ownership="none">
            <doc xml:whitespace="preserve">name of tag</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:whitespace="preserve">user data that will be passed in to parser functions</doc>
            <type name="gpointer" c:type="gpointer*"/>
          </parameter>
        </parameters>
      </method>
      <method name="custom_tag_start"
              c:identifier="gtk_buildable_custom_tag_start"
              version="2.12">
        <doc xml:whitespace="preserve">This is called for each unknown element under &amp;lt;child&amp;gt;.
if it doesn't.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if a object has a custom implementation, %FALSE</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="builder" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkBuilder used to construct this object</doc>
            <type name="Builder" c:type="GtkBuilder*"/>
          </parameter>
          <parameter name="child" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">child object or %NULL for non-child tags</doc>
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
          <parameter name="tagname" transfer-ownership="none">
            <doc xml:whitespace="preserve">name of tag</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="parser" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GMarkupParser structure to fill in</doc>
            <type name="GLib.MarkupParser" c:type="GMarkupParser*"/>
          </parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:whitespace="preserve">return location for user data that will be passed in to parser functions</doc>
            <type name="gpointer" c:type="gpointer*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_internal_child"
              c:identifier="gtk_buildable_get_internal_child"
              version="2.12">
        <doc xml:whitespace="preserve">Get the internal child called @childname of the @buildable object.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the internal child of the buildable object</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </return-value>
        <parameters>
          <parameter name="builder" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkBuilder</doc>
            <type name="Builder" c:type="GtkBuilder*"/>
          </parameter>
          <parameter name="childname" transfer-ownership="none">
            <doc xml:whitespace="preserve">name of child</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_name"
              c:identifier="gtk_buildable_get_name"
              version="2.12">
        <doc xml:whitespace="preserve">Gets the name of the @buildable object. 
#GtkBuilder sets the name based on the the 
&lt;link linkend="BUILDER-UI"&gt;GtkBuilder UI definition&lt;/link&gt; 
used to construct the @buildable.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the name set with gtk_buildable_set_name()</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="parser_finished"
              c:identifier="gtk_buildable_parser_finished"
              version="2.12">
        <doc xml:whitespace="preserve">Called when the builder finishes the parsing of a 
&lt;link linkend="BUILDER-UI"&gt;GtkBuilder UI definition&lt;/link&gt;. 
Note that this will be called once for each time 
gtk_builder_add_from_file() or gtk_builder_add_from_string() 
is called on a builder.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="builder" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkBuilder</doc>
            <type name="Builder" c:type="GtkBuilder*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_buildable_property"
              c:identifier="gtk_buildable_set_buildable_property"
              version="2.12">
        <doc xml:whitespace="preserve">Sets the property name @name to @value on the @buildable object.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="builder" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkBuilder</doc>
            <type name="Builder" c:type="GtkBuilder*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:whitespace="preserve">name of property</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:whitespace="preserve">value of property</doc>
            <type name="GObject.Value" c:type="GValue*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_name"
              c:identifier="gtk_buildable_set_name"
              version="2.12">
        <doc xml:whitespace="preserve">Sets the name of the @buildable object.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:whitespace="preserve">name to set</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
    </interface>
    <record name="BuildableIface"
            c:type="GtkBuildableIface"
            glib:is-gtype-struct-for="Buildable">
      <doc xml:whitespace="preserve">The GtkBuildableIface interface contains method that are
necessary to allow #GtkBuilder to construct an object from
a GtkBuilder UI definition.</doc>
      <field name="g_iface">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="set_name">
        <callback name="set_name">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="buildable" transfer-ownership="none">
              <type name="Buildable" c:type="GtkBuildable*"/>
            </parameter>
            <parameter name="name" transfer-ownership="none">
              <doc xml:whitespace="preserve">name to set</doc>
              <type name="utf8" c:type="gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_name">
        <callback name="get_name">
          <return-value transfer-ownership="none">
            <doc xml:whitespace="preserve">the name set with gtk_buildable_set_name()</doc>
            <type name="utf8" c:type="gchar*"/>
          </return-value>
          <parameters>
            <parameter name="buildable" transfer-ownership="none">
              <type name="Buildable" c:type="GtkBuildable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="add_child">
        <callback name="add_child">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="buildable" transfer-ownership="none">
              <type name="Buildable" c:type="GtkBuildable*"/>
            </parameter>
            <parameter name="builder" transfer-ownership="none">
              <doc xml:whitespace="preserve">a #GtkBuilder</doc>
              <type name="Builder" c:type="GtkBuilder*"/>
            </parameter>
            <parameter name="child" transfer-ownership="none">
              <doc xml:whitespace="preserve">child to add</doc>
              <type name="GObject.Object" c:type="GObject*"/>
            </parameter>
            <parameter name="type" transfer-ownership="none" allow-none="1">
              <doc xml:whitespace="preserve">kind of child or %NULL</doc>
              <type name="utf8" c:type="gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_buildable_property">
        <callback name="set_buildable_property">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="buildable" transfer-ownership="none">
              <type name="Buildable" c:type="GtkBuildable*"/>
            </parameter>
            <parameter name="builder" transfer-ownership="none">
              <doc xml:whitespace="preserve">a #GtkBuilder</doc>
              <type name="Builder" c:type="GtkBuilder*"/>
            </parameter>
            <parameter name="name" transfer-ownership="none">
              <doc xml:whitespace="preserve">name of property</doc>
              <type name="utf8" c:type="gchar*"/>
            </parameter>
            <parameter name="value" transfer-ownership="none">
              <doc xml:whitespace="preserve">value of property</doc>
              <type name="GObject.Value" c:type="GValue*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="construct_child">
        <callback name="construct_child">
          <return-value transfer-ownership="full">
            <doc xml:whitespace="preserve">the constructed child</doc>
            <type name="GObject.Object" c:type="GObject*"/>
          </return-value>
          <parameters>
            <parameter name="buildable" transfer-ownership="none">
              <type name="Buildable" c:type="GtkBuildable*"/>
            </parameter>
            <parameter name="builder" transfer-ownership="none">
              <doc xml:whitespace="preserve">#GtkBuilder used to construct this object</doc>
              <type name="Builder" c:type="GtkBuilder*"/>
            </parameter>
            <parameter name="name" transfer-ownership="none">
              <doc xml:whitespace="preserve">name of child to construct</doc>
              <type name="utf8" c:type="gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="custom_tag_start">
        <callback name="custom_tag_start">
          <return-value transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE if a object has a custom implementation, %FALSE</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="buildable" transfer-ownership="none">
              <type name="Buildable" c:type="GtkBuildable*"/>
            </parameter>
            <parameter name="builder" transfer-ownership="none">
              <doc xml:whitespace="preserve">a #GtkBuilder used to construct this object</doc>
              <type name="Builder" c:type="GtkBuilder*"/>
            </parameter>
            <parameter name="child" transfer-ownership="none" allow-none="1">
              <doc xml:whitespace="preserve">child object or %NULL for non-child tags</doc>
              <type name="GObject.Object" c:type="GObject*"/>
            </parameter>
            <parameter name="tagname" transfer-ownership="none">
              <doc xml:whitespace="preserve">name of tag</doc>
              <type name="utf8" c:type="gchar*"/>
            </parameter>
            <parameter name="parser" transfer-ownership="none">
              <doc xml:whitespace="preserve">a #GMarkupParser structure to fill in</doc>
              <type name="GLib.MarkupParser" c:type="GMarkupParser*"/>
            </parameter>
            <parameter name="data" transfer-ownership="none">
              <doc xml:whitespace="preserve">return location for user data that will be passed in to parser functions</doc>
              <type name="gpointer" c:type="gpointer*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="custom_tag_end">
        <callback name="custom_tag_end">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="buildable" transfer-ownership="none">
              <type name="Buildable" c:type="GtkBuildable*"/>
            </parameter>
            <parameter name="builder" transfer-ownership="none">
              <doc xml:whitespace="preserve">#GtkBuilder used to construct this object</doc>
              <type name="Builder" c:type="GtkBuilder*"/>
            </parameter>
            <parameter name="child" transfer-ownership="none" allow-none="1">
              <doc xml:whitespace="preserve">child object or %NULL for non-child tags</doc>
              <type name="GObject.Object" c:type="GObject*"/>
            </parameter>
            <parameter name="tagname" transfer-ownership="none">
              <doc xml:whitespace="preserve">name of tag</doc>
              <type name="utf8" c:type="gchar*"/>
            </parameter>
            <parameter name="data" transfer-ownership="none">
              <doc xml:whitespace="preserve">user data that will be passed in to parser functions</doc>
              <type name="gpointer" c:type="gpointer*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="custom_finished">
        <callback name="custom_finished">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="buildable" transfer-ownership="none">
              <type name="Buildable" c:type="GtkBuildable*"/>
            </parameter>
            <parameter name="builder" transfer-ownership="none">
              <doc xml:whitespace="preserve">a #GtkBuilder</doc>
              <type name="Builder" c:type="GtkBuilder*"/>
            </parameter>
            <parameter name="child" transfer-ownership="none" allow-none="1">
              <doc xml:whitespace="preserve">child object or %NULL for non-child tags</doc>
              <type name="GObject.Object" c:type="GObject*"/>
            </parameter>
            <parameter name="tagname" transfer-ownership="none">
              <doc xml:whitespace="preserve">the name of the tag</doc>
              <type name="utf8" c:type="gchar*"/>
            </parameter>
            <parameter name="data" transfer-ownership="none">
              <doc xml:whitespace="preserve">user data created in custom_tag_start</doc>
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="parser_finished">
        <callback name="parser_finished">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="buildable" transfer-ownership="none">
              <type name="Buildable" c:type="GtkBuildable*"/>
            </parameter>
            <parameter name="builder" transfer-ownership="none">
              <doc xml:whitespace="preserve">a #GtkBuilder</doc>
              <type name="Builder" c:type="GtkBuilder*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_internal_child">
        <callback name="get_internal_child">
          <return-value transfer-ownership="none">
            <doc xml:whitespace="preserve">the internal child of the buildable object</doc>
            <type name="GObject.Object" c:type="GObject*"/>
          </return-value>
          <parameters>
            <parameter name="buildable" transfer-ownership="none">
              <type name="Buildable" c:type="GtkBuildable*"/>
            </parameter>
            <parameter name="builder" transfer-ownership="none">
              <doc xml:whitespace="preserve">a #GtkBuilder</doc>
              <type name="Builder" c:type="GtkBuilder*"/>
            </parameter>
            <parameter name="childname" transfer-ownership="none">
              <doc xml:whitespace="preserve">name of child</doc>
              <type name="utf8" c:type="gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="Builder"
           c:symbol-prefix="builder"
           c:type="GtkBuilder"
           parent="GObject.Object"
           glib:type-name="GtkBuilder"
           glib:get-type="gtk_builder_get_type"
           glib:type-struct="BuilderClass">
      <constructor name="new" c:identifier="gtk_builder_new" version="2.12">
        <doc xml:whitespace="preserve">Creates a new builder object.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new #GtkBuilder object</doc>
          <type name="Builder" c:type="GtkBuilder*"/>
        </return-value>
      </constructor>
      <virtual-method name="get_type_from_name"
                      invoker="get_type_from_name"
                      version="2.12">
        <doc xml:whitespace="preserve">Looks up a type by name, using the virtual function that 
#GtkBuilder has for that purpose. This is mainly used when
implementing the #GtkBuildable interface on a type.
if no type was found</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the #GType found for @type_name or #G_TYPE_INVALID</doc>
          <type name="GType" c:type="GType"/>
        </return-value>
        <parameters>
          <parameter name="type_name" transfer-ownership="none">
            <doc xml:whitespace="preserve">type name to lookup</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="add_from_file"
              c:identifier="gtk_builder_add_from_file"
              version="2.12"
              throws="1">
        <doc xml:whitespace="preserve">Parses a file containing a &lt;link linkend="BUILDER-UI"&gt;GtkBuilder 
UI definition&lt;/link&gt; and merges it with the current contents of @builder. 
Upon errors 0 will be returned and @error will be assigned a
#GError from the #GTK_BUILDER_ERROR, #G_MARKUP_ERROR or #G_FILE_ERROR 
domain.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">A positive value on success, 0 if an error occurred</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:whitespace="preserve">the name of the file to parse</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_from_string"
              c:identifier="gtk_builder_add_from_string"
              version="2.12"
              throws="1">
        <doc xml:whitespace="preserve">Parses a string containing a &lt;link linkend="BUILDER-UI"&gt;GtkBuilder 
UI definition&lt;/link&gt; and merges it with the current contents of @builder. 
Upon errors 0 will be returned and @error will be assigned a
#GError from the #GTK_BUILDER_ERROR or #G_MARKUP_ERROR domain.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">A positive value on success, 0 if an error occurred</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="buffer" transfer-ownership="none">
            <doc xml:whitespace="preserve">the string to parse</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="length" transfer-ownership="none">
            <doc xml:whitespace="preserve">the length of @buffer (may be -1 if @buffer is nul-terminated)</doc>
            <type name="gulong" c:type="gsize"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_objects_from_file"
              c:identifier="gtk_builder_add_objects_from_file"
              version="2.14"
              throws="1">
        <doc xml:whitespace="preserve">Parses a file containing a &lt;link linkend="BUILDER-UI"&gt;GtkBuilder 
UI definition&lt;/link&gt; building only the requested objects and merges
them with the current contents of @builder. 
Upon errors 0 will be returned and @error will be assigned a
#GError from the #GTK_BUILDER_ERROR, #G_MARKUP_ERROR or #G_FILE_ERROR 
domain.
&lt;note&gt;&lt;para&gt;
If you are adding an object that depends on an object that is not 
its child (for instance a #GtkTreeView that depends on its
#GtkTreeModel), you have to explicitely list all of them in @object_ids. 
&lt;/para&gt;&lt;/note&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">A positive value on success, 0 if an error occurred</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:whitespace="preserve">the name of the file to parse</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="object_ids" transfer-ownership="none">
            <doc xml:whitespace="preserve">nul-terminated array of objects to build</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_objects_from_string"
              c:identifier="gtk_builder_add_objects_from_string"
              version="2.14"
              throws="1">
        <doc xml:whitespace="preserve">Parses a string containing a &lt;link linkend="BUILDER-UI"&gt;GtkBuilder 
UI definition&lt;/link&gt; building only the requested objects and merges
them with the current contents of @builder. 
Upon errors 0 will be returned and @error will be assigned a
#GError from the #GTK_BUILDER_ERROR or #G_MARKUP_ERROR domain.
&lt;note&gt;&lt;para&gt;
If you are adding an object that depends on an object that is not 
its child (for instance a #GtkTreeView that depends on its
#GtkTreeModel), you have to explicitely list all of them in @object_ids. 
&lt;/para&gt;&lt;/note&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">A positive value on success, 0 if an error occurred</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="buffer" transfer-ownership="none">
            <doc xml:whitespace="preserve">the string to parse</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="length" transfer-ownership="none">
            <doc xml:whitespace="preserve">the length of @buffer (may be -1 if @buffer is nul-terminated)</doc>
            <type name="gulong" c:type="gsize"/>
          </parameter>
          <parameter name="object_ids" transfer-ownership="none">
            <doc xml:whitespace="preserve">nul-terminated array of objects to build</doc>
            <array c:type="gchar**">
              <type name="utf8"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="connect_signals"
              c:identifier="gtk_builder_connect_signals"
              version="2.12">
        <doc xml:whitespace="preserve">This method is a simpler variation of gtk_builder_connect_signals_full().
It uses #GModule's introspective features (by opening the module %NULL) 
to look at the application's symbol table. From here it tries to match
the signal handler names given in the interface description with
symbols in the application and connects the signals.
Note that this function will not work correctly if #GModule is not
supported on the platform.
When compiling applications for Windows, you must declare signal callbacks
with #G_MODULE_EXPORT, or they will not be put in the symbol table.
On Linux and Unices, this is not necessary; applications should instead
be compiled with the -Wl,--export-dynamic CFLAGS, and linked against
gmodule-export-2.0.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:whitespace="preserve">a pointer to a structure sent in as user data to all signals</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="connect_signals_full"
              c:identifier="gtk_builder_connect_signals_full"
              version="2.12">
        <doc xml:whitespace="preserve">This function can be thought of the interpreted language binding
version of gtk_builder_connect_signals(), except that it does not
require GModule to function correctly.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="func"
                     transfer-ownership="none"
                     scope="call"
                     closure="1">
            <doc xml:whitespace="preserve">the function used to connect the signals</doc>
            <type name="BuilderConnectFunc" c:type="GtkBuilderConnectFunc"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:whitespace="preserve">arbitrary data that will be passed to the connection function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_object"
              c:identifier="gtk_builder_get_object"
              version="2.12">
        <doc xml:whitespace="preserve">Gets the object named @name. Note that this function does not
increment the reference count of the returned object. 
it could not be found in the object tree.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the object named @name or %NULL if</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:whitespace="preserve">name of object to get</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_objects"
              c:identifier="gtk_builder_get_objects"
              version="2.12">
        <doc xml:whitespace="preserve">Gets all objects that have been constructed by @builder. Note that 
this function does not increment the reference counts of the returned
objects.
constructed by the #GtkBuilder instance. It should be freed by
g_slist_free()</doc>
        <return-value transfer-ownership="container">
          <doc xml:whitespace="preserve">a newly-allocated #GSList containing all the objects</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="GObject.Object"/>
          </type>
        </return-value>
      </method>
      <method name="get_translation_domain"
              c:identifier="gtk_builder_get_translation_domain"
              version="2.12">
        <doc xml:whitespace="preserve">Gets the translation domain of @builder.
by the builder object and must not be modified or freed.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the translation domain. This string is owned</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_type_from_name"
              c:identifier="gtk_builder_get_type_from_name"
              version="2.12">
        <doc xml:whitespace="preserve">Looks up a type by name, using the virtual function that 
#GtkBuilder has for that purpose. This is mainly used when
implementing the #GtkBuildable interface on a type.
if no type was found</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the #GType found for @type_name or #G_TYPE_INVALID</doc>
          <type name="GType" c:type="GType"/>
        </return-value>
        <parameters>
          <parameter name="type_name" transfer-ownership="none">
            <doc xml:whitespace="preserve">type name to lookup</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_translation_domain"
              c:identifier="gtk_builder_set_translation_domain"
              version="2.12">
        <doc xml:whitespace="preserve">Sets the translation domain of @builder. 
See #GtkBuilder:translation-domain.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="domain" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">the translation domain or %NULL</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="value_from_string"
              c:identifier="gtk_builder_value_from_string"
              version="2.12"
              throws="1">
        <doc xml:whitespace="preserve">This function demarshals a value from a string. This function
calls g_value_init() on the @value argument, so it need not be
initialised beforehand.
This function can handle char, uchar, boolean, int, uint, long,
ulong, enum, flags, float, double, string, #GdkColor and
#GtkAdjustment type values. Support for #GtkWidget type values is
still to come.
Upon errors %FALSE will be returned and @error will be assigned a
#GError from the #GTK_BUILDER_ERROR domain.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE on success</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="pspec" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GParamSpec for the property</doc>
            <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
          </parameter>
          <parameter name="string" transfer-ownership="none">
            <doc xml:whitespace="preserve">the string representation of the value</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GValue to store the result in</doc>
            <type name="GObject.Value" c:type="GValue*"/>
          </parameter>
        </parameters>
      </method>
      <method name="value_from_string_type"
              c:identifier="gtk_builder_value_from_string_type"
              version="2.12"
              throws="1">
        <doc xml:whitespace="preserve">Like gtk_builder_value_from_string(), this function demarshals 
a value from a string, but takes a #GType instead of #GParamSpec.
This function calls g_value_init() on the @value argument, so it 
need not be initialised beforehand.
Upon errors %FALSE will be returned and @error will be assigned a
#GError from the #GTK_BUILDER_ERROR domain.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE on success</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="type" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GType of the value</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
          <parameter name="string" transfer-ownership="none">
            <doc xml:whitespace="preserve">the string representation of the value</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GValue to store the result in</doc>
            <type name="GObject.Value" c:type="GValue*"/>
          </parameter>
        </parameters>
      </method>
      <property name="translation-domain"
                writable="1"
                transfer-ownership="none">
        <type name="utf8"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="BuilderPrivate" c:type="GtkBuilderPrivate*"/>
      </field>
    </class>
    <record name="BuilderClass"
            c:type="GtkBuilderClass"
            glib:is-gtype-struct-for="Builder">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="get_type_from_name">
        <callback name="get_type_from_name">
          <return-value transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GType found for @type_name or #G_TYPE_INVALID</doc>
            <type name="GType" c:type="GType"/>
          </return-value>
          <parameters>
            <parameter name="builder" transfer-ownership="none">
              <type name="Builder" c:type="GtkBuilder*"/>
            </parameter>
            <parameter name="type_name" transfer-ownership="none">
              <doc xml:whitespace="preserve">type name to lookup</doc>
              <type name="utf8" c:type="char*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_gtk_reserved1" introspectable="0">
        <callback name="_gtk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved2" introspectable="0">
        <callback name="_gtk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved3" introspectable="0">
        <callback name="_gtk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved4" introspectable="0">
        <callback name="_gtk_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved5" introspectable="0">
        <callback name="_gtk_reserved5">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved6" introspectable="0">
        <callback name="_gtk_reserved6">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved7" introspectable="0">
        <callback name="_gtk_reserved7">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved8" introspectable="0">
        <callback name="_gtk_reserved8">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <callback name="BuilderConnectFunc"
              c:type="GtkBuilderConnectFunc"
              version="2.12">
      <doc xml:whitespace="preserve">This is the signature of a function used to connect signals.  It is used
by the gtk_builder_connect_signals() and gtk_builder_connect_signals_full()
methods.  It is mainly intended for interpreted language bindings, but
could be useful where the programmer wants more control over the signal
connection process.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="builder" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GtkBuilder</doc>
          <type name="Builder" c:type="GtkBuilder*"/>
        </parameter>
        <parameter name="object" transfer-ownership="none">
          <doc xml:whitespace="preserve">object to connect a signal to</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </parameter>
        <parameter name="signal_name" transfer-ownership="none">
          <doc xml:whitespace="preserve">name of the signal</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="handler_name" transfer-ownership="none">
          <doc xml:whitespace="preserve">name of the handler</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="connect_object" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GObject, if non-%NULL, use g_signal_connect_object()</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </parameter>
        <parameter name="flags" transfer-ownership="none">
          <doc xml:whitespace="preserve">#GConnectFlags to use</doc>
          <type name="GObject.ConnectFlags" c:type="GConnectFlags"/>
        </parameter>
        <parameter name="user_data" transfer-ownership="none" closure="6">
          <doc xml:whitespace="preserve">user data</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <enumeration name="BuilderError"
                 glib:type-name="GtkBuilderError"
                 glib:get-type="gtk_builder_error_get_type"
                 c:type="GtkBuilderError"
                 glib:error-quark="gtk_builder_error_quark">
      <doc xml:whitespace="preserve">Error codes that identify various errors that can occur while using
#GtkBuilder.</doc>
      <member name="invalid_type_function"
              value="0"
              c:identifier="GTK_BUILDER_ERROR_INVALID_TYPE_FUNCTION"
              glib:nick="invalid-type-function"/>
      <member name="unhandled_tag"
              value="1"
              c:identifier="GTK_BUILDER_ERROR_UNHANDLED_TAG"
              glib:nick="unhandled-tag"/>
      <member name="missing_attribute"
              value="2"
              c:identifier="GTK_BUILDER_ERROR_MISSING_ATTRIBUTE"
              glib:nick="missing-attribute"/>
      <member name="invalid_attribute"
              value="3"
              c:identifier="GTK_BUILDER_ERROR_INVALID_ATTRIBUTE"
              glib:nick="invalid-attribute"/>
      <member name="invalid_tag"
              value="4"
              c:identifier="GTK_BUILDER_ERROR_INVALID_TAG"
              glib:nick="invalid-tag"/>
      <member name="missing_property_value"
              value="5"
              c:identifier="GTK_BUILDER_ERROR_MISSING_PROPERTY_VALUE"
              glib:nick="missing-property-value"/>
      <member name="invalid_value"
              value="6"
              c:identifier="GTK_BUILDER_ERROR_INVALID_VALUE"
              glib:nick="invalid-value"/>
      <member name="version_mismatch"
              value="7"
              c:identifier="GTK_BUILDER_ERROR_VERSION_MISMATCH"
              glib:nick="version-mismatch"/>
      <member name="duplicate_id"
              value="8"
              c:identifier="GTK_BUILDER_ERROR_DUPLICATE_ID"
              glib:nick="duplicate-id"/>
    </enumeration>
    <record name="BuilderPrivate" c:type="GtkBuilderPrivate" disguised="1">
    </record>
    <class name="Button"
           c:symbol-prefix="button"
           c:type="GtkButton"
           parent="Bin"
           glib:type-name="GtkButton"
           glib:get-type="gtk_button_get_type"
           glib:type-struct="ButtonClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Activatable"/>
      <implements name="Buildable"/>
      <implements name="SizeRequest"/>
      <constructor name="new" c:identifier="gtk_button_new">
        <doc xml:whitespace="preserve">Creates a new #GtkButton widget. To add a child widget to the button,
use gtk_container_add().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The newly created #GtkButton widget.</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <constructor name="new_from_stock"
                   c:identifier="gtk_button_new_from_stock">
        <doc xml:whitespace="preserve">Creates a new #GtkButton containing the image and text from a stock item.
Some stock ids have preprocessor macros like #GTK_STOCK_OK and
#GTK_STOCK_APPLY.
If @stock_id is unknown, then it will be treated as a mnemonic
label (as for gtk_button_new_with_mnemonic()).</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a new #GtkButton</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="stock_id" transfer-ownership="none">
            <doc xml:whitespace="preserve">the name of the stock item</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_with_label"
                   c:identifier="gtk_button_new_with_label">
        <doc xml:whitespace="preserve">Creates a #GtkButton widget with a #GtkLabel child containing the given
text.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The newly created #GtkButton widget.</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="label" transfer-ownership="none">
            <doc xml:whitespace="preserve">The text you want the #GtkLabel to hold.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_with_mnemonic"
                   c:identifier="gtk_button_new_with_mnemonic">
        <doc xml:whitespace="preserve">Creates a new #GtkButton containing a label.
If characters in @label are preceded by an underscore, they are underlined.
If you need a literal underscore character in a label, use '__' (two 
underscores). The first underlined character represents a keyboard 
accelerator called a mnemonic.
Pressing Alt and that key activates the button.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a new #GtkButton</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="label" transfer-ownership="none">
            <doc xml:whitespace="preserve">The text of the button, with an underscore in front of the mnemonic character</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="clicked" c:identifier="gtk_button_clicked">
        <doc xml:whitespace="preserve">Emits a #GtkButton::clicked signal to the given #GtkButton.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="enter"
              c:identifier="gtk_button_enter"
              deprecated="Use the #GtkWidget::enter-notify-event signal."
              deprecated-version="2.20">
        <doc xml:whitespace="preserve">Emits a #GtkButton::enter signal to the given #GtkButton.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="get_alignment"
              c:identifier="gtk_button_get_alignment"
              version="2.4">
        <doc xml:whitespace="preserve">Gets the alignment of the child in the button.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="xalign" transfer-ownership="none">
            <doc xml:whitespace="preserve">return location for horizontal alignment</doc>
            <type name="gfloat" c:type="gfloat*"/>
          </parameter>
          <parameter name="yalign" transfer-ownership="none">
            <doc xml:whitespace="preserve">return location for vertical alignment</doc>
            <type name="gfloat" c:type="gfloat*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_event_window"
              c:identifier="gtk_button_get_event_window"
              version="2.22">
        <doc xml:whitespace="preserve">Returns the button's event window if it is realized, %NULL otherwise.
This function should be rarely needed.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">@button's event window.</doc>
          <type name="Gdk.Window" c:type="GdkWindow*"/>
        </return-value>
      </method>
      <method name="get_focus_on_click"
              c:identifier="gtk_button_get_focus_on_click"
              version="2.4">
        <doc xml:whitespace="preserve">Returns whether the button grabs focus when it is clicked with the mouse.
See gtk_button_set_focus_on_click().
the mouse.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the button grabs focus when it is clicked with</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_image"
              c:identifier="gtk_button_get_image"
              version="2.6">
        <doc xml:whitespace="preserve">Gets the widget that is currenty set as the image of @button.
This may have been explicitly set by gtk_button_set_image()
or constructed by gtk_button_new_from_stock().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GtkWidget or %NULL in case there is no image</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
      </method>
      <method name="get_image_position"
              c:identifier="gtk_button_get_image_position"
              version="2.10">
        <doc xml:whitespace="preserve">Gets the position of the image relative to the text 
inside the button.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the position</doc>
          <type name="PositionType" c:type="GtkPositionType"/>
        </return-value>
      </method>
      <method name="get_label" c:identifier="gtk_button_get_label">
        <doc xml:whitespace="preserve">Fetches the text from the label of the button, as set by
gtk_button_set_label(). If the label text has not 
been set the return value will be %NULL. This will be the 
case if you create an empty button with gtk_button_new() to 
use as a container.
by the widget and must not be modified or freed.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The text of the label widget. This string is owned</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_relief" c:identifier="gtk_button_get_relief">
        <doc xml:whitespace="preserve">Returns the current relief style of the given #GtkButton.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The current #GtkReliefStyle</doc>
          <type name="ReliefStyle" c:type="GtkReliefStyle"/>
        </return-value>
      </method>
      <method name="get_use_stock" c:identifier="gtk_button_get_use_stock">
        <doc xml:whitespace="preserve">Returns whether the button label is a stock item.
select a stock item instead of being
used directly as the label text.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the button label is used to</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_use_underline"
              c:identifier="gtk_button_get_use_underline">
        <doc xml:whitespace="preserve">Returns whether an embedded underline in the button label indicates a
mnemonic. See gtk_button_set_use_underline ().
indicates the mnemonic accelerator keys.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if an embedded underline in the button label</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="leave"
              c:identifier="gtk_button_leave"
              deprecated="Use the #GtkWidget::leave-notify-event signal."
              deprecated-version="2.20">
        <doc xml:whitespace="preserve">Emits a #GtkButton::leave signal to the given #GtkButton.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="pressed"
              c:identifier="gtk_button_pressed"
              deprecated="Use the #GtkWidget::button-press-event signal."
              deprecated-version="2.20">
        <doc xml:whitespace="preserve">Emits a #GtkButton::pressed signal to the given #GtkButton.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="released"
              c:identifier="gtk_button_released"
              deprecated="Use the #GtkWidget::button-release-event signal."
              deprecated-version="2.20">
        <doc xml:whitespace="preserve">Emits a #GtkButton::released signal to the given #GtkButton.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="set_alignment"
              c:identifier="gtk_button_set_alignment"
              version="2.4">
        <doc xml:whitespace="preserve">Sets the alignment of the child. This property has no effect unless 
the child is a #GtkMisc or a #GtkAligment.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="xalign" transfer-ownership="none">
            <doc xml:whitespace="preserve">the horizontal position of the child, 0.0 is left aligned, 1.0 is right aligned</doc>
            <type name="gfloat" c:type="gfloat"/>
          </parameter>
          <parameter name="yalign" transfer-ownership="none">
            <doc xml:whitespace="preserve">the vertical position of the child, 0.0 is top aligned, 1.0 is bottom aligned</doc>
            <type name="gfloat" c:type="gfloat"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_focus_on_click"
              c:identifier="gtk_button_set_focus_on_click"
              version="2.4">
        <doc xml:whitespace="preserve">Sets whether the button will grab focus when it is clicked with the mouse.
Making mouse clicks not grab focus is useful in places like toolbars where
you don't want the keyboard focus removed from the main area of the
application.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="focus_on_click" transfer-ownership="none">
            <doc xml:whitespace="preserve">whether the button grabs focus when clicked with the mouse</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_image"
              c:identifier="gtk_button_set_image"
              version="2.6">
        <doc xml:whitespace="preserve">Set the image of @button to the given widget. Note that
it depends on the #GtkSettings:gtk-button-images setting whether the
image will be displayed or not, you don't have to call
gtk_widget_show() on @image yourself.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="image" transfer-ownership="none">
            <doc xml:whitespace="preserve">a widget to set as the image for the button</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_image_position"
              c:identifier="gtk_button_set_image_position"
              version="2.10">
        <doc xml:whitespace="preserve">Sets the position of the image relative to the text 
inside the button.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="position" transfer-ownership="none">
            <doc xml:whitespace="preserve">the position</doc>
            <type name="PositionType" c:type="GtkPositionType"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_label" c:identifier="gtk_button_set_label">
        <doc xml:whitespace="preserve">Sets the text of the label of the button to @str. This text is
also used to select the stock item if gtk_button_set_use_stock()
is used.
This will also clear any previously set labels.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="label" transfer-ownership="none">
            <doc xml:whitespace="preserve">a string</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_relief" c:identifier="gtk_button_set_relief">
        <doc xml:whitespace="preserve">Sets the relief style of the edges of the given #GtkButton widget.
Three styles exist, GTK_RELIEF_NORMAL, GTK_RELIEF_HALF, GTK_RELIEF_NONE.
The default style is, as one can guess, GTK_RELIEF_NORMAL.
&lt;!-- FIXME: put pictures of each style --&gt;</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="newstyle" transfer-ownership="none">
            <doc xml:whitespace="preserve">The GtkReliefStyle as described above.</doc>
            <type name="ReliefStyle" c:type="GtkReliefStyle"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_use_stock" c:identifier="gtk_button_set_use_stock">
        <doc xml:whitespace="preserve">If %TRUE, the label set on the button is used as a
stock id to select the stock item for the button.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="use_stock" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE if the button should use a stock item</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_use_underline"
              c:identifier="gtk_button_set_use_underline">
        <doc xml:whitespace="preserve">If true, an underline in the text of the button label indicates
the next character should be used for the mnemonic accelerator key.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="use_underline" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE if underlines in the text indicate mnemonics</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="focus-on-click" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="image" writable="1" transfer-ownership="none">
        <type name="Widget"/>
      </property>
      <property name="image-position"
                version="2.10"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The position of the image relative to the text inside the button.</doc>
        <type name="PositionType"/>
      </property>
      <property name="label"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="utf8"/>
      </property>
      <property name="relief" writable="1" transfer-ownership="none">
        <type name="ReliefStyle"/>
      </property>
      <property name="use-stock"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="use-underline"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="xalign"
                version="2.4"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">If the child of the button is a #GtkMisc or #GtkAlignment, this property 
can be used to control it's horizontal alignment. 0.0 is left aligned, 
1.0 is right aligned.</doc>
        <type name="gfloat"/>
      </property>
      <property name="yalign"
                version="2.4"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">If the child of the button is a #GtkMisc or #GtkAlignment, this property 
can be used to control it's vertical alignment. 0.0 is top aligned, 
1.0 is bottom aligned.</doc>
        <type name="gfloat"/>
      </property>
      <field name="bin">
        <type name="Bin" c:type="GtkBin"/>
      </field>
      <field name="event_window">
        <type name="Gdk.Window" c:type="GdkWindow*"/>
      </field>
      <field name="label_text">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="activate_timeout">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="constructed" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="in_button" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="button_down" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="relief" bits="2">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="use_underline" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="use_stock" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="depressed" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="depress_on_activate" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="focus_on_click" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <glib:signal name="activate">
        <doc xml:whitespace="preserve">The ::activate signal on GtkButton is an action signal and
emitting it causes the button to animate press then release. 
Applications should never connect to this signal, but use the
#GtkButton::clicked signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
      <glib:signal name="clicked">
        <doc xml:whitespace="preserve">Emitted when the button has been activated (pressed and released).</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
      <glib:signal name="enter"
                   deprecated="Use the #GtkWidget::enter-notify-event signal."
                   deprecated-version="2.8">
        <doc xml:whitespace="preserve">Emitted when the pointer enters the button.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
      <glib:signal name="leave"
                   deprecated="Use the #GtkWidget::leave-notify-event signal."
                   deprecated-version="2.8">
        <doc xml:whitespace="preserve">Emitted when the pointer leaves the button.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
      <glib:signal name="pressed"
                   deprecated="Use the #GtkWidget::button-press-event signal."
                   deprecated-version="2.8">
        <doc xml:whitespace="preserve">Emitted when the button is pressed.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
      <glib:signal name="released"
                   deprecated="Use the #GtkWidget::button-release-event signal."
                   deprecated-version="2.8">
        <doc xml:whitespace="preserve">Emitted when the button is released.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
    </class>
    <class name="ButtonBox"
           c:symbol-prefix="button_box"
           c:type="GtkButtonBox"
           parent="Box"
           glib:type-name="GtkButtonBox"
           glib:get-type="gtk_button_box_get_type"
           glib:type-struct="ButtonBoxClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Buildable"/>
      <implements name="Orientable"/>
      <implements name="SizeRequest"/>
      <constructor name="new" c:identifier="gtk_button_box_new" version="3.0">
        <doc xml:whitespace="preserve">Creates a new #GtkButtonBox.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a new #GtkButtonBox.</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="orientation" transfer-ownership="none">
            <doc xml:whitespace="preserve">the box' orientation.</doc>
            <type name="Orientation" c:type="GtkOrientation"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_child_secondary"
              c:identifier="gtk_button_box_get_child_secondary"
              version="2.4">
        <doc xml:whitespace="preserve">Returns whether @child should appear in a secondary group of children.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">whether @child should appear in a secondary group of children.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="child" transfer-ownership="none">
            <doc xml:whitespace="preserve">a child of @widget</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_layout" c:identifier="gtk_button_box_get_layout">
        <doc xml:whitespace="preserve">Retrieves the method being used to arrange the buttons in a button box.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the method used to lay out buttons in @widget.</doc>
          <type name="ButtonBoxStyle" c:type="GtkButtonBoxStyle"/>
        </return-value>
      </method>
      <method name="set_child_secondary"
              c:identifier="gtk_button_box_set_child_secondary">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="child" transfer-ownership="none">
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="is_secondary" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_layout" c:identifier="gtk_button_box_set_layout">
        <doc xml:whitespace="preserve">Changes the way buttons are arranged in their container.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="layout_style" transfer-ownership="none">
            <doc xml:whitespace="preserve">the new layout style</doc>
            <type name="ButtonBoxStyle" c:type="GtkButtonBoxStyle"/>
          </parameter>
        </parameters>
      </method>
      <property name="layout-style" writable="1" transfer-ownership="none">
        <type name="ButtonBoxStyle"/>
      </property>
      <field name="box">
        <type name="Box" c:type="GtkBox"/>
      </field>
      <field name="priv">
        <type name="ButtonBoxPrivate" c:type="GtkButtonBoxPrivate*"/>
      </field>
    </class>
    <record name="ButtonBoxClass"
            c:type="GtkButtonBoxClass"
            glib:is-gtype-struct-for="ButtonBox">
      <field name="parent_class">
        <type name="BoxClass" c:type="GtkBoxClass"/>
      </field>
    </record>
    <record name="ButtonBoxPrivate" c:type="GtkButtonBoxPrivate" disguised="1">
    </record>
    <enumeration name="ButtonBoxStyle"
                 glib:type-name="GtkButtonBoxStyle"
                 glib:get-type="gtk_button_box_style_get_type"
                 c:type="GtkButtonBoxStyle">
      <member name="spread"
              value="1"
              c:identifier="GTK_BUTTONBOX_SPREAD"
              glib:nick="spread"/>
      <member name="edge"
              value="2"
              c:identifier="GTK_BUTTONBOX_EDGE"
              glib:nick="edge"/>
      <member name="start"
              value="3"
              c:identifier="GTK_BUTTONBOX_START"
              glib:nick="start"/>
      <member name="end"
              value="4"
              c:identifier="GTK_BUTTONBOX_END"
              glib:nick="end"/>
      <member name="center"
              value="5"
              c:identifier="GTK_BUTTONBOX_CENTER"
              glib:nick="center"/>
    </enumeration>
    <record name="ButtonClass"
            c:type="GtkButtonClass"
            glib:is-gtype-struct-for="Button">
      <field name="parent_class">
        <type name="BinClass" c:type="GtkBinClass"/>
      </field>
      <field name="pressed">
        <callback name="pressed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="button" transfer-ownership="none">
              <type name="Button" c:type="GtkButton*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="released">
        <callback name="released">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="button" transfer-ownership="none">
              <type name="Button" c:type="GtkButton*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="clicked">
        <callback name="clicked">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="button" transfer-ownership="none">
              <type name="Button" c:type="GtkButton*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="enter">
        <callback name="enter">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="button" transfer-ownership="none">
              <type name="Button" c:type="GtkButton*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="leave">
        <callback name="leave">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="button" transfer-ownership="none">
              <type name="Button" c:type="GtkButton*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="activate">
        <callback name="activate">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="button" transfer-ownership="none">
              <type name="Button" c:type="GtkButton*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_gtk_reserved1" introspectable="0">
        <callback name="_gtk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved2" introspectable="0">
        <callback name="_gtk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved3" introspectable="0">
        <callback name="_gtk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved4" introspectable="0">
        <callback name="_gtk_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <enumeration name="ButtonsType"
                 glib:type-name="GtkButtonsType"
                 glib:get-type="gtk_buttons_type_get_type"
                 c:type="GtkButtonsType">
      <doc xml:whitespace="preserve">Prebuilt sets of buttons for the dialog. If
none of these choices are appropriate, simply use %GTK_BUTTONS_NONE
then call gtk_dialog_add_buttons().
&lt;note&gt;
Please note that %GTK_BUTTONS_OK, %GTK_BUTTONS_YES_NO
and %GTK_BUTTONS_OK_CANCEL are discouraged by the
&lt;ulink url="http://library.gnome.org/devel/hig-book/stable/"&gt;GNOME HIG&lt;/ulink&gt;.
&lt;/note&gt;</doc>
      <member name="none"
              value="0"
              c:identifier="GTK_BUTTONS_NONE"
              glib:nick="none"/>
      <member name="ok"
              value="1"
              c:identifier="GTK_BUTTONS_OK"
              glib:nick="ok"/>
      <member name="close"
              value="2"
              c:identifier="GTK_BUTTONS_CLOSE"
              glib:nick="close"/>
      <member name="cancel"
              value="3"
              c:identifier="GTK_BUTTONS_CANCEL"
              glib:nick="cancel"/>
      <member name="yes_no"
              value="4"
              c:identifier="GTK_BUTTONS_YES_NO"
              glib:nick="yes-no"/>
      <member name="ok_cancel"
              value="5"
              c:identifier="GTK_BUTTONS_OK_CANCEL"
              glib:nick="ok-cancel"/>
    </enumeration>
    <class name="Calendar"
           c:symbol-prefix="calendar"
           c:type="GtkCalendar"
           parent="Widget"
           glib:type-name="GtkCalendar"
           glib:get-type="gtk_calendar_get_type"
           glib:type-struct="CalendarClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Buildable"/>
      <implements name="SizeRequest"/>
      <constructor name="new" c:identifier="gtk_calendar_new">
        <doc xml:whitespace="preserve">Creates a new calendar, with the current date being selected.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a newly #GtkCalendar widget</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="clear_marks" c:identifier="gtk_calendar_clear_marks">
        <doc xml:whitespace="preserve">Remove all visual markers.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="get_date" c:identifier="gtk_calendar_get_date">
        <doc xml:whitespace="preserve">Obtains the selected date from a #GtkCalendar.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="year" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">location to store the year number, or %NULL</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
          <parameter name="month" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">location to store the month number (between 0 and 11), or %NULL</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
          <parameter name="day" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">location to store the day number (between 1 and 31), or %NULL</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_day_is_marked"
              c:identifier="gtk_calendar_get_day_is_marked"
              version="3.0">
        <doc xml:whitespace="preserve">Returns if the @day of the @calendar is already marked.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">whether the day is marked.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="day" transfer-ownership="none">
            <doc xml:whitespace="preserve">the day number between 1 and 31.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_detail_height_rows"
              c:identifier="gtk_calendar_get_detail_height_rows"
              version="2.14">
        <doc xml:whitespace="preserve">Queries the height of detail cells, in rows.
See #GtkCalendar:detail-width-chars.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The height of detail cells, in rows.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="get_detail_width_chars"
              c:identifier="gtk_calendar_get_detail_width_chars"
              version="2.14">
        <doc xml:whitespace="preserve">Queries the width of detail cells, in characters.
See #GtkCalendar:detail-width-chars.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The width of detail cells, in characters.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="get_display_options"
              c:identifier="gtk_calendar_get_display_options"
              version="2.4">
        <doc xml:whitespace="preserve">Returns the current display options of @calendar.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the display options.</doc>
          <type name="CalendarDisplayOptions"
                c:type="GtkCalendarDisplayOptions"/>
        </return-value>
      </method>
      <method name="mark_day" c:identifier="gtk_calendar_mark_day">
        <doc xml:whitespace="preserve">Places a visual marker on a particular day.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="day" transfer-ownership="none">
            <doc xml:whitespace="preserve">the day number to mark between 1 and 31.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="select_day" c:identifier="gtk_calendar_select_day">
        <doc xml:whitespace="preserve">Selects a day from the current month.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="day" transfer-ownership="none">
            <doc xml:whitespace="preserve">the day number between 1 and 31, or 0 to unselect the currently selected day.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="select_month" c:identifier="gtk_calendar_select_month">
        <doc xml:whitespace="preserve">Shifts the calendar to a different month.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="month" transfer-ownership="none">
            <doc xml:whitespace="preserve">a month number between 0 and 11.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="year" transfer-ownership="none">
            <doc xml:whitespace="preserve">the year the month is in.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_detail_func"
              c:identifier="gtk_calendar_set_detail_func"
              version="2.14">
        <doc xml:whitespace="preserve">Installs a function which provides Pango markup with detail information
for each day. Examples for such details are holidays or appointments. That
information is shown below each day when #GtkCalendar:show-details is set.
A tooltip containing with full detail information is provided, if the entire
text should not fit into the details area, or if #GtkCalendar:show-details
is not set.
The size of the details area can be restricted by setting the
#GtkCalendar:detail-width-chars and #GtkCalendar:detail-height-rows
properties.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="func"
                     transfer-ownership="none"
                     scope="notified"
                     closure="1"
                     destroy="2">
            <doc xml:whitespace="preserve">a function providing details for each day.</doc>
            <type name="CalendarDetailFunc" c:type="GtkCalendarDetailFunc"/>
          </parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:whitespace="preserve">data to pass to @func invokations.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="destroy" transfer-ownership="none" scope="async">
            <doc xml:whitespace="preserve">a function for releasing @data.</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_detail_height_rows"
              c:identifier="gtk_calendar_set_detail_height_rows"
              version="2.14">
        <doc xml:whitespace="preserve">Updates the height of detail cells.
See #GtkCalendar:detail-height-rows.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="rows" transfer-ownership="none">
            <doc xml:whitespace="preserve">detail height in rows.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_detail_width_chars"
              c:identifier="gtk_calendar_set_detail_width_chars"
              version="2.14">
        <doc xml:whitespace="preserve">Updates the width of detail cells.
See #GtkCalendar:detail-width-chars.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="chars" transfer-ownership="none">
            <doc xml:whitespace="preserve">detail width in characters.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_display_options"
              c:identifier="gtk_calendar_set_display_options"
              version="2.4">
        <doc xml:whitespace="preserve">Sets display options (whether to display the heading and the month  
headings).</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:whitespace="preserve">the display options to set</doc>
            <type name="CalendarDisplayOptions"
                  c:type="GtkCalendarDisplayOptions"/>
          </parameter>
        </parameters>
      </method>
      <method name="unmark_day" c:identifier="gtk_calendar_unmark_day">
        <doc xml:whitespace="preserve">Removes the visual marker from a particular day.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="day" transfer-ownership="none">
            <doc xml:whitespace="preserve">the day number to unmark between 1 and 31.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <property name="day" writable="1" transfer-ownership="none">
        <doc xml:whitespace="preserve">The selected day (as a number between 1 and 31, or 0 
to unselect the currently selected day).
This property gets initially set to the current day.</doc>
        <type name="gint"/>
      </property>
      <property name="detail-height-rows"
                version="2.14"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Height of a detail cell, in rows.
A value of 0 allows any width. See gtk_calendar_set_detail_func().</doc>
        <type name="gint"/>
      </property>
      <property name="detail-width-chars"
                version="2.14"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Width of a detail cell, in characters.
A value of 0 allows any width. See gtk_calendar_set_detail_func().</doc>
        <type name="gint"/>
      </property>
      <property name="month" writable="1" transfer-ownership="none">
        <doc xml:whitespace="preserve">The selected month (as a number between 0 and 11). 
This property gets initially set to the current month.</doc>
        <type name="gint"/>
      </property>
      <property name="no-month-change"
                version="2.4"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Determines whether the selected month can be changed.</doc>
        <type name="gboolean"/>
      </property>
      <property name="show-day-names"
                version="2.4"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Determines whether day names are displayed.</doc>
        <type name="gboolean"/>
      </property>
      <property name="show-details"
                version="2.14"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Determines whether details are shown directly in the widget, or if they are
available only as tooltip. When this property is set days with details are
marked.</doc>
        <type name="gboolean"/>
      </property>
      <property name="show-heading"
                version="2.4"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Determines whether a heading is displayed.</doc>
        <type name="gboolean"/>
      </property>
      <property name="show-week-numbers"
                version="2.4"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Determines whether week numbers are displayed.</doc>
        <type name="gboolean"/>
      </property>
      <property name="year" writable="1" transfer-ownership="none">
        <doc xml:whitespace="preserve">The selected year. 
This property gets initially set to the current year.</doc>
        <type name="gint"/>
      </property>
      <field name="widget">
        <type name="Widget" c:type="GtkWidget"/>
      </field>
      <field name="priv">
        <type name="CalendarPrivate" c:type="GtkCalendarPrivate*"/>
      </field>
      <glib:signal name="day-selected">
        <doc xml:whitespace="preserve">Emitted when the user selects a day.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
      <glib:signal name="day-selected-double-click">
        <doc xml:whitespace="preserve">Emitted when the user double-clicks a day.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
      <glib:signal name="month-changed">
        <doc xml:whitespace="preserve">Emitted when the user clicks a button to change the selected month on a
calendar.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
      <glib:signal name="next-month">
        <doc xml:whitespace="preserve">Emitted when the user switched to the next month.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
      <glib:signal name="next-year">
        <doc xml:whitespace="preserve">Emitted when user switched to the next year.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
      <glib:signal name="prev-month">
        <doc xml:whitespace="preserve">Emitted when the user switched to the previous month.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
      <glib:signal name="prev-year">
        <doc xml:whitespace="preserve">Emitted when user switched to the previous year.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="CalendarClass"
            c:type="GtkCalendarClass"
            glib:is-gtype-struct-for="Calendar">
      <field name="parent_class">
        <type name="WidgetClass" c:type="GtkWidgetClass"/>
      </field>
      <field name="month_changed">
        <callback name="month_changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="calendar" transfer-ownership="none">
              <type name="Calendar" c:type="GtkCalendar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="day_selected">
        <callback name="day_selected">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="calendar" transfer-ownership="none">
              <type name="Calendar" c:type="GtkCalendar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="day_selected_double_click">
        <callback name="day_selected_double_click">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="calendar" transfer-ownership="none">
              <type name="Calendar" c:type="GtkCalendar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="prev_month">
        <callback name="prev_month">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="calendar" transfer-ownership="none">
              <type name="Calendar" c:type="GtkCalendar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="next_month">
        <callback name="next_month">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="calendar" transfer-ownership="none">
              <type name="Calendar" c:type="GtkCalendar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="prev_year">
        <callback name="prev_year">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="calendar" transfer-ownership="none">
              <type name="Calendar" c:type="GtkCalendar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="next_year">
        <callback name="next_year">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="calendar" transfer-ownership="none">
              <type name="Calendar" c:type="GtkCalendar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <callback name="CalendarDetailFunc"
              c:type="GtkCalendarDetailFunc"
              version="2.14">
      <doc xml:whitespace="preserve">This kind of functions provide Pango markup with detail information for the
specified day. Examples for such details are holidays or appointments. The
function returns %NULL when no information is available.
for the specified day, or %NULL.</doc>
      <return-value transfer-ownership="full">
        <doc xml:whitespace="preserve">Newly allocated string with Pango markup with details</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="calendar" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GtkCalendar.</doc>
          <type name="Calendar" c:type="GtkCalendar*"/>
        </parameter>
        <parameter name="year" transfer-ownership="none">
          <doc xml:whitespace="preserve">the year for which details are needed.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="month" transfer-ownership="none">
          <doc xml:whitespace="preserve">the month for which details are needed.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="day" transfer-ownership="none">
          <doc xml:whitespace="preserve">the day of @month for which details are needed.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="user_data" transfer-ownership="none" closure="4">
          <doc xml:whitespace="preserve">the data passed with gtk_calendar_set_detail_func().</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <bitfield name="CalendarDisplayOptions"
              glib:type-name="GtkCalendarDisplayOptions"
              glib:get-type="gtk_calendar_display_options_get_type"
              c:type="GtkCalendarDisplayOptions">
      <doc xml:whitespace="preserve">These options can be used to influence the display and behaviour of a #GtkCalendar.</doc>
      <member name="show_heading"
              value="1"
              c:identifier="GTK_CALENDAR_SHOW_HEADING"
              glib:nick="show-heading"/>
      <member name="show_day_names"
              value="2"
              c:identifier="GTK_CALENDAR_SHOW_DAY_NAMES"
              glib:nick="show-day-names"/>
      <member name="no_month_change"
              value="4"
              c:identifier="GTK_CALENDAR_NO_MONTH_CHANGE"
              glib:nick="no-month-change"/>
      <member name="show_week_numbers"
              value="8"
              c:identifier="GTK_CALENDAR_SHOW_WEEK_NUMBERS"
              glib:nick="show-week-numbers"/>
      <member name="show_details"
              value="32"
              c:identifier="GTK_CALENDAR_SHOW_DETAILS"
              glib:nick="show-details"/>
    </bitfield>
    <record name="CalendarPrivate" c:type="GtkCalendarPrivate" disguised="1">
    </record>
    <callback name="Callback" c:type="GtkCallback">
      <doc xml:whitespace="preserve">The type of the callback functions used for e.g. iterating over
the children of a container, see gtk_container_foreach().</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="widget" transfer-ownership="none">
          <doc xml:whitespace="preserve">the widget to operate on</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <doc xml:whitespace="preserve">user-supplied data</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="CallbackMarshal" c:type="GtkCallbackMarshal">
      <doc xml:whitespace="preserve">Defines a function pointer.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="object" transfer-ownership="none">
          <doc xml:whitespace="preserve">#GtkObject*</doc>
          <type name="Object" c:type="GtkObject*"/>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <doc xml:whitespace="preserve">#gpointer</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="n_args" transfer-ownership="none">
          <doc xml:whitespace="preserve">#guint</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="args" transfer-ownership="none">
          <doc xml:whitespace="preserve">#GtkArg*</doc>
          <type name="Arg" c:type="GtkArg*"/>
        </parameter>
      </parameters>
    </callback>
    <interface name="CellEditable"
               c:symbol-prefix="cell_editable"
               c:type="GtkCellEditable"
               glib:type-name="GtkCellEditable"
               glib:get-type="gtk_cell_editable_get_type"
               glib:type-struct="CellEditableIface">
      <prerequisite name="Widget"/>
      <virtual-method name="start_editing" invoker="start_editing">
        <doc xml:whitespace="preserve">Begins editing on a @cell_editable. @event is the #GdkEvent that began 
the editing process. It may be %NULL, in the instance that editing was 
initiated through programatic means.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="event" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">A #GdkEvent, or %NULL</doc>
            <type name="Gdk.Event" c:type="GdkEvent*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="editing_done"
              c:identifier="gtk_cell_editable_editing_done">
        <doc xml:whitespace="preserve">Emits the #GtkCellEditable::editing-done signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="remove_widget"
              c:identifier="gtk_cell_editable_remove_widget">
        <doc xml:whitespace="preserve">Emits the #GtkCellEditable::remove-widget signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="start_editing"
              c:identifier="gtk_cell_editable_start_editing">
        <doc xml:whitespace="preserve">Begins editing on a @cell_editable. @event is the #GdkEvent that began 
the editing process. It may be %NULL, in the instance that editing was 
initiated through programatic means.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="event" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">A #GdkEvent, or %NULL</doc>
            <type name="Gdk.Event" c:type="GdkEvent*"/>
          </parameter>
        </parameters>
      </method>
      <property name="editing-canceled"
                version="2.20"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Indicates whether editing on the cell has been canceled.</doc>
        <type name="gboolean"/>
      </property>
      <glib:signal name="editing-done">
        <doc xml:whitespace="preserve">This signal is a sign for the cell renderer to update its
value from the @cell_editable.
Implementations of #GtkCellEditable are responsible for
emitting this signal when they are done editing, e.g.
#GtkEntry is emitting it when the user presses Enter.
gtk_cell_editable_editing_done() is a convenience method
for emitting #GtkCellEditable::editing-done.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
      <glib:signal name="remove-widget">
        <doc xml:whitespace="preserve">This signal is meant to indicate that the cell is finished
editing, and the widget may now be destroyed.
Implementations of #GtkCellEditable are responsible for
emitting this signal when they are done editing. It must
be emitted after the #GtkCellEditable::editing-done signal,
to give the cell renderer a chance to update the cell's value
before the widget is removed.
gtk_cell_editable_remove_widget() is a convenience method
for emitting #GtkCellEditable::remove-widget.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
    </interface>
    <record name="CellEditableIface"
            c:type="GtkCellEditableIface"
            glib:is-gtype-struct-for="CellEditable">
      <field name="g_iface">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="editing_done">
        <callback name="editing_done">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="cell_editable" transfer-ownership="none">
              <type name="CellEditable" c:type="GtkCellEditable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="remove_widget">
        <callback name="remove_widget">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="cell_editable" transfer-ownership="none">
              <type name="CellEditable" c:type="GtkCellEditable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="start_editing">
        <callback name="start_editing">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="cell_editable" transfer-ownership="none">
              <type name="CellEditable" c:type="GtkCellEditable*"/>
            </parameter>
            <parameter name="event" transfer-ownership="none" allow-none="1">
              <doc xml:whitespace="preserve">A #GdkEvent, or %NULL</doc>
              <type name="Gdk.Event" c:type="GdkEvent*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <interface name="CellLayout"
               c:symbol-prefix="cell_layout"
               c:type="GtkCellLayout"
               glib:type-name="GtkCellLayout"
               glib:get-type="gtk_cell_layout_get_type"
               glib:type-struct="CellLayoutIface">
      <virtual-method name="add_attribute"
                      invoker="add_attribute"
                      version="2.4">
        <doc xml:whitespace="preserve">Adds an attribute mapping to the list in @cell_layout. The @column is the
column of the model to get a value from, and the @attribute is the
parameter on @cell to be set from the value. So for example if column 2
of the model contains strings, you could have the "text" attribute of a
#GtkCellRendererText get its values from column 2.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="cell" transfer-ownership="none">
            <doc xml:whitespace="preserve">A #GtkCellRenderer.</doc>
            <type name="CellRenderer" c:type="GtkCellRenderer*"/>
          </parameter>
          <parameter name="attribute" transfer-ownership="none">
            <doc xml:whitespace="preserve">An attribute on the renderer.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="column" transfer-ownership="none">
            <doc xml:whitespace="preserve">The column position on the model to get the attribute from.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="clear" invoker="clear" version="2.4">
        <doc xml:whitespace="preserve">Unsets all the mappings on all renderers on @cell_layout and
removes all renderers from @cell_layout.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </virtual-method>
      <virtual-method name="clear_attributes"
                      invoker="clear_attributes"
                      version="2.4">
        <doc xml:whitespace="preserve">Clears all existing attributes previously set with
gtk_cell_layout_set_attributes().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="cell" transfer-ownership="none">
            <doc xml:whitespace="preserve">A #GtkCellRenderer to clear the attribute mapping on.</doc>
            <type name="CellRenderer" c:type="GtkCellRenderer*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_cells" invoker="get_cells" version="2.12">
        <doc xml:whitespace="preserve">Returns the cell renderers which have been added to @cell_layout.
renderers has been newly allocated and should be freed with
g_list_free() when no longer needed.</doc>
        <return-value transfer-ownership="container">
          <doc xml:whitespace="preserve">a list of cell renderers. The list, but not the</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="CellRenderer"/>
          </type>
        </return-value>
      </virtual-method>
      <virtual-method name="pack_end" invoker="pack_end" version="2.4">
        <doc xml:whitespace="preserve">Adds the @cell to the end of @cell_layout. If @expand is %FALSE, then the
divided evenly between cells for which @expand is %TRUE.
Note that reusing the same cell renderer is not supported.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="cell" transfer-ownership="none">
            <doc xml:whitespace="preserve">A #GtkCellRenderer.</doc>
            <type name="CellRenderer" c:type="GtkCellRenderer*"/>
          </parameter>
          <parameter name="expand" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE if @cell is to be given extra space allocated to @cell_layout.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="pack_start" invoker="pack_start" version="2.4">
        <doc xml:whitespace="preserve">Packs the @cell into the beginning of @cell_layout. If @expand is %FALSE,
then the @cell is allocated no more space than it needs. Any unused space
is divided evenly between cells for which @expand is %TRUE.
Note that reusing the same cell renderer is not supported.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="cell" transfer-ownership="none">
            <doc xml:whitespace="preserve">A #GtkCellRenderer.</doc>
            <type name="CellRenderer" c:type="GtkCellRenderer*"/>
          </parameter>
          <parameter name="expand" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE if @cell is to be given extra space allocated to @cell_layout.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="reorder" invoker="reorder" version="2.4">
        <doc xml:whitespace="preserve">Re-inserts @cell at @position. Note that @cell has already to be packed
into @cell_layout for this to function properly.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="cell" transfer-ownership="none">
            <doc xml:whitespace="preserve">A #GtkCellRenderer to reorder.</doc>
            <type name="CellRenderer" c:type="GtkCellRenderer*"/>
          </parameter>
          <parameter name="position" transfer-ownership="none">
            <doc xml:whitespace="preserve">New position to insert @cell at.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_cell_data_func"
                      invoker="set_cell_data_func"
                      version="2.4">
        <doc xml:whitespace="preserve">Sets the #GtkCellLayoutDataFunc to use for @cell_layout. This function
is used instead of the standard attributes mapping for setting the
column value, and should set the value of @cell_layout's cell renderer(s)
as appropriate. @func may be %NULL to remove and older one.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="cell" transfer-ownership="none">
            <doc xml:whitespace="preserve">A #GtkCellRenderer.</doc>
            <type name="CellRenderer" c:type="GtkCellRenderer*"/>
          </parameter>
          <parameter name="func"
                     transfer-ownership="none"
                     scope="notified"
                     closure="2"
                     destroy="3">
            <doc xml:whitespace="preserve">The #GtkCellLayoutDataFunc to use.</doc>
            <type name="CellLayoutDataFunc" c:type="GtkCellLayoutDataFunc"/>
          </parameter>
          <parameter name="func_data" transfer-ownership="none">
            <doc xml:whitespace="preserve">The user data for @func.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="destroy" transfer-ownership="none" scope="async">
            <doc xml:whitespace="preserve">The destroy notification for @func_data.</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="add_attribute"
              c:identifier="gtk_cell_layout_add_attribute"
              version="2.4">
        <doc xml:whitespace="preserve">Adds an attribute mapping to the list in @cell_layout. The @column is the
column of the model to get a value from, and the @attribute is the
parameter on @cell to be set from the value. So for example if column 2
of the model contains strings, you could have the "text" attribute of a
#GtkCellRendererText get its values from column 2.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="cell" transfer-ownership="none">
            <doc xml:whitespace="preserve">A #GtkCellRenderer.</doc>
            <type name="CellRenderer" c:type="GtkCellRenderer*"/>
          </parameter>
          <parameter name="attribute" transfer-ownership="none">
            <doc xml:whitespace="preserve">An attribute on the renderer.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="column" transfer-ownership="none">
            <doc xml:whitespace="preserve">The column position on the model to get the attribute from.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="clear" c:identifier="gtk_cell_layout_clear" version="2.4">
        <doc xml:whitespace="preserve">Unsets all the mappings on all renderers on @cell_layout and
removes all renderers from @cell_layout.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="clear_attributes"
              c:identifier="gtk_cell_layout_clear_attributes"
              version="2.4">
        <doc xml:whitespace="preserve">Clears all existing attributes previously set with
gtk_cell_layout_set_attributes().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="cell" transfer-ownership="none">
            <doc xml:whitespace="preserve">A #GtkCellRenderer to clear the attribute mapping on.</doc>
            <type name="CellRenderer" c:type="GtkCellRenderer*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_cells"
              c:identifier="gtk_cell_layout_get_cells"
              version="2.12">
        <doc xml:whitespace="preserve">Returns the cell renderers which have been added to @cell_layout.
renderers has been newly allocated and should be freed with
g_list_free() when no longer needed.</doc>
        <return-value transfer-ownership="container">
          <doc xml:whitespace="preserve">a list of cell renderers. The list, but not the</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="CellRenderer"/>
          </type>
        </return-value>
      </method>
      <method name="pack_end"
              c:identifier="gtk_cell_layout_pack_end"
              version="2.4">
        <doc xml:whitespace="preserve">Adds the @cell to the end of @cell_layout. If @expand is %FALSE, then the
divided evenly between cells for which @expand is %TRUE.
Note that reusing the same cell renderer is not supported.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="cell" transfer-ownership="none">
            <doc xml:whitespace="preserve">A #GtkCellRenderer.</doc>
            <type name="CellRenderer" c:type="GtkCellRenderer*"/>
          </parameter>
          <parameter name="expand" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE if @cell is to be given extra space allocated to @cell_layout.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="pack_start"
              c:identifier="gtk_cell_layout_pack_start"
              version="2.4">
        <doc xml:whitespace="preserve">Packs the @cell into the beginning of @cell_layout. If @expand is %FALSE,
then the @cell is allocated no more space than it needs. Any unused space
is divided evenly between cells for which @expand is %TRUE.
Note that reusing the same cell renderer is not supported.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="cell" transfer-ownership="none">
            <doc xml:whitespace="preserve">A #GtkCellRenderer.</doc>
            <type name="CellRenderer" c:type="GtkCellRenderer*"/>
          </parameter>
          <parameter name="expand" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE if @cell is to be given extra space allocated to @cell_layout.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="reorder"
              c:identifier="gtk_cell_layout_reorder"
              version="2.4">
        <doc xml:whitespace="preserve">Re-inserts @cell at @position. Note that @cell has already to be packed
into @cell_layout for this to function properly.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="cell" transfer-ownership="none">
            <doc xml:whitespace="preserve">A #GtkCellRenderer to reorder.</doc>
            <type name="CellRenderer" c:type="GtkCellRenderer*"/>
          </parameter>
          <parameter name="position" transfer-ownership="none">
            <doc xml:whitespace="preserve">New position to insert @cell at.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_attributes"
              c:identifier="gtk_cell_layout_set_attributes"
              version="2.4"
              introspectable="0">
        <doc xml:whitespace="preserve">Sets the attributes in list as the attributes of @cell_layout. The
attributes should be in attribute/column order, as in
gtk_cell_layout_add_attribute(). All existing attributes are removed, and
replaced with the new attributes.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="cell" transfer-ownership="none">
            <doc xml:whitespace="preserve">A #GtkCellRenderer.</doc>
            <type name="CellRenderer" c:type="GtkCellRenderer*"/>
          </parameter>
          <parameter transfer-ownership="none">
            <varargs>
            </varargs>
          </parameter>
        </parameters>
      </method>
      <method name="set_cell_data_func"
              c:identifier="gtk_cell_layout_set_cell_data_func"
              version="2.4">
        <doc xml:whitespace="preserve">Sets the #GtkCellLayoutDataFunc to use for @cell_layout. This function
is used instead of the standard attributes mapping for setting the
column value, and should set the value of @cell_layout's cell renderer(s)
as appropriate. @func may be %NULL to remove and older one.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="cell" transfer-ownership="none">
            <doc xml:whitespace="preserve">A #GtkCellRenderer.</doc>
            <type name="CellRenderer" c:type="GtkCellRenderer*"/>
          </parameter>
          <parameter name="func"
                     transfer-ownership="none"
                     scope="notified"
                     closure="2"
                     destroy="3">
            <doc xml:whitespace="preserve">The #GtkCellLayoutDataFunc to use.</doc>
            <type name="CellLayoutDataFunc" c:type="GtkCellLayoutDataFunc"/>
          </parameter>
          <parameter name="func_data" transfer-ownership="none">
            <doc xml:whitespace="preserve">The user data for @func.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="destroy" transfer-ownership="none" scope="async">
            <doc xml:whitespace="preserve">The destroy notification for @func_data.</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </method>
    </interface>
    <callback name="CellLayoutDataFunc" c:type="GtkCellLayoutDataFunc">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="cell_layout" transfer-ownership="none">
          <type name="CellLayout" c:type="GtkCellLayout*"/>
        </parameter>
        <parameter name="cell" transfer-ownership="none">
          <type name="CellRenderer" c:type="GtkCellRenderer*"/>
        </parameter>
        <parameter name="tree_model" transfer-ownership="none">
          <type name="TreeModel" c:type="GtkTreeModel*"/>
        </parameter>
        <parameter name="iter" transfer-ownership="none">
          <type name="TreeIter" c:type="GtkTreeIter*"/>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <record name="CellLayoutIface"
            c:type="GtkCellLayoutIface"
            glib:is-gtype-struct-for="CellLayout">
      <field name="g_iface">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="pack_start">
        <callback name="pack_start">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="cell_layout" transfer-ownership="none">
              <type name="CellLayout" c:type="GtkCellLayout*"/>
            </parameter>
            <parameter name="cell" transfer-ownership="none">
              <doc xml:whitespace="preserve">A #GtkCellRenderer.</doc>
              <type name="CellRenderer" c:type="GtkCellRenderer*"/>
            </parameter>
            <parameter name="expand" transfer-ownership="none">
              <doc xml:whitespace="preserve">%TRUE if @cell is to be given extra space allocated to @cell_layout.</doc>
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="pack_end">
        <callback name="pack_end">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="cell_layout" transfer-ownership="none">
              <type name="CellLayout" c:type="GtkCellLayout*"/>
            </parameter>
            <parameter name="cell" transfer-ownership="none">
              <doc xml:whitespace="preserve">A #GtkCellRenderer.</doc>
              <type name="CellRenderer" c:type="GtkCellRenderer*"/>
            </parameter>
            <parameter name="expand" transfer-ownership="none">
              <doc xml:whitespace="preserve">%TRUE if @cell is to be given extra space allocated to @cell_layout.</doc>
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="clear">
        <callback name="clear">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="cell_layout" transfer-ownership="none">
              <type name="CellLayout" c:type="GtkCellLayout*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="add_attribute">
        <callback name="add_attribute">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="cell_layout" transfer-ownership="none">
              <type name="CellLayout" c:type="GtkCellLayout*"/>
            </parameter>
            <parameter name="cell" transfer-ownership="none">
              <doc xml:whitespace="preserve">A #GtkCellRenderer.</doc>
              <type name="CellRenderer" c:type="GtkCellRenderer*"/>
            </parameter>
            <parameter name="attribute" transfer-ownership="none">
              <doc xml:whitespace="preserve">An attribute on the renderer.</doc>
              <type name="utf8" c:type="gchar*"/>
            </parameter>
            <parameter name="column" transfer-ownership="none">
              <doc xml:whitespace="preserve">The column position on the model to get the attribute from.</doc>
              <type name="gint" c:type="gint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_cell_data_func">
        <callback name="set_cell_data_func">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="cell_layout" transfer-ownership="none">
              <type name="CellLayout" c:type="GtkCellLayout*"/>
            </parameter>
            <parameter name="cell" transfer-ownership="none">
              <doc xml:whitespace="preserve">A #GtkCellRenderer.</doc>
              <type name="CellRenderer" c:type="GtkCellRenderer*"/>
            </parameter>
            <parameter name="func"
                       transfer-ownership="none"
                       scope="notified"
                       closure="3"
                       destroy="4">
              <doc xml:whitespace="preserve">The #GtkCellLayoutDataFunc to use.</doc>
              <type name="CellLayoutDataFunc" c:type="GtkCellLayoutDataFunc"/>
            </parameter>
            <parameter name="func_data" transfer-ownership="none">
              <doc xml:whitespace="preserve">The user data for @func.</doc>
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
            <parameter name="destroy" transfer-ownership="none" scope="async">
              <doc xml:whitespace="preserve">The destroy notification for @func_data.</doc>
              <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="clear_attributes">
        <callback name="clear_attributes">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="cell_layout" transfer-ownership="none">
              <type name="CellLayout" c:type="GtkCellLayout*"/>
            </parameter>
            <parameter name="cell" transfer-ownership="none">
              <doc xml:whitespace="preserve">A #GtkCellRenderer to clear the attribute mapping on.</doc>
              <type name="CellRenderer" c:type="GtkCellRenderer*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="reorder">
        <callback name="reorder">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="cell_layout" transfer-ownership="none">
              <type name="CellLayout" c:type="GtkCellLayout*"/>
            </parameter>
            <parameter name="cell" transfer-ownership="none">
              <doc xml:whitespace="preserve">A #GtkCellRenderer to reorder.</doc>
              <type name="CellRenderer" c:type="GtkCellRenderer*"/>
            </parameter>
            <parameter name="position" transfer-ownership="none">
              <doc xml:whitespace="preserve">New position to insert @cell at.</doc>
              <type name="gint" c:type="gint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_cells">
        <callback name="get_cells">
          <return-value transfer-ownership="container">
            <doc xml:whitespace="preserve">a list of cell renderers. The list, but not the</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="CellRenderer"/>
            </type>
          </return-value>
          <parameters>
            <parameter name="cell_layout" transfer-ownership="none">
              <type name="CellLayout" c:type="GtkCellLayout*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="CellRenderer"
           c:symbol-prefix="cell_renderer"
           c:type="GtkCellRenderer"
           parent="Object"
           abstract="1"
           glib:type-name="GtkCellRenderer"
           glib:get-type="gtk_cell_renderer_get_type"
           glib:type-struct="CellRendererClass">
      <implements name="CellSizeRequest"/>
      <virtual-method name="activate" invoker="activate">
        <doc xml:whitespace="preserve">Passes an activate event to the cell renderer for possible processing.  
Some cell renderers may use events; for example, #GtkCellRendererToggle 
toggles when it gets a mouse click.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the event was consumed/handled</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="event" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GdkEvent</doc>
            <type name="Gdk.Event" c:type="GdkEvent*"/>
          </parameter>
          <parameter name="widget" transfer-ownership="none">
            <doc xml:whitespace="preserve">widget that received the event</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:whitespace="preserve">widget-dependent string representation of the event location; e.g. for #GtkTreeView, a string representation of #GtkTreePath</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="background_area" transfer-ownership="none">
            <doc xml:whitespace="preserve">background area as passed to gtk_cell_renderer_render()</doc>
            <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
          </parameter>
          <parameter name="cell_area" transfer-ownership="none">
            <doc xml:whitespace="preserve">cell area as passed to gtk_cell_renderer_render()</doc>
            <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:whitespace="preserve">render flags</doc>
            <type name="CellRendererState" c:type="GtkCellRendererState"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_size"
                      invoker="get_size"
                      deprecated="Use gtk_cell_size_request_get_size() instead."
                      deprecated-version="3.0">
        <doc xml:whitespace="preserve">Obtains the width and height needed to render the cell. Used by view 
widgets to determine the appropriate size for the cell_area passed to
gtk_cell_renderer_render().  If @cell_area is not %NULL, fills in the
x and y offsets (if set) of the cell relative to this location. 
Please note that the values set in @width and @height, as well as those 
in @x_offset and @y_offset are inclusive of the xpad and ypad properties.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="widget" transfer-ownership="none">
            <doc xml:whitespace="preserve">the widget the renderer is rendering to</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="cell_area" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">The area a cell will be allocated, or %NULL</doc>
            <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
          </parameter>
          <parameter name="x_offset" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">location to return x offset of cell relative to @cell_area, or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="y_offset" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">location to return y offset of cell relative to @cell_area, or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="width" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">location to return width needed to render a cell, or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="height" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">location to return height needed to render a cell, or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="render" invoker="render">
        <doc xml:whitespace="preserve">Invokes the virtual render function of the #GtkCellRenderer. The three
passed-in rectangles are areas of @window. Most renderers will draw within
should be honored with respect to @cell_area. @background_area includes the
blank space around the cell, and also the area containing the tree expander;
so the @background_area rectangles for all cells tile to cover the entire</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="window" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GdkDrawable to draw to</doc>
            <type name="Gdk.Drawable" c:type="GdkDrawable*"/>
          </parameter>
          <parameter name="widget" transfer-ownership="none">
            <doc xml:whitespace="preserve">the widget owning @window</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="background_area" transfer-ownership="none">
            <doc xml:whitespace="preserve">entire cell area (including tree expanders and maybe padding on the sides)</doc>
            <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
          </parameter>
          <parameter name="cell_area" transfer-ownership="none">
            <doc xml:whitespace="preserve">area normally rendered by a cell renderer</doc>
            <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
          </parameter>
          <parameter name="expose_area" transfer-ownership="none">
            <doc xml:whitespace="preserve">area that actually needs updating</doc>
            <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:whitespace="preserve">flags that affect rendering</doc>
            <type name="CellRendererState" c:type="GtkCellRendererState"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="start_editing" invoker="start_editing">
        <doc xml:whitespace="preserve">Passes an activate event to the cell renderer for possible processing.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A new #GtkCellEditable, or %NULL</doc>
          <type name="CellEditable" c:type="GtkCellEditable*"/>
        </return-value>
        <parameters>
          <parameter name="event" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GdkEvent</doc>
            <type name="Gdk.Event" c:type="GdkEvent*"/>
          </parameter>
          <parameter name="widget" transfer-ownership="none">
            <doc xml:whitespace="preserve">widget that received the event</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:whitespace="preserve">widget-dependent string representation of the event location; e.g. for #GtkTreeView, a string representation of #GtkTreePath</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="background_area" transfer-ownership="none">
            <doc xml:whitespace="preserve">background area as passed to gtk_cell_renderer_render()</doc>
            <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
          </parameter>
          <parameter name="cell_area" transfer-ownership="none">
            <doc xml:whitespace="preserve">cell area as passed to gtk_cell_renderer_render()</doc>
            <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:whitespace="preserve">render flags</doc>
            <type name="CellRendererState" c:type="GtkCellRendererState"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="activate" c:identifier="gtk_cell_renderer_activate">
        <doc xml:whitespace="preserve">Passes an activate event to the cell renderer for possible processing.  
Some cell renderers may use events; for example, #GtkCellRendererToggle 
toggles when it gets a mouse click.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the event was consumed/handled</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="event" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GdkEvent</doc>
            <type name="Gdk.Event" c:type="GdkEvent*"/>
          </parameter>
          <parameter name="widget" transfer-ownership="none">
            <doc xml:whitespace="preserve">widget that received the event</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:whitespace="preserve">widget-dependent string representation of the event location; e.g. for #GtkTreeView, a string representation of #GtkTreePath</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="background_area" transfer-ownership="none">
            <doc xml:whitespace="preserve">background area as passed to gtk_cell_renderer_render()</doc>
            <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
          </parameter>
          <parameter name="cell_area" transfer-ownership="none">
            <doc xml:whitespace="preserve">cell area as passed to gtk_cell_renderer_render()</doc>
            <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:whitespace="preserve">render flags</doc>
            <type name="CellRendererState" c:type="GtkCellRendererState"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_alignment"
              c:identifier="gtk_cell_renderer_get_alignment"
              version="2.18">
        <doc xml:whitespace="preserve">Fills in @xalign and @yalign with the appropriate values of @cell.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="xalign" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">location to fill in with the x alignment of the cell, or %NULL</doc>
            <type name="gfloat" c:type="gfloat*"/>
          </parameter>
          <parameter name="yalign" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">location to fill in with the y alignment of the cell, or %NULL</doc>
            <type name="gfloat" c:type="gfloat*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_fixed_size"
              c:identifier="gtk_cell_renderer_get_fixed_size">
        <doc xml:whitespace="preserve">Fills in @width and @height with the appropriate size of @cell.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="width" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">location to fill in with the fixed width of the cell, or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="height" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">location to fill in with the fixed height of the cell, or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_padding"
              c:identifier="gtk_cell_renderer_get_padding"
              version="2.18">
        <doc xml:whitespace="preserve">Fills in @xpad and @ypad with the appropriate values of @cell.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="xpad" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">location to fill in with the x padding of the cell, or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="ypad" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">location to fill in with the y padding of the cell, or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_sensitive"
              c:identifier="gtk_cell_renderer_get_sensitive"
              version="2.18">
        <doc xml:whitespace="preserve">Returns the cell renderer's sensitivity.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the cell renderer is sensitive</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_size"
              c:identifier="gtk_cell_renderer_get_size"
              deprecated="Use gtk_cell_size_request_get_size() instead."
              deprecated-version="3.0">
        <doc xml:whitespace="preserve">Obtains the width and height needed to render the cell. Used by view 
widgets to determine the appropriate size for the cell_area passed to
gtk_cell_renderer_render().  If @cell_area is not %NULL, fills in the
x and y offsets (if set) of the cell relative to this location. 
Please note that the values set in @width and @height, as well as those 
in @x_offset and @y_offset are inclusive of the xpad and ypad properties.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="widget" transfer-ownership="none">
            <doc xml:whitespace="preserve">the widget the renderer is rendering to</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="cell_area" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">The area a cell will be allocated, or %NULL</doc>
            <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
          </parameter>
          <parameter name="x_offset" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">location to return x offset of cell relative to @cell_area, or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="y_offset" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">location to return y offset of cell relative to @cell_area, or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="width" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">location to return width needed to render a cell, or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="height" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">location to return height needed to render a cell, or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_visible"
              c:identifier="gtk_cell_renderer_get_visible"
              version="2.18">
        <doc xml:whitespace="preserve">Returns the cell renderer's visibility.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the cell renderer is visible</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="render" c:identifier="gtk_cell_renderer_render">
        <doc xml:whitespace="preserve">Invokes the virtual render function of the #GtkCellRenderer. The three
passed-in rectangles are areas of @window. Most renderers will draw within
should be honored with respect to @cell_area. @background_area includes the
blank space around the cell, and also the area containing the tree expander;
so the @background_area rectangles for all cells tile to cover the entire</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="window" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GdkDrawable to draw to</doc>
            <type name="Gdk.Window" c:type="GdkWindow*"/>
          </parameter>
          <parameter name="widget" transfer-ownership="none">
            <doc xml:whitespace="preserve">the widget owning @window</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="background_area" transfer-ownership="none">
            <doc xml:whitespace="preserve">entire cell area (including tree expanders and maybe padding on the sides)</doc>
            <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
          </parameter>
          <parameter name="cell_area" transfer-ownership="none">
            <doc xml:whitespace="preserve">area normally rendered by a cell renderer</doc>
            <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
          </parameter>
          <parameter name="expose_area" transfer-ownership="none">
            <doc xml:whitespace="preserve">area that actually needs updating</doc>
            <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:whitespace="preserve">flags that affect rendering</doc>
            <type name="CellRendererState" c:type="GtkCellRendererState"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_alignment"
              c:identifier="gtk_cell_renderer_set_alignment"
              version="2.18">
        <doc xml:whitespace="preserve">Sets the renderer's alignment within its available space.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="xalign" transfer-ownership="none">
            <doc xml:whitespace="preserve">the x alignment of the cell renderer</doc>
            <type name="gfloat" c:type="gfloat"/>
          </parameter>
          <parameter name="yalign" transfer-ownership="none">
            <doc xml:whitespace="preserve">the y alignment of the cell renderer</doc>
            <type name="gfloat" c:type="gfloat"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_fixed_size"
              c:identifier="gtk_cell_renderer_set_fixed_size">
        <doc xml:whitespace="preserve">Sets the renderer size to be explicit, independent of the properties set.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="width" transfer-ownership="none">
            <doc xml:whitespace="preserve">the width of the cell renderer, or -1</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:whitespace="preserve">the height of the cell renderer, or -1</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_padding"
              c:identifier="gtk_cell_renderer_set_padding"
              version="2.18">
        <doc xml:whitespace="preserve">Sets the renderer's padding.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="xpad" transfer-ownership="none">
            <doc xml:whitespace="preserve">the x padding of the cell renderer</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="ypad" transfer-ownership="none">
            <doc xml:whitespace="preserve">the y padding of the cell renderer</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_sensitive"
              c:identifier="gtk_cell_renderer_set_sensitive"
              version="2.18">
        <doc xml:whitespace="preserve">Sets the cell renderer's sensitivity.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="sensitive" transfer-ownership="none">
            <doc xml:whitespace="preserve">the sensitivity of the cell</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_visible"
              c:identifier="gtk_cell_renderer_set_visible"
              version="2.18">
        <doc xml:whitespace="preserve">Sets the cell renderer's visibility.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="visible" transfer-ownership="none">
            <doc xml:whitespace="preserve">the visibility of the cell</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="start_editing"
              c:identifier="gtk_cell_renderer_start_editing">
        <doc xml:whitespace="preserve">Passes an activate event to the cell renderer for possible processing.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A new #GtkCellEditable, or %NULL</doc>
          <type name="CellEditable" c:type="GtkCellEditable*"/>
        </return-value>
        <parameters>
          <parameter name="event" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GdkEvent</doc>
            <type name="Gdk.Event" c:type="GdkEvent*"/>
          </parameter>
          <parameter name="widget" transfer-ownership="none">
            <doc xml:whitespace="preserve">widget that received the event</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:whitespace="preserve">widget-dependent string representation of the event location; e.g. for #GtkTreeView, a string representation of #GtkTreePath</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="background_area" transfer-ownership="none">
            <doc xml:whitespace="preserve">background area as passed to gtk_cell_renderer_render()</doc>
            <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
          </parameter>
          <parameter name="cell_area" transfer-ownership="none">
            <doc xml:whitespace="preserve">cell area as passed to gtk_cell_renderer_render()</doc>
            <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:whitespace="preserve">render flags</doc>
            <type name="CellRendererState" c:type="GtkCellRendererState"/>
          </parameter>
        </parameters>
      </method>
      <method name="stop_editing"
              c:identifier="gtk_cell_renderer_stop_editing"
              version="2.6">
        <doc xml:whitespace="preserve">Informs the cell renderer that the editing is stopped.
If @canceled is %TRUE, the cell renderer will emit the 
#GtkCellRenderer::editing-canceled signal. 
This function should be called by cell renderer implementations 
in response to the #GtkCellEditable::editing-done signal of 
#GtkCellEditable.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="canceled" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE if the editing has been canceled</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="cell-background"
                readable="0"
                writable="1"
                transfer-ownership="none">
        <type name="utf8"/>
      </property>
      <property name="cell-background-gdk"
                writable="1"
                transfer-ownership="none">
        <type name="Gdk.Color"/>
      </property>
      <property name="cell-background-set"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="editing" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="height" writable="1" transfer-ownership="none">
        <type name="gint"/>
      </property>
      <property name="is-expanded" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="is-expander" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="mode" writable="1" transfer-ownership="none">
        <type name="CellRendererMode"/>
      </property>
      <property name="sensitive" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="visible" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="width" writable="1" transfer-ownership="none">
        <type name="gint"/>
      </property>
      <property name="xalign" writable="1" transfer-ownership="none">
        <type name="gfloat"/>
      </property>
      <property name="xpad" writable="1" transfer-ownership="none">
        <type name="guint"/>
      </property>
      <property name="yalign" writable="1" transfer-ownership="none">
        <type name="gfloat"/>
      </property>
      <property name="ypad" writable="1" transfer-ownership="none">
        <type name="guint"/>
      </property>
      <field name="parent">
        <type name="Object" c:type="GtkObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="CellRendererPrivate" c:type="GtkCellRendererPrivate*"/>
      </field>
      <glib:signal name="editing-canceled" version="2.4">
        <doc xml:whitespace="preserve">This signal gets emitted when the user cancels the process of editing a
cell.  For example, an editable cell renderer could be written to cancel
editing when the user presses Escape.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
      <glib:signal name="editing-started" version="2.6">
        <doc xml:whitespace="preserve">This signal gets emitted when a cell starts to be edited.
The intended use of this signal is to do special setup
on @editable, e.g. adding a #GtkEntryCompletion or setting
up additional columns in a #GtkComboBox.
Note that GTK+ doesn't guarantee that cell renderers will
continue to use the same kind of widget for editing in future
releases, therefore you should check the type of @editable
before doing any specific setup, as in the following example:
|[
static void
text_editing_started (GtkCellRenderer *cell,
GtkCellEditable *editable,
const gchar     *path,
gpointer         data)
{
if (GTK_IS_ENTRY (editable)) 
{
GtkEntry *entry = GTK_ENTRY (editable);
/&amp;ast; ... create a GtkEntryCompletion &amp;ast;/
gtk_entry_set_completion (entry, completion);
}
}
]|</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GtkCellEditable</doc>
            <type name="CellEditable"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <doc xml:whitespace="preserve">the path identifying the edited cell</doc>
            <type name="utf8"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <class name="CellRendererAccel"
           c:symbol-prefix="cell_renderer_accel"
           c:type="GtkCellRendererAccel"
           parent="CellRendererText"
           glib:type-name="GtkCellRendererAccel"
           glib:get-type="gtk_cell_renderer_accel_get_type"
           glib:type-struct="CellRendererAccelClass">
      <implements name="CellSizeRequest"/>
      <constructor name="new"
                   c:identifier="gtk_cell_renderer_accel_new"
                   version="2.10">
        <doc xml:whitespace="preserve">Creates a new #GtkCellRendererAccel.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the new cell renderer</doc>
          <type name="CellRenderer" c:type="GtkCellRenderer*"/>
        </return-value>
      </constructor>
      <property name="accel-key"
                version="2.10"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The keyval of the accelerator.</doc>
        <type name="guint"/>
      </property>
      <property name="accel-mode"
                version="2.10"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Determines if the edited accelerators are GTK+ accelerators. If
they are, consumed modifiers are suppressed, only accelerators
accepted by GTK+ are allowed, and the accelerators are rendered
in the same way as they are in menus.</doc>
        <type name="CellRendererAccelMode"/>
      </property>
      <property name="accel-mods"
                version="2.10"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The modifier mask of the accelerator.</doc>
        <type name="Gdk.ModifierType"/>
      </property>
      <property name="keycode"
                version="2.10"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The hardware keycode of the accelerator. Note that the hardware keycode is
only relevant if the key does not have a keyval. Normally, the keyboard
configuration should assign keyvals to all keys.</doc>
        <type name="guint"/>
      </property>
      <field name="parent">
        <type name="CellRendererText" c:type="GtkCellRendererText"/>
      </field>
      <field name="priv">
        <type name="CellRendererAccelPrivate"
              c:type="GtkCellRendererAccelPrivate*"/>
      </field>
      <glib:signal name="accel-cleared" version="2.10">
        <doc xml:whitespace="preserve">Gets emitted when the user has removed the accelerator.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the path identifying the row of the edited cell</doc>
            <type name="utf8"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="accel-edited" version="2.10">
        <doc xml:whitespace="preserve">Gets emitted when the user has selected a new accelerator.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the path identifying the row of the edited cell</doc>
            <type name="utf8"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <doc xml:whitespace="preserve">the new accelerator keyval</doc>
            <type name="guint"/>
          </parameter>
          <parameter name="p1" transfer-ownership="none">
            <doc xml:whitespace="preserve">the new acclerator modifier mask</doc>
            <type name="Gdk.ModifierType"/>
          </parameter>
          <parameter name="p2" transfer-ownership="none">
            <doc xml:whitespace="preserve">the keycode of the new accelerator</doc>
            <type name="guint"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="CellRendererAccelClass"
            c:type="GtkCellRendererAccelClass"
            glib:is-gtype-struct-for="CellRendererAccel">
      <field name="parent_class">
        <type name="CellRendererTextClass" c:type="GtkCellRendererTextClass"/>
      </field>
      <field name="accel_edited">
        <callback name="accel_edited">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="accel" transfer-ownership="none">
              <type name="CellRendererAccel" c:type="GtkCellRendererAccel*"/>
            </parameter>
            <parameter name="path_string" transfer-ownership="none">
              <type name="utf8" c:type="gchar*"/>
            </parameter>
            <parameter name="accel_key" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="accel_mods" transfer-ownership="none">
              <type name="Gdk.ModifierType" c:type="GdkModifierType"/>
            </parameter>
            <parameter name="hardware_keycode" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="accel_cleared">
        <callback name="accel_cleared">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="accel" transfer-ownership="none">
              <type name="CellRendererAccel" c:type="GtkCellRendererAccel*"/>
            </parameter>
            <parameter name="path_string" transfer-ownership="none">
              <type name="utf8" c:type="gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_gtk_reserved0" introspectable="0">
        <callback name="_gtk_reserved0">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved1" introspectable="0">
        <callback name="_gtk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved2" introspectable="0">
        <callback name="_gtk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved3" introspectable="0">
        <callback name="_gtk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved4" introspectable="0">
        <callback name="_gtk_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <enumeration name="CellRendererAccelMode"
                 glib:type-name="GtkCellRendererAccelMode"
                 glib:get-type="gtk_cell_renderer_accel_mode_get_type"
                 c:type="GtkCellRendererAccelMode">
      <member name="gtk"
              value="0"
              c:identifier="GTK_CELL_RENDERER_ACCEL_MODE_GTK"
              glib:nick="gtk"/>
      <member name="other"
              value="1"
              c:identifier="GTK_CELL_RENDERER_ACCEL_MODE_OTHER"
              glib:nick="other"/>
    </enumeration>
    <record name="CellRendererAccelPrivate"
            c:type="GtkCellRendererAccelPrivate"
            disguised="1">
    </record>
    <record name="CellRendererClass"
            c:type="GtkCellRendererClass"
            glib:is-gtype-struct-for="CellRenderer">
      <field name="parent_class">
        <type name="ObjectClass" c:type="GtkObjectClass"/>
      </field>
      <field name="get_size">
        <callback name="get_size">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="cell" transfer-ownership="none">
              <type name="CellRenderer" c:type="GtkCellRenderer*"/>
            </parameter>
            <parameter name="widget" transfer-ownership="none">
              <doc xml:whitespace="preserve">the widget the renderer is rendering to</doc>
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
            <parameter name="cell_area"
                       transfer-ownership="none"
                       allow-none="1">
              <doc xml:whitespace="preserve">The area a cell will be allocated, or %NULL</doc>
              <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
            </parameter>
            <parameter name="x_offset"
                       transfer-ownership="none"
                       allow-none="1">
              <doc xml:whitespace="preserve">location to return x offset of cell relative to @cell_area, or %NULL</doc>
              <type name="gint" c:type="gint*"/>
            </parameter>
            <parameter name="y_offset"
                       transfer-ownership="none"
                       allow-none="1">
              <doc xml:whitespace="preserve">location to return y offset of cell relative to @cell_area, or %NULL</doc>
              <type name="gint" c:type="gint*"/>
            </parameter>
            <parameter name="width" transfer-ownership="none" allow-none="1">
              <doc xml:whitespace="preserve">location to return width needed to render a cell, or %NULL</doc>
              <type name="gint" c:type="gint*"/>
            </parameter>
            <parameter name="height" transfer-ownership="none" allow-none="1">
              <doc xml:whitespace="preserve">location to return height needed to render a cell, or %NULL</doc>
              <type name="gint" c:type="gint*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="render">
        <callback name="render">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="cell" transfer-ownership="none">
              <type name="CellRenderer" c:type="GtkCellRenderer*"/>
            </parameter>
            <parameter name="window" transfer-ownership="none">
              <doc xml:whitespace="preserve">a #GdkDrawable to draw to</doc>
              <type name="Gdk.Drawable" c:type="GdkDrawable*"/>
            </parameter>
            <parameter name="widget" transfer-ownership="none">
              <doc xml:whitespace="preserve">the widget owning @window</doc>
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
            <parameter name="background_area" transfer-ownership="none">
              <doc xml:whitespace="preserve">entire cell area (including tree expanders and maybe padding on the sides)</doc>
              <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
            </parameter>
            <parameter name="cell_area" transfer-ownership="none">
              <doc xml:whitespace="preserve">area normally rendered by a cell renderer</doc>
              <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
            </parameter>
            <parameter name="expose_area" transfer-ownership="none">
              <doc xml:whitespace="preserve">area that actually needs updating</doc>
              <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
            </parameter>
            <parameter name="flags" transfer-ownership="none">
              <doc xml:whitespace="preserve">flags that affect rendering</doc>
              <type name="CellRendererState" c:type="GtkCellRendererState"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="activate">
        <callback name="activate">
          <return-value transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE if the event was consumed/handled</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="cell" transfer-ownership="none">
              <type name="CellRenderer" c:type="GtkCellRenderer*"/>
            </parameter>
            <parameter name="event" transfer-ownership="none">
              <doc xml:whitespace="preserve">a #GdkEvent</doc>
              <type name="Gdk.Event" c:type="GdkEvent*"/>
            </parameter>
            <parameter name="widget" transfer-ownership="none">
              <doc xml:whitespace="preserve">widget that received the event</doc>
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
            <parameter name="path" transfer-ownership="none">
              <doc xml:whitespace="preserve">widget-dependent string representation of the event location; e.g. for #GtkTreeView, a string representation of #GtkTreePath</doc>
              <type name="utf8" c:type="gchar*"/>
            </parameter>
            <parameter name="background_area" transfer-ownership="none">
              <doc xml:whitespace="preserve">background area as passed to gtk_cell_renderer_render()</doc>
              <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
            </parameter>
            <parameter name="cell_area" transfer-ownership="none">
              <doc xml:whitespace="preserve">cell area as passed to gtk_cell_renderer_render()</doc>
              <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
            </parameter>
            <parameter name="flags" transfer-ownership="none">
              <doc xml:whitespace="preserve">render flags</doc>
              <type name="CellRendererState" c:type="GtkCellRendererState"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="start_editing">
        <callback name="start_editing">
          <return-value transfer-ownership="full">
            <doc xml:whitespace="preserve">A new #GtkCellEditable, or %NULL</doc>
            <type name="CellEditable" c:type="GtkCellEditable*"/>
          </return-value>
          <parameters>
            <parameter name="cell" transfer-ownership="none">
              <type name="CellRenderer" c:type="GtkCellRenderer*"/>
            </parameter>
            <parameter name="event" transfer-ownership="none">
              <doc xml:whitespace="preserve">a #GdkEvent</doc>
              <type name="Gdk.Event" c:type="GdkEvent*"/>
            </parameter>
            <parameter name="widget" transfer-ownership="none">
              <doc xml:whitespace="preserve">widget that received the event</doc>
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
            <parameter name="path" transfer-ownership="none">
              <doc xml:whitespace="preserve">widget-dependent string representation of the event location; e.g. for #GtkTreeView, a string representation of #GtkTreePath</doc>
              <type name="utf8" c:type="gchar*"/>
            </parameter>
            <parameter name="background_area" transfer-ownership="none">
              <doc xml:whitespace="preserve">background area as passed to gtk_cell_renderer_render()</doc>
              <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
            </parameter>
            <parameter name="cell_area" transfer-ownership="none">
              <doc xml:whitespace="preserve">cell area as passed to gtk_cell_renderer_render()</doc>
              <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
            </parameter>
            <parameter name="flags" transfer-ownership="none">
              <doc xml:whitespace="preserve">render flags</doc>
              <type name="CellRendererState" c:type="GtkCellRendererState"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="editing_canceled">
        <callback name="editing_canceled">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="cell" transfer-ownership="none">
              <type name="CellRenderer" c:type="GtkCellRenderer*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="editing_started">
        <callback name="editing_started">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="cell" transfer-ownership="none">
              <type name="CellRenderer" c:type="GtkCellRenderer*"/>
            </parameter>
            <parameter name="editable" transfer-ownership="none">
              <type name="CellEditable" c:type="GtkCellEditable*"/>
            </parameter>
            <parameter name="path" transfer-ownership="none">
              <type name="utf8" c:type="gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_gtk_reserved1" introspectable="0">
        <callback name="_gtk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved2" introspectable="0">
        <callback name="_gtk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <class name="CellRendererCombo"
           c:symbol-prefix="cell_renderer_combo"
           c:type="GtkCellRendererCombo"
           parent="CellRendererText"
           glib:type-name="GtkCellRendererCombo"
           glib:get-type="gtk_cell_renderer_combo_get_type"
           glib:type-struct="CellRendererComboClass">
      <implements name="CellSizeRequest"/>
      <constructor name="new"
                   c:identifier="gtk_cell_renderer_combo_new"
                   version="2.6">
        <doc xml:whitespace="preserve">Creates a new #GtkCellRendererCombo. 
Adjust how text is drawn using object properties. 
Object properties can be set globally (with g_object_set()). 
Also, with #GtkTreeViewColumn, you can bind a property to a value 
in a #GtkTreeModel. For example, you can bind the "text" property 
on the cell renderer to a string value in the model, thus rendering 
a different string in each row of the #GtkTreeView.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the new cell renderer</doc>
          <type name="CellRenderer" c:type="GtkCellRenderer*"/>
        </return-value>
      </constructor>
      <property name="has-entry" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="model"
                version="2.6"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Holds a tree model containing the possible values for the combo box. 
Use the text_column property to specify the column holding the values.</doc>
        <type name="TreeModel"/>
      </property>
      <property name="text-column"
                version="2.6"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Specifies the model column which holds the possible values for the 
combo box. 
Note that this refers to the model specified in the model property, 
&lt;emphasis&gt;not&lt;/emphasis&gt; the model backing the tree view to which 
this cell renderer is attached.
#GtkCellRendererCombo automatically adds a text cell renderer for 
this column to its combo box.</doc>
        <type name="gint"/>
      </property>
      <field name="parent">
        <type name="CellRendererText" c:type="GtkCellRendererText"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="CellRendererComboPrivate"
              c:type="GtkCellRendererComboPrivate*"/>
      </field>
      <glib:signal name="changed" version="2.14">
        <doc xml:whitespace="preserve">This signal is emitted each time after the user selected an item in
the combo box, either by using the mouse or the arrow keys.  Contrary
to GtkComboBox, GtkCellRendererCombo::changed is not emitted for
changes made to a selected item in the entry.  The argument @new_iter
corresponds to the newly selected item in the combo box and it is relative
to the GtkTreeModel set via the model property on GtkCellRendererCombo.
Note that as soon as you change the model displayed in the tree view,
the tree view will immediately cease the editing operating.  This
means that you most probably want to refrain from changing the model
until the combo cell renderer emits the edited or editing_canceled signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">a string of the path identifying the edited cell (relative to the tree view model)</doc>
            <type name="utf8"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <doc xml:whitespace="preserve">the new iter selected in the combo box (relative to the combo box model)</doc>
            <type name="TreeIter"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="CellRendererComboClass"
            c:type="GtkCellRendererComboClass"
            glib:is-gtype-struct-for="CellRendererCombo">
      <field name="parent">
        <type name="CellRendererTextClass" c:type="GtkCellRendererTextClass"/>
      </field>
    </record>
    <record name="CellRendererComboPrivate"
            c:type="GtkCellRendererComboPrivate"
            disguised="1">
    </record>
    <enumeration name="CellRendererMode"
                 glib:type-name="GtkCellRendererMode"
                 glib:get-type="gtk_cell_renderer_mode_get_type"
                 c:type="GtkCellRendererMode">
      <member name="inert"
              value="0"
              c:identifier="GTK_CELL_RENDERER_MODE_INERT"
              glib:nick="inert"/>
      <member name="activatable"
              value="1"
              c:identifier="GTK_CELL_RENDERER_MODE_ACTIVATABLE"
              glib:nick="activatable"/>
      <member name="editable"
              value="2"
              c:identifier="GTK_CELL_RENDERER_MODE_EDITABLE"
              glib:nick="editable"/>
    </enumeration>
    <class name="CellRendererPixbuf"
           c:symbol-prefix="cell_renderer_pixbuf"
           c:type="GtkCellRendererPixbuf"
           parent="CellRenderer"
           glib:type-name="GtkCellRendererPixbuf"
           glib:get-type="gtk_cell_renderer_pixbuf_get_type"
           glib:type-struct="CellRendererPixbufClass">
      <implements name="CellSizeRequest"/>
      <constructor name="new" c:identifier="gtk_cell_renderer_pixbuf_new">
        <doc xml:whitespace="preserve">Creates a new #GtkCellRendererPixbuf. Adjust rendering
parameters using object properties. Object properties can be set
globally (with g_object_set()). Also, with #GtkTreeViewColumn, you
can bind a property to a value in a #GtkTreeModel. For example, you
can bind the "pixbuf" property on the cell renderer to a pixbuf value
in the model, thus rendering a different image in each row of the
#GtkTreeView.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the new cell renderer</doc>
          <type name="CellRenderer" c:type="GtkCellRenderer*"/>
        </return-value>
      </constructor>
      <property name="follow-state"
                version="2.8"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Specifies whether the rendered pixbuf should be colorized
according to the #GtkCellRendererState.</doc>
        <type name="gboolean"/>
      </property>
      <property name="gicon"
                version="2.14"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The GIcon representing the icon to display.
If the icon theme is changed, the image will be updated
automatically.</doc>
        <type name="Gio.Icon"/>
      </property>
      <property name="icon-name"
                version="2.8"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The name of the themed icon to display.
This property only has an effect if not overridden by "stock_id" 
or "pixbuf" properties.</doc>
        <type name="utf8"/>
      </property>
      <property name="pixbuf" writable="1" transfer-ownership="none">
        <type name="GdkPixbuf.Pixbuf"/>
      </property>
      <property name="pixbuf-expander-closed"
                writable="1"
                transfer-ownership="none">
        <type name="GdkPixbuf.Pixbuf"/>
      </property>
      <property name="pixbuf-expander-open"
                writable="1"
                transfer-ownership="none">
        <type name="GdkPixbuf.Pixbuf"/>
      </property>
      <property name="stock-detail" writable="1" transfer-ownership="none">
        <type name="utf8"/>
      </property>
      <property name="stock-id" writable="1" transfer-ownership="none">
        <type name="utf8"/>
      </property>
      <property name="stock-size" writable="1" transfer-ownership="none">
        <type name="guint"/>
      </property>
      <field name="parent">
        <type name="CellRenderer" c:type="GtkCellRenderer"/>
      </field>
      <field name="priv">
        <type name="CellRendererPixbufPrivate"
              c:type="GtkCellRendererPixbufPrivate*"/>
      </field>
    </class>
    <record name="CellRendererPixbufClass"
            c:type="GtkCellRendererPixbufClass"
            glib:is-gtype-struct-for="CellRendererPixbuf">
      <field name="parent_class">
        <type name="CellRendererClass" c:type="GtkCellRendererClass"/>
      </field>
      <field name="_gtk_reserved1" introspectable="0">
        <callback name="_gtk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved2" introspectable="0">
        <callback name="_gtk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved3" introspectable="0">
        <callback name="_gtk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved4" introspectable="0">
        <callback name="_gtk_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="CellRendererPixbufPrivate"
            c:type="GtkCellRendererPixbufPrivate"
            disguised="1">
    </record>
    <record name="CellRendererPrivate"
            c:type="GtkCellRendererPrivate"
            disguised="1">
    </record>
    <class name="CellRendererProgress"
           c:symbol-prefix="cell_renderer_progress"
           c:type="GtkCellRendererProgress"
           parent="CellRenderer"
           glib:type-name="GtkCellRendererProgress"
           glib:get-type="gtk_cell_renderer_progress_get_type"
           glib:type-struct="CellRendererProgressClass">
      <implements name="CellSizeRequest"/>
      <implements name="Orientable"/>
      <constructor name="new"
                   c:identifier="gtk_cell_renderer_progress_new"
                   version="2.6">
        <doc xml:whitespace="preserve">Creates a new #GtkCellRendererProgress.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the new cell renderer</doc>
          <type name="CellRenderer" c:type="GtkCellRenderer*"/>
        </return-value>
      </constructor>
      <property name="inverted" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="pulse"
                version="2.12"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Setting this to a non-negative value causes the cell renderer to
enter "activity mode", where a block bounces back and forth to 
indicate that some progress is made, without specifying exactly how
much.
Each increment of the property causes the block to move by a little 
bit.
To indicate that the activity has not started yet, set the property
to zero. To indicate completion, set the property to %G_MAXINT.</doc>
        <type name="gint"/>
      </property>
      <property name="text"
                version="2.6"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The "text" property determines the label which will be drawn
over the progress bar. Setting this property to %NULL causes the default 
label to be displayed. Setting this property to an empty string causes 
no label to be displayed.</doc>
        <type name="utf8"/>
      </property>
      <property name="text-xalign"
                version="2.12"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The "text-xalign" property controls the horizontal alignment of the
text in the progress bar.  Valid values range from 0 (left) to 1
(right).  Reserved for RTL layouts.</doc>
        <type name="gfloat"/>
      </property>
      <property name="text-yalign"
                version="2.12"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The "text-yalign" property controls the vertical alignment of the
text in the progress bar.  Valid values range from 0 (top) to 1
(bottom).</doc>
        <type name="gfloat"/>
      </property>
      <property name="value"
                version="2.6"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The "value" property determines the percentage to which the
progress bar will be "filled in".</doc>
        <type name="gint"/>
      </property>
      <field name="parent_instance">
        <type name="CellRenderer" c:type="GtkCellRenderer"/>
      </field>
      <field name="priv">
        <type name="CellRendererProgressPrivate"
              c:type="GtkCellRendererProgressPrivate*"/>
      </field>
    </class>
    <record name="CellRendererProgressClass"
            c:type="GtkCellRendererProgressClass"
            glib:is-gtype-struct-for="CellRendererProgress">
      <field name="parent_class">
        <type name="CellRendererClass" c:type="GtkCellRendererClass"/>
      </field>
      <field name="_gtk_reserved1" introspectable="0">
        <callback name="_gtk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved2" introspectable="0">
        <callback name="_gtk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved3" introspectable="0">
        <callback name="_gtk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved4" introspectable="0">
        <callback name="_gtk_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="CellRendererProgressPrivate"
            c:type="GtkCellRendererProgressPrivate"
            disguised="1">
    </record>
    <class name="CellRendererSpin"
           c:symbol-prefix="cell_renderer_spin"
           c:type="GtkCellRendererSpin"
           parent="CellRendererText"
           glib:type-name="GtkCellRendererSpin"
           glib:get-type="gtk_cell_renderer_spin_get_type"
           glib:type-struct="CellRendererSpinClass">
      <implements name="CellSizeRequest"/>
      <constructor name="new"
                   c:identifier="gtk_cell_renderer_spin_new"
                   version="2.10">
        <doc xml:whitespace="preserve">Creates a new #GtkCellRendererSpin.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a new #GtkCellRendererSpin</doc>
          <type name="CellRenderer" c:type="GtkCellRenderer*"/>
        </return-value>
      </constructor>
      <property name="adjustment"
                version="2.10"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The adjustment that holds the value of the spinbutton. 
This must be non-%NULL for the cell renderer to be editable.</doc>
        <type name="Adjustment"/>
      </property>
      <property name="climb-rate"
                version="2.10"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The acceleration rate when you hold down a button.</doc>
        <type name="gdouble"/>
      </property>
      <property name="digits"
                version="2.10"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The number of decimal places to display.</doc>
        <type name="guint"/>
      </property>
      <field name="parent">
        <type name="CellRendererText" c:type="GtkCellRendererText"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="CellRendererSpinPrivate"
              c:type="GtkCellRendererSpinPrivate*"/>
      </field>
    </class>
    <record name="CellRendererSpinClass"
            c:type="GtkCellRendererSpinClass"
            glib:is-gtype-struct-for="CellRendererSpin">
      <field name="parent">
        <type name="CellRendererTextClass" c:type="GtkCellRendererTextClass"/>
      </field>
    </record>
    <record name="CellRendererSpinPrivate"
            c:type="GtkCellRendererSpinPrivate"
            disguised="1">
    </record>
    <class name="CellRendererSpinner"
           c:symbol-prefix="cell_renderer_spinner"
           c:type="GtkCellRendererSpinner"
           parent="CellRenderer"
           glib:type-name="GtkCellRendererSpinner"
           glib:get-type="gtk_cell_renderer_spinner_get_type"
           glib:type-struct="CellRendererSpinnerClass">
      <implements name="CellSizeRequest"/>
      <constructor name="new" c:identifier="gtk_cell_renderer_spinner_new">
        <return-value transfer-ownership="none">
          <type name="CellRenderer" c:type="GtkCellRenderer*"/>
        </return-value>
      </constructor>
      <property name="active" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="pulse"
                version="2.20"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Pulse of the spinner. Increment this value to draw the next frame of the
spinner animation. Usually, you would update this value in a timeout.
The #GtkSpinner widget draws one full cycle of the animation per second by default.
You can learn about the number of frames used by the theme
by looking at the #GtkSpinner:num-steps style property and the duration
of the cycle by looking at #GtkSpinner:cycle-duration.</doc>
        <type name="guint"/>
      </property>
      <property name="size"
                version="2.20"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The #GtkIconSize value that specifies the size of the rendered spinner.</doc>
        <type name="IconSize"/>
      </property>
      <field name="parent">
        <type name="CellRenderer" c:type="GtkCellRenderer"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="CellRendererSpinnerPrivate"
              c:type="GtkCellRendererSpinnerPrivate*"/>
      </field>
    </class>
    <record name="CellRendererSpinnerClass"
            c:type="GtkCellRendererSpinnerClass"
            glib:is-gtype-struct-for="CellRendererSpinner">
      <field name="parent_class">
        <type name="CellRendererClass" c:type="GtkCellRendererClass"/>
      </field>
      <field name="_gtk_reserved1" introspectable="0">
        <callback name="_gtk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved2" introspectable="0">
        <callback name="_gtk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved3" introspectable="0">
        <callback name="_gtk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved4" introspectable="0">
        <callback name="_gtk_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="CellRendererSpinnerPrivate"
            c:type="GtkCellRendererSpinnerPrivate"
            disguised="1">
    </record>
    <bitfield name="CellRendererState"
              glib:type-name="GtkCellRendererState"
              glib:get-type="gtk_cell_renderer_state_get_type"
              c:type="GtkCellRendererState">
      <member name="selected"
              value="1"
              c:identifier="GTK_CELL_RENDERER_SELECTED"
              glib:nick="selected"/>
      <member name="prelit"
              value="2"
              c:identifier="GTK_CELL_RENDERER_PRELIT"
              glib:nick="prelit"/>
      <member name="insensitive"
              value="4"
              c:identifier="GTK_CELL_RENDERER_INSENSITIVE"
              glib:nick="insensitive"/>
      <member name="sorted"
              value="8"
              c:identifier="GTK_CELL_RENDERER_SORTED"
              glib:nick="sorted"/>
      <member name="focused"
              value="16"
              c:identifier="GTK_CELL_RENDERER_FOCUSED"
              glib:nick="focused"/>
    </bitfield>
    <class name="CellRendererText"
           c:symbol-prefix="cell_renderer_text"
           c:type="GtkCellRendererText"
           parent="CellRenderer"
           glib:type-name="GtkCellRendererText"
           glib:get-type="gtk_cell_renderer_text_get_type"
           glib:type-struct="CellRendererTextClass">
      <implements name="CellSizeRequest"/>
      <constructor name="new" c:identifier="gtk_cell_renderer_text_new">
        <doc xml:whitespace="preserve">Creates a new #GtkCellRendererText. Adjust how text is drawn using
object properties. Object properties can be
set globally (with g_object_set()). Also, with #GtkTreeViewColumn,
you can bind a property to a value in a #GtkTreeModel. For example,
you can bind the "text" property on the cell renderer to a string
value in the model, thus rendering a different string in each row
of the #GtkTreeView</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the new cell renderer</doc>
          <type name="CellRenderer" c:type="GtkCellRenderer*"/>
        </return-value>
      </constructor>
      <method name="set_fixed_height_from_font"
              c:identifier="gtk_cell_renderer_text_set_fixed_height_from_font">
        <doc xml:whitespace="preserve">Sets the height of a renderer to explicitly be determined by the "font" and
"y_pad" property set on it.  Further changes in these properties do not
affect the height, so they must be accompanied by a subsequent call to this
function.  Using this function is unflexible, and should really only be used
if calculating the size of a cell is too slow (ie, a massive number of cells
displayed).  If @number_of_rows is -1, then the fixed height is unset, and
the height is determined by the properties again.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="number_of_rows" transfer-ownership="none">
            <doc xml:whitespace="preserve">Number of rows of text each cell renderer is allocated, or -1</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <property name="align-set" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="alignment"
                version="2.10"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Specifies how to align the lines of text with respect to each other. 
Note that this property describes how to align the lines of text in 
case there are several of them. The "xalign" property of #GtkCellRenderer, 
on the other hand, sets the horizontal alignment of the whole text.</doc>
        <type name="Pango.Alignment"/>
      </property>
      <property name="attributes" writable="1" transfer-ownership="none">
        <type name="Pango.AttrList"/>
      </property>
      <property name="background"
                readable="0"
                writable="1"
                transfer-ownership="none">
        <type name="utf8"/>
      </property>
      <property name="background-gdk" writable="1" transfer-ownership="none">
        <type name="Gdk.Color"/>
      </property>
      <property name="background-set" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="editable" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="editable-set" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="ellipsize"
                version="2.6"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Specifies the preferred place to ellipsize the string, if the cell renderer 
does not have enough room to display the entire string. Setting it to 
%PANGO_ELLIPSIZE_NONE turns off ellipsizing. See the wrap-width property
for another way of making the text fit into a given width.</doc>
        <type name="Pango.EllipsizeMode"/>
      </property>
      <property name="ellipsize-set" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="family" writable="1" transfer-ownership="none">
        <type name="utf8"/>
      </property>
      <property name="family-set" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="font" writable="1" transfer-ownership="none">
        <type name="utf8"/>
      </property>
      <property name="font-desc" writable="1" transfer-ownership="none">
        <type name="Pango.FontDescription"/>
      </property>
      <property name="foreground"
                readable="0"
                writable="1"
                transfer-ownership="none">
        <type name="utf8"/>
      </property>
      <property name="foreground-gdk" writable="1" transfer-ownership="none">
        <type name="Gdk.Color"/>
      </property>
      <property name="foreground-set" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="language" writable="1" transfer-ownership="none">
        <type name="utf8"/>
      </property>
      <property name="language-set" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="markup"
                readable="0"
                writable="1"
                transfer-ownership="none">
        <type name="utf8"/>
      </property>
      <property name="max-width-chars"
                version="3.0"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The desired maximum width of the cell, in characters. If this property 
is set to -1, the width will be calculated automatically.
For cell renderers that ellipsize or wrap text; this property
controls the maximum reported width of the cell. The
cell should not receive any greater allocation unless it is
set to expand in its #GtkCellLayout and all of the cell's siblings
have received their natural width.</doc>
        <type name="gint"/>
      </property>
      <property name="rise" writable="1" transfer-ownership="none">
        <type name="gint"/>
      </property>
      <property name="rise-set" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="scale" writable="1" transfer-ownership="none">
        <type name="gdouble"/>
      </property>
      <property name="scale-set" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="single-paragraph-mode"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="size" writable="1" transfer-ownership="none">
        <type name="gint"/>
      </property>
      <property name="size-points" writable="1" transfer-ownership="none">
        <type name="gdouble"/>
      </property>
      <property name="size-set" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="stretch" writable="1" transfer-ownership="none">
        <type name="Pango.Stretch"/>
      </property>
      <property name="stretch-set" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="strikethrough" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="strikethrough-set"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="style" writable="1" transfer-ownership="none">
        <type name="Pango.Style"/>
      </property>
      <property name="style-set" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="text" writable="1" transfer-ownership="none">
        <type name="utf8"/>
      </property>
      <property name="underline" writable="1" transfer-ownership="none">
        <type name="Pango.Underline"/>
      </property>
      <property name="underline-set" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="variant" writable="1" transfer-ownership="none">
        <type name="Pango.Variant"/>
      </property>
      <property name="variant-set" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="weight" writable="1" transfer-ownership="none">
        <type name="gint"/>
      </property>
      <property name="weight-set" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="width-chars"
                version="2.6"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The desired width of the cell, in characters. If this property is set to
-1, the width will be calculated automatically, otherwise the cell will
request either 3 characters or the property value, whichever is greater.</doc>
        <type name="gint"/>
      </property>
      <property name="wrap-mode"
                version="2.8"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Specifies how to break the string into multiple lines, if the cell 
renderer does not have enough room to display the entire string. 
This property has no effect unless the wrap-width property is set.</doc>
        <type name="Pango.WrapMode"/>
      </property>
      <property name="wrap-width"
                version="2.8"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Specifies the minimum width at which the text is wrapped. The wrap-mode property can 
be used to influence at what character positions the line breaks can be placed.
Setting wrap-width to -1 turns wrapping off.</doc>
        <type name="gint"/>
      </property>
      <field name="parent">
        <type name="CellRenderer" c:type="GtkCellRenderer"/>
      </field>
      <field name="priv">
        <type name="CellRendererTextPrivate"
              c:type="GtkCellRendererTextPrivate*"/>
      </field>
      <glib:signal name="edited">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="utf8"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="utf8"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="CellRendererTextClass"
            c:type="GtkCellRendererTextClass"
            glib:is-gtype-struct-for="CellRendererText">
      <field name="parent_class">
        <type name="CellRendererClass" c:type="GtkCellRendererClass"/>
      </field>
      <field name="edited">
        <callback name="edited">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="cell_renderer_text" transfer-ownership="none">
              <type name="CellRendererText" c:type="GtkCellRendererText*"/>
            </parameter>
            <parameter name="path" transfer-ownership="none">
              <type name="utf8" c:type="gchar*"/>
            </parameter>
            <parameter name="new_text" transfer-ownership="none">
              <type name="utf8" c:type="gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_gtk_reserved1" introspectable="0">
        <callback name="_gtk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved2" introspectable="0">
        <callback name="_gtk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved3" introspectable="0">
        <callback name="_gtk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved4" introspectable="0">
        <callback name="_gtk_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="CellRendererTextPrivate"
            c:type="GtkCellRendererTextPrivate"
            disguised="1">
    </record>
    <class name="CellRendererToggle"
           c:symbol-prefix="cell_renderer_toggle"
           c:type="GtkCellRendererToggle"
           parent="CellRenderer"
           glib:type-name="GtkCellRendererToggle"
           glib:get-type="gtk_cell_renderer_toggle_get_type"
           glib:type-struct="CellRendererToggleClass">
      <implements name="CellSizeRequest"/>
      <constructor name="new" c:identifier="gtk_cell_renderer_toggle_new">
        <doc xml:whitespace="preserve">Creates a new #GtkCellRendererToggle. Adjust rendering
parameters using object properties. Object properties can be set
globally (with g_object_set()). Also, with #GtkTreeViewColumn, you
can bind a property to a value in a #GtkTreeModel. For example, you
can bind the "active" property on the cell renderer to a boolean value
in the model, thus causing the check button to reflect the state of
the model.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the new cell renderer</doc>
          <type name="CellRenderer" c:type="GtkCellRenderer*"/>
        </return-value>
      </constructor>
      <method name="get_activatable"
              c:identifier="gtk_cell_renderer_toggle_get_activatable"
              version="2.18">
        <doc xml:whitespace="preserve">Returns whether the cell renderer is activatable. See
gtk_cell_renderer_toggle_set_activatable().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the cell renderer is activatable.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_active"
              c:identifier="gtk_cell_renderer_toggle_get_active">
        <doc xml:whitespace="preserve">Returns whether the cell renderer is active. See
gtk_cell_renderer_toggle_set_active().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the cell renderer is active.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_radio"
              c:identifier="gtk_cell_renderer_toggle_get_radio">
        <doc xml:whitespace="preserve">Returns whether we're rendering radio toggles rather than checkboxes.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if we're rendering radio toggles rather than checkboxes</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="set_activatable"
              c:identifier="gtk_cell_renderer_toggle_set_activatable"
              version="2.18">
        <doc xml:whitespace="preserve">Makes the cell renderer activatable.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="setting" transfer-ownership="none">
            <doc xml:whitespace="preserve">the value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_active"
              c:identifier="gtk_cell_renderer_toggle_set_active">
        <doc xml:whitespace="preserve">Activates or deactivates a cell renderer.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="setting" transfer-ownership="none">
            <doc xml:whitespace="preserve">the value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_radio"
              c:identifier="gtk_cell_renderer_toggle_set_radio">
        <doc xml:whitespace="preserve">If @radio is %TRUE, the cell renderer renders a radio toggle
(i.e. a toggle in a group of mutually-exclusive toggles).
If %FALSE, it renders a check toggle (a standalone boolean option).
This can be set globally for the cell renderer, or changed just
before rendering each cell in the model (for #GtkTreeView, you set
up a per-row setting using #GtkTreeViewColumn to associate model
columns with cell renderer properties).</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="radio" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE to make the toggle look like a radio button</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="activatable" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="active" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="inconsistent" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="indicator-size" writable="1" transfer-ownership="none">
        <type name="gint"/>
      </property>
      <property name="radio" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <field name="parent">
        <type name="CellRenderer" c:type="GtkCellRenderer"/>
      </field>
      <field name="priv">
        <type name="CellRendererTogglePrivate"
              c:type="GtkCellRendererTogglePrivate*"/>
      </field>
      <glib:signal name="toggled">
        <doc xml:whitespace="preserve">The ::toggled signal is emitted when the cell is toggled.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">string representation of #GtkTreePath describing the event location</doc>
            <type name="utf8"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="CellRendererToggleClass"
            c:type="GtkCellRendererToggleClass"
            glib:is-gtype-struct-for="CellRendererToggle">
      <field name="parent_class">
        <type name="CellRendererClass" c:type="GtkCellRendererClass"/>
      </field>
      <field name="toggled">
        <callback name="toggled">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="cell_renderer_toggle" transfer-ownership="none">
              <type name="CellRendererToggle" c:type="GtkCellRendererToggle*"/>
            </parameter>
            <parameter name="path" transfer-ownership="none">
              <type name="utf8" c:type="gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_gtk_reserved1" introspectable="0">
        <callback name="_gtk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved2" introspectable="0">
        <callback name="_gtk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved3" introspectable="0">
        <callback name="_gtk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved4" introspectable="0">
        <callback name="_gtk_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="CellRendererTogglePrivate"
            c:type="GtkCellRendererTogglePrivate"
            disguised="1">
    </record>
    <interface name="CellSizeRequest"
               c:symbol-prefix="cell_size_request"
               c:type="GtkCellSizeRequest"
               glib:type-name="GtkCellSizeRequest"
               glib:get-type="gtk_cell_size_request_get_type"
               glib:type-struct="CellSizeRequestIface">
      <prerequisite name="CellRenderer"/>
      <virtual-method name="get_height" invoker="get_height" version="3.0">
        <doc xml:whitespace="preserve">Retreives a renderer's natural size when rendered to @widget.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="widget" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GtkWidget this cell will be rendering to</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="minimum_size" transfer-ownership="none">
            <doc xml:whitespace="preserve">location to store the minimum size, or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="natural_size" transfer-ownership="none">
            <doc xml:whitespace="preserve">location to store the natural size, or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_height_for_width"
                      invoker="get_height_for_width"
                      version="3.0">
        <doc xml:whitespace="preserve">Retreives a cell renderers's minimum and natural height if it were rendered to</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="widget" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GtkWidget this cell will be rendering to</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:whitespace="preserve">the size which is available for allocation</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="minimum_height" transfer-ownership="none">
            <doc xml:whitespace="preserve">location for storing the minimum size, or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="natural_height" transfer-ownership="none">
            <doc xml:whitespace="preserve">location for storing the preferred size, or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_request_mode"
                      invoker="get_request_mode"
                      version="3.0">
        <doc xml:whitespace="preserve">Gets whether the cell renderer prefers a height-for-width layout
or a width-for-height layout.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The #GtkSizeRequestMode preferred by this renderer.</doc>
          <type name="SizeRequestMode" c:type="GtkSizeRequestMode"/>
        </return-value>
      </virtual-method>
      <virtual-method name="get_width" invoker="get_width" version="3.0">
        <doc xml:whitespace="preserve">Retreives a renderer's natural size when rendered to @widget.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="widget" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GtkWidget this cell will be rendering to</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="minimum_size" transfer-ownership="none">
            <doc xml:whitespace="preserve">location to store the minimum size, or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="natural_size" transfer-ownership="none">
            <doc xml:whitespace="preserve">location to store the natural size, or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_width_for_height"
                      invoker="get_width_for_height"
                      version="3.0">
        <doc xml:whitespace="preserve">Retreives a cell renderers's minimum and natural width if it were rendered to</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="widget" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GtkWidget this cell will be rendering to</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:whitespace="preserve">the size which is available for allocation</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="minimum_width" transfer-ownership="none">
            <doc xml:whitespace="preserve">location for storing the minimum size, or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="natural_width" transfer-ownership="none">
            <doc xml:whitespace="preserve">location for storing the preferred size, or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="get_height"
              c:identifier="gtk_cell_size_request_get_height"
              version="3.0">
        <doc xml:whitespace="preserve">Retreives a renderer's natural size when rendered to @widget.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="widget" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GtkWidget this cell will be rendering to</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="minimum_size" transfer-ownership="none">
            <doc xml:whitespace="preserve">location to store the minimum size, or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="natural_size" transfer-ownership="none">
            <doc xml:whitespace="preserve">location to store the natural size, or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_height_for_width"
              c:identifier="gtk_cell_size_request_get_height_for_width"
              version="3.0">
        <doc xml:whitespace="preserve">Retreives a cell renderers's minimum and natural height if it were rendered to</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="widget" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GtkWidget this cell will be rendering to</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:whitespace="preserve">the size which is available for allocation</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="minimum_height" transfer-ownership="none">
            <doc xml:whitespace="preserve">location for storing the minimum size, or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="natural_height" transfer-ownership="none">
            <doc xml:whitespace="preserve">location for storing the preferred size, or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_request_mode"
              c:identifier="gtk_cell_size_request_get_request_mode"
              version="3.0">
        <doc xml:whitespace="preserve">Gets whether the cell renderer prefers a height-for-width layout
or a width-for-height layout.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The #GtkSizeRequestMode preferred by this renderer.</doc>
          <type name="SizeRequestMode" c:type="GtkSizeRequestMode"/>
        </return-value>
      </method>
      <method name="get_size"
              c:identifier="gtk_cell_size_request_get_size"
              version="3.0">
        <doc xml:whitespace="preserve">Retrieves the minimum and natural size of a cell taking
into account the widget's preference for height-for-width management.
If request_natural is specified, the non-contextual natural value will
be used to make the contextual request; otherwise the minimum will be used.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="widget" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GtkWidget this cell will be rendering to</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="minimum_size"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">location for storing the minimum size, or %NULL</doc>
            <type name="Requisition" c:type="GtkRequisition*"/>
          </parameter>
          <parameter name="natural_size"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">location for storing the natural size, or %NULL</doc>
            <type name="Requisition" c:type="GtkRequisition*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_width"
              c:identifier="gtk_cell_size_request_get_width"
              version="3.0">
        <doc xml:whitespace="preserve">Retreives a renderer's natural size when rendered to @widget.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="widget" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GtkWidget this cell will be rendering to</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="minimum_size" transfer-ownership="none">
            <doc xml:whitespace="preserve">location to store the minimum size, or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="natural_size" transfer-ownership="none">
            <doc xml:whitespace="preserve">location to store the natural size, or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_width_for_height"
              c:identifier="gtk_cell_size_request_get_width_for_height"
              version="3.0">
        <doc xml:whitespace="preserve">Retreives a cell renderers's minimum and natural width if it were rendered to</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="widget" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GtkWidget this cell will be rendering to</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:whitespace="preserve">the size which is available for allocation</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="minimum_width" transfer-ownership="none">
            <doc xml:whitespace="preserve">location for storing the minimum size, or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="natural_width" transfer-ownership="none">
            <doc xml:whitespace="preserve">location for storing the preferred size, or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
    </interface>
    <record name="CellSizeRequestIface"
            c:type="GtkCellSizeRequestIface"
            glib:is-gtype-struct-for="CellSizeRequest">
      <field name="g_iface">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="get_request_mode">
        <callback name="get_request_mode">
          <return-value transfer-ownership="none">
            <doc xml:whitespace="preserve">The #GtkSizeRequestMode preferred by this renderer.</doc>
            <type name="SizeRequestMode" c:type="GtkSizeRequestMode"/>
          </return-value>
          <parameters>
            <parameter name="cell" transfer-ownership="none">
              <type name="CellSizeRequest" c:type="GtkCellSizeRequest*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_width">
        <callback name="get_width">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="cell" transfer-ownership="none">
              <type name="CellSizeRequest" c:type="GtkCellSizeRequest*"/>
            </parameter>
            <parameter name="widget" transfer-ownership="none">
              <doc xml:whitespace="preserve">the #GtkWidget this cell will be rendering to</doc>
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
            <parameter name="minimum_size" transfer-ownership="none">
              <doc xml:whitespace="preserve">location to store the minimum size, or %NULL</doc>
              <type name="gint" c:type="gint*"/>
            </parameter>
            <parameter name="natural_size" transfer-ownership="none">
              <doc xml:whitespace="preserve">location to store the natural size, or %NULL</doc>
              <type name="gint" c:type="gint*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_height_for_width">
        <callback name="get_height_for_width">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="cell" transfer-ownership="none">
              <type name="CellSizeRequest" c:type="GtkCellSizeRequest*"/>
            </parameter>
            <parameter name="widget" transfer-ownership="none">
              <doc xml:whitespace="preserve">the #GtkWidget this cell will be rendering to</doc>
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
            <parameter name="width" transfer-ownership="none">
              <doc xml:whitespace="preserve">the size which is available for allocation</doc>
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="minimum_height" transfer-ownership="none">
              <doc xml:whitespace="preserve">location for storing the minimum size, or %NULL</doc>
              <type name="gint" c:type="gint*"/>
            </parameter>
            <parameter name="natural_height" transfer-ownership="none">
              <doc xml:whitespace="preserve">location for storing the preferred size, or %NULL</doc>
              <type name="gint" c:type="gint*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_height">
        <callback name="get_height">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="cell" transfer-ownership="none">
              <type name="CellSizeRequest" c:type="GtkCellSizeRequest*"/>
            </parameter>
            <parameter name="widget" transfer-ownership="none">
              <doc xml:whitespace="preserve">the #GtkWidget this cell will be rendering to</doc>
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
            <parameter name="minimum_size" transfer-ownership="none">
              <doc xml:whitespace="preserve">location to store the minimum size, or %NULL</doc>
              <type name="gint" c:type="gint*"/>
            </parameter>
            <parameter name="natural_size" transfer-ownership="none">
              <doc xml:whitespace="preserve">location to store the natural size, or %NULL</doc>
              <type name="gint" c:type="gint*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_width_for_height">
        <callback name="get_width_for_height">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="cell" transfer-ownership="none">
              <type name="CellSizeRequest" c:type="GtkCellSizeRequest*"/>
            </parameter>
            <parameter name="widget" transfer-ownership="none">
              <doc xml:whitespace="preserve">the #GtkWidget this cell will be rendering to</doc>
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
            <parameter name="height" transfer-ownership="none">
              <doc xml:whitespace="preserve">the size which is available for allocation</doc>
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="minimum_width" transfer-ownership="none">
              <doc xml:whitespace="preserve">location for storing the minimum size, or %NULL</doc>
              <type name="gint" c:type="gint*"/>
            </parameter>
            <parameter name="natural_width" transfer-ownership="none">
              <doc xml:whitespace="preserve">location for storing the preferred size, or %NULL</doc>
              <type name="gint" c:type="gint*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="CellView"
           c:symbol-prefix="cell_view"
           c:type="GtkCellView"
           parent="Widget"
           glib:type-name="GtkCellView"
           glib:get-type="gtk_cell_view_get_type"
           glib:type-struct="CellViewClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Buildable"/>
      <implements name="CellLayout"/>
      <implements name="SizeRequest"/>
      <constructor name="new" c:identifier="gtk_cell_view_new" version="2.6">
        <doc xml:whitespace="preserve">Creates a new #GtkCellView widget.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">A newly created #GtkCellView widget.</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <constructor name="new_with_markup"
                   c:identifier="gtk_cell_view_new_with_markup"
                   version="2.6">
        <doc xml:whitespace="preserve">Creates a new #GtkCellView widget, adds a #GtkCellRendererText 
to it, and makes it show @markup. The text can be
marked up with the &lt;link linkend="PangoMarkupFormat"&gt;Pango text 
markup language&lt;/link&gt;.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">A newly created #GtkCellView widget.</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="markup" transfer-ownership="none">
            <doc xml:whitespace="preserve">the text to display in the cell view</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_with_pixbuf"
                   c:identifier="gtk_cell_view_new_with_pixbuf"
                   version="2.6">
        <doc xml:whitespace="preserve">Creates a new #GtkCellView widget, adds a #GtkCellRendererPixbuf 
to it, and makes its show @pixbuf.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">A newly created #GtkCellView widget.</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="pixbuf" transfer-ownership="none">
            <doc xml:whitespace="preserve">the image to display in the cell view</doc>
            <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_with_text"
                   c:identifier="gtk_cell_view_new_with_text"
                   version="2.6">
        <doc xml:whitespace="preserve">Creates a new #GtkCellView widget, adds a #GtkCellRendererText 
to it, and makes its show @text.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">A newly created #GtkCellView widget.</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="text" transfer-ownership="none">
            <doc xml:whitespace="preserve">the text to display in the cell view</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_desired_height_for_width_of_row"
              c:identifier="gtk_cell_view_get_desired_height_for_width_of_row"
              version="3.0">
        <doc xml:whitespace="preserve">Sets @minimum_size and @natural_size to the height desired by @cell_view 
if it were allocated a width of @avail_size to display the model row 
pointed to by @path.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="path" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkTreePath</doc>
            <type name="TreePath" c:type="GtkTreePath*"/>
          </parameter>
          <parameter name="avail_size" transfer-ownership="none">
            <doc xml:whitespace="preserve">available width</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="minimum_size" transfer-ownership="none">
            <doc xml:whitespace="preserve">location to store the minimum height</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="natural_size" transfer-ownership="none">
            <doc xml:whitespace="preserve">location to store the natural height</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_desired_width_of_row"
              c:identifier="gtk_cell_view_get_desired_width_of_row"
              version="3.0">
        <doc xml:whitespace="preserve">Sets @minimum_size and @natural_size to the width desired by @cell_view 
to display the model row pointed to by @path.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="path" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkTreePath</doc>
            <type name="TreePath" c:type="GtkTreePath*"/>
          </parameter>
          <parameter name="minimum_size" transfer-ownership="none">
            <doc xml:whitespace="preserve">location to store the minimum size</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="natural_size" transfer-ownership="none">
            <doc xml:whitespace="preserve">location to store the natural size</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_displayed_row"
              c:identifier="gtk_cell_view_get_displayed_row"
              version="2.6">
        <doc xml:whitespace="preserve">Returns a #GtkTreePath referring to the currently 
displayed row. If no row is currently displayed, 
%NULL is returned.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the currently displayed row or %NULL</doc>
          <type name="TreePath" c:type="GtkTreePath*"/>
        </return-value>
      </method>
      <method name="get_model"
              c:identifier="gtk_cell_view_get_model"
              version="2.16">
        <doc xml:whitespace="preserve">Returns the model for @cell_view. If no model is used %NULL is
returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GtkTreeModel used or %NULL</doc>
          <type name="TreeModel" c:type="GtkTreeModel*"/>
        </return-value>
      </method>
      <method name="get_size_of_row"
              c:identifier="gtk_cell_view_get_size_of_row"
              version="2.6"
              deprecated="Use gtk_cell_view_get_desired_width_of_row() and"
              deprecated-version="3.0">
        <doc xml:whitespace="preserve">Sets @requisition to the size needed by @cell_view to display 
the model row pointed to by @path.
gtk_cell_view_get_desired_height_for_width_of_row() instead.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="path" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkTreePath</doc>
            <type name="TreePath" c:type="GtkTreePath*"/>
          </parameter>
          <parameter name="requisition" transfer-ownership="none">
            <doc xml:whitespace="preserve">return location for the size</doc>
            <type name="Requisition" c:type="GtkRequisition*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_background_color"
              c:identifier="gtk_cell_view_set_background_color"
              version="2.6">
        <doc xml:whitespace="preserve">Sets the background color of @view.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="color" transfer-ownership="none">
            <doc xml:whitespace="preserve">the new background color</doc>
            <type name="Gdk.Color" c:type="GdkColor*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_displayed_row"
              c:identifier="gtk_cell_view_set_displayed_row"
              version="2.6">
        <doc xml:whitespace="preserve">Sets the row of the model that is currently displayed
by the #GtkCellView. If the path is unset, then the
contents of the cellview "stick" at their last value;
this is not normally a desired result, but may be
a needed intermediate state if say, the model for
the #GtkCellView becomes temporarily empty.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="path" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">a #GtkTreePath or %NULL to unset.</doc>
            <type name="TreePath" c:type="GtkTreePath*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_model"
              c:identifier="gtk_cell_view_set_model"
              version="2.6">
        <doc xml:whitespace="preserve">Sets the model for @cell_view.  If @cell_view already has a model
set, it will remove it before setting the new model.  If @model is
%NULL, then it will unset the old model.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="model" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">a #GtkTreeModel</doc>
            <type name="TreeModel" c:type="GtkTreeModel*"/>
          </parameter>
        </parameters>
      </method>
      <property name="background"
                readable="0"
                writable="1"
                transfer-ownership="none">
        <type name="utf8"/>
      </property>
      <property name="background-gdk" writable="1" transfer-ownership="none">
        <type name="Gdk.Color"/>
      </property>
      <property name="background-set" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="model" writable="1" transfer-ownership="none">
        <type name="TreeModel"/>
      </property>
      <field name="parent_instance">
        <type name="Widget" c:type="GtkWidget"/>
      </field>
      <field name="priv">
        <type name="CellViewPrivate" c:type="GtkCellViewPrivate*"/>
      </field>
    </class>
    <record name="CellViewClass"
            c:type="GtkCellViewClass"
            glib:is-gtype-struct-for="CellView">
      <field name="parent_class">
        <type name="WidgetClass" c:type="GtkWidgetClass"/>
      </field>
    </record>
    <record name="CellViewPrivate" c:type="GtkCellViewPrivate" disguised="1">
    </record>
    <class name="CheckButton"
           c:symbol-prefix="check_button"
           c:type="GtkCheckButton"
           parent="ToggleButton"
           glib:type-name="GtkCheckButton"
           glib:get-type="gtk_check_button_get_type"
           glib:type-struct="CheckButtonClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Activatable"/>
      <implements name="Buildable"/>
      <implements name="SizeRequest"/>
      <constructor name="new" c:identifier="gtk_check_button_new">
        <return-value transfer-ownership="none">
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <constructor name="new_with_label"
                   c:identifier="gtk_check_button_new_with_label">
        <return-value transfer-ownership="none">
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="label" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_with_mnemonic"
                   c:identifier="gtk_check_button_new_with_mnemonic">
        <doc xml:whitespace="preserve">Creates a new #GtkCheckButton containing a label. The label
will be created using gtk_label_new_with_mnemonic(), so underscores
in @label indicate the mnemonic for the check button.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a new #GtkCheckButton</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="label" transfer-ownership="none">
            <doc xml:whitespace="preserve">The text of the button, with an underscore in front of the mnemonic character</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <virtual-method name="draw_indicator">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="area" transfer-ownership="none">
            <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <field name="toggle_button">
        <type name="ToggleButton" c:type="GtkToggleButton"/>
      </field>
    </class>
    <record name="CheckButtonClass"
            c:type="GtkCheckButtonClass"
            glib:is-gtype-struct-for="CheckButton">
      <field name="parent_class">
        <type name="ToggleButtonClass" c:type="GtkToggleButtonClass"/>
      </field>
      <field name="draw_indicator">
        <callback name="draw_indicator">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="check_button" transfer-ownership="none">
              <type name="CheckButton" c:type="GtkCheckButton*"/>
            </parameter>
            <parameter name="area" transfer-ownership="none">
              <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_gtk_reserved1" introspectable="0">
        <callback name="_gtk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved2" introspectable="0">
        <callback name="_gtk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved3" introspectable="0">
        <callback name="_gtk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved4" introspectable="0">
        <callback name="_gtk_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <class name="CheckMenuItem"
           c:symbol-prefix="check_menu_item"
           c:type="GtkCheckMenuItem"
           parent="MenuItem"
           glib:type-name="GtkCheckMenuItem"
           glib:get-type="gtk_check_menu_item_get_type"
           glib:type-struct="CheckMenuItemClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Activatable"/>
      <implements name="Buildable"/>
      <implements name="SizeRequest"/>
      <constructor name="new" c:identifier="gtk_check_menu_item_new">
        <return-value transfer-ownership="none">
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <constructor name="new_with_label"
                   c:identifier="gtk_check_menu_item_new_with_label">
        <return-value transfer-ownership="none">
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="label" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_with_mnemonic"
                   c:identifier="gtk_check_menu_item_new_with_mnemonic">
        <doc xml:whitespace="preserve">Creates a new #GtkCheckMenuItem containing a label. The label
will be created using gtk_label_new_with_mnemonic(), so underscores
in @label indicate the mnemonic for the menu item.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a new #GtkCheckMenuItem</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="label" transfer-ownership="none">
            <doc xml:whitespace="preserve">The text of the button, with an underscore in front of the mnemonic character</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <virtual-method name="draw_indicator">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="area" transfer-ownership="none">
            <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="get_active" c:identifier="gtk_check_menu_item_get_active">
        <doc xml:whitespace="preserve">Returns whether the check menu item is active. See
gtk_check_menu_item_set_active ().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the menu item is checked.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_draw_as_radio"
              c:identifier="gtk_check_menu_item_get_draw_as_radio"
              version="2.4">
        <doc xml:whitespace="preserve">Returns whether @check_menu_item looks like a #GtkRadioMenuItem</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">Whether @check_menu_item looks like a #GtkRadioMenuItem</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_inconsistent"
              c:identifier="gtk_check_menu_item_get_inconsistent">
        <doc xml:whitespace="preserve">Retrieves the value set by gtk_check_menu_item_set_inconsistent().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if inconsistent</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="set_active" c:identifier="gtk_check_menu_item_set_active">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="is_active" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_draw_as_radio"
              c:identifier="gtk_check_menu_item_set_draw_as_radio"
              version="2.4">
        <doc xml:whitespace="preserve">Sets whether @check_menu_item is drawn like a #GtkRadioMenuItem</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="draw_as_radio" transfer-ownership="none">
            <doc xml:whitespace="preserve">whether @check_menu_item is drawn like a #GtkRadioMenuItem</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_inconsistent"
              c:identifier="gtk_check_menu_item_set_inconsistent">
        <doc xml:whitespace="preserve">If the user has selected a range of elements (such as some text or
spreadsheet cells) that are affected by a boolean setting, and the
current values in that range are inconsistent, you may want to
display the check in an "in between" state. This function turns on
"in between" display.  Normally you would turn off the inconsistent
state again if the user explicitly selects a setting. This has to be
done manually, gtk_check_menu_item_set_inconsistent() only affects
visual appearance, it doesn't affect the semantics of the widget.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="setting" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE to display an "inconsistent" third state check</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="toggled" c:identifier="gtk_check_menu_item_toggled">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <property name="active" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="draw-as-radio" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="inconsistent" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <field name="menu_item">
        <type name="MenuItem" c:type="GtkMenuItem"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="CheckMenuItemPrivate" c:type="GtkCheckMenuItemPrivate*"/>
      </field>
      <glib:signal name="toggled">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="CheckMenuItemClass"
            c:type="GtkCheckMenuItemClass"
            glib:is-gtype-struct-for="CheckMenuItem">
      <field name="parent_class">
        <type name="MenuItemClass" c:type="GtkMenuItemClass"/>
      </field>
      <field name="toggled">
        <callback name="toggled">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="check_menu_item" transfer-ownership="none">
              <type name="CheckMenuItem" c:type="GtkCheckMenuItem*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="draw_indicator">
        <callback name="draw_indicator">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="check_menu_item" transfer-ownership="none">
              <type name="CheckMenuItem" c:type="GtkCheckMenuItem*"/>
            </parameter>
            <parameter name="area" transfer-ownership="none">
              <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_gtk_reserved1" introspectable="0">
        <callback name="_gtk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved2" introspectable="0">
        <callback name="_gtk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved3" introspectable="0">
        <callback name="_gtk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved4" introspectable="0">
        <callback name="_gtk_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="CheckMenuItemPrivate"
            c:type="GtkCheckMenuItemPrivate"
            disguised="1">
    </record>
    <class name="Clipboard"
           c:symbol-prefix="clipboard"
           c:type="GtkClipboard"
           parent="GObject.Object"
           glib:type-name="GtkClipboard"
           glib:get-type="gtk_clipboard_get_type">
      <function name="get" c:identifier="gtk_clipboard_get">
        <doc xml:whitespace="preserve">Returns the clipboard object for the given selection.
See gtk_clipboard_get_for_display() for complete details.
already exists, a new one will be created. Once a clipboard
object has been created, it is persistent and, since it is
owned by GTK+, must not be freed or unreffed.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the appropriate clipboard object. If no clipboard</doc>
          <type name="Clipboard" c:type="GtkClipboard*"/>
        </return-value>
        <parameters>
          <parameter name="selection" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GdkAtom which identifies the clipboard to use</doc>
            <type name="Gdk.Atom" c:type="GdkAtom"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_for_display"
                c:identifier="gtk_clipboard_get_for_display"
                version="2.2">
        <doc xml:whitespace="preserve">Returns the clipboard object for the given selection.
Cut/copy/paste menu items and keyboard shortcuts should use
the default clipboard, returned by passing %GDK_SELECTION_CLIPBOARD for @selection.
(%GDK_NONE is supported as a synonym for GDK_SELECTION_CLIPBOARD
for backwards compatibility reasons.)
The currently-selected object or text should be provided on the clipboard
identified by #GDK_SELECTION_PRIMARY. Cut/copy/paste menu items
conceptually copy the contents of the #GDK_SELECTION_PRIMARY clipboard
to the default clipboard, i.e. they copy the selection to what the
user sees as the clipboard.
(Passing #GDK_NONE is the same as using &lt;literal&gt;gdk_atom_intern
("CLIPBOARD", FALSE)&lt;/literal&gt;. See &lt;ulink
url="http://www.freedesktop.org/Standards/clipboards-spec"&gt;
http://www.freedesktop.org/Standards/clipboards-spec&lt;/ulink&gt;
for a detailed discussion of the "CLIPBOARD" vs. "PRIMARY"
selections under the X window system. On Win32 the
#GDK_SELECTION_PRIMARY clipboard is essentially ignored.)
It's possible to have arbitrary named clipboards; if you do invent
new clipboards, you should prefix the selection name with an
underscore (because the ICCCM requires that nonstandard atoms are
underscore-prefixed), and namespace it as well. For example,
if your application called "Foo" has a special-purpose
clipboard, you might call it "_FOO_SPECIAL_CLIPBOARD".
clipboard already exists, a new one will
be created. Once a clipboard object has
been created, it is persistent and, since
it is owned by GTK+, must not be freed or
unrefd.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the appropriate clipboard object. If no</doc>
          <type name="Clipboard" c:type="GtkClipboard*"/>
        </return-value>
        <parameters>
          <parameter name="display" transfer-ownership="none">
            <doc xml:whitespace="preserve">the display for which the clipboard is to be retrieved or created</doc>
            <type name="Gdk.Display" c:type="GdkDisplay*"/>
          </parameter>
          <parameter name="selection" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GdkAtom which identifies the clipboard to use.</doc>
            <type name="Gdk.Atom" c:type="GdkAtom"/>
          </parameter>
        </parameters>
      </function>
      <method name="clear" c:identifier="gtk_clipboard_clear">
        <doc xml:whitespace="preserve">Clears the contents of the clipboard. Generally this should only
be called between the time you call gtk_clipboard_set_with_owner()
or gtk_clipboard_set_with_data(),
and when the @clear_func you supplied is called. Otherwise, the
clipboard may be owned by someone else.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="get_display"
              c:identifier="gtk_clipboard_get_display"
              version="2.2">
        <doc xml:whitespace="preserve">Gets the #GdkDisplay associated with @clipboard</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the #GdkDisplay associated with @clipboard</doc>
          <type name="Gdk.Display" c:type="GdkDisplay*"/>
        </return-value>
      </method>
      <method name="get_owner" c:identifier="gtk_clipboard_get_owner">
        <doc xml:whitespace="preserve">If the clipboard contents callbacks were set with
gtk_clipboard_set_with_owner(), and the gtk_clipboard_set_with_data() or
gtk_clipboard_clear() has not subsequently called, returns the owner set
by gtk_clipboard_set_with_owner().
otherwise %NULL.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the owner of the clipboard, if any;</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </return-value>
      </method>
      <method name="request_contents"
              c:identifier="gtk_clipboard_request_contents">
        <doc xml:whitespace="preserve">Requests the contents of clipboard as the given target.
When the results of the result are later received the supplied callback
will be called.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="target" transfer-ownership="none">
            <doc xml:whitespace="preserve">an atom representing the form into which the clipboard owner should convert the selection.</doc>
            <type name="Gdk.Atom" c:type="GdkAtom"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="async"
                     closure="2">
            <doc xml:whitespace="preserve">A function to call when the results are received (or the retrieval fails). If the retrieval fails the length field of</doc>
            <type name="ClipboardReceivedFunc"
                  c:type="GtkClipboardReceivedFunc"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:whitespace="preserve">user data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="request_image"
              c:identifier="gtk_clipboard_request_image"
              version="2.6">
        <doc xml:whitespace="preserve">Requests the contents of the clipboard as image. When the image is
later received, it will be converted to a #GdkPixbuf, and
The @pixbuf parameter to @callback will contain the resulting
#GdkPixbuf if the request succeeded, or %NULL if it failed. This
could happen for various reasons, in particular if the clipboard
was empty or if the contents of the clipboard could not be
converted into an image.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="async"
                     closure="1">
            <doc xml:whitespace="preserve">a function to call when the image is received, or the retrieval fails. (It will always be called one way or the other.)</doc>
            <type name="ClipboardImageReceivedFunc"
                  c:type="GtkClipboardImageReceivedFunc"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:whitespace="preserve">user data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="request_rich_text"
              c:identifier="gtk_clipboard_request_rich_text"
              version="2.10">
        <doc xml:whitespace="preserve">Requests the contents of the clipboard as rich text. When the rich
text is later received, @callback will be called.
The @text parameter to @callback will contain the resulting rich
text if the request succeeded, or %NULL if it failed. The @length
parameter will contain @text's length. This function can fail for
various reasons, in particular if the clipboard was empty or if the
contents of the clipboard could not be converted into rich text form.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="buffer" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkTextBuffer</doc>
            <type name="TextBuffer" c:type="GtkTextBuffer*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="async"
                     closure="2">
            <doc xml:whitespace="preserve">a function to call when the text is received, or the retrieval fails. (It will always be called one way or the other.)</doc>
            <type name="ClipboardRichTextReceivedFunc"
                  c:type="GtkClipboardRichTextReceivedFunc"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:whitespace="preserve">user data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="request_targets"
              c:identifier="gtk_clipboard_request_targets"
              version="2.4">
        <doc xml:whitespace="preserve">Requests the contents of the clipboard as list of supported targets.
When the list is later received, @callback will be called.
The @targets parameter to @callback will contain the resulting targets if
the request succeeded, or %NULL if it failed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="async"
                     closure="1">
            <doc xml:whitespace="preserve">a function to call when the targets are received, or the retrieval fails. (It will always be called one way or the other.)</doc>
            <type name="ClipboardTargetsReceivedFunc"
                  c:type="GtkClipboardTargetsReceivedFunc"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:whitespace="preserve">user data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="request_text" c:identifier="gtk_clipboard_request_text">
        <doc xml:whitespace="preserve">Requests the contents of the clipboard as text. When the text is
later received, it will be converted to UTF-8 if necessary, and
The @text parameter to @callback will contain the resulting text if
the request succeeded, or %NULL if it failed. This could happen for
various reasons, in particular if the clipboard was empty or if the
contents of the clipboard could not be converted into text form.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="async"
                     closure="1">
            <doc xml:whitespace="preserve">a function to call when the text is received, or the retrieval fails. (It will always be called one way or the other.)</doc>
            <type name="ClipboardTextReceivedFunc"
                  c:type="GtkClipboardTextReceivedFunc"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:whitespace="preserve">user data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="request_uris"
              c:identifier="gtk_clipboard_request_uris"
              version="2.14">
        <doc xml:whitespace="preserve">Requests the contents of the clipboard as URIs. When the URIs are
later received @callback will be called.
The @uris parameter to @callback will contain the resulting array of
URIs if the request succeeded, or %NULL if it failed. This could happen
for various reasons, in particular if the clipboard was empty or if the
contents of the clipboard could not be converted into URI form.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="async"
                     closure="1">
            <doc xml:whitespace="preserve">a function to call when the URIs are received, or the retrieval fails. (It will always be called one way or the other.)</doc>
            <type name="ClipboardURIReceivedFunc"
                  c:type="GtkClipboardURIReceivedFunc"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:whitespace="preserve">user data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_can_store"
              c:identifier="gtk_clipboard_set_can_store"
              version="2.6">
        <doc xml:whitespace="preserve">Hints that the clipboard data should be stored somewhere when the
application exits or when gtk_clipboard_store () is called.
This value is reset when the clipboard owner changes.
Where the clipboard data is stored is platform dependent,
see gdk_display_store_clipboard () for more information.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="targets" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">array containing information about which forms should be stored or %NULL to indicate that all forms should be stored.</doc>
            <type name="TargetEntry" c:type="GtkTargetEntry*"/>
          </parameter>
          <parameter name="n_targets" transfer-ownership="none">
            <doc xml:whitespace="preserve">number of elements in @targets</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_image"
              c:identifier="gtk_clipboard_set_image"
              version="2.6">
        <doc xml:whitespace="preserve">Sets the contents of the clipboard to the given #GdkPixbuf. 
GTK+ will take responsibility for responding for requests 
for the image, and for converting the image into the 
requested format.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="pixbuf" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GdkPixbuf</doc>
            <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_text" c:identifier="gtk_clipboard_set_text">
        <doc xml:whitespace="preserve">Sets the contents of the clipboard to the given UTF-8 string. GTK+ will
make a copy of the text and take responsibility for responding
for requests for the text, and for converting the text into
the requested format.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="text" transfer-ownership="none">
            <doc xml:whitespace="preserve">a UTF-8 string.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <doc xml:whitespace="preserve">length of @text, in bytes, or -1, in which case the length will be determined with &lt;function&gt;strlen()&lt;/function&gt;.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_with_data" c:identifier="gtk_clipboard_set_with_data">
        <doc xml:whitespace="preserve">Virtually sets the contents of the specified clipboard by providing
a list of supported formats for the clipboard data and a function
to call to get the actual data when it is requested.
If setting the clipboard data failed the provided callback
functions will be ignored.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if setting the clipboard data succeeded.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="targets" transfer-ownership="none">
            <doc xml:whitespace="preserve">array containing information about the available forms for the clipboard data</doc>
            <type name="TargetEntry" c:type="GtkTargetEntry*"/>
          </parameter>
          <parameter name="n_targets" transfer-ownership="none">
            <doc xml:whitespace="preserve">number of elements in @targets</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="get_func" transfer-ownership="none" scope="async">
            <doc xml:whitespace="preserve">function to call to get the actual clipboard data</doc>
            <type name="ClipboardGetFunc" c:type="GtkClipboardGetFunc"/>
          </parameter>
          <parameter name="clear_func"
                     transfer-ownership="none"
                     scope="async"
                     closure="4">
            <doc xml:whitespace="preserve">when the clipboard contents are set again, this function will be called, and @get_func will not be subsequently called.</doc>
            <type name="ClipboardClearFunc" c:type="GtkClipboardClearFunc"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:whitespace="preserve">user data to pass to @get_func and @clear_func.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_with_owner"
              c:identifier="gtk_clipboard_set_with_owner">
        <doc xml:whitespace="preserve">Virtually sets the contents of the specified clipboard by providing
a list of supported formats for the clipboard data and a function
to call to get the actual data when it is requested.
The difference between this function and gtk_clipboard_set_with_data()
is that instead of an generic @user_data pointer, a #GObject is passed
in.
If setting the clipboard data failed the provided callback
functions will be ignored.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if setting the clipboard data succeeded.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="targets" transfer-ownership="none">
            <doc xml:whitespace="preserve">array containing information about the available forms for the clipboard data</doc>
            <type name="TargetEntry" c:type="GtkTargetEntry*"/>
          </parameter>
          <parameter name="n_targets" transfer-ownership="none">
            <doc xml:whitespace="preserve">number of elements in @targets</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="get_func" transfer-ownership="none" scope="async">
            <doc xml:whitespace="preserve">function to call to get the actual clipboard data</doc>
            <type name="ClipboardGetFunc" c:type="GtkClipboardGetFunc"/>
          </parameter>
          <parameter name="clear_func" transfer-ownership="none" scope="async">
            <doc xml:whitespace="preserve">when the clipboard contents are set again, this function will be called, and @get_func will not be subsequently called</doc>
            <type name="ClipboardClearFunc" c:type="GtkClipboardClearFunc"/>
          </parameter>
          <parameter name="owner" transfer-ownership="none">
            <doc xml:whitespace="preserve">an object that "owns" the data. This object will be passed to the callbacks when called</doc>
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
        </parameters>
      </method>
      <method name="store" c:identifier="gtk_clipboard_store" version="2.6">
        <doc xml:whitespace="preserve">Stores the current clipboard data somewhere so that it will stay
around after the application has quit.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="wait_for_contents"
              c:identifier="gtk_clipboard_wait_for_contents">
        <doc xml:whitespace="preserve">Requests the contents of the clipboard using the given target.
This function waits for the data to be received using the main 
loop, so events, timeouts, etc, may be dispatched during the wait.
if retrieving the given target failed. If non-%NULL,
this value must be freed with gtk_selection_data_free() 
when you are finished with it.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a newly-allocated #GtkSelectionData object or %NULL</doc>
          <type name="SelectionData" c:type="GtkSelectionData*"/>
        </return-value>
        <parameters>
          <parameter name="target" transfer-ownership="none">
            <doc xml:whitespace="preserve">an atom representing the form into which the clipboard owner should convert the selection.</doc>
            <type name="Gdk.Atom" c:type="GdkAtom"/>
          </parameter>
        </parameters>
      </method>
      <method name="wait_for_image"
              c:identifier="gtk_clipboard_wait_for_image"
              version="2.6">
        <doc xml:whitespace="preserve">Requests the contents of the clipboard as image and converts
the result to a #GdkPixbuf. This function waits for
the data to be received using the main loop, so events,
timeouts, etc, may be dispatched during the wait.
object which must be disposed with g_object_unref(), or
%NULL if retrieving the selection data failed. (This could
happen for various reasons, in particular if the clipboard
was empty or if the contents of the clipboard could not be
converted into an image.)</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a newly-allocated #GdkPixbuf</doc>
          <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
      </method>
      <method name="wait_for_rich_text"
              c:identifier="gtk_clipboard_wait_for_rich_text"
              version="2.10">
        <doc xml:whitespace="preserve">Requests the contents of the clipboard as rich text.  This function
waits for the data to be received using the main loop, so events,
timeouts, etc, may be dispatched during the wait.
be freed with g_free(), or %NULL if retrieving
the selection data failed. (This could happen
for various reasons, in particular if the
clipboard was empty or if the contents of the
clipboard could not be converted into text form.)</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a newly-allocated binary block of data which must</doc>
          <type name="guint8" c:type="guint8*"/>
        </return-value>
        <parameters>
          <parameter name="buffer" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkTextBuffer</doc>
            <type name="TextBuffer" c:type="GtkTextBuffer*"/>
          </parameter>
          <parameter name="format" transfer-ownership="none">
            <doc xml:whitespace="preserve">return location for the format of the returned data</doc>
            <type name="Gdk.Atom" c:type="GdkAtom*"/>
          </parameter>
          <parameter name="length" transfer-ownership="none">
            <doc xml:whitespace="preserve">return location for the length of the returned data</doc>
            <type name="gulong" c:type="gsize*"/>
          </parameter>
        </parameters>
      </method>
      <method name="wait_for_targets"
              c:identifier="gtk_clipboard_wait_for_targets">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="targets" transfer-ownership="none">
            <type name="Gdk.Atom" c:type="GdkAtom**"/>
          </parameter>
          <parameter name="n_targets" transfer-ownership="none">
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="wait_for_text" c:identifier="gtk_clipboard_wait_for_text">
        <doc xml:whitespace="preserve">Requests the contents of the clipboard as text and converts
the result to UTF-8 if necessary. This function waits for
the data to be received using the main loop, so events,
timeouts, etc, may be dispatched during the wait.
be freed with g_free(), or %NULL if retrieving
the selection data failed. (This could happen
for various reasons, in particular if the
clipboard was empty or if the contents of the
clipboard could not be converted into text form.)</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a newly-allocated UTF-8 string which must</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="wait_for_uris"
              c:identifier="gtk_clipboard_wait_for_uris"
              version="2.14">
        <doc xml:whitespace="preserve">Requests the contents of the clipboard as URIs. This function waits
for the data to be received using the main loop, so events,
timeouts, etc, may be dispatched during the wait.
%NULL-terminated array of strings which must
be freed with g_strfreev(), or %NULL if
retrieving the selection data failed. (This
could happen for various reasons, in particular
if the clipboard was empty or if the contents of
the clipboard could not be converted into URI form.)</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a newly-allocated</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
      </method>
      <method name="wait_is_image_available"
              c:identifier="gtk_clipboard_wait_is_image_available"
              version="2.6">
        <doc xml:whitespace="preserve">Test to see if there is an image available to be pasted
This is done by requesting the TARGETS atom and checking
if it contains any of the supported image targets. This function 
waits for the data to be received using the main loop, so events, 
timeouts, etc, may be dispatched during the wait.
This function is a little faster than calling
gtk_clipboard_wait_for_image() since it doesn't need to retrieve
the actual image data.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE is there is an image available, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="wait_is_rich_text_available"
              c:identifier="gtk_clipboard_wait_is_rich_text_available"
              version="2.10">
        <doc xml:whitespace="preserve">Test to see if there is rich text available to be pasted
This is done by requesting the TARGETS atom and checking
if it contains any of the supported rich text targets. This function
waits for the data to be received using the main loop, so events,
timeouts, etc, may be dispatched during the wait.
This function is a little faster than calling
gtk_clipboard_wait_for_rich_text() since it doesn't need to retrieve
the actual text.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE is there is rich text available, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="buffer" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkTextBuffer</doc>
            <type name="TextBuffer" c:type="GtkTextBuffer*"/>
          </parameter>
        </parameters>
      </method>
      <method name="wait_is_target_available"
              c:identifier="gtk_clipboard_wait_is_target_available"
              version="2.6">
        <doc xml:whitespace="preserve">Checks if a clipboard supports pasting data of a given type. This
function can be used to determine if a "Paste" menu item should be
insensitive or not.
If you want to see if there's text available on the clipboard, use
gtk_clipboard_wait_is_text_available () instead.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the target is available, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="target" transfer-ownership="none">
            <doc xml:whitespace="preserve">A #GdkAtom indicating which target to look for.</doc>
            <type name="Gdk.Atom" c:type="GdkAtom"/>
          </parameter>
        </parameters>
      </method>
      <method name="wait_is_text_available"
              c:identifier="gtk_clipboard_wait_is_text_available">
        <doc xml:whitespace="preserve">Test to see if there is text available to be pasted
This is done by requesting the TARGETS atom and checking
if it contains any of the supported text targets. This function 
waits for the data to be received using the main loop, so events, 
timeouts, etc, may be dispatched during the wait.
This function is a little faster than calling
gtk_clipboard_wait_for_text() since it doesn't need to retrieve
the actual text.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE is there is text available, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="wait_is_uris_available"
              c:identifier="gtk_clipboard_wait_is_uris_available"
              version="2.14">
        <doc xml:whitespace="preserve">Test to see if there is a list of URIs available to be pasted
This is done by requesting the TARGETS atom and checking
if it contains the URI targets. This function
waits for the data to be received using the main loop, so events, 
timeouts, etc, may be dispatched during the wait.
This function is a little faster than calling
gtk_clipboard_wait_for_uris() since it doesn't need to retrieve
the actual URI data.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE is there is an URI list available, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <glib:signal name="owner-change" version="2.6">
        <doc xml:whitespace="preserve">The ::owner-change signal is emitted when GTK+ receives an
event that indicates that the ownership of the selection 
associated with @clipboard has changed.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the @GdkEventOwnerChange event</doc>
            <type name="Gdk.Event"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <callback name="ClipboardClearFunc" c:type="GtkClipboardClearFunc">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="clipboard" transfer-ownership="none">
          <type name="Clipboard" c:type="GtkClipboard*"/>
        </parameter>
        <parameter name="user_data_or_owner" transfer-ownership="none">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="ClipboardGetFunc" c:type="GtkClipboardGetFunc">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="clipboard" transfer-ownership="none">
          <type name="Clipboard" c:type="GtkClipboard*"/>
        </parameter>
        <parameter name="selection_data" transfer-ownership="none">
          <type name="SelectionData" c:type="GtkSelectionData*"/>
        </parameter>
        <parameter name="info" transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="user_data_or_owner" transfer-ownership="none">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="ClipboardImageReceivedFunc"
              c:type="GtkClipboardImageReceivedFunc">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="clipboard" transfer-ownership="none">
          <type name="Clipboard" c:type="GtkClipboard*"/>
        </parameter>
        <parameter name="pixbuf" transfer-ownership="none">
          <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="ClipboardReceivedFunc" c:type="GtkClipboardReceivedFunc">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="clipboard" transfer-ownership="none">
          <type name="Clipboard" c:type="GtkClipboard*"/>
        </parameter>
        <parameter name="selection_data" transfer-ownership="none">
          <type name="SelectionData" c:type="GtkSelectionData*"/>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="ClipboardRichTextReceivedFunc"
              c:type="GtkClipboardRichTextReceivedFunc">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="clipboard" transfer-ownership="none">
          <type name="Clipboard" c:type="GtkClipboard*"/>
        </parameter>
        <parameter name="format" transfer-ownership="none">
          <type name="Gdk.Atom" c:type="GdkAtom"/>
        </parameter>
        <parameter name="text" transfer-ownership="none">
          <type name="guint8" c:type="guint8*"/>
        </parameter>
        <parameter name="length" transfer-ownership="none">
          <type name="gulong" c:type="gsize"/>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="ClipboardTargetsReceivedFunc"
              c:type="GtkClipboardTargetsReceivedFunc">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="clipboard" transfer-ownership="none">
          <type name="Clipboard" c:type="GtkClipboard*"/>
        </parameter>
        <parameter name="atoms" transfer-ownership="none">
          <type name="Gdk.Atom" c:type="GdkAtom*"/>
        </parameter>
        <parameter name="n_atoms" transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="ClipboardTextReceivedFunc"
              c:type="GtkClipboardTextReceivedFunc">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="clipboard" transfer-ownership="none">
          <type name="Clipboard" c:type="GtkClipboard*"/>
        </parameter>
        <parameter name="text" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="ClipboardURIReceivedFunc"
              c:type="GtkClipboardURIReceivedFunc">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="clipboard" transfer-ownership="none">
          <type name="Clipboard" c:type="GtkClipboard*"/>
        </parameter>
        <parameter name="uris" transfer-ownership="none">
          <type name="utf8" c:type="gchar**"/>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <class name="ColorButton"
           c:symbol-prefix="color_button"
           c:type="GtkColorButton"
           parent="Button"
           glib:type-name="GtkColorButton"
           glib:get-type="gtk_color_button_get_type"
           glib:type-struct="ColorButtonClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Activatable"/>
      <implements name="Buildable"/>
      <implements name="SizeRequest"/>
      <constructor name="new"
                   c:identifier="gtk_color_button_new"
                   version="2.4">
        <doc xml:whitespace="preserve">Creates a new color button. This returns a widget in the form of
a small button containing a swatch representing the current selected 
color. When the button is clicked, a color-selection dialog will open, 
allowing the user to select a color. The swatch will be updated to reflect 
the new color when the user finishes.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a new color button.</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <constructor name="new_with_color"
                   c:identifier="gtk_color_button_new_with_color"
                   version="2.4">
        <doc xml:whitespace="preserve">Creates a new color button.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a new color button.</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="color" transfer-ownership="none">
            <doc xml:whitespace="preserve">A #GdkColor to set the current color with.</doc>
            <type name="Gdk.Color" c:type="GdkColor*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_alpha"
              c:identifier="gtk_color_button_get_alpha"
              version="2.4">
        <doc xml:whitespace="preserve">Returns the current alpha value.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">an integer between 0 and 65535.</doc>
          <type name="guint16" c:type="guint16"/>
        </return-value>
      </method>
      <method name="get_color"
              c:identifier="gtk_color_button_get_color"
              version="2.4">
        <doc xml:whitespace="preserve">Sets @color to be the current color in the #GtkColorButton widget.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="color" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GdkColor to fill in with the current color.</doc>
            <type name="Gdk.Color" c:type="GdkColor*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_title"
              c:identifier="gtk_color_button_get_title"
              version="2.4">
        <doc xml:whitespace="preserve">Gets the title of the color selection dialog.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">An internal string, do not free the return value</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_use_alpha"
              c:identifier="gtk_color_button_get_use_alpha"
              version="2.4">
        <doc xml:whitespace="preserve">Does the color selection dialog use the alpha channel?</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the color sample uses alpha channel, %FALSE if not.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="set_alpha"
              c:identifier="gtk_color_button_set_alpha"
              version="2.4">
        <doc xml:whitespace="preserve">Sets the current opacity to be @alpha.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="alpha" transfer-ownership="none">
            <doc xml:whitespace="preserve">an integer between 0 and 65535.</doc>
            <type name="guint16" c:type="guint16"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_color"
              c:identifier="gtk_color_button_set_color"
              version="2.4">
        <doc xml:whitespace="preserve">Sets the current color to be @color.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="color" transfer-ownership="none">
            <doc xml:whitespace="preserve">A #GdkColor to set the current color with.</doc>
            <type name="Gdk.Color" c:type="GdkColor*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_title"
              c:identifier="gtk_color_button_set_title"
              version="2.4">
        <doc xml:whitespace="preserve">Sets the title for the color selection dialog.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="title" transfer-ownership="none">
            <doc xml:whitespace="preserve">String containing new window title.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_use_alpha"
              c:identifier="gtk_color_button_set_use_alpha"
              version="2.4">
        <doc xml:whitespace="preserve">Sets whether or not the color button should use the alpha channel.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="use_alpha" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE if color button should use alpha channel, %FALSE if not.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="alpha"
                version="2.4"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The selected opacity value (0 fully transparent, 65535 fully opaque).</doc>
        <type name="guint"/>
      </property>
      <property name="color"
                version="2.4"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The selected color.</doc>
        <type name="Gdk.Color"/>
      </property>
      <property name="title"
                version="2.4"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The title of the color selection dialog</doc>
        <type name="utf8"/>
      </property>
      <property name="use-alpha"
                version="2.4"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">If this property is set to %TRUE, the color swatch on the button is rendered against a 
checkerboard background to show its opacity and the opacity slider is displayed in the 
color selection dialog.</doc>
        <type name="gboolean"/>
      </property>
      <field name="button">
        <type name="Button" c:type="GtkButton"/>
      </field>
      <field name="priv">
        <type name="ColorButtonPrivate" c:type="GtkColorButtonPrivate*"/>
      </field>
      <glib:signal name="color-set" version="2.4">
        <doc xml:whitespace="preserve">The ::color-set signal is emitted when the user selects a color. 
When handling this signal, use gtk_color_button_get_color() and 
gtk_color_button_get_alpha() to find out which color was just selected.
Note that this signal is only emitted when the &lt;emphasis&gt;user&lt;/emphasis&gt;
changes the color. If you need to react to programmatic color changes
as well, use the notify::color signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="ColorButtonClass"
            c:type="GtkColorButtonClass"
            glib:is-gtype-struct-for="ColorButton">
      <field name="parent_class">
        <type name="ButtonClass" c:type="GtkButtonClass"/>
      </field>
      <field name="color_set">
        <callback name="color_set">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="cp" transfer-ownership="none">
              <type name="ColorButton" c:type="GtkColorButton*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_gtk_reserved1" introspectable="0">
        <callback name="_gtk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved2" introspectable="0">
        <callback name="_gtk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved3" introspectable="0">
        <callback name="_gtk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved4" introspectable="0">
        <callback name="_gtk_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="ColorButtonPrivate"
            c:type="GtkColorButtonPrivate"
            disguised="1">
    </record>
    <class name="ColorSelection"
           c:symbol-prefix="color_selection"
           c:type="GtkColorSelection"
           parent="VBox"
           glib:type-name="GtkColorSelection"
           glib:get-type="gtk_color_selection_get_type"
           glib:type-struct="ColorSelectionClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Buildable"/>
      <implements name="Orientable"/>
      <implements name="SizeRequest"/>
      <constructor name="new" c:identifier="gtk_color_selection_new">
        <doc xml:whitespace="preserve">Creates a new GtkColorSelection.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a new #GtkColorSelection</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <function name="palette_from_string"
                c:identifier="gtk_color_selection_palette_from_string">
        <doc xml:whitespace="preserve">Parses a color palette string; the string is a colon-separated
list of color names readable by gdk_color_parse().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if a palette was successfully parsed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="str" transfer-ownership="none">
            <doc xml:whitespace="preserve">a string encoding a color palette.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="colors" transfer-ownership="none">
            <doc xml:whitespace="preserve">return location for allocated array of #GdkColor.</doc>
            <type name="Gdk.Color" c:type="GdkColor**"/>
          </parameter>
          <parameter name="n_colors" transfer-ownership="none">
            <doc xml:whitespace="preserve">return location for length of array.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </function>
      <function name="palette_to_string"
                c:identifier="gtk_color_selection_palette_to_string">
        <doc xml:whitespace="preserve">Encodes a palette as a string, useful for persistent storage.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">allocated string encoding the palette.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="colors" transfer-ownership="none">
            <doc xml:whitespace="preserve">an array of colors.</doc>
            <type name="Gdk.Color" c:type="GdkColor*"/>
          </parameter>
          <parameter name="n_colors" transfer-ownership="none">
            <doc xml:whitespace="preserve">length of the array.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </function>
      <function name="set_change_palette_with_screen_hook"
                c:identifier="gtk_color_selection_set_change_palette_with_screen_hook"
                version="2.2"
                introspectable="0">
        <doc xml:whitespace="preserve">Installs a global function to be called whenever the user tries to
modify the palette in a color selection. This function should save
the new palette contents, and update the GtkSettings property
"gtk-color-palette" so all GtkColorSelection widgets will be modified.</doc>
        <return-value>
          <doc xml:whitespace="preserve">the previous change palette hook (that was replaced).</doc>
          <type name="ColorSelectionChangePaletteWithScreenFunc"
                c:type="GtkColorSelectionChangePaletteWithScreenFunc"/>
        </return-value>
        <parameters>
          <parameter name="func" transfer-ownership="none">
            <doc xml:whitespace="preserve">a function to call when the custom palette needs saving.</doc>
            <type name="ColorSelectionChangePaletteWithScreenFunc"
                  c:type="GtkColorSelectionChangePaletteWithScreenFunc"/>
          </parameter>
        </parameters>
      </function>
      <method name="get_current_alpha"
              c:identifier="gtk_color_selection_get_current_alpha">
        <doc xml:whitespace="preserve">Returns the current alpha value.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">an integer between 0 and 65535.</doc>
          <type name="guint16" c:type="guint16"/>
        </return-value>
      </method>
      <method name="get_current_color"
              c:identifier="gtk_color_selection_get_current_color">
        <doc xml:whitespace="preserve">Sets @color to be the current color in the GtkColorSelection widget.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="color"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GdkColor to fill in with the current color.</doc>
            <type name="Gdk.Color" c:type="GdkColor*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_has_opacity_control"
              c:identifier="gtk_color_selection_get_has_opacity_control">
        <doc xml:whitespace="preserve">Determines whether the colorsel has an opacity control.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the @colorsel has an opacity control.  %FALSE if it does't.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_has_palette"
              c:identifier="gtk_color_selection_get_has_palette">
        <doc xml:whitespace="preserve">Determines whether the color selector has a color palette.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the selector has a palette.  %FALSE if it hasn't.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_previous_alpha"
              c:identifier="gtk_color_selection_get_previous_alpha">
        <doc xml:whitespace="preserve">Returns the previous alpha value.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">an integer between 0 and 65535.</doc>
          <type name="guint16" c:type="guint16"/>
        </return-value>
      </method>
      <method name="get_previous_color"
              c:identifier="gtk_color_selection_get_previous_color">
        <doc xml:whitespace="preserve">Fills @color in with the original color value.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="color" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GdkColor to fill in with the original color value.</doc>
            <type name="Gdk.Color" c:type="GdkColor*"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_adjusting"
              c:identifier="gtk_color_selection_is_adjusting">
        <doc xml:whitespace="preserve">Gets the current state of the @colorsel.
if the selection has stopped.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the user is currently dragging a color around, and %FALSE</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="set_current_alpha"
              c:identifier="gtk_color_selection_set_current_alpha">
        <doc xml:whitespace="preserve">Sets the current opacity to be @alpha.  The first time this is called, it will
also set the original opacity to be @alpha too.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="alpha" transfer-ownership="none">
            <doc xml:whitespace="preserve">an integer between 0 and 65535.</doc>
            <type name="guint16" c:type="guint16"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_current_color"
              c:identifier="gtk_color_selection_set_current_color">
        <doc xml:whitespace="preserve">Sets the current color to be @color.  The first time this is called, it will
also set the original color to be @color too.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="color" transfer-ownership="none">
            <doc xml:whitespace="preserve">A #GdkColor to set the current color with.</doc>
            <type name="Gdk.Color" c:type="GdkColor*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_has_opacity_control"
              c:identifier="gtk_color_selection_set_has_opacity_control">
        <doc xml:whitespace="preserve">Sets the @colorsel to use or not use opacity.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="has_opacity" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE if @colorsel can set the opacity, %FALSE otherwise.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_has_palette"
              c:identifier="gtk_color_selection_set_has_palette">
        <doc xml:whitespace="preserve">Shows and hides the palette based upon the value of @has_palette.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="has_palette" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE if palette is to be visible, %FALSE otherwise.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_previous_alpha"
              c:identifier="gtk_color_selection_set_previous_alpha">
        <doc xml:whitespace="preserve">Sets the 'previous' alpha to be @alpha.  This function should be called with
some hesitations, as it might seem confusing to have that alpha change.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="alpha" transfer-ownership="none">
            <doc xml:whitespace="preserve">an integer between 0 and 65535.</doc>
            <type name="guint16" c:type="guint16"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_previous_color"
              c:identifier="gtk_color_selection_set_previous_color">
        <doc xml:whitespace="preserve">Sets the 'previous' color to be @color.  This function should be called with
some hesitations, as it might seem confusing to have that color change.
Calling gtk_color_selection_set_current_color() will also set this color the first
time it is called.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="color" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GdkColor to set the previous color with.</doc>
            <type name="Gdk.Color" c:type="GdkColor*"/>
          </parameter>
        </parameters>
      </method>
      <property name="current-alpha" writable="1" transfer-ownership="none">
        <type name="guint"/>
      </property>
      <property name="current-color" writable="1" transfer-ownership="none">
        <type name="Gdk.Color"/>
      </property>
      <property name="has-opacity-control"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="has-palette" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <field name="parent_instance">
        <type name="VBox" c:type="GtkVBox"/>
      </field>
      <field name="private_data">
        <type name="ColorSelectionPrivate" c:type="GtkColorSelectionPrivate*"/>
      </field>
      <glib:signal name="color-changed">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
    </class>
    <callback name="ColorSelectionChangePaletteFunc"
              c:type="GtkColorSelectionChangePaletteFunc">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="colors" transfer-ownership="none">
          <type name="Gdk.Color" c:type="GdkColor*"/>
        </parameter>
        <parameter name="n_colors" transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="ColorSelectionChangePaletteWithScreenFunc"
              c:type="GtkColorSelectionChangePaletteWithScreenFunc">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="screen" transfer-ownership="none">
          <type name="Gdk.Screen" c:type="GdkScreen*"/>
        </parameter>
        <parameter name="colors" transfer-ownership="none">
          <type name="Gdk.Color" c:type="GdkColor*"/>
        </parameter>
        <parameter name="n_colors" transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </callback>
    <record name="ColorSelectionClass"
            c:type="GtkColorSelectionClass"
            glib:is-gtype-struct-for="ColorSelection">
      <field name="parent_class">
        <type name="VBoxClass" c:type="GtkVBoxClass"/>
      </field>
      <field name="color_changed">
        <callback name="color_changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="color_selection" transfer-ownership="none">
              <type name="ColorSelection" c:type="GtkColorSelection*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_gtk_reserved1" introspectable="0">
        <callback name="_gtk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved2" introspectable="0">
        <callback name="_gtk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved3" introspectable="0">
        <callback name="_gtk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved4" introspectable="0">
        <callback name="_gtk_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <class name="ColorSelectionDialog"
           c:symbol-prefix="color_selection_dialog"
           c:type="GtkColorSelectionDialog"
           parent="Dialog"
           glib:type-name="GtkColorSelectionDialog"
           glib:get-type="gtk_color_selection_dialog_get_type"
           glib:type-struct="ColorSelectionDialogClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Buildable"/>
      <implements name="SizeRequest"/>
      <constructor name="new" c:identifier="gtk_color_selection_dialog_new">
        <return-value transfer-ownership="none">
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="title" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_color_selection"
              c:identifier="gtk_color_selection_dialog_get_color_selection"
              version="2.14">
        <doc xml:whitespace="preserve">Retrieves the #GtkColorSelection widget embedded in the dialog.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the embedded #GtkColorSelection</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
      </method>
      <property name="cancel-button" transfer-ownership="none">
        <type name="Widget"/>
      </property>
      <property name="color-selection" transfer-ownership="none">
        <type name="Widget"/>
      </property>
      <property name="help-button" transfer-ownership="none">
        <type name="Widget"/>
      </property>
      <property name="ok-button" transfer-ownership="none">
        <type name="Widget"/>
      </property>
      <field name="parent_instance">
        <type name="Dialog" c:type="GtkDialog"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ColorSelectionDialogPrivate"
              c:type="GtkColorSelectionDialogPrivate*"/>
      </field>
    </class>
    <record name="ColorSelectionDialogClass"
            c:type="GtkColorSelectionDialogClass"
            glib:is-gtype-struct-for="ColorSelectionDialog">
      <field name="parent_class">
        <type name="DialogClass" c:type="GtkDialogClass"/>
      </field>
      <field name="_gtk_reserved1" introspectable="0">
        <callback name="_gtk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved2" introspectable="0">
        <callback name="_gtk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved3" introspectable="0">
        <callback name="_gtk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved4" introspectable="0">
        <callback name="_gtk_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="ColorSelectionDialogPrivate"
            c:type="GtkColorSelectionDialogPrivate"
            disguised="1">
    </record>
    <record name="ColorSelectionPrivate"
            c:type="GtkColorSelectionPrivate"
            disguised="1">
    </record>
    <class name="ComboBox"
           c:symbol-prefix="combo_box"
           c:type="GtkComboBox"
           parent="Bin"
           glib:type-name="GtkComboBox"
           glib:get-type="gtk_combo_box_get_type"
           glib:type-struct="ComboBoxClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Buildable"/>
      <implements name="CellEditable"/>
      <implements name="CellLayout"/>
      <implements name="SizeRequest"/>
      <constructor name="new" c:identifier="gtk_combo_box_new" version="2.4">
        <doc xml:whitespace="preserve">Creates a new empty #GtkComboBox.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">A new #GtkComboBox.</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <constructor name="new_text"
                   c:identifier="gtk_combo_box_new_text"
                   version="2.4">
        <doc xml:whitespace="preserve">Convenience function which constructs a new text combo box, which is a
#GtkComboBox just displaying strings. If you use this function to create
a text combo box, you should only manipulate its data source with the
gtk_combo_box_insert_text(), gtk_combo_box_prepend_text() and
gtk_combo_box_remove_text().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">A new text combo box.</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <constructor name="new_with_model"
                   c:identifier="gtk_combo_box_new_with_model"
                   version="2.4">
        <doc xml:whitespace="preserve">Creates a new #GtkComboBox with the model initialized to @model.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">A new #GtkComboBox.</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="model" transfer-ownership="none">
            <doc xml:whitespace="preserve">A #GtkTreeModel.</doc>
            <type name="TreeModel" c:type="GtkTreeModel*"/>
          </parameter>
        </parameters>
      </constructor>
      <virtual-method name="get_active_text"
                      invoker="get_active_text"
                      version="2.6">
        <doc xml:whitespace="preserve">Returns the currently active string in @combo_box or %NULL if none
is selected.  Note that you can only use this function with combo
boxes constructed with gtk_combo_box_new_text() and with
#GtkComboBoxEntry&lt;!-- --&gt;s.
Must be freed with g_free().</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a newly allocated string containing the currently active text.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </virtual-method>
      <method name="append_text"
              c:identifier="gtk_combo_box_append_text"
              version="2.4">
        <doc xml:whitespace="preserve">Appends @string to the list of strings stored in @combo_box. Note that
you can only use this function with combo boxes constructed with
gtk_combo_box_new_text().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="text" transfer-ownership="none">
            <doc xml:whitespace="preserve">A string</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_active"
              c:identifier="gtk_combo_box_get_active"
              version="2.4">
        <doc xml:whitespace="preserve">Returns the index of the currently active item, or -1 if there's no
active item. If the model is a non-flat treemodel, and the active item 
is not an immediate child of the root of the tree, this function returns 
&lt;literal&gt;gtk_tree_path_get_indices (path)[0]&lt;/literal&gt;, where 
&lt;literal&gt;path&lt;/literal&gt; is the #GtkTreePath of the active item.
or -1 if there's no active item.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">An integer which is the index of the currently active item,</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="get_active_iter"
              c:identifier="gtk_combo_box_get_active_iter"
              version="2.4">
        <doc xml:whitespace="preserve">Sets @iter to point to the current active item, if it exists.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE, if @iter was set</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="iter"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:whitespace="preserve">The uninitialized #GtkTreeIter</doc>
            <type name="TreeIter" c:type="GtkTreeIter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_active_text"
              c:identifier="gtk_combo_box_get_active_text"
              version="2.6">
        <doc xml:whitespace="preserve">Returns the currently active string in @combo_box or %NULL if none
is selected.  Note that you can only use this function with combo
boxes constructed with gtk_combo_box_new_text() and with
#GtkComboBoxEntry&lt;!-- --&gt;s.
Must be freed with g_free().</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a newly allocated string containing the currently active text.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_add_tearoffs"
              c:identifier="gtk_combo_box_get_add_tearoffs">
        <doc xml:whitespace="preserve">Gets the current value of the :add-tearoffs property.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the current value of the :add-tearoffs property.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_button_sensitivity"
              c:identifier="gtk_combo_box_get_button_sensitivity"
              version="2.14">
        <doc xml:whitespace="preserve">Returns whether the combo box sets the dropdown button
sensitive or not when there are no items in the model.
is sensitive when the model is empty, %GTK_SENSITIVITY_OFF
if the button is always insensitive or
%GTK_SENSITIVITY_AUTO if it is only sensitive as long as
the model has one item to be selected.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%GTK_SENSITIVITY_ON if the dropdown button</doc>
          <type name="SensitivityType" c:type="GtkSensitivityType"/>
        </return-value>
      </method>
      <method name="get_column_span_column"
              c:identifier="gtk_combo_box_get_column_span_column"
              version="2.6">
        <doc xml:whitespace="preserve">Returns the column with column span information for @combo_box.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the column span column.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="get_focus_on_click"
              c:identifier="gtk_combo_box_get_focus_on_click"
              version="2.6">
        <doc xml:whitespace="preserve">Returns whether the combo box grabs focus when it is clicked 
with the mouse. See gtk_combo_box_set_focus_on_click().
clicked with the mouse.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the combo box grabs focus when it is</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_model"
              c:identifier="gtk_combo_box_get_model"
              version="2.4">
        <doc xml:whitespace="preserve">Returns the #GtkTreeModel which is acting as data source for @combo_box.
during construction.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">A #GtkTreeModel which was passed</doc>
          <type name="TreeModel" c:type="GtkTreeModel*"/>
        </return-value>
      </method>
      <method name="get_popup_accessible"
              c:identifier="gtk_combo_box_get_popup_accessible"
              version="2.6">
        <doc xml:whitespace="preserve">Gets the accessible object corresponding to the combo box's popup.
This function is mostly intended for use by accessibility technologies;
applications should have little use for it.
to the combo box's popup.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the accessible object corresponding</doc>
          <type name="Atk.Object" c:type="AtkObject*"/>
        </return-value>
      </method>
      <method name="get_row_separator_func"
              c:identifier="gtk_combo_box_get_row_separator_func"
              version="2.6"
              introspectable="0">
        <doc xml:whitespace="preserve">Returns the current row separator function.</doc>
        <return-value>
          <doc xml:whitespace="preserve">the current row separator function.</doc>
          <type name="TreeViewRowSeparatorFunc"
                c:type="GtkTreeViewRowSeparatorFunc"/>
        </return-value>
      </method>
      <method name="get_row_span_column"
              c:identifier="gtk_combo_box_get_row_span_column"
              version="2.6">
        <doc xml:whitespace="preserve">Returns the column with row span information for @combo_box.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the row span column.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="get_title"
              c:identifier="gtk_combo_box_get_title"
              version="2.10">
        <doc xml:whitespace="preserve">Gets the current title of the menu in tearoff mode. See
gtk_combo_box_set_add_tearoffs().
string which must not be freed.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the menu's title in tearoff mode. This is an internal copy of the</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_wrap_width"
              c:identifier="gtk_combo_box_get_wrap_width"
              version="2.6">
        <doc xml:whitespace="preserve">Returns the wrap width which is used to determine the number of columns 
for the popup menu. If the wrap width is larger than 1, the combo box 
is in table mode.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the wrap width.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="insert_text"
              c:identifier="gtk_combo_box_insert_text"
              version="2.4">
        <doc xml:whitespace="preserve">Inserts @string at @position in the list of strings stored in @combo_box.
Note that you can only use this function with combo boxes constructed
with gtk_combo_box_new_text().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="position" transfer-ownership="none">
            <doc xml:whitespace="preserve">An index to insert @text</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="text" transfer-ownership="none">
            <doc xml:whitespace="preserve">A string</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="popdown"
              c:identifier="gtk_combo_box_popdown"
              version="2.4">
        <doc xml:whitespace="preserve">Hides the menu or dropdown list of @combo_box.
This function is mostly intended for use by accessibility technologies;
applications should have little use for it.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="popup" c:identifier="gtk_combo_box_popup" version="2.4">
        <doc xml:whitespace="preserve">Pops up the menu or dropdown list of @combo_box. 
This function is mostly intended for use by accessibility technologies;
applications should have little use for it.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="popup_for_device"
              c:identifier="gtk_combo_box_popup_for_device"
              version="3.0">
        <doc xml:whitespace="preserve">Pops up the menu or dropdown list of @combo_box, the popup window
will be grabbed so only @device and its associated pointer/keyboard
are the only #GdkDevice&lt;!-- --&gt;s able to send events to it.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="device" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GdkDevice</doc>
            <type name="Gdk.Device" c:type="GdkDevice*"/>
          </parameter>
        </parameters>
      </method>
      <method name="prepend_text"
              c:identifier="gtk_combo_box_prepend_text"
              version="2.4">
        <doc xml:whitespace="preserve">Prepends @string to the list of strings stored in @combo_box. Note that
you can only use this function with combo boxes constructed with
gtk_combo_box_new_text().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="text" transfer-ownership="none">
            <doc xml:whitespace="preserve">A string</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_text"
              c:identifier="gtk_combo_box_remove_text"
              version="2.4">
        <doc xml:whitespace="preserve">Removes the string at @position from @combo_box. Note that you can only use
this function with combo boxes constructed with gtk_combo_box_new_text().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="position" transfer-ownership="none">
            <doc xml:whitespace="preserve">Index of the item to remove</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_active"
              c:identifier="gtk_combo_box_set_active"
              version="2.4">
        <doc xml:whitespace="preserve">Sets the active item of @combo_box to be the item at @index.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="index_" transfer-ownership="none">
            <doc xml:whitespace="preserve">An index in the model passed during construction, or -1 to have no active item</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_active_iter"
              c:identifier="gtk_combo_box_set_active_iter"
              version="2.4">
        <doc xml:whitespace="preserve">Sets the current active item to be the one referenced by @iter, or
unsets the active item if @iter is %NULL.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="iter" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">The #GtkTreeIter, or %NULL</doc>
            <type name="TreeIter" c:type="GtkTreeIter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_add_tearoffs"
              c:identifier="gtk_combo_box_set_add_tearoffs"
              version="2.6">
        <doc xml:whitespace="preserve">Sets whether the popup menu should have a tearoff 
menu item.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="add_tearoffs" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE to add tearoff menu items</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_button_sensitivity"
              c:identifier="gtk_combo_box_set_button_sensitivity"
              version="2.14">
        <doc xml:whitespace="preserve">Sets whether the dropdown button of the combo box should be
always sensitive (%GTK_SENSITIVITY_ON), never sensitive (%GTK_SENSITIVITY_OFF)
or only if there is at least one item to display (%GTK_SENSITIVITY_AUTO).</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="sensitivity" transfer-ownership="none">
            <doc xml:whitespace="preserve">specify the sensitivity of the dropdown button</doc>
            <type name="SensitivityType" c:type="GtkSensitivityType"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_column_span_column"
              c:identifier="gtk_combo_box_set_column_span_column"
              version="2.4">
        <doc xml:whitespace="preserve">Sets the column with column span information for @combo_box to be
how many columns an item should span.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="column_span" transfer-ownership="none">
            <doc xml:whitespace="preserve">A column in the model passed during construction</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_focus_on_click"
              c:identifier="gtk_combo_box_set_focus_on_click"
              version="2.6">
        <doc xml:whitespace="preserve">Sets whether the combo box will grab focus when it is clicked with 
the mouse. Making mouse clicks not grab focus is useful in places 
like toolbars where you don't want the keyboard focus removed from 
the main area of the application.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="focus_on_click" transfer-ownership="none">
            <doc xml:whitespace="preserve">whether the combo box grabs focus when clicked with the mouse</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_model"
              c:identifier="gtk_combo_box_set_model"
              version="2.4">
        <doc xml:whitespace="preserve">Sets the model used by @combo_box to be @model. Will unset a previously set
model (if applicable). If model is %NULL, then it will unset the model.
Note that this function does not clear the cell renderers, you have to 
call gtk_cell_layout_clear() yourself if you need to set up different 
cell renderers for the new model.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="model" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">A #GtkTreeModel</doc>
            <type name="TreeModel" c:type="GtkTreeModel*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_row_separator_func"
              c:identifier="gtk_combo_box_set_row_separator_func"
              version="2.6">
        <doc xml:whitespace="preserve">Sets the row separator function, which is used to determine
whether a row should be drawn as a separator. If the row separator
function is %NULL, no separators are drawn. This is the default value.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="func"
                     transfer-ownership="none"
                     scope="notified"
                     closure="1"
                     destroy="2">
            <doc xml:whitespace="preserve">a #GtkTreeViewRowSeparatorFunc</doc>
            <type name="TreeViewRowSeparatorFunc"
                  c:type="GtkTreeViewRowSeparatorFunc"/>
          </parameter>
          <parameter name="data" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">user data to pass to @func, or %NULL</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="destroy"
                     transfer-ownership="none"
                     allow-none="1"
                     scope="async">
            <doc xml:whitespace="preserve">destroy notifier for @data, or %NULL</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_row_span_column"
              c:identifier="gtk_combo_box_set_row_span_column"
              version="2.4">
        <doc xml:whitespace="preserve">Sets the column with row span information for @combo_box to be @row_span.
The row span column contains integers which indicate how many rows
an item should span.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="row_span" transfer-ownership="none">
            <doc xml:whitespace="preserve">A column in the model passed during construction.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_title"
              c:identifier="gtk_combo_box_set_title"
              version="2.10">
        <doc xml:whitespace="preserve">Sets the menu's title in tearoff mode.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="title" transfer-ownership="none">
            <doc xml:whitespace="preserve">a title for the menu in tearoff mode</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_wrap_width"
              c:identifier="gtk_combo_box_set_wrap_width"
              version="2.4">
        <doc xml:whitespace="preserve">Sets the wrap width of @combo_box to be @width. The wrap width is basically
the preferred number of columns when you want the popup to be layed out
in a table.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="width" transfer-ownership="none">
            <doc xml:whitespace="preserve">Preferred number of columns</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <property name="active"
                version="2.4"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The item which is currently active. If the model is a non-flat treemodel,
and the active item is not an immediate child of the root of the tree,
this property has the value 
&lt;literal&gt;gtk_tree_path_get_indices (path)[0]&lt;/literal&gt;,
where &lt;literal&gt;path&lt;/literal&gt; is the #GtkTreePath of the active item.</doc>
        <type name="gint"/>
      </property>
      <property name="add-tearoffs"
                version="2.6"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The add-tearoffs property controls whether generated menus 
have tearoff menu items. 
Note that this only affects menu style combo boxes.</doc>
        <type name="gboolean"/>
      </property>
      <property name="button-sensitivity"
                version="2.14"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Whether the dropdown button is sensitive when
the model is empty.</doc>
        <type name="SensitivityType"/>
      </property>
      <property name="column-span-column"
                version="2.4"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">If this is set to a non-negative value, it must be the index of a column 
of type %G_TYPE_INT in the model. 
The values of that column are used to determine how many columns a value 
in the list will span.</doc>
        <type name="gint"/>
      </property>
      <property name="focus-on-click" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="has-frame"
                version="2.6"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The has-frame property controls whether a frame
is drawn around the entry.</doc>
        <type name="gboolean"/>
      </property>
      <property name="model"
                version="2.4"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The model from which the combo box takes the values shown
in the list.</doc>
        <type name="TreeModel"/>
      </property>
      <property name="popup-shown" version="2.10" transfer-ownership="none">
        <doc xml:whitespace="preserve">Whether the combo boxes dropdown is popped up. 
Note that this property is mainly useful, because
it allows you to connect to notify::popup-shown.</doc>
        <type name="gboolean"/>
      </property>
      <property name="row-span-column"
                version="2.4"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">If this is set to a non-negative value, it must be the index of a column 
of type %G_TYPE_INT in the model. 
The values of that column are used to determine how many rows a value in 
the list will span. Therefore, the values in the model column pointed to 
by this property must be greater than zero and not larger than wrap-width.</doc>
        <type name="gint"/>
      </property>
      <property name="tearoff-title"
                version="2.10"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">A title that may be displayed by the window manager 
when the popup is torn-off.</doc>
        <type name="utf8"/>
      </property>
      <property name="wrap-width"
                version="2.4"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">If wrap-width is set to a positive value, the list will be
displayed in multiple columns, the number of columns is
determined by wrap-width.</doc>
        <type name="gint"/>
      </property>
      <field name="parent_instance">
        <type name="Bin" c:type="GtkBin"/>
      </field>
      <field name="priv">
        <type name="ComboBoxPrivate" c:type="GtkComboBoxPrivate*"/>
      </field>
      <glib:signal name="changed" version="2.4">
        <doc xml:whitespace="preserve">The changed signal is emitted when the active
item is changed. The can be due to the user selecting
a different item from the list, or due to a 
call to gtk_combo_box_set_active_iter().
It will also be emitted while typing into a GtkComboBoxEntry, 
as well as when selecting an item from the GtkComboBoxEntry's list.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
      <glib:signal name="move-active" version="2.12">
        <doc xml:whitespace="preserve">The ::move-active signal is a 
&lt;link linkend="keybinding-signals"&gt;keybinding signal&lt;/link&gt;
which gets emitted to move the active selection.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkScrollType</doc>
            <type name="ScrollType"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="popdown" version="2.12">
        <doc xml:whitespace="preserve">The ::popdown signal is a 
&lt;link linkend="keybinding-signals"&gt;keybinding signal&lt;/link&gt; 
which gets emitted to popdown the combo box list.
The default bindings for this signal are Alt+Up and Escape.</doc>
        <return-value transfer-ownership="none">
          <type name="gboolean"/>
        </return-value>
      </glib:signal>
      <glib:signal name="popup" version="2.12">
        <doc xml:whitespace="preserve">The ::popup signal is a 
&lt;link linkend="keybinding-signals"&gt;keybinding signal&lt;/link&gt;
which gets emitted to popup the combo box list.
The default binding for this signal is Alt+Down.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="ComboBoxClass"
            c:type="GtkComboBoxClass"
            glib:is-gtype-struct-for="ComboBox">
      <field name="parent_class">
        <type name="BinClass" c:type="GtkBinClass"/>
      </field>
      <field name="changed">
        <callback name="changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="combo_box" transfer-ownership="none">
              <type name="ComboBox" c:type="GtkComboBox*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_active_text">
        <callback name="get_active_text">
          <return-value transfer-ownership="full">
            <doc xml:whitespace="preserve">a newly allocated string containing the currently active text.</doc>
            <type name="utf8" c:type="gchar*"/>
          </return-value>
          <parameters>
            <parameter name="combo_box" transfer-ownership="none">
              <type name="ComboBox" c:type="GtkComboBox*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_gtk_reserved0" introspectable="0">
        <callback name="_gtk_reserved0">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved1" introspectable="0">
        <callback name="_gtk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved2" introspectable="0">
        <callback name="_gtk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <class name="ComboBoxEntry"
           c:symbol-prefix="combo_box_entry"
           c:type="GtkComboBoxEntry"
           parent="ComboBox"
           glib:type-name="GtkComboBoxEntry"
           glib:get-type="gtk_combo_box_entry_get_type"
           glib:type-struct="ComboBoxEntryClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Buildable"/>
      <implements name="CellEditable"/>
      <implements name="CellLayout"/>
      <implements name="SizeRequest"/>
      <constructor name="new"
                   c:identifier="gtk_combo_box_entry_new"
                   version="2.4">
        <doc xml:whitespace="preserve">Creates a new #GtkComboBoxEntry which has a #GtkEntry as child. After
construction, you should set a model using gtk_combo_box_set_model() and a
text column using gtk_combo_box_entry_set_text_column().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">A new #GtkComboBoxEntry.</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <constructor name="new_text"
                   c:identifier="gtk_combo_box_entry_new_text"
                   version="2.4">
        <doc xml:whitespace="preserve">Convenience function which constructs a new editable text combo box, which 
is a #GtkComboBoxEntry just displaying strings. If you use this function to
create a text combo box, you should only manipulate its data source with
gtk_combo_box_insert_text(), gtk_combo_box_prepend_text() and
gtk_combo_box_remove_text().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">A new text #GtkComboBoxEntry.</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <constructor name="new_with_model"
                   c:identifier="gtk_combo_box_entry_new_with_model"
                   version="2.4">
        <doc xml:whitespace="preserve">Creates a new #GtkComboBoxEntry which has a #GtkEntry as child and a list
of strings as popup. You can get the #GtkEntry from a #GtkComboBoxEntry
using GTK_ENTRY (GTK_BIN (combo_box_entry)-&gt;child). To add and remove
strings from the list, just modify @model using its data manipulation
API.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">A new #GtkComboBoxEntry.</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="model" transfer-ownership="none">
            <doc xml:whitespace="preserve">A #GtkTreeModel.</doc>
            <type name="TreeModel" c:type="GtkTreeModel*"/>
          </parameter>
          <parameter name="text_column" transfer-ownership="none">
            <doc xml:whitespace="preserve">A column in @model to get the strings from.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_text_column"
              c:identifier="gtk_combo_box_entry_get_text_column"
              version="2.4">
        <doc xml:whitespace="preserve">Returns the column which @entry_box is using to get the strings from.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">A column in the data source model of @entry_box.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="set_text_column"
              c:identifier="gtk_combo_box_entry_set_text_column"
              version="2.4">
        <doc xml:whitespace="preserve">Sets the model column which @entry_box should use to get strings from
to be @text_column.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="text_column" transfer-ownership="none">
            <doc xml:whitespace="preserve">A column in @model to get the strings from.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <property name="text-column" writable="1" transfer-ownership="none">
        <type name="gint"/>
      </property>
      <field name="parent_instance">
        <type name="ComboBox" c:type="GtkComboBox"/>
      </field>
      <field name="priv">
        <type name="ComboBoxEntryPrivate" c:type="GtkComboBoxEntryPrivate*"/>
      </field>
    </class>
    <record name="ComboBoxEntryClass"
            c:type="GtkComboBoxEntryClass"
            glib:is-gtype-struct-for="ComboBoxEntry">
      <field name="parent_class">
        <type name="ComboBoxClass" c:type="GtkComboBoxClass"/>
      </field>
      <field name="_gtk_reserved0" introspectable="0">
        <callback name="_gtk_reserved0">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved1" introspectable="0">
        <callback name="_gtk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved2" introspectable="0">
        <callback name="_gtk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved3" introspectable="0">
        <callback name="_gtk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="ComboBoxEntryPrivate"
            c:type="GtkComboBoxEntryPrivate"
            disguised="1">
    </record>
    <record name="ComboBoxPrivate" c:type="GtkComboBoxPrivate" disguised="1">
    </record>
    <class name="Container"
           c:symbol-prefix="container"
           c:type="GtkContainer"
           parent="Widget"
           abstract="1"
           glib:type-name="GtkContainer"
           glib:get-type="gtk_container_get_type"
           glib:type-struct="ContainerClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Buildable"/>
      <implements name="SizeRequest"/>
      <virtual-method name="child_type" invoker="child_type">
        <doc xml:whitespace="preserve">Returns the type of the children supported by the container.
Note that this may return %G_TYPE_NONE to indicate that no more
children can be added, e.g. for a #GtkPaned which already has two 
children.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GType.</doc>
          <type name="GType" c:type="GType"/>
        </return-value>
      </virtual-method>
      <virtual-method name="composite_name">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="child" transfer-ownership="none">
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="forall" introspectable="0">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="include_internals" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="callback" transfer-ownership="none" closure="2">
            <type name="Callback" c:type="GtkCallback"/>
          </parameter>
          <parameter name="callback_data" transfer-ownership="none">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_child_property">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="child" transfer-ownership="none">
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="property_id" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="GObject.Value" c:type="GValue*"/>
          </parameter>
          <parameter name="pspec" transfer-ownership="none">
            <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_child_property">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="child" transfer-ownership="none">
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="property_id" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="GObject.Value" c:type="GValue*"/>
          </parameter>
          <parameter name="pspec" transfer-ownership="none">
            <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="add" c:identifier="gtk_container_add">
        <doc xml:whitespace="preserve">Adds @widget to @container. Typically used for simple containers
such as #GtkWindow, #GtkFrame, or #GtkButton; for more complicated
layout containers such as #GtkBox or #GtkTable, this function will
pick default packing parameters that may not be correct.  So
consider functions such as gtk_box_pack_start() and
gtk_table_attach() as an alternative to gtk_container_add() in
those cases. A widget may be added to only one container at a time;
you can't place the same widget inside two different containers.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="widget" transfer-ownership="none">
            <doc xml:whitespace="preserve">a widget to be placed inside @container</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_with_properties"
              c:identifier="gtk_container_add_with_properties"
              introspectable="0">
        <doc xml:whitespace="preserve">Adds @widget to @container, setting child properties at the same time.
See gtk_container_add() and gtk_container_child_set() for more details.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="widget" transfer-ownership="none">
            <doc xml:whitespace="preserve">a widget to be placed inside @container</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="first_prop_name" transfer-ownership="none">
            <doc xml:whitespace="preserve">the name of the first child property to set</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter transfer-ownership="none">
            <varargs>
            </varargs>
          </parameter>
        </parameters>
      </method>
      <method name="check_resize" c:identifier="gtk_container_check_resize">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="child_get"
              c:identifier="gtk_container_child_get"
              introspectable="0">
        <doc xml:whitespace="preserve">Gets the values of one or more child properties for @child and @container.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="child" transfer-ownership="none">
            <doc xml:whitespace="preserve">a widget which is a child of @container</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="first_prop_name" transfer-ownership="none">
            <doc xml:whitespace="preserve">the name of the first property to get</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter transfer-ownership="none">
            <varargs>
            </varargs>
          </parameter>
        </parameters>
      </method>
      <method name="child_get_property"
              c:identifier="gtk_container_child_get_property">
        <doc xml:whitespace="preserve">Gets the value of a child property for @child and @container.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="child" transfer-ownership="none">
            <doc xml:whitespace="preserve">a widget which is a child of @container</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="property_name" transfer-ownership="none">
            <doc xml:whitespace="preserve">the name of the property to get</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:whitespace="preserve">a location to return the value</doc>
            <type name="GObject.Value" c:type="GValue*"/>
          </parameter>
        </parameters>
      </method>
      <method name="child_get_valist"
              c:identifier="gtk_container_child_get_valist"
              introspectable="0">
        <doc xml:whitespace="preserve">Gets the values of one or more child properties for @child and @container.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="child" transfer-ownership="none">
            <doc xml:whitespace="preserve">a widget which is a child of @container</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="first_property_name" transfer-ownership="none">
            <doc xml:whitespace="preserve">the name of the first property to get</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="var_args" transfer-ownership="none">
            <doc xml:whitespace="preserve">return location for the first property, followed optionally by more name/return location pairs, followed by %NULL</doc>
            <type name="va_list" c:type="va_list"/>
          </parameter>
        </parameters>
      </method>
      <method name="child_set"
              c:identifier="gtk_container_child_set"
              introspectable="0">
        <doc xml:whitespace="preserve">Sets one or more child properties for @child and @container.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="child" transfer-ownership="none">
            <doc xml:whitespace="preserve">a widget which is a child of @container</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="first_prop_name" transfer-ownership="none">
            <doc xml:whitespace="preserve">the name of the first property to set</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter transfer-ownership="none">
            <varargs>
            </varargs>
          </parameter>
        </parameters>
      </method>
      <method name="child_set_property"
              c:identifier="gtk_container_child_set_property">
        <doc xml:whitespace="preserve">Sets a child property for @child and @container.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="child" transfer-ownership="none">
            <doc xml:whitespace="preserve">a widget which is a child of @container</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="property_name" transfer-ownership="none">
            <doc xml:whitespace="preserve">the name of the property to set</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:whitespace="preserve">the value to set the property to</doc>
            <type name="GObject.Value" c:type="GValue*"/>
          </parameter>
        </parameters>
      </method>
      <method name="child_set_valist"
              c:identifier="gtk_container_child_set_valist"
              introspectable="0">
        <doc xml:whitespace="preserve">Sets one or more child properties for @child and @container.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="child" transfer-ownership="none">
            <doc xml:whitespace="preserve">a widget which is a child of @container</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="first_property_name" transfer-ownership="none">
            <doc xml:whitespace="preserve">the name of the first property to set</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="var_args" transfer-ownership="none">
            <doc xml:whitespace="preserve">a %NULL-terminated list of property names and values, starting with @first_prop_name</doc>
            <type name="va_list" c:type="va_list"/>
          </parameter>
        </parameters>
      </method>
      <method name="child_type" c:identifier="gtk_container_child_type">
        <doc xml:whitespace="preserve">Returns the type of the children supported by the container.
Note that this may return %G_TYPE_NONE to indicate that no more
children can be added, e.g. for a #GtkPaned which already has two 
children.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GType.</doc>
          <type name="GType" c:type="GType"/>
        </return-value>
      </method>
      <method name="forall"
              c:identifier="gtk_container_forall"
              introspectable="0">
        <doc xml:whitespace="preserve">Invokes @callback on each child of @container, including children
that are considered "internal" (implementation details of the
container). "Internal" children generally weren't added by the user
of the container, but were added by the container implementation
itself.  Most applications should use gtk_container_foreach(),
rather than gtk_container_forall().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="callback" transfer-ownership="none" closure="1">
            <doc xml:whitespace="preserve">a callback</doc>
            <type name="Callback" c:type="GtkCallback"/>
          </parameter>
          <parameter name="callback_data" transfer-ownership="none">
            <doc xml:whitespace="preserve">callback user data</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="foreach" c:identifier="gtk_container_foreach">
        <doc xml:whitespace="preserve">Invokes @callback on each non-internal child of @container. See
gtk_container_forall() for details on what constitutes an
"internal" child.  Most applications should use
gtk_container_foreach(), rather than gtk_container_forall().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="1">
            <doc xml:whitespace="preserve">a callback</doc>
            <type name="Callback" c:type="GtkCallback"/>
          </parameter>
          <parameter name="callback_data" transfer-ownership="none">
            <doc xml:whitespace="preserve">callback user data</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_border_width"
              c:identifier="gtk_container_get_border_width">
        <doc xml:whitespace="preserve">Retrieves the border width of the container. See
gtk_container_set_border_width().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the current border width</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
      </method>
      <method name="get_children" c:identifier="gtk_container_get_children">
        <doc xml:whitespace="preserve">Returns the container's non-internal children. See
gtk_container_forall() for details on what constitutes an "internal" child.</doc>
        <return-value transfer-ownership="container">
          <doc xml:whitespace="preserve">a newly-allocated list of the container's non-internal children.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Widget"/>
          </type>
        </return-value>
      </method>
      <method name="get_focus_chain"
              c:identifier="gtk_container_get_focus_chain">
        <doc xml:whitespace="preserve">Retrieves the focus chain of the container, if one has been
set explicitly. If no focus chain has been explicitly
set, GTK+ computes the focus chain based on the positions
of the children. In that case, GTK+ stores %NULL in
has been set explicitly.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the focus chain of the container</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="focusable_widgets"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="container">
            <doc xml:whitespace="preserve">location to store the focus chain of the container, or %NULL. You should free this list using g_list_free() when you are done with it, however no additional reference count is added to the individual widgets in the focus chain.</doc>
            <type name="GLib.List" c:type="GList**">
              <type name="Widget"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <method name="get_focus_child"
              c:identifier="gtk_container_get_focus_child"
              version="2.14"
              introspectable="0">
        <doc xml:whitespace="preserve">Returns the current focus child widget inside @container. This is not the
currently focused widget. That can be obtained by calling
gtk_window_get_focus().
the @conatiner is focussed, or %NULL if none is set.</doc>
        <return-value>
          <doc xml:whitespace="preserve">The child widget which will recieve the focus inside @container when</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
      </method>
      <method name="get_focus_hadjustment"
              c:identifier="gtk_container_get_focus_hadjustment">
        <doc xml:whitespace="preserve">Retrieves the horizontal focus adjustment for the container. See
gtk_container_set_focus_hadjustment ().
none has been set.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the horizontal focus adjustment, or %NULL if</doc>
          <type name="Adjustment" c:type="GtkAdjustment*"/>
        </return-value>
      </method>
      <method name="get_focus_vadjustment"
              c:identifier="gtk_container_get_focus_vadjustment">
        <doc xml:whitespace="preserve">Retrieves the vertical focus adjustment for the container. See
gtk_container_set_focus_vadjustment().
none has been set.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the vertical focus adjustment, or %NULL if</doc>
          <type name="Adjustment" c:type="GtkAdjustment*"/>
        </return-value>
      </method>
      <method name="get_resize_mode"
              c:identifier="gtk_container_get_resize_mode">
        <doc xml:whitespace="preserve">Returns the resize mode for the container. See
gtk_container_set_resize_mode ().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the current resize mode</doc>
          <type name="ResizeMode" c:type="GtkResizeMode"/>
        </return-value>
      </method>
      <method name="propagate_expose"
              c:identifier="gtk_container_propagate_expose">
        <doc xml:whitespace="preserve">When a container receives an expose event, it must send synthetic
expose events to all children that don't have their own #GdkWindows.
This function provides a convenient way of doing this. A container,
when it receives an expose event, calls gtk_container_propagate_expose() 
once for each child, passing in the event the container received.
gtk_container_propagate_expose() takes care of deciding whether
an expose event needs to be sent to the child, intersecting
the event's area with the child area, and sending the event.
In most cases, a container can simply either simply inherit the
#GtkWidget::expose implementation from #GtkContainer, or, do some drawing 
and then chain to the ::expose implementation from #GtkContainer.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="child" transfer-ownership="none">
            <doc xml:whitespace="preserve">a child of @container</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="event" transfer-ownership="none">
            <doc xml:whitespace="preserve">a expose event sent to container</doc>
            <type name="Gdk.EventExpose" c:type="GdkEventExpose*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove" c:identifier="gtk_container_remove">
        <doc xml:whitespace="preserve">Removes @widget from @container. @widget must be inside @container.
Note that @container will own a reference to @widget, and that this
may be the last reference held; so removing a widget from its
container can destroy that widget. If you want to use @widget
again, you need to add a reference to it while it's not inside
a container, using g_object_ref(). If you don't want to use @widget
again it's usually more efficient to simply destroy it directly
using gtk_widget_destroy() since this will remove it from the
container and help break any circular reference count cycles.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="widget" transfer-ownership="none">
            <doc xml:whitespace="preserve">a current child of @container</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="resize_children"
              c:identifier="gtk_container_resize_children">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="set_border_width"
              c:identifier="gtk_container_set_border_width">
        <doc xml:whitespace="preserve">Sets the border width of the container.
The border width of a container is the amount of space to leave
around the outside of the container. The only exception to this is
#GtkWindow; because toplevel windows can't leave space outside,
they leave the space inside. The border is added on all sides of
the container. To add space to only one side, one approach is to
create a #GtkAlignment widget, call gtk_widget_set_size_request()
to give it a size, and place it on the side of the container as
a spacer.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="border_width" transfer-ownership="none">
            <doc xml:whitespace="preserve">amount of blank space to leave &lt;emphasis&gt;outside&lt;/emphasis&gt; the container. Valid values are in the range 0-65535 pixels.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_focus_chain"
              c:identifier="gtk_container_set_focus_chain">
        <doc xml:whitespace="preserve">Sets a focus chain, overriding the one computed automatically by GTK+.
In principle each widget in the chain should be a descendant of the 
container, but this is not enforced by this method, since it's allowed 
to set the focus chain before you pack the widgets, or have a widget 
in the chain that isn't always packed. The necessary checks are done 
when the focus chain is actually traversed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="focusable_widgets" transfer-ownership="none">
            <doc xml:whitespace="preserve">the new focus chain</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="Widget"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <method name="set_focus_child"
              c:identifier="gtk_container_set_focus_child">
        <doc xml:whitespace="preserve">Sets, or unsets if @child is %NULL, the focused child of @container.
This function emits the GtkContainer::set_focus_child signal of
default behaviour by overriding the class closure of this signal.
This is function is mostly meant to be used by widgets. Applications can use
gtk_widget_grab_focus() to manualy set the focus to a specific widget.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="child" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">a #GtkWidget, or %NULL</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_focus_hadjustment"
              c:identifier="gtk_container_set_focus_hadjustment">
        <doc xml:whitespace="preserve">Hooks up an adjustment to focus handling in a container, so when a child 
of the container is focused, the adjustment is scrolled to show that 
widget. This function sets the horizontal alignment. 
See gtk_scrolled_window_get_hadjustment() for a typical way of obtaining 
the adjustment and gtk_container_set_focus_vadjustment() for setting
the vertical adjustment.
The adjustments have to be in pixel units and in the same coordinate 
system as the allocation for immediate children of the container.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="adjustment" transfer-ownership="none">
            <doc xml:whitespace="preserve">an adjustment which should be adjusted when the focus is moved among the descendents of @container</doc>
            <type name="Adjustment" c:type="GtkAdjustment*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_focus_vadjustment"
              c:identifier="gtk_container_set_focus_vadjustment">
        <doc xml:whitespace="preserve">Hooks up an adjustment to focus handling in a container, so when a 
child of the container is focused, the adjustment is scrolled to 
show that widget. This function sets the vertical alignment. See 
gtk_scrolled_window_get_vadjustment() for a typical way of obtaining 
the adjustment and gtk_container_set_focus_hadjustment() for setting
the horizontal adjustment.
The adjustments have to be in pixel units and in the same coordinate 
system as the allocation for immediate children of the container.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="adjustment" transfer-ownership="none">
            <doc xml:whitespace="preserve">an adjustment which should be adjusted when the focus is moved among the descendents of @container</doc>
            <type name="Adjustment" c:type="GtkAdjustment*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_reallocate_redraws"
              c:identifier="gtk_container_set_reallocate_redraws">
        <doc xml:whitespace="preserve">Sets the @reallocate_redraws flag of the container to the given value.
Containers requesting reallocation redraws get automatically
redrawn if any of their children changed allocation.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="needs_redraws" transfer-ownership="none">
            <doc xml:whitespace="preserve">the new value for the container's @reallocate_redraws flag</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_resize_mode"
              c:identifier="gtk_container_set_resize_mode">
        <doc xml:whitespace="preserve">Sets the resize mode for the container.
The resize mode of a container determines whether a resize request 
will be passed to the container's parent, queued for later execution
or executed immediately.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="resize_mode" transfer-ownership="none">
            <doc xml:whitespace="preserve">the new resize mode</doc>
            <type name="ResizeMode" c:type="GtkResizeMode"/>
          </parameter>
        </parameters>
      </method>
      <method name="unset_focus_chain"
              c:identifier="gtk_container_unset_focus_chain">
        <doc xml:whitespace="preserve">Removes a focus chain explicitly set with gtk_container_set_focus_chain().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <property name="border-width" writable="1" transfer-ownership="none">
        <type name="guint"/>
      </property>
      <property name="child"
                readable="0"
                writable="1"
                transfer-ownership="none">
        <type name="Widget"/>
      </property>
      <property name="resize-mode" writable="1" transfer-ownership="none">
        <type name="ResizeMode"/>
      </property>
      <field name="widget">
        <type name="Widget" c:type="GtkWidget"/>
      </field>
      <field name="priv">
        <type name="ContainerPrivate" c:type="GtkContainerPrivate*"/>
      </field>
      <glib:signal name="add">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Widget"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="check-resize">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
      <glib:signal name="remove">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Widget"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="set-focus-child">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Widget"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="ContainerClass"
            c:type="GtkContainerClass"
            glib:is-gtype-struct-for="Container">
      <field name="parent_class">
        <type name="WidgetClass" c:type="GtkWidgetClass"/>
      </field>
      <field name="handle_border_width" bits="1">
        <type name="guint" c:type="unsigned"/>
      </field>
      <field name="add">
        <callback name="add">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="container" transfer-ownership="none">
              <type name="Container" c:type="GtkContainer*"/>
            </parameter>
            <parameter name="widget" transfer-ownership="none">
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="remove">
        <callback name="remove">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="container" transfer-ownership="none">
              <type name="Container" c:type="GtkContainer*"/>
            </parameter>
            <parameter name="widget" transfer-ownership="none">
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="check_resize">
        <callback name="check_resize">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="container" transfer-ownership="none">
              <type name="Container" c:type="GtkContainer*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="forall" introspectable="0">
        <callback name="forall" introspectable="0">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="container" transfer-ownership="none">
              <type name="Container" c:type="GtkContainer*"/>
            </parameter>
            <parameter name="include_internals" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
            <parameter name="callback" transfer-ownership="none" closure="3">
              <type name="Callback" c:type="GtkCallback"/>
            </parameter>
            <parameter name="callback_data" transfer-ownership="none">
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_focus_child">
        <callback name="set_focus_child">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="container" transfer-ownership="none">
              <type name="Container" c:type="GtkContainer*"/>
            </parameter>
            <parameter name="widget" transfer-ownership="none">
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="child_type">
        <callback name="child_type">
          <return-value transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GType.</doc>
            <type name="GType" c:type="GType"/>
          </return-value>
          <parameters>
            <parameter name="container" transfer-ownership="none">
              <type name="Container" c:type="GtkContainer*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="composite_name">
        <callback name="composite_name">
          <return-value transfer-ownership="full">
            <type name="utf8" c:type="gchar*"/>
          </return-value>
          <parameters>
            <parameter name="container" transfer-ownership="none">
              <type name="Container" c:type="GtkContainer*"/>
            </parameter>
            <parameter name="child" transfer-ownership="none">
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_child_property">
        <callback name="set_child_property">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="container" transfer-ownership="none">
              <type name="Container" c:type="GtkContainer*"/>
            </parameter>
            <parameter name="child" transfer-ownership="none">
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
            <parameter name="property_id" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="value" transfer-ownership="none">
              <type name="GObject.Value" c:type="GValue*"/>
            </parameter>
            <parameter name="pspec" transfer-ownership="none">
              <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_child_property">
        <callback name="get_child_property">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="container" transfer-ownership="none">
              <type name="Container" c:type="GtkContainer*"/>
            </parameter>
            <parameter name="child" transfer-ownership="none">
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
            <parameter name="property_id" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="value" transfer-ownership="none">
              <type name="GObject.Value" c:type="GValue*"/>
            </parameter>
            <parameter name="pspec" transfer-ownership="none">
              <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_gtk_reserved1" introspectable="0">
        <callback name="_gtk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved2" introspectable="0">
        <callback name="_gtk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved3" introspectable="0">
        <callback name="_gtk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved4" introspectable="0">
        <callback name="_gtk_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <method name="handle_border_width"
              c:identifier="gtk_container_class_handle_border_width">
        <doc xml:whitespace="preserve">Modifies a subclass of #GtkContainerClass to automatically add and
remove the border-width setting on GtkContainer.  This allows the
subclass to ignore the border width in its size request and
allocate methods. The intent is for a subclass to invoke this
in its class_init function.
gtk_container_class_handle_border_width() is necessary because it
would break API too badly to make this behavior the default. So
subclasses must "opt in" to the parent class handling border_width
for them.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="install_child_property"
              c:identifier="gtk_container_class_install_child_property">
        <doc xml:whitespace="preserve">Installs a child property on a container class.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="property_id" transfer-ownership="none">
            <doc xml:whitespace="preserve">the id for the property</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="pspec" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GParamSpec for the property</doc>
            <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <record name="ContainerPrivate" c:type="GtkContainerPrivate" disguised="1">
    </record>
    <enumeration name="CornerType"
                 glib:type-name="GtkCornerType"
                 glib:get-type="gtk_corner_type_get_type"
                 c:type="GtkCornerType">
      <member name="top_left"
              value="0"
              c:identifier="GTK_CORNER_TOP_LEFT"
              glib:nick="top-left"/>
      <member name="bottom_left"
              value="1"
              c:identifier="GTK_CORNER_BOTTOM_LEFT"
              glib:nick="bottom-left"/>
      <member name="top_right"
              value="2"
              c:identifier="GTK_CORNER_TOP_RIGHT"
              glib:nick="top-right"/>
      <member name="bottom_right"
              value="3"
              c:identifier="GTK_CORNER_BOTTOM_RIGHT"
              glib:nick="bottom-right"/>
    </enumeration>
    <bitfield name="DebugFlag"
              glib:type-name="GtkDebugFlag"
              glib:get-type="gtk_debug_flag_get_type"
              c:type="GtkDebugFlag">
      <member name="misc"
              value="1"
              c:identifier="GTK_DEBUG_MISC"
              glib:nick="misc"/>
      <member name="plugsocket"
              value="2"
              c:identifier="GTK_DEBUG_PLUGSOCKET"
              glib:nick="plugsocket"/>
      <member name="text"
              value="4"
              c:identifier="GTK_DEBUG_TEXT"
              glib:nick="text"/>
      <member name="tree"
              value="8"
              c:identifier="GTK_DEBUG_TREE"
              glib:nick="tree"/>
      <member name="updates"
              value="16"
              c:identifier="GTK_DEBUG_UPDATES"
              glib:nick="updates"/>
      <member name="keybindings"
              value="32"
              c:identifier="GTK_DEBUG_KEYBINDINGS"
              glib:nick="keybindings"/>
      <member name="multihead"
              value="64"
              c:identifier="GTK_DEBUG_MULTIHEAD"
              glib:nick="multihead"/>
      <member name="modules"
              value="128"
              c:identifier="GTK_DEBUG_MODULES"
              glib:nick="modules"/>
      <member name="geometry"
              value="256"
              c:identifier="GTK_DEBUG_GEOMETRY"
              glib:nick="geometry"/>
      <member name="icontheme"
              value="512"
              c:identifier="GTK_DEBUG_ICONTHEME"
              glib:nick="icontheme"/>
      <member name="printing"
              value="1024"
              c:identifier="GTK_DEBUG_PRINTING"
              glib:nick="printing"/>
      <member name="builder"
              value="2048"
              c:identifier="GTK_DEBUG_BUILDER"
              glib:nick="builder"/>
      <member name="size_request"
              value="4096"
              c:identifier="GTK_DEBUG_SIZE_REQUEST"
              glib:nick="size-request"/>
    </bitfield>
    <enumeration name="DeleteType"
                 glib:type-name="GtkDeleteType"
                 glib:get-type="gtk_delete_type_get_type"
                 c:type="GtkDeleteType">
      <member name="chars"
              value="0"
              c:identifier="GTK_DELETE_CHARS"
              glib:nick="chars"/>
      <member name="word_ends"
              value="1"
              c:identifier="GTK_DELETE_WORD_ENDS"
              glib:nick="word-ends"/>
      <member name="words"
              value="2"
              c:identifier="GTK_DELETE_WORDS"
              glib:nick="words"/>
      <member name="display_lines"
              value="3"
              c:identifier="GTK_DELETE_DISPLAY_LINES"
              glib:nick="display-lines"/>
      <member name="display_line_ends"
              value="4"
              c:identifier="GTK_DELETE_DISPLAY_LINE_ENDS"
              glib:nick="display-line-ends"/>
      <member name="paragraph_ends"
              value="5"
              c:identifier="GTK_DELETE_PARAGRAPH_ENDS"
              glib:nick="paragraph-ends"/>
      <member name="paragraphs"
              value="6"
              c:identifier="GTK_DELETE_PARAGRAPHS"
              glib:nick="paragraphs"/>
      <member name="whitespace"
              value="7"
              c:identifier="GTK_DELETE_WHITESPACE"
              glib:nick="whitespace"/>
    </enumeration>
    <bitfield name="DestDefaults"
              glib:type-name="GtkDestDefaults"
              glib:get-type="gtk_dest_defaults_get_type"
              c:type="GtkDestDefaults">
      <member name="motion"
              value="1"
              c:identifier="GTK_DEST_DEFAULT_MOTION"
              glib:nick="motion"/>
      <member name="highlight"
              value="2"
              c:identifier="GTK_DEST_DEFAULT_HIGHLIGHT"
              glib:nick="highlight"/>
      <member name="drop"
              value="4"
              c:identifier="GTK_DEST_DEFAULT_DROP"
              glib:nick="drop"/>
      <member name="all"
              value="7"
              c:identifier="GTK_DEST_DEFAULT_ALL"
              glib:nick="all"/>
    </bitfield>
    <class name="Dialog"
           c:symbol-prefix="dialog"
           c:type="GtkDialog"
           parent="Window"
           glib:type-name="GtkDialog"
           glib:get-type="gtk_dialog_get_type"
           glib:type-struct="DialogClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Buildable"/>
      <implements name="SizeRequest"/>
      <constructor name="new" c:identifier="gtk_dialog_new">
        <return-value transfer-ownership="none">
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <constructor name="new_with_buttons"
                   c:identifier="gtk_dialog_new_with_buttons"
                   introspectable="0">
        <doc xml:whitespace="preserve">Creates a new #GtkDialog with title @title (or %NULL for the default
title; see gtk_window_set_title()) and transient parent @parent (or
%NULL for none; see gtk_window_set_transient_for()). The @flags
argument can be used to make the dialog modal (#GTK_DIALOG_MODAL)
and/or to have it destroyed along with its transient parent
(#GTK_DIALOG_DESTROY_WITH_PARENT). After @flags, button
text/response ID pairs should be listed, with a %NULL pointer ending
the list. Button text can be either a stock ID such as
#GTK_STOCK_OK, or some arbitrary text. A response ID can be
any positive number, or one of the values in the #GtkResponseType
enumeration. If the user clicks one of these dialog buttons,
#GtkDialog will emit the #GtkDialog::response signal with the corresponding
response ID. If a #GtkDialog receives the #GtkWidget::delete-event signal, 
it will emit ::response with a response ID of #GTK_RESPONSE_DELETE_EVENT.
However, destroying a dialog does not emit the ::response signal;
so be careful relying on ::response when using the 
#GTK_DIALOG_DESTROY_WITH_PARENT flag. Buttons are from left to right,
so the first button in the list will be the leftmost button in the dialog.
Here's a simple example:
|[
GtkWidget *dialog = gtk_dialog_new_with_buttons ("My dialog",
main_app_window,
GTK_DIALOG_MODAL | GTK_DIALOG_DESTROY_WITH_PARENT,
GTK_STOCK_OK,
GTK_RESPONSE_ACCEPT,
GTK_STOCK_CANCEL,
GTK_RESPONSE_REJECT,
NULL);
]|</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a new #GtkDialog</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="title" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">Title of the dialog, or %NULL</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="parent" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">Transient parent of the dialog, or %NULL</doc>
            <type name="Window" c:type="GtkWindow*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:whitespace="preserve">from #GtkDialogFlags</doc>
            <type name="DialogFlags" c:type="GtkDialogFlags"/>
          </parameter>
          <parameter name="first_button_text"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">stock ID or text to go in first button, or %NULL</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter transfer-ownership="none">
            <varargs>
            </varargs>
          </parameter>
        </parameters>
      </constructor>
      <method name="add_action_widget"
              c:identifier="gtk_dialog_add_action_widget">
        <doc xml:whitespace="preserve">Adds an activatable widget to the action area of a #GtkDialog,
connecting a signal handler that will emit the #GtkDialog::response 
signal on the dialog when the widget is activated. The widget is 
appended to the end of the dialog's action area. If you want to add a
non-activatable widget, simply pack it into the @action_area field 
of the #GtkDialog struct.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="child" transfer-ownership="none">
            <doc xml:whitespace="preserve">an activatable widget</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="response_id" transfer-ownership="none">
            <doc xml:whitespace="preserve">response ID for @child</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_button" c:identifier="gtk_dialog_add_button">
        <doc xml:whitespace="preserve">Adds a button with the given text (or a stock button, if @button_text is a
stock ID) and sets things up so that clicking the button will emit the
#GtkDialog::response signal with the given @response_id. The button is 
appended to the end of the dialog's action area. The button widget is 
returned, but usually you don't need it.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the button widget that was added</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="button_text" transfer-ownership="none">
            <doc xml:whitespace="preserve">text of button, or stock ID</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="response_id" transfer-ownership="none">
            <doc xml:whitespace="preserve">response ID for the button</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_buttons"
              c:identifier="gtk_dialog_add_buttons"
              introspectable="0">
        <doc xml:whitespace="preserve">Adds more buttons, same as calling gtk_dialog_add_button()
repeatedly.  The variable argument list should be %NULL-terminated
as with gtk_dialog_new_with_buttons(). Each button must have both
text and response ID.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="first_button_text" transfer-ownership="none">
            <doc xml:whitespace="preserve">button text or stock ID</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter transfer-ownership="none">
            <varargs>
            </varargs>
          </parameter>
        </parameters>
      </method>
      <method name="get_action_area"
              c:identifier="gtk_dialog_get_action_area"
              version="2.14">
        <doc xml:whitespace="preserve">Returns the action area of @dialog.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the action area.</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
      </method>
      <method name="get_content_area"
              c:identifier="gtk_dialog_get_content_area"
              version="2.14">
        <doc xml:whitespace="preserve">Returns the content area of @dialog.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the content area #GtkVBox.</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
      </method>
      <method name="get_response_for_widget"
              c:identifier="gtk_dialog_get_response_for_widget"
              version="2.8">
        <doc xml:whitespace="preserve">Gets the response id of a widget in the action area
of a dialog.
if @widget doesn't have a response id set.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the response id of @widget, or %GTK_RESPONSE_NONE</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <parameter name="widget" transfer-ownership="none">
            <doc xml:whitespace="preserve">a widget in the action area of @dialog</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_widget_for_response"
              c:identifier="gtk_dialog_get_widget_for_response"
              version="2.20">
        <doc xml:whitespace="preserve">Gets the widget button that uses the given response ID in the action area
of a dialog.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the @widget button that uses the given @response_id, or %NULL.</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="response_id" transfer-ownership="none">
            <doc xml:whitespace="preserve">the response ID used by the @dialog widget</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="response" c:identifier="gtk_dialog_response">
        <doc xml:whitespace="preserve">Emits the #GtkDialog::response signal with the given response ID. 
Used to indicate that the user has responded to the dialog in some way;
typically either you or gtk_dialog_run() will be monitoring the
::response signal and take appropriate action.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="response_id" transfer-ownership="none">
            <doc xml:whitespace="preserve">response ID</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="run" c:identifier="gtk_dialog_run">
        <doc xml:whitespace="preserve">Blocks in a recursive main loop until the @dialog either emits the
#GtkDialog::response signal, or is destroyed. If the dialog is 
destroyed during the call to gtk_dialog_run(), gtk_dialog_run() returns 
#GTK_RESPONSE_NONE. Otherwise, it returns the response ID from the 
::response signal emission.
Before entering the recursive main loop, gtk_dialog_run() calls
gtk_widget_show() on the dialog for you. Note that you still
need to show any children of the dialog yourself.
During gtk_dialog_run(), the default behavior of #GtkWidget::delete-event 
is disabled; if the dialog receives ::delete_event, it will not be
destroyed as windows usually are, and gtk_dialog_run() will return
#GTK_RESPONSE_DELETE_EVENT. Also, during gtk_dialog_run() the dialog 
will be modal. You can force gtk_dialog_run() to return at any time by
calling gtk_dialog_response() to emit the ::response signal. Destroying 
the dialog during gtk_dialog_run() is a very bad idea, because your 
post-run code won't know whether the dialog was destroyed or not.
After gtk_dialog_run() returns, you are responsible for hiding or
destroying the dialog if you wish to do so.
Typical usage of this function might be:
|[
gint result = gtk_dialog_run (GTK_DIALOG (dialog));
switch (result)
{
case GTK_RESPONSE_ACCEPT:
do_application_specific_something ();
break;
default:
do_nothing_since_dialog_was_cancelled ();
break;
}
gtk_widget_destroy (dialog);
]|
Note that even though the recursive main loop gives the effect of a
modal dialog (it prevents the user from interacting with other 
windows in the same window group while the dialog is run), callbacks 
such as timeouts, IO channel watches, DND drops, etc, &lt;emphasis&gt;will&lt;/emphasis&gt; 
be triggered during a gtk_dialog_run() call.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">response ID</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="set_alternative_button_order"
              c:identifier="gtk_dialog_set_alternative_button_order"
              version="2.6"
              introspectable="0">
        <doc xml:whitespace="preserve">Sets an alternative button order. If the 
#GtkSettings:gtk-alternative-button-order setting is set to %TRUE, 
the dialog buttons are reordered according to the order of the 
response ids passed to this function.
By default, GTK+ dialogs use the button order advocated by the Gnome 
&lt;ulink url="http://developer.gnome.org/projects/gup/hig/2.0/"&gt;Human 
Interface Guidelines&lt;/ulink&gt; with the affirmative button at the far 
right, and the cancel button left of it. But the builtin GTK+ dialogs
and #GtkMessageDialog&lt;!-- --&gt;s do provide an alternative button order,
which is more suitable on some platforms, e.g. Windows.
Use this function after adding all the buttons to your dialog, as the 
following example shows:
|[
cancel_button = gtk_dialog_add_button (GTK_DIALOG (dialog),
GTK_STOCK_CANCEL,
GTK_RESPONSE_CANCEL);
ok_button = gtk_dialog_add_button (GTK_DIALOG (dialog),
GTK_STOCK_OK,
GTK_RESPONSE_OK);
gtk_widget_grab_default (ok_button);
help_button = gtk_dialog_add_button (GTK_DIALOG (dialog),
GTK_STOCK_HELP,
GTK_RESPONSE_HELP);
gtk_dialog_set_alternative_button_order (GTK_DIALOG (dialog),
GTK_RESPONSE_OK,
GTK_RESPONSE_CANCEL,
GTK_RESPONSE_HELP,
-1);
]|</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="first_response_id" transfer-ownership="none">
            <doc xml:whitespace="preserve">a response id used by one @dialog's buttons</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter transfer-ownership="none">
            <varargs>
            </varargs>
          </parameter>
        </parameters>
      </method>
      <method name="set_alternative_button_order_from_array"
              c:identifier="gtk_dialog_set_alternative_button_order_from_array"
              version="2.6">
        <doc xml:whitespace="preserve">Sets an alternative button order. If the 
#GtkSettings:gtk-alternative-button-order setting is set to %TRUE, 
the dialog buttons are reordered according to the order of the 
response ids in @new_order.
See gtk_dialog_set_alternative_button_order() for more information.
This function is for use by language bindings.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="n_params" transfer-ownership="none">
            <doc xml:whitespace="preserve">the number of response ids in @new_order</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="new_order" transfer-ownership="none">
            <doc xml:whitespace="preserve">an array of response ids of @dialog's buttons</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_default_response"
              c:identifier="gtk_dialog_set_default_response">
        <doc xml:whitespace="preserve">Sets the last widget in the dialog's action area with the given @response_id
as the default widget for the dialog. Pressing "Enter" normally activates
the default widget.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="response_id" transfer-ownership="none">
            <doc xml:whitespace="preserve">a response ID</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_response_sensitive"
              c:identifier="gtk_dialog_set_response_sensitive">
        <doc xml:whitespace="preserve">Calls &lt;literal&gt;gtk_widget_set_sensitive (widget, @setting)&lt;/literal&gt; 
for each widget in the dialog's action area with the given @response_id.
A convenient way to sensitize/desensitize dialog buttons.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="response_id" transfer-ownership="none">
            <doc xml:whitespace="preserve">a response ID</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="setting" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE for sensitive</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <field name="window">
        <type name="Window" c:type="GtkWindow"/>
      </field>
      <field name="priv">
        <type name="DialogPrivate" c:type="GtkDialogPrivate*"/>
      </field>
      <glib:signal name="close">
        <doc xml:whitespace="preserve">The ::close signal is a 
&lt;link linkend="keybinding-signals"&gt;keybinding signal&lt;/link&gt;
which gets emitted when the user uses a keybinding to close
the dialog.
The default binding for this signal is the Escape key.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
      <glib:signal name="response">
        <doc xml:whitespace="preserve">Emitted when an action widget is clicked, the dialog receives a 
delete event, or the application programmer calls gtk_dialog_response(). 
On a delete event, the response ID is #GTK_RESPONSE_DELETE_EVENT. 
Otherwise, it depends on which action widget was clicked.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the response ID</doc>
            <type name="gint"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="DialogClass"
            c:type="GtkDialogClass"
            glib:is-gtype-struct-for="Dialog">
      <field name="parent_class">
        <type name="WindowClass" c:type="GtkWindowClass"/>
      </field>
      <field name="response">
        <callback name="response">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="dialog" transfer-ownership="none">
              <type name="Dialog" c:type="GtkDialog*"/>
            </parameter>
            <parameter name="response_id" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="close">
        <callback name="close">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="dialog" transfer-ownership="none">
              <type name="Dialog" c:type="GtkDialog*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_gtk_reserved1" introspectable="0">
        <callback name="_gtk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved2" introspectable="0">
        <callback name="_gtk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved3" introspectable="0">
        <callback name="_gtk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved4" introspectable="0">
        <callback name="_gtk_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <bitfield name="DialogFlags"
              glib:type-name="GtkDialogFlags"
              glib:get-type="gtk_dialog_flags_get_type"
              c:type="GtkDialogFlags">
      <member name="modal"
              value="1"
              c:identifier="GTK_DIALOG_MODAL"
              glib:nick="modal"/>
      <member name="destroy_with_parent"
              value="2"
              c:identifier="GTK_DIALOG_DESTROY_WITH_PARENT"
              glib:nick="destroy-with-parent"/>
    </bitfield>
    <record name="DialogPrivate" c:type="GtkDialogPrivate" disguised="1">
    </record>
    <enumeration name="DirectionType"
                 glib:type-name="GtkDirectionType"
                 glib:get-type="gtk_direction_type_get_type"
                 c:type="GtkDirectionType">
      <member name="tab_forward"
              value="0"
              c:identifier="GTK_DIR_TAB_FORWARD"
              glib:nick="tab-forward"/>
      <member name="tab_backward"
              value="1"
              c:identifier="GTK_DIR_TAB_BACKWARD"
              glib:nick="tab-backward"/>
      <member name="up" value="2" c:identifier="GTK_DIR_UP" glib:nick="up"/>
      <member name="down"
              value="3"
              c:identifier="GTK_DIR_DOWN"
              glib:nick="down"/>
      <member name="left"
              value="4"
              c:identifier="GTK_DIR_LEFT"
              glib:nick="left"/>
      <member name="right"
              value="5"
              c:identifier="GTK_DIR_RIGHT"
              glib:nick="right"/>
    </enumeration>
    <enumeration name="DragResult"
                 glib:type-name="GtkDragResult"
                 glib:get-type="gtk_drag_result_get_type"
                 c:type="GtkDragResult">
      <member name="success"
              value="0"
              c:identifier="GTK_DRAG_RESULT_SUCCESS"
              glib:nick="success"/>
      <member name="no_target"
              value="1"
              c:identifier="GTK_DRAG_RESULT_NO_TARGET"
              glib:nick="no-target"/>
      <member name="user_cancelled"
              value="2"
              c:identifier="GTK_DRAG_RESULT_USER_CANCELLED"
              glib:nick="user-cancelled"/>
      <member name="timeout_expired"
              value="3"
              c:identifier="GTK_DRAG_RESULT_TIMEOUT_EXPIRED"
              glib:nick="timeout-expired"/>
      <member name="grab_broken"
              value="4"
              c:identifier="GTK_DRAG_RESULT_GRAB_BROKEN"
              glib:nick="grab-broken"/>
      <member name="error"
              value="5"
              c:identifier="GTK_DRAG_RESULT_ERROR"
              glib:nick="error"/>
    </enumeration>
    <class name="DrawingArea"
           c:symbol-prefix="drawing_area"
           c:type="GtkDrawingArea"
           parent="Widget"
           glib:type-name="GtkDrawingArea"
           glib:get-type="gtk_drawing_area_get_type"
           glib:type-struct="DrawingAreaClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Buildable"/>
      <implements name="SizeRequest"/>
      <constructor name="new" c:identifier="gtk_drawing_area_new">
        <return-value transfer-ownership="none">
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <field name="widget">
        <type name="Widget" c:type="GtkWidget"/>
      </field>
      <field name="draw_data">
        <type name="gpointer" c:type="gpointer"/>
      </field>
    </class>
    <record name="DrawingAreaClass"
            c:type="GtkDrawingAreaClass"
            glib:is-gtype-struct-for="DrawingArea">
      <field name="parent_class">
        <type name="WidgetClass" c:type="GtkWidgetClass"/>
      </field>
      <field name="_gtk_reserved1" introspectable="0">
        <callback name="_gtk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved2" introspectable="0">
        <callback name="_gtk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved3" introspectable="0">
        <callback name="_gtk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved4" introspectable="0">
        <callback name="_gtk_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <interface name="Editable"
               c:symbol-prefix="editable"
               c:type="GtkEditable"
               glib:type-name="GtkEditable"
               glib:get-type="gtk_editable_get_type"
               glib:type-struct="EditableInterface">
      <virtual-method name="do_delete_text">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="start_pos" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="end_pos" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="do_insert_text">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="text" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="length" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="position" transfer-ownership="none">
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_chars" invoker="get_chars">
        <doc xml:whitespace="preserve">Retrieves a sequence of characters. The characters that are retrieved 
are those characters at positions from @start_pos up to, but not 
including @end_pos. If @end_pos is negative, then the the characters 
retrieved are those characters from @start_pos to the end of the text.
Note that positions are specified in characters, not bytes.
string. This string is allocated by the #GtkEditable
implementation and should be freed by the caller.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a pointer to the contents of the widget as a</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="start_pos" transfer-ownership="none">
            <doc xml:whitespace="preserve">start of text</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="end_pos" transfer-ownership="none">
            <doc xml:whitespace="preserve">end of text</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_position" invoker="get_position">
        <doc xml:whitespace="preserve">Retrieves the current position of the cursor relative to the start
of the content of the editable. 
Note that this position is in characters, not in bytes.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the cursor position</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </virtual-method>
      <virtual-method name="get_selection_bounds"
                      invoker="get_selection_bounds">
        <doc xml:whitespace="preserve">Retrieves the selection bound of the editable. start_pos will be filled
with the start of the selection and @end_pos with end. If no text was
selected both will be identical and %FALSE will be returned.
Note that positions are specified in characters, not bytes.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if an area is selected, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="start_pos"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     allow-none="1">
            <doc xml:whitespace="preserve">location to store the starting position, or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="end_pos"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     allow-none="1">
            <doc xml:whitespace="preserve">location to store the end position, or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_position" invoker="set_position">
        <doc xml:whitespace="preserve">Sets the cursor position in the editable to the given value.
The cursor is displayed before the character with the given (base 0) 
index in the contents of the editable. The value must be less than or 
equal to the number of characters in the editable. A value of -1 
indicates that the position should be set after the last character 
of the editable. Note that @position is in characters, not in bytes.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="position" transfer-ownership="none">
            <doc xml:whitespace="preserve">the position of the cursor</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_selection_bounds">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="start_pos" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="end_pos" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="copy_clipboard" c:identifier="gtk_editable_copy_clipboard">
        <doc xml:whitespace="preserve">Copies the contents of the currently selected content in the editable and
puts it on the clipboard.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="cut_clipboard" c:identifier="gtk_editable_cut_clipboard">
        <doc xml:whitespace="preserve">Removes the contents of the currently selected content in the editable and
puts it on the clipboard.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="delete_selection"
              c:identifier="gtk_editable_delete_selection">
        <doc xml:whitespace="preserve">Deletes the currently selected text of the editable.
This call doesn't do anything if there is no selected text.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="delete_text" c:identifier="gtk_editable_delete_text">
        <doc xml:whitespace="preserve">Deletes a sequence of characters. The characters that are deleted are 
those characters at positions from @start_pos up to, but not including 
are those from @start_pos to the end of the text.
Note that the positions are specified in characters, not bytes.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="start_pos" transfer-ownership="none">
            <doc xml:whitespace="preserve">start position</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="end_pos" transfer-ownership="none">
            <doc xml:whitespace="preserve">end position</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_chars" c:identifier="gtk_editable_get_chars">
        <doc xml:whitespace="preserve">Retrieves a sequence of characters. The characters that are retrieved 
are those characters at positions from @start_pos up to, but not 
including @end_pos. If @end_pos is negative, then the the characters 
retrieved are those characters from @start_pos to the end of the text.
Note that positions are specified in characters, not bytes.
string. This string is allocated by the #GtkEditable
implementation and should be freed by the caller.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a pointer to the contents of the widget as a</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="start_pos" transfer-ownership="none">
            <doc xml:whitespace="preserve">start of text</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="end_pos" transfer-ownership="none">
            <doc xml:whitespace="preserve">end of text</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_editable" c:identifier="gtk_editable_get_editable">
        <doc xml:whitespace="preserve">Retrieves whether @editable is editable. See
gtk_editable_set_editable().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if @editable is editable.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_position" c:identifier="gtk_editable_get_position">
        <doc xml:whitespace="preserve">Retrieves the current position of the cursor relative to the start
of the content of the editable. 
Note that this position is in characters, not in bytes.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the cursor position</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="get_selection_bounds"
              c:identifier="gtk_editable_get_selection_bounds">
        <doc xml:whitespace="preserve">Retrieves the selection bound of the editable. start_pos will be filled
with the start of the selection and @end_pos with end. If no text was
selected both will be identical and %FALSE will be returned.
Note that positions are specified in characters, not bytes.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if an area is selected, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="start_pos"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     allow-none="1">
            <doc xml:whitespace="preserve">location to store the starting position, or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="end_pos"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     allow-none="1">
            <doc xml:whitespace="preserve">location to store the end position, or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="insert_text" c:identifier="gtk_editable_insert_text">
        <doc xml:whitespace="preserve">Inserts @new_text_length bytes of @new_text into the contents of the
widget, at position @position.
Note that the position is in characters, not in bytes. 
The function updates @position to point after the newly inserted text.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="new_text" transfer-ownership="none">
            <doc xml:whitespace="preserve">the text to append</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="new_text_length" transfer-ownership="none">
            <doc xml:whitespace="preserve">the length of the text in bytes, or -1</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="position"
                     direction="inout"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:whitespace="preserve">location of the position text will be inserted at</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="paste_clipboard"
              c:identifier="gtk_editable_paste_clipboard">
        <doc xml:whitespace="preserve">Pastes the content of the clipboard to the current position of the
cursor in the editable.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="select_region" c:identifier="gtk_editable_select_region">
        <doc xml:whitespace="preserve">Selects a region of text. The characters that are selected are 
those characters at positions from @start_pos up to, but not 
including @end_pos. If @end_pos is negative, then the the 
characters selected are those characters from @start_pos to 
the end of the text.
Note that positions are specified in characters, not bytes.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="start_pos" transfer-ownership="none">
            <doc xml:whitespace="preserve">start of region</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="end_pos" transfer-ownership="none">
            <doc xml:whitespace="preserve">end of region</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_editable" c:identifier="gtk_editable_set_editable">
        <doc xml:whitespace="preserve">Determines if the user can edit the text in the editable
widget or not.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="is_editable" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE if the user is allowed to edit the text in the widget</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_position" c:identifier="gtk_editable_set_position">
        <doc xml:whitespace="preserve">Sets the cursor position in the editable to the given value.
The cursor is displayed before the character with the given (base 0) 
index in the contents of the editable. The value must be less than or 
equal to the number of characters in the editable. A value of -1 
indicates that the position should be set after the last character 
of the editable. Note that @position is in characters, not in bytes.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="position" transfer-ownership="none">
            <doc xml:whitespace="preserve">the position of the cursor</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <glib:signal name="changed">
        <doc xml:whitespace="preserve">The ::changed signal is emitted at the end of a single
user-visible operation on the contents of the #GtkEditable.
E.g., a paste operation that replaces the contents of the
selection will cause only one signal emission (even though it
is implemented by first deleting the selection, then inserting
the new content, and may cause multiple ::notify::text signals
to be emitted).</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
      <glib:signal name="delete-text">
        <doc xml:whitespace="preserve">This signal is emitted when text is deleted from
the widget by the user. The default handler for
this signal will normally be responsible for deleting
the text, so by connecting to this signal and then
stopping the signal with g_signal_stop_emission(), it
is possible to modify the range of deleted text, or
prevent it from being deleted entirely. The @start_pos
and @end_pos parameters are interpreted as for
gtk_editable_delete_text().</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the starting position</doc>
            <type name="gint"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <doc xml:whitespace="preserve">the end position</doc>
            <type name="gint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="insert-text">
        <doc xml:whitespace="preserve">This signal is emitted when text is inserted into
the widget by the user. The default handler for
this signal will normally be responsible for inserting
the text, so by connecting to this signal and then
stopping the signal with g_signal_stop_emission(), it
is possible to modify the inserted text, or prevent
it from being inserted entirely.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the new text to insert</doc>
            <type name="utf8"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <doc xml:whitespace="preserve">the length of the new text, in bytes, or -1 if new_text is nul-terminated</doc>
            <type name="gint"/>
          </parameter>
          <parameter name="p1" transfer-ownership="none">
            <doc xml:whitespace="preserve">the position, in characters, at which to insert the new text. this is an in-out parameter. After the signal emission is finished, it should point after the newly inserted text.</doc>
            <type name="gpointer"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="EditableInterface"
            c:type="GtkEditableInterface"
            glib:is-gtype-struct-for="Editable">
      <field name="base_iface">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="insert_text">
        <callback name="insert_text">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="editable" transfer-ownership="none">
              <type name="Editable" c:type="GtkEditable*"/>
            </parameter>
            <parameter name="text" transfer-ownership="none">
              <type name="utf8" c:type="gchar*"/>
            </parameter>
            <parameter name="length" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="position" transfer-ownership="none">
              <type name="gint" c:type="gint*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="delete_text">
        <callback name="delete_text">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="editable" transfer-ownership="none">
              <type name="Editable" c:type="GtkEditable*"/>
            </parameter>
            <parameter name="start_pos" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="end_pos" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="changed">
        <callback name="changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="editable" transfer-ownership="none">
              <type name="Editable" c:type="GtkEditable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="do_insert_text">
        <callback name="do_insert_text">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="editable" transfer-ownership="none">
              <type name="Editable" c:type="GtkEditable*"/>
            </parameter>
            <parameter name="text" transfer-ownership="none">
              <type name="utf8" c:type="gchar*"/>
            </parameter>
            <parameter name="length" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="position" transfer-ownership="none">
              <type name="gint" c:type="gint*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="do_delete_text">
        <callback name="do_delete_text">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="editable" transfer-ownership="none">
              <type name="Editable" c:type="GtkEditable*"/>
            </parameter>
            <parameter name="start_pos" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="end_pos" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_chars">
        <callback name="get_chars">
          <return-value transfer-ownership="full">
            <doc xml:whitespace="preserve">a pointer to the contents of the widget as a</doc>
            <type name="utf8" c:type="gchar*"/>
          </return-value>
          <parameters>
            <parameter name="editable" transfer-ownership="none">
              <type name="Editable" c:type="GtkEditable*"/>
            </parameter>
            <parameter name="start_pos" transfer-ownership="none">
              <doc xml:whitespace="preserve">start of text</doc>
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="end_pos" transfer-ownership="none">
              <doc xml:whitespace="preserve">end of text</doc>
              <type name="gint" c:type="gint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_selection_bounds">
        <callback name="set_selection_bounds">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="editable" transfer-ownership="none">
              <type name="Editable" c:type="GtkEditable*"/>
            </parameter>
            <parameter name="start_pos" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="end_pos" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_selection_bounds">
        <callback name="get_selection_bounds">
          <return-value transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE if an area is selected, %FALSE otherwise</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="editable" transfer-ownership="none">
              <type name="Editable" c:type="GtkEditable*"/>
            </parameter>
            <parameter name="start_pos"
                       direction="out"
                       caller-allocates="0"
                       transfer-ownership="full"
                       allow-none="1">
              <doc xml:whitespace="preserve">location to store the starting position, or %NULL</doc>
              <type name="gint" c:type="gint*"/>
            </parameter>
            <parameter name="end_pos"
                       direction="out"
                       caller-allocates="0"
                       transfer-ownership="full"
                       allow-none="1">
              <doc xml:whitespace="preserve">location to store the end position, or %NULL</doc>
              <type name="gint" c:type="gint*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_position">
        <callback name="set_position">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="editable" transfer-ownership="none">
              <type name="Editable" c:type="GtkEditable*"/>
            </parameter>
            <parameter name="position" transfer-ownership="none">
              <doc xml:whitespace="preserve">the position of the cursor</doc>
              <type name="gint" c:type="gint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_position">
        <callback name="get_position">
          <return-value transfer-ownership="none">
            <doc xml:whitespace="preserve">the cursor position</doc>
            <type name="gint" c:type="gint"/>
          </return-value>
          <parameters>
            <parameter name="editable" transfer-ownership="none">
              <type name="Editable" c:type="GtkEditable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="Entry"
           c:symbol-prefix="entry"
           c:type="GtkEntry"
           parent="Widget"
           glib:type-name="GtkEntry"
           glib:get-type="gtk_entry_get_type"
           glib:type-struct="EntryClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Buildable"/>
      <implements name="CellEditable"/>
      <implements name="Editable"/>
      <implements name="SizeRequest"/>
      <constructor name="new" c:identifier="gtk_entry_new">
        <doc xml:whitespace="preserve">Creates a new entry.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a new #GtkEntry.</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <constructor name="new_with_buffer"
                   c:identifier="gtk_entry_new_with_buffer"
                   version="2.18">
        <doc xml:whitespace="preserve">Creates a new entry with the specified text buffer.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a new #GtkEntry</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="buffer" transfer-ownership="none">
            <doc xml:whitespace="preserve">The buffer to use for the new #GtkEntry.</doc>
            <type name="EntryBuffer" c:type="GtkEntryBuffer*"/>
          </parameter>
        </parameters>
      </constructor>
      <virtual-method name="get_text_area_size">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="x" transfer-ownership="none">
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="get_activates_default"
              c:identifier="gtk_entry_get_activates_default">
        <doc xml:whitespace="preserve">Retrieves the value set by gtk_entry_set_activates_default().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the entry will activate the default widget</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_alignment"
              c:identifier="gtk_entry_get_alignment"
              version="2.4">
        <doc xml:whitespace="preserve">Gets the value set by gtk_entry_set_alignment().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the alignment</doc>
          <type name="gfloat" c:type="gfloat"/>
        </return-value>
      </method>
      <method name="get_buffer"
              c:identifier="gtk_entry_get_buffer"
              version="2.18">
        <doc xml:whitespace="preserve">Get the #GtkEntryBuffer object which holds the text for
this widget.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">A #GtkEntryBuffer object.</doc>
          <type name="EntryBuffer" c:type="GtkEntryBuffer*"/>
        </return-value>
      </method>
      <method name="get_completion"
              c:identifier="gtk_entry_get_completion"
              version="2.4">
        <doc xml:whitespace="preserve">Returns the auxiliary completion object currently in use by @entry.
in use by @entry.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The auxiliary completion object currently</doc>
          <type name="EntryCompletion" c:type="GtkEntryCompletion*"/>
        </return-value>
      </method>
      <method name="get_current_icon_drag_source"
              c:identifier="gtk_entry_get_current_icon_drag_source"
              version="2.16">
        <doc xml:whitespace="preserve">Returns the index of the icon which is the source of the current
DND operation, or -1.
This function is meant to be used in a #GtkWidget::drag-data-get
callback.
DND operation, or -1.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">index of the icon which is the source of the current</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="get_cursor_hadjustment"
              c:identifier="gtk_entry_get_cursor_hadjustment"
              version="2.12">
        <doc xml:whitespace="preserve">Retrieves the horizontal cursor adjustment for the entry. 
See gtk_entry_set_cursor_hadjustment().
if none has been set.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the horizontal cursor adjustment, or %NULL</doc>
          <type name="Adjustment" c:type="GtkAdjustment*"/>
        </return-value>
      </method>
      <method name="get_has_frame" c:identifier="gtk_entry_get_has_frame">
        <doc xml:whitespace="preserve">Gets the value set by gtk_entry_set_has_frame().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">whether the entry has a beveled frame</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_icon_activatable"
              c:identifier="gtk_entry_get_icon_activatable"
              version="2.16">
        <doc xml:whitespace="preserve">Returns whether the icon is activatable.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the icon is activatable.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="icon_pos" transfer-ownership="none">
            <doc xml:whitespace="preserve">Icon position</doc>
            <type name="EntryIconPosition" c:type="GtkEntryIconPosition"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_icon_at_pos"
              c:identifier="gtk_entry_get_icon_at_pos"
              version="2.16">
        <doc xml:whitespace="preserve">Finds the icon at the given position and return its index.
If @x, @y doesn't lie inside an icon, -1 is returned.
This function is intended for use in a #GtkWidget::query-tooltip
signal handler.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the index of the icon at the given position, or -1</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <parameter name="x" transfer-ownership="none">
            <doc xml:whitespace="preserve">the x coordinate of the position to find</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:whitespace="preserve">the y coordinate of the position to find</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_icon_gicon"
              c:identifier="gtk_entry_get_icon_gicon"
              version="2.16">
        <doc xml:whitespace="preserve">Retrieves the #GIcon used for the icon, or %NULL if there is
no icon or if the icon was set by some other method (e.g., by
stock, pixbuf, or icon name).
or if the icon is not a #GIcon</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">A #GIcon, or %NULL if no icon is set</doc>
          <type name="Gio.Icon" c:type="GIcon*"/>
        </return-value>
        <parameters>
          <parameter name="icon_pos" transfer-ownership="none">
            <doc xml:whitespace="preserve">Icon position</doc>
            <type name="EntryIconPosition" c:type="GtkEntryIconPosition"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_icon_name"
              c:identifier="gtk_entry_get_icon_name"
              version="2.16">
        <doc xml:whitespace="preserve">Retrieves the icon name used for the icon, or %NULL if there is
no icon or if the icon was set by some other method (e.g., by
pixbuf, stock or gicon).
wasn't set from an icon name</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">An icon name, or %NULL if no icon is set or if the icon</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="icon_pos" transfer-ownership="none">
            <doc xml:whitespace="preserve">Icon position</doc>
            <type name="EntryIconPosition" c:type="GtkEntryIconPosition"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_icon_pixbuf"
              c:identifier="gtk_entry_get_icon_pixbuf"
              version="2.16">
        <doc xml:whitespace="preserve">Retrieves the image used for the icon.
Unlike the other methods of setting and getting icon data, this
method will work regardless of whether the icon was set using a
#GdkPixbuf, a #GIcon, a stock item, or an icon name.
set for this position.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">A #GdkPixbuf, or %NULL if no icon is</doc>
          <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
        <parameters>
          <parameter name="icon_pos" transfer-ownership="none">
            <doc xml:whitespace="preserve">Icon position</doc>
            <type name="EntryIconPosition" c:type="GtkEntryIconPosition"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_icon_sensitive"
              c:identifier="gtk_entry_get_icon_sensitive"
              version="2.16">
        <doc xml:whitespace="preserve">Returns whether the icon appears sensitive or insensitive.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the icon is sensitive.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="icon_pos" transfer-ownership="none">
            <doc xml:whitespace="preserve">Icon position</doc>
            <type name="EntryIconPosition" c:type="GtkEntryIconPosition"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_icon_stock"
              c:identifier="gtk_entry_get_icon_stock"
              version="2.16">
        <doc xml:whitespace="preserve">Retrieves the stock id used for the icon, or %NULL if there is
no icon or if the icon was set by some other method (e.g., by
pixbuf, icon name or gicon).
wasn't set from a stock id</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">A stock id, or %NULL if no icon is set or if the icon</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="icon_pos" transfer-ownership="none">
            <doc xml:whitespace="preserve">Icon position</doc>
            <type name="EntryIconPosition" c:type="GtkEntryIconPosition"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_icon_storage_type"
              c:identifier="gtk_entry_get_icon_storage_type"
              version="2.16">
        <doc xml:whitespace="preserve">Gets the type of representation being used by the icon
to store image data. If the icon has no image data,
the return value will be %GTK_IMAGE_EMPTY.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">image representation being used</doc>
          <type name="ImageType" c:type="GtkImageType"/>
        </return-value>
        <parameters>
          <parameter name="icon_pos" transfer-ownership="none">
            <doc xml:whitespace="preserve">Icon position</doc>
            <type name="EntryIconPosition" c:type="GtkEntryIconPosition"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_icon_tooltip_markup"
              c:identifier="gtk_entry_get_icon_tooltip_markup"
              version="2.16">
        <doc xml:whitespace="preserve">Gets the contents of the tooltip on the icon at the specified 
position in @entry.
with g_free() when done.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the tooltip text, or %NULL. Free the returned string</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="icon_pos" transfer-ownership="none">
            <doc xml:whitespace="preserve">the icon position</doc>
            <type name="EntryIconPosition" c:type="GtkEntryIconPosition"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_icon_tooltip_text"
              c:identifier="gtk_entry_get_icon_tooltip_text"
              version="2.16">
        <doc xml:whitespace="preserve">Gets the contents of the tooltip on the icon at the specified 
position in @entry.
with g_free() when done.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the tooltip text, or %NULL. Free the returned string</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="icon_pos" transfer-ownership="none">
            <doc xml:whitespace="preserve">the icon position</doc>
            <type name="EntryIconPosition" c:type="GtkEntryIconPosition"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_icon_window"
              c:identifier="gtk_entry_get_icon_window"
              version="2.20">
        <doc xml:whitespace="preserve">Returns the #GdkWindow which contains the entry's icon at
entry in an expose-event callback because it enables the callback
to distinguish between the text window and entry's icon windows.
See also gtk_entry_get_text_window().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the entry's icon window at @icon_pos.</doc>
          <type name="Gdk.Window" c:type="GdkWindow*"/>
        </return-value>
        <parameters>
          <parameter name="icon_pos" transfer-ownership="none">
            <doc xml:whitespace="preserve">Icon position</doc>
            <type name="EntryIconPosition" c:type="GtkEntryIconPosition"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_inner_border"
              c:identifier="gtk_entry_get_inner_border"
              version="2.10">
        <doc xml:whitespace="preserve">This function returns the entry's #GtkEntry:inner-border property. See
gtk_entry_set_inner_border() for more information.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the entry's #GtkBorder, or %NULL if none was set.</doc>
          <type name="Border" c:type="GtkBorder*"/>
        </return-value>
      </method>
      <method name="get_invisible_char"
              c:identifier="gtk_entry_get_invisible_char"
              introspectable="0">
        <doc xml:whitespace="preserve">Retrieves the character displayed in place of the real characters
for entries with visibility set to false. See gtk_entry_set_invisible_char().
show invisible text at all.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the current invisible char, or 0, if the entry does not</doc>
          <type name="gunichar" c:type="gunichar"/>
        </return-value>
      </method>
      <method name="get_layout" c:identifier="gtk_entry_get_layout">
        <doc xml:whitespace="preserve">Gets the #PangoLayout used to display the entry.
The layout is useful to e.g. convert text positions to
pixel positions, in combination with gtk_entry_get_layout_offsets().
The returned layout is owned by the entry and must not be 
modified or freed by the caller.
Keep in mind that the layout text may contain a preedit string, so
gtk_entry_layout_index_to_text_index() and
gtk_entry_text_index_to_layout_index() are needed to convert byte
indices in the layout to byte indices in the entry contents.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the #PangoLayout for this entry</doc>
          <type name="Pango.Layout" c:type="PangoLayout*"/>
        </return-value>
      </method>
      <method name="get_layout_offsets"
              c:identifier="gtk_entry_get_layout_offsets">
        <doc xml:whitespace="preserve">Obtains the position of the #PangoLayout used to render text
in the entry, in widget coordinates. Useful if you want to line
up the text in an entry with some other text, e.g. when using the
entry to implement editable cells in a sheet widget.
Also useful to convert mouse events into coordinates inside the
#PangoLayout, e.g. to take some action if some part of the entry text
is clicked.
Note that as the user scrolls around in the entry the offsets will
change; you'll need to connect to the "notify::scroll-offset"
signal to track this. Remember when using the #PangoLayout
functions you need to convert to and from pixels using
PANGO_PIXELS() or #PANGO_SCALE.
Keep in mind that the layout text may contain a preedit string, so
gtk_entry_layout_index_to_text_index() and
gtk_entry_text_index_to_layout_index() are needed to convert byte
indices in the layout to byte indices in the entry contents.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="x" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">location to store X offset of layout, or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="y" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">location to store Y offset of layout, or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_max_length" c:identifier="gtk_entry_get_max_length">
        <doc xml:whitespace="preserve">Retrieves the maximum allowed length of the text in
This is equivalent to:
&lt;informalexample&gt;&lt;programlisting&gt;
gtk_entry_buffer_get_max_length (gtk_entry_get_buffer (entry));
&lt;/programlisting&gt;&lt;/informalexample&gt;
in #GtkEntry, or 0 if there is no maximum.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the maximum allowed number of characters</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="get_overwrite_mode"
              c:identifier="gtk_entry_get_overwrite_mode"
              version="2.14">
        <doc xml:whitespace="preserve">Gets the value set by gtk_entry_set_overwrite_mode().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">whether the text is overwritten when typing.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_progress_fraction"
              c:identifier="gtk_entry_get_progress_fraction"
              version="2.16">
        <doc xml:whitespace="preserve">Returns the current fraction of the task that's been completed.
See gtk_entry_set_progress_fraction().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a fraction from 0.0 to 1.0</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </method>
      <method name="get_progress_pulse_step"
              c:identifier="gtk_entry_get_progress_pulse_step"
              version="2.16">
        <doc xml:whitespace="preserve">Retrieves the pulse step set with gtk_entry_set_progress_pulse_step().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a fraction from 0.0 to 1.0</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </method>
      <method name="get_text" c:identifier="gtk_entry_get_text">
        <doc xml:whitespace="preserve">Retrieves the contents of the entry widget.
See also gtk_editable_get_chars().
This is equivalent to:
&lt;informalexample&gt;&lt;programlisting&gt;
gtk_entry_buffer_get_text (gtk_entry_get_buffer (entry));
&lt;/programlisting&gt;&lt;/informalexample&gt;
string. This string points to internally allocated
storage in the widget and must not be freed, modified or
stored.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a pointer to the contents of the widget as a</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_text_length"
              c:identifier="gtk_entry_get_text_length"
              version="2.14">
        <doc xml:whitespace="preserve">Retrieves the current length of the text in
This is equivalent to:
&lt;informalexample&gt;&lt;programlisting&gt;
gtk_entry_buffer_get_length (gtk_entry_get_buffer (entry));
&lt;/programlisting&gt;&lt;/informalexample&gt;
in #GtkEntry, or 0 if there are none.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the current number of characters</doc>
          <type name="guint16" c:type="guint16"/>
        </return-value>
      </method>
      <method name="get_text_window"
              c:identifier="gtk_entry_get_text_window"
              version="2.20">
        <doc xml:whitespace="preserve">Returns the #GdkWindow which contains the text. This function is
useful when drawing something to the entry in an expose-event
callback because it enables the callback to distinguish between
the text window and entry's icon windows.
See also gtk_entry_get_icon_window().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the entry's text window.</doc>
          <type name="Gdk.Window" c:type="GdkWindow*"/>
        </return-value>
      </method>
      <method name="get_visibility" c:identifier="gtk_entry_get_visibility">
        <doc xml:whitespace="preserve">Retrieves whether the text in @entry is visible. See
gtk_entry_set_visibility().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the text is currently visible</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_width_chars" c:identifier="gtk_entry_get_width_chars">
        <doc xml:whitespace="preserve">Gets the value set by gtk_entry_set_width_chars().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">number of chars to request space for, or negative if unset</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="im_context_filter_keypress"
              c:identifier="gtk_entry_im_context_filter_keypress"
              version="2.22">
        <doc xml:whitespace="preserve">Allow the #GtkEntry input method to internally handle key press
and release events. If this function returns %TRUE, then no further
processing should be done for this key event. See
gtk_im_context_filter_keypress().
Note that you are expected to call this function from your handler
when overriding key event handling. This is needed in the case when
you need to insert your own key handling between the input method
and the default key event handling of the #GtkEntry.
See gtk_text_view_reset_im_context() for an example of use.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the input method handled the key event.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="event" transfer-ownership="none">
            <doc xml:whitespace="preserve">the key event</doc>
            <type name="Gdk.EventKey" c:type="GdkEventKey*"/>
          </parameter>
        </parameters>
      </method>
      <method name="layout_index_to_text_index"
              c:identifier="gtk_entry_layout_index_to_text_index">
        <doc xml:whitespace="preserve">Converts from a position in the entry contents (returned
by gtk_entry_get_text()) to a position in the
entry's #PangoLayout (returned by gtk_entry_get_layout(),
with text retrieved via pango_layout_get_text()).</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">byte index into the entry contents</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <parameter name="layout_index" transfer-ownership="none">
            <doc xml:whitespace="preserve">byte index into the entry layout text</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="progress_pulse"
              c:identifier="gtk_entry_progress_pulse"
              version="2.16">
        <doc xml:whitespace="preserve">Indicates that some progress is made, but you don't know how much.
Causes the entry's progress indicator to enter "activity mode,"
where a block bounces back and forth. Each call to
gtk_entry_progress_pulse() causes the block to move by a little bit
(the amount of movement per pulse is determined by
gtk_entry_set_progress_pulse_step()).</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="reset_im_context"
              c:identifier="gtk_entry_reset_im_context"
              version="2.22">
        <doc xml:whitespace="preserve">Reset the input method context of the entry if needed.
This can be necessary in the case where modifying the buffer
would confuse on-going input method behavior.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="set_activates_default"
              c:identifier="gtk_entry_set_activates_default">
        <doc xml:whitespace="preserve">If @setting is %TRUE, pressing Enter in the @entry will activate the default
widget for the window containing the entry. This usually means that
the dialog box containing the entry will be closed, since the default
widget is usually one of the dialog buttons.
(For experts: if @setting is %TRUE, the entry calls
gtk_window_activate_default() on the window containing the entry, in
the default handler for the #GtkWidget::activate signal.)</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="setting" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE to activate window's default widget on Enter keypress</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_alignment"
              c:identifier="gtk_entry_set_alignment"
              version="2.4">
        <doc xml:whitespace="preserve">Sets the alignment for the contents of the entry. This controls
the horizontal positioning of the contents when the displayed
text is shorter than the width of the entry.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="xalign" transfer-ownership="none">
            <doc xml:whitespace="preserve">The horizontal alignment, from 0 (left) to 1 (right). Reversed for RTL layouts</doc>
            <type name="gfloat" c:type="gfloat"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_buffer"
              c:identifier="gtk_entry_set_buffer"
              version="2.18">
        <doc xml:whitespace="preserve">Set the #GtkEntryBuffer object which holds the text for
this widget.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="buffer" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkEntryBuffer</doc>
            <type name="EntryBuffer" c:type="GtkEntryBuffer*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_completion"
              c:identifier="gtk_entry_set_completion"
              version="2.4">
        <doc xml:whitespace="preserve">Sets @completion to be the auxiliary completion object to use with @entry.
All further configuration of the completion mechanism is done on</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="completion"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">The #GtkEntryCompletion or %NULL</doc>
            <type name="EntryCompletion" c:type="GtkEntryCompletion*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_cursor_hadjustment"
              c:identifier="gtk_entry_set_cursor_hadjustment"
              version="2.12">
        <doc xml:whitespace="preserve">Hooks up an adjustment to the cursor position in an entry, so that when 
the cursor is moved, the adjustment is scrolled to show that position. 
See gtk_scrolled_window_get_hadjustment() for a typical way of obtaining 
the adjustment.
The adjustment has to be in pixel units and in the same coordinate system 
as the entry.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="adjustment" transfer-ownership="none">
            <doc xml:whitespace="preserve">an adjustment which should be adjusted when the cursor is moved, or %NULL</doc>
            <type name="Adjustment" c:type="GtkAdjustment*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_has_frame" c:identifier="gtk_entry_set_has_frame">
        <doc xml:whitespace="preserve">Sets whether the entry has a beveled frame around it.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="setting" transfer-ownership="none">
            <doc xml:whitespace="preserve">new value</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_icon_activatable"
              c:identifier="gtk_entry_set_icon_activatable"
              version="2.16">
        <doc xml:whitespace="preserve">Sets whether the icon is activatable.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="icon_pos" transfer-ownership="none">
            <doc xml:whitespace="preserve">Icon position</doc>
            <type name="EntryIconPosition" c:type="GtkEntryIconPosition"/>
          </parameter>
          <parameter name="activatable" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE if the icon should be activatable</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_icon_drag_source"
              c:identifier="gtk_entry_set_icon_drag_source"
              version="2.16">
        <doc xml:whitespace="preserve">Sets up the icon at the given position so that GTK+ will start a drag
operation when the user clicks and drags the icon.
To handle the drag operation, you need to connect to the usual
#GtkWidget::drag-data-get (or possibly #GtkWidget::drag-data-delete)
signal, and use gtk_entry_get_current_icon_drag_source() in
your signal handler to find out if the drag was started from
an icon.
By default, GTK+ uses the icon as the drag icon. You can use the 
#GtkWidget::drag-begin signal to set a different icon. Note that you 
have to use g_signal_connect_after() to ensure that your signal handler
gets executed after the default handler.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="icon_pos" transfer-ownership="none">
            <doc xml:whitespace="preserve">icon position</doc>
            <type name="EntryIconPosition" c:type="GtkEntryIconPosition"/>
          </parameter>
          <parameter name="target_list" transfer-ownership="none">
            <doc xml:whitespace="preserve">the targets (data formats) in which the data can be provided</doc>
            <type name="TargetList" c:type="GtkTargetList*"/>
          </parameter>
          <parameter name="actions" transfer-ownership="none">
            <doc xml:whitespace="preserve">a bitmask of the allowed drag actions</doc>
            <type name="Gdk.DragAction" c:type="GdkDragAction"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_icon_from_gicon"
              c:identifier="gtk_entry_set_icon_from_gicon"
              version="2.16">
        <doc xml:whitespace="preserve">Sets the icon shown in the entry at the specified position
from the current icon theme.
If the icon isn't known, a "broken image" icon will be displayed
instead.
If @icon is %NULL, no icon will be shown in the specified position.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="icon_pos" transfer-ownership="none">
            <doc xml:whitespace="preserve">The position at which to set the icon</doc>
            <type name="EntryIconPosition" c:type="GtkEntryIconPosition"/>
          </parameter>
          <parameter name="icon" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">The icon to set, or %NULL</doc>
            <type name="Gio.Icon" c:type="GIcon*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_icon_from_icon_name"
              c:identifier="gtk_entry_set_icon_from_icon_name"
              version="2.16">
        <doc xml:whitespace="preserve">Sets the icon shown in the entry at the specified position
from the current icon theme.
If the icon name isn't known, a "broken image" icon will be displayed
instead.
If @icon_name is %NULL, no icon will be shown in the specified position.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="icon_pos" transfer-ownership="none">
            <doc xml:whitespace="preserve">The position at which to set the icon</doc>
            <type name="EntryIconPosition" c:type="GtkEntryIconPosition"/>
          </parameter>
          <parameter name="icon_name" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">An icon name, or %NULL</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_icon_from_pixbuf"
              c:identifier="gtk_entry_set_icon_from_pixbuf"
              version="2.16">
        <doc xml:whitespace="preserve">Sets the icon shown in the specified position using a pixbuf.
If @pixbuf is %NULL, no icon will be shown in the specified position.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="icon_pos" transfer-ownership="none">
            <doc xml:whitespace="preserve">Icon position</doc>
            <type name="EntryIconPosition" c:type="GtkEntryIconPosition"/>
          </parameter>
          <parameter name="pixbuf" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">A #GdkPixbuf, or %NULL</doc>
            <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_icon_from_stock"
              c:identifier="gtk_entry_set_icon_from_stock"
              version="2.16">
        <doc xml:whitespace="preserve">Sets the icon shown in the entry at the specified position from
a stock image.
If @stock_id is %NULL, no icon will be shown in the specified position.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="icon_pos" transfer-ownership="none">
            <doc xml:whitespace="preserve">Icon position</doc>
            <type name="EntryIconPosition" c:type="GtkEntryIconPosition"/>
          </parameter>
          <parameter name="stock_id" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">The name of the stock item, or %NULL</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_icon_sensitive"
              c:identifier="gtk_entry_set_icon_sensitive"
              version="2.16">
        <doc xml:whitespace="preserve">Sets the sensitivity for the specified icon.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="icon_pos" transfer-ownership="none">
            <doc xml:whitespace="preserve">Icon position</doc>
            <type name="EntryIconPosition" c:type="GtkEntryIconPosition"/>
          </parameter>
          <parameter name="sensitive" transfer-ownership="none">
            <doc xml:whitespace="preserve">Specifies whether the icon should appear sensitive or insensitive</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_icon_tooltip_markup"
              c:identifier="gtk_entry_set_icon_tooltip_markup"
              version="2.16">
        <doc xml:whitespace="preserve">Sets @tooltip as the contents of the tooltip for the icon at
the specified position. @tooltip is assumed to be marked up with
the &lt;link linkend="PangoMarkupFormat"&gt;Pango text markup language&lt;/link&gt;.
Use %NULL for @tooltip to remove an existing tooltip.
See also gtk_widget_set_tooltip_markup() and 
gtk_enty_set_icon_tooltip_text().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="icon_pos" transfer-ownership="none">
            <doc xml:whitespace="preserve">the icon position</doc>
            <type name="EntryIconPosition" c:type="GtkEntryIconPosition"/>
          </parameter>
          <parameter name="tooltip" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">the contents of the tooltip for the icon, or %NULL</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_icon_tooltip_text"
              c:identifier="gtk_entry_set_icon_tooltip_text"
              version="2.16">
        <doc xml:whitespace="preserve">Sets @tooltip as the contents of the tooltip for the icon
at the specified position.
Use %NULL for @tooltip to remove an existing tooltip.
See also gtk_widget_set_tooltip_text() and 
gtk_entry_set_icon_tooltip_markup().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="icon_pos" transfer-ownership="none">
            <doc xml:whitespace="preserve">the icon position</doc>
            <type name="EntryIconPosition" c:type="GtkEntryIconPosition"/>
          </parameter>
          <parameter name="tooltip" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">the contents of the tooltip for the icon, or %NULL</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_inner_border"
              c:identifier="gtk_entry_set_inner_border"
              version="2.10">
        <doc xml:whitespace="preserve">Sets %entry's inner-border property to %border, or clears it if %NULL
is passed. The inner-border is the area around the entry's text, but
inside its frame.
If set, this property overrides the inner-border style property.
Overriding the style-provided border is useful when you want to do
in-place editing of some text in a canvas or list widget, where
pixel-exact positioning of the entry is important.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="border" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">a #GtkBorder, or %NULL</doc>
            <type name="Border" c:type="GtkBorder*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_invisible_char"
              c:identifier="gtk_entry_set_invisible_char"
              introspectable="0">
        <doc xml:whitespace="preserve">Sets the character to use in place of the actual text when
gtk_entry_set_visibility() has been called to set text visibility
to %FALSE. i.e. this is the character used in "password mode" to
show the user how many characters have been typed. By default, GTK+
picks the best invisible char available in the current font. If you
set the invisible char to 0, then the user will get no feedback
at all; there will be no text on the screen as they type.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="ch" transfer-ownership="none">
            <doc xml:whitespace="preserve">a Unicode character</doc>
            <type name="gunichar" c:type="gunichar"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_max_length" c:identifier="gtk_entry_set_max_length">
        <doc xml:whitespace="preserve">Sets the maximum allowed length of the contents of the widget. If
the current contents are longer than the given length, then they
will be truncated to fit.
This is equivalent to:
&lt;informalexample&gt;&lt;programlisting&gt;
gtk_entry_buffer_set_max_length (gtk_entry_get_buffer (entry), max);
&lt;/programlisting&gt;&lt;/informalexample&gt;</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="max" transfer-ownership="none">
            <doc xml:whitespace="preserve">the maximum length of the entry, or 0 for no maximum. (other than the maximum length of entries.) The value passed in will be clamped to the range 0-65536.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_overwrite_mode"
              c:identifier="gtk_entry_set_overwrite_mode"
              version="2.14">
        <doc xml:whitespace="preserve">Sets whether the text is overwritten when typing in the #GtkEntry.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="overwrite" transfer-ownership="none">
            <doc xml:whitespace="preserve">new value</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_progress_fraction"
              c:identifier="gtk_entry_set_progress_fraction"
              version="2.16">
        <doc xml:whitespace="preserve">Causes the entry's progress indicator to "fill in" the given
fraction of the bar. The fraction should be between 0.0 and 1.0,
inclusive.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="fraction" transfer-ownership="none">
            <doc xml:whitespace="preserve">fraction of the task that's been completed</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_progress_pulse_step"
              c:identifier="gtk_entry_set_progress_pulse_step"
              version="2.16">
        <doc xml:whitespace="preserve">Sets the fraction of total entry width to move the progress
bouncing block for each call to gtk_entry_progress_pulse().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="fraction" transfer-ownership="none">
            <doc xml:whitespace="preserve">fraction between 0.0 and 1.0</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_text" c:identifier="gtk_entry_set_text">
        <doc xml:whitespace="preserve">Sets the text in the widget to the given
value, replacing the current contents.
See gtk_entry_buffer_set_text().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="text" transfer-ownership="none">
            <doc xml:whitespace="preserve">the new text</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_visibility" c:identifier="gtk_entry_set_visibility">
        <doc xml:whitespace="preserve">Sets whether the contents of the entry are visible or not. 
When visibility is set to %FALSE, characters are displayed 
as the invisible char, and will also appear that way when 
the text in the entry widget is copied elsewhere.
By default, GTK+ picks the best invisible character available
in the current font, but it can be changed with
gtk_entry_set_invisible_char().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="visible" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE if the contents of the entry are displayed as plaintext</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_width_chars" c:identifier="gtk_entry_set_width_chars">
        <doc xml:whitespace="preserve">Changes the size request of the entry to be about the right size
for @n_chars characters. Note that it changes the size
&lt;emphasis&gt;request&lt;/emphasis&gt;, the size can still be affected by
how you pack the widget into containers. If @n_chars is -1, the
size reverts to the default entry size.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="n_chars" transfer-ownership="none">
            <doc xml:whitespace="preserve">width in chars</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="text_index_to_layout_index"
              c:identifier="gtk_entry_text_index_to_layout_index">
        <doc xml:whitespace="preserve">Converts from a position in the entry's #PangoLayout (returned by
gtk_entry_get_layout()) to a position in the entry contents
(returned by gtk_entry_get_text()).</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">byte index into the entry layout text</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <parameter name="text_index" transfer-ownership="none">
            <doc xml:whitespace="preserve">byte index into the entry contents</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="unset_invisible_char"
              c:identifier="gtk_entry_unset_invisible_char"
              version="2.16">
        <doc xml:whitespace="preserve">Unsets the invisible char previously set with
gtk_entry_set_invisible_char(). So that the
default invisible char is used again.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <property name="activates-default"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="buffer"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="EntryBuffer"/>
      </property>
      <property name="caps-lock-warning"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="cursor-position" transfer-ownership="none">
        <type name="gint"/>
      </property>
      <property name="editable" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="has-frame" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="im-module"
                version="2.16"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Which IM (input method) module should be used for this entry. 
See #GtkIMContext.
Setting this to a non-%NULL value overrides the
system-wide IM module setting. See the GtkSettings 
#GtkSettings:gtk-im-module property.</doc>
        <type name="utf8"/>
      </property>
      <property name="inner-border"
                version="2.10"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Sets the text area's border between the text and the frame.</doc>
        <type name="Border"/>
      </property>
      <property name="invisible-char"
                version="2.18"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The invisible character is used when masking entry contents (in
\"password mode\")"). When it is not explicitly set with the
#GtkEntry::invisible-char property, GTK+ determines the character
to use from a list of possible candidates, depending on availability
in the current font.
This style property allows the theme to prepend a character
to the list of candidates.</doc>
        <type name="guint"/>
      </property>
      <property name="invisible-char-set"
                version="2.16"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Whether the invisible char has been set for the #GtkEntry.</doc>
        <type name="gboolean"/>
      </property>
      <property name="max-length" writable="1" transfer-ownership="none">
        <type name="gint"/>
      </property>
      <property name="overwrite-mode"
                version="2.14"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">If text is overwritten when typing in the #GtkEntry.</doc>
        <type name="gboolean"/>
      </property>
      <property name="primary-icon-activatable"
                version="2.16"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Whether the primary icon is activatable.
GTK+ emits the #GtkEntry::icon-press and #GtkEntry::icon-release 
signals only on sensitive, activatable icons. 
Sensitive, but non-activatable icons can be used for purely 
informational purposes.</doc>
        <type name="gboolean"/>
      </property>
      <property name="primary-icon-gicon"
                version="2.16"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The #GIcon to use for the primary icon for the entry.</doc>
        <type name="Gio.Icon"/>
      </property>
      <property name="primary-icon-name"
                version="2.16"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The icon name to use for the primary icon for the entry.</doc>
        <type name="utf8"/>
      </property>
      <property name="primary-icon-pixbuf"
                version="2.16"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">A pixbuf to use as the primary icon for the entry.</doc>
        <type name="GdkPixbuf.Pixbuf"/>
      </property>
      <property name="primary-icon-sensitive"
                version="2.16"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Whether the primary icon is sensitive.
An insensitive icon appears grayed out. GTK+ does not emit the 
#GtkEntry::icon-press and #GtkEntry::icon-release signals and 
does not allow DND from insensitive icons.
An icon should be set insensitive if the action that would trigger
when clicked is currently not available.</doc>
        <type name="gboolean"/>
      </property>
      <property name="primary-icon-stock"
                version="2.16"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The stock id to use for the primary icon for the entry.</doc>
        <type name="utf8"/>
      </property>
      <property name="primary-icon-storage-type"
                version="2.16"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The representation which is used for the primary icon of the entry.</doc>
        <type name="ImageType"/>
      </property>
      <property name="primary-icon-tooltip-markup"
                version="2.16"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The contents of the tooltip on the primary icon, which is marked up
with the &lt;link linkend="PangoMarkupFormat"&gt;Pango text markup 
language&lt;/link&gt;.
Also see gtk_entry_set_icon_tooltip_markup().</doc>
        <type name="utf8"/>
      </property>
      <property name="primary-icon-tooltip-text"
                version="2.16"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The contents of the tooltip on the primary icon.
Also see gtk_entry_set_icon_tooltip_text().</doc>
        <type name="utf8"/>
      </property>
      <property name="progress-fraction"
                version="2.16"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The current fraction of the task that's been completed.</doc>
        <type name="gdouble"/>
      </property>
      <property name="progress-pulse-step"
                version="2.16"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The fraction of total entry width to move the progress
bouncing block for each call to gtk_entry_progress_pulse().</doc>
        <type name="gdouble"/>
      </property>
      <property name="scroll-offset" transfer-ownership="none">
        <type name="gint"/>
      </property>
      <property name="secondary-icon-activatable"
                version="2.16"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Whether the secondary icon is activatable.
GTK+ emits the #GtkEntry::icon-press and #GtkEntry::icon-release 
signals only on sensitive, activatable icons.
Sensitive, but non-activatable icons can be used for purely 
informational purposes.</doc>
        <type name="gboolean"/>
      </property>
      <property name="secondary-icon-gicon"
                version="2.16"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The #GIcon to use for the secondary icon for the entry.</doc>
        <type name="Gio.Icon"/>
      </property>
      <property name="secondary-icon-name"
                version="2.16"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The icon name to use for the secondary icon for the entry.</doc>
        <type name="utf8"/>
      </property>
      <property name="secondary-icon-pixbuf"
                version="2.16"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">An pixbuf to use as the secondary icon for the entry.</doc>
        <type name="GdkPixbuf.Pixbuf"/>
      </property>
      <property name="secondary-icon-sensitive"
                version="2.16"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Whether the secondary icon is sensitive.
An insensitive icon appears grayed out. GTK+ does not emit the 
#GtkEntry::icon-press and #GtkEntry::icon-release signals and 
does not allow DND from insensitive icons.
An icon should be set insensitive if the action that would trigger
when clicked is currently not available.</doc>
        <type name="gboolean"/>
      </property>
      <property name="secondary-icon-stock"
                version="2.16"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The stock id to use for the secondary icon for the entry.</doc>
        <type name="utf8"/>
      </property>
      <property name="secondary-icon-storage-type"
                version="2.16"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The representation which is used for the secondary icon of the entry.</doc>
        <type name="ImageType"/>
      </property>
      <property name="secondary-icon-tooltip-markup"
                version="2.16"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The contents of the tooltip on the secondary icon, which is marked up
with the &lt;link linkend="PangoMarkupFormat"&gt;Pango text markup 
language&lt;/link&gt;.
Also see gtk_entry_set_icon_tooltip_markup().</doc>
        <type name="utf8"/>
      </property>
      <property name="secondary-icon-tooltip-text"
                version="2.16"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The contents of the tooltip on the secondary icon.
Also see gtk_entry_set_icon_tooltip_text().</doc>
        <type name="utf8"/>
      </property>
      <property name="selection-bound" transfer-ownership="none">
        <type name="gint"/>
      </property>
      <property name="shadow-type"
                version="2.12"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Which kind of shadow to draw around the entry when 
#GtkEntry:has-frame is set to %TRUE.</doc>
        <type name="ShadowType"/>
      </property>
      <property name="text" writable="1" transfer-ownership="none">
        <type name="utf8"/>
      </property>
      <property name="text-length" version="2.14" transfer-ownership="none">
        <doc xml:whitespace="preserve">The length of the text in the #GtkEntry.</doc>
        <type name="guint"/>
      </property>
      <property name="truncate-multiline"
                version="2.10"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">When %TRUE, pasted multi-line text is truncated to the first line.</doc>
        <type name="gboolean"/>
      </property>
      <property name="visibility" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="width-chars" writable="1" transfer-ownership="none">
        <type name="gint"/>
      </property>
      <property name="xalign"
                version="2.4"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The horizontal alignment, from 0 (left) to 1 (right). 
Reversed for RTL layouts.</doc>
        <type name="gfloat"/>
      </property>
      <field name="widget">
        <type name="Widget" c:type="GtkWidget"/>
      </field>
      <field name="editable" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="visible" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="overwrite_mode" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="in_drag" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="text_area">
        <type name="Gdk.Window" c:type="GdkWindow*"/>
      </field>
      <field name="im_context">
        <type name="IMContext" c:type="GtkIMContext*"/>
      </field>
      <field name="popup_menu">
        <type name="Widget" c:type="GtkWidget*"/>
      </field>
      <field name="current_pos">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="selection_bound">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="cached_layout">
        <type name="Pango.Layout" c:type="PangoLayout*"/>
      </field>
      <field name="cache_includes_preedit" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="need_im_reset" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="has_frame" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="activates_default" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="cursor_visible" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="in_click" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="is_cell_renderer" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="editing_canceled" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="mouse_cursor_obscured" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="select_words" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="select_lines" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="resolved_dir" bits="4">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="truncate_multiline" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="button">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="blink_timeout">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="recompute_idle">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="scroll_offset">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="ascent">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="descent">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="x_text_size">
        <type name="guint16" c:type="guint16"/>
      </field>
      <field name="x_n_bytes">
        <type name="guint16" c:type="guint16"/>
      </field>
      <field name="preedit_length">
        <type name="guint16" c:type="guint16"/>
      </field>
      <field name="preedit_cursor">
        <type name="guint16" c:type="guint16"/>
      </field>
      <field name="dnd_position">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="drag_start_x">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="drag_start_y">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="invisible_char" introspectable="0">
        <type name="gunichar" c:type="gunichar"/>
      </field>
      <field name="width_chars">
        <type name="gint" c:type="gint"/>
      </field>
      <glib:signal name="activate">
        <doc xml:whitespace="preserve">A  &lt;link linkend="keybinding-signals"&gt;keybinding signal&lt;/link&gt;
which gets emitted when the user activates the entry.
Applications should not connect to it, but may emit it with
g_signal_emit_by_name() if they need to control activation 
programmatically.
The default bindings for this signal are all forms of the Enter key.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
      <glib:signal name="backspace">
        <doc xml:whitespace="preserve">The ::backspace signal is a
&lt;link linkend="keybinding-signals"&gt;keybinding signal&lt;/link&gt;
which gets emitted when the user asks for it.
The default bindings for this signal are
Backspace and Shift-Backspace.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
      <glib:signal name="copy-clipboard">
        <doc xml:whitespace="preserve">The ::copy-clipboard signal is a
&lt;link linkend="keybinding-signals"&gt;keybinding signal&lt;/link&gt;
which gets emitted to copy the selection to the clipboard.
The default bindings for this signal are
Ctrl-c and Ctrl-Insert.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
      <glib:signal name="cut-clipboard">
        <doc xml:whitespace="preserve">The ::cut-clipboard signal is a
&lt;link linkend="keybinding-signals"&gt;keybinding signal&lt;/link&gt;
which gets emitted to cut the selection to the clipboard.
The default bindings for this signal are
Ctrl-x and Shift-Delete.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
      <glib:signal name="delete-from-cursor">
        <doc xml:whitespace="preserve">The ::delete-from-cursor signal is a
&lt;link linkend="keybinding-signals"&gt;keybinding signal&lt;/link&gt;
which gets emitted when the user initiates a text deletion.
If the @type is %GTK_DELETE_CHARS, GTK+ deletes the selection
if there is one, otherwise it deletes the requested number
of characters.
The default bindings for this signal are
Delete for deleting a character and Ctrl-Delete for
deleting a word.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the granularity of the deletion, as a #GtkDeleteType</doc>
            <type name="DeleteType"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <doc xml:whitespace="preserve">the number of @type units to delete</doc>
            <type name="gint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="icon-press" version="2.16">
        <doc xml:whitespace="preserve">The ::icon-press signal is emitted when an activatable icon
is clicked.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">The position of the clicked icon</doc>
            <type name="EntryIconPosition"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <doc xml:whitespace="preserve">the button press event</doc>
            <type name="Gdk.Event"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="icon-release" version="2.16">
        <doc xml:whitespace="preserve">The ::icon-release signal is emitted on the button release from a
mouse click over an activatable icon.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">The position of the clicked icon</doc>
            <type name="EntryIconPosition"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <doc xml:whitespace="preserve">the button release event</doc>
            <type name="Gdk.Event"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="insert-at-cursor">
        <doc xml:whitespace="preserve">The ::insert-at-cursor signal is a
&lt;link linkend="keybinding-signals"&gt;keybinding signal&lt;/link&gt;
which gets emitted when the user initiates the insertion of a
fixed string at the cursor.
This signal has no default bindings.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the string to insert</doc>
            <type name="utf8"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="move-cursor">
        <doc xml:whitespace="preserve">The ::move-cursor signal is a
&lt;link linkend="keybinding-signals"&gt;keybinding signal&lt;/link&gt;
which gets emitted when the user initiates a cursor movement.
If the cursor is not visible in @entry, this signal causes
the viewport to be moved instead.
Applications should not connect to it, but may emit it with
g_signal_emit_by_name() if they need to control the cursor
programmatically.
The default bindings for this signal come in two variants,
the variant with the Shift modifier extends the selection,
the variant without the Shift modifer does not.
There are too many key combinations to list them all here.
&lt;itemizedlist&gt;
&lt;listitem&gt;Arrow keys move by individual characters/lines&lt;/listitem&gt;
&lt;listitem&gt;Ctrl-arrow key combinations move by words/paragraphs&lt;/listitem&gt;
&lt;listitem&gt;Home/End keys move to the ends of the buffer&lt;/listitem&gt;
&lt;/itemizedlist&gt;</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the granularity of the move, as a #GtkMovementStep</doc>
            <type name="MovementStep"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <doc xml:whitespace="preserve">the number of @step units to move</doc>
            <type name="gint"/>
          </parameter>
          <parameter name="p1" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE if the move should extend the selection</doc>
            <type name="gboolean"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="paste-clipboard">
        <doc xml:whitespace="preserve">The ::paste-clipboard signal is a
&lt;link linkend="keybinding-signals"&gt;keybinding signal&lt;/link&gt;
which gets emitted to paste the contents of the clipboard
into the text view.
The default bindings for this signal are
Ctrl-v and Shift-Insert.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
      <glib:signal name="populate-popup">
        <doc xml:whitespace="preserve">The ::populate-popup signal gets emitted before showing the 
context menu of the entry. 
If you need to add items to the context menu, connect
to this signal and append your menuitems to the @menu.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the menu that is being populated</doc>
            <type name="Menu"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="preedit-changed" version="2.20">
        <doc xml:whitespace="preserve">If an input method is used, the typed text will not immediately
be committed to the buffer. So if you are interested in the text,
connect to this signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the current preedit string</doc>
            <type name="utf8"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="toggle-overwrite">
        <doc xml:whitespace="preserve">The ::toggle-overwrite signal is a
&lt;link linkend="keybinding-signals"&gt;keybinding signal&lt;/link&gt;
which gets emitted to toggle the overwrite mode of the entry.
The default bindings for this signal is Insert.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
    </class>
    <class name="EntryBuffer"
           c:symbol-prefix="entry_buffer"
           c:type="GtkEntryBuffer"
           parent="GObject.Object"
           glib:type-name="GtkEntryBuffer"
           glib:get-type="gtk_entry_buffer_get_type"
           glib:type-struct="EntryBufferClass">
      <constructor name="new"
                   c:identifier="gtk_entry_buffer_new"
                   version="2.18">
        <doc xml:whitespace="preserve">Create a new GtkEntryBuffer object.
Optionally, specify initial text to set in the buffer.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A new GtkEntryBuffer object.</doc>
          <type name="EntryBuffer" c:type="GtkEntryBuffer*"/>
        </return-value>
        <parameters>
          <parameter name="initial_chars"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">initial buffer text, or %NULL</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="n_initial_chars" transfer-ownership="none">
            <doc xml:whitespace="preserve">number of characters in @initial_chars, or -1</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </constructor>
      <virtual-method name="delete_text" invoker="delete_text" version="2.18">
        <doc xml:whitespace="preserve">Deletes a sequence of characters from the buffer. @n_chars characters are
deleted starting at @position. If @n_chars is negative, then all characters
until the end of the text are deleted.
If @position or @n_chars are out of bounds, then they are coerced to sane
values.
Note that the positions are specified in characters, not bytes.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The number of characters deleted.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="position" transfer-ownership="none">
            <doc xml:whitespace="preserve">position at which to delete text</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="n_chars" transfer-ownership="none">
            <doc xml:whitespace="preserve">number of characters to delete</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_length" invoker="get_length" version="2.18">
        <doc xml:whitespace="preserve">Retrieves the length in characters of the buffer.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The number of characters in the buffer.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
      </virtual-method>
      <virtual-method name="get_text">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="n_bytes" transfer-ownership="none">
            <type name="gulong" c:type="gsize*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="insert_text" invoker="insert_text" version="2.18">
        <doc xml:whitespace="preserve">Inserts @n_chars characters of @chars into the contents of the
buffer, at position @position.
If @n_chars is negative, then characters from chars will be inserted
until a null-terminator is found. If @position or @n_chars are out of
bounds, or the maximum buffer text length is exceeded, then they are
coerced to sane values.
Note that the position and length are in characters, not in bytes.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The number of characters actually inserted.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="position" transfer-ownership="none">
            <doc xml:whitespace="preserve">the position at which to insert text.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="chars" transfer-ownership="none">
            <doc xml:whitespace="preserve">the text to insert into the buffer.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="n_chars" transfer-ownership="none">
            <doc xml:whitespace="preserve">the length of the text in characters, or -1</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="delete_text"
              c:identifier="gtk_entry_buffer_delete_text"
              version="2.18">
        <doc xml:whitespace="preserve">Deletes a sequence of characters from the buffer. @n_chars characters are
deleted starting at @position. If @n_chars is negative, then all characters
until the end of the text are deleted.
If @position or @n_chars are out of bounds, then they are coerced to sane
values.
Note that the positions are specified in characters, not bytes.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The number of characters deleted.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="position" transfer-ownership="none">
            <doc xml:whitespace="preserve">position at which to delete text</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="n_chars" transfer-ownership="none">
            <doc xml:whitespace="preserve">number of characters to delete</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_deleted_text"
              c:identifier="gtk_entry_buffer_emit_deleted_text"
              version="2.18">
        <doc xml:whitespace="preserve">Used when subclassing #GtkEntryBuffer</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="position" transfer-ownership="none">
            <doc xml:whitespace="preserve">position at which text was deleted</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="n_chars" transfer-ownership="none">
            <doc xml:whitespace="preserve">number of characters deleted</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_inserted_text"
              c:identifier="gtk_entry_buffer_emit_inserted_text"
              version="2.18">
        <doc xml:whitespace="preserve">Used when subclassing #GtkEntryBuffer</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="position" transfer-ownership="none">
            <doc xml:whitespace="preserve">position at which text was inserted</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="chars" transfer-ownership="none">
            <doc xml:whitespace="preserve">text that was inserted</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="n_chars" transfer-ownership="none">
            <doc xml:whitespace="preserve">number of characters inserted</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_bytes"
              c:identifier="gtk_entry_buffer_get_bytes"
              version="2.18">
        <doc xml:whitespace="preserve">Retrieves the length in bytes of the buffer.
See gtk_entry_buffer_get_length().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The byte length of the buffer.</doc>
          <type name="gulong" c:type="gsize"/>
        </return-value>
      </method>
      <method name="get_length"
              c:identifier="gtk_entry_buffer_get_length"
              version="2.18">
        <doc xml:whitespace="preserve">Retrieves the length in characters of the buffer.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The number of characters in the buffer.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
      </method>
      <method name="get_max_length"
              c:identifier="gtk_entry_buffer_get_max_length"
              version="2.18">
        <doc xml:whitespace="preserve">Retrieves the maximum allowed length of the text in
in #GtkEntryBuffer, or 0 if there is no maximum.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the maximum allowed number of characters</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="get_text"
              c:identifier="gtk_entry_buffer_get_text"
              version="2.18">
        <doc xml:whitespace="preserve">Retrieves the contents of the buffer.
The memory pointer returned by this call will not change
unless this object emits a signal, or is finalized.
string. This string points to internally allocated
storage in the buffer and must not be freed, modified or
stored.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a pointer to the contents of the widget as a</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="insert_text"
              c:identifier="gtk_entry_buffer_insert_text"
              version="2.18">
        <doc xml:whitespace="preserve">Inserts @n_chars characters of @chars into the contents of the
buffer, at position @position.
If @n_chars is negative, then characters from chars will be inserted
until a null-terminator is found. If @position or @n_chars are out of
bounds, or the maximum buffer text length is exceeded, then they are
coerced to sane values.
Note that the position and length are in characters, not in bytes.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The number of characters actually inserted.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="position" transfer-ownership="none">
            <doc xml:whitespace="preserve">the position at which to insert text.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="chars" transfer-ownership="none">
            <doc xml:whitespace="preserve">the text to insert into the buffer.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="n_chars" transfer-ownership="none">
            <doc xml:whitespace="preserve">the length of the text in characters, or -1</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_max_length"
              c:identifier="gtk_entry_buffer_set_max_length"
              version="2.18">
        <doc xml:whitespace="preserve">Sets the maximum allowed length of the contents of the buffer. If
the current contents are longer than the given length, then they
will be truncated to fit.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="max_length" transfer-ownership="none">
            <doc xml:whitespace="preserve">the maximum length of the entry buffer, or 0 for no maximum. (other than the maximum length of entries.) The value passed in will be clamped to the range 0-65536.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_text"
              c:identifier="gtk_entry_buffer_set_text"
              version="2.18">
        <doc xml:whitespace="preserve">Sets the text in the buffer.
This is roughly equivalent to calling gtk_entry_buffer_delete_text()
and gtk_entry_buffer_insert_text().
Note that @n_chars is in characters, not in bytes.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="chars" transfer-ownership="none">
            <doc xml:whitespace="preserve">the new text</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="n_chars" transfer-ownership="none">
            <doc xml:whitespace="preserve">the number of characters in @text, or -1</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <property name="length" version="2.18" transfer-ownership="none">
        <doc xml:whitespace="preserve">The length (in characters) of the text in buffer.</doc>
        <type name="guint"/>
      </property>
      <property name="max-length"
                version="2.18"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The maximum length (in characters) of the text in the buffer.</doc>
        <type name="gint"/>
      </property>
      <property name="text"
                version="2.18"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The contents of the buffer.</doc>
        <type name="utf8"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="EntryBufferPrivate" c:type="GtkEntryBufferPrivate*"/>
      </field>
      <glib:signal name="deleted-text" version="2.18">
        <doc xml:whitespace="preserve">This signal is emitted after text is deleted from the buffer.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the position the text was deleted at.</doc>
            <type name="guint"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <doc xml:whitespace="preserve">The number of characters that were deleted.</doc>
            <type name="guint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="inserted-text" version="2.18">
        <doc xml:whitespace="preserve">This signal is emitted after text is inserted into the buffer.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the position the text was inserted at.</doc>
            <type name="guint"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <doc xml:whitespace="preserve">The text that was inserted.</doc>
            <type name="utf8"/>
          </parameter>
          <parameter name="p1" transfer-ownership="none">
            <doc xml:whitespace="preserve">The number of characters that were inserted.</doc>
            <type name="guint"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="EntryBufferClass"
            c:type="GtkEntryBufferClass"
            glib:is-gtype-struct-for="EntryBuffer">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="inserted_text">
        <callback name="inserted_text">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="buffer" transfer-ownership="none">
              <type name="EntryBuffer" c:type="GtkEntryBuffer*"/>
            </parameter>
            <parameter name="position" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="chars" transfer-ownership="none">
              <type name="utf8" c:type="gchar*"/>
            </parameter>
            <parameter name="n_chars" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="deleted_text">
        <callback name="deleted_text">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="buffer" transfer-ownership="none">
              <type name="EntryBuffer" c:type="GtkEntryBuffer*"/>
            </parameter>
            <parameter name="position" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="n_chars" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_text">
        <callback name="get_text">
          <return-value transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </return-value>
          <parameters>
            <parameter name="buffer" transfer-ownership="none">
              <type name="EntryBuffer" c:type="GtkEntryBuffer*"/>
            </parameter>
            <parameter name="n_bytes" transfer-ownership="none">
              <type name="gulong" c:type="gsize*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_length">
        <callback name="get_length">
          <return-value transfer-ownership="none">
            <doc xml:whitespace="preserve">The number of characters in the buffer.</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="buffer" transfer-ownership="none">
              <type name="EntryBuffer" c:type="GtkEntryBuffer*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="insert_text">
        <callback name="insert_text">
          <return-value transfer-ownership="none">
            <doc xml:whitespace="preserve">The number of characters actually inserted.</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="buffer" transfer-ownership="none">
              <type name="EntryBuffer" c:type="GtkEntryBuffer*"/>
            </parameter>
            <parameter name="position" transfer-ownership="none">
              <doc xml:whitespace="preserve">the position at which to insert text.</doc>
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="chars" transfer-ownership="none">
              <doc xml:whitespace="preserve">the text to insert into the buffer.</doc>
              <type name="utf8" c:type="gchar*"/>
            </parameter>
            <parameter name="n_chars" transfer-ownership="none">
              <doc xml:whitespace="preserve">the length of the text in characters, or -1</doc>
              <type name="guint" c:type="guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="delete_text">
        <callback name="delete_text">
          <return-value transfer-ownership="none">
            <doc xml:whitespace="preserve">The number of characters deleted.</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="buffer" transfer-ownership="none">
              <type name="EntryBuffer" c:type="GtkEntryBuffer*"/>
            </parameter>
            <parameter name="position" transfer-ownership="none">
              <doc xml:whitespace="preserve">position at which to delete text</doc>
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="n_chars" transfer-ownership="none">
              <doc xml:whitespace="preserve">number of characters to delete</doc>
              <type name="guint" c:type="guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_gtk_reserved0" introspectable="0">
        <callback name="_gtk_reserved0">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved1" introspectable="0">
        <callback name="_gtk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved2" introspectable="0">
        <callback name="_gtk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved3" introspectable="0">
        <callback name="_gtk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved4" introspectable="0">
        <callback name="_gtk_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved5" introspectable="0">
        <callback name="_gtk_reserved5">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="EntryBufferPrivate"
            c:type="GtkEntryBufferPrivate"
            disguised="1">
    </record>
    <record name="EntryClass"
            c:type="GtkEntryClass"
            glib:is-gtype-struct-for="Entry">
      <field name="parent_class">
        <type name="WidgetClass" c:type="GtkWidgetClass"/>
      </field>
      <field name="populate_popup">
        <callback name="populate_popup">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="entry" transfer-ownership="none">
              <type name="Entry" c:type="GtkEntry*"/>
            </parameter>
            <parameter name="menu" transfer-ownership="none">
              <type name="Menu" c:type="GtkMenu*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="activate">
        <callback name="activate">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="entry" transfer-ownership="none">
              <type name="Entry" c:type="GtkEntry*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="move_cursor">
        <callback name="move_cursor">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="entry" transfer-ownership="none">
              <type name="Entry" c:type="GtkEntry*"/>
            </parameter>
            <parameter name="step" transfer-ownership="none">
              <type name="MovementStep" c:type="GtkMovementStep"/>
            </parameter>
            <parameter name="count" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="extend_selection" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="insert_at_cursor">
        <callback name="insert_at_cursor">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="entry" transfer-ownership="none">
              <type name="Entry" c:type="GtkEntry*"/>
            </parameter>
            <parameter name="str" transfer-ownership="none">
              <type name="utf8" c:type="gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="delete_from_cursor">
        <callback name="delete_from_cursor">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="entry" transfer-ownership="none">
              <type name="Entry" c:type="GtkEntry*"/>
            </parameter>
            <parameter name="type" transfer-ownership="none">
              <type name="DeleteType" c:type="GtkDeleteType"/>
            </parameter>
            <parameter name="count" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="backspace">
        <callback name="backspace">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="entry" transfer-ownership="none">
              <type name="Entry" c:type="GtkEntry*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="cut_clipboard">
        <callback name="cut_clipboard">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="entry" transfer-ownership="none">
              <type name="Entry" c:type="GtkEntry*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="copy_clipboard">
        <callback name="copy_clipboard">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="entry" transfer-ownership="none">
              <type name="Entry" c:type="GtkEntry*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="paste_clipboard">
        <callback name="paste_clipboard">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="entry" transfer-ownership="none">
              <type name="Entry" c:type="GtkEntry*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="toggle_overwrite">
        <callback name="toggle_overwrite">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="entry" transfer-ownership="none">
              <type name="Entry" c:type="GtkEntry*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_text_area_size">
        <callback name="get_text_area_size">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="entry" transfer-ownership="none">
              <type name="Entry" c:type="GtkEntry*"/>
            </parameter>
            <parameter name="x" transfer-ownership="none">
              <type name="gint" c:type="gint*"/>
            </parameter>
            <parameter name="y" transfer-ownership="none">
              <type name="gint" c:type="gint*"/>
            </parameter>
            <parameter name="width" transfer-ownership="none">
              <type name="gint" c:type="gint*"/>
            </parameter>
            <parameter name="height" transfer-ownership="none">
              <type name="gint" c:type="gint*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_gtk_reserved1" introspectable="0">
        <callback name="_gtk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved2" introspectable="0">
        <callback name="_gtk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <class name="EntryCompletion"
           c:symbol-prefix="entry_completion"
           c:type="GtkEntryCompletion"
           parent="GObject.Object"
           glib:type-name="GtkEntryCompletion"
           glib:get-type="gtk_entry_completion_get_type"
           glib:type-struct="EntryCompletionClass">
      <implements name="Buildable"/>
      <implements name="CellLayout"/>
      <constructor name="new"
                   c:identifier="gtk_entry_completion_new"
                   version="2.4">
        <doc xml:whitespace="preserve">Creates a new #GtkEntryCompletion object.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A newly created #GtkEntryCompletion object.</doc>
          <type name="EntryCompletion" c:type="GtkEntryCompletion*"/>
        </return-value>
      </constructor>
      <method name="complete"
              c:identifier="gtk_entry_completion_complete"
              version="2.4">
        <doc xml:whitespace="preserve">Requests a completion operation, or in other words a refiltering of the
current list with completions, using the current key. The completion list
view will be updated accordingly.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="delete_action"
              c:identifier="gtk_entry_completion_delete_action"
              version="2.4">
        <doc xml:whitespace="preserve">Deletes the action at @index_ from @completion's action list.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="index_" transfer-ownership="none">
            <doc xml:whitespace="preserve">The index of the item to Delete.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_completion_prefix"
              c:identifier="gtk_entry_completion_get_completion_prefix"
              version="2.12">
        <doc xml:whitespace="preserve">Get the original text entered by the user that triggered
the completion or %NULL if there's no completion ongoing.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the prefix for the current completion</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_entry"
              c:identifier="gtk_entry_completion_get_entry"
              version="2.4">
        <doc xml:whitespace="preserve">Gets the entry @completion has been attached to.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The entry @completion has been attached to.</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
      </method>
      <method name="get_inline_completion"
              c:identifier="gtk_entry_completion_get_inline_completion"
              version="2.6">
        <doc xml:whitespace="preserve">Returns whether the common prefix of the possible completions should
be automatically inserted in the entry.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if inline completion is turned on</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_inline_selection"
              c:identifier="gtk_entry_completion_get_inline_selection"
              version="2.12">
        <doc xml:whitespace="preserve">Returns %TRUE if inline-selection mode is turned on.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if inline-selection mode is on</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_minimum_key_length"
              c:identifier="gtk_entry_completion_get_minimum_key_length"
              version="2.4">
        <doc xml:whitespace="preserve">Returns the minimum key length as set for @completion.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The currently used minimum key length.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="get_model"
              c:identifier="gtk_entry_completion_get_model"
              version="2.4">
        <doc xml:whitespace="preserve">Returns the model the #GtkEntryCompletion is using as data source.
Returns %NULL if the model is unset.
is currently being used.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">A #GtkTreeModel, or %NULL if none</doc>
          <type name="TreeModel" c:type="GtkTreeModel*"/>
        </return-value>
      </method>
      <method name="get_popup_completion"
              c:identifier="gtk_entry_completion_get_popup_completion"
              version="2.6">
        <doc xml:whitespace="preserve">Returns whether the completions should be presented in a popup window.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if popup completion is turned on</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_popup_set_width"
              c:identifier="gtk_entry_completion_get_popup_set_width"
              version="2.8">
        <doc xml:whitespace="preserve">Returns whether the  completion popup window will be resized to the 
width of the entry.
the entry</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the popup window will be resized to the width of</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_popup_single_match"
              c:identifier="gtk_entry_completion_get_popup_single_match"
              version="2.8">
        <doc xml:whitespace="preserve">Returns whether the completion popup window will appear even if there is
only a single match. 
number of matches.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the popup window will appear regardless of the</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_text_column"
              c:identifier="gtk_entry_completion_get_text_column"
              version="2.6">
        <doc xml:whitespace="preserve">Returns the column in the model of @completion to get strings from.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the column containing the strings</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="insert_action_markup"
              c:identifier="gtk_entry_completion_insert_action_markup"
              version="2.4">
        <doc xml:whitespace="preserve">Inserts an action in @completion's action item list at position @index_
with markup @markup.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="index_" transfer-ownership="none">
            <doc xml:whitespace="preserve">The index of the item to insert.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="markup" transfer-ownership="none">
            <doc xml:whitespace="preserve">Markup of the item to insert.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="insert_action_text"
              c:identifier="gtk_entry_completion_insert_action_text"
              version="2.4">
        <doc xml:whitespace="preserve">Inserts an action in @completion's action item list at position @index_
with text @text. If you want the action item to have markup, use
gtk_entry_completion_insert_action_markup().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="index_" transfer-ownership="none">
            <doc xml:whitespace="preserve">The index of the item to insert.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="text" transfer-ownership="none">
            <doc xml:whitespace="preserve">Text of the item to insert.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="insert_prefix"
              c:identifier="gtk_entry_completion_insert_prefix"
              version="2.6">
        <doc xml:whitespace="preserve">Requests a prefix insertion.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="set_inline_completion"
              c:identifier="gtk_entry_completion_set_inline_completion"
              version="2.6">
        <doc xml:whitespace="preserve">Sets whether the common prefix of the possible completions should
be automatically inserted in the entry.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="inline_completion" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE to do inline completion</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_inline_selection"
              c:identifier="gtk_entry_completion_set_inline_selection"
              version="2.12">
        <doc xml:whitespace="preserve">Sets whether it is possible to cycle through the possible completions
inside the entry.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="inline_selection" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE to do inline selection</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_match_func"
              c:identifier="gtk_entry_completion_set_match_func"
              version="2.4">
        <doc xml:whitespace="preserve">Sets the match function for @completion to be @func. The match function
is used to determine if a row should or should not be in the completion
list.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="func"
                     transfer-ownership="none"
                     scope="notified"
                     closure="1"
                     destroy="2">
            <doc xml:whitespace="preserve">The #GtkEntryCompletionMatchFunc to use.</doc>
            <type name="EntryCompletionMatchFunc"
                  c:type="GtkEntryCompletionMatchFunc"/>
          </parameter>
          <parameter name="func_data" transfer-ownership="none">
            <doc xml:whitespace="preserve">The user data for @func.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="func_notify"
                     transfer-ownership="none"
                     scope="async">
            <doc xml:whitespace="preserve">Destroy notifier for @func_data.</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_minimum_key_length"
              c:identifier="gtk_entry_completion_set_minimum_key_length"
              version="2.4">
        <doc xml:whitespace="preserve">Requires the length of the search key for @completion to be at least
key takes a lot of time and will come up with meaningless results anyway
(ie, a too large dataset).</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="length" transfer-ownership="none">
            <doc xml:whitespace="preserve">The minimum length of the key in order to start completing.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_model"
              c:identifier="gtk_entry_completion_set_model"
              version="2.4">
        <doc xml:whitespace="preserve">Sets the model for a #GtkEntryCompletion. If @completion already has
a model set, it will remove it before setting the new model.
If model is %NULL, then it will unset the model.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="model" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">The #GtkTreeModel.</doc>
            <type name="TreeModel" c:type="GtkTreeModel*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_popup_completion"
              c:identifier="gtk_entry_completion_set_popup_completion"
              version="2.6">
        <doc xml:whitespace="preserve">Sets whether the completions should be presented in a popup window.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="popup_completion" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE to do popup completion</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_popup_set_width"
              c:identifier="gtk_entry_completion_set_popup_set_width"
              version="2.8">
        <doc xml:whitespace="preserve">Sets whether the completion popup window will be resized to be the same
width as the entry.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="popup_set_width" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE to make the width of the popup the same as the entry</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_popup_single_match"
              c:identifier="gtk_entry_completion_set_popup_single_match"
              version="2.8">
        <doc xml:whitespace="preserve">Sets whether the completion popup window will appear even if there is
only a single match. You may want to set this to %FALSE if you
are using &lt;link linkend="GtkEntryCompletion--inline-completion"&gt;inline
completion&lt;/link&gt;.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="popup_single_match" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE if the popup should appear even for a single match</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_text_column"
              c:identifier="gtk_entry_completion_set_text_column"
              version="2.4">
        <doc xml:whitespace="preserve">completion list with just strings. This function will set up @completion
to have a list displaying all (and just) strings in the completion list,
and to get those strings from @column in the model of @completion.
This functions creates and adds a #GtkCellRendererText for the selected 
column. If you need to set the text column, but don't want the cell 
renderer, use g_object_set() to set the ::text_column property directly.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="column" transfer-ownership="none">
            <doc xml:whitespace="preserve">The column in the model of @completion to get strings from.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <property name="inline-completion"
                version="2.6"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Determines whether the common prefix of the possible completions 
should be inserted automatically in the entry. Note that this
requires text-column to be set, even if you are using a custom
match function.</doc>
        <type name="gboolean"/>
      </property>
      <property name="inline-selection"
                version="2.12"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Determines whether the possible completions on the popup
will appear in the entry as you navigate through them.</doc>
        <type name="gboolean"/>
      </property>
      <property name="minimum-key-length"
                writable="1"
                transfer-ownership="none">
        <type name="gint"/>
      </property>
      <property name="model" writable="1" transfer-ownership="none">
        <type name="TreeModel"/>
      </property>
      <property name="popup-completion"
                version="2.6"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Determines whether the possible completions should be 
shown in a popup window.</doc>
        <type name="gboolean"/>
      </property>
      <property name="popup-set-width"
                version="2.8"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Determines whether the completions popup window will be
resized to the width of the entry.</doc>
        <type name="gboolean"/>
      </property>
      <property name="popup-single-match"
                version="2.8"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Determines whether the completions popup window will shown
for a single possible completion. You probably want to set
this to %FALSE if you are using 
&lt;link linkend="GtkEntryCompletion--inline-completion"&gt;inline 
completion&lt;/link&gt;.</doc>
        <type name="gboolean"/>
      </property>
      <property name="text-column"
                version="2.6"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The column of the model containing the strings.
Note that the strings must be UTF-8.</doc>
        <type name="gint"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="EntryCompletionPrivate"
              c:type="GtkEntryCompletionPrivate*"/>
      </field>
      <glib:signal name="action-activated" version="2.4">
        <doc xml:whitespace="preserve">Gets emitted when an action is activated.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the index of the activated action</doc>
            <type name="gint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="cursor-on-match" version="2.12">
        <doc xml:whitespace="preserve">Gets emitted when a match from the cursor is on a match
of the list. The default behaviour is to replace the contents
of the entry with the contents of the text column in the row
pointed to by @iter.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the signal has been handled</doc>
          <type name="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GtkTreeModel containing the matches</doc>
            <type name="TreeModel"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkTreeIter positioned at the selected match</doc>
            <type name="TreeIter"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="insert-prefix" version="2.6">
        <doc xml:whitespace="preserve">Gets emitted when the inline autocompletion is triggered.
The default behaviour is to make the entry display the
whole prefix and select the newly inserted part.
Applications may connect to this signal in order to insert only a
smaller part of the @prefix into the entry - e.g. the entry used in
the #GtkFileChooser inserts only the part of the prefix up to the
next '/'.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the signal has been handled</doc>
          <type name="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the common prefix of all possible completions</doc>
            <type name="utf8"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="match-selected" version="2.4">
        <doc xml:whitespace="preserve">Gets emitted when a match from the list is selected.
The default behaviour is to replace the contents of the
entry with the contents of the text column in the row
pointed to by @iter.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the signal has been handled</doc>
          <type name="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GtkTreeModel containing the matches</doc>
            <type name="TreeModel"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkTreeIter positioned at the selected match</doc>
            <type name="TreeIter"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="EntryCompletionClass"
            c:type="GtkEntryCompletionClass"
            glib:is-gtype-struct-for="EntryCompletion">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="match_selected">
        <callback name="match_selected">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="completion" transfer-ownership="none">
              <type name="EntryCompletion" c:type="GtkEntryCompletion*"/>
            </parameter>
            <parameter name="model" transfer-ownership="none">
              <type name="TreeModel" c:type="GtkTreeModel*"/>
            </parameter>
            <parameter name="iter" transfer-ownership="none">
              <type name="TreeIter" c:type="GtkTreeIter*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="action_activated">
        <callback name="action_activated">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="completion" transfer-ownership="none">
              <type name="EntryCompletion" c:type="GtkEntryCompletion*"/>
            </parameter>
            <parameter name="index_" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="insert_prefix">
        <callback name="insert_prefix">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="completion" transfer-ownership="none">
              <type name="EntryCompletion" c:type="GtkEntryCompletion*"/>
            </parameter>
            <parameter name="prefix" transfer-ownership="none">
              <type name="utf8" c:type="gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="cursor_on_match">
        <callback name="cursor_on_match">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="completion" transfer-ownership="none">
              <type name="EntryCompletion" c:type="GtkEntryCompletion*"/>
            </parameter>
            <parameter name="model" transfer-ownership="none">
              <type name="TreeModel" c:type="GtkTreeModel*"/>
            </parameter>
            <parameter name="iter" transfer-ownership="none">
              <type name="TreeIter" c:type="GtkTreeIter*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_gtk_reserved0" introspectable="0">
        <callback name="_gtk_reserved0">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved1" introspectable="0">
        <callback name="_gtk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <callback name="EntryCompletionMatchFunc"
              c:type="GtkEntryCompletionMatchFunc">
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="completion" transfer-ownership="none">
          <type name="EntryCompletion" c:type="GtkEntryCompletion*"/>
        </parameter>
        <parameter name="key" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="iter" transfer-ownership="none">
          <type name="TreeIter" c:type="GtkTreeIter*"/>
        </parameter>
        <parameter name="user_data" transfer-ownership="none" closure="3">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <record name="EntryCompletionPrivate"
            c:type="GtkEntryCompletionPrivate"
            disguised="1">
    </record>
    <enumeration name="EntryIconPosition"
                 glib:type-name="GtkEntryIconPosition"
                 glib:get-type="gtk_entry_icon_position_get_type"
                 c:type="GtkEntryIconPosition">
      <member name="primary"
              value="0"
              c:identifier="GTK_ENTRY_ICON_PRIMARY"
              glib:nick="primary"/>
      <member name="secondary"
              value="1"
              c:identifier="GTK_ENTRY_ICON_SECONDARY"
              glib:nick="secondary"/>
    </enumeration>
    <class name="EventBox"
           c:symbol-prefix="event_box"
           c:type="GtkEventBox"
           parent="Bin"
           glib:type-name="GtkEventBox"
           glib:get-type="gtk_event_box_get_type"
           glib:type-struct="EventBoxClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Buildable"/>
      <implements name="SizeRequest"/>
      <constructor name="new" c:identifier="gtk_event_box_new">
        <return-value transfer-ownership="none">
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="get_above_child"
              c:identifier="gtk_event_box_get_above_child"
              version="2.4">
        <doc xml:whitespace="preserve">Returns whether the event box window is above or below the
windows of its child. See gtk_event_box_set_above_child() for
details.
of its child.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the event box window is above the window</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_visible_window"
              c:identifier="gtk_event_box_get_visible_window"
              version="2.4">
        <doc xml:whitespace="preserve">Returns whether the event box has a visible window.
See gtk_event_box_set_visible_window() for details.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the event box window is visible</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="set_above_child"
              c:identifier="gtk_event_box_set_above_child"
              version="2.4">
        <doc xml:whitespace="preserve">Set whether the event box window is positioned above the windows of its child,
as opposed to below it. If the window is above, all events inside the
event box will go to the event box. If the window is below, events
in windows of child widgets will first got to that widget, and then
to its parents.
The default is to keep the window below the child.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="above_child" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE if the event box window is above the windows of its child</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_visible_window"
              c:identifier="gtk_event_box_set_visible_window"
              version="2.4">
        <doc xml:whitespace="preserve">Set whether the event box uses a visible or invisible child
window. The default is to use visible windows.
In an invisible window event box, the window that the
event box creates is a %GDK_INPUT_ONLY window, which 
means that it is invisible and only serves to receive
events.
A visible window event box creates a visible (%GDK_INPUT_OUTPUT)
window that acts as the parent window for all the widgets  
contained in the event box.
You should generally make your event box invisible if
you just want to trap events. Creating a visible window
may cause artifacts that are visible to the user, especially
if the user is using a theme with gradients or pixmaps.
The main reason to create a non input-only event box is if
you want to set the background to a different color or
draw on it.
&lt;note&gt;&lt;para&gt;
There is one unexpected issue for an invisible event box that has its
window below the child. (See gtk_event_box_set_above_child().)
Since the input-only window is not an ancestor window of any windows
that descendent widgets of the event box create, events on these 
windows aren't propagated up by the windowing system, but only by GTK+.
The practical effect of this is if an event isn't in the event
mask for the descendant window (see gtk_widget_add_events()),  
it won't be received by the event box. 
&lt;/para&gt;&lt;para&gt;
This problem doesn't occur for visible event boxes, because in
that case, the event box window is actually the ancestor of the
descendant windows, not just at the same place on the screen.
&lt;/para&gt;&lt;/note&gt;</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="visible_window" transfer-ownership="none">
            <doc xml:whitespace="preserve">boolean value</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="above-child" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="visible-window" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <field name="bin">
        <type name="Bin" c:type="GtkBin"/>
      </field>
    </class>
    <record name="EventBoxClass"
            c:type="GtkEventBoxClass"
            glib:is-gtype-struct-for="EventBox">
      <field name="parent_class">
        <type name="BinClass" c:type="GtkBinClass"/>
      </field>
    </record>
    <class name="Expander"
           c:symbol-prefix="expander"
           c:type="GtkExpander"
           parent="Bin"
           glib:type-name="GtkExpander"
           glib:get-type="gtk_expander_get_type"
           glib:type-struct="ExpanderClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Buildable"/>
      <implements name="SizeRequest"/>
      <constructor name="new" c:identifier="gtk_expander_new" version="2.4">
        <doc xml:whitespace="preserve">Creates a new expander using @label as the text of the label.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a new #GtkExpander widget.</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="label" transfer-ownership="none">
            <doc xml:whitespace="preserve">the text of the label</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_with_mnemonic"
                   c:identifier="gtk_expander_new_with_mnemonic"
                   version="2.4">
        <doc xml:whitespace="preserve">Creates a new expander using @label as the text of the label.
If characters in @label are preceded by an underscore, they are underlined.
If you need a literal underscore character in a label, use '__' (two 
underscores). The first underlined character represents a keyboard 
accelerator called a mnemonic.
Pressing Alt and that key activates the button.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a new #GtkExpander widget.</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="label" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">the text of the label with an underscore in front of the mnemonic character</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_expanded"
              c:identifier="gtk_expander_get_expanded"
              version="2.4">
        <doc xml:whitespace="preserve">Queries a #GtkExpander and returns its current state. Returns %TRUE
if the child widget is revealed.
See gtk_expander_set_expanded().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the current state of the expander.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_label"
              c:identifier="gtk_expander_get_label"
              version="2.4">
        <doc xml:whitespace="preserve">Fetches the text from a label widget including any embedded
underlines indicating mnemonics and Pango markup, as set by
gtk_expander_set_label(). If the label text has not been set the
return value will be %NULL. This will be the case if you create an
empty button with gtk_button_new() to use as a container.
Note that this function behaved differently in versions prior to
2.14 and used to return the label text stripped of embedded
underlines indicating mnemonics and Pango markup. This problem can
be avoided by fetching the label text directly from the label
widget.
by the widget and must not be modified or freed.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The text of the label widget. This string is owned</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_label_fill"
              c:identifier="gtk_expander_get_label_fill"
              version="2.22">
        <doc xml:whitespace="preserve">Returns whether the label widget will fill all available horizontal
space allocated to @expander.
space</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the label widget will fill all available horizontal</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_label_widget"
              c:identifier="gtk_expander_get_label_widget"
              version="2.4">
        <doc xml:whitespace="preserve">Retrieves the label widget for the frame. See
gtk_expander_set_label_widget().
or %NULL if there is none.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the label widget,</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
      </method>
      <method name="get_spacing"
              c:identifier="gtk_expander_get_spacing"
              version="2.4">
        <doc xml:whitespace="preserve">Gets the value set by gtk_expander_set_spacing().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">spacing between the expander and child.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="get_use_markup"
              c:identifier="gtk_expander_get_use_markup"
              version="2.4">
        <doc xml:whitespace="preserve">Returns whether the label's text is interpreted as marked up with
the &lt;link linkend="PangoMarkupFormat"&gt;Pango text markup
language&lt;/link&gt;. See gtk_expander_set_use_markup ().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the label's text will be parsed for markup</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_use_underline"
              c:identifier="gtk_expander_get_use_underline"
              version="2.4">
        <doc xml:whitespace="preserve">Returns whether an embedded underline in the expander label indicates a
mnemonic. See gtk_expander_set_use_underline().
indicates the mnemonic accelerator keys.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if an embedded underline in the expander label</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="set_expanded"
              c:identifier="gtk_expander_set_expanded"
              version="2.4">
        <doc xml:whitespace="preserve">Sets the state of the expander. Set to %TRUE, if you want
the child widget to be revealed, and %FALSE if you want the
child widget to be hidden.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="expanded" transfer-ownership="none">
            <doc xml:whitespace="preserve">whether the child widget is revealed</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_label"
              c:identifier="gtk_expander_set_label"
              version="2.4">
        <doc xml:whitespace="preserve">Sets the text of the label of the expander to @label.
This will also clear any previously set labels.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="label" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">a string</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_label_fill"
              c:identifier="gtk_expander_set_label_fill"
              version="2.22">
        <doc xml:whitespace="preserve">Sets whether the label widget should fill all available horizontal space
allocated to @expander.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="label_fill" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE if the label should should fill all available horizontal space</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_label_widget"
              c:identifier="gtk_expander_set_label_widget"
              version="2.4">
        <doc xml:whitespace="preserve">Set the label widget for the expander. This is the widget
that will appear embedded alongside the expander arrow.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="label_widget"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">the new label widget</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_spacing"
              c:identifier="gtk_expander_set_spacing"
              version="2.4">
        <doc xml:whitespace="preserve">Sets the spacing field of @expander, which is the number of pixels to
place between expander and the child.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="spacing" transfer-ownership="none">
            <doc xml:whitespace="preserve">distance between the expander and child in pixels.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_use_markup"
              c:identifier="gtk_expander_set_use_markup"
              version="2.4">
        <doc xml:whitespace="preserve">Sets whether the text of the label contains markup in &lt;link
linkend="PangoMarkupFormat"&gt;Pango's text markup
language&lt;/link&gt;. See gtk_label_set_markup().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="use_markup" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE if the label's text should be parsed for markup</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_use_underline"
              c:identifier="gtk_expander_set_use_underline"
              version="2.4">
        <doc xml:whitespace="preserve">If true, an underline in the text of the expander label indicates
the next character should be used for the mnemonic accelerator key.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="use_underline" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE if underlines in the text indicate mnemonics</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="expanded"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="label"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="utf8"/>
      </property>
      <property name="label-fill"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="label-widget" writable="1" transfer-ownership="none">
        <type name="Widget"/>
      </property>
      <property name="spacing" writable="1" transfer-ownership="none">
        <type name="gint"/>
      </property>
      <property name="use-markup"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="use-underline"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <field name="bin">
        <type name="Bin" c:type="GtkBin"/>
      </field>
      <field name="priv">
        <type name="ExpanderPrivate" c:type="GtkExpanderPrivate*"/>
      </field>
      <glib:signal name="activate">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="ExpanderClass"
            c:type="GtkExpanderClass"
            glib:is-gtype-struct-for="Expander">
      <field name="parent_class">
        <type name="BinClass" c:type="GtkBinClass"/>
      </field>
      <field name="activate">
        <callback name="activate">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="expander" transfer-ownership="none">
              <type name="Expander" c:type="GtkExpander*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="ExpanderPrivate" c:type="GtkExpanderPrivate" disguised="1">
    </record>
    <enumeration name="ExpanderStyle"
                 glib:type-name="GtkExpanderStyle"
                 glib:get-type="gtk_expander_style_get_type"
                 c:type="GtkExpanderStyle">
      <member name="collapsed"
              value="0"
              c:identifier="GTK_EXPANDER_COLLAPSED"
              glib:nick="collapsed"/>
      <member name="semi_collapsed"
              value="1"
              c:identifier="GTK_EXPANDER_SEMI_COLLAPSED"
              glib:nick="semi-collapsed"/>
      <member name="semi_expanded"
              value="2"
              c:identifier="GTK_EXPANDER_SEMI_EXPANDED"
              glib:nick="semi-expanded"/>
      <member name="expanded"
              value="3"
              c:identifier="GTK_EXPANDER_EXPANDED"
              glib:nick="expanded"/>
    </enumeration>
    <interface name="FileChooser"
               c:symbol-prefix="file_chooser"
               c:type="GtkFileChooser"
               glib:type-name="GtkFileChooser"
               glib:get-type="gtk_file_chooser_get_type">
      <prerequisite name="Widget"/>
      <method name="add_filter"
              c:identifier="gtk_file_chooser_add_filter"
              version="2.4">
        <doc xml:whitespace="preserve">Adds @filter to the list of filters that the user can select between.
When a filter is selected, only files that are passed by that
filter are displayed. 
Note that the @chooser takes ownership of the filter, so you have to 
ref and sink it if you want to keep a reference.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="filter" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkFileFilter</doc>
            <type name="FileFilter" c:type="GtkFileFilter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_shortcut_folder"
              c:identifier="gtk_file_chooser_add_shortcut_folder"
              version="2.4"
              throws="1">
        <doc xml:whitespace="preserve">Adds a folder to be displayed with the shortcut folders in a file chooser.
Note that shortcut folders do not get saved, as they are provided by the
application.  For example, you can use this to add a
"/usr/share/mydrawprogram/Clipart" folder to the volume list.
otherwise.  In the latter case, the @error will be set as appropriate.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the folder could be added successfully, %FALSE</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="folder" transfer-ownership="none">
            <doc xml:whitespace="preserve">filename of the folder to add</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_shortcut_folder_uri"
              c:identifier="gtk_file_chooser_add_shortcut_folder_uri"
              version="2.4"
              throws="1">
        <doc xml:whitespace="preserve">Adds a folder URI to be displayed with the shortcut folders in a file
chooser.  Note that shortcut folders do not get saved, as they are provided
by the application.  For example, you can use this to add a
"file:///usr/share/mydrawprogram/Clipart" folder to the volume list.
otherwise.  In the latter case, the @error will be set as appropriate.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the folder could be added successfully, %FALSE</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:whitespace="preserve">URI of the folder to add</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_action"
              c:identifier="gtk_file_chooser_get_action"
              version="2.4">
        <doc xml:whitespace="preserve">Gets the type of operation that the file chooser is performing; see
gtk_file_chooser_set_action().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the action that the file selector is performing</doc>
          <type name="FileChooserAction" c:type="GtkFileChooserAction"/>
        </return-value>
      </method>
      <method name="get_create_folders"
              c:identifier="gtk_file_chooser_get_create_folders"
              version="2.18">
        <doc xml:whitespace="preserve">Gets whether file choser will offer to create new folders.
See gtk_file_chooser_set_create_folders().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the New Folder button should be displayed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_current_folder"
              c:identifier="gtk_file_chooser_get_current_folder"
              version="2.4">
        <doc xml:whitespace="preserve">Gets the current folder of @chooser as a local filename.
See gtk_file_chooser_set_current_folder().
Note that this is the folder that the file chooser is currently displaying
(e.g. "/home/username/Documents"), which is &lt;emphasis&gt;not the same&lt;/emphasis&gt;
as the currently-selected folder if the chooser is in
%GTK_FILE_CHOOSER_SELECT_FOLDER mode
(e.g. "/home/username/Documents/selected-folder/".  To get the
currently-selected folder in that mode, use gtk_file_chooser_get_uri() as the
usual way to get the selection.
path cannot be represented as a local filename.  Free with g_free().  This
function will also return %NULL if the file chooser was unable to load the
last folder that was requested from it; for example, as would be for calling
gtk_file_chooser_set_current_folder() on a nonexistent folder.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the full path of the current folder, or %NULL if the current</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_current_folder_file"
              c:identifier="gtk_file_chooser_get_current_folder_file"
              version="2.14">
        <doc xml:whitespace="preserve">Gets the current folder of @chooser as #GFile.
See gtk_file_chooser_get_current_folder_uri().</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the #GFile for the current folder.</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </return-value>
      </method>
      <method name="get_current_folder_uri"
              c:identifier="gtk_file_chooser_get_current_folder_uri"
              version="2.4">
        <doc xml:whitespace="preserve">Gets the current folder of @chooser as an URI.
See gtk_file_chooser_set_current_folder_uri().
Note that this is the folder that the file chooser is currently displaying
(e.g. "file:///home/username/Documents"), which is &lt;emphasis&gt;not the same&lt;/emphasis&gt;
as the currently-selected folder if the chooser is in
%GTK_FILE_CHOOSER_SELECT_FOLDER mode
(e.g. "file:///home/username/Documents/selected-folder/".  To get the
currently-selected folder in that mode, use gtk_file_chooser_get_uri() as the
usual way to get the selection.
function will also return %NULL if the file chooser was unable to load the
last folder that was requested from it; for example, as would be for calling
gtk_file_chooser_set_current_folder_uri() on a nonexistent folder.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the URI for the current folder.  Free with g_free().  This</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_do_overwrite_confirmation"
              c:identifier="gtk_file_chooser_get_do_overwrite_confirmation"
              version="2.8">
        <doc xml:whitespace="preserve">Queries whether a file chooser is set to confirm for overwriting when the user
types a file name that already exists.
%FALSE otherwise.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the file chooser will present a confirmation dialog;</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_extra_widget"
              c:identifier="gtk_file_chooser_get_extra_widget"
              version="2.4">
        <doc xml:whitespace="preserve">Gets the current preview widget; see
gtk_file_chooser_set_extra_widget().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the current extra widget, or %NULL</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
      </method>
      <method name="get_file"
              c:identifier="gtk_file_chooser_get_file"
              version="2.14">
        <doc xml:whitespace="preserve">Gets the #GFile for the currently selected file in
the file selector. If multiple files are selected,
one of the files will be returned at random.
If the file chooser is in folder mode, this function returns the selected
folder.
use g_object_unref() to release it.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a selected #GFile. You own the returned file;</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </return-value>
      </method>
      <method name="get_filename"
              c:identifier="gtk_file_chooser_get_filename"
              version="2.4">
        <doc xml:whitespace="preserve">Gets the filename for the currently selected file in
the file selector. If multiple files are selected,
one of the filenames will be returned at random.
If the file chooser is in folder mode, this function returns the selected
folder.
if no file is selected, or the selected file can't
be represented with a local filename. Free with g_free().</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">The currently selected filename, or %NULL</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_filenames"
              c:identifier="gtk_file_chooser_get_filenames"
              version="2.4">
        <doc xml:whitespace="preserve">Lists all the selected files and subfolders in the current folder of
folder cannot be represented as local filenames they will be ignored. (See
gtk_file_chooser_get_uris())
files and subfolders in the current folder. Free the returned list
with g_slist_free(), and the filenames with g_free().</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a #GSList containing the filenames of all selected</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="utf8"/>
          </type>
        </return-value>
      </method>
      <method name="get_files"
              c:identifier="gtk_file_chooser_get_files"
              version="2.14">
        <doc xml:whitespace="preserve">Lists all the selected files and subfolders in the current folder of @chooser
as #GFile. An internal function, see gtk_file_chooser_get_uris().
file and subfolder in the current folder.  Free the returned list
with g_slist_free(), and the files with g_object_unref().</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a #GSList containing a #GFile for each selected</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="utf8"/>
          </type>
        </return-value>
      </method>
      <method name="get_filter"
              c:identifier="gtk_file_chooser_get_filter"
              version="2.4">
        <doc xml:whitespace="preserve">Gets the current filter; see gtk_file_chooser_set_filter().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the current filter, or %NULL</doc>
          <type name="FileFilter" c:type="GtkFileFilter*"/>
        </return-value>
      </method>
      <method name="get_local_only"
              c:identifier="gtk_file_chooser_get_local_only"
              version="2.4">
        <doc xml:whitespace="preserve">Gets whether only local files can be selected in the
file selector. See gtk_file_chooser_set_local_only()</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if only local files can be selected.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_preview_file"
              c:identifier="gtk_file_chooser_get_preview_file"
              version="2.14">
        <doc xml:whitespace="preserve">Gets the #GFile that should be previewed in a custom preview
Internal function, see gtk_file_chooser_get_preview_uri().
or %NULL if no file is selected. Free with g_object_unref().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the #GFile for the file to preview,</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </return-value>
      </method>
      <method name="get_preview_filename"
              c:identifier="gtk_file_chooser_get_preview_filename"
              version="2.4">
        <doc xml:whitespace="preserve">Gets the filename that should be previewed in a custom preview
widget. See gtk_file_chooser_set_preview_widget().
is selected, or if the selected file cannot be represented
as a local filename. Free with g_free()</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the filename to preview, or %NULL if no file</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
      </method>
      <method name="get_preview_uri"
              c:identifier="gtk_file_chooser_get_preview_uri"
              version="2.4">
        <doc xml:whitespace="preserve">Gets the URI that should be previewed in a custom preview
widget. See gtk_file_chooser_set_preview_widget().
selected. Free with g_free().</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the URI for the file to preview, or %NULL if no file is</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
      </method>
      <method name="get_preview_widget"
              c:identifier="gtk_file_chooser_get_preview_widget"
              version="2.4">
        <doc xml:whitespace="preserve">Gets the current preview widget; see
gtk_file_chooser_set_preview_widget().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the current preview widget, or %NULL</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
      </method>
      <method name="get_preview_widget_active"
              c:identifier="gtk_file_chooser_get_preview_widget_active"
              version="2.4">
        <doc xml:whitespace="preserve">Gets whether the preview widget set by gtk_file_chooser_set_preview_widget()
should be shown for the current filename. See
gtk_file_chooser_set_preview_widget_active().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the preview widget is active for the current filename.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_select_multiple"
              c:identifier="gtk_file_chooser_get_select_multiple"
              version="2.4">
        <doc xml:whitespace="preserve">Gets whether multiple files can be selected in the file
selector. See gtk_file_chooser_set_select_multiple().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if multiple files can be selected.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_show_hidden"
              c:identifier="gtk_file_chooser_get_show_hidden"
              version="2.6">
        <doc xml:whitespace="preserve">Gets whether hidden files and folders are displayed in the file selector.   
See gtk_file_chooser_set_show_hidden().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if hidden files and folders are displayed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_uri"
              c:identifier="gtk_file_chooser_get_uri"
              version="2.4">
        <doc xml:whitespace="preserve">Gets the URI for the currently selected file in
the file selector. If multiple files are selected,
one of the filenames will be returned at random.
If the file chooser is in folder mode, this function returns the selected
folder.
if no file is selected. Free with g_free()</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">The currently selected URI, or %NULL</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_uris"
              c:identifier="gtk_file_chooser_get_uris"
              version="2.4">
        <doc xml:whitespace="preserve">Lists all the selected files and subfolders in the current folder of
files and subfolders in the current folder. Free the returned list
with g_slist_free(), and the filenames with g_free().</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a #GSList containing the URIs of all selected</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="utf8"/>
          </type>
        </return-value>
      </method>
      <method name="get_use_preview_label"
              c:identifier="gtk_file_chooser_get_use_preview_label">
        <doc xml:whitespace="preserve">Gets whether a stock label should be drawn with the name of the previewed
file.  See gtk_file_chooser_set_use_preview_label().
name of the previewed file, %FALSE otherwise.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the file chooser is set to display a label with the</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="list_filters"
              c:identifier="gtk_file_chooser_list_filters"
              version="2.4">
        <doc xml:whitespace="preserve">Lists the current set of user-selectable filters; see
gtk_file_chooser_add_filter(), gtk_file_chooser_remove_filter().
user selectable filters. The contents of the list are
owned by GTK+, but you must free the list itself with
g_slist_free() when you are done with it.</doc>
        <return-value transfer-ownership="container">
          <doc xml:whitespace="preserve">a #GSList containing the current set of</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="utf8"/>
          </type>
        </return-value>
      </method>
      <method name="list_shortcut_folder_uris"
              c:identifier="gtk_file_chooser_list_shortcut_folder_uris"
              version="2.4">
        <doc xml:whitespace="preserve">Queries the list of shortcut folders in the file chooser, as set by
gtk_file_chooser_add_shortcut_folder_uri().
folders.  Free the returned list with g_slist_free(), and the URIs with
g_free().</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A list of folder URIs, or %NULL if there are no shortcut</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="utf8"/>
          </type>
        </return-value>
      </method>
      <method name="list_shortcut_folders"
              c:identifier="gtk_file_chooser_list_shortcut_folders"
              version="2.4">
        <doc xml:whitespace="preserve">Queries the list of shortcut folders in the file chooser, as set by
gtk_file_chooser_add_shortcut_folder().
folders.  Free the returned list with g_slist_free(), and the filenames with
g_free().</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A list of folder filenames, or %NULL if there are no shortcut</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="utf8"/>
          </type>
        </return-value>
      </method>
      <method name="remove_filter"
              c:identifier="gtk_file_chooser_remove_filter"
              version="2.4">
        <doc xml:whitespace="preserve">Removes @filter from the list of filters that the user can select between.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="filter" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkFileFilter</doc>
            <type name="FileFilter" c:type="GtkFileFilter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_shortcut_folder"
              c:identifier="gtk_file_chooser_remove_shortcut_folder"
              version="2.4"
              throws="1">
        <doc xml:whitespace="preserve">Removes a folder from a file chooser's list of shortcut folders.
In the latter case, the @error will be set as appropriate.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the operation succeeds, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="folder" transfer-ownership="none">
            <doc xml:whitespace="preserve">filename of the folder to remove</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_shortcut_folder_uri"
              c:identifier="gtk_file_chooser_remove_shortcut_folder_uri"
              version="2.4"
              throws="1">
        <doc xml:whitespace="preserve">Removes a folder URI from a file chooser's list of shortcut folders.
In the latter case, the @error will be set as appropriate.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the operation succeeds, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:whitespace="preserve">URI of the folder to remove</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="select_all"
              c:identifier="gtk_file_chooser_select_all"
              version="2.4">
        <doc xml:whitespace="preserve">Selects all the files in the current folder of a file chooser.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="select_file"
              c:identifier="gtk_file_chooser_select_file"
              version="2.14"
              throws="1">
        <doc xml:whitespace="preserve">Selects the file referred to by @file. An internal function. See
_gtk_file_chooser_select_uri().
selected successfully, %FALSE otherwise.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if both the folder could be changed and the path was</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="file" transfer-ownership="none">
            <doc xml:whitespace="preserve">the file to select</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </method>
      <method name="select_filename"
              c:identifier="gtk_file_chooser_select_filename"
              version="2.4">
        <doc xml:whitespace="preserve">Selects a filename. If the file name isn't in the current
folder of @chooser, then the current folder of @chooser will
be changed to the folder containing @filename.
selected successfully, %FALSE otherwise.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if both the folder could be changed and the file was</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:whitespace="preserve">the filename to select</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="select_uri"
              c:identifier="gtk_file_chooser_select_uri"
              version="2.4">
        <doc xml:whitespace="preserve">Selects the file to by @uri. If the URI doesn't refer to a
file in the current folder of @chooser, then the current folder of
selected successfully, %FALSE otherwise.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if both the folder could be changed and the URI was</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:whitespace="preserve">the URI to select</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_action"
              c:identifier="gtk_file_chooser_set_action"
              version="2.4">
        <doc xml:whitespace="preserve">Sets the type of operation that the chooser is performing; the
user interface is adapted to suit the selected action. For example,
an option to create a new folder might be shown if the action is
%GTK_FILE_CHOOSER_ACTION_SAVE but not if the action is
%GTK_FILE_CHOOSER_ACTION_OPEN.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="action" transfer-ownership="none">
            <doc xml:whitespace="preserve">the action that the file selector is performing</doc>
            <type name="FileChooserAction" c:type="GtkFileChooserAction"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_create_folders"
              c:identifier="gtk_file_chooser_set_create_folders"
              version="2.18">
        <doc xml:whitespace="preserve">Sets whether file choser will offer to create new folders.
This is only relevant if the action is not set to be 
%GTK_FILE_CHOOSER_ACTION_OPEN.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="create_folders" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE if the New Folder button should be displayed</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_current_folder"
              c:identifier="gtk_file_chooser_set_current_folder"
              version="2.4">
        <doc xml:whitespace="preserve">Sets the current folder for @chooser from a local filename.
The user will be shown the full contents of the current folder,
plus user interface elements for navigating to other folders.
otherwise.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the folder could be changed successfully, %FALSE</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:whitespace="preserve">the full path of the new current folder</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_current_folder_file"
              c:identifier="gtk_file_chooser_set_current_folder_file"
              version="2.14"
              throws="1">
        <doc xml:whitespace="preserve">Sets the current folder for @chooser from a #GFile.
Internal function, see gtk_file_chooser_set_current_folder_uri().
otherwise.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the folder could be changed successfully, %FALSE</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="file" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GFile for the new folder</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_current_folder_uri"
              c:identifier="gtk_file_chooser_set_current_folder_uri"
              version="2.4">
        <doc xml:whitespace="preserve">Sets the current folder for @chooser from an URI.
The user will be shown the full contents of the current folder,
plus user interface elements for navigating to other folders.
otherwise.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the folder could be changed successfully, %FALSE</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:whitespace="preserve">the URI for the new current folder</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_current_name"
              c:identifier="gtk_file_chooser_set_current_name"
              version="2.4">
        <doc xml:whitespace="preserve">Sets the current name in the file selector, as if entered
by the user. Note that the name passed in here is a UTF-8
string rather than a filename. This function is meant for
such uses as a suggested name in a "Save As..." dialog.
If you want to preselect a particular existing file, you should use
gtk_file_chooser_set_filename() or gtk_file_chooser_set_uri() instead.
Please see the documentation for those functions for an example of using
gtk_file_chooser_set_current_name() as well.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:whitespace="preserve">the filename to use, as a UTF-8 string</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_do_overwrite_confirmation"
              c:identifier="gtk_file_chooser_set_do_overwrite_confirmation"
              version="2.8">
        <doc xml:whitespace="preserve">Sets whether a file chooser in %GTK_FILE_CHOOSER_ACTION_SAVE mode will present
a confirmation dialog if the user types a file name that already exists.  This
is %FALSE by default.
Regardless of this setting, the @chooser will emit the
#GtkFileChooser::confirm-overwrite signal when appropriate.
If all you need is the stock confirmation dialog, set this property to %TRUE.
You can override the way confirmation is done by actually handling the
#GtkFileChooser::confirm-overwrite signal; please refer to its documentation
for the details.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="do_overwrite_confirmation"
                     transfer-ownership="none">
            <doc xml:whitespace="preserve">whether to confirm overwriting in save mode</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_extra_widget"
              c:identifier="gtk_file_chooser_set_extra_widget"
              version="2.4">
        <doc xml:whitespace="preserve">Sets an application-supplied widget to provide extra options to the user.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="extra_widget" transfer-ownership="none">
            <doc xml:whitespace="preserve">widget for extra options</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_file"
              c:identifier="gtk_file_chooser_set_file"
              version="2.14"
              throws="1">
        <doc xml:whitespace="preserve">Sets @file as the current filename for the file chooser, by changing
to the file's parent folder and actually selecting the file in list.  If
the @chooser is in %GTK_FILE_CHOOSER_ACTION_SAVE mode, the file's base name
will also appear in the dialog's file name entry.
If the file name isn't in the current folder of @chooser, then the current
folder of @chooser will be changed to the folder containing @filename. This
is equivalent to a sequence of gtk_file_chooser_unselect_all() followed by
gtk_file_chooser_select_filename().
Note that the file must exist, or nothing will be done except
for the directory change.
If you are implementing a &lt;guimenuitem&gt;File/Save As...&lt;/guimenuitem&gt; dialog,
you should use this function if you already have a file name to which the
user may save; for example, when the user opens an existing file and then
does &lt;guimenuitem&gt;File/Save As...&lt;/guimenuitem&gt; on it.  If you don't have
a file name already &amp;mdash; for example, if the user just created a new
file and is saving it for the first time, do not call this function.
Instead, use something similar to this:
|[
if (document_is_new)
{
/&amp;ast; the user just created a new document &amp;ast;/
gtk_file_chooser_set_current_folder_file (chooser, default_file_for_saving);
gtk_file_chooser_set_current_name (chooser, "Untitled document");
}
else
{
/&amp;ast; the user edited an existing document &amp;ast;/
gtk_file_chooser_set_file (chooser, existing_file);
}
]|
selected successfully, %FALSE otherwise.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if both the folder could be changed and the file was</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="file" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GFile to set as current</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_filename"
              c:identifier="gtk_file_chooser_set_filename"
              version="2.4">
        <doc xml:whitespace="preserve">Sets @filename as the current filename for the file chooser, by changing
to the file's parent folder and actually selecting the file in list.  If
the @chooser is in %GTK_FILE_CHOOSER_ACTION_SAVE mode, the file's base name
will also appear in the dialog's file name entry.
If the file name isn't in the current folder of @chooser, then the current
folder of @chooser will be changed to the folder containing @filename. This
is equivalent to a sequence of gtk_file_chooser_unselect_all() followed by
gtk_file_chooser_select_filename().
Note that the file must exist, or nothing will be done except
for the directory change.
If you are implementing a &lt;guimenuitem&gt;File/Save As...&lt;/guimenuitem&gt; dialog,
you should use this function if you already have a file name to which the 
user may save; for example, when the user opens an existing file and then 
does &lt;guimenuitem&gt;File/Save As...&lt;/guimenuitem&gt; on it.  If you don't have 
a file name already &amp;mdash; for example, if the user just created a new 
file and is saving it for the first time, do not call this function.  
Instead, use something similar to this:
|[
if (document_is_new)
{
/&amp;ast; the user just created a new document &amp;ast;/
gtk_file_chooser_set_current_folder (chooser, default_folder_for_saving);
gtk_file_chooser_set_current_name (chooser, "Untitled document");
}
else
{
/&amp;ast; the user edited an existing document &amp;ast;/ 
gtk_file_chooser_set_filename (chooser, existing_filename);
}
]|
selected successfully, %FALSE otherwise.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if both the folder could be changed and the file was</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:whitespace="preserve">the filename to set as current</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_filter"
              c:identifier="gtk_file_chooser_set_filter"
              version="2.4">
        <doc xml:whitespace="preserve">Sets the current filter; only the files that pass the
filter will be displayed. If the user-selectable list of filters
is non-empty, then the filter should be one of the filters
in that list. Setting the current filter when the list of
filters is empty is useful if you want to restrict the displayed
set of files without letting the user change it.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="filter" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkFileFilter</doc>
            <type name="FileFilter" c:type="GtkFileFilter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_local_only"
              c:identifier="gtk_file_chooser_set_local_only"
              version="2.4">
        <doc xml:whitespace="preserve">Sets whether only local files can be selected in the
file selector. If @local_only is %TRUE (the default),
then the selected file are files are guaranteed to be
accessible through the operating systems native file
file system and therefore the application only
needs to worry about the filename functions in
#GtkFileChooser, like gtk_file_chooser_get_filename(),
rather than the URI functions like
gtk_file_chooser_get_uri(),</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="local_only" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE if only local files can be selected</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_preview_widget"
              c:identifier="gtk_file_chooser_set_preview_widget"
              version="2.4">
        <doc xml:whitespace="preserve">Sets an application-supplied widget to use to display a custom preview
of the currently selected file. To implement a preview, after setting the
preview widget, you connect to the #GtkFileChooser::update-preview
signal, and call gtk_file_chooser_get_preview_filename() or
gtk_file_chooser_get_preview_uri() on each change. If you can
display a preview of the new file, update your widget and
set the preview active using gtk_file_chooser_set_preview_widget_active().
Otherwise, set the preview inactive.
When there is no application-supplied preview widget, or the
application-supplied preview widget is not active, the file chooser
may display an internally generated preview of the current file or
it may display no preview at all.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="preview_widget" transfer-ownership="none">
            <doc xml:whitespace="preserve">widget for displaying preview.</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_preview_widget_active"
              c:identifier="gtk_file_chooser_set_preview_widget_active"
              version="2.4">
        <doc xml:whitespace="preserve">Sets whether the preview widget set by
gtk_file_chooser_set_preview_widget() should be shown for the
current filename. When @active is set to false, the file chooser
may display an internally generated preview of the current file
or it may display no preview at all. See
gtk_file_chooser_set_preview_widget() for more details.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="active" transfer-ownership="none">
            <doc xml:whitespace="preserve">whether to display the user-specified preview widget</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_select_multiple"
              c:identifier="gtk_file_chooser_set_select_multiple"
              version="2.4">
        <doc xml:whitespace="preserve">Sets whether multiple files can be selected in the file selector.  This is
only relevant if the action is set to be %GTK_FILE_CHOOSER_ACTION_OPEN or
%GTK_FILE_CHOOSER_ACTION_SELECT_FOLDER.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="select_multiple" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE if multiple files can be selected.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_show_hidden"
              c:identifier="gtk_file_chooser_set_show_hidden"
              version="2.6">
        <doc xml:whitespace="preserve">Sets whether hidden files and folders are displayed in the file selector.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="show_hidden" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE if hidden files and folders should be displayed.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_uri"
              c:identifier="gtk_file_chooser_set_uri"
              version="2.4">
        <doc xml:whitespace="preserve">Sets the file referred to by @uri as the current file for the file chooser,
by changing to the URI's parent folder and actually selecting the URI in the
list.  If the @chooser is %GTK_FILE_CHOOSER_ACTION_SAVE mode, the URI's base
name will also appear in the dialog's file name entry.
If the URI isn't in the current folder of @chooser, then the current folder
of @chooser will be changed to the folder containing @uri. This is equivalent
to a sequence of gtk_file_chooser_unselect_all() followed by
gtk_file_chooser_select_uri().
Note that the URI must exist, or nothing will be done except for the 
directory change.
If you are implementing a &lt;guimenuitem&gt;File/Save As...&lt;/guimenuitem&gt; dialog,
you should use this function if you already have a file name to which the 
user may save; for example, when the user opens an existing file and then 
does &lt;guimenuitem&gt;File/Save As...&lt;/guimenuitem&gt; on it.  If you don't have 
a file name already &amp;mdash; for example, if the user just created a new 
file and is saving it for the first time, do not call this function.  
Instead, use something similar to this:
|[
if (document_is_new)
{
/&amp;ast; the user just created a new document &amp;ast;/
gtk_file_chooser_set_current_folder_uri (chooser, default_folder_for_saving);
gtk_file_chooser_set_current_name (chooser, "Untitled document");
}
else
{
/&amp;ast; the user edited an existing document &amp;ast;/ 
gtk_file_chooser_set_uri (chooser, existing_uri);
}
]|
selected successfully, %FALSE otherwise.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if both the folder could be changed and the URI was</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:whitespace="preserve">the URI to set as current</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_use_preview_label"
              c:identifier="gtk_file_chooser_set_use_preview_label"
              version="2.4">
        <doc xml:whitespace="preserve">Sets whether the file chooser should display a stock label with the name of
the file that is being previewed; the default is %TRUE.  Applications that
want to draw the whole preview area themselves should set this to %FALSE and
display the name themselves in their preview widget.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="use_label" transfer-ownership="none">
            <doc xml:whitespace="preserve">whether to display a stock label with the name of the previewed file</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="unselect_all"
              c:identifier="gtk_file_chooser_unselect_all"
              version="2.4">
        <doc xml:whitespace="preserve">Unselects all the files in the current folder of a file chooser.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="unselect_file"
              c:identifier="gtk_file_chooser_unselect_file"
              version="2.14">
        <doc xml:whitespace="preserve">Unselects the file referred to by @file. If the file is not in the current
directory, does not exist, or is otherwise not currently selected, does nothing.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="file" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GFile</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unselect_filename"
              c:identifier="gtk_file_chooser_unselect_filename"
              version="2.4">
        <doc xml:whitespace="preserve">Unselects a currently selected filename. If the filename
is not in the current directory, does not exist, or
is otherwise not currently selected, does nothing.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:whitespace="preserve">the filename to unselect</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unselect_uri"
              c:identifier="gtk_file_chooser_unselect_uri"
              version="2.4">
        <doc xml:whitespace="preserve">Unselects the file referred to by @uri. If the file
is not in the current directory, does not exist, or
is otherwise not currently selected, does nothing.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:whitespace="preserve">the URI to unselect</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <property name="action" writable="1" transfer-ownership="none">
        <type name="FileChooserAction"/>
      </property>
      <property name="create-folders"
                version="2.18"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Whether a file chooser not in %GTK_FILE_CHOOSER_ACTION_OPEN mode
will offer the user to create new folders.</doc>
        <type name="gboolean"/>
      </property>
      <property name="do-overwrite-confirmation"
                version="2.8"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Whether a file chooser in %GTK_FILE_CHOOSER_ACTION_SAVE mode
will present an overwrite confirmation dialog if the user
selects a file name that already exists.</doc>
        <type name="gboolean"/>
      </property>
      <property name="extra-widget" writable="1" transfer-ownership="none">
        <type name="Widget"/>
      </property>
      <property name="filter" writable="1" transfer-ownership="none">
        <type name="FileFilter"/>
      </property>
      <property name="local-only" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="preview-widget" writable="1" transfer-ownership="none">
        <type name="Widget"/>
      </property>
      <property name="preview-widget-active"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="select-multiple" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="show-hidden" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="use-preview-label"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <glib:signal name="confirm-overwrite" version="2.8">
        <doc xml:whitespace="preserve">This signal gets emitted whenever it is appropriate to present a
confirmation dialog when the user has selected a file name that
already exists.  The signal only gets emitted when the file
chooser is in %GTK_FILE_CHOOSER_ACTION_SAVE mode.
Most applications just need to turn on the
#GtkFileChooser:do-overwrite-confirmation property (or call the
gtk_file_chooser_set_do_overwrite_confirmation() function), and
they will automatically get a stock confirmation dialog.
Applications which need to customize this behavior should do
that, and also connect to the #GtkFileChooser::confirm-overwrite
signal.
A signal handler for this signal must return a
#GtkFileChooserConfirmation value, which indicates the action to
take.  If the handler determines that the user wants to select a
different filename, it should return
%GTK_FILE_CHOOSER_CONFIRMATION_SELECT_AGAIN.  If it determines
that the user is satisfied with his choice of file name, it
should return %GTK_FILE_CHOOSER_CONFIRMATION_ACCEPT_FILENAME.
On the other hand, if it determines that the stock confirmation
dialog should be used, it should return
%GTK_FILE_CHOOSER_CONFIRMATION_CONFIRM. The following example
illustrates this.
&lt;example id="gtkfilechooser-confirmation"&gt;
&lt;title&gt;Custom confirmation&lt;/title&gt;
&lt;programlisting&gt;
static GtkFileChooserConfirmation
confirm_overwrite_callback (GtkFileChooser *chooser, gpointer data)
{
char *uri;
uri = gtk_file_chooser_get_uri (chooser);
if (is_uri_read_only (uri))
{
if (user_wants_to_replace_read_only_file (uri))
return GTK_FILE_CHOOSER_CONFIRMATION_ACCEPT_FILENAME;
else
return GTK_FILE_CHOOSER_CONFIRMATION_SELECT_AGAIN;
} else
return GTK_FILE_CHOOSER_CONFIRMATION_CONFIRM; // fall back to the default dialog
}
...
chooser = gtk_file_chooser_dialog_new (...);
gtk_file_chooser_set_do_overwrite_confirmation (GTK_FILE_CHOOSER (dialog), TRUE);
g_signal_connect (chooser, "confirm-overwrite",
G_CALLBACK (confirm_overwrite_callback), NULL);
if (gtk_dialog_run (chooser) == GTK_RESPONSE_ACCEPT)
save_to_file (gtk_file_chooser_get_filename (GTK_FILE_CHOOSER (chooser));
gtk_widget_destroy (chooser);
&lt;/programlisting&gt;
&lt;/example&gt;
action to take after emitting the signal.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GtkFileChooserConfirmation value that indicates which</doc>
          <type name="FileChooserConfirmation"/>
        </return-value>
      </glib:signal>
      <glib:signal name="current-folder-changed">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
      <glib:signal name="file-activated">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
      <glib:signal name="selection-changed">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
      <glib:signal name="update-preview">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
    </interface>
    <enumeration name="FileChooserAction"
                 glib:type-name="GtkFileChooserAction"
                 glib:get-type="gtk_file_chooser_action_get_type"
                 c:type="GtkFileChooserAction">
      <doc xml:whitespace="preserve">Describes whether a #GtkFileChooser is being used to open existing files
or to save to a possibly new file.</doc>
      <member name="open"
              value="0"
              c:identifier="GTK_FILE_CHOOSER_ACTION_OPEN"
              glib:nick="open"/>
      <member name="save"
              value="1"
              c:identifier="GTK_FILE_CHOOSER_ACTION_SAVE"
              glib:nick="save"/>
      <member name="select_folder"
              value="2"
              c:identifier="GTK_FILE_CHOOSER_ACTION_SELECT_FOLDER"
              glib:nick="select-folder"/>
      <member name="create_folder"
              value="3"
              c:identifier="GTK_FILE_CHOOSER_ACTION_CREATE_FOLDER"
              glib:nick="create-folder"/>
    </enumeration>
    <class name="FileChooserButton"
           c:symbol-prefix="file_chooser_button"
           c:type="GtkFileChooserButton"
           parent="HBox"
           glib:type-name="GtkFileChooserButton"
           glib:get-type="gtk_file_chooser_button_get_type"
           glib:type-struct="FileChooserButtonClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Buildable"/>
      <implements name="FileChooser"/>
      <implements name="Orientable"/>
      <implements name="SizeRequest"/>
      <constructor name="new"
                   c:identifier="gtk_file_chooser_button_new"
                   version="2.6">
        <doc xml:whitespace="preserve">Creates a new file-selecting button widget.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a new button widget.</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="title" transfer-ownership="none">
            <doc xml:whitespace="preserve">the title of the browse dialog.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="action" transfer-ownership="none">
            <doc xml:whitespace="preserve">the open mode for the widget.</doc>
            <type name="FileChooserAction" c:type="GtkFileChooserAction"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_with_dialog"
                   c:identifier="gtk_file_chooser_button_new_with_dialog"
                   version="2.6">
        <doc xml:whitespace="preserve">Creates a #GtkFileChooserButton widget which uses @dialog as its
file-picking window.
Note that @dialog must be a #GtkDialog (or subclass) which
implements the #GtkFileChooser interface and must not have
%GTK_DIALOG_DESTROY_WITH_PARENT set.
Also note that the dialog needs to have its confirmative button
added with response %GTK_RESPONSE_ACCEPT or %GTK_RESPONSE_OK in
order for the button to take over the file selected in the dialog.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a new button widget.</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="dialog" transfer-ownership="none">
            <doc xml:whitespace="preserve">the widget to use as dialog</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_focus_on_click"
              c:identifier="gtk_file_chooser_button_get_focus_on_click"
              version="2.10">
        <doc xml:whitespace="preserve">Returns whether the button grabs focus when it is clicked with the mouse.
See gtk_file_chooser_button_set_focus_on_click().
the mouse.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the button grabs focus when it is clicked with</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_title"
              c:identifier="gtk_file_chooser_button_get_title"
              version="2.6">
        <doc xml:whitespace="preserve">Retrieves the title of the browse dialog used by @button. The returned value
should not be modified or freed.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a pointer to the browse dialog's title.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_width_chars"
              c:identifier="gtk_file_chooser_button_get_width_chars"
              version="2.6">
        <doc xml:whitespace="preserve">Retrieves the width in characters of the @button widget's entry and/or label.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">an integer width (in characters) that the button will use to size itself.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="set_focus_on_click"
              c:identifier="gtk_file_chooser_button_set_focus_on_click"
              version="2.10">
        <doc xml:whitespace="preserve">Sets whether the button will grab focus when it is clicked with the mouse.
Making mouse clicks not grab focus is useful in places like toolbars where
you don't want the keyboard focus removed from the main area of the
application.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="focus_on_click" transfer-ownership="none">
            <doc xml:whitespace="preserve">whether the button grabs focus when clicked with the mouse</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_title"
              c:identifier="gtk_file_chooser_button_set_title"
              version="2.6">
        <doc xml:whitespace="preserve">Modifies the @title of the browse dialog used by @button.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="title" transfer-ownership="none">
            <doc xml:whitespace="preserve">the new browse dialog title.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_width_chars"
              c:identifier="gtk_file_chooser_button_set_width_chars"
              version="2.6">
        <doc xml:whitespace="preserve">Sets the width (in characters) that @button will use to @n_chars.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="n_chars" transfer-ownership="none">
            <doc xml:whitespace="preserve">the new width, in characters.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <property name="dialog"
                version="2.6"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Instance of the #GtkFileChooserDialog associated with the button.</doc>
        <type name="FileChooser"/>
      </property>
      <property name="focus-on-click"
                version="2.10"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Whether the #GtkFileChooserButton button grabs focus when it is clicked
with the mouse.</doc>
        <type name="gboolean"/>
      </property>
      <property name="title"
                version="2.6"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Title to put on the #GtkFileChooserDialog associated with the button.</doc>
        <type name="utf8"/>
      </property>
      <property name="width-chars"
                version="2.6"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The width of the entry and label inside the button, in characters.</doc>
        <type name="gint"/>
      </property>
      <field name="parent">
        <type name="HBox" c:type="GtkHBox"/>
      </field>
      <field name="priv">
        <type name="FileChooserButtonPrivate"
              c:type="GtkFileChooserButtonPrivate*"/>
      </field>
      <glib:signal name="file-set" version="2.12">
        <doc xml:whitespace="preserve">The ::file-set signal is emitted when the user selects a file.
Note that this signal is only emitted when the &lt;emphasis&gt;user&lt;/emphasis&gt;
changes the file.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="FileChooserButtonClass"
            c:type="GtkFileChooserButtonClass"
            glib:is-gtype-struct-for="FileChooserButton">
      <field name="parent_class">
        <type name="HBoxClass" c:type="GtkHBoxClass"/>
      </field>
      <field name="file_set">
        <callback name="file_set">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="fc" transfer-ownership="none">
              <type name="FileChooserButton" c:type="GtkFileChooserButton*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="__gtk_reserved1">
        <type name="gpointer" c:type="void*"/>
      </field>
      <field name="__gtk_reserved2">
        <type name="gpointer" c:type="void*"/>
      </field>
      <field name="__gtk_reserved3">
        <type name="gpointer" c:type="void*"/>
      </field>
      <field name="__gtk_reserved4">
        <type name="gpointer" c:type="void*"/>
      </field>
      <field name="__gtk_reserved5">
        <type name="gpointer" c:type="void*"/>
      </field>
      <field name="__gtk_reserved6">
        <type name="gpointer" c:type="void*"/>
      </field>
      <field name="__gtk_reserved7">
        <type name="gpointer" c:type="void*"/>
      </field>
    </record>
    <record name="FileChooserButtonPrivate"
            c:type="GtkFileChooserButtonPrivate"
            disguised="1">
    </record>
    <enumeration name="FileChooserConfirmation"
                 version="2.8"
                 glib:type-name="GtkFileChooserConfirmation"
                 glib:get-type="gtk_file_chooser_confirmation_get_type"
                 c:type="GtkFileChooserConfirmation">
      <doc xml:whitespace="preserve">Used as a return value of handlers for the
#GtkFileChooser::confirm-overwrite signal of a #GtkFileChooser. This
value determines whether the file chooser will present the stock
confirmation dialog, accept the user's choice of a filename, or
let the user choose another filename.</doc>
      <member name="confirm"
              value="0"
              c:identifier="GTK_FILE_CHOOSER_CONFIRMATION_CONFIRM"
              glib:nick="confirm"/>
      <member name="accept_filename"
              value="1"
              c:identifier="GTK_FILE_CHOOSER_CONFIRMATION_ACCEPT_FILENAME"
              glib:nick="accept-filename"/>
      <member name="select_again"
              value="2"
              c:identifier="GTK_FILE_CHOOSER_CONFIRMATION_SELECT_AGAIN"
              glib:nick="select-again"/>
    </enumeration>
    <class name="FileChooserDialog"
           c:symbol-prefix="file_chooser_dialog"
           c:type="GtkFileChooserDialog"
           parent="Dialog"
           glib:type-name="GtkFileChooserDialog"
           glib:get-type="gtk_file_chooser_dialog_get_type"
           glib:type-struct="FileChooserDialogClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Buildable"/>
      <implements name="FileChooser"/>
      <implements name="SizeRequest"/>
      <constructor name="new"
                   c:identifier="gtk_file_chooser_dialog_new"
                   version="2.4"
                   introspectable="0">
        <doc xml:whitespace="preserve">Creates a new #GtkFileChooserDialog.  This function is analogous to
gtk_dialog_new_with_buttons().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a new #GtkFileChooserDialog</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="title" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">Title of the dialog, or %NULL</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="parent" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">Transient parent of the dialog, or %NULL</doc>
            <type name="Window" c:type="GtkWindow*"/>
          </parameter>
          <parameter name="action" transfer-ownership="none">
            <doc xml:whitespace="preserve">Open or save mode for the dialog</doc>
            <type name="FileChooserAction" c:type="GtkFileChooserAction"/>
          </parameter>
          <parameter name="first_button_text"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">stock ID or text to go in the first button, or %NULL</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter transfer-ownership="none">
            <varargs>
            </varargs>
          </parameter>
        </parameters>
      </constructor>
      <field name="parent_instance">
        <type name="Dialog" c:type="GtkDialog"/>
      </field>
      <field name="priv">
        <type name="FileChooserDialogPrivate"
              c:type="GtkFileChooserDialogPrivate*"/>
      </field>
    </class>
    <record name="FileChooserDialogClass"
            c:type="GtkFileChooserDialogClass"
            glib:is-gtype-struct-for="FileChooserDialog">
      <field name="parent_class">
        <type name="DialogClass" c:type="GtkDialogClass"/>
      </field>
    </record>
    <record name="FileChooserDialogPrivate"
            c:type="GtkFileChooserDialogPrivate"
            disguised="1">
    </record>
    <enumeration name="FileChooserError"
                 glib:type-name="GtkFileChooserError"
                 glib:get-type="gtk_file_chooser_error_get_type"
                 c:type="GtkFileChooserError"
                 glib:error-quark="gtk_file_chooser_error_quark">
      <doc xml:whitespace="preserve">These identify the various errors that can occur while calling
#GtkFileChooser functions.</doc>
      <member name="nonexistent"
              value="0"
              c:identifier="GTK_FILE_CHOOSER_ERROR_NONEXISTENT"
              glib:nick="nonexistent"/>
      <member name="bad_filename"
              value="1"
              c:identifier="GTK_FILE_CHOOSER_ERROR_BAD_FILENAME"
              glib:nick="bad-filename"/>
      <member name="already_exists"
              value="2"
              c:identifier="GTK_FILE_CHOOSER_ERROR_ALREADY_EXISTS"
              glib:nick="already-exists"/>
      <member name="incomplete_hostname"
              value="3"
              c:identifier="GTK_FILE_CHOOSER_ERROR_INCOMPLETE_HOSTNAME"
              glib:nick="incomplete-hostname"/>
    </enumeration>
    <class name="FileChooserWidget"
           c:symbol-prefix="file_chooser_widget"
           c:type="GtkFileChooserWidget"
           parent="VBox"
           glib:type-name="GtkFileChooserWidget"
           glib:get-type="gtk_file_chooser_widget_get_type"
           glib:type-struct="FileChooserWidgetClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Buildable"/>
      <implements name="FileChooser"/>
      <implements name="Orientable"/>
      <implements name="SizeRequest"/>
      <constructor name="new"
                   c:identifier="gtk_file_chooser_widget_new"
                   version="2.4">
        <doc xml:whitespace="preserve">Creates a new #GtkFileChooserWidget.  This is a file chooser widget that can
be embedded in custom windows, and it is the same widget that is used by
#GtkFileChooserDialog.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a new #GtkFileChooserWidget</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="action" transfer-ownership="none">
            <doc xml:whitespace="preserve">Open or save mode for the widget</doc>
            <type name="FileChooserAction" c:type="GtkFileChooserAction"/>
          </parameter>
        </parameters>
      </constructor>
      <field name="parent_instance">
        <type name="VBox" c:type="GtkVBox"/>
      </field>
      <field name="priv">
        <type name="FileChooserWidgetPrivate"
              c:type="GtkFileChooserWidgetPrivate*"/>
      </field>
    </class>
    <record name="FileChooserWidgetClass"
            c:type="GtkFileChooserWidgetClass"
            glib:is-gtype-struct-for="FileChooserWidget">
      <field name="parent_class">
        <type name="VBoxClass" c:type="GtkVBoxClass"/>
      </field>
    </record>
    <record name="FileChooserWidgetPrivate"
            c:type="GtkFileChooserWidgetPrivate"
            disguised="1">
    </record>
    <class name="FileFilter"
           c:symbol-prefix="file_filter"
           c:type="GtkFileFilter"
           parent="Object"
           glib:type-name="GtkFileFilter"
           glib:get-type="gtk_file_filter_get_type">
      <constructor name="new" c:identifier="gtk_file_filter_new" version="2.4">
        <doc xml:whitespace="preserve">Creates a new #GtkFileFilter with no rules added to it.
Such a filter doesn't accept any files, so is not
particularly useful until you add rules with
gtk_file_filter_add_mime_type(), gtk_file_filter_add_pattern(),
or gtk_file_filter_add_custom(). To create a filter
that accepts any file, use:
|[
GtkFileFilter *filter = gtk_file_filter_new ();
gtk_file_filter_add_pattern (filter, "*");
]|</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a new #GtkFileFilter</doc>
          <type name="FileFilter" c:type="GtkFileFilter*"/>
        </return-value>
      </constructor>
      <method name="add_custom"
              c:identifier="gtk_file_filter_add_custom"
              version="2.4">
        <doc xml:whitespace="preserve">Adds rule to a filter that allows files based on a custom callback
function. The bitfield @needed which is passed in provides information
about what sorts of information that the filter function needs;
this allows GTK+ to avoid retrieving expensive information when
it isn't needed by the filter.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="needed" transfer-ownership="none">
            <doc xml:whitespace="preserve">bitfield of flags indicating the information that the custom filter function needs.</doc>
            <type name="FileFilterFlags" c:type="GtkFileFilterFlags"/>
          </parameter>
          <parameter name="func"
                     transfer-ownership="none"
                     scope="notified"
                     closure="2"
                     destroy="3">
            <doc xml:whitespace="preserve">callback function; if the function returns %TRUE, then the file will be displayed.</doc>
            <type name="FileFilterFunc" c:type="GtkFileFilterFunc"/>
          </parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:whitespace="preserve">data to pass to @func</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="notify" transfer-ownership="none" scope="async">
            <doc xml:whitespace="preserve">function to call to free @data when it is no longer needed.</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_mime_type"
              c:identifier="gtk_file_filter_add_mime_type"
              version="2.4">
        <doc xml:whitespace="preserve">Adds a rule allowing a given mime type to @filter.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="mime_type" transfer-ownership="none">
            <doc xml:whitespace="preserve">name of a MIME type</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_pattern"
              c:identifier="gtk_file_filter_add_pattern"
              version="2.4">
        <doc xml:whitespace="preserve">Adds a rule allowing a shell style glob to a filter.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="pattern" transfer-ownership="none">
            <doc xml:whitespace="preserve">a shell style glob</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_pixbuf_formats"
              c:identifier="gtk_file_filter_add_pixbuf_formats"
              version="2.6">
        <doc xml:whitespace="preserve">Adds a rule allowing image files in the formats supported
by GdkPixbuf.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="filter"
              c:identifier="gtk_file_filter_filter"
              version="2.4">
        <doc xml:whitespace="preserve">Tests whether a file should be displayed according to @filter.
The #GtkFileFilterInfo structure @filter_info should include
the fields returned from gtk_file_filter_get_needed().
This function will not typically be used by applications; it
is intended principally for use in the implementation of
#GtkFileChooser.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the file should be displayed</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="filter_info" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkFileFilterInfo structure containing information about a file.</doc>
            <type name="FileFilterInfo" c:type="GtkFileFilterInfo*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_name"
              c:identifier="gtk_file_filter_get_name"
              version="2.4">
        <doc xml:whitespace="preserve">Gets the human-readable name for the filter. See gtk_file_filter_set_name().
or %NULL. This value is owned by GTK+ and must not
be modified or freed.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The human-readable name of the filter,</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_needed"
              c:identifier="gtk_file_filter_get_needed"
              version="2.4">
        <doc xml:whitespace="preserve">Gets the fields that need to be filled in for the structure
passed to gtk_file_filter_filter()
This function will not typically be used by applications; it
is intended principally for use in the implementation of
#GtkFileChooser.
calling gtk_file_filter_filter()</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">bitfield of flags indicating needed fields when</doc>
          <type name="FileFilterFlags" c:type="GtkFileFilterFlags"/>
        </return-value>
      </method>
      <method name="set_name"
              c:identifier="gtk_file_filter_set_name"
              version="2.4">
        <doc xml:whitespace="preserve">Sets the human-readable name of the filter; this is the string
that will be displayed in the file selector user interface if
there is a selectable list of filters.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">the human-readable-name for the filter, or %NULL to remove any existing name.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
    </class>
    <bitfield name="FileFilterFlags"
              glib:type-name="GtkFileFilterFlags"
              glib:get-type="gtk_file_filter_flags_get_type"
              c:type="GtkFileFilterFlags">
      <member name="filename"
              value="1"
              c:identifier="GTK_FILE_FILTER_FILENAME"
              glib:nick="filename"/>
      <member name="uri"
              value="2"
              c:identifier="GTK_FILE_FILTER_URI"
              glib:nick="uri"/>
      <member name="display_name"
              value="4"
              c:identifier="GTK_FILE_FILTER_DISPLAY_NAME"
              glib:nick="display-name"/>
      <member name="mime_type"
              value="8"
              c:identifier="GTK_FILE_FILTER_MIME_TYPE"
              glib:nick="mime-type"/>
    </bitfield>
    <callback name="FileFilterFunc" c:type="GtkFileFilterFunc">
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="filter_info" transfer-ownership="none">
          <type name="FileFilterInfo" c:type="GtkFileFilterInfo*"/>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <record name="FileFilterInfo" c:type="GtkFileFilterInfo">
      <field name="contains" writable="1">
        <type name="FileFilterFlags" c:type="GtkFileFilterFlags"/>
      </field>
      <field name="filename" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="uri" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="display_name" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="mime_type" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
    </record>
    <class name="Fixed"
           c:symbol-prefix="fixed"
           c:type="GtkFixed"
           parent="Container"
           glib:type-name="GtkFixed"
           glib:get-type="gtk_fixed_get_type"
           glib:type-struct="FixedClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Buildable"/>
      <implements name="SizeRequest"/>
      <constructor name="new" c:identifier="gtk_fixed_new">
        <return-value transfer-ownership="none">
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="move" c:identifier="gtk_fixed_move">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="widget" transfer-ownership="none">
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="put" c:identifier="gtk_fixed_put">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="widget" transfer-ownership="none">
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <field name="container">
        <type name="Container" c:type="GtkContainer"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="FixedPrivate" c:type="GtkFixedPrivate*"/>
      </field>
    </class>
    <record name="FixedChild" c:type="GtkFixedChild">
      <field name="widget" writable="1">
        <type name="Widget" c:type="GtkWidget*"/>
      </field>
      <field name="x" writable="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="y" writable="1">
        <type name="gint" c:type="gint"/>
      </field>
    </record>
    <record name="FixedClass"
            c:type="GtkFixedClass"
            glib:is-gtype-struct-for="Fixed">
      <field name="parent_class">
        <type name="ContainerClass" c:type="GtkContainerClass"/>
      </field>
    </record>
    <record name="FixedPrivate" c:type="GtkFixedPrivate" disguised="1">
    </record>
    <class name="FontButton"
           c:symbol-prefix="font_button"
           c:type="GtkFontButton"
           parent="Button"
           glib:type-name="GtkFontButton"
           glib:get-type="gtk_font_button_get_type"
           glib:type-struct="FontButtonClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Activatable"/>
      <implements name="Buildable"/>
      <implements name="SizeRequest"/>
      <constructor name="new" c:identifier="gtk_font_button_new" version="2.4">
        <doc xml:whitespace="preserve">Creates a new font picker widget.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a new font picker widget.</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <constructor name="new_with_font"
                   c:identifier="gtk_font_button_new_with_font"
                   version="2.4">
        <doc xml:whitespace="preserve">Creates a new font picker widget.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a new font picker widget.</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="fontname" transfer-ownership="none">
            <doc xml:whitespace="preserve">Name of font to display in font selection dialog</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_font_name"
              c:identifier="gtk_font_button_get_font_name"
              version="2.4">
        <doc xml:whitespace="preserve">Retrieves the name of the currently selected font. This name includes
style and size information as well. If you want to render something
with the font, use this string with pango_font_description_from_string() .
If you're interested in peeking certain values (family name,
style, size, weight) just query these properties from the
#PangoFontDescription object.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">an internal copy of the font name which must not be freed.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_show_size"
              c:identifier="gtk_font_button_get_show_size"
              version="2.4">
        <doc xml:whitespace="preserve">Returns whether the font size will be shown in the label.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">whether the font size will be shown in the label.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_show_style"
              c:identifier="gtk_font_button_get_show_style"
              version="2.4">
        <doc xml:whitespace="preserve">Returns whether the name of the font style will be shown in the label.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">whether the font style will be shown in the label.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_title"
              c:identifier="gtk_font_button_get_title"
              version="2.4">
        <doc xml:whitespace="preserve">Retrieves the title of the font selection dialog.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">an internal copy of the title string which must not be freed.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_use_font"
              c:identifier="gtk_font_button_get_use_font"
              version="2.4">
        <doc xml:whitespace="preserve">Returns whether the selected font is used in the label.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">whether the selected font is used in the label.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_use_size"
              c:identifier="gtk_font_button_get_use_size"
              version="2.4">
        <doc xml:whitespace="preserve">Returns whether the selected size is used in the label.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">whether the selected size is used in the label.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="set_font_name"
              c:identifier="gtk_font_button_set_font_name"
              version="2.4">
        <doc xml:whitespace="preserve">Sets or updates the currently-displayed font in font picker dialog.
font selection dialog exists, otherwise %FALSE.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">Return value of gtk_font_selection_dialog_set_font_name() if the</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="fontname" transfer-ownership="none">
            <doc xml:whitespace="preserve">Name of font to display in font selection dialog</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_show_size"
              c:identifier="gtk_font_button_set_show_size"
              version="2.4">
        <doc xml:whitespace="preserve">If @show_size is %TRUE, the font size will be displayed along with the name of the selected font.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="show_size" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE if font size should be displayed in dialog.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_show_style"
              c:identifier="gtk_font_button_set_show_style"
              version="2.4">
        <doc xml:whitespace="preserve">If @show_style is %TRUE, the font style will be displayed along with name of the selected font.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="show_style" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE if font style should be displayed in label.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_title"
              c:identifier="gtk_font_button_set_title"
              version="2.4">
        <doc xml:whitespace="preserve">Sets the title for the font selection dialog.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="title" transfer-ownership="none">
            <doc xml:whitespace="preserve">a string containing the font selection dialog title</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_use_font"
              c:identifier="gtk_font_button_set_use_font"
              version="2.4">
        <doc xml:whitespace="preserve">If @use_font is %TRUE, the font name will be written using the selected font.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="use_font" transfer-ownership="none">
            <doc xml:whitespace="preserve">If %TRUE, font name will be written using font chosen.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_use_size"
              c:identifier="gtk_font_button_set_use_size"
              version="2.4">
        <doc xml:whitespace="preserve">If @use_size is %TRUE, the font name will be written using the selected size.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="use_size" transfer-ownership="none">
            <doc xml:whitespace="preserve">If %TRUE, font name will be written using the selected size.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="font-name"
                version="2.4"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The name of the currently selected font.</doc>
        <type name="utf8"/>
      </property>
      <property name="show-size"
                version="2.4"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">If this property is set to %TRUE, the selected font size will be shown 
in the label. For a more WYSIWYG way to show the selected size, see the 
::use-size property.</doc>
        <type name="gboolean"/>
      </property>
      <property name="show-style"
                version="2.4"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">If this property is set to %TRUE, the name of the selected font style 
will be shown in the label. For a more WYSIWYG way to show the selected 
style, see the ::use-font property.</doc>
        <type name="gboolean"/>
      </property>
      <property name="title"
                version="2.4"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The title of the font selection dialog.</doc>
        <type name="utf8"/>
      </property>
      <property name="use-font"
                version="2.4"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">If this property is set to %TRUE, the label will be drawn 
in the selected font.</doc>
        <type name="gboolean"/>
      </property>
      <property name="use-size"
                version="2.4"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">If this property is set to %TRUE, the label will be drawn 
with the selected font size.</doc>
        <type name="gboolean"/>
      </property>
      <field name="button">
        <type name="Button" c:type="GtkButton"/>
      </field>
      <field name="priv">
        <type name="FontButtonPrivate" c:type="GtkFontButtonPrivate*"/>
      </field>
      <glib:signal name="font-set" version="2.4">
        <doc xml:whitespace="preserve">The ::font-set signal is emitted when the user selects a font. 
When handling this signal, use gtk_font_button_get_font_name() 
to find out which font was just selected.
Note that this signal is only emitted when the &lt;emphasis&gt;user&lt;/emphasis&gt;
changes the font. If you need to react to programmatic font changes
as well, use the notify::font-name signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="FontButtonClass"
            c:type="GtkFontButtonClass"
            glib:is-gtype-struct-for="FontButton">
      <field name="parent_class">
        <type name="ButtonClass" c:type="GtkButtonClass"/>
      </field>
      <field name="font_set">
        <callback name="font_set">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="gfp" transfer-ownership="none">
              <type name="FontButton" c:type="GtkFontButton*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_gtk_reserved1" introspectable="0">
        <callback name="_gtk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved2" introspectable="0">
        <callback name="_gtk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved3" introspectable="0">
        <callback name="_gtk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved4" introspectable="0">
        <callback name="_gtk_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="FontButtonPrivate"
            c:type="GtkFontButtonPrivate"
            disguised="1">
    </record>
    <class name="FontSelection"
           c:symbol-prefix="font_selection"
           c:type="GtkFontSelection"
           parent="VBox"
           glib:type-name="GtkFontSelection"
           glib:get-type="gtk_font_selection_get_type"
           glib:type-struct="FontSelectionClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Buildable"/>
      <implements name="Orientable"/>
      <implements name="SizeRequest"/>
      <constructor name="new" c:identifier="gtk_font_selection_new">
        <doc xml:whitespace="preserve">Creates a new #GtkFontSelection.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a n ew #GtkFontSelection</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="get_face"
              c:identifier="gtk_font_selection_get_face"
              version="2.14">
        <doc xml:whitespace="preserve">Gets the #PangoFontFace representing the selected font group
details (i.e. family, slant, weight, width, etc).
selected font group details. The returned object is owned by</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">A #PangoFontFace representing the</doc>
          <type name="Pango.FontFace" c:type="PangoFontFace*"/>
        </return-value>
      </method>
      <method name="get_face_list"
              c:identifier="gtk_font_selection_get_face_list"
              version="2.14">
        <doc xml:whitespace="preserve">This returns the #GtkTreeView which lists all styles available for
the selected font. For example, 'Regular', 'Bold', etc.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">A #GtkWidget that is part of @fontsel</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
      </method>
      <method name="get_family"
              c:identifier="gtk_font_selection_get_family"
              version="2.14">
        <doc xml:whitespace="preserve">Gets the #PangoFontFamily representing the selected font family.
selected font family. Font families are a collection of font
faces. The returned object is owned by @fontsel and must not
be modified or freed.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">A #PangoFontFamily representing the</doc>
          <type name="Pango.FontFamily" c:type="PangoFontFamily*"/>
        </return-value>
      </method>
      <method name="get_family_list"
              c:identifier="gtk_font_selection_get_family_list"
              version="2.14">
        <doc xml:whitespace="preserve">This returns the #GtkTreeView that lists font families, for
example, 'Sans', 'Serif', etc.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">A #GtkWidget that is part of @fontsel</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
      </method>
      <method name="get_font_name"
              c:identifier="gtk_font_selection_get_font_name">
        <doc xml:whitespace="preserve">Gets the currently-selected font name. 
Note that this can be a different string than what you set with 
gtk_font_selection_set_font_name(), as the font selection widget may 
normalize font names and thus return a string with a different structure. 
For example, "Helvetica Italic Bold 12" could be normalized to 
"Helvetica Bold Italic 12". Use pango_font_description_equal()
if you want to compare two font descriptions.
no font is selected. You must free this string with g_free().</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A string with the name of the current font, or %NULL if</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_preview_entry"
              c:identifier="gtk_font_selection_get_preview_entry"
              version="2.14">
        <doc xml:whitespace="preserve">This returns the #GtkEntry used to display the font as a preview.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">A #GtkWidget that is part of @fontsel</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
      </method>
      <method name="get_preview_text"
              c:identifier="gtk_font_selection_get_preview_text">
        <doc xml:whitespace="preserve">Gets the text displayed in the preview area.
This string is owned by the widget and should not be 
modified or freed</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the text displayed in the preview area.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_size"
              c:identifier="gtk_font_selection_get_size"
              version="2.14">
        <doc xml:whitespace="preserve">The selected font size.
or -1 if no font size is selected.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">A n integer representing the selected font size,</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="get_size_entry"
              c:identifier="gtk_font_selection_get_size_entry"
              version="2.14">
        <doc xml:whitespace="preserve">This returns the #GtkEntry used to allow the user to edit the font
number manually instead of selecting it from the list of font sizes.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">A #GtkWidget that is part of @fontsel</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
      </method>
      <method name="get_size_list"
              c:identifier="gtk_font_selection_get_size_list"
              version="2.14">
        <doc xml:whitespace="preserve">This returns the #GtkTreeeView used to list font sizes.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">A #GtkWidget that is part of @fontsel</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
      </method>
      <method name="set_font_name"
              c:identifier="gtk_font_selection_set_font_name">
        <doc xml:whitespace="preserve">Sets the currently-selected font. 
Note that the @fontsel needs to know the screen in which it will appear 
for this to work; this can be guaranteed by simply making sure that the 
such font exists or if the @fontsel doesn't belong to a particular 
screen yet.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the font could be set successfully; %FALSE if no</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="fontname" transfer-ownership="none">
            <doc xml:whitespace="preserve">a font name like "Helvetica 12" or "Times Bold 18"</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_preview_text"
              c:identifier="gtk_font_selection_set_preview_text">
        <doc xml:whitespace="preserve">Sets the text displayed in the preview area.
The @text is used to show how the selected font looks.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="text" transfer-ownership="none">
            <doc xml:whitespace="preserve">the text to display in the preview area</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="font-name" writable="1" transfer-ownership="none">
        <type name="utf8"/>
      </property>
      <property name="preview-text" writable="1" transfer-ownership="none">
        <type name="utf8"/>
      </property>
      <field name="parent_instance">
        <type name="VBox" c:type="GtkVBox"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="FontSelectionPrivate" c:type="GtkFontSelectionPrivate*"/>
      </field>
    </class>
    <record name="FontSelectionClass"
            c:type="GtkFontSelectionClass"
            glib:is-gtype-struct-for="FontSelection">
      <field name="parent_class">
        <type name="VBoxClass" c:type="GtkVBoxClass"/>
      </field>
      <field name="_gtk_reserved1" introspectable="0">
        <callback name="_gtk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved2" introspectable="0">
        <callback name="_gtk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved3" introspectable="0">
        <callback name="_gtk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved4" introspectable="0">
        <callback name="_gtk_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <class name="FontSelectionDialog"
           c:symbol-prefix="font_selection_dialog"
           c:type="GtkFontSelectionDialog"
           parent="Dialog"
           glib:type-name="GtkFontSelectionDialog"
           glib:get-type="gtk_font_selection_dialog_get_type"
           glib:type-struct="FontSelectionDialogClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Buildable"/>
      <implements name="SizeRequest"/>
      <constructor name="new" c:identifier="gtk_font_selection_dialog_new">
        <doc xml:whitespace="preserve">Creates a new #GtkFontSelectionDialog.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a new #GtkFontSelectionDialog</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="title" transfer-ownership="none">
            <doc xml:whitespace="preserve">the title of the dialog window</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_cancel_button"
              c:identifier="gtk_font_selection_dialog_get_cancel_button"
              version="2.14">
        <doc xml:whitespace="preserve">Gets the 'Cancel' button.
for the 'Cancel' button.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the #GtkWidget used in the dialog</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
      </method>
      <method name="get_font_name"
              c:identifier="gtk_font_selection_dialog_get_font_name">
        <doc xml:whitespace="preserve">Gets the currently-selected font name.
Note that this can be a different string than what you set with 
gtk_font_selection_dialog_set_font_name(), as the font selection widget
may normalize font names and thus return a string with a different 
structure. For example, "Helvetica Italic Bold 12" could be normalized 
to "Helvetica Bold Italic 12".  Use pango_font_description_equal()
if you want to compare two font descriptions.
font is selected. You must free this string with g_free().</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A string with the name of the current font, or %NULL if no</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_font_selection"
              c:identifier="gtk_font_selection_dialog_get_font_selection"
              version="2.22">
        <doc xml:whitespace="preserve">Retrieves the #GtkFontSelection widget embedded in the dialog.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the embedded #GtkFontSelection</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
      </method>
      <method name="get_ok_button"
              c:identifier="gtk_font_selection_dialog_get_ok_button"
              version="2.14">
        <doc xml:whitespace="preserve">Gets the 'OK' button.
for the 'OK' button.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the #GtkWidget used in the dialog</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
      </method>
      <method name="get_preview_text"
              c:identifier="gtk_font_selection_dialog_get_preview_text">
        <doc xml:whitespace="preserve">Gets the text displayed in the preview area.
This string is owned by the widget and should not be 
modified or freed</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the text displayed in the preview area.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="set_font_name"
              c:identifier="gtk_font_selection_dialog_set_font_name">
        <doc xml:whitespace="preserve">Sets the currently selected font.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the font selected in @fsd is now the</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="fontname" transfer-ownership="none">
            <doc xml:whitespace="preserve">a font name like "Helvetica 12" or "Times Bold 18"</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_preview_text"
              c:identifier="gtk_font_selection_dialog_set_preview_text">
        <doc xml:whitespace="preserve">Sets the text displayed in the preview area.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="text" transfer-ownership="none">
            <doc xml:whitespace="preserve">the text to display in the preview area</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="Dialog" c:type="GtkDialog"/>
      </field>
      <field name="priv">
        <type name="FontSelectionDialogPrivate"
              c:type="GtkFontSelectionDialogPrivate*"/>
      </field>
    </class>
    <record name="FontSelectionDialogClass"
            c:type="GtkFontSelectionDialogClass"
            glib:is-gtype-struct-for="FontSelectionDialog">
      <field name="parent_class">
        <type name="DialogClass" c:type="GtkDialogClass"/>
      </field>
      <field name="_gtk_reserved1" introspectable="0">
        <callback name="_gtk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved2" introspectable="0">
        <callback name="_gtk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved3" introspectable="0">
        <callback name="_gtk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved4" introspectable="0">
        <callback name="_gtk_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="FontSelectionDialogPrivate"
            c:type="GtkFontSelectionDialogPrivate"
            disguised="1">
    </record>
    <record name="FontSelectionPrivate"
            c:type="GtkFontSelectionPrivate"
            disguised="1">
    </record>
    <class name="Frame"
           c:symbol-prefix="frame"
           c:type="GtkFrame"
           parent="Bin"
           glib:type-name="GtkFrame"
           glib:get-type="gtk_frame_get_type"
           glib:type-struct="FrameClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Buildable"/>
      <implements name="SizeRequest"/>
      <constructor name="new" c:identifier="gtk_frame_new">
        <doc xml:whitespace="preserve">Creates a new #GtkFrame, with optional label @label.
If @label is %NULL, the label is omitted.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a new #GtkFrame widget</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="label" transfer-ownership="none">
            <doc xml:whitespace="preserve">the text to use as the label of the frame</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <virtual-method name="compute_child_allocation">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="allocation" transfer-ownership="none">
            <type name="Allocation" c:type="GtkAllocation*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="get_label" c:identifier="gtk_frame_get_label">
        <doc xml:whitespace="preserve">If the frame's label widget is a #GtkLabel, returns the
text in the label widget. (The frame will have a #GtkLabel
for the label widget if a non-%NULL argument was passed
to gtk_frame_new().)
was no label widget or the lable widget was not
a #GtkLabel. This string is owned by GTK+ and
must not be modified or freed.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the text in the label, or %NULL if there</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_label_align" c:identifier="gtk_frame_get_label_align">
        <doc xml:whitespace="preserve">Retrieves the X and Y alignment of the frame's label. See
gtk_frame_set_label_align().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="xalign" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">location to store X alignment of frame's label, or %NULL</doc>
            <type name="gfloat" c:type="gfloat*"/>
          </parameter>
          <parameter name="yalign" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">location to store X alignment of frame's label, or %NULL</doc>
            <type name="gfloat" c:type="gfloat*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_label_widget"
              c:identifier="gtk_frame_get_label_widget">
        <doc xml:whitespace="preserve">Retrieves the label widget for the frame. See
gtk_frame_set_label_widget().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the label widget, or %NULL if there is none.</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
      </method>
      <method name="get_shadow_type" c:identifier="gtk_frame_get_shadow_type">
        <doc xml:whitespace="preserve">Retrieves the shadow type of the frame. See
gtk_frame_set_shadow_type().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the current shadow type of the frame.</doc>
          <type name="ShadowType" c:type="GtkShadowType"/>
        </return-value>
      </method>
      <method name="set_label" c:identifier="gtk_frame_set_label">
        <doc xml:whitespace="preserve">Sets the text of the label. If @label is %NULL,
the current label is removed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="label" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">the text to use as the label of the frame</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_label_align" c:identifier="gtk_frame_set_label_align">
        <doc xml:whitespace="preserve">Sets the alignment of the frame widget's label. The
default values for a newly created frame are 0.0 and 0.5.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="xalign" transfer-ownership="none">
            <doc xml:whitespace="preserve">The position of the label along the top edge of the widget. A value of 0.0 represents left alignment; 1.0 represents right alignment.</doc>
            <type name="gfloat" c:type="gfloat"/>
          </parameter>
          <parameter name="yalign" transfer-ownership="none">
            <doc xml:whitespace="preserve">The y alignment of the label. A value of 0.0 aligns under the frame; 1.0 aligns above the frame. If the values are exactly 0.0 or 1.0 the gap in the frame won't be painted because the label will be completely above or below the frame.</doc>
            <type name="gfloat" c:type="gfloat"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_label_widget"
              c:identifier="gtk_frame_set_label_widget">
        <doc xml:whitespace="preserve">Sets the label widget for the frame. This is the widget that
will appear embedded in the top edge of the frame as a
title.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="label_widget" transfer-ownership="none">
            <doc xml:whitespace="preserve">the new label widget</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_shadow_type" c:identifier="gtk_frame_set_shadow_type">
        <doc xml:whitespace="preserve">Sets the shadow type for @frame.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="type" transfer-ownership="none">
            <doc xml:whitespace="preserve">the new #GtkShadowType</doc>
            <type name="ShadowType" c:type="GtkShadowType"/>
          </parameter>
        </parameters>
      </method>
      <property name="label" writable="1" transfer-ownership="none">
        <type name="utf8"/>
      </property>
      <property name="label-widget" writable="1" transfer-ownership="none">
        <type name="Widget"/>
      </property>
      <property name="label-xalign" writable="1" transfer-ownership="none">
        <type name="gfloat"/>
      </property>
      <property name="label-yalign" writable="1" transfer-ownership="none">
        <type name="gfloat"/>
      </property>
      <property name="shadow-type" writable="1" transfer-ownership="none">
        <type name="ShadowType"/>
      </property>
      <field name="bin">
        <type name="Bin" c:type="GtkBin"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="FramePrivate" c:type="GtkFramePrivate*"/>
      </field>
    </class>
    <record name="FrameClass"
            c:type="GtkFrameClass"
            glib:is-gtype-struct-for="Frame">
      <field name="parent_class">
        <type name="BinClass" c:type="GtkBinClass"/>
      </field>
      <field name="compute_child_allocation">
        <callback name="compute_child_allocation">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="frame" transfer-ownership="none">
              <type name="Frame" c:type="GtkFrame*"/>
            </parameter>
            <parameter name="allocation" transfer-ownership="none">
              <type name="Allocation" c:type="GtkAllocation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="FramePrivate" c:type="GtkFramePrivate" disguised="1">
    </record>
    <callback name="Function" c:type="GtkFunction">
      <doc xml:whitespace="preserve">Defines a function pointer.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">#gint</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="data" transfer-ownership="none">
          <doc xml:whitespace="preserve">#gpointer</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <class name="HBox"
           c:symbol-prefix="hbox"
           c:type="GtkHBox"
           parent="Box"
           glib:type-name="GtkHBox"
           glib:get-type="gtk_hbox_get_type"
           glib:type-struct="HBoxClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Buildable"/>
      <implements name="Orientable"/>
      <implements name="SizeRequest"/>
      <constructor name="new" c:identifier="gtk_hbox_new">
        <doc xml:whitespace="preserve">Creates a new #GtkHBox.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a new #GtkHBox.</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="homogeneous" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE if all children are to be given equal space allotments.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="spacing" transfer-ownership="none">
            <doc xml:whitespace="preserve">the number of pixels to place by default between children.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </constructor>
      <field name="box">
        <type name="Box" c:type="GtkBox"/>
      </field>
    </class>
    <record name="HBoxClass"
            c:type="GtkHBoxClass"
            glib:is-gtype-struct-for="HBox">
      <field name="parent_class">
        <type name="BoxClass" c:type="GtkBoxClass"/>
      </field>
    </record>
    <class name="HButtonBox"
           c:symbol-prefix="hbutton_box"
           c:type="GtkHButtonBox"
           parent="ButtonBox"
           glib:type-name="GtkHButtonBox"
           glib:get-type="gtk_hbutton_box_get_type"
           glib:type-struct="HButtonBoxClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Buildable"/>
      <implements name="Orientable"/>
      <implements name="SizeRequest"/>
      <constructor name="new" c:identifier="gtk_hbutton_box_new">
        <return-value transfer-ownership="none">
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <field name="button_box">
        <type name="ButtonBox" c:type="GtkButtonBox"/>
      </field>
    </class>
    <record name="HButtonBoxClass"
            c:type="GtkHButtonBoxClass"
            glib:is-gtype-struct-for="HButtonBox">
      <field name="parent_class">
        <type name="ButtonBoxClass" c:type="GtkButtonBoxClass"/>
      </field>
    </record>
    <class name="HPaned"
           c:symbol-prefix="hpaned"
           c:type="GtkHPaned"
           parent="Paned"
           glib:type-name="GtkHPaned"
           glib:get-type="gtk_hpaned_get_type"
           glib:type-struct="HPanedClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Buildable"/>
      <implements name="Orientable"/>
      <implements name="SizeRequest"/>
      <constructor name="new" c:identifier="gtk_hpaned_new">
        <return-value transfer-ownership="none">
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <field name="paned">
        <type name="Paned" c:type="GtkPaned"/>
      </field>
    </class>
    <record name="HPanedClass"
            c:type="GtkHPanedClass"
            glib:is-gtype-struct-for="HPaned">
      <field name="parent_class">
        <type name="PanedClass" c:type="GtkPanedClass"/>
      </field>
    </record>
    <class name="HRuler"
           c:symbol-prefix="hruler"
           c:type="GtkHRuler"
           parent="Ruler"
           glib:type-name="GtkHRuler"
           glib:get-type="gtk_hruler_get_type"
           glib:type-struct="HRulerClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Buildable"/>
      <implements name="Orientable"/>
      <implements name="SizeRequest"/>
      <constructor name="new" c:identifier="gtk_hruler_new">
        <return-value transfer-ownership="none">
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <field name="ruler">
        <type name="Ruler" c:type="GtkRuler"/>
      </field>
    </class>
    <record name="HRulerClass"
            c:type="GtkHRulerClass"
            glib:is-gtype-struct-for="HRuler">
      <field name="parent_class">
        <type name="RulerClass" c:type="GtkRulerClass"/>
      </field>
    </record>
    <class name="HSV"
           c:symbol-prefix="hsv"
           c:type="GtkHSV"
           parent="Widget"
           glib:type-name="GtkHSV"
           glib:get-type="gtk_hsv_get_type"
           glib:type-struct="HSVClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Buildable"/>
      <implements name="SizeRequest"/>
      <constructor name="new" c:identifier="gtk_hsv_new" version="2.14">
        <doc xml:whitespace="preserve">Creates a new HSV color selector.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">A newly-created HSV color selector.</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <function name="to_rgb" c:identifier="gtk_hsv_to_rgb" version="2.14">
        <doc xml:whitespace="preserve">Converts a color from HSV space to RGB.
Input values must be in the [0.0, 1.0] range; 
output values will be in the same range.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="h" transfer-ownership="none">
            <doc xml:whitespace="preserve">Hue</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="s" transfer-ownership="none">
            <doc xml:whitespace="preserve">Saturation</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="v" transfer-ownership="none">
            <doc xml:whitespace="preserve">Value</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="r" transfer-ownership="none">
            <doc xml:whitespace="preserve">Return value for the red component</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="g" transfer-ownership="none">
            <doc xml:whitespace="preserve">Return value for the green component</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="b" transfer-ownership="none">
            <doc xml:whitespace="preserve">Return value for the blue component</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </function>
      <method name="get_color" c:identifier="gtk_hsv_get_color" version="2.14">
        <doc xml:whitespace="preserve">Queries the current color in an HSV color selector.
Returned values will be in the [0.0, 1.0] range.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="h" transfer-ownership="none">
            <doc xml:whitespace="preserve">Return value for the hue</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="s" transfer-ownership="none">
            <doc xml:whitespace="preserve">Return value for the saturation</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="v" transfer-ownership="none">
            <doc xml:whitespace="preserve">Return value for the value</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_metrics"
              c:identifier="gtk_hsv_get_metrics"
              version="2.14">
        <doc xml:whitespace="preserve">Queries the size and ring width of an HSV color selector.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="size" transfer-ownership="none">
            <doc xml:whitespace="preserve">Return value for the diameter of the hue ring</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="ring_width" transfer-ownership="none">
            <doc xml:whitespace="preserve">Return value for the width of the hue ring</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_adjusting"
              c:identifier="gtk_hsv_is_adjusting"
              version="2.14">
        <doc xml:whitespace="preserve">An HSV color selector can be said to be adjusting if multiple rapid
changes are being made to its value, for example, when the user is 
adjusting the value with the mouse. This function queries whether 
the HSV color selector is being adjusted or not.
since they may be transitory, or %FALSE if they should consider
the color value status to be final.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if clients can ignore changes to the color value,</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="set_color" c:identifier="gtk_hsv_set_color" version="2.14">
        <doc xml:whitespace="preserve">Sets the current color in an HSV color selector.
Color component values must be in the [0.0, 1.0] range.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="h" transfer-ownership="none">
            <doc xml:whitespace="preserve">Hue</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="s" transfer-ownership="none">
            <doc xml:whitespace="preserve">Saturation</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="v" transfer-ownership="none">
            <doc xml:whitespace="preserve">Value</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_metrics"
              c:identifier="gtk_hsv_set_metrics"
              version="2.14">
        <doc xml:whitespace="preserve">Sets the size and ring width of an HSV color selector.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="size" transfer-ownership="none">
            <doc xml:whitespace="preserve">Diameter for the hue ring</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="ring_width" transfer-ownership="none">
            <doc xml:whitespace="preserve">Width of the hue ring</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="Widget" c:type="GtkWidget"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="HSVPrivate" c:type="GtkHSVPrivate*"/>
      </field>
      <glib:signal name="changed">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
      <glib:signal name="move">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="DirectionType"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="HSVClass"
            c:type="GtkHSVClass"
            glib:is-gtype-struct-for="HSV">
      <field name="parent_class">
        <type name="WidgetClass" c:type="GtkWidgetClass"/>
      </field>
      <field name="changed">
        <callback name="changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="hsv" transfer-ownership="none">
              <type name="HSV" c:type="GtkHSV*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="move">
        <callback name="move">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="hsv" transfer-ownership="none">
              <type name="HSV" c:type="GtkHSV*"/>
            </parameter>
            <parameter name="type" transfer-ownership="none">
              <type name="DirectionType" c:type="GtkDirectionType"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_gtk_reserved1" introspectable="0">
        <callback name="_gtk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved2" introspectable="0">
        <callback name="_gtk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved3" introspectable="0">
        <callback name="_gtk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved4" introspectable="0">
        <callback name="_gtk_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="HSVPrivate" c:type="GtkHSVPrivate" disguised="1">
    </record>
    <class name="HScale"
           c:symbol-prefix="hscale"
           c:type="GtkHScale"
           parent="Scale"
           glib:type-name="GtkHScale"
           glib:get-type="gtk_hscale_get_type"
           glib:type-struct="HScaleClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Buildable"/>
      <implements name="Orientable"/>
      <implements name="SizeRequest"/>
      <constructor name="new" c:identifier="gtk_hscale_new">
        <return-value transfer-ownership="none">
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="adjustment" transfer-ownership="none">
            <type name="Adjustment" c:type="GtkAdjustment*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_with_range"
                   c:identifier="gtk_hscale_new_with_range">
        <doc xml:whitespace="preserve">Creates a new horizontal scale widget that lets the user input a
number between @min and @max (including @min and @max) with the
increment @step.  @step must be nonzero; it's the distance the
slider moves when using the arrow keys to adjust the scale value.
Note that the way in which the precision is derived works best if @step
is a power of ten. If the resulting precision is not suitable for your
needs, use gtk_scale_set_digits() to correct it.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a new #GtkHScale</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="min" transfer-ownership="none">
            <doc xml:whitespace="preserve">minimum value</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="max" transfer-ownership="none">
            <doc xml:whitespace="preserve">maximum value</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="step" transfer-ownership="none">
            <doc xml:whitespace="preserve">step increment (tick size) used with keyboard shortcuts</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </constructor>
      <field name="scale">
        <type name="Scale" c:type="GtkScale"/>
      </field>
    </class>
    <record name="HScaleClass"
            c:type="GtkHScaleClass"
            glib:is-gtype-struct-for="HScale">
      <field name="parent_class">
        <type name="ScaleClass" c:type="GtkScaleClass"/>
      </field>
    </record>
    <class name="HScrollbar"
           c:symbol-prefix="hscrollbar"
           c:type="GtkHScrollbar"
           parent="Scrollbar"
           glib:type-name="GtkHScrollbar"
           glib:get-type="gtk_hscrollbar_get_type"
           glib:type-struct="HScrollbarClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Buildable"/>
      <implements name="Orientable"/>
      <implements name="SizeRequest"/>
      <constructor name="new" c:identifier="gtk_hscrollbar_new">
        <doc xml:whitespace="preserve">Creates a new horizontal scrollbar.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the new #GtkHScrollbar</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="adjustment"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">the #GtkAdjustment to use, or %NULL to create a new adjustment</doc>
            <type name="Adjustment" c:type="GtkAdjustment*"/>
          </parameter>
        </parameters>
      </constructor>
      <field name="scrollbar">
        <type name="Scrollbar" c:type="GtkScrollbar"/>
      </field>
    </class>
    <record name="HScrollbarClass"
            c:type="GtkHScrollbarClass"
            glib:is-gtype-struct-for="HScrollbar">
      <field name="parent_class">
        <type name="ScrollbarClass" c:type="GtkScrollbarClass"/>
      </field>
    </record>
    <class name="HSeparator"
           c:symbol-prefix="hseparator"
           c:type="GtkHSeparator"
           parent="Separator"
           glib:type-name="GtkHSeparator"
           glib:get-type="gtk_hseparator_get_type"
           glib:type-struct="HSeparatorClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Buildable"/>
      <implements name="Orientable"/>
      <implements name="SizeRequest"/>
      <constructor name="new" c:identifier="gtk_hseparator_new">
        <return-value transfer-ownership="none">
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <field name="separator">
        <type name="Separator" c:type="GtkSeparator"/>
      </field>
    </class>
    <record name="HSeparatorClass"
            c:type="GtkHSeparatorClass"
            glib:is-gtype-struct-for="HSeparator">
      <field name="parent_class">
        <type name="SeparatorClass" c:type="GtkSeparatorClass"/>
      </field>
    </record>
    <class name="HandleBox"
           c:symbol-prefix="handle_box"
           c:type="GtkHandleBox"
           parent="Bin"
           glib:type-name="GtkHandleBox"
           glib:get-type="gtk_handle_box_get_type"
           glib:type-struct="HandleBoxClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Buildable"/>
      <implements name="SizeRequest"/>
      <constructor name="new" c:identifier="gtk_handle_box_new">
        <return-value transfer-ownership="none">
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="get_child_detached"
              c:identifier="gtk_handle_box_get_child_detached"
              version="2.14">
        <doc xml:whitespace="preserve">Whether the handlebox's child is currently detached.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the child is currently detached, otherwise %FALSE</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_handle_position"
              c:identifier="gtk_handle_box_get_handle_position">
        <doc xml:whitespace="preserve">Gets the handle position of the handle box. See
gtk_handle_box_set_handle_position().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the current handle position.</doc>
          <type name="PositionType" c:type="GtkPositionType"/>
        </return-value>
      </method>
      <method name="get_shadow_type"
              c:identifier="gtk_handle_box_get_shadow_type">
        <doc xml:whitespace="preserve">Gets the type of shadow drawn around the handle box. See
gtk_handle_box_set_shadow_type().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the type of shadow currently drawn around the handle box.</doc>
          <type name="ShadowType" c:type="GtkShadowType"/>
        </return-value>
      </method>
      <method name="get_snap_edge" c:identifier="gtk_handle_box_get_snap_edge">
        <doc xml:whitespace="preserve">Gets the edge used for determining reattachment of the handle box. See
gtk_handle_box_set_snap_edge().
is determined (as per default) from the handle position.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the edge used for determining reattachment, or (GtkPositionType)-1 if this</doc>
          <type name="PositionType" c:type="GtkPositionType"/>
        </return-value>
      </method>
      <method name="set_handle_position"
              c:identifier="gtk_handle_box_set_handle_position">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="position" transfer-ownership="none">
            <type name="PositionType" c:type="GtkPositionType"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_shadow_type"
              c:identifier="gtk_handle_box_set_shadow_type">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="type" transfer-ownership="none">
            <type name="ShadowType" c:type="GtkShadowType"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_snap_edge" c:identifier="gtk_handle_box_set_snap_edge">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="edge" transfer-ownership="none">
            <type name="PositionType" c:type="GtkPositionType"/>
          </parameter>
        </parameters>
      </method>
      <property name="child-detached" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="handle-position" writable="1" transfer-ownership="none">
        <type name="PositionType"/>
      </property>
      <property name="shadow-type" writable="1" transfer-ownership="none">
        <type name="ShadowType"/>
      </property>
      <property name="snap-edge" writable="1" transfer-ownership="none">
        <type name="PositionType"/>
      </property>
      <property name="snap-edge-set" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <field name="bin">
        <type name="Bin" c:type="GtkBin"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="HandleBoxPrivate" c:type="GtkHandleBoxPrivate*"/>
      </field>
      <glib:signal name="child-attached">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Widget"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="child-detached">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Widget"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="HandleBoxClass"
            c:type="GtkHandleBoxClass"
            glib:is-gtype-struct-for="HandleBox">
      <field name="parent_class">
        <type name="BinClass" c:type="GtkBinClass"/>
      </field>
      <field name="child_attached">
        <callback name="child_attached">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="handle_box" transfer-ownership="none">
              <type name="HandleBox" c:type="GtkHandleBox*"/>
            </parameter>
            <parameter name="child" transfer-ownership="none">
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="child_detached">
        <callback name="child_detached">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="handle_box" transfer-ownership="none">
              <type name="HandleBox" c:type="GtkHandleBox*"/>
            </parameter>
            <parameter name="child" transfer-ownership="none">
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_gtk_reserved1" introspectable="0">
        <callback name="_gtk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved2" introspectable="0">
        <callback name="_gtk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved3" introspectable="0">
        <callback name="_gtk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved4" introspectable="0">
        <callback name="_gtk_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="HandleBoxPrivate" c:type="GtkHandleBoxPrivate" disguised="1">
    </record>
    <class name="IMContext"
           c:symbol-prefix="im_context"
           c:type="GtkIMContext"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="GtkIMContext"
           glib:get-type="gtk_im_context_get_type"
           glib:type-struct="IMContextClass">
      <virtual-method name="filter_keypress" invoker="filter_keypress">
        <doc xml:whitespace="preserve">Allow an input method to internally handle key press and release 
events. If this function returns %TRUE, then no further processing
should be done for this key event.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the input method handled the key event.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="event" transfer-ownership="none">
            <doc xml:whitespace="preserve">the key event</doc>
            <type name="Gdk.EventKey" c:type="GdkEventKey*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="focus_in" invoker="focus_in">
        <doc xml:whitespace="preserve">Notify the input method that the widget to which this
input context corresponds has gained focus. The input method
may, for example, change the displayed feedback to reflect
this change.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </virtual-method>
      <virtual-method name="focus_out" invoker="focus_out">
        <doc xml:whitespace="preserve">Notify the input method that the widget to which this
input context corresponds has lost focus. The input method
may, for example, change the displayed feedback or reset the contexts
state to reflect this change.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </virtual-method>
      <virtual-method name="get_preedit_string" invoker="get_preedit_string">
        <doc xml:whitespace="preserve">Retrieve the current preedit string for the input context,
and a list of attributes to apply to the string.
This string should be displayed inserted at the insertion
point.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="str" transfer-ownership="none">
            <doc xml:whitespace="preserve">location to store the retrieved string. The string retrieved must be freed with g_free ().</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="attrs" transfer-ownership="none">
            <doc xml:whitespace="preserve">location to store the retrieved attribute list. When you are done with this list, you must unreference it with pango_attr_list_unref().</doc>
            <type name="Pango.AttrList" c:type="PangoAttrList**"/>
          </parameter>
          <parameter name="cursor_pos" transfer-ownership="none">
            <doc xml:whitespace="preserve">location to store position of cursor (in characters) within the preedit string.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_surrounding" invoker="get_surrounding">
        <doc xml:whitespace="preserve">Retrieves context around the insertion point. Input methods
typically want context in order to constrain input text based on
existing text; this is important for languages such as Thai where
only some sequences of characters are allowed.
This function is implemented by emitting the
GtkIMContext::retrieve_surrounding signal on the input method; in
response to this signal, a widget should provide as much context as
is available, up to an entire paragraph, by calling
gtk_im_context_set_surrounding(). Note that there is no obligation
for a widget to respond to the ::retrieve_surrounding signal, so input
methods must be prepared to function without context.
you must free the result stored in *text.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if surrounding text was provided; in this case</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="text" transfer-ownership="none">
            <doc xml:whitespace="preserve">location to store a UTF-8 encoded string of text holding context around the insertion point. If the function returns %TRUE, then you must free the result stored in this location with g_free().</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cursor_index" transfer-ownership="none">
            <doc xml:whitespace="preserve">location to store byte index of the insertion cursor within @text.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="reset" invoker="reset">
        <doc xml:whitespace="preserve">Notify the input method that a change such as a change in cursor
position has been made. This will typically cause the input
method to clear the preedit state.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </virtual-method>
      <virtual-method name="set_client_window" invoker="set_client_window">
        <doc xml:whitespace="preserve">Set the client window for the input context; this is the
#GdkWindow in which the input appears. This window is
used in order to correctly position status windows, and may
also be used for purposes internal to the input method.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="window" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">the client window. This may be %NULL to indicate that the previous client window no longer exists.</doc>
            <type name="Gdk.Window" c:type="GdkWindow*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_cursor_location" invoker="set_cursor_location">
        <doc xml:whitespace="preserve">Notify the input method that a change in cursor 
position has been made. The location is relative to the client
window.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="area" transfer-ownership="none">
            <doc xml:whitespace="preserve">new location</doc>
            <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_surrounding" invoker="set_surrounding">
        <doc xml:whitespace="preserve">Sets surrounding context around the insertion point and preedit
string. This function is expected to be called in response to the
GtkIMContext::retrieve_surrounding signal, and will likely have no
effect if called at other times.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="text" transfer-ownership="none">
            <doc xml:whitespace="preserve">text surrounding the insertion point, as UTF-8. the preedit string should not be included within</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <doc xml:whitespace="preserve">the length of @text, or -1 if @text is nul-terminated</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="cursor_index" transfer-ownership="none">
            <doc xml:whitespace="preserve">the byte index of the insertion cursor within @text.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_use_preedit" invoker="set_use_preedit">
        <doc xml:whitespace="preserve">Sets whether the IM context should use the preedit string
to display feedback. If @use_preedit is FALSE (default
is TRUE), then the IM context may use some other method to display
feedback, such as displaying it in a child of the root window.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="use_preedit" transfer-ownership="none">
            <doc xml:whitespace="preserve">whether the IM context should use the preedit string.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="delete_surrounding"
              c:identifier="gtk_im_context_delete_surrounding">
        <doc xml:whitespace="preserve">Asks the widget that the input context is attached to to delete
characters around the cursor position by emitting the
GtkIMContext::delete_surrounding signal. Note that @offset and @n_chars
are in characters not in bytes which differs from the usage other
places in #GtkIMContext.
In order to use this function, you should first call
gtk_im_context_get_surrounding() to get the current context, and
call this function immediately afterwards to make sure that you
know what you are deleting. You should also account for the fact
that even if the signal was handled, the input context might not
have deleted all the characters that were requested to be deleted.
This function is used by an input method that wants to make
subsitutions in the existing text in response to new input. It is
not useful for applications.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the signal was handled.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="offset" transfer-ownership="none">
            <doc xml:whitespace="preserve">offset from cursor position in chars; a negative value means start before the cursor.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="n_chars" transfer-ownership="none">
            <doc xml:whitespace="preserve">number of characters to delete.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="filter_keypress"
              c:identifier="gtk_im_context_filter_keypress">
        <doc xml:whitespace="preserve">Allow an input method to internally handle key press and release 
events. If this function returns %TRUE, then no further processing
should be done for this key event.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the input method handled the key event.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="event" transfer-ownership="none">
            <doc xml:whitespace="preserve">the key event</doc>
            <type name="Gdk.EventKey" c:type="GdkEventKey*"/>
          </parameter>
        </parameters>
      </method>
      <method name="focus_in" c:identifier="gtk_im_context_focus_in">
        <doc xml:whitespace="preserve">Notify the input method that the widget to which this
input context corresponds has gained focus. The input method
may, for example, change the displayed feedback to reflect
this change.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="focus_out" c:identifier="gtk_im_context_focus_out">
        <doc xml:whitespace="preserve">Notify the input method that the widget to which this
input context corresponds has lost focus. The input method
may, for example, change the displayed feedback or reset the contexts
state to reflect this change.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="get_preedit_string"
              c:identifier="gtk_im_context_get_preedit_string">
        <doc xml:whitespace="preserve">Retrieve the current preedit string for the input context,
and a list of attributes to apply to the string.
This string should be displayed inserted at the insertion
point.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="str" transfer-ownership="none">
            <doc xml:whitespace="preserve">location to store the retrieved string. The string retrieved must be freed with g_free ().</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="attrs" transfer-ownership="none">
            <doc xml:whitespace="preserve">location to store the retrieved attribute list. When you are done with this list, you must unreference it with pango_attr_list_unref().</doc>
            <type name="Pango.AttrList" c:type="PangoAttrList**"/>
          </parameter>
          <parameter name="cursor_pos" transfer-ownership="none">
            <doc xml:whitespace="preserve">location to store position of cursor (in characters) within the preedit string.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_surrounding"
              c:identifier="gtk_im_context_get_surrounding">
        <doc xml:whitespace="preserve">Retrieves context around the insertion point. Input methods
typically want context in order to constrain input text based on
existing text; this is important for languages such as Thai where
only some sequences of characters are allowed.
This function is implemented by emitting the
GtkIMContext::retrieve_surrounding signal on the input method; in
response to this signal, a widget should provide as much context as
is available, up to an entire paragraph, by calling
gtk_im_context_set_surrounding(). Note that there is no obligation
for a widget to respond to the ::retrieve_surrounding signal, so input
methods must be prepared to function without context.
you must free the result stored in *text.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if surrounding text was provided; in this case</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="text" transfer-ownership="none">
            <doc xml:whitespace="preserve">location to store a UTF-8 encoded string of text holding context around the insertion point. If the function returns %TRUE, then you must free the result stored in this location with g_free().</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cursor_index" transfer-ownership="none">
            <doc xml:whitespace="preserve">location to store byte index of the insertion cursor within @text.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="reset" c:identifier="gtk_im_context_reset">
        <doc xml:whitespace="preserve">Notify the input method that a change such as a change in cursor
position has been made. This will typically cause the input
method to clear the preedit state.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="set_client_window"
              c:identifier="gtk_im_context_set_client_window">
        <doc xml:whitespace="preserve">Set the client window for the input context; this is the
#GdkWindow in which the input appears. This window is
used in order to correctly position status windows, and may
also be used for purposes internal to the input method.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="window" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">the client window. This may be %NULL to indicate that the previous client window no longer exists.</doc>
            <type name="Gdk.Window" c:type="GdkWindow*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_cursor_location"
              c:identifier="gtk_im_context_set_cursor_location">
        <doc xml:whitespace="preserve">Notify the input method that a change in cursor 
position has been made. The location is relative to the client
window.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="area" transfer-ownership="none">
            <doc xml:whitespace="preserve">new location</doc>
            <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_surrounding"
              c:identifier="gtk_im_context_set_surrounding">
        <doc xml:whitespace="preserve">Sets surrounding context around the insertion point and preedit
string. This function is expected to be called in response to the
GtkIMContext::retrieve_surrounding signal, and will likely have no
effect if called at other times.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="text" transfer-ownership="none">
            <doc xml:whitespace="preserve">text surrounding the insertion point, as UTF-8. the preedit string should not be included within</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <doc xml:whitespace="preserve">the length of @text, or -1 if @text is nul-terminated</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="cursor_index" transfer-ownership="none">
            <doc xml:whitespace="preserve">the byte index of the insertion cursor within @text.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_use_preedit"
              c:identifier="gtk_im_context_set_use_preedit">
        <doc xml:whitespace="preserve">Sets whether the IM context should use the preedit string
to display feedback. If @use_preedit is FALSE (default
is TRUE), then the IM context may use some other method to display
feedback, such as displaying it in a child of the root window.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="use_preedit" transfer-ownership="none">
            <doc xml:whitespace="preserve">whether the IM context should use the preedit string.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <glib:signal name="commit">
        <doc xml:whitespace="preserve">The ::commit signal is emitted when a complete input sequence
has been entered by the user. This can be a single character
immediately after a key press or the final result of preediting.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the completed character(s) entered by the user</doc>
            <type name="utf8"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="delete-surrounding">
        <doc xml:whitespace="preserve">The ::delete-surrounding signal is emitted when the input method
needs to delete all or part of the context surrounding the cursor.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the signal was handled.</doc>
          <type name="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the character offset from the cursor position of the text to be deleted. A negative value indicates a position before the cursor.</doc>
            <type name="gint"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <doc xml:whitespace="preserve">the number of characters to be deleted</doc>
            <type name="gint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="preedit-changed">
        <doc xml:whitespace="preserve">The ::preedit-changed signal is emitted whenever the preedit sequence
currently being entered has changed.  It is also emitted at the end of
a preedit sequence, in which case
gtk_im_context_get_preedit_string() returns the empty string.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
      <glib:signal name="preedit-end">
        <doc xml:whitespace="preserve">The ::preedit-end signal is emitted when a preediting sequence
has been completed or canceled.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
      <glib:signal name="preedit-start">
        <doc xml:whitespace="preserve">The ::preedit-start signal is emitted when a new preediting sequence
starts.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
      <glib:signal name="retrieve-surrounding">
        <doc xml:whitespace="preserve">The ::retrieve-surrounding signal is emitted when the input method
requires the context surrounding the cursor.  The callback should set
the input method surrounding context by calling the
gtk_im_context_set_surrounding() method.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the signal was handled.</doc>
          <type name="gboolean"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="IMContextClass"
            c:type="GtkIMContextClass"
            glib:is-gtype-struct-for="IMContext">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="preedit_start">
        <callback name="preedit_start">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="context" transfer-ownership="none">
              <type name="IMContext" c:type="GtkIMContext*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="preedit_end">
        <callback name="preedit_end">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="context" transfer-ownership="none">
              <type name="IMContext" c:type="GtkIMContext*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="preedit_changed">
        <callback name="preedit_changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="context" transfer-ownership="none">
              <type name="IMContext" c:type="GtkIMContext*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="commit">
        <callback name="commit">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="context" transfer-ownership="none">
              <type name="IMContext" c:type="GtkIMContext*"/>
            </parameter>
            <parameter name="str" transfer-ownership="none">
              <type name="utf8" c:type="gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="retrieve_surrounding">
        <callback name="retrieve_surrounding">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="context" transfer-ownership="none">
              <type name="IMContext" c:type="GtkIMContext*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="delete_surrounding">
        <callback name="delete_surrounding">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="context" transfer-ownership="none">
              <type name="IMContext" c:type="GtkIMContext*"/>
            </parameter>
            <parameter name="offset" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="n_chars" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_client_window">
        <callback name="set_client_window">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="context" transfer-ownership="none">
              <type name="IMContext" c:type="GtkIMContext*"/>
            </parameter>
            <parameter name="window" transfer-ownership="none" allow-none="1">
              <doc xml:whitespace="preserve">the client window. This may be %NULL to indicate that the previous client window no longer exists.</doc>
              <type name="Gdk.Window" c:type="GdkWindow*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_preedit_string">
        <callback name="get_preedit_string">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="context" transfer-ownership="none">
              <type name="IMContext" c:type="GtkIMContext*"/>
            </parameter>
            <parameter name="str" transfer-ownership="none">
              <doc xml:whitespace="preserve">location to store the retrieved string. The string retrieved must be freed with g_free ().</doc>
              <type name="utf8" c:type="gchar**"/>
            </parameter>
            <parameter name="attrs" transfer-ownership="none">
              <doc xml:whitespace="preserve">location to store the retrieved attribute list. When you are done with this list, you must unreference it with pango_attr_list_unref().</doc>
              <type name="Pango.AttrList" c:type="PangoAttrList**"/>
            </parameter>
            <parameter name="cursor_pos" transfer-ownership="none">
              <doc xml:whitespace="preserve">location to store position of cursor (in characters) within the preedit string.</doc>
              <type name="gint" c:type="gint*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="filter_keypress">
        <callback name="filter_keypress">
          <return-value transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE if the input method handled the key event.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="context" transfer-ownership="none">
              <type name="IMContext" c:type="GtkIMContext*"/>
            </parameter>
            <parameter name="event" transfer-ownership="none">
              <doc xml:whitespace="preserve">the key event</doc>
              <type name="Gdk.EventKey" c:type="GdkEventKey*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="focus_in">
        <callback name="focus_in">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="context" transfer-ownership="none">
              <type name="IMContext" c:type="GtkIMContext*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="focus_out">
        <callback name="focus_out">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="context" transfer-ownership="none">
              <type name="IMContext" c:type="GtkIMContext*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="reset">
        <callback name="reset">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="context" transfer-ownership="none">
              <type name="IMContext" c:type="GtkIMContext*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_cursor_location">
        <callback name="set_cursor_location">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="context" transfer-ownership="none">
              <type name="IMContext" c:type="GtkIMContext*"/>
            </parameter>
            <parameter name="area" transfer-ownership="none">
              <doc xml:whitespace="preserve">new location</doc>
              <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_use_preedit">
        <callback name="set_use_preedit">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="context" transfer-ownership="none">
              <type name="IMContext" c:type="GtkIMContext*"/>
            </parameter>
            <parameter name="use_preedit" transfer-ownership="none">
              <doc xml:whitespace="preserve">whether the IM context should use the preedit string.</doc>
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_surrounding">
        <callback name="set_surrounding">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="context" transfer-ownership="none">
              <type name="IMContext" c:type="GtkIMContext*"/>
            </parameter>
            <parameter name="text" transfer-ownership="none">
              <doc xml:whitespace="preserve">text surrounding the insertion point, as UTF-8. the preedit string should not be included within</doc>
              <type name="utf8" c:type="gchar*"/>
            </parameter>
            <parameter name="len" transfer-ownership="none">
              <doc xml:whitespace="preserve">the length of @text, or -1 if @text is nul-terminated</doc>
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="cursor_index" transfer-ownership="none">
              <doc xml:whitespace="preserve">the byte index of the insertion cursor within @text.</doc>
              <type name="gint" c:type="gint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_surrounding">
        <callback name="get_surrounding">
          <return-value transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE if surrounding text was provided; in this case</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="context" transfer-ownership="none">
              <type name="IMContext" c:type="GtkIMContext*"/>
            </parameter>
            <parameter name="text" transfer-ownership="none">
              <doc xml:whitespace="preserve">location to store a UTF-8 encoded string of text holding context around the insertion point. If the function returns %TRUE, then you must free the result stored in this location with g_free().</doc>
              <type name="utf8" c:type="gchar**"/>
            </parameter>
            <parameter name="cursor_index" transfer-ownership="none">
              <doc xml:whitespace="preserve">location to store byte index of the insertion cursor within @text.</doc>
              <type name="gint" c:type="gint*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_gtk_reserved1" introspectable="0">
        <callback name="_gtk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved2" introspectable="0">
        <callback name="_gtk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved3" introspectable="0">
        <callback name="_gtk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved4" introspectable="0">
        <callback name="_gtk_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved5" introspectable="0">
        <callback name="_gtk_reserved5">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved6" introspectable="0">
        <callback name="_gtk_reserved6">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="IMContextInfo" c:type="GtkIMContextInfo">
      <doc xml:whitespace="preserve">Bookkeeping information about a loadable input method.</doc>
      <field name="context_id" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="context_name" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="domain" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="domain_dirname" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="default_locales" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
    </record>
    <class name="IMContextSimple"
           c:symbol-prefix="im_context_simple"
           c:type="GtkIMContextSimple"
           parent="IMContext"
           glib:type-name="GtkIMContextSimple"
           glib:get-type="gtk_im_context_simple_get_type"
           glib:type-struct="IMContextSimpleClass">
      <constructor name="new" c:identifier="gtk_im_context_simple_new">
        <return-value transfer-ownership="full">
          <type name="IMContext" c:type="GtkIMContext*"/>
        </return-value>
      </constructor>
      <method name="add_table" c:identifier="gtk_im_context_simple_add_table">
        <doc xml:whitespace="preserve">Adds an additional table to search to the input context.
Each row of the table consists of @max_seq_len key symbols
followed by two #guint16 interpreted as the high and low
words of a #gunicode value. Tables are searched starting
from the last added.
The table must be sorted in dictionary order on the
numeric value of the key symbol fields. (Values beyond
the length of the sequence should be zero.)</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="data" transfer-ownership="none">
            <doc xml:whitespace="preserve">the table</doc>
            <type name="guint16" c:type="guint16*"/>
          </parameter>
          <parameter name="max_seq_len" transfer-ownership="none">
            <doc xml:whitespace="preserve">Maximum length of a sequence in the table (cannot be greater than #GTK_MAX_COMPOSE_LEN)</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="n_seqs" transfer-ownership="none">
            <doc xml:whitespace="preserve">number of sequences in the table</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <field name="object">
        <type name="IMContext" c:type="GtkIMContext"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="IMContextSimplePrivate"
              c:type="GtkIMContextSimplePrivate*"/>
      </field>
    </class>
    <record name="IMContextSimpleClass"
            c:type="GtkIMContextSimpleClass"
            glib:is-gtype-struct-for="IMContextSimple">
      <field name="parent_class">
        <type name="IMContextClass" c:type="GtkIMContextClass"/>
      </field>
    </record>
    <record name="IMContextSimplePrivate"
            c:type="GtkIMContextSimplePrivate"
            disguised="1">
    </record>
    <class name="IMMulticontext"
           c:symbol-prefix="im_multicontext"
           c:type="GtkIMMulticontext"
           parent="IMContext"
           glib:type-name="GtkIMMulticontext"
           glib:get-type="gtk_im_multicontext_get_type"
           glib:type-struct="IMMulticontextClass">
      <constructor name="new" c:identifier="gtk_im_multicontext_new">
        <doc xml:whitespace="preserve">Creates a new #GtkIMMulticontext.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new #GtkIMMulticontext.</doc>
          <type name="IMContext" c:type="GtkIMContext*"/>
        </return-value>
      </constructor>
      <method name="append_menuitems"
              c:identifier="gtk_im_multicontext_append_menuitems">
        <doc xml:whitespace="preserve">Add menuitems for various available input methods to a menu;
the menuitems, when selected, will switch the input method
for the context and the global default input method.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="menushell" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkMenuShell</doc>
            <type name="MenuShell" c:type="GtkMenuShell*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_context_id"
              c:identifier="gtk_im_multicontext_get_context_id"
              version="2.16">
        <doc xml:whitespace="preserve">Gets the id of the currently active slave of the @context.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the id of the currently active slave</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
      </method>
      <method name="set_context_id"
              c:identifier="gtk_im_multicontext_set_context_id"
              version="2.16">
        <doc xml:whitespace="preserve">Sets the context id for @context.
This causes the currently active slave of @context to be
replaced by the slave corresponding to the new context id.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="context_id" transfer-ownership="none">
            <doc xml:whitespace="preserve">the id to use</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <field name="object">
        <type name="IMContext" c:type="GtkIMContext"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="IMMulticontextPrivate" c:type="GtkIMMulticontextPrivate*"/>
      </field>
    </class>
    <record name="IMMulticontextClass"
            c:type="GtkIMMulticontextClass"
            glib:is-gtype-struct-for="IMMulticontext">
      <field name="parent_class">
        <type name="IMContextClass" c:type="GtkIMContextClass"/>
      </field>
      <field name="_gtk_reserved1" introspectable="0">
        <callback name="_gtk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved2" introspectable="0">
        <callback name="_gtk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved3" introspectable="0">
        <callback name="_gtk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved4" introspectable="0">
        <callback name="_gtk_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="IMMulticontextPrivate"
            c:type="GtkIMMulticontextPrivate"
            disguised="1">
    </record>
    <enumeration name="IMPreeditStyle"
                 glib:type-name="GtkIMPreeditStyle"
                 glib:get-type="gtk_im_preedit_style_get_type"
                 c:type="GtkIMPreeditStyle">
      <member name="nothing"
              value="0"
              c:identifier="GTK_IM_PREEDIT_NOTHING"
              glib:nick="nothing"/>
      <member name="callback"
              value="1"
              c:identifier="GTK_IM_PREEDIT_CALLBACK"
              glib:nick="callback"/>
      <member name="none"
              value="2"
              c:identifier="GTK_IM_PREEDIT_NONE"
              glib:nick="none"/>
    </enumeration>
    <enumeration name="IMStatusStyle"
                 glib:type-name="GtkIMStatusStyle"
                 glib:get-type="gtk_im_status_style_get_type"
                 c:type="GtkIMStatusStyle">
      <member name="nothing"
              value="0"
              c:identifier="GTK_IM_STATUS_NOTHING"
              glib:nick="nothing"/>
      <member name="callback"
              value="1"
              c:identifier="GTK_IM_STATUS_CALLBACK"
              glib:nick="callback"/>
      <member name="none"
              value="2"
              c:identifier="GTK_IM_STATUS_NONE"
              glib:nick="none"/>
    </enumeration>
    <constant name="INPUT_ERROR" value="-1">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="INTERFACE_AGE" value="0">
      <type name="gint" c:type="gint"/>
    </constant>
    <class name="IconFactory"
           c:symbol-prefix="icon_factory"
           c:type="GtkIconFactory"
           parent="GObject.Object"
           glib:type-name="GtkIconFactory"
           glib:get-type="gtk_icon_factory_get_type"
           glib:type-struct="IconFactoryClass">
      <implements name="Buildable"/>
      <constructor name="new" c:identifier="gtk_icon_factory_new">
        <doc xml:whitespace="preserve">Creates a new #GtkIconFactory. An icon factory manages a collection
of #GtkIconSet&lt;!-- --&gt;s; a #GtkIconSet manages a set of variants of a
particular icon (i.e. a #GtkIconSet contains variants for different
sizes and widget states). Icons in an icon factory are named by a
stock ID, which is a simple string identifying the icon. Each
#GtkStyle has a list of #GtkIconFactory&lt;!-- --&gt;s derived from the current
theme; those icon factories are consulted first when searching for
an icon. If the theme doesn't set a particular icon, GTK+ looks for
the icon in a list of default icon factories, maintained by
gtk_icon_factory_add_default() and
gtk_icon_factory_remove_default(). Applications with icons should
add a default icon factory with their icons, which will allow
themes to override the icons for the application.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new #GtkIconFactory</doc>
          <type name="IconFactory" c:type="GtkIconFactory*"/>
        </return-value>
      </constructor>
      <function name="lookup_default"
                c:identifier="gtk_icon_factory_lookup_default">
        <doc xml:whitespace="preserve">Looks for an icon in the list of default icon factories.  For
display to the user, you should use gtk_style_lookup_icon_set() on
the #GtkStyle for the widget that will display the icon, instead of
using this function directly, so that themes are taken into
account.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a #GtkIconSet, or %NULL</doc>
          <type name="IconSet" c:type="GtkIconSet*"/>
        </return-value>
        <parameters>
          <parameter name="stock_id" transfer-ownership="none">
            <doc xml:whitespace="preserve">an icon name</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </function>
      <method name="add" c:identifier="gtk_icon_factory_add">
        <doc xml:whitespace="preserve">Adds the given @icon_set to the icon factory, under the name
e.g. "myapp-whatever-icon".  Normally applications create a
#GtkIconFactory, then add it to the list of default factories with
gtk_icon_factory_add_default(). Then they pass the @stock_id to
widgets such as #GtkImage to display the icon. Themes can provide
an icon with the same name (such as "myapp-whatever-icon") to
override your application's default icons. If an icon already
existed in @factory for @stock_id, it is unreferenced and replaced
with the new @icon_set.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="stock_id" transfer-ownership="none">
            <doc xml:whitespace="preserve">icon name</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="icon_set" transfer-ownership="none">
            <doc xml:whitespace="preserve">icon set</doc>
            <type name="IconSet" c:type="GtkIconSet*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_default" c:identifier="gtk_icon_factory_add_default">
        <doc xml:whitespace="preserve">Adds an icon factory to the list of icon factories searched by
gtk_style_lookup_icon_set(). This means that, for example,
gtk_image_new_from_stock() will be able to find icons in @factory.
There will normally be an icon factory added for each library or
application that comes with icons. The default icon factories
can be overridden by themes.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="lookup" c:identifier="gtk_icon_factory_lookup">
        <doc xml:whitespace="preserve">Looks up @stock_id in the icon factory, returning an icon set
if found, otherwise %NULL. For display to the user, you should
use gtk_style_lookup_icon_set() on the #GtkStyle for the
widget that will display the icon, instead of using this
function directly, so that themes are taken into account.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">icon set of @stock_id.</doc>
          <type name="IconSet" c:type="GtkIconSet*"/>
        </return-value>
        <parameters>
          <parameter name="stock_id" transfer-ownership="none">
            <doc xml:whitespace="preserve">an icon name</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_default"
              c:identifier="gtk_icon_factory_remove_default">
        <doc xml:whitespace="preserve">Removes an icon factory from the list of default icon
factories. Not normally used; you might use it for a library that
can be unloaded or shut down.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="IconFactoryPrivate" c:type="GtkIconFactoryPrivate*"/>
      </field>
    </class>
    <record name="IconFactoryClass"
            c:type="GtkIconFactoryClass"
            glib:is-gtype-struct-for="IconFactory">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="_gtk_reserved1" introspectable="0">
        <callback name="_gtk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved2" introspectable="0">
        <callback name="_gtk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved3" introspectable="0">
        <callback name="_gtk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved4" introspectable="0">
        <callback name="_gtk_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="IconFactoryPrivate"
            c:type="GtkIconFactoryPrivate"
            disguised="1">
    </record>
    <record name="IconInfo"
            c:type="GtkIconInfo"
            glib:type-name="GtkIconInfo"
            glib:get-type="gtk_icon_info_get_type"
            c:symbol-prefix="icon_info">
      <constructor name="new_for_pixbuf"
                   c:identifier="gtk_icon_info_new_for_pixbuf"
                   version="2.14">
        <doc xml:whitespace="preserve">Creates a #GtkIconInfo for a #GdkPixbuf.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a #GtkIconInfo</doc>
          <type name="IconInfo" c:type="GtkIconInfo*"/>
        </return-value>
        <parameters>
          <parameter name="icon_theme" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkIconTheme</doc>
            <type name="IconTheme" c:type="GtkIconTheme*"/>
          </parameter>
          <parameter name="pixbuf" transfer-ownership="none">
            <doc xml:whitespace="preserve">the pixbuf to wrap in a #GtkIconInfo</doc>
            <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="copy" c:identifier="gtk_icon_info_copy" version="2.4">
        <doc xml:whitespace="preserve">Make a copy of a #GtkIconInfo.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the new GtkIconInfo</doc>
          <type name="IconInfo" c:type="GtkIconInfo*"/>
        </return-value>
      </method>
      <method name="free" c:identifier="gtk_icon_info_free" version="2.4">
        <doc xml:whitespace="preserve">Free a #GtkIconInfo and associated information</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="get_attach_points"
              c:identifier="gtk_icon_info_get_attach_points"
              version="2.4">
        <doc xml:whitespace="preserve">Fetches the set of attach points for an icon. An attach point
is a location in the icon that can be used as anchor points for attaching
emblems or overlays to the icon.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if there are any attach points for the icon.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="points"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     allow-none="1">
            <doc xml:whitespace="preserve">location to store pointer to an array of points, or %NULL free the array of points with g_free().</doc>
            <array length="1" c:type="GdkPoint**">
              <type name="Gdk.Point"/>
            </array>
          </parameter>
          <parameter name="n_points"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     allow-none="1">
            <doc xml:whitespace="preserve">location to store the number of points in @points, or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_base_size"
              c:identifier="gtk_icon_info_get_base_size"
              version="2.4">
        <doc xml:whitespace="preserve">Gets the base size for the icon. The base size
is a size for the icon that was specified by
the icon theme creator. This may be different
than the actual size of image; an example of
this is small emblem icons that can be attached
to a larger icon. These icons will be given
the same base size as the larger icons to which
they are attached.
size is known for the icon.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the base size, or 0, if no base</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="get_builtin_pixbuf"
              c:identifier="gtk_icon_info_get_builtin_pixbuf"
              version="2.4">
        <doc xml:whitespace="preserve">Gets the built-in image for this icon, if any. To allow
GTK+ to use built in icon images, you must pass the
%GTK_ICON_LOOKUP_USE_BUILTIN to
gtk_icon_theme_lookup_icon().
extra reference is added to the returned pixbuf, so if
you want to keep it around, you must use g_object_ref().
The returned image must not be modified.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the built-in image pixbuf, or %NULL. No</doc>
          <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
      </method>
      <method name="get_display_name"
              c:identifier="gtk_icon_info_get_display_name"
              version="2.4">
        <doc xml:whitespace="preserve">Gets the display name for an icon. A display name is a
string to be used in place of the icon name in a user
visible context like a list of icons.
the icon doesn't have a specified display name. This value
is owned @icon_info and must not be modified or free.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the display name for the icon or %NULL, if</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_embedded_rect"
              c:identifier="gtk_icon_info_get_embedded_rect"
              version="2.4">
        <doc xml:whitespace="preserve">Gets the coordinates of a rectangle within the icon
that can be used for display of information such
as a preview of the contents of a text file.
See gtk_icon_info_set_raw_coordinates() for further
information about the coordinate system.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the icon has an embedded rectangle</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="rectangle" transfer-ownership="none">
            <doc xml:whitespace="preserve">#GdkRectangle in which to store embedded rectangle coordinates; coordinates are only stored when this function returns %TRUE.</doc>
            <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_filename"
              c:identifier="gtk_icon_info_get_filename"
              version="2.4">
        <doc xml:whitespace="preserve">Gets the filename for the icon. If the
%GTK_ICON_LOOKUP_USE_BUILTIN flag was passed
to gtk_icon_theme_lookup_icon(), there may be
no filename if a builtin icon is returned; in this
case, you should use gtk_icon_info_get_builtin_pixbuf().
if gtk_icon_info_get_builtin_pixbuf() should
be used instead. The return value is owned by
GTK+ and should not be modified or freed.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the filename for the icon, or %NULL</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="load_icon"
              c:identifier="gtk_icon_info_load_icon"
              version="2.4"
              throws="1">
        <doc xml:whitespace="preserve">Renders an icon previously looked up in an icon theme using
gtk_icon_theme_lookup_icon(); the size will be based on the size
passed to gtk_icon_theme_lookup_icon(). Note that the resulting
pixbuf may not be exactly this size; an icon theme may have icons
that differ slightly from their nominal sizes, and in addition GTK+
will avoid scaling icons that it considers sufficiently close to the
requested size or for which the source image would have to be scaled
up too far. (This maintains sharpness.). This behaviour can be changed
by passing the %GTK_ICON_LOOKUP_FORCE_SIZE flag when obtaining
the #GtkIconInfo. If this flag has been specified, the pixbuf
returned by this function will be scaled to the exact size.
created icon or a new reference to an internal icon, so you must
not modify the icon. Use g_object_unref() to release your reference
to the icon.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the rendered icon; this may be a newly</doc>
          <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
      </method>
      <method name="load_symbolic"
              c:identifier="gtk_icon_info_load_symbolic"
              version="3.0"
              throws="1">
        <doc xml:whitespace="preserve">Loads an icon, modifying it to match the system colours for the foreground,
success, warning and error colors provided. If the icon is not a symbolic
one, the function will return the result from gtk_icon_info_load_icon().
This allows loading symbolic icons that will match the system theme.
Unless you are implementing a widget, you will want to use
g_themed_icon_new_with_default_fallbacks() to load the icon.
As implementation details, the icon loaded needs to be of SVG type,
contain the "symbolic" term as the last component of the icon name,
and use the 'fg', 'success', 'warning' and 'error' CSS styles in the
SVG file itself.
See the &lt;ulink url="http://www.freedesktop.org/wiki/SymbolicIcons"&gt;Symbolic Icons spec&lt;/ulink&gt;
for more information about symbolic icons.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a #GdkPixbuf representing the loaded icon</doc>
          <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
        <parameters>
          <parameter name="fg" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GdkColor representing the foreground color of the icon</doc>
            <type name="Gdk.Color" c:type="GdkColor*"/>
          </parameter>
          <parameter name="success_color"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">a #GdkColor representing the warning color of the icon or %NULL to use the default color</doc>
            <type name="Gdk.Color" c:type="GdkColor*"/>
          </parameter>
          <parameter name="warning_color"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">a #GdkColor representing the warning color of the icon or %NULL to use the default color</doc>
            <type name="Gdk.Color" c:type="GdkColor*"/>
          </parameter>
          <parameter name="error_color"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">a #GdkColor representing the error color of the icon or %NULL to use the default color (allow-none)</doc>
            <type name="Gdk.Color" c:type="GdkColor*"/>
          </parameter>
          <parameter name="was_symbolic"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">a #gboolean, returns whether the loaded icon was a symbolic one and whether the @fg color was applied to it.</doc>
            <type name="gboolean" c:type="gboolean*"/>
          </parameter>
        </parameters>
      </method>
      <method name="load_symbolic_for_style"
              c:identifier="gtk_icon_info_load_symbolic_for_style"
              version="3.0"
              throws="1">
        <doc xml:whitespace="preserve">Loads an icon, modifying it to match the system colours for the foreground,
success, warning and error colors provided. If the icon is not a symbolic
one, the function will return the result from gtk_icon_info_load_icon().
This allows loading symbolic icons that will match the system theme.
See gtk_icon_info_load_symbolic() for more details.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a #GdkPixbuf representing the loaded icon</doc>
          <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
        <parameters>
          <parameter name="style" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkStyle to take the colors from</doc>
            <type name="Style" c:type="GtkStyle*"/>
          </parameter>
          <parameter name="state" transfer-ownership="none">
            <doc xml:whitespace="preserve">the widget state to use for colors</doc>
            <type name="StateType" c:type="GtkStateType"/>
          </parameter>
          <parameter name="was_symbolic"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">a #gboolean, returns whether the loaded icon was a symbolic one and whether the @fg color was applied to it.</doc>
            <type name="gboolean" c:type="gboolean*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_raw_coordinates"
              c:identifier="gtk_icon_info_set_raw_coordinates"
              version="2.4">
        <doc xml:whitespace="preserve">Sets whether the coordinates returned by gtk_icon_info_get_embedded_rect()
and gtk_icon_info_get_attach_points() should be returned in their
original form as specified in the icon theme, instead of scaled
appropriately for the pixbuf returned by gtk_icon_info_load_icon().
Raw coordinates are somewhat strange; they are specified to be with
respect to the unscaled pixmap for PNG and XPM icons, but for SVG
icons, they are in a 1000x1000 coordinate space that is scaled
to the final size of the icon.  You can determine if the icon is an SVG
icon by using gtk_icon_info_get_filename(), and seeing if it is non-%NULL
and ends in '.svg'.
This function is provided primarily to allow compatibility wrappers
for older API's, and is not expected to be useful for applications.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="raw_coordinates" transfer-ownership="none">
            <doc xml:whitespace="preserve">whether the coordinates of embedded rectangles and attached points should be returned in their original (unscaled) form.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <bitfield name="IconLookupFlags"
              glib:type-name="GtkIconLookupFlags"
              glib:get-type="gtk_icon_lookup_flags_get_type"
              c:type="GtkIconLookupFlags">
      <doc xml:whitespace="preserve">Used to specify options for gtk_icon_theme_lookup_icon()</doc>
      <member name="no_svg"
              value="1"
              c:identifier="GTK_ICON_LOOKUP_NO_SVG"
              glib:nick="no-svg"/>
      <member name="force_svg"
              value="2"
              c:identifier="GTK_ICON_LOOKUP_FORCE_SVG"
              glib:nick="force-svg"/>
      <member name="use_builtin"
              value="4"
              c:identifier="GTK_ICON_LOOKUP_USE_BUILTIN"
              glib:nick="use-builtin"/>
      <member name="generic_fallback"
              value="8"
              c:identifier="GTK_ICON_LOOKUP_GENERIC_FALLBACK"
              glib:nick="generic-fallback"/>
      <member name="force_size"
              value="16"
              c:identifier="GTK_ICON_LOOKUP_FORCE_SIZE"
              glib:nick="force-size"/>
    </bitfield>
    <record name="IconSet"
            c:type="GtkIconSet"
            glib:type-name="GtkIconSet"
            glib:get-type="gtk_icon_set_get_type"
            c:symbol-prefix="icon_set">
      <constructor name="new" c:identifier="gtk_icon_set_new">
        <doc xml:whitespace="preserve">Creates a new #GtkIconSet. A #GtkIconSet represents a single icon
in various sizes and widget states. It can provide a #GdkPixbuf
for a given size and state on request, and automatically caches
some of the rendered #GdkPixbuf objects.
Normally you would use gtk_widget_render_icon() instead of
using #GtkIconSet directly. The one case where you'd use
#GtkIconSet is to create application-specific icon sets to place in
a #GtkIconFactory.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new #GtkIconSet</doc>
          <type name="IconSet" c:type="GtkIconSet*"/>
        </return-value>
      </constructor>
      <constructor name="new_from_pixbuf"
                   c:identifier="gtk_icon_set_new_from_pixbuf">
        <doc xml:whitespace="preserve">Creates a new #GtkIconSet with @pixbuf as the default/fallback
source image. If you don't add any additional #GtkIconSource to the
icon set, all variants of the icon will be created from @pixbuf,
using scaling, pixelation, etc. as required to adjust the icon size
or make the icon look insensitive/prelighted.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new #GtkIconSet</doc>
          <type name="IconSet" c:type="GtkIconSet*"/>
        </return-value>
        <parameters>
          <parameter name="pixbuf" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GdkPixbuf</doc>
            <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="add_source" c:identifier="gtk_icon_set_add_source">
        <doc xml:whitespace="preserve">Icon sets have a list of #GtkIconSource, which they use as base
icons for rendering icons in different states and sizes. Icons are
scaled, made to look insensitive, etc. in
gtk_icon_set_render_icon(), but #GtkIconSet needs base images to
work with. The base images and when to use them are described by
a #GtkIconSource.
This function copies @source, so you can reuse the same source immediately
without affecting the icon set.
to Previous Page" icon might point in a different direction in
Hebrew and in English; it might look different when insensitive;
and it might change size depending on toolbar mode (small/large
icons). So a single icon set would contain all those variants of
the icon, and you might add a separate source for each one.
You should nearly always add a "default" icon source with all
fields wildcarded, which will be used as a fallback if no more
specific source matches. #GtkIconSet always prefers more specific
icon sources to more generic icon sources. The order in which you
add the sources to the icon set does not matter.
gtk_icon_set_new_from_pixbuf() creates a new icon set with a
default icon source based on the given pixbuf.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="source" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkIconSource</doc>
            <type name="IconSource" c:type="GtkIconSource*"/>
          </parameter>
        </parameters>
      </method>
      <method name="copy" c:identifier="gtk_icon_set_copy">
        <doc xml:whitespace="preserve">Copies @icon_set by value.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new #GtkIconSet identical to the first.</doc>
          <type name="IconSet" c:type="GtkIconSet*"/>
        </return-value>
      </method>
      <method name="get_sizes" c:identifier="gtk_icon_set_get_sizes">
        <doc xml:whitespace="preserve">Obtains a list of icon sizes this icon set can render. The returned
array must be freed with g_free().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="sizes"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:whitespace="preserve">return location for array of sizes</doc>
            <array length="1">
              <type name="gint"/>
            </array>
          </parameter>
          <parameter name="n_sizes"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:whitespace="preserve">location to store number of elements in returned array</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="gtk_icon_set_ref">
        <doc xml:whitespace="preserve">Increments the reference count on @icon_set.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">@icon_set.</doc>
          <type name="IconSet" c:type="GtkIconSet*"/>
        </return-value>
      </method>
      <method name="render_icon" c:identifier="gtk_icon_set_render_icon">
        <doc xml:whitespace="preserve">Renders an icon using gtk_style_render_icon(). In most cases,
gtk_widget_render_icon() is better, since it automatically provides
most of the arguments from the current widget settings.  This
function never returns %NULL; if the icon can't be rendered
(perhaps because an image file fails to load), a default "missing
image" icon will be returned instead.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a #GdkPixbuf to be displayed</doc>
          <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
        <parameters>
          <parameter name="style" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">a #GtkStyle associated with @widget, or %NULL</doc>
            <type name="Style" c:type="GtkStyle*"/>
          </parameter>
          <parameter name="direction" transfer-ownership="none">
            <doc xml:whitespace="preserve">text direction</doc>
            <type name="TextDirection" c:type="GtkTextDirection"/>
          </parameter>
          <parameter name="state" transfer-ownership="none">
            <doc xml:whitespace="preserve">widget state</doc>
            <type name="StateType" c:type="GtkStateType"/>
          </parameter>
          <parameter name="size" transfer-ownership="none">
            <doc xml:whitespace="preserve">icon size. A size of (GtkIconSize)-1 means render at the size of the source and don't scale.</doc>
            <type name="gint"/>
          </parameter>
          <parameter name="widget" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">widget that will display the icon, or %NULL. The only use that is typically made of this is to determine the appropriate #GdkScreen.</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="detail" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">detail to pass to the theme engine, or %NULL. Note that passing a detail of anything but %NULL will disable caching.</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unref" c:identifier="gtk_icon_set_unref">
        <doc xml:whitespace="preserve">Decrements the reference count on @icon_set, and frees memory
if the reference count reaches 0.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
    </record>
    <enumeration name="IconSize"
                 glib:type-name="GtkIconSize"
                 glib:get-type="gtk_icon_size_get_type"
                 c:type="GtkIconSize">
      <member name="invalid"
              value="0"
              c:identifier="GTK_ICON_SIZE_INVALID"
              glib:nick="invalid"/>
      <member name="menu"
              value="1"
              c:identifier="GTK_ICON_SIZE_MENU"
              glib:nick="menu"/>
      <member name="small_toolbar"
              value="2"
              c:identifier="GTK_ICON_SIZE_SMALL_TOOLBAR"
              glib:nick="small-toolbar"/>
      <member name="large_toolbar"
              value="3"
              c:identifier="GTK_ICON_SIZE_LARGE_TOOLBAR"
              glib:nick="large-toolbar"/>
      <member name="button"
              value="4"
              c:identifier="GTK_ICON_SIZE_BUTTON"
              glib:nick="button"/>
      <member name="dnd"
              value="5"
              c:identifier="GTK_ICON_SIZE_DND"
              glib:nick="dnd"/>
      <member name="dialog"
              value="6"
              c:identifier="GTK_ICON_SIZE_DIALOG"
              glib:nick="dialog"/>
    </enumeration>
    <record name="IconSource"
            c:type="GtkIconSource"
            glib:type-name="GtkIconSource"
            glib:get-type="gtk_icon_source_get_type"
            c:symbol-prefix="icon_source">
      <constructor name="new" c:identifier="gtk_icon_source_new">
        <doc xml:whitespace="preserve">Creates a new #GtkIconSource. A #GtkIconSource contains a #GdkPixbuf (or
image filename) that serves as the base image for one or more of the
icons in a #GtkIconSet, along with a specification for which icons in the
icon set will be based on that pixbuf or image file. An icon set contains
a set of icons that represent "the same" logical concept in different states,
different global text directions, and different sizes.
So for example a web browser's "Back to Previous Page" icon might
point in a different direction in Hebrew and in English; it might
look different when insensitive; and it might change size depending
on toolbar mode (small/large icons). So a single icon set would
contain all those variants of the icon. #GtkIconSet contains a list
of #GtkIconSource from which it can derive specific icon variants in
the set.
In the simplest case, #GtkIconSet contains one source pixbuf from
which it derives all variants. The convenience function
gtk_icon_set_new_from_pixbuf() handles this case; if you only have
one source pixbuf, just use that function.
If you want to use a different base pixbuf for different icon
variants, you create multiple icon sources, mark which variants
they'll be used to create, and add them to the icon set with
gtk_icon_set_add_source().
By default, the icon source has all parameters wildcarded. That is,
the icon source will be used as the base icon for any desired text
direction, widget state, or icon size.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new #GtkIconSource</doc>
          <type name="IconSource" c:type="GtkIconSource*"/>
        </return-value>
      </constructor>
      <method name="copy" c:identifier="gtk_icon_source_copy">
        <doc xml:whitespace="preserve">Creates a copy of @source; mostly useful for language bindings.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new #GtkIconSource</doc>
          <type name="IconSource" c:type="GtkIconSource*"/>
        </return-value>
      </method>
      <method name="free" c:identifier="gtk_icon_source_free">
        <doc xml:whitespace="preserve">Frees a dynamically-allocated icon source, along with its
filename, size, and pixbuf fields if those are not %NULL.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="get_direction"
              c:identifier="gtk_icon_source_get_direction">
        <doc xml:whitespace="preserve">Obtains the text direction this icon source applies to. The return
value is only useful/meaningful if the text direction is &lt;emphasis&gt;not&lt;/emphasis&gt;
wildcarded.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">text direction this source matches</doc>
          <type name="TextDirection" c:type="GtkTextDirection"/>
        </return-value>
      </method>
      <method name="get_direction_wildcarded"
              c:identifier="gtk_icon_source_get_direction_wildcarded">
        <doc xml:whitespace="preserve">Gets the value set by gtk_icon_source_set_direction_wildcarded().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if this icon source is a base for any text direction variant</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_filename" c:identifier="gtk_icon_source_get_filename">
        <doc xml:whitespace="preserve">Retrieves the source filename, or %NULL if none is set. The
filename is not a copy, and should not be modified or expected to
persist beyond the lifetime of the icon source.
or freed.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">image filename. This string must not be modified</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_icon_name"
              c:identifier="gtk_icon_source_get_icon_name">
        <doc xml:whitespace="preserve">Retrieves the source icon name, or %NULL if none is set. The
icon_name is not a copy, and should not be modified or expected to
persist beyond the lifetime of the icon source.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">icon name. This string must not be modified or freed.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_pixbuf" c:identifier="gtk_icon_source_get_pixbuf">
        <doc xml:whitespace="preserve">Retrieves the source pixbuf, or %NULL if none is set.
In addition, if a filename source is in use, this
function in some cases will return the pixbuf from
loaded from the filename. This is, for example, true
for the GtkIconSource passed to the GtkStyle::render_icon()
virtual function. The reference count on the pixbuf is
not incremented.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">source pixbuf</doc>
          <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
      </method>
      <method name="get_size" c:identifier="gtk_icon_source_get_size">
        <doc xml:whitespace="preserve">Obtains the icon size this source applies to. The return value
is only useful/meaningful if the icon size is &lt;emphasis&gt;not&lt;/emphasis&gt; wildcarded.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">icon size this source matches.</doc>
          <type name="gint"/>
        </return-value>
      </method>
      <method name="get_size_wildcarded"
              c:identifier="gtk_icon_source_get_size_wildcarded">
        <doc xml:whitespace="preserve">Gets the value set by gtk_icon_source_set_size_wildcarded().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if this icon source is a base for any icon size variant</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_state" c:identifier="gtk_icon_source_get_state">
        <doc xml:whitespace="preserve">Obtains the widget state this icon source applies to. The return
value is only useful/meaningful if the widget state is &lt;emphasis&gt;not&lt;/emphasis&gt;
wildcarded.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">widget state this source matches</doc>
          <type name="StateType" c:type="GtkStateType"/>
        </return-value>
      </method>
      <method name="get_state_wildcarded"
              c:identifier="gtk_icon_source_get_state_wildcarded">
        <doc xml:whitespace="preserve">Gets the value set by gtk_icon_source_set_state_wildcarded().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if this icon source is a base for any widget state variant</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="set_direction"
              c:identifier="gtk_icon_source_set_direction">
        <doc xml:whitespace="preserve">Sets the text direction this icon source is intended to be used
with.
Setting the text direction on an icon source makes no difference
if the text direction is wildcarded. Therefore, you should usually
call gtk_icon_source_set_direction_wildcarded() to un-wildcard it
in addition to calling this function.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="direction" transfer-ownership="none">
            <doc xml:whitespace="preserve">text direction this source applies to</doc>
            <type name="TextDirection" c:type="GtkTextDirection"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_direction_wildcarded"
              c:identifier="gtk_icon_source_set_direction_wildcarded">
        <doc xml:whitespace="preserve">If the text direction is wildcarded, this source can be used
as the base image for an icon in any #GtkTextDirection.
If the text direction is not wildcarded, then the
text direction the icon source applies to should be set
with gtk_icon_source_set_direction(), and the icon source
will only be used with that text direction.
#GtkIconSet prefers non-wildcarded sources (exact matches) over
wildcarded sources, and will use an exact match when possible.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="setting" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE to wildcard the text direction</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_filename" c:identifier="gtk_icon_source_set_filename">
        <doc xml:whitespace="preserve">Sets the name of an image file to use as a base image when creating
icon variants for #GtkIconSet. The filename must be absolute.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:whitespace="preserve">image file to use</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_icon_name"
              c:identifier="gtk_icon_source_set_icon_name">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="icon_name" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_pixbuf" c:identifier="gtk_icon_source_set_pixbuf">
        <doc xml:whitespace="preserve">Sets a pixbuf to use as a base image when creating icon variants
for #GtkIconSet.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="pixbuf" transfer-ownership="none">
            <doc xml:whitespace="preserve">pixbuf to use as a source</doc>
            <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_size" c:identifier="gtk_icon_source_set_size">
        <doc xml:whitespace="preserve">Sets the icon size this icon source is intended to be used
with.
Setting the icon size on an icon source makes no difference
if the size is wildcarded. Therefore, you should usually
call gtk_icon_source_set_size_wildcarded() to un-wildcard it
in addition to calling this function.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="size" transfer-ownership="none">
            <doc xml:whitespace="preserve">icon size this source applies to</doc>
            <type name="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_size_wildcarded"
              c:identifier="gtk_icon_source_set_size_wildcarded">
        <doc xml:whitespace="preserve">If the icon size is wildcarded, this source can be used as the base
image for an icon of any size.  If the size is not wildcarded, then
the size the source applies to should be set with
gtk_icon_source_set_size() and the icon source will only be used
with that specific size.
#GtkIconSet prefers non-wildcarded sources (exact matches) over
wildcarded sources, and will use an exact match when possible.
#GtkIconSet will normally scale wildcarded source images to produce
an appropriate icon at a given size, but will not change the size
of source images that match exactly.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="setting" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE to wildcard the widget state</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_state" c:identifier="gtk_icon_source_set_state">
        <doc xml:whitespace="preserve">Sets the widget state this icon source is intended to be used
with.
Setting the widget state on an icon source makes no difference
if the state is wildcarded. Therefore, you should usually
call gtk_icon_source_set_state_wildcarded() to un-wildcard it
in addition to calling this function.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="state" transfer-ownership="none">
            <doc xml:whitespace="preserve">widget state this source applies to</doc>
            <type name="StateType" c:type="GtkStateType"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_state_wildcarded"
              c:identifier="gtk_icon_source_set_state_wildcarded">
        <doc xml:whitespace="preserve">If the widget state is wildcarded, this source can be used as the
base image for an icon in any #GtkStateType.  If the widget state
is not wildcarded, then the state the source applies to should be
set with gtk_icon_source_set_state() and the icon source will
only be used with that specific state.
#GtkIconSet prefers non-wildcarded sources (exact matches) over
wildcarded sources, and will use an exact match when possible.
#GtkIconSet will normally transform wildcarded source images to
produce an appropriate icon for a given state, for example
lightening an image on prelight, but will not modify source images
that match exactly.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="setting" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE to wildcard the widget state</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <class name="IconTheme"
           c:symbol-prefix="icon_theme"
           c:type="GtkIconTheme"
           parent="GObject.Object"
           glib:type-name="GtkIconTheme"
           glib:get-type="gtk_icon_theme_get_type"
           glib:type-struct="IconThemeClass">
      <constructor name="new" c:identifier="gtk_icon_theme_new" version="2.4">
        <doc xml:whitespace="preserve">Creates a new icon theme object. Icon theme objects are used
to lookup up an icon by name in a particular icon theme.
Usually, you'll want to use gtk_icon_theme_get_default()
or gtk_icon_theme_get_for_screen() rather than creating
a new icon theme object for scratch.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the newly created #GtkIconTheme object.</doc>
          <type name="IconTheme" c:type="GtkIconTheme*"/>
        </return-value>
      </constructor>
      <function name="add_builtin_icon"
                c:identifier="gtk_icon_theme_add_builtin_icon"
                version="2.4">
        <doc xml:whitespace="preserve">Registers a built-in icon for icon theme lookups. The idea
of built-in icons is to allow an application or library
that uses themed icons to function requiring files to
be present in the file system. For instance, the default
images for all of GTK+'s stock icons are registered
as built-icons.
In general, if you use gtk_icon_theme_add_builtin_icon()
you should also install the icon in the icon theme, so
that the icon is generally available.
This function will generally be used with pixbufs loaded
via gdk_pixbuf_new_from_inline().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="icon_name" transfer-ownership="none">
            <doc xml:whitespace="preserve">the name of the icon to register</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="size" transfer-ownership="none">
            <doc xml:whitespace="preserve">the size at which to register the icon (different images can be registered for the same icon name at different sizes.)</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="pixbuf" transfer-ownership="none">
            <doc xml:whitespace="preserve">#GdkPixbuf that contains the image to use for @icon_name.</doc>
            <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_default"
                c:identifier="gtk_icon_theme_get_default"
                version="2.4">
        <doc xml:whitespace="preserve">Gets the icon theme for the default screen. See
gtk_icon_theme_get_for_screen().
the default screen. This icon theme is associated with
the screen and can be used as long as the screen
is open. Do not ref or unref it.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">A unique #GtkIconTheme associated with</doc>
          <type name="IconTheme" c:type="GtkIconTheme*"/>
        </return-value>
      </function>
      <function name="get_for_screen"
                c:identifier="gtk_icon_theme_get_for_screen"
                version="2.4">
        <doc xml:whitespace="preserve">Gets the icon theme object associated with @screen; if this
function has not previously been called for the given
screen, a new icon theme object will be created and
associated with the screen. Icon theme objects are
fairly expensive to create, so using this function
is usually a better choice than calling than gtk_icon_theme_new()
and setting the screen yourself; by using this function
a single icon theme object will be shared between users.
the given screen. This icon theme is associated with
the screen and can be used as long as the screen
is open. Do not ref or unref it.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">A unique #GtkIconTheme associated with</doc>
          <type name="IconTheme" c:type="GtkIconTheme*"/>
        </return-value>
        <parameters>
          <parameter name="screen" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GdkScreen</doc>
            <type name="Gdk.Screen" c:type="GdkScreen*"/>
          </parameter>
        </parameters>
      </function>
      <method name="append_search_path"
              c:identifier="gtk_icon_theme_append_search_path"
              version="2.4">
        <doc xml:whitespace="preserve">Appends a directory to the search path. 
See gtk_icon_theme_set_search_path().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="path" transfer-ownership="none">
            <doc xml:whitespace="preserve">directory name to append to the icon path</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="choose_icon"
              c:identifier="gtk_icon_theme_choose_icon"
              version="2.12">
        <doc xml:whitespace="preserve">Looks up a named icon and returns a structure containing
information such as the filename of the icon. The icon
can then be rendered into a pixbuf using
gtk_icon_info_load_icon(). (gtk_icon_theme_load_icon()
combines these two steps if all you need is the pixbuf.)
If @icon_names contains more than one name, this function 
tries them all in the given order before falling back to 
inherited icon themes.
about the icon, or %NULL if the icon wasn't found. Free with
gtk_icon_info_free()</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a #GtkIconInfo structure containing information</doc>
          <type name="IconInfo" c:type="GtkIconInfo*"/>
        </return-value>
        <parameters>
          <parameter name="icon_names" transfer-ownership="none">
            <doc xml:whitespace="preserve">%NULL-terminated array of icon names to lookup</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="size" transfer-ownership="none">
            <doc xml:whitespace="preserve">desired icon size</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:whitespace="preserve">flags modifying the behavior of the icon lookup</doc>
            <type name="IconLookupFlags" c:type="GtkIconLookupFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_example_icon_name"
              c:identifier="gtk_icon_theme_get_example_icon_name"
              version="2.4">
        <doc xml:whitespace="preserve">Gets the name of an icon that is representative of the
current theme (for instance, to use when presenting
a list of themes to the user.)
Free with g_free().</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the name of an example icon or %NULL.</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
      </method>
      <method name="get_icon_sizes"
              c:identifier="gtk_icon_theme_get_icon_sizes"
              version="2.6">
        <doc xml:whitespace="preserve">Returns an array of integers describing the sizes at which
the icon is available without scaling. A size of -1 means 
that the icon is available in a scalable format. The array 
is zero-terminated.
which the icon is available. The array should be freed with g_free()
when it is no longer needed.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">An newly allocated array describing the sizes at</doc>
          <type name="gint" c:type="gint*"/>
        </return-value>
        <parameters>
          <parameter name="icon_name" transfer-ownership="none">
            <doc xml:whitespace="preserve">the name of an icon</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_search_path"
              c:identifier="gtk_icon_theme_get_search_path"
              version="2.4">
        <doc xml:whitespace="preserve">Gets the current search path. See gtk_icon_theme_set_search_path().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="path"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     allow-none="1">
            <doc xml:whitespace="preserve">location to store a list of icon theme path directories or %NULL The stored value should be freed with g_strfreev().</doc>
            <array length="1" c:type="gchar**">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="n_elements"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:whitespace="preserve">location to store number of elements in @path, or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="has_icon"
              c:identifier="gtk_icon_theme_has_icon"
              version="2.4">
        <doc xml:whitespace="preserve">Checks whether an icon theme includes an icon
for a particular name.
icon for @icon_name.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if @icon_theme includes an</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="icon_name" transfer-ownership="none">
            <doc xml:whitespace="preserve">the name of an icon</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="list_contexts"
              c:identifier="gtk_icon_theme_list_contexts"
              version="2.12">
        <doc xml:whitespace="preserve">Gets the list of contexts available within the current
hierarchy of icon themes
contexts in the theme. You must first free each element
in the list with g_free(), then free the list itself
with g_list_free().</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a #GList list holding the names of all the</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="utf8"/>
          </type>
        </return-value>
      </method>
      <method name="list_icons"
              c:identifier="gtk_icon_theme_list_icons"
              version="2.4">
        <doc xml:whitespace="preserve">Lists the icons in the current icon theme. Only a subset
of the icons can be listed by providing a context string.
The set of values for the context string is system dependent,
but will typically include such values as "Applications" and
"MimeTypes".
icons in the theme. You must first free each element
in the list with g_free(), then free the list itself
with g_list_free().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GList list holding the names of all the</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="utf8"/>
          </type>
        </return-value>
        <parameters>
          <parameter name="context" transfer-ownership="none">
            <doc xml:whitespace="preserve">a string identifying a particular type of icon, or %NULL to list all icons.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="load_icon"
              c:identifier="gtk_icon_theme_load_icon"
              version="2.4"
              throws="1">
        <doc xml:whitespace="preserve">Looks up an icon in an icon theme, scales it to the given size
and renders it into a pixbuf. This is a convenience function;
if more details about the icon are needed, use
gtk_icon_theme_lookup_icon() followed by gtk_icon_info_load_icon().
Note that you probably want to listen for icon theme changes and
update the icon. This is usually done by connecting to the
GtkWidget::style-set signal. If for some reason you do not want to
update the icon when the icon theme changes, you should consider
using gdk_pixbuf_copy() to make a private copy of the pixbuf
returned by this function. Otherwise GTK+ may need to keep the old
icon theme loaded, which would be a waste of memory.
newly created icon or a new reference to an internal icon, so
you must not modify the icon. Use g_object_unref() to release
your reference to the icon. %NULL if the icon isn't found.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the rendered icon; this may be a</doc>
          <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
        <parameters>
          <parameter name="icon_name" transfer-ownership="none">
            <doc xml:whitespace="preserve">the name of the icon to lookup</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="size" transfer-ownership="none">
            <doc xml:whitespace="preserve">the desired icon size. The resulting icon may not be exactly this size; see gtk_icon_info_load_icon().</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:whitespace="preserve">flags modifying the behavior of the icon lookup</doc>
            <type name="IconLookupFlags" c:type="GtkIconLookupFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="lookup_by_gicon"
              c:identifier="gtk_icon_theme_lookup_by_gicon"
              version="2.14">
        <doc xml:whitespace="preserve">Looks up an icon and returns a structure containing
information such as the filename of the icon. 
The icon can then be rendered into a pixbuf using
gtk_icon_info_load_icon().
information about the icon, or %NULL if the icon 
wasn't found. Free with gtk_icon_info_free()</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a #GtkIconInfo structure containing</doc>
          <type name="IconInfo" c:type="GtkIconInfo*"/>
        </return-value>
        <parameters>
          <parameter name="icon" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GIcon to look up</doc>
            <type name="Gio.Icon" c:type="GIcon*"/>
          </parameter>
          <parameter name="size" transfer-ownership="none">
            <doc xml:whitespace="preserve">desired icon size</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:whitespace="preserve">flags modifying the behavior of the icon lookup</doc>
            <type name="IconLookupFlags" c:type="GtkIconLookupFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="lookup_icon"
              c:identifier="gtk_icon_theme_lookup_icon"
              version="2.4">
        <doc xml:whitespace="preserve">Looks up a named icon and returns a structure containing
information such as the filename of the icon. The icon
can then be rendered into a pixbuf using
gtk_icon_info_load_icon(). (gtk_icon_theme_load_icon()
combines these two steps if all you need is the pixbuf.)
about the icon, or %NULL if the icon wasn't found. Free with
gtk_icon_info_free()</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a #GtkIconInfo structure containing information</doc>
          <type name="IconInfo" c:type="GtkIconInfo*"/>
        </return-value>
        <parameters>
          <parameter name="icon_name" transfer-ownership="none">
            <doc xml:whitespace="preserve">the name of the icon to lookup</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="size" transfer-ownership="none">
            <doc xml:whitespace="preserve">desired icon size</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:whitespace="preserve">flags modifying the behavior of the icon lookup</doc>
            <type name="IconLookupFlags" c:type="GtkIconLookupFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="prepend_search_path"
              c:identifier="gtk_icon_theme_prepend_search_path"
              version="2.4">
        <doc xml:whitespace="preserve">Prepends a directory to the search path. 
See gtk_icon_theme_set_search_path().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="path" transfer-ownership="none">
            <doc xml:whitespace="preserve">directory name to prepend to the icon path</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="rescan_if_needed"
              c:identifier="gtk_icon_theme_rescan_if_needed"
              version="2.4">
        <doc xml:whitespace="preserve">Checks to see if the icon theme has changed; if it has, any
currently cached information is discarded and will be reloaded
next time @icon_theme is accessed.
to be reloaded.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the icon theme has changed and needed</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="set_custom_theme"
              c:identifier="gtk_icon_theme_set_custom_theme"
              version="2.4">
        <doc xml:whitespace="preserve">Sets the name of the icon theme that the #GtkIconTheme object uses
overriding system configuration. This function cannot be called
on the icon theme objects returned from gtk_icon_theme_get_default()
and gtk_icon_theme_get_for_screen().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="theme_name" transfer-ownership="none">
            <doc xml:whitespace="preserve">name of icon theme to use instead of configured theme, or %NULL to unset a previously set custom theme</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_screen"
              c:identifier="gtk_icon_theme_set_screen"
              version="2.4">
        <doc xml:whitespace="preserve">Sets the screen for an icon theme; the screen is used
to track the user's currently configured icon theme,
which might be different for different screens.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="screen" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GdkScreen</doc>
            <type name="Gdk.Screen" c:type="GdkScreen*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_search_path"
              c:identifier="gtk_icon_theme_set_search_path"
              version="2.4">
        <doc xml:whitespace="preserve">Sets the search path for the icon theme object. When looking
for an icon theme, GTK+ will search for a subdirectory of
one or more of the directories in @path with the same name
as the icon theme. (Themes from multiple of the path elements
are combined to allow themes to be extended by adding icons
in the user's home directory.)
In addition if an icon found isn't found either in the current
icon theme or the default icon theme, and an image file with
the right name is found directly in one of the elements of
(This is legacy feature, and new icons should be put
into the default icon theme, which is called DEFAULT_THEME_NAME,
rather than directly on the icon path.)</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="path" transfer-ownership="none">
            <doc xml:whitespace="preserve">array of directories that are searched for icon themes</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="n_elements" transfer-ownership="none">
            <doc xml:whitespace="preserve">number of elements in @path.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="IconThemePrivate" c:type="GtkIconThemePrivate*"/>
      </field>
      <glib:signal name="changed">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="IconThemeClass"
            c:type="GtkIconThemeClass"
            glib:is-gtype-struct-for="IconTheme">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="changed">
        <callback name="changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="icon_theme" transfer-ownership="none">
              <type name="IconTheme" c:type="GtkIconTheme*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <enumeration name="IconThemeError"
                 glib:type-name="GtkIconThemeError"
                 glib:get-type="gtk_icon_theme_error_get_type"
                 c:type="GtkIconThemeError"
                 glib:error-quark="gtk_icon_theme_error_quark">
      <doc xml:whitespace="preserve">Error codes for GtkIconTheme operations.</doc>
      <member name="not_found"
              value="0"
              c:identifier="GTK_ICON_THEME_NOT_FOUND"
              glib:nick="not-found"/>
      <member name="failed"
              value="1"
              c:identifier="GTK_ICON_THEME_FAILED"
              glib:nick="failed"/>
    </enumeration>
    <record name="IconThemePrivate" c:type="GtkIconThemePrivate" disguised="1">
    </record>
    <class name="IconView"
           c:symbol-prefix="icon_view"
           c:type="GtkIconView"
           parent="Container"
           glib:type-name="GtkIconView"
           glib:get-type="gtk_icon_view_get_type"
           glib:type-struct="IconViewClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Buildable"/>
      <implements name="CellLayout"/>
      <implements name="SizeRequest"/>
      <constructor name="new" c:identifier="gtk_icon_view_new" version="2.6">
        <doc xml:whitespace="preserve">Creates a new #GtkIconView widget</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">A newly created #GtkIconView widget</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <constructor name="new_with_model"
                   c:identifier="gtk_icon_view_new_with_model"
                   version="2.6 ">
        <doc xml:whitespace="preserve">Creates a new #GtkIconView widget with the model @model.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">A newly created #GtkIconView widget.</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="model" transfer-ownership="none">
            <doc xml:whitespace="preserve">The model.</doc>
            <type name="TreeModel" c:type="GtkTreeModel*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="convert_widget_to_bin_window_coords"
              c:identifier="gtk_icon_view_convert_widget_to_bin_window_coords"
              version="2.12">
        <doc xml:whitespace="preserve">Converts widget coordinates to coordinates for the bin_window,
as expected by e.g. gtk_icon_view_get_path_at_pos().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="wx" transfer-ownership="none">
            <doc xml:whitespace="preserve">X coordinate relative to the widget</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="wy" transfer-ownership="none">
            <doc xml:whitespace="preserve">Y coordinate relative to the widget</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="bx" transfer-ownership="none">
            <doc xml:whitespace="preserve">return location for bin_window X coordinate</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="by" transfer-ownership="none">
            <doc xml:whitespace="preserve">return location for bin_window Y coordinate</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_drag_icon"
              c:identifier="gtk_icon_view_create_drag_icon"
              version="2.8">
        <doc xml:whitespace="preserve">Creates a #GdkPixmap representation of the item at @path.
This image is used for a drag icon.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a newly-allocated pixmap of the drag icon.</doc>
          <type name="Gdk.Pixmap" c:type="GdkPixmap*"/>
        </return-value>
        <parameters>
          <parameter name="path" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkTreePath in @icon_view</doc>
            <type name="TreePath" c:type="GtkTreePath*"/>
          </parameter>
        </parameters>
      </method>
      <method name="enable_model_drag_dest"
              c:identifier="gtk_icon_view_enable_model_drag_dest"
              version="2.8">
        <doc xml:whitespace="preserve">Turns @icon_view into a drop destination for automatic DND. Calling this
method sets #GtkIconView:reorderable to %FALSE.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="targets" transfer-ownership="none">
            <doc xml:whitespace="preserve">the table of targets that the drag will support</doc>
            <type name="TargetEntry" c:type="GtkTargetEntry*"/>
          </parameter>
          <parameter name="n_targets" transfer-ownership="none">
            <doc xml:whitespace="preserve">the number of items in @targets</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="actions" transfer-ownership="none">
            <doc xml:whitespace="preserve">the bitmask of possible actions for a drag to this widget</doc>
            <type name="Gdk.DragAction" c:type="GdkDragAction"/>
          </parameter>
        </parameters>
      </method>
      <method name="enable_model_drag_source"
              c:identifier="gtk_icon_view_enable_model_drag_source"
              version="2.8">
        <doc xml:whitespace="preserve">Turns @icon_view into a drag source for automatic DND. Calling this
method sets #GtkIconView:reorderable to %FALSE.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="start_button_mask" transfer-ownership="none">
            <doc xml:whitespace="preserve">Mask of allowed buttons to start drag</doc>
            <type name="Gdk.ModifierType" c:type="GdkModifierType"/>
          </parameter>
          <parameter name="targets" transfer-ownership="none">
            <doc xml:whitespace="preserve">the table of targets that the drag will support</doc>
            <type name="TargetEntry" c:type="GtkTargetEntry*"/>
          </parameter>
          <parameter name="n_targets" transfer-ownership="none">
            <doc xml:whitespace="preserve">the number of items in @targets</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="actions" transfer-ownership="none">
            <doc xml:whitespace="preserve">the bitmask of possible actions for a drag from this widget</doc>
            <type name="Gdk.DragAction" c:type="GdkDragAction"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_column_spacing"
              c:identifier="gtk_icon_view_get_column_spacing"
              version="2.6">
        <doc xml:whitespace="preserve">Returns the value of the ::column-spacing property.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the space between columns</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="get_columns"
              c:identifier="gtk_icon_view_get_columns"
              version="2.6">
        <doc xml:whitespace="preserve">Returns the value of the ::columns property.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the number of columns, or -1</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="get_cursor"
              c:identifier="gtk_icon_view_get_cursor"
              version="2.8">
        <doc xml:whitespace="preserve">Fills in @path and @cell with the current cursor path and cell. 
If the cursor isn't currently set, then *@path will be %NULL.  
If no cell currently has focus, then *@cell will be %NULL.
The returned #GtkTreePath must be freed with gtk_tree_path_free().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the cursor is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="path" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">Return location for the current cursor path, or %NULL</doc>
            <type name="TreePath" c:type="GtkTreePath**"/>
          </parameter>
          <parameter name="cell" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">Return location the current focus cell, or %NULL</doc>
            <type name="CellRenderer" c:type="GtkCellRenderer**"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_dest_item_at_pos"
              c:identifier="gtk_icon_view_get_dest_item_at_pos"
              version="2.8">
        <doc xml:whitespace="preserve">Determines the destination item for a given position.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">whether there is an item at the given position.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="drag_x" transfer-ownership="none">
            <doc xml:whitespace="preserve">the position to determine the destination item for</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="drag_y" transfer-ownership="none">
            <doc xml:whitespace="preserve">the position to determine the destination item for</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="path" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">Return location for the path of the item, or %NULL.</doc>
            <type name="TreePath" c:type="GtkTreePath**"/>
          </parameter>
          <parameter name="pos" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">Return location for the drop position, or %NULL</doc>
            <type name="IconViewDropPosition"
                  c:type="GtkIconViewDropPosition*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_drag_dest_item"
              c:identifier="gtk_icon_view_get_drag_dest_item"
              version="2.8">
        <doc xml:whitespace="preserve">Gets information about the item that is highlighted for feedback.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="path" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">Return location for the path of the highlighted item, or %NULL.</doc>
            <type name="TreePath" c:type="GtkTreePath**"/>
          </parameter>
          <parameter name="pos" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">Return location for the drop position, or %NULL</doc>
            <type name="IconViewDropPosition"
                  c:type="GtkIconViewDropPosition*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_item_at_pos"
              c:identifier="gtk_icon_view_get_item_at_pos"
              version="2.8">
        <doc xml:whitespace="preserve">Finds the path at the point (@x, @y), relative to bin_window coordinates.
In contrast to gtk_icon_view_get_path_at_pos(), this function also 
obtains the cell at the specified position. The returned path should
be freed with gtk_tree_path_free().
See gtk_icon_view_convert_widget_to_bin_window_coords() for converting
widget coordinates to bin_window coordinates.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if an item exists at the specified position</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="x" transfer-ownership="none">
            <doc xml:whitespace="preserve">The x position to be identified</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:whitespace="preserve">The y position to be identified</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="path" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">Return location for the path, or %NULL</doc>
            <type name="TreePath" c:type="GtkTreePath**"/>
          </parameter>
          <parameter name="cell" transfer-ownership="none">
            <doc xml:whitespace="preserve">Return location for the renderer responsible for the cell at (@x, @y), or %NULL</doc>
            <type name="CellRenderer" c:type="GtkCellRenderer**"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_item_column"
              c:identifier="gtk_icon_view_get_item_column"
              version="2.22">
        <doc xml:whitespace="preserve">Gets the column in which the item @path is currently
displayed. Column numbers start at 0.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The column in which the item is displayed</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <parameter name="path" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GtkTreePath of the item</doc>
            <type name="TreePath" c:type="GtkTreePath*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_item_orientation"
              c:identifier="gtk_icon_view_get_item_orientation"
              version="2.6">
        <doc xml:whitespace="preserve">Returns the value of the ::item-orientation property which determines 
whether the labels are drawn beside the icons instead of below.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the relative position of texts and icons</doc>
          <type name="Orientation" c:type="GtkOrientation"/>
        </return-value>
      </method>
      <method name="get_item_padding"
              c:identifier="gtk_icon_view_get_item_padding"
              version="2.18">
        <doc xml:whitespace="preserve">Returns the value of the ::item-padding property.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the padding around items</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="get_item_row"
              c:identifier="gtk_icon_view_get_item_row"
              version="2.22">
        <doc xml:whitespace="preserve">Gets the row in which the item @path is currently
displayed. Row numbers start at 0.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The row in which the item is displayed</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <parameter name="path" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GtkTreePath of the item</doc>
            <type name="TreePath" c:type="GtkTreePath*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_item_width"
              c:identifier="gtk_icon_view_get_item_width"
              version="2.6">
        <doc xml:whitespace="preserve">Returns the value of the ::item-width property.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the width of a single item, or -1</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="get_margin"
              c:identifier="gtk_icon_view_get_margin"
              version="2.6">
        <doc xml:whitespace="preserve">Returns the value of the ::margin property.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the space at the borders</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="get_markup_column"
              c:identifier="gtk_icon_view_get_markup_column"
              version="2.6">
        <doc xml:whitespace="preserve">Returns the column with markup text for @icon_view.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the markup column, or -1 if it's unset.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="get_model"
              c:identifier="gtk_icon_view_get_model"
              version="2.6 ">
        <doc xml:whitespace="preserve">Returns the model the #GtkIconView is based on.  Returns %NULL if the
model is unset.
currently being used.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">A #GtkTreeModel, or %NULL if none is</doc>
          <type name="TreeModel" c:type="GtkTreeModel*"/>
        </return-value>
      </method>
      <method name="get_path_at_pos"
              c:identifier="gtk_icon_view_get_path_at_pos"
              version="2.6 ">
        <doc xml:whitespace="preserve">Finds the path at the point (@x, @y), relative to bin_window coordinates.
See gtk_icon_view_get_item_at_pos(), if you are also interested in
the cell at the specified position. 
See gtk_icon_view_convert_widget_to_bin_window_coords() for converting
widget coordinates to bin_window coordinates.
if no icon exists at that position.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">The #GtkTreePath corresponding to the icon or %NULL</doc>
          <type name="TreePath" c:type="GtkTreePath*"/>
        </return-value>
        <parameters>
          <parameter name="x" transfer-ownership="none">
            <doc xml:whitespace="preserve">The x position to be identified</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:whitespace="preserve">The y position to be identified</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_pixbuf_column"
              c:identifier="gtk_icon_view_get_pixbuf_column"
              version="2.6">
        <doc xml:whitespace="preserve">Returns the column with pixbufs for @icon_view.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the pixbuf column, or -1 if it's unset.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="get_reorderable"
              c:identifier="gtk_icon_view_get_reorderable"
              version="2.8">
        <doc xml:whitespace="preserve">Retrieves whether the user can reorder the list via drag-and-drop. 
See gtk_icon_view_set_reorderable().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the list can be reordered.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_row_spacing"
              c:identifier="gtk_icon_view_get_row_spacing"
              version="2.6">
        <doc xml:whitespace="preserve">Returns the value of the ::row-spacing property.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the space between rows</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="get_selected_items"
              c:identifier="gtk_icon_view_get_selected_items"
              version="2.6">
        <doc xml:whitespace="preserve">Creates a list of paths of all selected items. Additionally, if you are
planning on modifying the model after calling this function, you may
want to convert the returned list into a list of #GtkTreeRowReference&lt;!-- --&gt;s.
To do this, you can use gtk_tree_row_reference_new().
To free the return value, use:
|[
g_list_foreach (list, (GFunc)gtk_tree_path_free, NULL);
g_list_free (list);
]|</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A #GList containing a #GtkTreePath for each selected row.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="TreePath"/>
          </type>
        </return-value>
      </method>
      <method name="get_selection_mode"
              c:identifier="gtk_icon_view_get_selection_mode"
              version="2.6 ">
        <doc xml:whitespace="preserve">Gets the selection mode of the @icon_view.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the current selection mode</doc>
          <type name="SelectionMode" c:type="GtkSelectionMode"/>
        </return-value>
      </method>
      <method name="get_spacing"
              c:identifier="gtk_icon_view_get_spacing"
              version="2.6">
        <doc xml:whitespace="preserve">Returns the value of the ::spacing property.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the space between cells</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="get_text_column"
              c:identifier="gtk_icon_view_get_text_column"
              version="2.6">
        <doc xml:whitespace="preserve">Returns the column with text for @icon_view.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the text column, or -1 if it's unset.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="get_tooltip_column"
              c:identifier="gtk_icon_view_get_tooltip_column">
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="get_tooltip_context"
              c:identifier="gtk_icon_view_get_tooltip_context"
              version="2.12">
        <doc xml:whitespace="preserve">This function is supposed to be used in a #GtkWidget::query-tooltip
signal handler for #GtkIconView.  The @x, @y and @keyboard_tip values
which are received in the signal handler, should be passed to this
function without modification.
The return value indicates whether there is an icon view item at the given
coordinates (%TRUE) or not (%FALSE) for mouse tooltips. For keyboard
tooltips the item returned will be the cursor item. When %TRUE, then any of
that row and the corresponding model. @x and @y will always be converted
to be relative to @icon_view's bin_window if @keyboard_tooltip is %FALSE.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">whether or not the given tooltip context points to a item</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="x" transfer-ownership="none">
            <doc xml:whitespace="preserve">the x coordinate (relative to widget coordinates)</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:whitespace="preserve">the y coordinate (relative to widget coordinates)</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="keyboard_tip" transfer-ownership="none">
            <doc xml:whitespace="preserve">whether this is a keyboard tooltip or not</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="model"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     allow-none="1">
            <doc xml:whitespace="preserve">a pointer to receive a #GtkTreeModel or %NULL</doc>
            <type name="TreeModel" c:type="GtkTreeModel**"/>
          </parameter>
          <parameter name="path"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     allow-none="1">
            <doc xml:whitespace="preserve">a pointer to receive a #GtkTreePath or %NULL</doc>
            <type name="TreePath" c:type="GtkTreePath**"/>
          </parameter>
          <parameter name="iter"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">a pointer to receive a #GtkTreeIter or %NULL</doc>
            <type name="TreeIter" c:type="GtkTreeIter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_visible_range"
              c:identifier="gtk_icon_view_get_visible_range"
              version="2.8">
        <doc xml:whitespace="preserve">Sets @start_path and @end_path to be the first and last visible path. 
Note that there may be invisible paths in between.
Both paths should be freed with gtk_tree_path_free() after use.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE, if valid paths were placed in @start_path and @end_path</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="start_path"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">Return location for start of region, or %NULL</doc>
            <type name="TreePath" c:type="GtkTreePath**"/>
          </parameter>
          <parameter name="end_path" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">Return location for end of region, or %NULL</doc>
            <type name="TreePath" c:type="GtkTreePath**"/>
          </parameter>
        </parameters>
      </method>
      <method name="item_activated"
              c:identifier="gtk_icon_view_item_activated"
              version="2.6">
        <doc xml:whitespace="preserve">Activates the item determined by @path.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="path" transfer-ownership="none">
            <doc xml:whitespace="preserve">The #GtkTreePath to be activated</doc>
            <type name="TreePath" c:type="GtkTreePath*"/>
          </parameter>
        </parameters>
      </method>
      <method name="path_is_selected"
              c:identifier="gtk_icon_view_path_is_selected"
              version="2.6">
        <doc xml:whitespace="preserve">Returns %TRUE if the icon pointed to by @path is currently
selected. If @path does not point to a valid location, %FALSE is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if @path is selected.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="path" transfer-ownership="none">
            <doc xml:whitespace="preserve">A #GtkTreePath to check selection on.</doc>
            <type name="TreePath" c:type="GtkTreePath*"/>
          </parameter>
        </parameters>
      </method>
      <method name="scroll_to_path"
              c:identifier="gtk_icon_view_scroll_to_path"
              version="2.8">
        <doc xml:whitespace="preserve">Moves the alignments of @icon_view to the position specified by @path.  
where @column is placed.  Both are expected to be between 0.0 and 1.0. 
0.0 means left/top alignment, 1.0 means right/bottom alignment, 0.5 means 
center.
If @use_align is %FALSE, then the alignment arguments are ignored, and the
tree does the minimum amount of work to scroll the item onto the screen.
This means that the item will be scrolled to the edge closest to its current
position.  If the item is currently visible on the screen, nothing is done.
This function only works if the model is set, and @path is a valid row on 
the model. If the model changes before the @icon_view is realized, the 
centered path will be modified to reflect this change.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="path" transfer-ownership="none">
            <doc xml:whitespace="preserve">The path of the item to move to.</doc>
            <type name="TreePath" c:type="GtkTreePath*"/>
          </parameter>
          <parameter name="use_align" transfer-ownership="none">
            <doc xml:whitespace="preserve">whether to use alignment arguments, or %FALSE.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="row_align" transfer-ownership="none">
            <doc xml:whitespace="preserve">The vertical alignment of the item specified by @path.</doc>
            <type name="gfloat" c:type="gfloat"/>
          </parameter>
          <parameter name="col_align" transfer-ownership="none">
            <doc xml:whitespace="preserve">The horizontal alignment of the item specified by @path.</doc>
            <type name="gfloat" c:type="gfloat"/>
          </parameter>
        </parameters>
      </method>
      <method name="select_all"
              c:identifier="gtk_icon_view_select_all"
              version="2.6">
        <doc xml:whitespace="preserve">Selects all the icons. @icon_view must has its selection mode set
to #GTK_SELECTION_MULTIPLE.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="select_path"
              c:identifier="gtk_icon_view_select_path"
              version="2.6">
        <doc xml:whitespace="preserve">Selects the row at @path.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="path" transfer-ownership="none">
            <doc xml:whitespace="preserve">The #GtkTreePath to be selected.</doc>
            <type name="TreePath" c:type="GtkTreePath*"/>
          </parameter>
        </parameters>
      </method>
      <method name="selected_foreach"
              c:identifier="gtk_icon_view_selected_foreach"
              version="2.6 ">
        <doc xml:whitespace="preserve">Calls a function for each selected icon. Note that the model or
selection cannot be modified from within this function.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="func"
                     transfer-ownership="none"
                     scope="call"
                     closure="1">
            <doc xml:whitespace="preserve">The function to call for each selected icon.</doc>
            <type name="IconViewForeachFunc" c:type="GtkIconViewForeachFunc"/>
          </parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:whitespace="preserve">User data to pass to the function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_column_spacing"
              c:identifier="gtk_icon_view_set_column_spacing"
              version="2.6">
        <doc xml:whitespace="preserve">Sets the ::column-spacing property which specifies the space 
which is inserted between the columns of the icon view.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="column_spacing" transfer-ownership="none">
            <doc xml:whitespace="preserve">the column spacing</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_columns"
              c:identifier="gtk_icon_view_set_columns"
              version="2.6">
        <doc xml:whitespace="preserve">Sets the ::columns property which determines in how
many columns the icons are arranged. If @columns is
-1, the number of columns will be chosen automatically 
to fill the available area.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="columns" transfer-ownership="none">
            <doc xml:whitespace="preserve">the number of columns</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_cursor"
              c:identifier="gtk_icon_view_set_cursor"
              version="2.8">
        <doc xml:whitespace="preserve">Sets the current keyboard focus to be at @path, and selects it.  This is
useful when you want to focus the user's attention on a particular item.
If @cell is not %NULL, then focus is given to the cell specified by 
it. Additionally, if @start_editing is %TRUE, then editing should be 
started in the specified cell.  
This function is often followed by &lt;literal&gt;gtk_widget_grab_focus 
(icon_view)&lt;/literal&gt; in order to give keyboard focus to the widget.  
Please note that editing can only happen when the widget is realized.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="path" transfer-ownership="none">
            <doc xml:whitespace="preserve">A #GtkTreePath</doc>
            <type name="TreePath" c:type="GtkTreePath*"/>
          </parameter>
          <parameter name="cell" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">One of the cell renderers of @icon_view, or %NULL</doc>
            <type name="CellRenderer" c:type="GtkCellRenderer*"/>
          </parameter>
          <parameter name="start_editing" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE if the specified cell should start being edited.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_drag_dest_item"
              c:identifier="gtk_icon_view_set_drag_dest_item"
              version="2.8">
        <doc xml:whitespace="preserve">Sets the item that is highlighted for feedback.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="path" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">The path of the item to highlight, or %NULL.</doc>
            <type name="TreePath" c:type="GtkTreePath*"/>
          </parameter>
          <parameter name="pos" transfer-ownership="none">
            <doc xml:whitespace="preserve">Specifies where to drop, relative to the item</doc>
            <type name="IconViewDropPosition"
                  c:type="GtkIconViewDropPosition"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_item_orientation"
              c:identifier="gtk_icon_view_set_item_orientation"
              version="2.6">
        <doc xml:whitespace="preserve">Sets the ::item-orientation property which determines whether the labels 
are drawn beside the icons instead of below.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="orientation" transfer-ownership="none">
            <doc xml:whitespace="preserve">the relative position of texts and icons</doc>
            <type name="Orientation" c:type="GtkOrientation"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_item_padding"
              c:identifier="gtk_icon_view_set_item_padding"
              version="2.18">
        <doc xml:whitespace="preserve">Sets the #GtkIconView:item-padding property which specifies the padding
around each of the icon view's items.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="item_padding" transfer-ownership="none">
            <doc xml:whitespace="preserve">the item padding</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_item_width"
              c:identifier="gtk_icon_view_set_item_width"
              version="2.6">
        <doc xml:whitespace="preserve">Sets the ::item-width property which specifies the width 
to use for each item. If it is set to -1, the icon view will 
automatically determine a suitable item size.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="item_width" transfer-ownership="none">
            <doc xml:whitespace="preserve">the width for each item</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_margin"
              c:identifier="gtk_icon_view_set_margin"
              version="2.6">
        <doc xml:whitespace="preserve">Sets the ::margin property which specifies the space 
which is inserted at the top, bottom, left and right 
of the icon view.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="margin" transfer-ownership="none">
            <doc xml:whitespace="preserve">the margin</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_markup_column"
              c:identifier="gtk_icon_view_set_markup_column"
              version="2.6">
        <doc xml:whitespace="preserve">Sets the column with markup information for @icon_view to be
If the markup column is set to something, it overrides
the text column set by gtk_icon_view_set_text_column().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="column" transfer-ownership="none">
            <doc xml:whitespace="preserve">A column in the currently used model, or -1 to display no text</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_model"
              c:identifier="gtk_icon_view_set_model"
              version="2.6 ">
        <doc xml:whitespace="preserve">Sets the model for a #GtkIconView.
If the @icon_view already has a model set, it will remove
it before setting the new model.  If @model is %NULL, then
it will unset the old model.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="model" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">The model.</doc>
            <type name="TreeModel" c:type="GtkTreeModel*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_pixbuf_column"
              c:identifier="gtk_icon_view_set_pixbuf_column"
              version="2.6 ">
        <doc xml:whitespace="preserve">Sets the column with pixbufs for @icon_view to be @column. The pixbuf
column must be of type #GDK_TYPE_PIXBUF</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="column" transfer-ownership="none">
            <doc xml:whitespace="preserve">A column in the currently used model, or -1 to disable</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_reorderable"
              c:identifier="gtk_icon_view_set_reorderable"
              version="2.8">
        <doc xml:whitespace="preserve">This function is a convenience function to allow you to reorder models that
support the #GtkTreeDragSourceIface and the #GtkTreeDragDestIface.  Both
#GtkTreeStore and #GtkListStore support these.  If @reorderable is %TRUE, then
the user can reorder the model by dragging and dropping rows.  The
developer can listen to these changes by connecting to the model's
row_inserted and row_deleted signals. The reordering is implemented by setting up
the icon view as a drag source and destination. Therefore, drag and
drop can not be used in a reorderable view for any other purpose.
This function does not give you any degree of control over the order -- any
reordering is allowed.  If more control is needed, you should probably
handle drag and drop manually.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="reorderable" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE, if the list of items can be reordered.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_row_spacing"
              c:identifier="gtk_icon_view_set_row_spacing"
              version="2.6">
        <doc xml:whitespace="preserve">Sets the ::row-spacing property which specifies the space 
which is inserted between the rows of the icon view.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="row_spacing" transfer-ownership="none">
            <doc xml:whitespace="preserve">the row spacing</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_selection_mode"
              c:identifier="gtk_icon_view_set_selection_mode"
              version="2.6 ">
        <doc xml:whitespace="preserve">Sets the selection mode of the @icon_view.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="mode" transfer-ownership="none">
            <doc xml:whitespace="preserve">The selection mode</doc>
            <type name="SelectionMode" c:type="GtkSelectionMode"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_spacing"
              c:identifier="gtk_icon_view_set_spacing"
              version="2.6">
        <doc xml:whitespace="preserve">Sets the ::spacing property which specifies the space 
which is inserted between the cells (i.e. the icon and 
the text) of an item.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="spacing" transfer-ownership="none">
            <doc xml:whitespace="preserve">the spacing</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_text_column"
              c:identifier="gtk_icon_view_set_text_column"
              version="2.6 ">
        <doc xml:whitespace="preserve">Sets the column with text for @icon_view to be @column. The text
column must be of type #G_TYPE_STRING.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="column" transfer-ownership="none">
            <doc xml:whitespace="preserve">A column in the currently used model, or -1 to display no text</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_tooltip_cell"
              c:identifier="gtk_icon_view_set_tooltip_cell"
              version="2.12">
        <doc xml:whitespace="preserve">Sets the tip area of @tooltip to the area which @cell occupies in
the item pointed to by @path. See also gtk_tooltip_set_tip_area().
See also gtk_icon_view_set_tooltip_column() for a simpler alternative.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="tooltip" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkTooltip</doc>
            <type name="Tooltip" c:type="GtkTooltip*"/>
          </parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkTreePath</doc>
            <type name="TreePath" c:type="GtkTreePath*"/>
          </parameter>
          <parameter name="cell" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">a #GtkCellRenderer or %NULL</doc>
            <type name="CellRenderer" c:type="GtkCellRenderer*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_tooltip_column"
              c:identifier="gtk_icon_view_set_tooltip_column"
              version="2.12">
        <doc xml:whitespace="preserve">If you only plan to have simple (text-only) tooltips on full items, you
can use this function to have #GtkIconView handle these automatically
for you. @column should be set to the column in @icon_view's model
containing the tooltip texts, or -1 to disable this feature.
When enabled, #GtkWidget::has-tooltip will be set to %TRUE and</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="column" transfer-ownership="none">
            <doc xml:whitespace="preserve">an integer, which is a valid column number for @icon_view's model</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_tooltip_item"
              c:identifier="gtk_icon_view_set_tooltip_item"
              version="2.12">
        <doc xml:whitespace="preserve">Sets the tip area of @tooltip to be the area covered by the item at @path.
See also gtk_icon_view_set_tooltip_column() for a simpler alternative.
See also gtk_tooltip_set_tip_area().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="tooltip" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkTooltip</doc>
            <type name="Tooltip" c:type="GtkTooltip*"/>
          </parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkTreePath</doc>
            <type name="TreePath" c:type="GtkTreePath*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unselect_all"
              c:identifier="gtk_icon_view_unselect_all"
              version="2.6">
        <doc xml:whitespace="preserve">Unselects all the icons.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="unselect_path"
              c:identifier="gtk_icon_view_unselect_path"
              version="2.6">
        <doc xml:whitespace="preserve">Unselects the row at @path.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="path" transfer-ownership="none">
            <doc xml:whitespace="preserve">The #GtkTreePath to be unselected.</doc>
            <type name="TreePath" c:type="GtkTreePath*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unset_model_drag_dest"
              c:identifier="gtk_icon_view_unset_model_drag_dest"
              version="2.8">
        <doc xml:whitespace="preserve">Undoes the effect of gtk_icon_view_enable_model_drag_dest(). Calling this
method sets #GtkIconView:reorderable to %FALSE.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="unset_model_drag_source"
              c:identifier="gtk_icon_view_unset_model_drag_source"
              version="2.8">
        <doc xml:whitespace="preserve">Undoes the effect of gtk_icon_view_enable_model_drag_source(). Calling this
method sets #GtkIconView:reorderable to %FALSE.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <property name="column-spacing"
                version="2.6"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The column-spacing property specifies the space which is inserted between
the columns of the icon view.</doc>
        <type name="gint"/>
      </property>
      <property name="columns"
                version="2.6"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The columns property contains the number of the columns in which the
items should be displayed. If it is -1, the number of columns will
be chosen automatically to fill the available area.</doc>
        <type name="gint"/>
      </property>
      <property name="item-orientation"
                version="2.6"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The item-orientation property specifies how the cells (i.e. the icon and
the text) of the item are positioned relative to each other.</doc>
        <type name="Orientation"/>
      </property>
      <property name="item-padding"
                version="2.18"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The item-padding property specifies the padding around each
of the icon view's item.</doc>
        <type name="gint"/>
      </property>
      <property name="item-width"
                version="2.6"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The item-width property specifies the width to use for each item. 
If it is set to -1, the icon view will automatically determine a 
suitable item size.</doc>
        <type name="gint"/>
      </property>
      <property name="margin"
                version="2.6"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The margin property specifies the space which is inserted 
at the edges of the icon view.</doc>
        <type name="gint"/>
      </property>
      <property name="markup-column"
                version="2.6"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The ::markup-column property contains the number of the model column
containing markup information to be displayed. The markup column must be 
of type #G_TYPE_STRING. If this property and the :text-column property 
are both set to column numbers, it overrides the text column.
If both are set to -1, no texts are displayed.</doc>
        <type name="gint"/>
      </property>
      <property name="model" writable="1" transfer-ownership="none">
        <type name="TreeModel"/>
      </property>
      <property name="pixbuf-column"
                version="2.6"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The ::pixbuf-column property contains the number of the model column
containing the pixbufs which are displayed. The pixbuf column must be 
of type #GDK_TYPE_PIXBUF. Setting this property to -1 turns off the
display of pixbufs.</doc>
        <type name="gint"/>
      </property>
      <property name="reorderable"
                version="2.8"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The reorderable property specifies if the items can be reordered
by DND.</doc>
        <type name="gboolean"/>
      </property>
      <property name="row-spacing"
                version="2.6"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The row-spacing property specifies the space which is inserted between
the rows of the icon view.</doc>
        <type name="gint"/>
      </property>
      <property name="selection-mode"
                version="2.6"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The ::selection-mode property specifies the selection mode of
icon view. If the mode is #GTK_SELECTION_MULTIPLE, rubberband selection
is enabled, for the other modes, only keyboard selection is possible.</doc>
        <type name="SelectionMode"/>
      </property>
      <property name="spacing"
                version="2.6"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The spacing property specifies the space which is inserted between
the cells (i.e. the icon and the text) of an item.</doc>
        <type name="gint"/>
      </property>
      <property name="text-column"
                version="2.6"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The ::text-column property contains the number of the model column
containing the texts which are displayed. The text column must be 
of type #G_TYPE_STRING. If this property and the :markup-column 
property are both set to -1, no texts are displayed.</doc>
        <type name="gint"/>
      </property>
      <property name="tooltip-column" writable="1" transfer-ownership="none">
        <type name="gint"/>
      </property>
      <field name="parent">
        <type name="Container" c:type="GtkContainer"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="IconViewPrivate" c:type="GtkIconViewPrivate*"/>
      </field>
      <glib:signal name="activate-cursor-item">
        <doc xml:whitespace="preserve">A &lt;link linkend="keybinding-signals"&gt;keybinding signal&lt;/link&gt;
which gets emitted when the user activates the currently 
focused item. 
Applications should not connect to it, but may emit it with
g_signal_emit_by_name() if they need to control activation
programmatically.
The default bindings for this signal are Space, Return and Enter.</doc>
        <return-value transfer-ownership="none">
          <type name="gboolean"/>
        </return-value>
      </glib:signal>
      <glib:signal name="item-activated">
        <doc xml:whitespace="preserve">The ::item-activated signal is emitted when the method
gtk_icon_view_item_activated() is called or the user double 
clicks an item. It is also emitted when a non-editable item
pressed.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GtkTreePath for the activated item</doc>
            <type name="TreePath"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="move-cursor">
        <doc xml:whitespace="preserve">The ::move-cursor signal is a
&lt;link linkend="keybinding-signals"&gt;keybinding signal&lt;/link&gt;
which gets emitted when the user initiates a cursor movement.
Applications should not connect to it, but may emit it with
g_signal_emit_by_name() if they need to control the cursor
programmatically.
The default bindings for this signal include
&lt;itemizedlist&gt;
&lt;listitem&gt;Arrow keys which move by individual steps&lt;/listitem&gt;
&lt;listitem&gt;Home/End keys which move to the first/last item&lt;/listitem&gt;
&lt;listitem&gt;PageUp/PageDown which move by "pages"&lt;/listitem&gt;
&lt;/itemizedlist&gt;
All of these will extend the selection when combined with
the Shift modifier.</doc>
        <return-value transfer-ownership="none">
          <type name="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the granularity of the move, as a #GtkMovementStep</doc>
            <type name="MovementStep"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <doc xml:whitespace="preserve">the number of @step units to move</doc>
            <type name="gint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="select-all">
        <doc xml:whitespace="preserve">A &lt;link linkend="keybinding-signals"&gt;keybinding signal&lt;/link&gt;
which gets emitted when the user selects all items.
Applications should not connect to it, but may emit it with
g_signal_emit_by_name() if they need to control selection
programmatically.
The default binding for this signal is Ctrl-a.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
      <glib:signal name="select-cursor-item">
        <doc xml:whitespace="preserve">A &lt;link linkend="keybinding-signals"&gt;keybinding signal&lt;/link&gt;
which gets emitted when the user selects the item that is currently
focused.
Applications should not connect to it, but may emit it with
g_signal_emit_by_name() if they need to control selection
programmatically.
There is no default binding for this signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
      <glib:signal name="selection-changed">
        <doc xml:whitespace="preserve">The ::selection-changed signal is emitted when the selection
(i.e. the set of selected items) changes.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
      <glib:signal name="set-scroll-adjustments">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Adjustment"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="Adjustment"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="toggle-cursor-item">
        <doc xml:whitespace="preserve">A &lt;link linkend="keybinding-signals"&gt;keybinding signal&lt;/link&gt;
which gets emitted when the user toggles whether the currently
focused item is selected or not. The exact effect of this 
depend on the selection mode.
Applications should not connect to it, but may emit it with
g_signal_emit_by_name() if they need to control selection
programmatically.
There is no default binding for this signal is Ctrl-Space.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
      <glib:signal name="unselect-all">
        <doc xml:whitespace="preserve">A &lt;link linkend="keybinding-signals"&gt;keybinding signal&lt;/link&gt;
which gets emitted when the user unselects all items.
Applications should not connect to it, but may emit it with
g_signal_emit_by_name() if they need to control selection
programmatically.
The default binding for this signal is Ctrl-Shift-a.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="IconViewClass"
            c:type="GtkIconViewClass"
            glib:is-gtype-struct-for="IconView">
      <field name="parent_class">
        <type name="ContainerClass" c:type="GtkContainerClass"/>
      </field>
      <field name="set_scroll_adjustments">
        <callback name="set_scroll_adjustments">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="icon_view" transfer-ownership="none">
              <type name="IconView" c:type="GtkIconView*"/>
            </parameter>
            <parameter name="hadjustment" transfer-ownership="none">
              <type name="Adjustment" c:type="GtkAdjustment*"/>
            </parameter>
            <parameter name="vadjustment" transfer-ownership="none">
              <type name="Adjustment" c:type="GtkAdjustment*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="item_activated">
        <callback name="item_activated">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="icon_view" transfer-ownership="none">
              <type name="IconView" c:type="GtkIconView*"/>
            </parameter>
            <parameter name="path" transfer-ownership="none">
              <type name="TreePath" c:type="GtkTreePath*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="selection_changed">
        <callback name="selection_changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="icon_view" transfer-ownership="none">
              <type name="IconView" c:type="GtkIconView*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="select_all">
        <callback name="select_all">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="icon_view" transfer-ownership="none">
              <type name="IconView" c:type="GtkIconView*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="unselect_all">
        <callback name="unselect_all">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="icon_view" transfer-ownership="none">
              <type name="IconView" c:type="GtkIconView*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="select_cursor_item">
        <callback name="select_cursor_item">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="icon_view" transfer-ownership="none">
              <type name="IconView" c:type="GtkIconView*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="toggle_cursor_item">
        <callback name="toggle_cursor_item">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="icon_view" transfer-ownership="none">
              <type name="IconView" c:type="GtkIconView*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="move_cursor">
        <callback name="move_cursor">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="icon_view" transfer-ownership="none">
              <type name="IconView" c:type="GtkIconView*"/>
            </parameter>
            <parameter name="step" transfer-ownership="none">
              <type name="MovementStep" c:type="GtkMovementStep"/>
            </parameter>
            <parameter name="count" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="activate_cursor_item">
        <callback name="activate_cursor_item">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="icon_view" transfer-ownership="none">
              <type name="IconView" c:type="GtkIconView*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <enumeration name="IconViewDropPosition"
                 glib:type-name="GtkIconViewDropPosition"
                 glib:get-type="gtk_icon_view_drop_position_get_type"
                 c:type="GtkIconViewDropPosition">
      <doc xml:whitespace="preserve">An enum for determining where a dropped item goes.</doc>
      <member name="no_drop"
              value="0"
              c:identifier="GTK_ICON_VIEW_NO_DROP"
              glib:nick="no-drop"/>
      <member name="drop_into"
              value="1"
              c:identifier="GTK_ICON_VIEW_DROP_INTO"
              glib:nick="drop-into"/>
      <member name="drop_left"
              value="2"
              c:identifier="GTK_ICON_VIEW_DROP_LEFT"
              glib:nick="drop-left"/>
      <member name="drop_right"
              value="3"
              c:identifier="GTK_ICON_VIEW_DROP_RIGHT"
              glib:nick="drop-right"/>
      <member name="drop_above"
              value="4"
              c:identifier="GTK_ICON_VIEW_DROP_ABOVE"
              glib:nick="drop-above"/>
      <member name="drop_below"
              value="5"
              c:identifier="GTK_ICON_VIEW_DROP_BELOW"
              glib:nick="drop-below"/>
    </enumeration>
    <callback name="IconViewForeachFunc" c:type="GtkIconViewForeachFunc">
      <doc xml:whitespace="preserve">A function used by gtk_icon_view_selected_foreach() to map all
selected rows.  It will be called on every selected row in the view.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="icon_view" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GtkIconView</doc>
          <type name="IconView" c:type="GtkIconView*"/>
        </parameter>
        <parameter name="path" transfer-ownership="none">
          <doc xml:whitespace="preserve">The #GtkTreePath of a selected row</doc>
          <type name="TreePath" c:type="GtkTreePath*"/>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <doc xml:whitespace="preserve">user data</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <record name="IconViewPrivate" c:type="GtkIconViewPrivate" disguised="1">
    </record>
    <class name="Image"
           c:symbol-prefix="image"
           c:type="GtkImage"
           parent="Misc"
           glib:type-name="GtkImage"
           glib:get-type="gtk_image_get_type"
           glib:type-struct="ImageClass">
      <doc xml:whitespace="preserve">This struct contain private data only and should be accessed by the functions
below.</doc>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Buildable"/>
      <implements name="SizeRequest"/>
      <constructor name="new" c:identifier="gtk_image_new">
        <doc xml:whitespace="preserve">Creates a new empty #GtkImage widget.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a newly created #GtkImage widget.</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <constructor name="new_from_animation"
                   c:identifier="gtk_image_new_from_animation">
        <doc xml:whitespace="preserve">Creates a #GtkImage displaying the given animation.
The #GtkImage does not assume a reference to the
animation; you still need to unref it if you own references.
#GtkImage will add its own reference rather than adopting yours.
Note that the animation frames are shown using a timeout with
#G_PRIORITY_DEFAULT. When using animations to indicate busyness,
keep in mind that the animation will only be shown if the main loop
is not busy with something that has a higher priority.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a new #GtkImage widget</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="animation" transfer-ownership="none">
            <doc xml:whitespace="preserve">an animation</doc>
            <type name="GdkPixbuf.PixbufAnimation"
                  c:type="GdkPixbufAnimation*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_file" c:identifier="gtk_image_new_from_file">
        <doc xml:whitespace="preserve">Creates a new #GtkImage displaying the file @filename. If the file
isn't found or can't be loaded, the resulting #GtkImage will
display a "broken image" icon. This function never returns %NULL,
it always returns a valid #GtkImage widget.
If the file contains an animation, the image will contain an
animation.
If you need to detect failures to load the file, use
gdk_pixbuf_new_from_file() to load the file yourself, then create
the #GtkImage from the pixbuf. (Or for animations, use
gdk_pixbuf_animation_new_from_file()).
The storage type (gtk_image_get_storage_type()) of the returned
image is not defined, it will be whatever is appropriate for
displaying the file.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a new #GtkImage</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:whitespace="preserve">a filename</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_gicon"
                   c:identifier="gtk_image_new_from_gicon"
                   version="2.14">
        <doc xml:whitespace="preserve">Creates a #GtkImage displaying an icon from the current icon theme.
If the icon name isn't known, a "broken image" icon will be
displayed instead.  If the current icon theme is changed, the icon
will be updated appropriately.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a new #GtkImage displaying the themed icon</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="icon" transfer-ownership="none">
            <doc xml:whitespace="preserve">an icon</doc>
            <type name="Gio.Icon" c:type="GIcon*"/>
          </parameter>
          <parameter name="size" transfer-ownership="none">
            <doc xml:whitespace="preserve">a stock icon size</doc>
            <type name="gint"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_icon_name"
                   c:identifier="gtk_image_new_from_icon_name"
                   version="2.6">
        <doc xml:whitespace="preserve">Creates a #GtkImage displaying an icon from the current icon theme.
If the icon name isn't known, a "broken image" icon will be
displayed instead.  If the current icon theme is changed, the icon
will be updated appropriately.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a new #GtkImage displaying the themed icon</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="icon_name" transfer-ownership="none">
            <doc xml:whitespace="preserve">an icon name</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="size" transfer-ownership="none">
            <doc xml:whitespace="preserve">a stock icon size</doc>
            <type name="gint"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_icon_set"
                   c:identifier="gtk_image_new_from_icon_set">
        <doc xml:whitespace="preserve">Creates a #GtkImage displaying an icon set. Sample stock sizes are
#GTK_ICON_SIZE_MENU, #GTK_ICON_SIZE_SMALL_TOOLBAR. Instead of using
this function, usually it's better to create a #GtkIconFactory, put
your icon sets in the icon factory, add the icon factory to the
list of default factories with gtk_icon_factory_add_default(), and
then use gtk_image_new_from_stock(). This will allow themes to
override the icon you ship with your application.
The #GtkImage does not assume a reference to the
icon set; you still need to unref it if you own references.
#GtkImage will add its own reference rather than adopting yours.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a new #GtkImage</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="icon_set" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkIconSet</doc>
            <type name="IconSet" c:type="GtkIconSet*"/>
          </parameter>
          <parameter name="size" transfer-ownership="none">
            <doc xml:whitespace="preserve">a stock icon size</doc>
            <type name="gint"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_pixbuf"
                   c:identifier="gtk_image_new_from_pixbuf">
        <doc xml:whitespace="preserve">Creates a new #GtkImage displaying @pixbuf.
The #GtkImage does not assume a reference to the
pixbuf; you still need to unref it if you own references.
#GtkImage will add its own reference rather than adopting yours.
Note that this function just creates an #GtkImage from the pixbuf. The
#GtkImage created will not react to state changes. Should you want that, 
you should use gtk_image_new_from_icon_set().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a new #GtkImage</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="pixbuf" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">a #GdkPixbuf, or %NULL</doc>
            <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_pixmap"
                   c:identifier="gtk_image_new_from_pixmap">
        <doc xml:whitespace="preserve">Creates a #GtkImage widget displaying @pixmap with a @mask.
A #GdkPixmap is a server-side image buffer in the pixel format of the
current display. The #GtkImage does not assume a reference to the
pixmap or mask; you still need to unref them if you own references.
#GtkImage will add its own reference rather than adopting yours.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a new #GtkImage</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="pixmap" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">a #GdkPixmap, or %NULL</doc>
            <type name="Gdk.Pixmap" c:type="GdkPixmap*"/>
          </parameter>
          <parameter name="mask" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">a #GdkBitmap, or %NULL</doc>
            <type name="Gdk.Bitmap" c:type="GdkBitmap*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_stock"
                   c:identifier="gtk_image_new_from_stock">
        <doc xml:whitespace="preserve">Creates a #GtkImage displaying a stock icon. Sample stock icon
names are #GTK_STOCK_OPEN, #GTK_STOCK_QUIT. Sample stock sizes
are #GTK_ICON_SIZE_MENU, #GTK_ICON_SIZE_SMALL_TOOLBAR. If the stock
icon name isn't known, the image will be empty.
You can register your own stock icon names, see
gtk_icon_factory_add_default() and gtk_icon_factory_add().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a new #GtkImage displaying the stock icon</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="stock_id" transfer-ownership="none">
            <doc xml:whitespace="preserve">a stock icon name</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="size" transfer-ownership="none">
            <doc xml:whitespace="preserve">a stock icon size</doc>
            <type name="gint"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="clear" c:identifier="gtk_image_clear" version="2.8">
        <doc xml:whitespace="preserve">Resets the image to be empty.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="get_animation" c:identifier="gtk_image_get_animation">
        <doc xml:whitespace="preserve">Gets the #GdkPixbufAnimation being displayed by the #GtkImage.
The storage type of the image must be %GTK_IMAGE_EMPTY or
%GTK_IMAGE_ANIMATION (see gtk_image_get_storage_type()).
The caller of this function does not own a reference to the
returned animation.
the image is empty</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the displayed animation, or %NULL if</doc>
          <type name="GdkPixbuf.PixbufAnimation" c:type="GdkPixbufAnimation*"/>
        </return-value>
      </method>
      <method name="get_gicon"
              c:identifier="gtk_image_get_gicon"
              version="2.14">
        <doc xml:whitespace="preserve">Gets the #GIcon and size being displayed by the #GtkImage.
The storage type of the image must be %GTK_IMAGE_EMPTY or
%GTK_IMAGE_GICON (see gtk_image_get_storage_type()).
The caller of this function does not own a reference to the
returned #GIcon.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="gicon"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">place to store a #GIcon, or %NULL</doc>
            <type name="Gio.Icon" c:type="GIcon**"/>
          </parameter>
          <parameter name="size"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     allow-none="1">
            <doc xml:whitespace="preserve">place to store an icon size, or %NULL</doc>
            <type name="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_icon_name"
              c:identifier="gtk_image_get_icon_name"
              version="2.6">
        <doc xml:whitespace="preserve">Gets the icon name and size being displayed by the #GtkImage.
The storage type of the image must be %GTK_IMAGE_EMPTY or
%GTK_IMAGE_ICON_NAME (see gtk_image_get_storage_type()).
The returned string is owned by the #GtkImage and should not
be freed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="icon_name"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">place to store an icon name, or %NULL</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="size"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     allow-none="1">
            <doc xml:whitespace="preserve">place to store an icon size, or %NULL</doc>
            <type name="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_icon_set" c:identifier="gtk_image_get_icon_set">
        <doc xml:whitespace="preserve">Gets the icon set and size being displayed by the #GtkImage.
The storage type of the image must be %GTK_IMAGE_EMPTY or
%GTK_IMAGE_ICON_SET (see gtk_image_get_storage_type()).</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="icon_set"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">location to store a #GtkIconSet, or %NULL</doc>
            <type name="IconSet" c:type="GtkIconSet**"/>
          </parameter>
          <parameter name="size"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     allow-none="1">
            <doc xml:whitespace="preserve">location to store a stock icon size, or %NULL</doc>
            <type name="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_pixbuf" c:identifier="gtk_image_get_pixbuf">
        <doc xml:whitespace="preserve">Gets the #GdkPixbuf being displayed by the #GtkImage.
The storage type of the image must be %GTK_IMAGE_EMPTY or
%GTK_IMAGE_PIXBUF (see gtk_image_get_storage_type()).
The caller of this function does not own a reference to the
returned pixbuf.
the image is empty</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the displayed pixbuf, or %NULL if</doc>
          <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
      </method>
      <method name="get_pixel_size"
              c:identifier="gtk_image_get_pixel_size"
              version="2.6">
        <doc xml:whitespace="preserve">Gets the pixel size used for named icons.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the pixel size used for named icons.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="get_pixmap" c:identifier="gtk_image_get_pixmap">
        <doc xml:whitespace="preserve">Gets the pixmap and mask being displayed by the #GtkImage.
The storage type of the image must be %GTK_IMAGE_EMPTY or
%GTK_IMAGE_PIXMAP (see gtk_image_get_storage_type()).
The caller of this function does not own a reference to the
returned pixmap and mask.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="pixmap"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">location to store the pixmap, or %NULL</doc>
            <type name="Gdk.Pixmap" c:type="GdkPixmap**"/>
          </parameter>
          <parameter name="mask"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">location to store the mask, or %NULL</doc>
            <type name="Gdk.Bitmap" c:type="GdkBitmap**"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_stock" c:identifier="gtk_image_get_stock">
        <doc xml:whitespace="preserve">Gets the stock icon name and size being displayed by the #GtkImage.
The storage type of the image must be %GTK_IMAGE_EMPTY or
%GTK_IMAGE_STOCK (see gtk_image_get_storage_type()).
The returned string is owned by the #GtkImage and should not
be freed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="stock_id"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">place to store a stock icon name, or %NULL</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="size"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     allow-none="1">
            <doc xml:whitespace="preserve">place to store a stock icon size, or %NULL</doc>
            <type name="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_storage_type"
              c:identifier="gtk_image_get_storage_type">
        <doc xml:whitespace="preserve">Gets the type of representation being used by the #GtkImage
to store image data. If the #GtkImage has no image data,
the return value will be %GTK_IMAGE_EMPTY.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">image representation being used</doc>
          <type name="ImageType" c:type="GtkImageType"/>
        </return-value>
      </method>
      <method name="set_from_animation"
              c:identifier="gtk_image_set_from_animation">
        <doc xml:whitespace="preserve">Causes the #GtkImage to display the given animation (or display
nothing, if you set the animation to %NULL).</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="animation" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GdkPixbufAnimation</doc>
            <type name="GdkPixbuf.PixbufAnimation"
                  c:type="GdkPixbufAnimation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_from_file" c:identifier="gtk_image_set_from_file">
        <doc xml:whitespace="preserve">See gtk_image_new_from_file() for details.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="filename" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">a filename or %NULL</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_from_gicon"
              c:identifier="gtk_image_set_from_gicon"
              version="2.14">
        <doc xml:whitespace="preserve">See gtk_image_new_from_gicon() for details.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="icon" transfer-ownership="none">
            <doc xml:whitespace="preserve">an icon</doc>
            <type name="Gio.Icon" c:type="GIcon*"/>
          </parameter>
          <parameter name="size" transfer-ownership="none">
            <doc xml:whitespace="preserve">an icon size</doc>
            <type name="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_from_icon_name"
              c:identifier="gtk_image_set_from_icon_name"
              version="2.6">
        <doc xml:whitespace="preserve">See gtk_image_new_from_icon_name() for details.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="icon_name" transfer-ownership="none">
            <doc xml:whitespace="preserve">an icon name</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="size" transfer-ownership="none">
            <doc xml:whitespace="preserve">an icon size</doc>
            <type name="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_from_icon_set"
              c:identifier="gtk_image_set_from_icon_set">
        <doc xml:whitespace="preserve">See gtk_image_new_from_icon_set() for details.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="icon_set" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkIconSet</doc>
            <type name="IconSet" c:type="GtkIconSet*"/>
          </parameter>
          <parameter name="size" transfer-ownership="none">
            <doc xml:whitespace="preserve">a stock icon size</doc>
            <type name="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_from_pixbuf" c:identifier="gtk_image_set_from_pixbuf">
        <doc xml:whitespace="preserve">See gtk_image_new_from_pixbuf() for details.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="pixbuf" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">a #GdkPixbuf or %NULL</doc>
            <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_from_pixmap" c:identifier="gtk_image_set_from_pixmap">
        <doc xml:whitespace="preserve">See gtk_image_new_from_pixmap() for details.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="pixmap" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">a #GdkPixmap or %NULL</doc>
            <type name="Gdk.Pixmap" c:type="GdkPixmap*"/>
          </parameter>
          <parameter name="mask" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">a #GdkBitmap or %NULL</doc>
            <type name="Gdk.Bitmap" c:type="GdkBitmap*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_from_stock" c:identifier="gtk_image_set_from_stock">
        <doc xml:whitespace="preserve">See gtk_image_new_from_stock() for details.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="stock_id" transfer-ownership="none">
            <doc xml:whitespace="preserve">a stock icon name</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="size" transfer-ownership="none">
            <doc xml:whitespace="preserve">a stock icon size</doc>
            <type name="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_pixel_size"
              c:identifier="gtk_image_set_pixel_size"
              version="2.6">
        <doc xml:whitespace="preserve">Sets the pixel size to use for named icons. If the pixel size is set
to a value != -1, it is used instead of the icon size set by
gtk_image_set_from_icon_name().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="pixel_size" transfer-ownership="none">
            <doc xml:whitespace="preserve">the new pixel size</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <property name="file" writable="1" transfer-ownership="none">
        <type name="utf8"/>
      </property>
      <property name="gicon"
                version="2.14"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The GIcon displayed in the GtkImage. For themed icons,
If the icon theme is changed, the image will be updated
automatically.</doc>
        <type name="Gio.Icon"/>
      </property>
      <property name="icon-name"
                version="2.6"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The name of the icon in the icon theme. If the icon theme is
changed, the image will be updated automatically.</doc>
        <type name="utf8"/>
      </property>
      <property name="icon-set" writable="1" transfer-ownership="none">
        <type name="IconSet"/>
      </property>
      <property name="icon-size" writable="1" transfer-ownership="none">
        <type name="gint"/>
      </property>
      <property name="mask" writable="1" transfer-ownership="none">
        <type name="Gdk.Pixmap"/>
      </property>
      <property name="pixbuf" writable="1" transfer-ownership="none">
        <type name="GdkPixbuf.Pixbuf"/>
      </property>
      <property name="pixbuf-animation" writable="1" transfer-ownership="none">
        <type name="GdkPixbuf.PixbufAnimation"/>
      </property>
      <property name="pixel-size"
                version="2.6"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The "pixel-size" property can be used to specify a fixed size
overriding the #GtkImage:icon-size property for images of type 
%GTK_IMAGE_ICON_NAME.</doc>
        <type name="gint"/>
      </property>
      <property name="pixmap" writable="1" transfer-ownership="none">
        <type name="Gdk.Pixmap"/>
      </property>
      <property name="stock" writable="1" transfer-ownership="none">
        <type name="utf8"/>
      </property>
      <property name="storage-type" transfer-ownership="none">
        <type name="ImageType"/>
      </property>
      <field name="misc">
        <type name="Misc" c:type="GtkMisc"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ImagePrivate" c:type="GtkImagePrivate*"/>
      </field>
    </class>
    <record name="ImageAnimationData" c:type="GtkImageAnimationData">
      <field name="anim" writable="1">
        <type name="GdkPixbuf.PixbufAnimation" c:type="GdkPixbufAnimation*"/>
      </field>
      <field name="iter" writable="1">
        <type name="GdkPixbuf.PixbufAnimationIter"
              c:type="GdkPixbufAnimationIter*"/>
      </field>
      <field name="frame_timeout" writable="1">
        <type name="guint" c:type="guint"/>
      </field>
    </record>
    <record name="ImageClass"
            c:type="GtkImageClass"
            glib:is-gtype-struct-for="Image">
      <field name="parent_class">
        <type name="MiscClass" c:type="GtkMiscClass"/>
      </field>
      <field name="_gtk_reserved1" introspectable="0">
        <callback name="_gtk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved2" introspectable="0">
        <callback name="_gtk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved3" introspectable="0">
        <callback name="_gtk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved4" introspectable="0">
        <callback name="_gtk_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="ImageGIconData" c:type="GtkImageGIconData">
      <field name="icon" writable="1">
        <type name="Gio.Icon" c:type="GIcon*"/>
      </field>
      <field name="pixbuf" writable="1">
        <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
      </field>
      <field name="theme_change_id" writable="1">
        <type name="guint" c:type="guint"/>
      </field>
    </record>
    <record name="ImageIconNameData" c:type="GtkImageIconNameData">
      <field name="icon_name" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="pixbuf" writable="1">
        <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
      </field>
      <field name="theme_change_id" writable="1">
        <type name="guint" c:type="guint"/>
      </field>
    </record>
    <record name="ImageIconSetData" c:type="GtkImageIconSetData">
      <field name="icon_set" writable="1">
        <type name="IconSet" c:type="GtkIconSet*"/>
      </field>
    </record>
    <record name="ImageImageData" c:type="GtkImageImageData" disguised="1">
    </record>
    <class name="ImageMenuItem"
           c:symbol-prefix="image_menu_item"
           c:type="GtkImageMenuItem"
           parent="MenuItem"
           glib:type-name="GtkImageMenuItem"
           glib:get-type="gtk_image_menu_item_get_type"
           glib:type-struct="ImageMenuItemClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Activatable"/>
      <implements name="Buildable"/>
      <implements name="SizeRequest"/>
      <constructor name="new" c:identifier="gtk_image_menu_item_new">
        <doc xml:whitespace="preserve">Creates a new #GtkImageMenuItem with an empty label.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a new #GtkImageMenuItem.</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <constructor name="new_from_stock"
                   c:identifier="gtk_image_menu_item_new_from_stock">
        <doc xml:whitespace="preserve">Creates a new #GtkImageMenuItem containing the image and text from a 
stock item. Some stock ids have preprocessor macros like #GTK_STOCK_OK 
and #GTK_STOCK_APPLY.
If you want this menu item to have changeable accelerators, then pass in
%NULL for accel_group. Next call gtk_menu_item_set_accel_path() with an
appropriate path for the menu item, use gtk_stock_lookup() to look up the
standard accelerator for the stock item, and if one is found, call
gtk_accel_map_add_entry() to register it.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a new #GtkImageMenuItem.</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="stock_id" transfer-ownership="none">
            <doc xml:whitespace="preserve">the name of the stock item.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="accel_group"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">the #GtkAccelGroup to add the menu items accelerator to, or %NULL.</doc>
            <type name="AccelGroup" c:type="GtkAccelGroup*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_with_label"
                   c:identifier="gtk_image_menu_item_new_with_label">
        <doc xml:whitespace="preserve">Creates a new #GtkImageMenuItem containing a label.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a new #GtkImageMenuItem.</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="label" transfer-ownership="none">
            <doc xml:whitespace="preserve">the text of the menu item.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_with_mnemonic"
                   c:identifier="gtk_image_menu_item_new_with_mnemonic">
        <doc xml:whitespace="preserve">Creates a new #GtkImageMenuItem containing a label. The label
will be created using gtk_label_new_with_mnemonic(), so underscores
in @label indicate the mnemonic for the menu item.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a new #GtkImageMenuItem</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="label" transfer-ownership="none">
            <doc xml:whitespace="preserve">the text of the menu item, with an underscore in front of the mnemonic character</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_always_show_image"
              c:identifier="gtk_image_menu_item_get_always_show_image"
              version="2.16">
        <doc xml:whitespace="preserve">Returns whether the menu item will ignore the #GtkSettings:gtk-menu-images
setting and always show the image, if available.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the menu item will always show the image</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_image" c:identifier="gtk_image_menu_item_get_image">
        <doc xml:whitespace="preserve">Gets the widget that is currently set as the image of @image_menu_item.
See gtk_image_menu_item_set_image().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the widget set as image of @image_menu_item</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
      </method>
      <method name="get_use_stock"
              c:identifier="gtk_image_menu_item_get_use_stock"
              version="2.16">
        <doc xml:whitespace="preserve">Checks whether the label set in the menuitem is used as a
stock id to select the stock item for the item.
stock id to select the stock item for the item</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the label set in the menuitem is used as a</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="set_accel_group"
              c:identifier="gtk_image_menu_item_set_accel_group"
              version="2.16">
        <doc xml:whitespace="preserve">Specifies an @accel_group to add the menu items accelerator to
(this only applies to stock items so a stock item must already
be set, make sure to call gtk_image_menu_item_set_use_stock()
and gtk_menu_item_set_label() with a valid stock item first).
If you want this menu item to have changeable accelerators then
you shouldnt need this (see gtk_image_menu_item_new_from_stock()).</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="accel_group" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GtkAccelGroup</doc>
            <type name="AccelGroup" c:type="GtkAccelGroup*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_always_show_image"
              c:identifier="gtk_image_menu_item_set_always_show_image"
              version="2.16">
        <doc xml:whitespace="preserve">If %TRUE, the menu item will ignore the #GtkSettings:gtk-menu-images 
setting and always show the image, if available.
Use this property if the menuitem would be useless or hard to use
without the image.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="always_show" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE if the menuitem should always show the image</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_image" c:identifier="gtk_image_menu_item_set_image">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="image" transfer-ownership="none">
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_use_stock"
              c:identifier="gtk_image_menu_item_set_use_stock"
              version="2.16">
        <doc xml:whitespace="preserve">If %TRUE, the label set in the menuitem is used as a
stock id to select the stock item for the item.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="use_stock" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE if the menuitem should use a stock item</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="accel-group"
                version="2.16"
                readable="0"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The Accel Group to use for stock accelerator keys</doc>
        <type name="AccelGroup"/>
      </property>
      <property name="always-show-image"
                version="2.16"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">If %TRUE, the menu item will ignore the #GtkSettings:gtk-menu-images 
setting and always show the image, if available.
Use this property if the menuitem would be useless or hard to use
without the image.</doc>
        <type name="gboolean"/>
      </property>
      <property name="image" writable="1" transfer-ownership="none">
        <type name="Widget"/>
      </property>
      <property name="use-stock"
                version="2.16"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">If %TRUE, the label set in the menuitem is used as a
stock id to select the stock item for the item.</doc>
        <type name="gboolean"/>
      </property>
      <field name="menu_item">
        <type name="MenuItem" c:type="GtkMenuItem"/>
      </field>
      <field name="priv">
        <type name="ImageMenuItemPrivate" c:type="GtkImageMenuItemPrivate*"/>
      </field>
    </class>
    <record name="ImageMenuItemClass"
            c:type="GtkImageMenuItemClass"
            glib:is-gtype-struct-for="ImageMenuItem">
      <field name="parent_class">
        <type name="MenuItemClass" c:type="GtkMenuItemClass"/>
      </field>
    </record>
    <record name="ImageMenuItemPrivate"
            c:type="GtkImageMenuItemPrivate"
            disguised="1">
    </record>
    <record name="ImagePixbufData" c:type="GtkImagePixbufData">
      <field name="pixbuf" writable="1">
        <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
      </field>
    </record>
    <record name="ImagePixmapData" c:type="GtkImagePixmapData">
      <field name="pixmap" writable="1">
        <type name="Gdk.Pixmap" c:type="GdkPixmap*"/>
      </field>
    </record>
    <record name="ImagePrivate" c:type="GtkImagePrivate" disguised="1">
    </record>
    <record name="ImageStockData" c:type="GtkImageStockData">
      <field name="stock_id" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
    </record>
    <enumeration name="ImageType"
                 glib:type-name="GtkImageType"
                 glib:get-type="gtk_image_type_get_type"
                 c:type="GtkImageType">
      <doc xml:whitespace="preserve">Describes the image data representation used by a #GtkImage. If you
want to get the image from the widget, you can only get the
currently-stored representation. e.g.  if the
gtk_image_get_storage_type() returns #GTK_IMAGE_PIXBUF, then you can
call gtk_image_get_pixbuf() but not gtk_image_get_stock().  For empty
images, you can request any storage type (call any of the "get"
functions), but they will all return %NULL values.</doc>
      <member name="empty"
              value="0"
              c:identifier="GTK_IMAGE_EMPTY"
              glib:nick="empty"/>
      <member name="pixmap"
              value="1"
              c:identifier="GTK_IMAGE_PIXMAP"
              glib:nick="pixmap"/>
      <member name="pixbuf"
              value="2"
              c:identifier="GTK_IMAGE_PIXBUF"
              glib:nick="pixbuf"/>
      <member name="stock"
              value="3"
              c:identifier="GTK_IMAGE_STOCK"
              glib:nick="stock"/>
      <member name="icon_set"
              value="4"
              c:identifier="GTK_IMAGE_ICON_SET"
              glib:nick="icon-set"/>
      <member name="animation"
              value="5"
              c:identifier="GTK_IMAGE_ANIMATION"
              glib:nick="animation"/>
      <member name="icon_name"
              value="6"
              c:identifier="GTK_IMAGE_ICON_NAME"
              glib:nick="icon-name"/>
      <member name="gicon"
              value="7"
              c:identifier="GTK_IMAGE_GICON"
              glib:nick="gicon"/>
    </enumeration>
    <class name="InfoBar"
           c:symbol-prefix="info_bar"
           c:type="GtkInfoBar"
           parent="HBox"
           glib:type-name="GtkInfoBar"
           glib:get-type="gtk_info_bar_get_type"
           glib:type-struct="InfoBarClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Buildable"/>
      <implements name="Orientable"/>
      <implements name="SizeRequest"/>
      <constructor name="new" c:identifier="gtk_info_bar_new" version="2.18">
        <doc xml:whitespace="preserve">Creates a new #GtkInfoBar object.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a new #GtkInfoBar object</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <constructor name="new_with_buttons"
                   c:identifier="gtk_info_bar_new_with_buttons"
                   introspectable="0">
        <doc xml:whitespace="preserve">Creates a new #GtkInfoBar with buttons. Button text/response ID
pairs should be listed, with a %NULL pointer ending the list.
Button text can be either a stock ID such as %GTK_STOCK_OK, or
some arbitrary text. A response ID can be any positive number,
or one of the values in the #GtkResponseType enumeration. If the
user clicks one of these dialog buttons, GtkInfoBar will emit
the "response" signal with the corresponding response ID.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a new #GtkInfoBar</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="first_button_text"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">stock ID or text to go in first button, or %NULL</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter transfer-ownership="none">
            <varargs>
            </varargs>
          </parameter>
        </parameters>
      </constructor>
      <method name="add_action_widget"
              c:identifier="gtk_info_bar_add_action_widget"
              version="2.18">
        <doc xml:whitespace="preserve">Add an activatable widget to the action area of a #GtkInfoBar,
connecting a signal handler that will emit the #GtkInfoBar::response
signal on the message area when the widget is activated. The widget
is appended to the end of the message areas action area.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="child" transfer-ownership="none">
            <doc xml:whitespace="preserve">an activatable widget</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="response_id" transfer-ownership="none">
            <doc xml:whitespace="preserve">response ID for @child</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_button"
              c:identifier="gtk_info_bar_add_button"
              version="2.18">
        <doc xml:whitespace="preserve">Adds a button with the given text (or a stock button, if button_text
is a stock ID) and sets things up so that clicking the button will emit
the "response" signal with the given response_id. The button is appended
to the end of the info bars's action area. The button widget is
returned, but usually you don't need it.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the button widget that was added</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="button_text" transfer-ownership="none">
            <doc xml:whitespace="preserve">text of button, or stock ID</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="response_id" transfer-ownership="none">
            <doc xml:whitespace="preserve">response ID for the button</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_buttons"
              c:identifier="gtk_info_bar_add_buttons"
              version="2.18"
              introspectable="0">
        <doc xml:whitespace="preserve">Adds more buttons, same as calling gtk_info_bar_add_button()
repeatedly. The variable argument list should be %NULL-terminated
as with gtk_info_bar_new_with_buttons(). Each button must have both
text and response ID.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="first_button_text" transfer-ownership="none">
            <doc xml:whitespace="preserve">button text or stock ID</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter transfer-ownership="none">
            <varargs>
            </varargs>
          </parameter>
        </parameters>
      </method>
      <method name="get_action_area"
              c:identifier="gtk_info_bar_get_action_area"
              version="2.18">
        <doc xml:whitespace="preserve">Returns the action area of @info_bar.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the action area</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
      </method>
      <method name="get_content_area"
              c:identifier="gtk_info_bar_get_content_area"
              version="2.18">
        <doc xml:whitespace="preserve">Returns the content area of @info_bar.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the content area</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
      </method>
      <method name="get_message_type"
              c:identifier="gtk_info_bar_get_message_type"
              version="2.18">
        <doc xml:whitespace="preserve">Returns the message type of the message area.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the message type of the message area.</doc>
          <type name="MessageType" c:type="GtkMessageType"/>
        </return-value>
      </method>
      <method name="response"
              c:identifier="gtk_info_bar_response"
              version="2.18">
        <doc xml:whitespace="preserve">Emits the 'response' signal with the given @response_id.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="response_id" transfer-ownership="none">
            <doc xml:whitespace="preserve">a response ID</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_default_response"
              c:identifier="gtk_info_bar_set_default_response"
              version="2.18">
        <doc xml:whitespace="preserve">Sets the last widget in the info bar's action area with
the given response_id as the default widget for the dialog.
Pressing "Enter" normally activates the default widget.
Note that this function currently requires @info_bar to
be added to a widget hierarchy.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="response_id" transfer-ownership="none">
            <doc xml:whitespace="preserve">a response ID</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_message_type"
              c:identifier="gtk_info_bar_set_message_type"
              version="2.18">
        <doc xml:whitespace="preserve">Sets the message type of the message area.
GTK+ uses this type to determine what color to use
when drawing the message area.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="message_type" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkMessageType</doc>
            <type name="MessageType" c:type="GtkMessageType"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_response_sensitive"
              c:identifier="gtk_info_bar_set_response_sensitive"
              version="2.18">
        <doc xml:whitespace="preserve">Calls gtk_widget_set_sensitive (widget, setting) for each
widget in the info bars's action area with the given response_id.
A convenient way to sensitize/desensitize dialog buttons.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="response_id" transfer-ownership="none">
            <doc xml:whitespace="preserve">a response ID</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="setting" transfer-ownership="none">
            <doc xml:whitespace="preserve">TRUE for sensitive</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="message-type"
                version="2.18"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The type of the message.
The type is used to determine the colors to use in the info bar.
The following symbolic color names can by used to customize
these colors:
"info_fg_color", "info_bg_color",
"warning_fg_color", "warning_bg_color",
"question_fg_color", "question_bg_color",
"error_fg_color", "error_bg_color".
"other_fg_color", "other_bg_color".
If the type is #GTK_MESSAGE_OTHER, no info bar is painted but the
colors are still set.</doc>
        <type name="MessageType"/>
      </property>
      <field name="parent">
        <type name="HBox" c:type="GtkHBox"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="InfoBarPrivate" c:type="GtkInfoBarPrivate*"/>
      </field>
      <glib:signal name="close" version="2.18">
        <doc xml:whitespace="preserve">The ::close signal is a
&lt;link linkend="keybinding-signals"&gt;keybinding signal&lt;/link&gt;
which gets emitted when the user uses a keybinding to dismiss
the info bar.
The default binding for this signal is the Escape key.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
      <glib:signal name="response" version="2.18">
        <doc xml:whitespace="preserve">Emitted when an action widget is clicked or the application programmer
calls gtk_dialog_response(). The @response_id depends on which action
widget was clicked.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the response ID</doc>
            <type name="gint"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="InfoBarClass"
            c:type="GtkInfoBarClass"
            glib:is-gtype-struct-for="InfoBar">
      <field name="parent_class">
        <type name="HBoxClass" c:type="GtkHBoxClass"/>
      </field>
      <field name="response">
        <callback name="response">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="info_bar" transfer-ownership="none">
              <type name="InfoBar" c:type="GtkInfoBar*"/>
            </parameter>
            <parameter name="response_id" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="close">
        <callback name="close">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="info_bar" transfer-ownership="none">
              <type name="InfoBar" c:type="GtkInfoBar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_gtk_reserved1" introspectable="0">
        <callback name="_gtk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved2" introspectable="0">
        <callback name="_gtk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved3" introspectable="0">
        <callback name="_gtk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved4" introspectable="0">
        <callback name="_gtk_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved5" introspectable="0">
        <callback name="_gtk_reserved5">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved6" introspectable="0">
        <callback name="_gtk_reserved6">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="InfoBarPrivate" c:type="GtkInfoBarPrivate" disguised="1">
    </record>
    <class name="Invisible"
           c:symbol-prefix="invisible"
           c:type="GtkInvisible"
           parent="Widget"
           glib:type-name="GtkInvisible"
           glib:get-type="gtk_invisible_get_type"
           glib:type-struct="InvisibleClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Buildable"/>
      <implements name="SizeRequest"/>
      <constructor name="new" c:identifier="gtk_invisible_new">
        <doc xml:whitespace="preserve">Creates a new #GtkInvisible.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a new #GtkInvisible.</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <constructor name="new_for_screen"
                   c:identifier="gtk_invisible_new_for_screen"
                   version="2.2">
        <doc xml:whitespace="preserve">Creates a new #GtkInvisible object for a specified screen</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a newly created #GtkInvisible object</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="screen" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GdkScreen which identifies on which the new #GtkInvisible will be created.</doc>
            <type name="Gdk.Screen" c:type="GdkScreen*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_screen"
              c:identifier="gtk_invisible_get_screen"
              version="2.2">
        <doc xml:whitespace="preserve">Returns the #GdkScreen object associated with @invisible</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the associated #GdkScreen.</doc>
          <type name="Gdk.Screen" c:type="GdkScreen*"/>
        </return-value>
      </method>
      <method name="set_screen"
              c:identifier="gtk_invisible_set_screen"
              version="2.2">
        <doc xml:whitespace="preserve">Sets the #GdkScreen where the #GtkInvisible object will be displayed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="screen" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GdkScreen.</doc>
            <type name="Gdk.Screen" c:type="GdkScreen*"/>
          </parameter>
        </parameters>
      </method>
      <property name="screen" writable="1" transfer-ownership="none">
        <type name="Gdk.Screen"/>
      </property>
      <field name="widget">
        <type name="Widget" c:type="GtkWidget"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="InvisiblePrivate" c:type="GtkInvisiblePrivate*"/>
      </field>
    </class>
    <record name="InvisibleClass"
            c:type="GtkInvisibleClass"
            glib:is-gtype-struct-for="Invisible">
      <field name="parent_class">
        <type name="WidgetClass" c:type="GtkWidgetClass"/>
      </field>
      <field name="_gtk_reserved1" introspectable="0">
        <callback name="_gtk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved2" introspectable="0">
        <callback name="_gtk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved3" introspectable="0">
        <callback name="_gtk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved4" introspectable="0">
        <callback name="_gtk_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="InvisiblePrivate" c:type="GtkInvisiblePrivate" disguised="1">
    </record>
    <enumeration name="Justification"
                 glib:type-name="GtkJustification"
                 glib:get-type="gtk_justification_get_type"
                 c:type="GtkJustification">
      <member name="left"
              value="0"
              c:identifier="GTK_JUSTIFY_LEFT"
              glib:nick="left"/>
      <member name="right"
              value="1"
              c:identifier="GTK_JUSTIFY_RIGHT"
              glib:nick="right"/>
      <member name="center"
              value="2"
              c:identifier="GTK_JUSTIFY_CENTER"
              glib:nick="center"/>
      <member name="fill"
              value="3"
              c:identifier="GTK_JUSTIFY_FILL"
              glib:nick="fill"/>
    </enumeration>
    <callback name="KeySnoopFunc" c:type="GtkKeySnoopFunc">
      <return-value transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="grab_widget" transfer-ownership="none">
          <type name="Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="event" transfer-ownership="none">
          <type name="Gdk.EventKey" c:type="GdkEventKey*"/>
        </parameter>
        <parameter name="func_data" transfer-ownership="none">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <class name="Label"
           c:symbol-prefix="label"
           c:type="GtkLabel"
           parent="Misc"
           glib:type-name="GtkLabel"
           glib:get-type="gtk_label_get_type"
           glib:type-struct="LabelClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Buildable"/>
      <implements name="SizeRequest"/>
      <constructor name="new" c:identifier="gtk_label_new">
        <doc xml:whitespace="preserve">Creates a new label with the given text inside it. You can
pass %NULL to get an empty label widget.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the new #GtkLabel</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="str" transfer-ownership="none">
            <doc xml:whitespace="preserve">The text of the label</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_with_mnemonic"
                   c:identifier="gtk_label_new_with_mnemonic">
        <doc xml:whitespace="preserve">Creates a new #GtkLabel, containing the text in @str.
If characters in @str are preceded by an underscore, they are
underlined. If you need a literal underscore character in a label, use
'__' (two underscores). The first underlined character represents a 
keyboard accelerator called a mnemonic. The mnemonic key can be used 
to activate another widget, chosen automatically, or explicitly using
gtk_label_set_mnemonic_widget().
If gtk_label_set_mnemonic_widget() is not called, then the first 
activatable ancestor of the #GtkLabel will be chosen as the mnemonic 
widget. For instance, if the label is inside a button or menu item, 
the button or menu item will automatically become the mnemonic widget 
and be activated by the mnemonic.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the new #GtkLabel</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="str" transfer-ownership="none">
            <doc xml:whitespace="preserve">The text of the label, with an underscore in front of the mnemonic character</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_angle"
              c:identifier="gtk_label_get_angle"
              version="2.6">
        <doc xml:whitespace="preserve">Gets the angle of rotation for the label. See
gtk_label_set_angle().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the angle of rotation for the label</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </method>
      <method name="get_attributes" c:identifier="gtk_label_get_attributes">
        <doc xml:whitespace="preserve">Gets the attribute list that was set on the label using
gtk_label_set_attributes(), if any. This function does
not reflect attributes that come from the labels markup
(see gtk_label_set_markup()). If you want to get the
effective attributes for the label, use
pango_layout_get_attribute (gtk_label_get_layout (label)).</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the attribute list, or %NULL if none was set.</doc>
          <type name="Pango.AttrList" c:type="PangoAttrList*"/>
        </return-value>
      </method>
      <method name="get_current_uri"
              c:identifier="gtk_label_get_current_uri"
              version="2.18">
        <doc xml:whitespace="preserve">Returns the URI for the currently active link in the label.
The active link is the one under the mouse pointer or, in a
selectable label, the link in which the text cursor is currently
positioned.
This function is intended for use in a #GtkLabel::activate-link handler
or for use in a #GtkWidget::query-tooltip handler.
not be freed or modified.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the currently active URI. The string is owned by GTK+ and must</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_ellipsize"
              c:identifier="gtk_label_get_ellipsize"
              version="2.6">
        <doc xml:whitespace="preserve">Returns the ellipsizing position of the label. See gtk_label_set_ellipsize().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">#PangoEllipsizeMode</doc>
          <type name="Pango.EllipsizeMode" c:type="PangoEllipsizeMode"/>
        </return-value>
      </method>
      <method name="get_justify" c:identifier="gtk_label_get_justify">
        <doc xml:whitespace="preserve">Returns the justification of the label. See gtk_label_set_justify().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">#GtkJustification</doc>
          <type name="Justification" c:type="GtkJustification"/>
        </return-value>
      </method>
      <method name="get_label" c:identifier="gtk_label_get_label">
        <doc xml:whitespace="preserve">Fetches the text from a label widget including any embedded
underlines indicating mnemonics and Pango markup. (See
gtk_label_get_text()).
owned by the widget and must not be modified or freed.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the text of the label widget. This string is</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_layout" c:identifier="gtk_label_get_layout">
        <doc xml:whitespace="preserve">Gets the #PangoLayout used to display the label.
The layout is useful to e.g. convert text positions to
pixel positions, in combination with gtk_label_get_layout_offsets().
The returned layout is owned by the label so need not be
freed by the caller.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the #PangoLayout for this label</doc>
          <type name="Pango.Layout" c:type="PangoLayout*"/>
        </return-value>
      </method>
      <method name="get_layout_offsets"
              c:identifier="gtk_label_get_layout_offsets">
        <doc xml:whitespace="preserve">Obtains the coordinates where the label will draw the #PangoLayout
representing the text in the label; useful to convert mouse events
into coordinates inside the #PangoLayout, e.g. to take some action
if some part of the label is clicked. Of course you will need to
create a #GtkEventBox to receive the events, and pack the label
inside it, since labels are a #GTK_NO_WINDOW widget. Remember
when using the #PangoLayout functions you need to convert to
and from pixels using PANGO_PIXELS() or #PANGO_SCALE.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="x" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">location to store X offset of layout, or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="y" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">location to store Y offset of layout, or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_line_wrap" c:identifier="gtk_label_get_line_wrap">
        <doc xml:whitespace="preserve">Returns whether lines in the label are automatically wrapped. 
See gtk_label_set_line_wrap().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the lines of the label are automatically wrapped.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_line_wrap_mode"
              c:identifier="gtk_label_get_line_wrap_mode"
              version="2.10">
        <doc xml:whitespace="preserve">Returns line wrap mode used by the label. See gtk_label_set_line_wrap_mode().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the lines of the label are automatically wrapped.</doc>
          <type name="Pango.WrapMode" c:type="PangoWrapMode"/>
        </return-value>
      </method>
      <method name="get_max_width_chars"
              c:identifier="gtk_label_get_max_width_chars"
              version="2.6">
        <doc xml:whitespace="preserve">Retrieves the desired maximum width of @label, in characters. See
gtk_label_set_width_chars().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the maximum width of the label in characters.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="get_mnemonic_keyval"
              c:identifier="gtk_label_get_mnemonic_keyval">
        <doc xml:whitespace="preserve">If the label has been set so that it has an mnemonic key this function
returns the keyval used for the mnemonic accelerator. If there is no
mnemonic set up it returns #GDK_VoidSymbol.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">GDK keyval usable for accelerators, or #GDK_VoidSymbol</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
      </method>
      <method name="get_mnemonic_widget"
              c:identifier="gtk_label_get_mnemonic_widget">
        <doc xml:whitespace="preserve">Retrieves the target of the mnemonic (keyboard shortcut) of this
label. See gtk_label_set_mnemonic_widget().
or %NULL if none has been set and the default algorithm will be used.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the target of the label's mnemonic,</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
      </method>
      <method name="get_selectable" c:identifier="gtk_label_get_selectable">
        <doc xml:whitespace="preserve">Gets the value set by gtk_label_set_selectable().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the user can copy text from the label</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_selection_bounds"
              c:identifier="gtk_label_get_selection_bounds">
        <doc xml:whitespace="preserve">Gets the selected range of characters in the label, returning %TRUE
if there's a selection.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if selection is non-empty</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="start" transfer-ownership="none">
            <doc xml:whitespace="preserve">return location for start of selection, as a character offset</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="end" transfer-ownership="none">
            <doc xml:whitespace="preserve">return location for end of selection, as a character offset</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_single_line_mode"
              c:identifier="gtk_label_get_single_line_mode"
              version="2.6">
        <doc xml:whitespace="preserve">Returns whether the label is in single line mode.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE when the label is in single line mode.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_text" c:identifier="gtk_label_get_text">
        <doc xml:whitespace="preserve">Fetches the text from a label widget, as displayed on the
screen. This does not include any embedded underlines
indicating mnemonics or Pango markup. (See gtk_label_get_label())
string used by the label, and must not be modified.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the text in the label widget. This is the internal</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_track_visited_links"
              c:identifier="gtk_label_get_track_visited_links"
              version="2.18">
        <doc xml:whitespace="preserve">Returns whether the label is currently keeping track
of clicked links.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if clicked links are remembered</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_use_markup" c:identifier="gtk_label_get_use_markup">
        <doc xml:whitespace="preserve">Returns whether the label's text is interpreted as marked up with
the &lt;link linkend="PangoMarkupFormat"&gt;Pango text markup
language&lt;/link&gt;. See gtk_label_set_use_markup ().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the label's text will be parsed for markup.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_use_underline"
              c:identifier="gtk_label_get_use_underline">
        <doc xml:whitespace="preserve">Returns whether an embedded underline in the label indicates a
mnemonic. See gtk_label_set_use_underline().
the mnemonic accelerator keys.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE whether an embedded underline in the label indicates</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_width_chars"
              c:identifier="gtk_label_get_width_chars"
              version="2.6">
        <doc xml:whitespace="preserve">Retrieves the desired width of @label, in characters. See
gtk_label_set_width_chars().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the width of the label in characters.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="select_region" c:identifier="gtk_label_select_region">
        <doc xml:whitespace="preserve">Selects a range of characters in the label, if the label is selectable.
See gtk_label_set_selectable(). If the label is not selectable,
this function has no effect. If @start_offset or</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="start_offset" transfer-ownership="none">
            <doc xml:whitespace="preserve">start offset (in characters not bytes)</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="end_offset" transfer-ownership="none">
            <doc xml:whitespace="preserve">end offset (in characters not bytes)</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_angle"
              c:identifier="gtk_label_set_angle"
              version="2.6">
        <doc xml:whitespace="preserve">Sets the angle of rotation for the label. An angle of 90 reads from
from bottom to top, an angle of 270, from top to bottom. The angle
setting for the label is ignored if the label is selectable,
wrapped, or ellipsized.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="angle" transfer-ownership="none">
            <doc xml:whitespace="preserve">the angle that the baseline of the label makes with the horizontal, in degrees, measured counterclockwise</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_attributes" c:identifier="gtk_label_set_attributes">
        <doc xml:whitespace="preserve">Sets a #PangoAttrList; the attributes in the list are applied to the
label text. 
&lt;note&gt;&lt;para&gt;The attributes set with this function will be applied
and merged with any other attributes previously effected by way
of the #GtkLabel:use-underline or #GtkLabel:use-markup properties.
While it is not recommended to mix markup strings with manually set
attributes, if you must; know that the attributes will be applied
to the label after the markup string is parsed.&lt;/para&gt;&lt;/note&gt;</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="attrs" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #PangoAttrList</doc>
            <type name="Pango.AttrList" c:type="PangoAttrList*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_ellipsize"
              c:identifier="gtk_label_set_ellipsize"
              version="2.6">
        <doc xml:whitespace="preserve">if there is not enough space to render the entire string.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="mode" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #PangoEllipsizeMode</doc>
            <type name="Pango.EllipsizeMode" c:type="PangoEllipsizeMode"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_justify" c:identifier="gtk_label_set_justify">
        <doc xml:whitespace="preserve">Sets the alignment of the lines in the text of the label relative to
each other. %GTK_JUSTIFY_LEFT is the default value when the
widget is first created with gtk_label_new(). If you instead want
to set the alignment of the label as a whole, use
gtk_misc_set_alignment() instead. gtk_label_set_justify() has no
effect on labels containing only a single line.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="jtype" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkJustification</doc>
            <type name="Justification" c:type="GtkJustification"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_label" c:identifier="gtk_label_set_label">
        <doc xml:whitespace="preserve">Sets the text of the label. The label is interpreted as
including embedded underlines and/or Pango markup depending
on the values of the #GtkLabel:use-underline" and
#GtkLabel:use-markup properties.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="str" transfer-ownership="none">
            <doc xml:whitespace="preserve">the new text to set for the label</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_line_wrap" c:identifier="gtk_label_set_line_wrap">
        <doc xml:whitespace="preserve">Toggles line wrapping within the #GtkLabel widget. %TRUE makes it break
lines if text exceeds the widget's size. %FALSE lets the text get cut off
by the edge of the widget if it exceeds the widget size.
Note that setting line wrapping to %TRUE does not make the label
wrap at its parent container's width, because GTK+ widgets
conceptually can't make their requisition depend on the parent
container's size. For a label that wraps at a specific position,
set the label's width using gtk_widget_set_size_request().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="wrap" transfer-ownership="none">
            <doc xml:whitespace="preserve">the setting</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_line_wrap_mode"
              c:identifier="gtk_label_set_line_wrap_mode"
              version="2.10">
        <doc xml:whitespace="preserve">If line wrapping is on (see gtk_label_set_line_wrap()) this controls how
the line wrapping is done. The default is %PANGO_WRAP_WORD which means
wrap on word boundaries.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="wrap_mode" transfer-ownership="none">
            <doc xml:whitespace="preserve">the line wrapping mode</doc>
            <type name="Pango.WrapMode" c:type="PangoWrapMode"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_markup" c:identifier="gtk_label_set_markup">
        <doc xml:whitespace="preserve">Parses @str which is marked up with the &lt;link
linkend="PangoMarkupFormat"&gt;Pango text markup language&lt;/link&gt;, setting the
label's text and attribute list based on the parse results. If the @str is
external data, you may need to escape it with g_markup_escape_text() or
g_markup_printf_escaped()&lt;!-- --&gt;:
|[
char *markup;
markup = g_markup_printf_escaped ("&amp;lt;span style=\"italic\"&amp;gt;&amp;percnt;s&amp;lt;/span&amp;gt;", str);
gtk_label_set_markup (GTK_LABEL (label), markup);
g_free (markup);
]|</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="str" transfer-ownership="none">
            <doc xml:whitespace="preserve">a markup string (see &lt;link linkend="PangoMarkupFormat"&gt;Pango markup format&lt;/link&gt;)</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_markup_with_mnemonic"
              c:identifier="gtk_label_set_markup_with_mnemonic">
        <doc xml:whitespace="preserve">Parses @str which is marked up with the &lt;link linkend="PangoMarkupFormat"&gt;Pango text markup language&lt;/link&gt;,
setting the label's text and attribute list based on the parse results.
If characters in @str are preceded by an underscore, they are underlined
indicating that they represent a keyboard accelerator called a mnemonic.
The mnemonic key can be used to activate another widget, chosen 
automatically, or explicitly using gtk_label_set_mnemonic_widget().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="str" transfer-ownership="none">
            <doc xml:whitespace="preserve">a markup string (see &lt;link linkend="PangoMarkupFormat"&gt;Pango markup format&lt;/link&gt;)</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_max_width_chars"
              c:identifier="gtk_label_set_max_width_chars"
              version="2.6">
        <doc xml:whitespace="preserve">Sets the desired maximum width in characters of @label to @n_chars.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="n_chars" transfer-ownership="none">
            <doc xml:whitespace="preserve">the new desired maximum width, in characters.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_mnemonic_widget"
              c:identifier="gtk_label_set_mnemonic_widget">
        <doc xml:whitespace="preserve">If the label has been set so that it has an mnemonic key (using
i.e. gtk_label_set_markup_with_mnemonic(),
gtk_label_set_text_with_mnemonic(), gtk_label_new_with_mnemonic()
or the "use_underline" property) the label can be associated with a
widget that is the target of the mnemonic. When the label is inside
a widget (like a #GtkButton or a #GtkNotebook tab) it is
automatically associated with the correct widget, but sometimes
(i.e. when the target is a #GtkEntry next to the label) you need to
set it explicitly using this function.
The target widget will be accelerated by emitting the 
GtkWidget::mnemonic-activate signal on it. The default handler for 
this signal will activate the widget if there are no mnemonic collisions 
and toggle focus between the colliding widgets otherwise.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="widget" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">the target #GtkWidget</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_pattern" c:identifier="gtk_label_set_pattern">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="pattern" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_selectable" c:identifier="gtk_label_set_selectable">
        <doc xml:whitespace="preserve">Selectable labels allow the user to select text from the label, for
copy-and-paste.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="setting" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE to allow selecting text in the label</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_single_line_mode"
              c:identifier="gtk_label_set_single_line_mode"
              version="2.6">
        <doc xml:whitespace="preserve">Sets whether the label is in single line mode.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="single_line_mode" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE if the label should be in single line mode</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_text" c:identifier="gtk_label_set_text">
        <doc xml:whitespace="preserve">Sets the text within the #GtkLabel widget. It overwrites any text that
was there before.  
This will also clear any previously set mnemonic accelerators.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="str" transfer-ownership="none">
            <doc xml:whitespace="preserve">The text you want to set</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_text_with_mnemonic"
              c:identifier="gtk_label_set_text_with_mnemonic">
        <doc xml:whitespace="preserve">Sets the label's text from the string @str.
If characters in @str are preceded by an underscore, they are underlined
indicating that they represent a keyboard accelerator called a mnemonic.
The mnemonic key can be used to activate another widget, chosen 
automatically, or explicitly using gtk_label_set_mnemonic_widget().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="str" transfer-ownership="none">
            <doc xml:whitespace="preserve">a string</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_track_visited_links"
              c:identifier="gtk_label_set_track_visited_links"
              version="2.18">
        <doc xml:whitespace="preserve">Sets whether the label should keep track of clicked
links (and use a different color for them).</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="track_links" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE to track visited links</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_use_markup" c:identifier="gtk_label_set_use_markup">
        <doc xml:whitespace="preserve">Sets whether the text of the label contains markup in &lt;link
linkend="PangoMarkupFormat"&gt;Pango's text markup
language&lt;/link&gt;. See gtk_label_set_markup().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="setting" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE if the label's text should be parsed for markup.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_use_underline"
              c:identifier="gtk_label_set_use_underline">
        <doc xml:whitespace="preserve">If true, an underline in the text indicates the next character should be
used for the mnemonic accelerator key.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="setting" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE if underlines in the text indicate mnemonics</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_width_chars"
              c:identifier="gtk_label_set_width_chars"
              version="2.6">
        <doc xml:whitespace="preserve">Sets the desired width in characters of @label to @n_chars.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="n_chars" transfer-ownership="none">
            <doc xml:whitespace="preserve">the new desired width, in characters.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <property name="angle"
                version="2.6"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The angle that the baseline of the label makes with the horizontal,
in degrees, measured counterclockwise. An angle of 90 reads from
from bottom to top, an angle of 270, from top to bottom. Ignored
if the label is selectable, wrapped, or ellipsized.</doc>
        <type name="gdouble"/>
      </property>
      <property name="attributes" writable="1" transfer-ownership="none">
        <type name="Pango.AttrList"/>
      </property>
      <property name="cursor-position" transfer-ownership="none">
        <type name="gint"/>
      </property>
      <property name="ellipsize"
                version="2.6"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The preferred place to ellipsize the string, if the label does 
not have enough room to display the entire string, specified as a 
#PangoEllisizeMode. 
Note that setting this property to a value other than 
%PANGO_ELLIPSIZE_NONE has the side-effect that the label requests 
only enough space to display the ellipsis "...". In particular, this 
means that ellipsizing labels do not work well in notebook tabs, unless 
the tab's #GtkNotebook:tab-expand property is set to %TRUE. Other ways
to set a label's width are gtk_widget_set_size_request() and
gtk_label_set_width_chars().</doc>
        <type name="Pango.EllipsizeMode"/>
      </property>
      <property name="justify" writable="1" transfer-ownership="none">
        <type name="Justification"/>
      </property>
      <property name="label" writable="1" transfer-ownership="none">
        <type name="utf8"/>
      </property>
      <property name="max-width-chars"
                version="2.6"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The desired maximum width of the label, in characters. If this property 
is set to -1, the width will be calculated automatically.
See the section on &lt;link linkend="label-text-layout"&gt;text layout&lt;/link&gt;
for details of how #GtkLabel:width-chars and #GtkLabel:max-width-chars
determine the width of ellipsized and wrapped labels.</doc>
        <type name="gint"/>
      </property>
      <property name="mnemonic-keyval" transfer-ownership="none">
        <type name="guint"/>
      </property>
      <property name="mnemonic-widget" writable="1" transfer-ownership="none">
        <type name="Widget"/>
      </property>
      <property name="pattern"
                readable="0"
                writable="1"
                transfer-ownership="none">
        <type name="utf8"/>
      </property>
      <property name="selectable" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="selection-bound" transfer-ownership="none">
        <type name="gint"/>
      </property>
      <property name="single-line-mode"
                version="2.6"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Whether the label is in single line mode. In single line mode,
the height of the label does not depend on the actual text, it
is always set to ascent + descent of the font. This can be an
advantage in situations where resizing the label because of text 
changes would be distracting, e.g. in a statusbar.</doc>
        <type name="gboolean"/>
      </property>
      <property name="track-visited-links"
                version="2.18"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Set this property to %TRUE to make the label track which links
have been clicked. It will then apply the ::visited-link-color
color, instead of ::link-color.</doc>
        <type name="gboolean"/>
      </property>
      <property name="use-markup" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="use-underline" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="width-chars"
                version="2.6"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The desired width of the label, in characters. If this property is set to
-1, the width will be calculated automatically.
See the section on &lt;link linkend="label-text-layout"&gt;text layout&lt;/link&gt;
for details of how #GtkLabel:width-chars and #GtkLabel:max-width-chars
determine the width of ellipsized and wrapped labels.</doc>
        <type name="gint"/>
      </property>
      <property name="wrap" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="wrap-mode"
                version="2.10"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">If line wrapping is on (see the #GtkLabel:wrap property) this controls 
how the line wrapping is done. The default is %PANGO_WRAP_WORD, which 
means wrap on word boundaries.</doc>
        <type name="Pango.WrapMode"/>
      </property>
      <field name="misc">
        <type name="Misc" c:type="GtkMisc"/>
      </field>
      <field name="priv">
        <type name="LabelPrivate" c:type="GtkLabelPrivate*"/>
      </field>
      <glib:signal name="activate-current-link" version="2.18">
        <doc xml:whitespace="preserve">A &lt;link linkend="keybinding-signals"&gt;keybinding signal&lt;/link&gt;
which gets emitted when the user activates a link in the label.
Applications may also emit the signal with g_signal_emit_by_name()
if they need to control activation of URIs programmatically.
The default bindings for this signal are all forms of the Enter key.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
      <glib:signal name="activate-link" version="2.18">
        <doc xml:whitespace="preserve">The signal which gets emitted to activate a URI.
Applications may connect to it to override the default behaviour,
which is to call gtk_show_uri().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the link has been activated</doc>
          <type name="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the URI that is activated</doc>
            <type name="utf8"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="copy-clipboard">
        <doc xml:whitespace="preserve">The ::copy-clipboard signal is a
&lt;link linkend="keybinding-signals"&gt;keybinding signal&lt;/link&gt;
which gets emitted to copy the selection to the clipboard.
The default binding for this signal is Ctrl-c.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
      <glib:signal name="move-cursor">
        <doc xml:whitespace="preserve">The ::move-cursor signal is a
&lt;link linkend="keybinding-signals"&gt;keybinding signal&lt;/link&gt;
which gets emitted when the user initiates a cursor movement.
If the cursor is not visible in @entry, this signal causes
the viewport to be moved instead.
Applications should not connect to it, but may emit it with
g_signal_emit_by_name() if they need to control the cursor
programmatically.
The default bindings for this signal come in two variants,
the variant with the Shift modifier extends the selection,
the variant without the Shift modifer does not.
There are too many key combinations to list them all here.
&lt;itemizedlist&gt;
&lt;listitem&gt;Arrow keys move by individual characters/lines&lt;/listitem&gt;
&lt;listitem&gt;Ctrl-arrow key combinations move by words/paragraphs&lt;/listitem&gt;
&lt;listitem&gt;Home/End keys move to the ends of the buffer&lt;/listitem&gt;
&lt;/itemizedlist&gt;</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the granularity of the move, as a #GtkMovementStep</doc>
            <type name="MovementStep"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <doc xml:whitespace="preserve">the number of @step units to move</doc>
            <type name="gint"/>
          </parameter>
          <parameter name="p1" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE if the move should extend the selection</doc>
            <type name="gboolean"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="populate-popup">
        <doc xml:whitespace="preserve">The ::populate-popup signal gets emitted before showing the
context menu of the label. Note that only selectable labels
have context menus.
If you need to add items to the context menu, connect
to this signal and append your menuitems to the @menu.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the menu that is being populated</doc>
            <type name="Menu"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="LabelClass"
            c:type="GtkLabelClass"
            glib:is-gtype-struct-for="Label">
      <field name="parent_class">
        <type name="MiscClass" c:type="GtkMiscClass"/>
      </field>
      <field name="move_cursor">
        <callback name="move_cursor">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="label" transfer-ownership="none">
              <type name="Label" c:type="GtkLabel*"/>
            </parameter>
            <parameter name="step" transfer-ownership="none">
              <type name="MovementStep" c:type="GtkMovementStep"/>
            </parameter>
            <parameter name="count" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="extend_selection" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="copy_clipboard">
        <callback name="copy_clipboard">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="label" transfer-ownership="none">
              <type name="Label" c:type="GtkLabel*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="populate_popup">
        <callback name="populate_popup">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="label" transfer-ownership="none">
              <type name="Label" c:type="GtkLabel*"/>
            </parameter>
            <parameter name="menu" transfer-ownership="none">
              <type name="Menu" c:type="GtkMenu*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="activate_link">
        <callback name="activate_link">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="label" transfer-ownership="none">
              <type name="Label" c:type="GtkLabel*"/>
            </parameter>
            <parameter name="uri" transfer-ownership="none">
              <type name="utf8" c:type="gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_gtk_reserved1" introspectable="0">
        <callback name="_gtk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved2" introspectable="0">
        <callback name="_gtk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved3" introspectable="0">
        <callback name="_gtk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="LabelPrivate" c:type="GtkLabelPrivate" disguised="1">
    </record>
    <record name="LabelSelectionInfo"
            c:type="GtkLabelSelectionInfo"
            disguised="1">
    </record>
    <class name="Layout"
           c:symbol-prefix="layout"
           c:type="GtkLayout"
           parent="Container"
           glib:type-name="GtkLayout"
           glib:get-type="gtk_layout_get_type"
           glib:type-struct="LayoutClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Buildable"/>
      <implements name="SizeRequest"/>
      <constructor name="new" c:identifier="gtk_layout_new">
        <doc xml:whitespace="preserve">Creates a new #GtkLayout. Unless you have a specific adjustment
you'd like the layout to use for scrolling, pass %NULL for</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a new #GtkLayout</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="hadjustment"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">horizontal scroll adjustment, or %NULL</doc>
            <type name="Adjustment" c:type="GtkAdjustment*"/>
          </parameter>
          <parameter name="vadjustment"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">vertical scroll adjustment, or %NULL</doc>
            <type name="Adjustment" c:type="GtkAdjustment*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_bin_window"
              c:identifier="gtk_layout_get_bin_window"
              version="2.14">
        <doc xml:whitespace="preserve">Retrieve the bin window of the layout used for drawing operations.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GdkWindow</doc>
          <type name="Gdk.Window" c:type="GdkWindow*"/>
        </return-value>
      </method>
      <method name="get_hadjustment" c:identifier="gtk_layout_get_hadjustment">
        <doc xml:whitespace="preserve">This function should only be called after the layout has been
placed in a #GtkScrolledWindow or otherwise configured for
scrolling. It returns the #GtkAdjustment used for communication
between the horizontal scrollbar and @layout.
See #GtkScrolledWindow, #GtkScrollbar, #GtkAdjustment for details.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">horizontal scroll adjustment</doc>
          <type name="Adjustment" c:type="GtkAdjustment*"/>
        </return-value>
      </method>
      <method name="get_size" c:identifier="gtk_layout_get_size">
        <doc xml:whitespace="preserve">Gets the size that has been set on the layout, and that determines
the total extents of the layout's scrollbar area. See
gtk_layout_set_size ().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="width" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">location to store the width set on @layout, or %NULL</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
          <parameter name="height" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">location to store the height set on @layout, or %NULL</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_vadjustment" c:identifier="gtk_layout_get_vadjustment">
        <doc xml:whitespace="preserve">This function should only be called after the layout has been
placed in a #GtkScrolledWindow or otherwise configured for
scrolling. It returns the #GtkAdjustment used for communication
between the vertical scrollbar and @layout.
See #GtkScrolledWindow, #GtkScrollbar, #GtkAdjustment for details.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">vertical scroll adjustment</doc>
          <type name="Adjustment" c:type="GtkAdjustment*"/>
        </return-value>
      </method>
      <method name="move" c:identifier="gtk_layout_move">
        <doc xml:whitespace="preserve">Moves a current child of @layout to a new position.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="child_widget" transfer-ownership="none">
            <doc xml:whitespace="preserve">a current child of @layout</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:whitespace="preserve">X position to move to</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:whitespace="preserve">Y position to move to</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="put" c:identifier="gtk_layout_put">
        <doc xml:whitespace="preserve">Adds @child_widget to @layout, at position (@x,@y).</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="child_widget" transfer-ownership="none">
            <doc xml:whitespace="preserve">child widget</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:whitespace="preserve">X position of child widget</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:whitespace="preserve">Y position of child widget</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_hadjustment" c:identifier="gtk_layout_set_hadjustment">
        <doc xml:whitespace="preserve">Sets the horizontal scroll adjustment for the layout.
See #GtkScrolledWindow, #GtkScrollbar, #GtkAdjustment for details.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="adjustment"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">new scroll adjustment</doc>
            <type name="Adjustment" c:type="GtkAdjustment*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_size" c:identifier="gtk_layout_set_size">
        <doc xml:whitespace="preserve">Sets the size of the scrollable area of the layout.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="width" transfer-ownership="none">
            <doc xml:whitespace="preserve">width of entire scrollable area</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:whitespace="preserve">height of entire scrollable area</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_vadjustment" c:identifier="gtk_layout_set_vadjustment">
        <doc xml:whitespace="preserve">Sets the vertical scroll adjustment for the layout.
See #GtkScrolledWindow, #GtkScrollbar, #GtkAdjustment for details.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="adjustment"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">new scroll adjustment</doc>
            <type name="Adjustment" c:type="GtkAdjustment*"/>
          </parameter>
        </parameters>
      </method>
      <property name="hadjustment" writable="1" transfer-ownership="none">
        <type name="Adjustment"/>
      </property>
      <property name="height" writable="1" transfer-ownership="none">
        <type name="guint"/>
      </property>
      <property name="vadjustment" writable="1" transfer-ownership="none">
        <type name="Adjustment"/>
      </property>
      <property name="width" writable="1" transfer-ownership="none">
        <type name="guint"/>
      </property>
      <field name="container">
        <type name="Container" c:type="GtkContainer"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="LayoutPrivate" c:type="GtkLayoutPrivate*"/>
      </field>
      <glib:signal name="set-scroll-adjustments">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Adjustment"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="Adjustment"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="LayoutClass"
            c:type="GtkLayoutClass"
            glib:is-gtype-struct-for="Layout">
      <field name="parent_class">
        <type name="ContainerClass" c:type="GtkContainerClass"/>
      </field>
      <field name="set_scroll_adjustments">
        <callback name="set_scroll_adjustments">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="layout" transfer-ownership="none">
              <type name="Layout" c:type="GtkLayout*"/>
            </parameter>
            <parameter name="hadjustment" transfer-ownership="none">
              <type name="Adjustment" c:type="GtkAdjustment*"/>
            </parameter>
            <parameter name="vadjustment" transfer-ownership="none">
              <type name="Adjustment" c:type="GtkAdjustment*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_gtk_reserved1" introspectable="0">
        <callback name="_gtk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved2" introspectable="0">
        <callback name="_gtk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved3" introspectable="0">
        <callback name="_gtk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved4" introspectable="0">
        <callback name="_gtk_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="LayoutPrivate" c:type="GtkLayoutPrivate" disguised="1">
    </record>
    <enumeration name="License"
                 version="3.0"
                 glib:type-name="GtkLicense"
                 glib:get-type="gtk_license_get_type"
                 c:type="GtkLicense">
      <doc xml:whitespace="preserve">The type of license for an application.
This enumeration can be expanded at later date.</doc>
      <member name="unknown"
              value="0"
              c:identifier="GTK_LICENSE_UNKNOWN"
              glib:nick="unknown"/>
      <member name="custom"
              value="1"
              c:identifier="GTK_LICENSE_CUSTOM"
              glib:nick="custom"/>
      <member name="gpl_2_0"
              value="2"
              c:identifier="GTK_LICENSE_GPL_2_0"
              glib:nick="gpl-2-0"/>
      <member name="gpl_3_0"
              value="3"
              c:identifier="GTK_LICENSE_GPL_3_0"
              glib:nick="gpl-3-0"/>
      <member name="lgpl_2_1"
              value="4"
              c:identifier="GTK_LICENSE_LGPL_2_1"
              glib:nick="lgpl-2-1"/>
      <member name="lgpl_3_0"
              value="5"
              c:identifier="GTK_LICENSE_LGPL_3_0"
              glib:nick="lgpl-3-0"/>
      <member name="bsd"
              value="6"
              c:identifier="GTK_LICENSE_BSD"
              glib:nick="bsd"/>
      <member name="mit_x11"
              value="7"
              c:identifier="GTK_LICENSE_MIT_X11"
              glib:nick="mit-x11"/>
      <member name="artistic"
              value="8"
              c:identifier="GTK_LICENSE_ARTISTIC"
              glib:nick="artistic"/>
    </enumeration>
    <class name="LinkButton"
           c:symbol-prefix="link_button"
           c:type="GtkLinkButton"
           parent="Button"
           glib:type-name="GtkLinkButton"
           glib:get-type="gtk_link_button_get_type"
           glib:type-struct="LinkButtonClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Activatable"/>
      <implements name="Buildable"/>
      <implements name="SizeRequest"/>
      <constructor name="new"
                   c:identifier="gtk_link_button_new"
                   version="2.10">
        <doc xml:whitespace="preserve">Creates a new #GtkLinkButton with the URI as its text.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a new link button widget.</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:whitespace="preserve">a valid URI</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_with_label"
                   c:identifier="gtk_link_button_new_with_label"
                   version="2.10">
        <doc xml:whitespace="preserve">Creates a new #GtkLinkButton containing a label.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a new link button widget.</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:whitespace="preserve">a valid URI</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="label" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">the text of the button</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_uri"
              c:identifier="gtk_link_button_get_uri"
              version="2.10">
        <doc xml:whitespace="preserve">Retrieves the URI set using gtk_link_button_set_uri().
and should not be modified or freed.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a valid URI.  The returned string is owned by the link button</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_visited"
              c:identifier="gtk_link_button_get_visited"
              version="2.14">
        <doc xml:whitespace="preserve">Retrieves the 'visited' state of the URI where the #GtkLinkButton
points. The button becomes visited when it is clicked. If the URI
is changed on the button, the 'visited' state is unset again.
The state may also be changed using gtk_link_button_set_visited().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the link has been visited, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="set_uri"
              c:identifier="gtk_link_button_set_uri"
              version="2.10">
        <doc xml:whitespace="preserve">Sets @uri as the URI where the #GtkLinkButton points. As a side-effect
this unsets the 'visited' state of the button.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:whitespace="preserve">a valid URI</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_visited"
              c:identifier="gtk_link_button_set_visited"
              version="2.14">
        <doc xml:whitespace="preserve">Sets the 'visited' state of the URI where the #GtkLinkButton
points.  See gtk_link_button_get_visited() for more details.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="visited" transfer-ownership="none">
            <doc xml:whitespace="preserve">the new 'visited' state</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="uri" writable="1" transfer-ownership="none">
        <type name="utf8"/>
      </property>
      <property name="visited" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <field name="parent_instance">
        <type name="Button" c:type="GtkButton"/>
      </field>
      <field name="priv">
        <type name="LinkButtonPrivate" c:type="GtkLinkButtonPrivate*"/>
      </field>
    </class>
    <record name="LinkButtonClass"
            c:type="GtkLinkButtonClass"
            glib:is-gtype-struct-for="LinkButton">
      <field name="parent_class">
        <type name="ButtonClass" c:type="GtkButtonClass"/>
      </field>
      <field name="_gtk_padding1" introspectable="0">
        <callback name="_gtk_padding1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_padding2" introspectable="0">
        <callback name="_gtk_padding2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_padding3" introspectable="0">
        <callback name="_gtk_padding3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_padding4" introspectable="0">
        <callback name="_gtk_padding4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="LinkButtonPrivate"
            c:type="GtkLinkButtonPrivate"
            disguised="1">
    </record>
    <class name="ListStore"
           c:symbol-prefix="list_store"
           c:type="GtkListStore"
           parent="GObject.Object"
           glib:type-name="GtkListStore"
           glib:get-type="gtk_list_store_get_type"
           glib:type-struct="ListStoreClass">
      <implements name="Buildable"/>
      <implements name="TreeDragDest"/>
      <implements name="TreeDragSource"/>
      <implements name="TreeModel"/>
      <implements name="TreeSortable"/>
      <constructor name="new"
                   c:identifier="gtk_list_store_new"
                   introspectable="0">
        <doc xml:whitespace="preserve">Creates a new list store as with @n_columns columns each of the types passed
in.  Note that only types derived from standard GObject fundamental types 
are supported. 
As an example, &lt;literal&gt;gtk_tree_store_new (3, G_TYPE_INT, G_TYPE_STRING,
GDK_TYPE_PIXBUF);&lt;/literal&gt; will create a new #GtkListStore with three columns, of type
int, string and #GdkPixbuf respectively.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new #GtkListStore</doc>
          <type name="ListStore" c:type="GtkListStore*"/>
        </return-value>
        <parameters>
          <parameter name="n_columns" transfer-ownership="none">
            <doc xml:whitespace="preserve">number of columns in the list store</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter transfer-ownership="none">
            <varargs>
            </varargs>
          </parameter>
        </parameters>
      </constructor>
      <function name="newv" c:identifier="gtk_list_store_newv">
        <doc xml:whitespace="preserve">Non-vararg creation function.  Used primarily by language bindings.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a new #GtkListStore</doc>
          <type name="ListStore" c:type="GtkListStore*"/>
        </return-value>
        <parameters>
          <parameter name="n_columns" transfer-ownership="none">
            <doc xml:whitespace="preserve">number of columns in the list store</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="types" transfer-ownership="none">
            <doc xml:whitespace="preserve">an array of #GType types for the columns, from first to last</doc>
            <array length="0" c:type="GType*">
              <type name="GType"/>
            </array>
          </parameter>
        </parameters>
      </function>
      <method name="append" c:identifier="gtk_list_store_append">
        <doc xml:whitespace="preserve">Appends a new row to @list_store.  @iter will be changed to point to this new
row.  The row will be empty after this function is called.  To fill in
values, you need to call gtk_list_store_set() or gtk_list_store_set_value().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="iter"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:whitespace="preserve">An unset #GtkTreeIter to set to the appended row</doc>
            <type name="TreeIter" c:type="GtkTreeIter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="clear" c:identifier="gtk_list_store_clear">
        <doc xml:whitespace="preserve">Removes all rows from the list store.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="insert" c:identifier="gtk_list_store_insert">
        <doc xml:whitespace="preserve">Creates a new row at @position.  @iter will be changed to point to this new
row.  If @position is larger than the number of rows on the list, then the
new row will be appended to the list. The row will be empty after this
function is called.  To fill in values, you need to call 
gtk_list_store_set() or gtk_list_store_set_value().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="iter"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:whitespace="preserve">An unset #GtkTreeIter to set to the new row</doc>
            <type name="TreeIter" c:type="GtkTreeIter*"/>
          </parameter>
          <parameter name="position" transfer-ownership="none">
            <doc xml:whitespace="preserve">position to insert the new row</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="insert_after" c:identifier="gtk_list_store_insert_after">
        <doc xml:whitespace="preserve">Inserts a new row after @sibling. If @sibling is %NULL, then the row will be
prepended to the beginning of the list. @iter will be changed to point to
this new row. The row will be empty after this function is called. To fill
in values, you need to call gtk_list_store_set() or gtk_list_store_set_value().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="iter"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:whitespace="preserve">An unset #GtkTreeIter to set to the new row</doc>
            <type name="TreeIter" c:type="GtkTreeIter*"/>
          </parameter>
          <parameter name="sibling" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">A valid #GtkTreeIter, or %NULL</doc>
            <type name="TreeIter" c:type="GtkTreeIter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="insert_before" c:identifier="gtk_list_store_insert_before">
        <doc xml:whitespace="preserve">Inserts a new row before @sibling. If @sibling is %NULL, then the row will 
be appended to the end of the list. @iter will be changed to point to this 
new row. The row will be empty after this function is called. To fill in 
values, you need to call gtk_list_store_set() or gtk_list_store_set_value().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="iter"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:whitespace="preserve">An unset #GtkTreeIter to set to the new row</doc>
            <type name="TreeIter" c:type="GtkTreeIter*"/>
          </parameter>
          <parameter name="sibling" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">A valid #GtkTreeIter, or %NULL</doc>
            <type name="TreeIter" c:type="GtkTreeIter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="insert_with_values"
              c:identifier="gtk_list_store_insert_with_values"
              version="2.6"
              introspectable="0">
        <doc xml:whitespace="preserve">Creates a new row at @position.  @iter will be changed to point to this new
row.  If @position is larger than the number of rows on the list, then the
new row will be appended to the list. The row will be filled with the 
values given to this function. 
Calling
&lt;literal&gt;gtk_list_store_insert_with_values(list_store, iter, position...)&lt;/literal&gt; 
has the same effect as calling 
|[
gtk_list_store_insert (list_store, iter, position);
gtk_list_store_set (list_store, iter, ...);
]|
with the difference that the former will only emit a row_inserted signal,
while the latter will emit row_inserted, row_changed and, if the list store
is sorted, rows_reordered. Since emitting the rows_reordered signal
repeatedly can affect the performance of the program, 
gtk_list_store_insert_with_values() should generally be preferred when
inserting rows in a sorted list store.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="iter"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">An unset #GtkTreeIter to set to the new row, or %NULL.</doc>
            <type name="TreeIter" c:type="GtkTreeIter*"/>
          </parameter>
          <parameter name="position" transfer-ownership="none">
            <doc xml:whitespace="preserve">position to insert the new row</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter transfer-ownership="none">
            <varargs>
            </varargs>
          </parameter>
        </parameters>
      </method>
      <method name="insert_with_valuesv"
              c:identifier="gtk_list_store_insert_with_valuesv"
              version="2.6">
        <doc xml:whitespace="preserve">A variant of gtk_list_store_insert_with_values() which
takes the columns and values as two arrays, instead of
varargs. This function is mainly intended for 
language-bindings.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="iter"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">An unset #GtkTreeIter to set to the new row, or %NULL.</doc>
            <type name="TreeIter" c:type="GtkTreeIter*"/>
          </parameter>
          <parameter name="position" transfer-ownership="none">
            <doc xml:whitespace="preserve">position to insert the new row</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="columns" transfer-ownership="none">
            <doc xml:whitespace="preserve">an array of column numbers</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="values" transfer-ownership="none">
            <doc xml:whitespace="preserve">an array of GValues</doc>
            <type name="GObject.Value" c:type="GValue*"/>
          </parameter>
          <parameter name="n_values" transfer-ownership="none">
            <doc xml:whitespace="preserve">the length of the @columns and @values arrays</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="iter_is_valid"
              c:identifier="gtk_list_store_iter_is_valid"
              version="2.2">
        <doc xml:whitespace="preserve">&lt;warning&gt;This function is slow. Only use it for debugging and/or testing
purposes.&lt;/warning&gt;
Checks if the given iter is a valid iter for this #GtkListStore.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the iter is valid, %FALSE if the iter is invalid.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="iter" transfer-ownership="none">
            <doc xml:whitespace="preserve">A #GtkTreeIter.</doc>
            <type name="TreeIter" c:type="GtkTreeIter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="move_after"
              c:identifier="gtk_list_store_move_after"
              version="2.2">
        <doc xml:whitespace="preserve">Moves @iter in @store to the position after @position. Note that this
function only works with unsorted stores. If @position is %NULL, @iter
will be moved to the start of the list.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="iter" transfer-ownership="none">
            <doc xml:whitespace="preserve">A #GtkTreeIter.</doc>
            <type name="TreeIter" c:type="GtkTreeIter*"/>
          </parameter>
          <parameter name="position" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">A #GtkTreeIter or %NULL.</doc>
            <type name="TreeIter" c:type="GtkTreeIter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="move_before"
              c:identifier="gtk_list_store_move_before"
              version="2.2">
        <doc xml:whitespace="preserve">Moves @iter in @store to the position before @position. Note that this
function only works with unsorted stores. If @position is %NULL, @iter
will be moved to the end of the list.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="iter" transfer-ownership="none">
            <doc xml:whitespace="preserve">A #GtkTreeIter.</doc>
            <type name="TreeIter" c:type="GtkTreeIter*"/>
          </parameter>
          <parameter name="position" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">A #GtkTreeIter, or %NULL.</doc>
            <type name="TreeIter" c:type="GtkTreeIter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="prepend" c:identifier="gtk_list_store_prepend">
        <doc xml:whitespace="preserve">Prepends a new row to @list_store. @iter will be changed to point to this new
row. The row will be empty after this function is called. To fill in
values, you need to call gtk_list_store_set() or gtk_list_store_set_value().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="iter"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:whitespace="preserve">An unset #GtkTreeIter to set to the prepend row</doc>
            <type name="TreeIter" c:type="GtkTreeIter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove" c:identifier="gtk_list_store_remove">
        <doc xml:whitespace="preserve">Removes the given row from the list store.  After being removed, 
to the last row in @list_store.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if @iter is valid, %FALSE if not.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="iter" transfer-ownership="none">
            <doc xml:whitespace="preserve">A valid #GtkTreeIter</doc>
            <type name="TreeIter" c:type="GtkTreeIter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="reorder"
              c:identifier="gtk_list_store_reorder"
              version="2.2">
        <doc xml:whitespace="preserve">Reorders @store to follow the order indicated by @new_order. Note that
this function only works with unsorted stores.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="new_order" transfer-ownership="none">
            <doc xml:whitespace="preserve">an array of integers mapping the new position of each child to its old position before the re-ordering, i.e. @new_order&lt;literal&gt;[newpos] = oldpos&lt;/literal&gt;.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set" c:identifier="gtk_list_store_set" introspectable="0">
        <doc xml:whitespace="preserve">Sets the value of one or more cells in the row referenced by @iter.
The variable argument list should contain integer column numbers,
each column number followed by the value to be set.
The list is terminated by a -1. For example, to set column 0 with type
%G_TYPE_STRING to "Foo", you would write &lt;literal&gt;gtk_list_store_set (store, iter,
0, "Foo", -1)&lt;/literal&gt;.
The value will be referenced by the store if it is a %G_TYPE_OBJECT, and it
will be copied if it is a %G_TYPE_STRING or %G_TYPE_BOXED.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="iter" transfer-ownership="none">
            <doc xml:whitespace="preserve">row iterator</doc>
            <type name="TreeIter" c:type="GtkTreeIter*"/>
          </parameter>
          <parameter transfer-ownership="none">
            <varargs>
            </varargs>
          </parameter>
        </parameters>
      </method>
      <method name="set_column_types"
              c:identifier="gtk_list_store_set_column_types">
        <doc xml:whitespace="preserve">This function is meant primarily for #GObjects that inherit from #GtkListStore,
and should only be used when constructing a new #GtkListStore.  It will not
function after a row has been added, or a method on the #GtkTreeModel
interface is called.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="n_columns" transfer-ownership="none">
            <doc xml:whitespace="preserve">Number of columns for the list store</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="types" transfer-ownership="none">
            <doc xml:whitespace="preserve">An array length n of #GTypes</doc>
            <array length="0" c:type="GType*">
              <type name="GType"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="set_valist"
              c:identifier="gtk_list_store_set_valist"
              introspectable="0">
        <doc xml:whitespace="preserve">See gtk_list_store_set(); this version takes a va_list for use by language
bindings.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="iter" transfer-ownership="none">
            <doc xml:whitespace="preserve">A valid #GtkTreeIter for the row being modified</doc>
            <type name="TreeIter" c:type="GtkTreeIter*"/>
          </parameter>
          <parameter name="var_args" transfer-ownership="none">
            <doc xml:whitespace="preserve">va_list of column/value pairs</doc>
            <type name="va_list" c:type="va_list"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_value" c:identifier="gtk_list_store_set_value">
        <doc xml:whitespace="preserve">Sets the data in the cell specified by @iter and @column.
The type of @value must be convertible to the type of the
column.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="iter" transfer-ownership="none">
            <doc xml:whitespace="preserve">A valid #GtkTreeIter for the row being modified</doc>
            <type name="TreeIter" c:type="GtkTreeIter*"/>
          </parameter>
          <parameter name="column" transfer-ownership="none">
            <doc xml:whitespace="preserve">column number to modify</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:whitespace="preserve">new value for the cell</doc>
            <type name="GObject.Value" c:type="GValue*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_valuesv"
              c:identifier="gtk_list_store_set_valuesv"
              version="2.12">
        <doc xml:whitespace="preserve">A variant of gtk_list_store_set_valist() which
takes the columns and values as two arrays, instead of
varargs. This function is mainly intended for 
language-bindings and in case the number of columns to
change is not known until run-time.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="iter" transfer-ownership="none">
            <doc xml:whitespace="preserve">A valid #GtkTreeIter for the row being modified</doc>
            <type name="TreeIter" c:type="GtkTreeIter*"/>
          </parameter>
          <parameter name="columns" transfer-ownership="none">
            <doc xml:whitespace="preserve">an array of column numbers</doc>
            <array length="3" c:type="gint*">
              <type name="gint"/>
            </array>
          </parameter>
          <parameter name="values" transfer-ownership="none">
            <doc xml:whitespace="preserve">an array of GValues</doc>
            <array length="3" c:type="GValue*">
              <type name="GObject.Value"/>
            </array>
          </parameter>
          <parameter name="n_values" transfer-ownership="none">
            <doc xml:whitespace="preserve">the length of the @columns and @values arrays</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="swap" c:identifier="gtk_list_store_swap" version="2.2">
        <doc xml:whitespace="preserve">Swaps @a and @b in @store. Note that this function only works with
unsorted stores.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="a" transfer-ownership="none">
            <doc xml:whitespace="preserve">A #GtkTreeIter.</doc>
            <type name="TreeIter" c:type="GtkTreeIter*"/>
          </parameter>
          <parameter name="b" transfer-ownership="none">
            <doc xml:whitespace="preserve">Another #GtkTreeIter.</doc>
            <type name="TreeIter" c:type="GtkTreeIter*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="ListStorePrivate" c:type="GtkListStorePrivate*"/>
      </field>
    </class>
    <record name="ListStoreClass"
            c:type="GtkListStoreClass"
            glib:is-gtype-struct-for="ListStore">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="_gtk_reserved1" introspectable="0">
        <callback name="_gtk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved2" introspectable="0">
        <callback name="_gtk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved3" introspectable="0">
        <callback name="_gtk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved4" introspectable="0">
        <callback name="_gtk_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="ListStorePrivate" c:type="GtkListStorePrivate" disguised="1">
    </record>
    <constant name="MAJOR_VERSION" value="2">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="MAX_COMPOSE_LEN" value="7">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="MICRO_VERSION" value="8">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="MINOR_VERSION" value="90">
      <type name="gint" c:type="gint"/>
    </constant>
    <class name="Menu"
           c:symbol-prefix="menu"
           c:type="GtkMenu"
           parent="MenuShell"
           glib:type-name="GtkMenu"
           glib:get-type="gtk_menu_get_type"
           glib:type-struct="MenuClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Buildable"/>
      <implements name="SizeRequest"/>
      <constructor name="new" c:identifier="gtk_menu_new">
        <return-value transfer-ownership="none">
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <function name="get_for_attach_widget"
                c:identifier="gtk_menu_get_for_attach_widget"
                version="2.6">
        <doc xml:whitespace="preserve">Returns a list of the menus which are attached to this widget.
This list is owned by GTK+ and must not be modified.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the list of menus attached to his widget.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Widget"/>
          </type>
        </return-value>
        <parameters>
          <parameter name="widget" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkWidget</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </function>
      <method name="attach" c:identifier="gtk_menu_attach" version="2.4">
        <doc xml:whitespace="preserve">Adds a new #GtkMenuItem to a (table) menu. The number of 'cells' that
an item will occupy is specified by @left_attach, @right_attach,
rightmost, uppermost and lower column and row numbers of the table.
(Columns and rows are indexed from zero).
Note that this function is not related to gtk_menu_detach().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="child" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkMenuItem.</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="left_attach" transfer-ownership="none">
            <doc xml:whitespace="preserve">The column number to attach the left side of the item to.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="right_attach" transfer-ownership="none">
            <doc xml:whitespace="preserve">The column number to attach the right side of the item to.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="top_attach" transfer-ownership="none">
            <doc xml:whitespace="preserve">The row number to attach the top of the item to.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="bottom_attach" transfer-ownership="none">
            <doc xml:whitespace="preserve">The row number to attach the bottom of the item to.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="attach_to_widget"
              c:identifier="gtk_menu_attach_to_widget"
              introspectable="0">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="attach_widget" transfer-ownership="none">
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="detacher" transfer-ownership="none">
            <type name="MenuDetachFunc" c:type="GtkMenuDetachFunc"/>
          </parameter>
        </parameters>
      </method>
      <method name="detach" c:identifier="gtk_menu_detach">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="get_accel_group"
              c:identifier="gtk_menu_get_accel_group"
              introspectable="0">
        <return-value>
          <type name="AccelGroup" c:type="GtkAccelGroup*"/>
        </return-value>
      </method>
      <method name="get_accel_path" c:identifier="gtk_menu_get_accel_path">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_active"
              c:identifier="gtk_menu_get_active"
              introspectable="0">
        <return-value>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
      </method>
      <method name="get_attach_widget"
              c:identifier="gtk_menu_get_attach_widget"
              introspectable="0">
        <return-value>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
      </method>
      <method name="get_monitor"
              c:identifier="gtk_menu_get_monitor"
              version="2.14">
        <doc xml:whitespace="preserve">Retrieves the number of the monitor on which to show the menu.
be popped up or -1, if no monitor has been set</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the number of the monitor on which the menu should</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="get_reserve_toggle_size"
              c:identifier="gtk_menu_get_reserve_toggle_size"
              version="2.18">
        <doc xml:whitespace="preserve">Returns whether the menu reserves space for toggles and
icons, regardless of their actual presence.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">Whether the menu reserves toggle space</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_tearoff_state"
              c:identifier="gtk_menu_get_tearoff_state">
        <doc xml:whitespace="preserve">Returns whether the menu is torn off. See
gtk_menu_set_tearoff_state ().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the menu is currently torn off.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_title" c:identifier="gtk_menu_get_title">
        <doc xml:whitespace="preserve">Returns the title of the menu. See gtk_menu_set_title().
title set on it. This string is owned by the widget and should
not be modified or freed.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the title of the menu, or %NULL if the menu has no</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="popdown" c:identifier="gtk_menu_popdown">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="popup" c:identifier="gtk_menu_popup" introspectable="0">
        <doc xml:whitespace="preserve">Displays a menu and makes it available for selection.  Applications can use
this function to display context-sensitive menus, and will typically supply
%NULL for the @parent_menu_shell, @parent_menu_item, @func and @data 
parameters. The default menu positioning function will position the menu
at the current mouse cursor position.
The @button parameter should be the mouse button pressed to initiate
the menu popup. If the menu popup was initiated by something other than
a mouse button press, such as a mouse button release or a keypress,
The @activate_time parameter is used to conflict-resolve initiation of
concurrent requests for mouse/keyboard grab requests. To function
properly, this needs to be the time stamp of the user event (such as
a mouse click or key press) that caused the initiation of the popup.
Only if no such event is available, gtk_get_current_event_time() can
be used instead.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="parent_menu_shell"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">the menu shell containing the triggering menu item, or %NULL</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="parent_menu_item"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">the menu item whose activation triggered the popup, or %NULL</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="func"
                     transfer-ownership="none"
                     allow-none="1"
                     closure="3">
            <doc xml:whitespace="preserve">a user supplied function used to position the menu, or %NULL</doc>
            <type name="MenuPositionFunc" c:type="GtkMenuPositionFunc"/>
          </parameter>
          <parameter name="data" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">user supplied data to be passed to @func.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="button" transfer-ownership="none">
            <doc xml:whitespace="preserve">the mouse button which was pressed to initiate the event.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="activate_time" transfer-ownership="none">
            <doc xml:whitespace="preserve">the time at which the activation event occurred.</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="popup_for_device"
              c:identifier="gtk_menu_popup_for_device"
              version="3.0">
        <doc xml:whitespace="preserve">Displays a menu and makes it available for selection.
Applications can use this function to display context-sensitive menus,
and will typically supply %NULL for the @parent_menu_shell,
menu positioning function will position the menu at the current position
of @device (or its corresponding pointer).
The @button parameter should be the mouse button pressed to initiate
the menu popup. If the menu popup was initiated by something other than
a mouse button press, such as a mouse button release or a keypress,
The @activate_time parameter is used to conflict-resolve initiation of
concurrent requests for mouse/keyboard grab requests. To function
properly, this needs to be the time stamp of the user event (such as
a mouse click or key press) that caused the initiation of the popup.
Only if no such event is available, gtk_get_current_event_time() can
be used instead.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="device" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">a #GdkDevice</doc>
            <type name="Gdk.Device" c:type="GdkDevice*"/>
          </parameter>
          <parameter name="parent_menu_shell"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">the menu shell containing the triggering menu item, or %NULL</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="parent_menu_item"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">the menu item whose activation triggered the popup, or %NULL</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="func"
                     transfer-ownership="none"
                     allow-none="1"
                     scope="notified"
                     closure="4"
                     destroy="5">
            <doc xml:whitespace="preserve">a user supplied function used to position the menu, or %NULL</doc>
            <type name="MenuPositionFunc" c:type="GtkMenuPositionFunc"/>
          </parameter>
          <parameter name="data" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">user supplied data to be passed to @func</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="destroy"
                     transfer-ownership="none"
                     allow-none="1"
                     scope="async">
            <doc xml:whitespace="preserve">destroy notify for @data</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
          <parameter name="button" transfer-ownership="none">
            <doc xml:whitespace="preserve">the mouse button which was pressed to initiate the event</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="activate_time" transfer-ownership="none">
            <doc xml:whitespace="preserve">the time at which the activation event occurred</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="reorder_child" c:identifier="gtk_menu_reorder_child">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="child" transfer-ownership="none">
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="position" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="reposition" c:identifier="gtk_menu_reposition">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="set_accel_group" c:identifier="gtk_menu_set_accel_group">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="accel_group"
                     transfer-ownership="none"
                     allow-none="1">
            <type name="AccelGroup" c:type="GtkAccelGroup*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_accel_path" c:identifier="gtk_menu_set_accel_path">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="accel_path" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_active" c:identifier="gtk_menu_set_active">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="index_" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_monitor"
              c:identifier="gtk_menu_set_monitor"
              version="2.4">
        <doc xml:whitespace="preserve">Informs GTK+ on which monitor a menu should be popped up. 
See gdk_screen_get_monitor_geometry().
This function should be called from a #GtkMenuPositionFunc if the
menu should not appear on the same monitor as the pointer. This 
information can't be reliably inferred from the coordinates returned
by a #GtkMenuPositionFunc, since, for very long menus, these coordinates 
may extend beyond the monitor boundaries or even the screen boundaries.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="monitor_num" transfer-ownership="none">
            <doc xml:whitespace="preserve">the number of the monitor on which the menu should be popped up</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_reserve_toggle_size"
              c:identifier="gtk_menu_set_reserve_toggle_size"
              version="2.18">
        <doc xml:whitespace="preserve">Sets whether the menu should reserve space for drawing toggles 
or icons, regardless of their actual presence.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="reserve_toggle_size" transfer-ownership="none">
            <doc xml:whitespace="preserve">whether to reserve size for toggles</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_screen"
              c:identifier="gtk_menu_set_screen"
              version="2.2">
        <doc xml:whitespace="preserve">Sets the #GdkScreen on which the menu will be displayed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="screen" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">a #GdkScreen, or %NULL if the screen should be determined by the widget the menu is attached to.</doc>
            <type name="Gdk.Screen" c:type="GdkScreen*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_tearoff_state"
              c:identifier="gtk_menu_set_tearoff_state">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="torn_off" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_title" c:identifier="gtk_menu_set_title">
        <doc xml:whitespace="preserve">Sets the title string for the menu.  The title is displayed when the menu
is shown as a tearoff menu.  If @title is %NULL, the menu will see if it is
attached to a parent menu item, and if so it will try to use the same text as
that menu item's label.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="title" transfer-ownership="none">
            <doc xml:whitespace="preserve">a string containing the title for the menu.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="accel-group"
                version="2.14"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The accel group holding accelerators for the menu.</doc>
        <type name="AccelGroup"/>
      </property>
      <property name="accel-path"
                version="2.14"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">An accel path used to conveniently construct accel paths of child items.</doc>
        <type name="utf8"/>
      </property>
      <property name="active"
                version="2.14"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The index of the currently selected menu item, or -1 if no
menu item is selected.</doc>
        <type name="gint"/>
      </property>
      <property name="attach-widget"
                version="2.14"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The widget the menu is attached to. Setting this property attaches
the menu without a #GtkMenuDetachFunc. If you need to use a detacher,
use gtk_menu_attach_to_widget() directly.</doc>
        <type name="Widget"/>
      </property>
      <property name="monitor"
                version="2.14"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The monitor the menu will be popped up on.</doc>
        <type name="gint"/>
      </property>
      <property name="reserve-toggle-size"
                version="2.18"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">A boolean that indicates whether the menu reserves space for
toggles and icons, regardless of their actual presence.
This property should only be changed from its default value
for special-purposes such as tabular menus. Regular menus that
are connected to a menu bar or context menus should reserve
toggle space for consistency.</doc>
        <type name="gboolean"/>
      </property>
      <property name="tearoff-state"
                version="2.6"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">A boolean that indicates whether the menu is torn-off.</doc>
        <type name="gboolean"/>
      </property>
      <property name="tearoff-title" writable="1" transfer-ownership="none">
        <type name="utf8"/>
      </property>
      <field name="menu_shell">
        <type name="MenuShell" c:type="GtkMenuShell"/>
      </field>
      <field name="parent_menu_item">
        <type name="Widget" c:type="GtkWidget*"/>
      </field>
      <field name="old_active_menu_item">
        <type name="Widget" c:type="GtkWidget*"/>
      </field>
      <field name="accel_group">
        <type name="AccelGroup" c:type="GtkAccelGroup*"/>
      </field>
      <field name="accel_path">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="position_func">
        <type name="MenuPositionFunc" c:type="GtkMenuPositionFunc"/>
      </field>
      <field name="position_func_data">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="toggle_size">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="toplevel">
        <type name="Widget" c:type="GtkWidget*"/>
      </field>
      <field name="tearoff_window">
        <type name="Widget" c:type="GtkWidget*"/>
      </field>
      <field name="tearoff_hbox">
        <type name="Widget" c:type="GtkWidget*"/>
      </field>
      <field name="tearoff_scrollbar">
        <type name="Widget" c:type="GtkWidget*"/>
      </field>
      <field name="tearoff_adjustment">
        <type name="Adjustment" c:type="GtkAdjustment*"/>
      </field>
      <field name="view_window">
        <type name="Gdk.Window" c:type="GdkWindow*"/>
      </field>
      <field name="bin_window">
        <type name="Gdk.Window" c:type="GdkWindow*"/>
      </field>
      <field name="scroll_offset">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="saved_scroll_offset">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="scroll_step">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="timeout_id">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="navigation_region">
        <type name="cairo.Region" c:type="cairo_region_t*"/>
      </field>
      <field name="navigation_timeout">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="needs_destruction_ref_count" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="torn_off" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="tearoff_active" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="scroll_fast" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="upper_arrow_visible" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="lower_arrow_visible" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="upper_arrow_prelight" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="lower_arrow_prelight" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <glib:signal name="move-scroll">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="ScrollType"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <class name="MenuBar"
           c:symbol-prefix="menu_bar"
           c:type="GtkMenuBar"
           parent="MenuShell"
           glib:type-name="GtkMenuBar"
           glib:get-type="gtk_menu_bar_get_type"
           glib:type-struct="MenuBarClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Buildable"/>
      <implements name="SizeRequest"/>
      <constructor name="new" c:identifier="gtk_menu_bar_new">
        <return-value transfer-ownership="none">
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="get_child_pack_direction"
              c:identifier="gtk_menu_bar_get_child_pack_direction"
              version="2.8">
        <doc xml:whitespace="preserve">Retrieves the current child pack direction of the menubar.
See gtk_menu_bar_set_child_pack_direction().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the child pack direction</doc>
          <type name="PackDirection" c:type="GtkPackDirection"/>
        </return-value>
      </method>
      <method name="get_pack_direction"
              c:identifier="gtk_menu_bar_get_pack_direction"
              version="2.8">
        <doc xml:whitespace="preserve">Retrieves the current pack direction of the menubar. 
See gtk_menu_bar_set_pack_direction().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the pack direction</doc>
          <type name="PackDirection" c:type="GtkPackDirection"/>
        </return-value>
      </method>
      <method name="set_child_pack_direction"
              c:identifier="gtk_menu_bar_set_child_pack_direction"
              version="2.8">
        <doc xml:whitespace="preserve">Sets how widgets should be packed inside the children of a menubar.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="child_pack_dir" transfer-ownership="none">
            <doc xml:whitespace="preserve">a new #GtkPackDirection</doc>
            <type name="PackDirection" c:type="GtkPackDirection"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_pack_direction"
              c:identifier="gtk_menu_bar_set_pack_direction"
              version="2.8">
        <doc xml:whitespace="preserve">Sets how items should be packed inside a menubar.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="pack_dir" transfer-ownership="none">
            <doc xml:whitespace="preserve">a new #GtkPackDirection</doc>
            <type name="PackDirection" c:type="GtkPackDirection"/>
          </parameter>
        </parameters>
      </method>
      <property name="child-pack-direction"
                version="2.8"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The child pack direction of the menubar. It determines how
the widgets contained in child menuitems are arranged.</doc>
        <type name="PackDirection"/>
      </property>
      <property name="pack-direction"
                version="2.8"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The pack direction of the menubar. It determines how
menuitems are arranged in the menubar.</doc>
        <type name="PackDirection"/>
      </property>
      <field name="menu_shell">
        <type name="MenuShell" c:type="GtkMenuShell"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="MenuBarPrivate" c:type="GtkMenuBarPrivate*"/>
      </field>
    </class>
    <record name="MenuBarClass"
            c:type="GtkMenuBarClass"
            glib:is-gtype-struct-for="MenuBar">
      <field name="parent_class">
        <type name="MenuShellClass" c:type="GtkMenuShellClass"/>
      </field>
      <field name="_gtk_reserved1" introspectable="0">
        <callback name="_gtk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved2" introspectable="0">
        <callback name="_gtk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved3" introspectable="0">
        <callback name="_gtk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved4" introspectable="0">
        <callback name="_gtk_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="MenuBarPrivate" c:type="GtkMenuBarPrivate" disguised="1">
    </record>
    <record name="MenuClass"
            c:type="GtkMenuClass"
            glib:is-gtype-struct-for="Menu">
      <field name="parent_class">
        <type name="MenuShellClass" c:type="GtkMenuShellClass"/>
      </field>
      <field name="_gtk_reserved1" introspectable="0">
        <callback name="_gtk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved2" introspectable="0">
        <callback name="_gtk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved3" introspectable="0">
        <callback name="_gtk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved4" introspectable="0">
        <callback name="_gtk_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <callback name="MenuDetachFunc" c:type="GtkMenuDetachFunc">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="attach_widget" transfer-ownership="none">
          <type name="Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="menu" transfer-ownership="none">
          <type name="Menu" c:type="GtkMenu*"/>
        </parameter>
      </parameters>
    </callback>
    <enumeration name="MenuDirectionType"
                 glib:type-name="GtkMenuDirectionType"
                 glib:get-type="gtk_menu_direction_type_get_type"
                 c:type="GtkMenuDirectionType">
      <member name="parent"
              value="0"
              c:identifier="GTK_MENU_DIR_PARENT"
              glib:nick="parent"/>
      <member name="child"
              value="1"
              c:identifier="GTK_MENU_DIR_CHILD"
              glib:nick="child"/>
      <member name="next"
              value="2"
              c:identifier="GTK_MENU_DIR_NEXT"
              glib:nick="next"/>
      <member name="prev"
              value="3"
              c:identifier="GTK_MENU_DIR_PREV"
              glib:nick="prev"/>
    </enumeration>
    <class name="MenuItem"
           c:symbol-prefix="menu_item"
           c:type="GtkMenuItem"
           parent="Bin"
           glib:type-name="GtkMenuItem"
           glib:get-type="gtk_menu_item_get_type"
           glib:type-struct="MenuItemClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Activatable"/>
      <implements name="Buildable"/>
      <implements name="SizeRequest"/>
      <constructor name="new" c:identifier="gtk_menu_item_new">
        <return-value transfer-ownership="none">
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <constructor name="new_with_label"
                   c:identifier="gtk_menu_item_new_with_label">
        <return-value transfer-ownership="none">
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="label" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_with_mnemonic"
                   c:identifier="gtk_menu_item_new_with_mnemonic">
        <doc xml:whitespace="preserve">Creates a new #GtkMenuItem containing a label. The label
will be created using gtk_label_new_with_mnemonic(), so underscores
in @label indicate the mnemonic for the menu item.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a new #GtkMenuItem</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="label" transfer-ownership="none">
            <doc xml:whitespace="preserve">The text of the button, with an underscore in front of the mnemonic character</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <virtual-method name="get_label" invoker="get_label" version="2.16">
        <doc xml:whitespace="preserve">Sets @text on the @menu_item label
string used by the label, and must not be modified.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The text in the @menu_item label. This is the internal</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </virtual-method>
      <virtual-method name="set_label" invoker="set_label" version="2.16">
        <doc xml:whitespace="preserve">Sets @text on the @menu_item label</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="label" transfer-ownership="none">
            <doc xml:whitespace="preserve">the text you want to set</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="activate" c:identifier="gtk_menu_item_activate">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="deselect" c:identifier="gtk_menu_item_deselect">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="get_accel_path"
              c:identifier="gtk_menu_item_get_accel_path">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_label"
              c:identifier="gtk_menu_item_get_label"
              version="2.16">
        <doc xml:whitespace="preserve">Sets @text on the @menu_item label
string used by the label, and must not be modified.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The text in the @menu_item label. This is the internal</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_right_justified"
              c:identifier="gtk_menu_item_get_right_justified">
        <doc xml:whitespace="preserve">Gets whether the menu item appears justified at the right
side of the menu bar.
far right if added to a menu bar.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the menu item will appear at the</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_submenu" c:identifier="gtk_menu_item_get_submenu">
        <doc xml:whitespace="preserve">Gets the submenu underneath this menu item, if any.
See gtk_menu_item_set_submenu().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">submenu for this menu item, or %NULL if none.</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
      </method>
      <method name="get_use_underline"
              c:identifier="gtk_menu_item_get_use_underline"
              version="2.16">
        <doc xml:whitespace="preserve">Checks if an underline in the text indicates the next character should be
used for the mnemonic accelerator key.
the mnemonic accelerator key.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if an embedded underline in the label indicates</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="select" c:identifier="gtk_menu_item_select">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="set_accel_path"
              c:identifier="gtk_menu_item_set_accel_path">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="accel_path" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_label"
              c:identifier="gtk_menu_item_set_label"
              version="2.16">
        <doc xml:whitespace="preserve">Sets @text on the @menu_item label</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="label" transfer-ownership="none">
            <doc xml:whitespace="preserve">the text you want to set</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_right_justified"
              c:identifier="gtk_menu_item_set_right_justified">
        <doc xml:whitespace="preserve">Sets whether the menu item appears justified at the right
side of a menu bar. This was traditionally done for "Help" menu
items, but is now considered a bad idea. (If the widget
layout is reversed for a right-to-left language like Hebrew
or Arabic, right-justified-menu-items appear at the left.)</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="right_justified" transfer-ownership="none">
            <doc xml:whitespace="preserve">if %TRUE the menu item will appear at the far right if added to a menu bar.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_submenu" c:identifier="gtk_menu_item_set_submenu">
        <doc xml:whitespace="preserve">Sets or replaces the menu item's submenu, or removes it when a %NULL
submenu is passed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="submenu" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">the submenu, or %NULL</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_use_underline"
              c:identifier="gtk_menu_item_set_use_underline"
              version="2.16">
        <doc xml:whitespace="preserve">If true, an underline in the text indicates the next character should be
used for the mnemonic accelerator key.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="setting" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE if underlines in the text indicate mnemonics</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="toggle_size_allocate"
              c:identifier="gtk_menu_item_toggle_size_allocate">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="allocation" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="toggle_size_request"
              c:identifier="gtk_menu_item_toggle_size_request">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="requisition" transfer-ownership="none">
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <property name="accel-path"
                version="2.14"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Sets the accelerator path of the menu item, through which runtime
changes of the menu item's accelerator caused by the user can be
identified and saved to persistant storage.</doc>
        <type name="utf8"/>
      </property>
      <property name="label"
                version="2.16"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The text for the child label.</doc>
        <type name="utf8"/>
      </property>
      <property name="right-justified"
                version="2.14"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Sets whether the menu item appears justified at the right side of a menu bar.</doc>
        <type name="gboolean"/>
      </property>
      <property name="submenu"
                version="2.12"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The submenu attached to the menu item, or NULL if it has none.</doc>
        <type name="Menu"/>
      </property>
      <property name="use-underline"
                version="2.16"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">%TRUE if underlines in the text indicate mnemonics</doc>
        <type name="gboolean"/>
      </property>
      <field name="bin">
        <type name="Bin" c:type="GtkBin"/>
      </field>
      <field name="submenu">
        <type name="Widget" c:type="GtkWidget*"/>
      </field>
      <field name="event_window">
        <type name="Gdk.Window" c:type="GdkWindow*"/>
      </field>
      <field name="toggle_size">
        <type name="guint16" c:type="guint16"/>
      </field>
      <field name="accelerator_width">
        <type name="guint16" c:type="guint16"/>
      </field>
      <field name="accel_path">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="show_submenu_indicator" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="submenu_placement" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="submenu_direction" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="right_justify" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="timer_from_keypress" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="from_menubar" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="timer">
        <type name="guint" c:type="guint"/>
      </field>
      <glib:signal name="activate">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
      <glib:signal name="activate-item">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
      <glib:signal name="deselect">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
      <glib:signal name="select">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
      <glib:signal name="toggle-size-allocate">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="gint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="toggle-size-request">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="gpointer"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="MenuItemClass"
            c:type="GtkMenuItemClass"
            glib:is-gtype-struct-for="MenuItem">
      <field name="parent_class">
        <type name="BinClass" c:type="GtkBinClass"/>
      </field>
      <field name="hide_on_activate" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="activate">
        <callback name="activate">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="menu_item" transfer-ownership="none">
              <type name="MenuItem" c:type="GtkMenuItem*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="activate_item">
        <callback name="activate_item">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="menu_item" transfer-ownership="none">
              <type name="MenuItem" c:type="GtkMenuItem*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="toggle_size_request">
        <callback name="toggle_size_request">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="menu_item" transfer-ownership="none">
              <type name="MenuItem" c:type="GtkMenuItem*"/>
            </parameter>
            <parameter name="requisition" transfer-ownership="none">
              <type name="gint" c:type="gint*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="toggle_size_allocate">
        <callback name="toggle_size_allocate">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="menu_item" transfer-ownership="none">
              <type name="MenuItem" c:type="GtkMenuItem*"/>
            </parameter>
            <parameter name="allocation" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_label">
        <callback name="set_label">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="menu_item" transfer-ownership="none">
              <type name="MenuItem" c:type="GtkMenuItem*"/>
            </parameter>
            <parameter name="label" transfer-ownership="none">
              <doc xml:whitespace="preserve">the text you want to set</doc>
              <type name="utf8" c:type="gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_label">
        <callback name="get_label">
          <return-value transfer-ownership="none">
            <doc xml:whitespace="preserve">The text in the @menu_item label. This is the internal</doc>
            <type name="utf8" c:type="gchar*"/>
          </return-value>
          <parameters>
            <parameter name="menu_item" transfer-ownership="none">
              <type name="MenuItem" c:type="GtkMenuItem*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="select">
        <callback name="select">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="menu_item" transfer-ownership="none">
              <type name="MenuItem" c:type="GtkMenuItem*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="deselect">
        <callback name="deselect">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="menu_item" transfer-ownership="none">
              <type name="MenuItem" c:type="GtkMenuItem*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_gtk_reserved1" introspectable="0">
        <callback name="_gtk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved2" introspectable="0">
        <callback name="_gtk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved3" introspectable="0">
        <callback name="_gtk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved4" introspectable="0">
        <callback name="_gtk_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <callback name="MenuPositionFunc" c:type="GtkMenuPositionFunc">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="menu" transfer-ownership="none">
          <type name="Menu" c:type="GtkMenu*"/>
        </parameter>
        <parameter name="x" transfer-ownership="none">
          <type name="gint" c:type="gint*"/>
        </parameter>
        <parameter name="y" transfer-ownership="none">
          <type name="gint" c:type="gint*"/>
        </parameter>
        <parameter name="push_in" transfer-ownership="none">
          <type name="gboolean" c:type="gboolean*"/>
        </parameter>
        <parameter name="user_data" transfer-ownership="none" closure="4">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <class name="MenuShell"
           c:symbol-prefix="menu_shell"
           c:type="GtkMenuShell"
           parent="Container"
           abstract="1"
           glib:type-name="GtkMenuShell"
           glib:get-type="gtk_menu_shell_get_type"
           glib:type-struct="MenuShellClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Buildable"/>
      <implements name="SizeRequest"/>
      <virtual-method name="get_popup_delay">
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
      </virtual-method>
      <virtual-method name="insert" invoker="insert">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="child" transfer-ownership="none">
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="position" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="select_item" invoker="select_item">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="menu_item" transfer-ownership="none">
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="activate_item" c:identifier="gtk_menu_shell_activate_item">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="menu_item" transfer-ownership="none">
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="force_deactivate" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="append" c:identifier="gtk_menu_shell_append">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="child" transfer-ownership="none">
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="cancel" c:identifier="gtk_menu_shell_cancel" version="2.4">
        <doc xml:whitespace="preserve">Cancels the selection within the menu shell.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="deactivate" c:identifier="gtk_menu_shell_deactivate">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="deselect" c:identifier="gtk_menu_shell_deselect">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="get_take_focus"
              c:identifier="gtk_menu_shell_get_take_focus"
              version="2.8">
        <doc xml:whitespace="preserve">Returns %TRUE if the menu shell will take the keyboard focus on popup.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the menu shell will take the keyboard focus on popup.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="insert" c:identifier="gtk_menu_shell_insert">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="child" transfer-ownership="none">
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="position" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="prepend" c:identifier="gtk_menu_shell_prepend">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="child" transfer-ownership="none">
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="select_first"
              c:identifier="gtk_menu_shell_select_first"
              version="2.2">
        <doc xml:whitespace="preserve">Select the first visible or selectable child of the menu shell;
don't select tearoff items unless the only item is a tearoff
item.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="search_sensitive" transfer-ownership="none">
            <doc xml:whitespace="preserve">if %TRUE, search for the first selectable menu item, otherwise select nothing if the first item isn't sensitive. This should be %FALSE if the menu is being popped up initially.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="select_item" c:identifier="gtk_menu_shell_select_item">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="menu_item" transfer-ownership="none">
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_take_focus"
              c:identifier="gtk_menu_shell_set_take_focus"
              version="2.8">
        <doc xml:whitespace="preserve">If @take_focus is %TRUE (the default) the menu shell will take the keyboard 
focus so that it will receive all keyboard events which is needed to enable
keyboard navigation in menus.
Setting @take_focus to %FALSE is useful only for special applications
like virtual keyboard implementations which should not take keyboard
focus.
The @take_focus state of a menu or menu bar is automatically propagated
to submenus whenever a submenu is popped up, so you don't have to worry
about recursively setting it for your entire menu hierarchy. Only when
programmatically picking a submenu and popping it up manually, the
Note that setting it to %FALSE has side-effects:
If the focus is in some other app, it keeps the focus and keynav in
the menu doesn't work. Consequently, keynav on the menu will only
work if the focus is on some toplevel owned by the onscreen keyboard.
To avoid confusing the user, menus with @take_focus set to %FALSE
should not display mnemonics or accelerators, since it cannot be
guaranteed that they will work.
See also gdk_keyboard_grab()</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="take_focus" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE if the menu shell should take the keyboard focus on popup.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="take-focus"
                version="2.8"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">A boolean that determines whether the menu and its submenus grab the
keyboard focus. See gtk_menu_shell_set_take_focus() and
gtk_menu_shell_get_take_focus().</doc>
        <type name="gboolean"/>
      </property>
      <field name="container">
        <type name="Container" c:type="GtkContainer"/>
      </field>
      <field name="children">
        <type name="GLib.List" c:type="GList*">
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </field>
      <field name="active_menu_item">
        <type name="Widget" c:type="GtkWidget*"/>
      </field>
      <field name="parent_menu_shell">
        <type name="Widget" c:type="GtkWidget*"/>
      </field>
      <field name="button">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="activate_time">
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="active" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="have_grab" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="have_xgrab" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="ignore_leave" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="menu_flag" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="ignore_enter" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="keyboard_mode" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <glib:signal name="activate-current">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="gboolean"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="cancel">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
      <glib:signal name="cycle-focus">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="DirectionType"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="deactivate">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
      <glib:signal name="move-current">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="MenuDirectionType"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="move-selected" version="2.12">
        <doc xml:whitespace="preserve">The ::move-selected signal is emitted to move the selection to
another item.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE to stop the signal emission, %FALSE to continue</doc>
          <type name="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">+1 to move to the next item, -1 to move to the previous</doc>
            <type name="gint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="selection-done">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="MenuShellClass"
            c:type="GtkMenuShellClass"
            glib:is-gtype-struct-for="MenuShell">
      <field name="parent_class">
        <type name="ContainerClass" c:type="GtkContainerClass"/>
      </field>
      <field name="submenu_placement" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="deactivate">
        <callback name="deactivate">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="menu_shell" transfer-ownership="none">
              <type name="MenuShell" c:type="GtkMenuShell*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="selection_done">
        <callback name="selection_done">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="menu_shell" transfer-ownership="none">
              <type name="MenuShell" c:type="GtkMenuShell*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="move_current">
        <callback name="move_current">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="menu_shell" transfer-ownership="none">
              <type name="MenuShell" c:type="GtkMenuShell*"/>
            </parameter>
            <parameter name="direction" transfer-ownership="none">
              <type name="MenuDirectionType" c:type="GtkMenuDirectionType"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="activate_current">
        <callback name="activate_current">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="menu_shell" transfer-ownership="none">
              <type name="MenuShell" c:type="GtkMenuShell*"/>
            </parameter>
            <parameter name="force_hide" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="cancel">
        <callback name="cancel">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="menu_shell" transfer-ownership="none">
              <type name="MenuShell" c:type="GtkMenuShell*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="select_item">
        <callback name="select_item">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="menu_shell" transfer-ownership="none">
              <type name="MenuShell" c:type="GtkMenuShell*"/>
            </parameter>
            <parameter name="menu_item" transfer-ownership="none">
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="insert">
        <callback name="insert">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="menu_shell" transfer-ownership="none">
              <type name="MenuShell" c:type="GtkMenuShell*"/>
            </parameter>
            <parameter name="child" transfer-ownership="none">
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
            <parameter name="position" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_popup_delay">
        <callback name="get_popup_delay">
          <return-value transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </return-value>
          <parameters>
            <parameter name="menu_shell" transfer-ownership="none">
              <type name="MenuShell" c:type="GtkMenuShell*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="move_selected">
        <callback name="move_selected">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="menu_shell" transfer-ownership="none">
              <type name="MenuShell" c:type="GtkMenuShell*"/>
            </parameter>
            <parameter name="distance" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_gtk_reserved1" introspectable="0">
        <callback name="_gtk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved2" introspectable="0">
        <callback name="_gtk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <class name="MenuToolButton"
           c:symbol-prefix="menu_tool_button"
           c:type="GtkMenuToolButton"
           parent="ToolButton"
           glib:type-name="GtkMenuToolButton"
           glib:get-type="gtk_menu_tool_button_get_type"
           glib:type-struct="MenuToolButtonClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Activatable"/>
      <implements name="Buildable"/>
      <implements name="SizeRequest"/>
      <constructor name="new"
                   c:identifier="gtk_menu_tool_button_new"
                   version="2.6">
        <doc xml:whitespace="preserve">Creates a new #GtkMenuToolButton using @icon_widget as icon and</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the new #GtkMenuToolButton</doc>
          <type name="ToolItem" c:type="GtkToolItem*"/>
        </return-value>
        <parameters>
          <parameter name="icon_widget"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">a widget that will be used as icon widget, or %NULL</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="label" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">a string that will be used as label, or %NULL</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_stock"
                   c:identifier="gtk_menu_tool_button_new_from_stock"
                   version="2.6">
        <doc xml:whitespace="preserve">Creates a new #GtkMenuToolButton.
The new #GtkMenuToolButton will contain an icon and label from
the stock item indicated by @stock_id.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the new #GtkMenuToolButton</doc>
          <type name="ToolItem" c:type="GtkToolItem*"/>
        </return-value>
        <parameters>
          <parameter name="stock_id" transfer-ownership="none">
            <doc xml:whitespace="preserve">the name of a stock item</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_menu"
              c:identifier="gtk_menu_tool_button_get_menu"
              version="2.6">
        <doc xml:whitespace="preserve">Gets the #GtkMenu associated with #GtkMenuToolButton.
with #GtkMenuToolButton</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the #GtkMenu associated</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
      </method>
      <method name="set_arrow_tooltip_markup"
              c:identifier="gtk_menu_tool_button_set_arrow_tooltip_markup"
              version="2.12">
        <doc xml:whitespace="preserve">Sets the tooltip markup text to be used as tooltip for the arrow button
which pops up the menu.  See gtk_tool_item_set_tooltip_text() for setting a
tooltip on the whole #GtkMenuToolButton.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="markup" transfer-ownership="none">
            <doc xml:whitespace="preserve">markup text to be used as tooltip text for button's arrow button</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_arrow_tooltip_text"
              c:identifier="gtk_menu_tool_button_set_arrow_tooltip_text"
              version="2.12">
        <doc xml:whitespace="preserve">Sets the tooltip text to be used as tooltip for the arrow button which
pops up the menu.  See gtk_tool_item_set_tooltip_text() for setting a tooltip
on the whole #GtkMenuToolButton.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="text" transfer-ownership="none">
            <doc xml:whitespace="preserve">text to be used as tooltip text for button's arrow button</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_menu"
              c:identifier="gtk_menu_tool_button_set_menu"
              version="2.6">
        <doc xml:whitespace="preserve">Sets the #GtkMenu that is popped up when the user clicks on the arrow.
If @menu is NULL, the arrow button becomes insensitive.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="menu" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GtkMenu associated with #GtkMenuToolButton</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <property name="menu" writable="1" transfer-ownership="none">
        <type name="Menu"/>
      </property>
      <field name="parent">
        <type name="ToolButton" c:type="GtkToolButton"/>
      </field>
      <field name="priv">
        <type name="MenuToolButtonPrivate" c:type="GtkMenuToolButtonPrivate*"/>
      </field>
      <glib:signal name="show-menu">
        <doc xml:whitespace="preserve">The ::show-menu signal is emitted before the menu is shown.
It can be used to populate the menu on demand, using 
gtk_menu_tool_button_get_menu(). 
Note that even if you populate the menu dynamically in this way, 
you must set an empty menu on the #GtkMenuToolButton beforehand,
since the arrow is made insensitive if the menu is not set.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="MenuToolButtonClass"
            c:type="GtkMenuToolButtonClass"
            glib:is-gtype-struct-for="MenuToolButton">
      <field name="parent_class">
        <type name="ToolButtonClass" c:type="GtkToolButtonClass"/>
      </field>
      <field name="show_menu">
        <callback name="show_menu">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="button" transfer-ownership="none">
              <type name="MenuToolButton" c:type="GtkMenuToolButton*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_gtk_reserved1" introspectable="0">
        <callback name="_gtk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved2" introspectable="0">
        <callback name="_gtk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved3" introspectable="0">
        <callback name="_gtk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved4" introspectable="0">
        <callback name="_gtk_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="MenuToolButtonPrivate"
            c:type="GtkMenuToolButtonPrivate"
            disguised="1">
    </record>
    <class name="MessageDialog"
           c:symbol-prefix="message_dialog"
           c:type="GtkMessageDialog"
           parent="Dialog"
           glib:type-name="GtkMessageDialog"
           glib:get-type="gtk_message_dialog_get_type"
           glib:type-struct="MessageDialogClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Buildable"/>
      <implements name="SizeRequest"/>
      <constructor name="new"
                   c:identifier="gtk_message_dialog_new"
                   introspectable="0">
        <doc xml:whitespace="preserve">Creates a new message dialog, which is a simple dialog with an icon
indicating the dialog type (error, warning, etc.) and some text the
user may want to see. When the user clicks a button a "response"
signal is emitted with response IDs from #GtkResponseType. See
#GtkDialog for more details.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a new #GtkMessageDialog</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="parent" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">transient parent, or %NULL for none</doc>
            <type name="Window" c:type="GtkWindow*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:whitespace="preserve">flags</doc>
            <type name="DialogFlags" c:type="GtkDialogFlags"/>
          </parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:whitespace="preserve">type of message</doc>
            <type name="MessageType" c:type="GtkMessageType"/>
          </parameter>
          <parameter name="buttons" transfer-ownership="none">
            <doc xml:whitespace="preserve">set of buttons to use</doc>
            <type name="ButtonsType" c:type="GtkButtonsType"/>
          </parameter>
          <parameter name="message_format"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">printf()-style format string, or %NULL</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter transfer-ownership="none">
            <varargs>
            </varargs>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_with_markup"
                   c:identifier="gtk_message_dialog_new_with_markup"
                   version="2.4"
                   introspectable="0">
        <doc xml:whitespace="preserve">Creates a new message dialog, which is a simple dialog with an icon
indicating the dialog type (error, warning, etc.) and some text which
is marked up with the &lt;link linkend="PangoMarkupFormat"&gt;Pango text markup language&lt;/link&gt;.
When the user clicks a button a "response" signal is emitted with
response IDs from #GtkResponseType. See #GtkDialog for more details.
Special XML characters in the printf() arguments passed to this
function will automatically be escaped as necessary.
(See g_markup_printf_escaped() for how this is implemented.)
Usually this is what you want, but if you have an existing
Pango markup string that you want to use literally as the
label, then you need to use gtk_message_dialog_set_markup()
instead, since you can't pass the markup string either
as the format (it might contain '%' characters) or as a string
argument.
|[
GtkWidget *dialog;
dialog = gtk_message_dialog_new (main_application_window,
GTK_DIALOG_DESTROY_WITH_PARENT,
GTK_MESSAGE_ERROR,
GTK_BUTTONS_CLOSE,
NULL);
gtk_message_dialog_set_markup (GTK_MESSAGE_DIALOG (dialog),
markup);
]|</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a new #GtkMessageDialog</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="parent" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">transient parent, or %NULL for none</doc>
            <type name="Window" c:type="GtkWindow*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:whitespace="preserve">flags</doc>
            <type name="DialogFlags" c:type="GtkDialogFlags"/>
          </parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:whitespace="preserve">type of message</doc>
            <type name="MessageType" c:type="GtkMessageType"/>
          </parameter>
          <parameter name="buttons" transfer-ownership="none">
            <doc xml:whitespace="preserve">set of buttons to use</doc>
            <type name="ButtonsType" c:type="GtkButtonsType"/>
          </parameter>
          <parameter name="message_format"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">printf()-style format string, or %NULL</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter transfer-ownership="none">
            <varargs>
            </varargs>
          </parameter>
        </parameters>
      </constructor>
      <method name="format_secondary_markup"
              c:identifier="gtk_message_dialog_format_secondary_markup"
              version="2.6"
              introspectable="0">
        <doc xml:whitespace="preserve">Sets the secondary text of the message dialog to be @message_format (with 
printf()-style), which is marked up with the 
&lt;link linkend="PangoMarkupFormat"&gt;Pango text markup language&lt;/link&gt;.
Note that setting a secondary text makes the primary text become
bold, unless you have provided explicit markup.
Due to an oversight, this function does not escape special XML characters
like gtk_message_dialog_new_with_markup() does. Thus, if the arguments 
may contain special XML characters, you should use g_markup_printf_escaped()
to escape it.
&lt;informalexample&gt;&lt;programlisting&gt;
gchar *msg;
msg = g_markup_printf_escaped (message_format, ...);
gtk_message_dialog_format_secondary_markup (message_dialog, "&amp;percnt;s", msg);
g_free (msg);
&lt;/programlisting&gt;&lt;/informalexample&gt;</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="message_format" transfer-ownership="none">
            <doc xml:whitespace="preserve">printf()-style markup string (see</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter transfer-ownership="none">
            <varargs>
            </varargs>
          </parameter>
        </parameters>
      </method>
      <method name="format_secondary_text"
              c:identifier="gtk_message_dialog_format_secondary_text"
              version="2.6"
              introspectable="0">
        <doc xml:whitespace="preserve">Sets the secondary text of the message dialog to be @message_format 
(with printf()-style).
Note that setting a secondary text makes the primary text become
bold, unless you have provided explicit markup.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="message_format"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">printf()-style format string, or %NULL</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter transfer-ownership="none">
            <varargs>
            </varargs>
          </parameter>
        </parameters>
      </method>
      <method name="get_image"
              c:identifier="gtk_message_dialog_get_image"
              version="2.14">
        <doc xml:whitespace="preserve">Gets the dialog's image.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the dialog's image</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
      </method>
      <method name="get_message_area"
              c:identifier="gtk_message_dialog_get_message_area"
              version="2.22">
        <doc xml:whitespace="preserve">Returns the message area of the dialog. This is the box where the
dialog's primary and secondary labels are packed. You can add your
own extra content to that box and it will appear below those labels,
on the right side of the dialog's image (or on the left for right-to-left
languages).  See gtk_dialog_get_content_area() for the corresponding
function in the parent #GtkDialog.
"message area" in the @message_dialog.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">A #GtkVBox corresponding to the</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
      </method>
      <method name="set_image"
              c:identifier="gtk_message_dialog_set_image"
              version="2.10">
        <doc xml:whitespace="preserve">Sets the dialog's image to @image.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="image" transfer-ownership="none">
            <doc xml:whitespace="preserve">the image</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_markup"
              c:identifier="gtk_message_dialog_set_markup"
              version="2.4">
        <doc xml:whitespace="preserve">Sets the text of the message dialog to be @str, which is marked
up with the &lt;link linkend="PangoMarkupFormat"&gt;Pango text markup
language&lt;/link&gt;.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="str" transfer-ownership="none">
            <doc xml:whitespace="preserve">markup string (see &lt;link linkend="PangoMarkupFormat"&gt;Pango markup format&lt;/link&gt;)</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="buttons"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="ButtonsType"/>
      </property>
      <property name="image"
                version="2.10"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The image for this dialog.</doc>
        <type name="Widget"/>
      </property>
      <property name="message-area" transfer-ownership="none">
        <type name="Widget"/>
      </property>
      <property name="message-type"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The type of the message. The type is used to determine
the image that is shown in the dialog, unless the image is 
explicitly set by the ::image property.</doc>
        <type name="MessageType"/>
      </property>
      <property name="secondary-text"
                version="2.10"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The secondary text of the message dialog.</doc>
        <type name="utf8"/>
      </property>
      <property name="secondary-use-markup"
                version="2.10"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">%TRUE if the secondary text of the dialog includes Pango markup. 
See pango_parse_markup().</doc>
        <type name="gboolean"/>
      </property>
      <property name="text"
                version="2.10"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The primary text of the message dialog. If the dialog has 
a secondary text, this will appear as the title.</doc>
        <type name="utf8"/>
      </property>
      <property name="use-markup"
                version="2.10"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">%TRUE if the primary text of the dialog includes Pango markup. 
See pango_parse_markup().</doc>
        <type name="gboolean"/>
      </property>
      <field name="parent_instance">
        <type name="Dialog" c:type="GtkDialog"/>
      </field>
      <field name="priv">
        <type name="MessageDialogPrivate" c:type="GtkMessageDialogPrivate*"/>
      </field>
    </class>
    <record name="MessageDialogClass"
            c:type="GtkMessageDialogClass"
            glib:is-gtype-struct-for="MessageDialog">
      <field name="parent_class">
        <type name="DialogClass" c:type="GtkDialogClass"/>
      </field>
      <field name="_gtk_reserved1" introspectable="0">
        <callback name="_gtk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved2" introspectable="0">
        <callback name="_gtk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved3" introspectable="0">
        <callback name="_gtk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved4" introspectable="0">
        <callback name="_gtk_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="MessageDialogPrivate"
            c:type="GtkMessageDialogPrivate"
            disguised="1">
    </record>
    <enumeration name="MessageType"
                 glib:type-name="GtkMessageType"
                 glib:get-type="gtk_message_type_get_type"
                 c:type="GtkMessageType">
      <doc xml:whitespace="preserve">The type of message being displayed in the dialog.</doc>
      <member name="info"
              value="0"
              c:identifier="GTK_MESSAGE_INFO"
              glib:nick="info"/>
      <member name="warning"
              value="1"
              c:identifier="GTK_MESSAGE_WARNING"
              glib:nick="warning"/>
      <member name="question"
              value="2"
              c:identifier="GTK_MESSAGE_QUESTION"
              glib:nick="question"/>
      <member name="error"
              value="3"
              c:identifier="GTK_MESSAGE_ERROR"
              glib:nick="error"/>
      <member name="other"
              value="4"
              c:identifier="GTK_MESSAGE_OTHER"
              glib:nick="other"/>
    </enumeration>
    <enumeration name="MetricType"
                 glib:type-name="GtkMetricType"
                 glib:get-type="gtk_metric_type_get_type"
                 c:type="GtkMetricType">
      <member name="pixels"
              value="0"
              c:identifier="GTK_PIXELS"
              glib:nick="pixels"/>
      <member name="inches"
              value="1"
              c:identifier="GTK_INCHES"
              glib:nick="inches"/>
      <member name="centimeters"
              value="2"
              c:identifier="GTK_CENTIMETERS"
              glib:nick="centimeters"/>
    </enumeration>
    <class name="Misc"
           c:symbol-prefix="misc"
           c:type="GtkMisc"
           parent="Widget"
           abstract="1"
           glib:type-name="GtkMisc"
           glib:get-type="gtk_misc_get_type"
           glib:type-struct="MiscClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Buildable"/>
      <implements name="SizeRequest"/>
      <method name="get_alignment" c:identifier="gtk_misc_get_alignment">
        <doc xml:whitespace="preserve">Gets the X and Y alignment of the widget within its allocation. 
See gtk_misc_set_alignment().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="xalign" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">location to store X alignment of @misc, or %NULL</doc>
            <type name="gfloat" c:type="gfloat*"/>
          </parameter>
          <parameter name="yalign" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">location to store Y alignment of @misc, or %NULL</doc>
            <type name="gfloat" c:type="gfloat*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_padding" c:identifier="gtk_misc_get_padding">
        <doc xml:whitespace="preserve">Gets the padding in the X and Y directions of the widget. 
See gtk_misc_set_padding().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="xpad" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">location to store padding in the X direction, or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="ypad" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">location to store padding in the Y direction, or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_alignment" c:identifier="gtk_misc_set_alignment">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="xalign" transfer-ownership="none">
            <type name="gfloat" c:type="gfloat"/>
          </parameter>
          <parameter name="yalign" transfer-ownership="none">
            <type name="gfloat" c:type="gfloat"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_padding" c:identifier="gtk_misc_set_padding">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="xpad" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="ypad" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <property name="xalign" writable="1" transfer-ownership="none">
        <type name="gfloat"/>
      </property>
      <property name="xpad" writable="1" transfer-ownership="none">
        <type name="gint"/>
      </property>
      <property name="yalign" writable="1" transfer-ownership="none">
        <type name="gfloat"/>
      </property>
      <property name="ypad" writable="1" transfer-ownership="none">
        <type name="gint"/>
      </property>
      <field name="widget">
        <type name="Widget" c:type="GtkWidget"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="MiscPrivate" c:type="GtkMiscPrivate*"/>
      </field>
    </class>
    <record name="MiscClass"
            c:type="GtkMiscClass"
            glib:is-gtype-struct-for="Misc">
      <field name="parent_class">
        <type name="WidgetClass" c:type="GtkWidgetClass"/>
      </field>
    </record>
    <record name="MiscPrivate" c:type="GtkMiscPrivate" disguised="1">
    </record>
    <callback name="ModuleDisplayInitFunc" c:type="GtkModuleDisplayInitFunc">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="display" transfer-ownership="none">
          <type name="Gdk.Display" c:type="GdkDisplay*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="ModuleInitFunc" c:type="GtkModuleInitFunc">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="argc" transfer-ownership="none">
          <type name="gint" c:type="gint*"/>
        </parameter>
        <parameter name="argv" transfer-ownership="none">
          <type name="utf8" c:type="gchar***"/>
        </parameter>
      </parameters>
    </callback>
    <class name="MountOperation"
           c:symbol-prefix="mount_operation"
           c:type="GtkMountOperation"
           parent="Gio.MountOperation"
           glib:type-name="GtkMountOperation"
           glib:get-type="gtk_mount_operation_get_type"
           glib:type-struct="MountOperationClass">
      <doc xml:whitespace="preserve">This should not be accessed directly. Use the accessor functions below.</doc>
      <constructor name="new"
                   c:identifier="gtk_mount_operation_new"
                   version="2.14">
        <doc xml:whitespace="preserve">Creates a new #GtkMountOperation</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new #GtkMountOperation</doc>
          <type name="Gio.MountOperation" c:type="GMountOperation*"/>
        </return-value>
        <parameters>
          <parameter name="parent" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">transient parent of the window, or %NULL</doc>
            <type name="Window" c:type="GtkWindow*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_parent"
              c:identifier="gtk_mount_operation_get_parent"
              version="2.14">
        <doc xml:whitespace="preserve">Gets the transient parent used by the #GtkMountOperation</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the transient parent for windows shown by @op</doc>
          <type name="Window" c:type="GtkWindow*"/>
        </return-value>
      </method>
      <method name="get_screen"
              c:identifier="gtk_mount_operation_get_screen"
              version="2.14">
        <doc xml:whitespace="preserve">Gets the screen on which windows of the #GtkMountOperation
will be shown.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the screen on which windows of @op are shown</doc>
          <type name="Gdk.Screen" c:type="GdkScreen*"/>
        </return-value>
      </method>
      <method name="is_showing"
              c:identifier="gtk_mount_operation_is_showing"
              version="2.14">
        <doc xml:whitespace="preserve">Returns whether the #GtkMountOperation is currently displaying
a window.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if @op is currently displaying a window</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="set_parent"
              c:identifier="gtk_mount_operation_set_parent"
              version="2.14">
        <doc xml:whitespace="preserve">Sets the transient parent for windows shown by the
#GtkMountOperation.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="parent" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">transient parent of the window, or %NULL</doc>
            <type name="Window" c:type="GtkWindow*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_screen"
              c:identifier="gtk_mount_operation_set_screen"
              version="2.14">
        <doc xml:whitespace="preserve">Sets the screen to show windows of the #GtkMountOperation on.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="screen" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GdkScreen</doc>
            <type name="Gdk.Screen" c:type="GdkScreen*"/>
          </parameter>
        </parameters>
      </method>
      <property name="is-showing" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="parent" writable="1" transfer-ownership="none">
        <type name="Window"/>
      </property>
      <property name="screen" writable="1" transfer-ownership="none">
        <type name="Gdk.Screen"/>
      </property>
      <field name="parent_instance">
        <type name="Gio.MountOperation" c:type="GMountOperation"/>
      </field>
      <field name="priv">
        <type name="MountOperationPrivate" c:type="GtkMountOperationPrivate*"/>
      </field>
    </class>
    <record name="MountOperationClass"
            c:type="GtkMountOperationClass"
            glib:is-gtype-struct-for="MountOperation">
      <field name="parent_class">
        <type name="Gio.MountOperationClass" c:type="GMountOperationClass"/>
      </field>
      <field name="_gtk_reserved1" introspectable="0">
        <callback name="_gtk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved2" introspectable="0">
        <callback name="_gtk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved3" introspectable="0">
        <callback name="_gtk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved4" introspectable="0">
        <callback name="_gtk_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="MountOperationPrivate"
            c:type="GtkMountOperationPrivate"
            disguised="1">
    </record>
    <enumeration name="MovementStep"
                 glib:type-name="GtkMovementStep"
                 glib:get-type="gtk_movement_step_get_type"
                 c:type="GtkMovementStep">
      <member name="logical_positions"
              value="0"
              c:identifier="GTK_MOVEMENT_LOGICAL_POSITIONS"
              glib:nick="logical-positions"/>
      <member name="visual_positions"
              value="1"
              c:identifier="GTK_MOVEMENT_VISUAL_POSITIONS"
              glib:nick="visual-positions"/>
      <member name="words"
              value="2"
              c:identifier="GTK_MOVEMENT_WORDS"
              glib:nick="words"/>
      <member name="display_lines"
              value="3"
              c:identifier="GTK_MOVEMENT_DISPLAY_LINES"
              glib:nick="display-lines"/>
      <member name="display_line_ends"
              value="4"
              c:identifier="GTK_MOVEMENT_DISPLAY_LINE_ENDS"
              glib:nick="display-line-ends"/>
      <member name="paragraphs"
              value="5"
              c:identifier="GTK_MOVEMENT_PARAGRAPHS"
              glib:nick="paragraphs"/>
      <member name="paragraph_ends"
              value="6"
              c:identifier="GTK_MOVEMENT_PARAGRAPH_ENDS"
              glib:nick="paragraph-ends"/>
      <member name="pages"
              value="7"
              c:identifier="GTK_MOVEMENT_PAGES"
              glib:nick="pages"/>
      <member name="buffer_ends"
              value="8"
              c:identifier="GTK_MOVEMENT_BUFFER_ENDS"
              glib:nick="buffer-ends"/>
      <member name="horizontal_pages"
              value="9"
              c:identifier="GTK_MOVEMENT_HORIZONTAL_PAGES"
              glib:nick="horizontal-pages"/>
    </enumeration>
    <class name="Notebook"
           c:symbol-prefix="notebook"
           c:type="GtkNotebook"
           parent="Container"
           glib:type-name="GtkNotebook"
           glib:get-type="gtk_notebook_get_type"
           glib:type-struct="NotebookClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Buildable"/>
      <implements name="SizeRequest"/>
      <constructor name="new" c:identifier="gtk_notebook_new">
        <doc xml:whitespace="preserve">Creates a new #GtkNotebook widget with no pages.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the newly created #GtkNotebook</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <virtual-method name="insert_page">
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <parameter name="child" transfer-ownership="none">
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="tab_label" transfer-ownership="none">
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="menu_label" transfer-ownership="none">
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="position" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="append_page" c:identifier="gtk_notebook_append_page">
        <doc xml:whitespace="preserve">Appends a page to @notebook.
page in the notebook, or -1 if function fails</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the index (starting from 0) of the appended</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <parameter name="child" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GtkWidget to use as the contents of the page.</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="tab_label" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">the #GtkWidget to be used as the label for the page, or %NULL to use the default label, 'page N'.</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="append_page_menu"
              c:identifier="gtk_notebook_append_page_menu">
        <doc xml:whitespace="preserve">Appends a page to @notebook, specifying the widget to use as the
label in the popup menu.
page in the notebook, or -1 if function fails</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the index (starting from 0) of the appended</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <parameter name="child" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GtkWidget to use as the contents of the page.</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="tab_label" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">the #GtkWidget to be used as the label for the page, or %NULL to use the default label, 'page N'.</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="menu_label"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">the widget to use as a label for the page-switch menu, if that is enabled. If %NULL, and @tab_label is a #GtkLabel or %NULL, then the menu label will be a newly created label with the same text as @tab_label; If @tab_label is not a #GtkLabel, @menu_label must be specified if the page-switch menu is to be used.</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_action_widget"
              c:identifier="gtk_notebook_get_action_widget"
              version="2.20">
        <doc xml:whitespace="preserve">Gets one of the action widgets. See gtk_notebook_set_action_widget().
or %NULL when this action widget has not been set</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The action widget with the given @pack_type</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="pack_type" transfer-ownership="none">
            <doc xml:whitespace="preserve">pack type of the action widget to receive</doc>
            <type name="PackType" c:type="GtkPackType"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_current_page"
              c:identifier="gtk_notebook_get_current_page">
        <doc xml:whitespace="preserve">Returns the page number of the current page.
page in the notebook. If the notebook has no pages, then
-1 will be returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the index (starting from 0) of the current</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="get_group_name"
              c:identifier="gtk_notebook_get_group_name"
              version="2.24">
        <doc xml:whitespace="preserve">Gets the current group name for @notebook.
or %NULL if none is set.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the group name,</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_menu_label" c:identifier="gtk_notebook_get_menu_label">
        <doc xml:whitespace="preserve">Retrieves the menu label widget of the page containing @child.
notebook page does not have a menu label other than the
default (the tab label).</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the menu label, or %NULL if the</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="child" transfer-ownership="none">
            <doc xml:whitespace="preserve">a widget contained in a page of @notebook</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_menu_label_text"
              c:identifier="gtk_notebook_get_menu_label_text">
        <doc xml:whitespace="preserve">Retrieves the text of the menu label for the page containing
widget does not have a menu label other than
the default menu label, or the menu label widget
is not a #GtkLabel. The string is owned by
the widget and must not be freed.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the text of the tab label, or %NULL if the</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="child" transfer-ownership="none">
            <doc xml:whitespace="preserve">the child widget of a page of the notebook.</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_n_pages"
              c:identifier="gtk_notebook_get_n_pages"
              version="2.2">
        <doc xml:whitespace="preserve">Gets the number of pages in a notebook.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the number of pages in the notebook.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="get_nth_page" c:identifier="gtk_notebook_get_nth_page">
        <doc xml:whitespace="preserve">Returns the child widget contained in page number @page_num.
out of bounds.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the child widget, or %NULL if @page_num is</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="page_num" transfer-ownership="none">
            <doc xml:whitespace="preserve">the index of a page in the notebook, or -1 to get the last page.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_scrollable" c:identifier="gtk_notebook_get_scrollable">
        <doc xml:whitespace="preserve">Returns whether the tab label area has arrows for scrolling. See
gtk_notebook_set_scrollable().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if arrows for scrolling are present</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_show_border"
              c:identifier="gtk_notebook_get_show_border">
        <doc xml:whitespace="preserve">Returns whether a bevel will be drawn around the notebook pages. See
gtk_notebook_set_show_border().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the bevel is drawn</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_show_tabs" c:identifier="gtk_notebook_get_show_tabs">
        <doc xml:whitespace="preserve">Returns whether the tabs of the notebook are shown. See
gtk_notebook_set_show_tabs().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the tabs are shown</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_tab_detachable"
              c:identifier="gtk_notebook_get_tab_detachable"
              version="2.10">
        <doc xml:whitespace="preserve">Returns whether the tab contents can be detached from @notebook.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">TRUE if the tab is detachable.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="child" transfer-ownership="none">
            <doc xml:whitespace="preserve">a child #GtkWidget</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_tab_hborder"
              c:identifier="gtk_notebook_get_tab_hborder"
              version="2.22">
        <doc xml:whitespace="preserve">Returns the horizontal width of a tab border.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">horizontal width of a tab border</doc>
          <type name="guint16" c:type="guint16"/>
        </return-value>
      </method>
      <method name="get_tab_label" c:identifier="gtk_notebook_get_tab_label">
        <doc xml:whitespace="preserve">Returns the tab label widget for the page @child. %NULL is returned
if @child is not in @notebook or if no tab label has specifically
been set for @child.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the tab label</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="child" transfer-ownership="none">
            <doc xml:whitespace="preserve">the page</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_tab_label_text"
              c:identifier="gtk_notebook_get_tab_label_text">
        <doc xml:whitespace="preserve">Retrieves the text of the tab label for the page containing
tab label widget is not a #GtkLabel. The
string is owned by the widget and must not
be freed.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the text of the tab label, or %NULL if the</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="child" transfer-ownership="none">
            <doc xml:whitespace="preserve">a widget contained in a page of @notebook</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_tab_pos" c:identifier="gtk_notebook_get_tab_pos">
        <doc xml:whitespace="preserve">Gets the edge at which the tabs for switching pages in the
notebook are drawn.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the edge at which the tabs are drawn</doc>
          <type name="PositionType" c:type="GtkPositionType"/>
        </return-value>
      </method>
      <method name="get_tab_reorderable"
              c:identifier="gtk_notebook_get_tab_reorderable"
              version="2.10">
        <doc xml:whitespace="preserve">Gets whether the tab can be reordered via drag and drop or not.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the tab is reorderable.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="child" transfer-ownership="none">
            <doc xml:whitespace="preserve">a child #GtkWidget</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_tab_vborder"
              c:identifier="gtk_notebook_get_tab_vborder"
              version="2.22">
        <doc xml:whitespace="preserve">Returns the vertical width of a tab border.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">vertical width of a tab border</doc>
          <type name="guint16" c:type="guint16"/>
        </return-value>
      </method>
      <method name="insert_page" c:identifier="gtk_notebook_insert_page">
        <doc xml:whitespace="preserve">Insert a page into @notebook at the given position.
page in the notebook, or -1 if function fails</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the index (starting from 0) of the inserted</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <parameter name="child" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GtkWidget to use as the contents of the page.</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="tab_label" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">the #GtkWidget to be used as the label for the page, or %NULL to use the default label, 'page N'.</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="position" transfer-ownership="none">
            <doc xml:whitespace="preserve">the index (starting at 0) at which to insert the page, or -1 to append the page after all other pages.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="insert_page_menu"
              c:identifier="gtk_notebook_insert_page_menu">
        <doc xml:whitespace="preserve">Insert a page into @notebook at the given position, specifying
the widget to use as the label in the popup menu.
page in the notebook</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the index (starting from 0) of the inserted</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <parameter name="child" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GtkWidget to use as the contents of the page.</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="tab_label" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">the #GtkWidget to be used as the label for the page, or %NULL to use the default label, 'page N'.</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="menu_label"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">the widget to use as a label for the page-switch menu, if that is enabled. If %NULL, and @tab_label is a #GtkLabel or %NULL, then the menu label will be a newly created label with the same text as @tab_label; If @tab_label is not a #GtkLabel, @menu_label must be specified if the page-switch menu is to be used.</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="position" transfer-ownership="none">
            <doc xml:whitespace="preserve">the index (starting at 0) at which to insert the page, or -1 to append the page after all other pages.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="next_page" c:identifier="gtk_notebook_next_page">
        <doc xml:whitespace="preserve">Switches to the next page. Nothing happens if the current page is
the last page.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="page_num" c:identifier="gtk_notebook_page_num">
        <doc xml:whitespace="preserve">Finds the index of the page which contains the given child
widget.
-1 if @child is not in the notebook.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the index of the page containing @child, or</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <parameter name="child" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkWidget</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="popup_disable" c:identifier="gtk_notebook_popup_disable">
        <doc xml:whitespace="preserve">Disables the popup menu.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="popup_enable" c:identifier="gtk_notebook_popup_enable">
        <doc xml:whitespace="preserve">the tab labels, a menu with all the pages will be popped up.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="prepend_page" c:identifier="gtk_notebook_prepend_page">
        <doc xml:whitespace="preserve">Prepends a page to @notebook.
page in the notebook, or -1 if function fails</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the index (starting from 0) of the prepended</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <parameter name="child" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GtkWidget to use as the contents of the page.</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="tab_label" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">the #GtkWidget to be used as the label for the page, or %NULL to use the default label, 'page N'.</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="prepend_page_menu"
              c:identifier="gtk_notebook_prepend_page_menu">
        <doc xml:whitespace="preserve">Prepends a page to @notebook, specifying the widget to use as the
label in the popup menu.
page in the notebook, or -1 if function fails</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the index (starting from 0) of the prepended</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <parameter name="child" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GtkWidget to use as the contents of the page.</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="tab_label" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">the #GtkWidget to be used as the label for the page, or %NULL to use the default label, 'page N'.</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="menu_label"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">the widget to use as a label for the page-switch menu, if that is enabled. If %NULL, and @tab_label is a #GtkLabel or %NULL, then the menu label will be a newly created label with the same text as @tab_label; If @tab_label is not a #GtkLabel, @menu_label must be specified if the page-switch menu is to be used.</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="prev_page" c:identifier="gtk_notebook_prev_page">
        <doc xml:whitespace="preserve">Switches to the previous page. Nothing happens if the current page
is the first page.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="remove_page" c:identifier="gtk_notebook_remove_page">
        <doc xml:whitespace="preserve">Removes a page from the notebook given its index
in the notebook.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="page_num" transfer-ownership="none">
            <doc xml:whitespace="preserve">the index of a notebook page, starting from 0. If -1, the last page will be removed.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="reorder_child" c:identifier="gtk_notebook_reorder_child">
        <doc xml:whitespace="preserve">Reorders the page containing @child, so that it appears in position
children in the list or negative, @child will be moved to the end
of the list.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="child" transfer-ownership="none">
            <doc xml:whitespace="preserve">the child to move</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="position" transfer-ownership="none">
            <doc xml:whitespace="preserve">the new position, or -1 to move to the end</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_action_widget"
              c:identifier="gtk_notebook_set_action_widget"
              version="2.20">
        <doc xml:whitespace="preserve">Sets @widget as one of the action widgets. Depending on the pack type
the widget will be placed before or after the tabs. You can use
a #GtkBox if you need to pack more than one widget on the same side.
Note that action widgets are "internal" children of the notebook and thus
not included in the list returned from gtk_container_foreach().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="widget" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkWidget</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="pack_type" transfer-ownership="none">
            <doc xml:whitespace="preserve">pack type of the action widget</doc>
            <type name="PackType" c:type="GtkPackType"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_current_page"
              c:identifier="gtk_notebook_set_current_page">
        <doc xml:whitespace="preserve">Switches to the page number @page_num. 
Note that due to historical reasons, GtkNotebook refuses
to switch to a page unless the child widget is visible. 
Therefore, it is recommended to show child widgets before
adding them to a notebook.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="page_num" transfer-ownership="none">
            <doc xml:whitespace="preserve">index of the page to switch to, starting from 0. If negative, the last page will be used. If greater than the number of pages in the notebook, nothing will be done.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_group_name"
              c:identifier="gtk_notebook_set_group_name"
              version="2.24">
        <doc xml:whitespace="preserve">Sets a group name for @notebook.
Notebooks with the same name will be able to exchange tabs
via drag and drop. A notebook with a %NULL group name will
not be able to exchange tabs with any other notebook.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="group_name" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_menu_label" c:identifier="gtk_notebook_set_menu_label">
        <doc xml:whitespace="preserve">Changes the menu label for the page containing @child.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="child" transfer-ownership="none">
            <doc xml:whitespace="preserve">the child widget</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="menu_label"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">the menu label, or NULL for default</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_menu_label_text"
              c:identifier="gtk_notebook_set_menu_label_text">
        <doc xml:whitespace="preserve">Creates a new label and sets it as the menu label of @child.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="child" transfer-ownership="none">
            <doc xml:whitespace="preserve">the child widget</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="menu_text" transfer-ownership="none">
            <doc xml:whitespace="preserve">the label text</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_scrollable" c:identifier="gtk_notebook_set_scrollable">
        <doc xml:whitespace="preserve">Sets whether the tab label area will have arrows for scrolling if
there are too many tabs to fit in the area.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="scrollable" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE if scroll arrows should be added</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_show_border"
              c:identifier="gtk_notebook_set_show_border">
        <doc xml:whitespace="preserve">Sets whether a bevel will be drawn around the notebook pages.
This only has a visual effect when the tabs are not shown.
See gtk_notebook_set_show_tabs().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="show_border" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE if a bevel should be drawn around the notebook.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_show_tabs" c:identifier="gtk_notebook_set_show_tabs">
        <doc xml:whitespace="preserve">Sets whether to show the tabs for the notebook or not.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="show_tabs" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE if the tabs should be shown.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_tab_detachable"
              c:identifier="gtk_notebook_set_tab_detachable"
              version="2.10">
        <doc xml:whitespace="preserve">Sets whether the tab can be detached from @notebook to another
notebook or widget.
Note that 2 notebooks must share a common group identificator
(see gtk_notebook_set_group()) to allow automatic tabs
interchange between them.
If you want a widget to interact with a notebook through DnD
(i.e.: accept dragged tabs from it) it must be set as a drop
destination and accept the target "GTK_NOTEBOOK_TAB". The notebook
will fill the selection with a GtkWidget** pointing to the child
widget that corresponds to the dropped tab.
|[
static void
on_drop_zone_drag_data_received (GtkWidget        *widget,
GdkDragContext   *context,
gint              x,
gint              y,
GtkSelectionData *selection_data,
guint             info,
guint             time,
gpointer          user_data)
{
GtkWidget *notebook;
GtkWidget **child;
notebook = gtk_drag_get_source_widget (context);
child = (void*) selection_data-&gt;data;
process_widget (*child);
gtk_container_remove (GTK_CONTAINER (notebook), *child);
}
]|
If you want a notebook to accept drags from other widgets,
you will have to set your own DnD code to do it.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="child" transfer-ownership="none">
            <doc xml:whitespace="preserve">a child #GtkWidget</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="detachable" transfer-ownership="none">
            <doc xml:whitespace="preserve">whether the tab is detachable or not</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_tab_label" c:identifier="gtk_notebook_set_tab_label">
        <doc xml:whitespace="preserve">Changes the tab label for @child. If %NULL is specified
for @tab_label, then the page will have the label 'page N'.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="child" transfer-ownership="none">
            <doc xml:whitespace="preserve">the page</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="tab_label" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">the tab label widget to use, or %NULL for default tab label.</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_tab_label_text"
              c:identifier="gtk_notebook_set_tab_label_text">
        <doc xml:whitespace="preserve">Creates a new label and sets it as the tab label for the page
containing @child.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="child" transfer-ownership="none">
            <doc xml:whitespace="preserve">the page</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="tab_text" transfer-ownership="none">
            <doc xml:whitespace="preserve">the label text</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_tab_pos" c:identifier="gtk_notebook_set_tab_pos">
        <doc xml:whitespace="preserve">Sets the edge at which the tabs for switching pages in the
notebook are drawn.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="pos" transfer-ownership="none">
            <doc xml:whitespace="preserve">the edge to draw the tabs at.</doc>
            <type name="PositionType" c:type="GtkPositionType"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_tab_reorderable"
              c:identifier="gtk_notebook_set_tab_reorderable"
              version="2.10">
        <doc xml:whitespace="preserve">Sets whether the notebook tab can be reordered
via drag and drop or not.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="child" transfer-ownership="none">
            <doc xml:whitespace="preserve">a child #GtkWidget</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="reorderable" transfer-ownership="none">
            <doc xml:whitespace="preserve">whether the tab is reorderable or not.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="enable-popup" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="group-name"
                version="2.24"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Group name for tab drag and drop.</doc>
        <type name="utf8"/>
      </property>
      <property name="page" writable="1" transfer-ownership="none">
        <type name="gint"/>
      </property>
      <property name="scrollable" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="show-border" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="show-tabs" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="tab-pos" writable="1" transfer-ownership="none">
        <type name="PositionType"/>
      </property>
      <field name="container">
        <type name="Container" c:type="GtkContainer"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="NotebookPrivate" c:type="GtkNotebookPrivate*"/>
      </field>
      <glib:signal name="change-current-page">
        <return-value transfer-ownership="none">
          <type name="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="gint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="create-window" version="2.12" introspectable="0">
        <doc xml:whitespace="preserve">The ::create-window signal is emitted when a detachable
tab is dropped on the root window. 
A handler for this signal can create a window containing 
a notebook where the tab will be attached. It is also 
responsible for moving/resizing the window and adding the 
necessary properties to the notebook (e.g. the 
#GtkNotebook:group ).</doc>
        <return-value>
          <doc xml:whitespace="preserve">a #GtkNotebook that @page should be added to, or %NULL.</doc>
          <type name="Notebook"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the tab of @notebook that is being detached</doc>
            <type name="Widget"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <doc xml:whitespace="preserve">the X coordinate where the drop happens</doc>
            <type name="gint"/>
          </parameter>
          <parameter name="p1" transfer-ownership="none">
            <doc xml:whitespace="preserve">the Y coordinate where the drop happens</doc>
            <type name="gint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="focus-tab">
        <return-value transfer-ownership="none">
          <type name="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="NotebookTab"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="move-focus-out">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="DirectionType"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="page-added" version="2.10">
        <doc xml:whitespace="preserve">the ::page-added signal is emitted in the notebook
right after a page is added to the notebook.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the child #GtkWidget affected</doc>
            <type name="Widget"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <doc xml:whitespace="preserve">the new page number for @child</doc>
            <type name="guint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="page-removed" version="2.10">
        <doc xml:whitespace="preserve">the ::page-removed signal is emitted in the notebook
right after a page is removed from the notebook.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the child #GtkWidget affected</doc>
            <type name="Widget"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <doc xml:whitespace="preserve">the @child page number</doc>
            <type name="guint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="page-reordered" version="2.10">
        <doc xml:whitespace="preserve">the ::page-reordered signal is emitted in the notebook
right after a page has been reordered.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the child #GtkWidget affected</doc>
            <type name="Widget"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <doc xml:whitespace="preserve">the new page number for @child</doc>
            <type name="guint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="reorder-tab">
        <return-value transfer-ownership="none">
          <type name="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="DirectionType"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="gboolean"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="select-page">
        <return-value transfer-ownership="none">
          <type name="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="gboolean"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="switch-page">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Widget"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="guint"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="NotebookClass"
            c:type="GtkNotebookClass"
            glib:is-gtype-struct-for="Notebook">
      <field name="parent_class">
        <type name="ContainerClass" c:type="GtkContainerClass"/>
      </field>
      <field name="switch_page">
        <callback name="switch_page">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="notebook" transfer-ownership="none">
              <type name="Notebook" c:type="GtkNotebook*"/>
            </parameter>
            <parameter name="page" transfer-ownership="none">
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
            <parameter name="page_num" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="select_page">
        <callback name="select_page">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="notebook" transfer-ownership="none">
              <type name="Notebook" c:type="GtkNotebook*"/>
            </parameter>
            <parameter name="move_focus" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="focus_tab">
        <callback name="focus_tab">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="notebook" transfer-ownership="none">
              <type name="Notebook" c:type="GtkNotebook*"/>
            </parameter>
            <parameter name="type" transfer-ownership="none">
              <type name="NotebookTab" c:type="GtkNotebookTab"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="change_current_page">
        <callback name="change_current_page">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="notebook" transfer-ownership="none">
              <type name="Notebook" c:type="GtkNotebook*"/>
            </parameter>
            <parameter name="offset" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="move_focus_out">
        <callback name="move_focus_out">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="notebook" transfer-ownership="none">
              <type name="Notebook" c:type="GtkNotebook*"/>
            </parameter>
            <parameter name="direction" transfer-ownership="none">
              <type name="DirectionType" c:type="GtkDirectionType"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="reorder_tab">
        <callback name="reorder_tab">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="notebook" transfer-ownership="none">
              <type name="Notebook" c:type="GtkNotebook*"/>
            </parameter>
            <parameter name="direction" transfer-ownership="none">
              <type name="DirectionType" c:type="GtkDirectionType"/>
            </parameter>
            <parameter name="move_to_last" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="insert_page">
        <callback name="insert_page">
          <return-value transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </return-value>
          <parameters>
            <parameter name="notebook" transfer-ownership="none">
              <type name="Notebook" c:type="GtkNotebook*"/>
            </parameter>
            <parameter name="child" transfer-ownership="none">
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
            <parameter name="tab_label" transfer-ownership="none">
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
            <parameter name="menu_label" transfer-ownership="none">
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
            <parameter name="position" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="create_window" introspectable="0">
        <callback name="create_window" introspectable="0">
          <return-value>
            <type name="Notebook" c:type="GtkNotebook*"/>
          </return-value>
          <parameters>
            <parameter name="notebook" transfer-ownership="none">
              <type name="Notebook" c:type="GtkNotebook*"/>
            </parameter>
            <parameter name="page" transfer-ownership="none">
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
            <parameter name="x" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="y" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_gtk_reserved1" introspectable="0">
        <callback name="_gtk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="NotebookPrivate" c:type="GtkNotebookPrivate" disguised="1">
    </record>
    <enumeration name="NotebookTab"
                 glib:type-name="GtkNotebookTab"
                 glib:get-type="gtk_notebook_tab_get_type"
                 c:type="GtkNotebookTab">
      <member name="first"
              value="0"
              c:identifier="GTK_NOTEBOOK_TAB_FIRST"
              glib:nick="first"/>
      <member name="last"
              value="1"
              c:identifier="GTK_NOTEBOOK_TAB_LAST"
              glib:nick="last"/>
    </enumeration>
    <enumeration name="NumberUpLayout"
                 glib:type-name="GtkNumberUpLayout"
                 glib:get-type="gtk_number_up_layout_get_type"
                 c:type="GtkNumberUpLayout">
      <member name="lrtb"
              value="0"
              c:identifier="GTK_NUMBER_UP_LAYOUT_LEFT_TO_RIGHT_TOP_TO_BOTTOM"
              glib:nick="lrtb"/>
      <member name="lrbt"
              value="1"
              c:identifier="GTK_NUMBER_UP_LAYOUT_LEFT_TO_RIGHT_BOTTOM_TO_TOP"
              glib:nick="lrbt"/>
      <member name="rltb"
              value="2"
              c:identifier="GTK_NUMBER_UP_LAYOUT_RIGHT_TO_LEFT_TOP_TO_BOTTOM"
              glib:nick="rltb"/>
      <member name="rlbt"
              value="3"
              c:identifier="GTK_NUMBER_UP_LAYOUT_RIGHT_TO_LEFT_BOTTOM_TO_TOP"
              glib:nick="rlbt"/>
      <member name="tblr"
              value="4"
              c:identifier="GTK_NUMBER_UP_LAYOUT_TOP_TO_BOTTOM_LEFT_TO_RIGHT"
              glib:nick="tblr"/>
      <member name="tbrl"
              value="5"
              c:identifier="GTK_NUMBER_UP_LAYOUT_TOP_TO_BOTTOM_RIGHT_TO_LEFT"
              glib:nick="tbrl"/>
      <member name="btlr"
              value="6"
              c:identifier="GTK_NUMBER_UP_LAYOUT_BOTTOM_TO_TOP_LEFT_TO_RIGHT"
              glib:nick="btlr"/>
      <member name="btrl"
              value="7"
              c:identifier="GTK_NUMBER_UP_LAYOUT_BOTTOM_TO_TOP_RIGHT_TO_LEFT"
              glib:nick="btrl"/>
    </enumeration>
    <class name="Object"
           c:symbol-prefix="object"
           c:type="GtkObject"
           parent="GObject.InitiallyUnowned"
           abstract="1"
           glib:type-name="GtkObject"
           glib:get-type="gtk_object_get_type"
           glib:type-struct="ObjectClass">
      <method name="destroy" c:identifier="gtk_object_destroy">
        <doc xml:whitespace="preserve">Emits the #GtkObject::destroy signal notifying all reference holders that they should
release the #GtkObject. See the overview documentation at the top of the
page for more details.
The memory for the object itself won't be deleted until
its reference count actually drops to 0; gtk_object_destroy() merely asks
reference holders to release their references, it does not free the object.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <field name="parent_instance">
        <type name="GObject.InitiallyUnowned" c:type="GInitiallyUnowned"/>
      </field>
      <field name="flags">
        <type name="guint32" c:type="guint32"/>
      </field>
      <glib:signal name="destroy">
        <doc xml:whitespace="preserve">Signals that all holders of a reference to the #GtkObject should release
the reference that they hold. May result in finalization of the object
if all references are released.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="ObjectClass"
            c:type="GtkObjectClass"
            glib:is-gtype-struct-for="Object">
      <field name="parent_class">
        <type name="GObject.InitiallyUnownedClass"
              c:type="GInitiallyUnownedClass"/>
      </field>
      <field name="destroy">
        <callback name="destroy">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Object" c:type="GtkObject*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <bitfield name="ObjectFlags"
              deprecated="Do not re-use #GtkObject flags but use your own variable to"
              deprecated-version="2.22"
              glib:type-name="GtkObjectFlags"
              glib:get-type="gtk_object_flags_get_type"
              c:type="GtkObjectFlags">
      <doc xml:whitespace="preserve">Tells about the state of the object.
store flags.</doc>
      <member name="in_destruction"
              value="1"
              c:identifier="GTK_IN_DESTRUCTION"
              glib:nick="in-destruction"/>
      <member name="reserved_1"
              value="4"
              c:identifier="GTK_RESERVED_1"
              glib:nick="reserved-1"/>
      <member name="reserved_2"
              value="8"
              c:identifier="GTK_RESERVED_2"
              glib:nick="reserved-2"/>
    </bitfield>
    <class name="OffscreenWindow"
           c:symbol-prefix="offscreen_window"
           c:type="GtkOffscreenWindow"
           parent="Window"
           glib:type-name="GtkOffscreenWindow"
           glib:get-type="gtk_offscreen_window_get_type"
           glib:type-struct="OffscreenWindowClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Buildable"/>
      <implements name="SizeRequest"/>
      <constructor name="new"
                   c:identifier="gtk_offscreen_window_new"
                   version="2.20">
        <doc xml:whitespace="preserve">Creates a toplevel container widget that is used to retrieve
snapshots of widgets without showing them on the screen.  For
widgets that are on the screen and part of a normal widget
hierarchy, gtk_widget_get_snapshot() can be used instead.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">A pointer to a #GtkWidget</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="get_pixbuf"
              c:identifier="gtk_offscreen_window_get_pixbuf"
              version="2.20">
        <doc xml:whitespace="preserve">Retrieves a snapshot of the contained widget in the form of
a #GdkPixbuf.  This is a new pixbuf with a reference count of 1,
and the application should unreference it once it is no longer
needed.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A #GdkPixbuf pointer, or %NULL.</doc>
          <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
      </method>
      <method name="get_pixmap"
              c:identifier="gtk_offscreen_window_get_pixmap"
              version="2.20">
        <doc xml:whitespace="preserve">Retrieves a snapshot of the contained widget in the form of
a #GdkPixmap.  If you need to keep this around over window
resizes then you should add a reference to it.
or %NULL.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">A #GdkPixmap pointer to the offscreen pixmap,</doc>
          <type name="Gdk.Pixmap" c:type="GdkPixmap*"/>
        </return-value>
      </method>
      <field name="parent_object">
        <type name="Window" c:type="GtkWindow"/>
      </field>
    </class>
    <record name="OffscreenWindowClass"
            c:type="GtkOffscreenWindowClass"
            glib:is-gtype-struct-for="OffscreenWindow">
      <field name="parent_class">
        <type name="WindowClass" c:type="GtkWindowClass"/>
      </field>
    </record>
    <interface name="Orientable"
               c:symbol-prefix="orientable"
               c:type="GtkOrientable"
               glib:type-name="GtkOrientable"
               glib:get-type="gtk_orientable_get_type"
               glib:type-struct="OrientableIface">
      <method name="get_orientation"
              c:identifier="gtk_orientable_get_orientation"
              version="2.16">
        <doc xml:whitespace="preserve">Retrieves the orientation of the @orientable.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the orientation of the @orientable.</doc>
          <type name="Orientation" c:type="GtkOrientation"/>
        </return-value>
      </method>
      <method name="set_orientation"
              c:identifier="gtk_orientable_set_orientation"
              version="2.16">
        <doc xml:whitespace="preserve">Sets the orientation of the @orientable.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="orientation" transfer-ownership="none">
            <doc xml:whitespace="preserve">the orientable's new orientation.</doc>
            <type name="Orientation" c:type="GtkOrientation"/>
          </parameter>
        </parameters>
      </method>
      <property name="orientation"
                version="2.16"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The orientation of the orientable.</doc>
        <type name="Orientation"/>
      </property>
    </interface>
    <record name="OrientableIface"
            c:type="GtkOrientableIface"
            glib:is-gtype-struct-for="Orientable">
      <field name="base_iface">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
    </record>
    <enumeration name="Orientation"
                 glib:type-name="GtkOrientation"
                 glib:get-type="gtk_orientation_get_type"
                 c:type="GtkOrientation">
      <member name="horizontal"
              value="0"
              c:identifier="GTK_ORIENTATION_HORIZONTAL"
              glib:nick="horizontal"/>
      <member name="vertical"
              value="1"
              c:identifier="GTK_ORIENTATION_VERTICAL"
              glib:nick="vertical"/>
    </enumeration>
    <constant name="PAPER_NAME_A3" value="iso_a3">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PAPER_NAME_A4" value="iso_a4">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PAPER_NAME_A5" value="iso_a5">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PAPER_NAME_B5" value="iso_b5">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PAPER_NAME_EXECUTIVE" value="na_executive">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PAPER_NAME_LEGAL" value="na_legal">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PAPER_NAME_LETTER" value="na_letter">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PARAM_READABLE" value="0">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="PARAM_READWRITE" value="0">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="PARAM_WRITABLE" value="0">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="PATH_PRIO_MASK" value="15">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="PRINT_SETTINGS_COLLATE" value="collate">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PRINT_SETTINGS_DEFAULT_SOURCE" value="default-source">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PRINT_SETTINGS_DITHER" value="dither">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PRINT_SETTINGS_DUPLEX" value="duplex">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PRINT_SETTINGS_FINISHINGS" value="finishings">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PRINT_SETTINGS_MEDIA_TYPE" value="media-type">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PRINT_SETTINGS_NUMBER_UP" value="number-up">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PRINT_SETTINGS_NUMBER_UP_LAYOUT" value="number-up-layout">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PRINT_SETTINGS_N_COPIES" value="n-copies">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PRINT_SETTINGS_ORIENTATION" value="orientation">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PRINT_SETTINGS_OUTPUT_BIN" value="output-bin">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PRINT_SETTINGS_OUTPUT_FILE_FORMAT"
              value="output-file-format">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PRINT_SETTINGS_OUTPUT_URI" value="output-uri">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PRINT_SETTINGS_PAGE_RANGES" value="page-ranges">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PRINT_SETTINGS_PAGE_SET" value="page-set">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PRINT_SETTINGS_PAPER_FORMAT" value="paper-format">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PRINT_SETTINGS_PAPER_HEIGHT" value="paper-height">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PRINT_SETTINGS_PAPER_WIDTH" value="paper-width">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PRINT_SETTINGS_PRINTER" value="printer">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PRINT_SETTINGS_PRINTER_LPI" value="printer-lpi">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PRINT_SETTINGS_PRINT_PAGES" value="print-pages">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PRINT_SETTINGS_QUALITY" value="quality">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PRINT_SETTINGS_RESOLUTION" value="resolution">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PRINT_SETTINGS_RESOLUTION_X" value="resolution-x">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PRINT_SETTINGS_RESOLUTION_Y" value="resolution-y">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PRINT_SETTINGS_REVERSE" value="reverse">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PRINT_SETTINGS_SCALE" value="scale">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PRINT_SETTINGS_USE_COLOR" value="use-color">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PRINT_SETTINGS_WIN32_DRIVER_EXTRA"
              value="win32-driver-extra">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PRINT_SETTINGS_WIN32_DRIVER_VERSION"
              value="win32-driver-version">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PRIORITY_RESIZE" value="10">
      <type name="gint" c:type="gint"/>
    </constant>
    <enumeration name="PackDirection"
                 glib:type-name="GtkPackDirection"
                 glib:get-type="gtk_pack_direction_get_type"
                 c:type="GtkPackDirection">
      <member name="ltr"
              value="0"
              c:identifier="GTK_PACK_DIRECTION_LTR"
              glib:nick="ltr"/>
      <member name="rtl"
              value="1"
              c:identifier="GTK_PACK_DIRECTION_RTL"
              glib:nick="rtl"/>
      <member name="ttb"
              value="2"
              c:identifier="GTK_PACK_DIRECTION_TTB"
              glib:nick="ttb"/>
      <member name="btt"
              value="3"
              c:identifier="GTK_PACK_DIRECTION_BTT"
              glib:nick="btt"/>
    </enumeration>
    <enumeration name="PackType"
                 glib:type-name="GtkPackType"
                 glib:get-type="gtk_pack_type_get_type"
                 c:type="GtkPackType">
      <member name="start"
              value="0"
              c:identifier="GTK_PACK_START"
              glib:nick="start"/>
      <member name="end"
              value="1"
              c:identifier="GTK_PACK_END"
              glib:nick="end"/>
    </enumeration>
    <enumeration name="PageOrientation"
                 glib:type-name="GtkPageOrientation"
                 glib:get-type="gtk_page_orientation_get_type"
                 c:type="GtkPageOrientation">
      <member name="portrait"
              value="0"
              c:identifier="GTK_PAGE_ORIENTATION_PORTRAIT"
              glib:nick="portrait"/>
      <member name="landscape"
              value="1"
              c:identifier="GTK_PAGE_ORIENTATION_LANDSCAPE"
              glib:nick="landscape"/>
      <member name="reverse_portrait"
              value="2"
              c:identifier="GTK_PAGE_ORIENTATION_REVERSE_PORTRAIT"
              glib:nick="reverse-portrait"/>
      <member name="reverse_landscape"
              value="3"
              c:identifier="GTK_PAGE_ORIENTATION_REVERSE_LANDSCAPE"
              glib:nick="reverse-landscape"/>
    </enumeration>
    <record name="PageRange" c:type="GtkPageRange">
      <field name="start" writable="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="end" writable="1">
        <type name="gint" c:type="gint"/>
      </field>
    </record>
    <enumeration name="PageSet"
                 glib:type-name="GtkPageSet"
                 glib:get-type="gtk_page_set_get_type"
                 c:type="GtkPageSet">
      <member name="all"
              value="0"
              c:identifier="GTK_PAGE_SET_ALL"
              glib:nick="all"/>
      <member name="even"
              value="1"
              c:identifier="GTK_PAGE_SET_EVEN"
              glib:nick="even"/>
      <member name="odd"
              value="2"
              c:identifier="GTK_PAGE_SET_ODD"
              glib:nick="odd"/>
    </enumeration>
    <class name="PageSetup"
           c:symbol-prefix="page_setup"
           c:type="GtkPageSetup"
           parent="GObject.Object"
           glib:type-name="GtkPageSetup"
           glib:get-type="gtk_page_setup_get_type">
      <constructor name="new" c:identifier="gtk_page_setup_new" version="2.10">
        <doc xml:whitespace="preserve">Creates a new #GtkPageSetup.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new #GtkPageSetup.</doc>
          <type name="PageSetup" c:type="GtkPageSetup*"/>
        </return-value>
      </constructor>
      <constructor name="new_from_file"
                   c:identifier="gtk_page_setup_new_from_file"
                   version="2.12"
                   throws="1">
        <doc xml:whitespace="preserve">Reads the page setup from the file @file_name. Returns a 
new #GtkPageSetup object with the restored page setup, 
or %NULL if an error occurred. See gtk_page_setup_to_file().</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the restored #GtkPageSetup</doc>
          <type name="PageSetup" c:type="GtkPageSetup*"/>
        </return-value>
        <parameters>
          <parameter name="file_name" transfer-ownership="none">
            <doc xml:whitespace="preserve">the filename to read the page setup from</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_key_file"
                   c:identifier="gtk_page_setup_new_from_key_file"
                   version="2.12"
                   throws="1">
        <doc xml:whitespace="preserve">Reads the page setup from the group @group_name in the key file
page setup, or %NULL if an error occurred.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the restored #GtkPageSetup</doc>
          <type name="PageSetup" c:type="GtkPageSetup*"/>
        </return-value>
        <parameters>
          <parameter name="key_file" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GKeyFile to retrieve the page_setup from</doc>
            <type name="GLib.KeyFile" c:type="GKeyFile*"/>
          </parameter>
          <parameter name="group_name"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">the name of the group in the key_file to read, or %NULL to use the default name "Page Setup"</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="copy" c:identifier="gtk_page_setup_copy" version="2.10">
        <doc xml:whitespace="preserve">Copies a #GtkPageSetup.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a copy of @other</doc>
          <type name="PageSetup" c:type="GtkPageSetup*"/>
        </return-value>
      </method>
      <method name="get_bottom_margin"
              c:identifier="gtk_page_setup_get_bottom_margin"
              version="2.10">
        <doc xml:whitespace="preserve">Gets the bottom margin in units of @unit.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the bottom margin</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <parameter name="unit" transfer-ownership="none">
            <doc xml:whitespace="preserve">the unit for the return value</doc>
            <type name="Unit" c:type="GtkUnit"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_left_margin"
              c:identifier="gtk_page_setup_get_left_margin"
              version="2.10">
        <doc xml:whitespace="preserve">Gets the left margin in units of @unit.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the left margin</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <parameter name="unit" transfer-ownership="none">
            <doc xml:whitespace="preserve">the unit for the return value</doc>
            <type name="Unit" c:type="GtkUnit"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_orientation"
              c:identifier="gtk_page_setup_get_orientation"
              version="2.10">
        <doc xml:whitespace="preserve">Gets the page orientation of the #GtkPageSetup.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the page orientation</doc>
          <type name="PageOrientation" c:type="GtkPageOrientation"/>
        </return-value>
      </method>
      <method name="get_page_height"
              c:identifier="gtk_page_setup_get_page_height"
              version="2.10">
        <doc xml:whitespace="preserve">Returns the page height in units of @unit.
Note that this function takes orientation and
margins into consideration. 
See gtk_page_setup_get_paper_height().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the page height.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <parameter name="unit" transfer-ownership="none">
            <doc xml:whitespace="preserve">the unit for the return value</doc>
            <type name="Unit" c:type="GtkUnit"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_page_width"
              c:identifier="gtk_page_setup_get_page_width"
              version="2.10">
        <doc xml:whitespace="preserve">Returns the page width in units of @unit.
Note that this function takes orientation and
margins into consideration. 
See gtk_page_setup_get_paper_width().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the page width.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <parameter name="unit" transfer-ownership="none">
            <doc xml:whitespace="preserve">the unit for the return value</doc>
            <type name="Unit" c:type="GtkUnit"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_paper_height"
              c:identifier="gtk_page_setup_get_paper_height"
              version="2.10">
        <doc xml:whitespace="preserve">Returns the paper height in units of @unit.
Note that this function takes orientation, but 
not margins into consideration.
See gtk_page_setup_get_page_height().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the paper height.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <parameter name="unit" transfer-ownership="none">
            <doc xml:whitespace="preserve">the unit for the return value</doc>
            <type name="Unit" c:type="GtkUnit"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_paper_size"
              c:identifier="gtk_page_setup_get_paper_size"
              version="2.10">
        <doc xml:whitespace="preserve">Gets the paper size of the #GtkPageSetup.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the paper size</doc>
          <type name="PaperSize" c:type="GtkPaperSize*"/>
        </return-value>
      </method>
      <method name="get_paper_width"
              c:identifier="gtk_page_setup_get_paper_width"
              version="2.10">
        <doc xml:whitespace="preserve">Returns the paper width in units of @unit.
Note that this function takes orientation, but 
not margins into consideration. 
See gtk_page_setup_get_page_width().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the paper width.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <parameter name="unit" transfer-ownership="none">
            <doc xml:whitespace="preserve">the unit for the return value</doc>
            <type name="Unit" c:type="GtkUnit"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_right_margin"
              c:identifier="gtk_page_setup_get_right_margin"
              version="2.10">
        <doc xml:whitespace="preserve">Gets the right margin in units of @unit.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the right margin</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <parameter name="unit" transfer-ownership="none">
            <doc xml:whitespace="preserve">the unit for the return value</doc>
            <type name="Unit" c:type="GtkUnit"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_top_margin"
              c:identifier="gtk_page_setup_get_top_margin"
              version="2.10">
        <doc xml:whitespace="preserve">Gets the top margin in units of @unit.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the top margin</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <parameter name="unit" transfer-ownership="none">
            <doc xml:whitespace="preserve">the unit for the return value</doc>
            <type name="Unit" c:type="GtkUnit"/>
          </parameter>
        </parameters>
      </method>
      <method name="load_file"
              c:identifier="gtk_page_setup_load_file"
              version="2.14"
              throws="1">
        <doc xml:whitespace="preserve">Reads the page setup from the file @file_name.
See gtk_page_setup_to_file().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE on success</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="file_name" transfer-ownership="none">
            <doc xml:whitespace="preserve">the filename to read the page setup from</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="load_key_file"
              c:identifier="gtk_page_setup_load_key_file"
              version="2.14"
              throws="1">
        <doc xml:whitespace="preserve">Reads the page setup from the group @group_name in the key file</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE on success</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="key_file" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GKeyFile to retrieve the page_setup from</doc>
            <type name="GLib.KeyFile" c:type="GKeyFile*"/>
          </parameter>
          <parameter name="group_name"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">the name of the group in the key_file to read, or %NULL to use the default name "Page Setup"</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_bottom_margin"
              c:identifier="gtk_page_setup_set_bottom_margin"
              version="2.10">
        <doc xml:whitespace="preserve">Sets the bottom margin of the #GtkPageSetup.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="margin" transfer-ownership="none">
            <doc xml:whitespace="preserve">the new bottom margin in units of @unit</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="unit" transfer-ownership="none">
            <doc xml:whitespace="preserve">the units for @margin</doc>
            <type name="Unit" c:type="GtkUnit"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_left_margin"
              c:identifier="gtk_page_setup_set_left_margin"
              version="2.10">
        <doc xml:whitespace="preserve">Sets the left margin of the #GtkPageSetup.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="margin" transfer-ownership="none">
            <doc xml:whitespace="preserve">the new left margin in units of @unit</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="unit" transfer-ownership="none">
            <doc xml:whitespace="preserve">the units for @margin</doc>
            <type name="Unit" c:type="GtkUnit"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_orientation"
              c:identifier="gtk_page_setup_set_orientation"
              version="2.10">
        <doc xml:whitespace="preserve">Sets the page orientation of the #GtkPageSetup.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="orientation" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkPageOrientation value</doc>
            <type name="PageOrientation" c:type="GtkPageOrientation"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_paper_size"
              c:identifier="gtk_page_setup_set_paper_size"
              version="2.10">
        <doc xml:whitespace="preserve">Sets the paper size of the #GtkPageSetup without
changing the margins. See 
gtk_page_setup_set_paper_size_and_default_margins().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="size" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkPaperSize</doc>
            <type name="PaperSize" c:type="GtkPaperSize*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_paper_size_and_default_margins"
              c:identifier="gtk_page_setup_set_paper_size_and_default_margins"
              version="2.10">
        <doc xml:whitespace="preserve">Sets the paper size of the #GtkPageSetup and modifies
the margins according to the new paper size.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="size" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkPaperSize</doc>
            <type name="PaperSize" c:type="GtkPaperSize*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_right_margin"
              c:identifier="gtk_page_setup_set_right_margin"
              version="2.10">
        <doc xml:whitespace="preserve">Sets the right margin of the #GtkPageSetup.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="margin" transfer-ownership="none">
            <doc xml:whitespace="preserve">the new right margin in units of @unit</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="unit" transfer-ownership="none">
            <doc xml:whitespace="preserve">the units for @margin</doc>
            <type name="Unit" c:type="GtkUnit"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_top_margin"
              c:identifier="gtk_page_setup_set_top_margin"
              version="2.10">
        <doc xml:whitespace="preserve">Sets the top margin of the #GtkPageSetup.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="margin" transfer-ownership="none">
            <doc xml:whitespace="preserve">the new top margin in units of @unit</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="unit" transfer-ownership="none">
            <doc xml:whitespace="preserve">the units for @margin</doc>
            <type name="Unit" c:type="GtkUnit"/>
          </parameter>
        </parameters>
      </method>
      <method name="to_file"
              c:identifier="gtk_page_setup_to_file"
              version="2.12"
              throws="1">
        <doc xml:whitespace="preserve">This function saves the information from @setup to @file_name.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE on success</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="file_name" transfer-ownership="none">
            <doc xml:whitespace="preserve">the file to save to</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="to_key_file"
              c:identifier="gtk_page_setup_to_key_file"
              version="2.12">
        <doc xml:whitespace="preserve">This function adds the page setup from @setup to @key_file.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="key_file" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GKeyFile to save the page setup to</doc>
            <type name="GLib.KeyFile" c:type="GKeyFile*"/>
          </parameter>
          <parameter name="group_name" transfer-ownership="none">
            <doc xml:whitespace="preserve">the group to add the settings to in @key_file, or %NULL to use the default name "Page Setup"</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
    </class>
    <callback name="PageSetupDoneFunc" c:type="GtkPageSetupDoneFunc">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="page_setup" transfer-ownership="none">
          <type name="PageSetup" c:type="GtkPageSetup*"/>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <class name="Paned"
           c:symbol-prefix="paned"
           c:type="GtkPaned"
           parent="Container"
           glib:type-name="GtkPaned"
           glib:get-type="gtk_paned_get_type"
           glib:type-struct="PanedClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Buildable"/>
      <implements name="Orientable"/>
      <implements name="SizeRequest"/>
      <constructor name="new" c:identifier="gtk_paned_new" version="3.0">
        <doc xml:whitespace="preserve">Creates a new #GtkPaned widget.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a new #GtkPaned.</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="orientation" transfer-ownership="none">
            <doc xml:whitespace="preserve">the paned's orientation.</doc>
            <type name="Orientation" c:type="GtkOrientation"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="add1" c:identifier="gtk_paned_add1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="child" transfer-ownership="none">
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add2" c:identifier="gtk_paned_add2">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="child" transfer-ownership="none">
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_child1"
              c:identifier="gtk_paned_get_child1"
              version="2.4">
        <doc xml:whitespace="preserve">Obtains the first child of the paned widget.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">first child, or %NULL if it is not set.</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
      </method>
      <method name="get_child2"
              c:identifier="gtk_paned_get_child2"
              version="2.4">
        <doc xml:whitespace="preserve">Obtains the second child of the paned widget.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">second child, or %NULL if it is not set.</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
      </method>
      <method name="get_handle_window"
              c:identifier="gtk_paned_get_handle_window"
              version="2.20">
        <doc xml:whitespace="preserve">Returns the #GdkWindow of the handle. This function is
useful when handling button or motion events because it
enables the callback to distinguish between the window
of the paned, a child and the handle.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the paned's handle window.</doc>
          <type name="Gdk.Window" c:type="GdkWindow*"/>
        </return-value>
      </method>
      <method name="get_position" c:identifier="gtk_paned_get_position">
        <doc xml:whitespace="preserve">Obtains the position of the divider between the two panes.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">position of the divider</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="pack1" c:identifier="gtk_paned_pack1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="child" transfer-ownership="none">
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="resize" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="shrink" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="pack2" c:identifier="gtk_paned_pack2">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="child" transfer-ownership="none">
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="resize" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="shrink" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_position" c:identifier="gtk_paned_set_position">
        <doc xml:whitespace="preserve">Sets the position of the divider between the two panes.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="position" transfer-ownership="none">
            <doc xml:whitespace="preserve">pixel position of divider, a negative value means that the position is unset.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <property name="max-position" version="2.4" transfer-ownership="none">
        <doc xml:whitespace="preserve">The largest possible value for the position property. This property is derived from the
size and shrinkability of the widget's children.</doc>
        <type name="gint"/>
      </property>
      <property name="min-position" version="2.4" transfer-ownership="none">
        <doc xml:whitespace="preserve">The smallest possible value for the position property. This property is derived from the
size and shrinkability of the widget's children.</doc>
        <type name="gint"/>
      </property>
      <property name="position" writable="1" transfer-ownership="none">
        <type name="gint"/>
      </property>
      <property name="position-set" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <field name="container">
        <type name="Container" c:type="GtkContainer"/>
      </field>
      <field name="priv">
        <type name="PanedPrivate" c:type="GtkPanedPrivate*"/>
      </field>
      <glib:signal name="accept-position" version="2.0">
        <doc xml:whitespace="preserve">The ::accept-position signal is a 
&lt;link linkend="keybinding-signals"&gt;keybinding signal&lt;/link&gt;
which gets emitted to accept the current position of the handle when 
moving it using key bindings.
The default binding for this signal is Return or Space.</doc>
        <return-value transfer-ownership="none">
          <type name="gboolean"/>
        </return-value>
      </glib:signal>
      <glib:signal name="cancel-position" version="2.0">
        <doc xml:whitespace="preserve">The ::cancel-position signal is a 
&lt;link linkend="keybinding-signals"&gt;keybinding signal&lt;/link&gt;
which gets emitted to cancel moving the position of the handle using key 
bindings. The position of the handle will be reset to the value prior to 
moving it.
The default binding for this signal is Escape.</doc>
        <return-value transfer-ownership="none">
          <type name="gboolean"/>
        </return-value>
      </glib:signal>
      <glib:signal name="cycle-child-focus" version="2.0">
        <doc xml:whitespace="preserve">The ::cycle-child-focus signal is a 
&lt;link linkend="keybinding-signals"&gt;keybinding signal&lt;/link&gt;
which gets emitted to cycle the focus between the children of the paned.
The default binding is f6.</doc>
        <return-value transfer-ownership="none">
          <type name="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">whether cycling backward or forward</doc>
            <type name="gboolean"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="cycle-handle-focus" version="2.0">
        <doc xml:whitespace="preserve">The ::cycle-handle-focus signal is a 
&lt;link linkend="keybinding-signals"&gt;keybinding signal&lt;/link&gt;
which gets emitted to cycle whether the paned should grab focus to allow
the user to change position of the handle by using key bindings.
The default binding for this signal is f8.</doc>
        <return-value transfer-ownership="none">
          <type name="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">whether cycling backward or forward</doc>
            <type name="gboolean"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="move-handle" version="2.0">
        <doc xml:whitespace="preserve">The ::move-handle signal is a 
&lt;link linkend="keybinding-signals"&gt;keybinding signal&lt;/link&gt;
which gets emitted to move the handle when the user is using key bindings 
to move it.</doc>
        <return-value transfer-ownership="none">
          <type name="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkScrollType</doc>
            <type name="ScrollType"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="toggle-handle-focus" version="2.0">
        <doc xml:whitespace="preserve">The ::toggle-handle-focus is a 
&lt;link linkend="keybinding-signals"&gt;keybinding signal&lt;/link&gt;
which gets emitted to accept the current position of the handle and then 
move focus to the next widget in the focus chain.
The default binding is Tab.</doc>
        <return-value transfer-ownership="none">
          <type name="gboolean"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="PanedClass"
            c:type="GtkPanedClass"
            glib:is-gtype-struct-for="Paned">
      <field name="parent_class">
        <type name="ContainerClass" c:type="GtkContainerClass"/>
      </field>
      <field name="cycle_child_focus">
        <callback name="cycle_child_focus">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="paned" transfer-ownership="none">
              <type name="Paned" c:type="GtkPaned*"/>
            </parameter>
            <parameter name="reverse" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="toggle_handle_focus">
        <callback name="toggle_handle_focus">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="paned" transfer-ownership="none">
              <type name="Paned" c:type="GtkPaned*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="move_handle">
        <callback name="move_handle">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="paned" transfer-ownership="none">
              <type name="Paned" c:type="GtkPaned*"/>
            </parameter>
            <parameter name="scroll" transfer-ownership="none">
              <type name="ScrollType" c:type="GtkScrollType"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="cycle_handle_focus">
        <callback name="cycle_handle_focus">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="paned" transfer-ownership="none">
              <type name="Paned" c:type="GtkPaned*"/>
            </parameter>
            <parameter name="reverse" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="accept_position">
        <callback name="accept_position">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="paned" transfer-ownership="none">
              <type name="Paned" c:type="GtkPaned*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="cancel_position">
        <callback name="cancel_position">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="paned" transfer-ownership="none">
              <type name="Paned" c:type="GtkPaned*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_gtk_reserved1" introspectable="0">
        <callback name="_gtk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved2" introspectable="0">
        <callback name="_gtk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved3" introspectable="0">
        <callback name="_gtk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved4" introspectable="0">
        <callback name="_gtk_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="PanedPrivate" c:type="GtkPanedPrivate" disguised="1">
    </record>
    <record name="PaperSize"
            c:type="GtkPaperSize"
            glib:type-name="GtkPaperSize"
            glib:get-type="gtk_paper_size_get_type"
            c:symbol-prefix="paper_size">
      <constructor name="new" c:identifier="gtk_paper_size_new" version="2.10">
        <doc xml:whitespace="preserve">Creates a new #GtkPaperSize object by parsing a
&lt;ulink url="ftp://ftp.pwg.org/pub/pwg/candidates/cs-pwgmsn10-20020226-5101.1.pdf"&gt;PWG 5101.1-2002&lt;/ulink&gt;
paper name.
If @name is %NULL, the default paper size is returned,
see gtk_paper_size_get_default().
to free it</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new #GtkPaperSize, use gtk_paper_size_free()</doc>
          <type name="PaperSize" c:type="GtkPaperSize*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">a paper size name, or %NULL</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_custom"
                   c:identifier="gtk_paper_size_new_custom"
                   version="2.10">
        <doc xml:whitespace="preserve">Creates a new #GtkPaperSize object with the
given parameters.
to free it</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new #GtkPaperSize object, use gtk_paper_size_free()</doc>
          <type name="PaperSize" c:type="GtkPaperSize*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:whitespace="preserve">the paper name</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="display_name" transfer-ownership="none">
            <doc xml:whitespace="preserve">the human-readable name</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:whitespace="preserve">the paper width, in units of @unit</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:whitespace="preserve">the paper height, in units of @unit</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="unit" transfer-ownership="none">
            <doc xml:whitespace="preserve">the unit for @width and @height</doc>
            <type name="Unit" c:type="GtkUnit"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_key_file"
                   c:identifier="gtk_paper_size_new_from_key_file"
                   version="2.12"
                   throws="1">
        <doc xml:whitespace="preserve">Reads a paper size from the group @group_name in the key file
paper size, or %NULL if an error occurred.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new #GtkPaperSize object with the restored</doc>
          <type name="PaperSize" c:type="GtkPaperSize*"/>
        </return-value>
        <parameters>
          <parameter name="key_file" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GKeyFile to retrieve the papersize from</doc>
            <type name="GLib.KeyFile" c:type="GKeyFile*"/>
          </parameter>
          <parameter name="group_name" transfer-ownership="none">
            <doc xml:whitespace="preserve">the name ofthe group in the key file to read, or %NULL to read the first group</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_ppd"
                   c:identifier="gtk_paper_size_new_from_ppd"
                   version="2.10">
        <doc xml:whitespace="preserve">Creates a new #GtkPaperSize object by using 
PPD information. 
If @ppd_name is not a recognized PPD paper name, 
construct a custom #GtkPaperSize object.
to free it</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new #GtkPaperSize, use gtk_paper_size_free()</doc>
          <type name="PaperSize" c:type="GtkPaperSize*"/>
        </return-value>
        <parameters>
          <parameter name="ppd_name" transfer-ownership="none">
            <doc xml:whitespace="preserve">a PPD paper name</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="ppd_display_name" transfer-ownership="none">
            <doc xml:whitespace="preserve">the corresponding human-readable name</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:whitespace="preserve">the paper width, in points</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:whitespace="preserve">the paper height in points</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="copy" c:identifier="gtk_paper_size_copy" version="2.10">
        <doc xml:whitespace="preserve">Copies an existing #GtkPaperSize.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a copy of @other</doc>
          <type name="PaperSize" c:type="GtkPaperSize*"/>
        </return-value>
      </method>
      <method name="free" c:identifier="gtk_paper_size_free" version="2.10">
        <doc xml:whitespace="preserve">Free the given #GtkPaperSize object.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="get_default_bottom_margin"
              c:identifier="gtk_paper_size_get_default_bottom_margin"
              version="2.10">
        <doc xml:whitespace="preserve">Gets the default bottom margin for the #GtkPaperSize.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the default bottom margin</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <parameter name="unit" transfer-ownership="none">
            <doc xml:whitespace="preserve">the unit for the return value</doc>
            <type name="Unit" c:type="GtkUnit"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_default_left_margin"
              c:identifier="gtk_paper_size_get_default_left_margin"
              version="2.10">
        <doc xml:whitespace="preserve">Gets the default left margin for the #GtkPaperSize.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the default left margin</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <parameter name="unit" transfer-ownership="none">
            <doc xml:whitespace="preserve">the unit for the return value</doc>
            <type name="Unit" c:type="GtkUnit"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_default_right_margin"
              c:identifier="gtk_paper_size_get_default_right_margin"
              version="2.10">
        <doc xml:whitespace="preserve">Gets the default right margin for the #GtkPaperSize.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the default right margin</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <parameter name="unit" transfer-ownership="none">
            <doc xml:whitespace="preserve">the unit for the return value</doc>
            <type name="Unit" c:type="GtkUnit"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_default_top_margin"
              c:identifier="gtk_paper_size_get_default_top_margin"
              version="2.10">
        <doc xml:whitespace="preserve">Gets the default top margin for the #GtkPaperSize.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the default top margin</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <parameter name="unit" transfer-ownership="none">
            <doc xml:whitespace="preserve">the unit for the return value</doc>
            <type name="Unit" c:type="GtkUnit"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_display_name"
              c:identifier="gtk_paper_size_get_display_name"
              version="2.10">
        <doc xml:whitespace="preserve">Gets the human-readable name of the #GtkPaperSize.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the human-readable name of @size</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_height"
              c:identifier="gtk_paper_size_get_height"
              version="2.10">
        <doc xml:whitespace="preserve">Gets the paper height of the #GtkPaperSize, in 
units of @unit.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the paper height</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <parameter name="unit" transfer-ownership="none">
            <doc xml:whitespace="preserve">the unit for the return value</doc>
            <type name="Unit" c:type="GtkUnit"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_name"
              c:identifier="gtk_paper_size_get_name"
              version="2.10">
        <doc xml:whitespace="preserve">Gets the name of the #GtkPaperSize.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the name of @size</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_ppd_name"
              c:identifier="gtk_paper_size_get_ppd_name"
              version="2.10">
        <doc xml:whitespace="preserve">Gets the PPD name of the #GtkPaperSize, which
may be %NULL.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the PPD name of @size</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_width"
              c:identifier="gtk_paper_size_get_width"
              version="2.10">
        <doc xml:whitespace="preserve">Gets the paper width of the #GtkPaperSize, in 
units of @unit.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the paper width</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <parameter name="unit" transfer-ownership="none">
            <doc xml:whitespace="preserve">the unit for the return value</doc>
            <type name="Unit" c:type="GtkUnit"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_custom" c:identifier="gtk_paper_size_is_custom">
        <doc xml:whitespace="preserve">Returns %TRUE if @size is not a standard paper size.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">whether @size is a custom paper size.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="is_equal"
              c:identifier="gtk_paper_size_is_equal"
              version="2.10">
        <doc xml:whitespace="preserve">Compares two #GtkPaperSize objects.
represent the same paper size</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE, if @size1 and @size2</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="size2" transfer-ownership="none">
            <doc xml:whitespace="preserve">another #GtkPaperSize object</doc>
            <type name="PaperSize" c:type="GtkPaperSize*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_size"
              c:identifier="gtk_paper_size_set_size"
              version="2.10">
        <doc xml:whitespace="preserve">Changes the dimensions of a @size to @width x @height.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="width" transfer-ownership="none">
            <doc xml:whitespace="preserve">the new width in units of @unit</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:whitespace="preserve">the new height in units of @unit</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="unit" transfer-ownership="none">
            <doc xml:whitespace="preserve">the unit for @width and @height</doc>
            <type name="Unit" c:type="GtkUnit"/>
          </parameter>
        </parameters>
      </method>
      <method name="to_key_file"
              c:identifier="gtk_paper_size_to_key_file"
              version="2.12">
        <doc xml:whitespace="preserve">This function adds the paper size from @size to @key_file.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="key_file" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GKeyFile to save the paper size to</doc>
            <type name="GLib.KeyFile" c:type="GKeyFile*"/>
          </parameter>
          <parameter name="group_name" transfer-ownership="none">
            <doc xml:whitespace="preserve">the group to add the settings to in @key_file</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <enumeration name="PathPriorityType"
                 glib:type-name="GtkPathPriorityType"
                 glib:get-type="gtk_path_priority_type_get_type"
                 c:type="GtkPathPriorityType">
      <member name="lowest"
              value="0"
              c:identifier="GTK_PATH_PRIO_LOWEST"
              glib:nick="lowest"/>
      <member name="gtk"
              value="4"
              c:identifier="GTK_PATH_PRIO_GTK"
              glib:nick="gtk"/>
      <member name="application"
              value="8"
              c:identifier="GTK_PATH_PRIO_APPLICATION"
              glib:nick="application"/>
      <member name="theme"
              value="10"
              c:identifier="GTK_PATH_PRIO_THEME"
              glib:nick="theme"/>
      <member name="rc"
              value="12"
              c:identifier="GTK_PATH_PRIO_RC"
              glib:nick="rc"/>
      <member name="highest"
              value="15"
              c:identifier="GTK_PATH_PRIO_HIGHEST"
              glib:nick="highest"/>
    </enumeration>
    <enumeration name="PathType"
                 glib:type-name="GtkPathType"
                 glib:get-type="gtk_path_type_get_type"
                 c:type="GtkPathType">
      <member name="widget"
              value="0"
              c:identifier="GTK_PATH_WIDGET"
              glib:nick="widget"/>
      <member name="widget_class"
              value="1"
              c:identifier="GTK_PATH_WIDGET_CLASS"
              glib:nick="widget-class"/>
      <member name="class"
              value="2"
              c:identifier="GTK_PATH_CLASS"
              glib:nick="class"/>
    </enumeration>
    <class name="Plug"
           c:symbol-prefix="plug"
           c:type="GtkPlug"
           parent="Window"
           glib:type-name="GtkPlug"
           glib:get-type="gtk_plug_get_type"
           glib:type-struct="PlugClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Buildable"/>
      <implements name="SizeRequest"/>
      <constructor name="new" c:identifier="gtk_plug_new">
        <doc xml:whitespace="preserve">Creates a new plug widget inside the #GtkSocket identified
by @socket_id. If @socket_id is 0, the plug is left "unplugged" and
can later be plugged into a #GtkSocket by  gtk_socket_add_id().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the new #GtkPlug widget.</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="socket_id" transfer-ownership="none">
            <doc xml:whitespace="preserve">the window ID of the socket, or 0.</doc>
            <type name="Gdk.NativeWindow" c:type="GdkNativeWindow"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_display"
                   c:identifier="gtk_plug_new_for_display"
                   version="2.2">
        <doc xml:whitespace="preserve">Create a new plug widget inside the #GtkSocket identified by socket_id.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the new #GtkPlug widget.</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="display" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GdkDisplay on which @socket_id is displayed</doc>
            <type name="Gdk.Display" c:type="GdkDisplay*"/>
          </parameter>
          <parameter name="socket_id" transfer-ownership="none">
            <doc xml:whitespace="preserve">the XID of the socket's window.</doc>
            <type name="Gdk.NativeWindow" c:type="GdkNativeWindow"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="construct" c:identifier="gtk_plug_construct">
        <doc xml:whitespace="preserve">Finish the initialization of @plug for a given #GtkSocket identified by</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="socket_id" transfer-ownership="none">
            <doc xml:whitespace="preserve">the XID of the socket's window.</doc>
            <type name="Gdk.NativeWindow" c:type="GdkNativeWindow"/>
          </parameter>
        </parameters>
      </method>
      <method name="construct_for_display"
              c:identifier="gtk_plug_construct_for_display"
              version="2.2">
        <doc xml:whitespace="preserve">Finish the initialization of @plug for a given #GtkSocket identified by
This function will generally only be used by classes deriving from #GtkPlug.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="display" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GdkDisplay associated with @socket_id's #GtkSocket.</doc>
            <type name="Gdk.Display" c:type="GdkDisplay*"/>
          </parameter>
          <parameter name="socket_id" transfer-ownership="none">
            <doc xml:whitespace="preserve">the XID of the socket's window.</doc>
            <type name="Gdk.NativeWindow" c:type="GdkNativeWindow"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_embedded"
              c:identifier="gtk_plug_get_embedded"
              version="2.14">
        <doc xml:whitespace="preserve">Determines whether the plug is embedded in a socket.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the plug is embedded in a socket</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_id" c:identifier="gtk_plug_get_id">
        <doc xml:whitespace="preserve">Gets the window ID of a #GtkPlug widget, which can then
be used to embed this window inside another window, for
instance with gtk_socket_add_id().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the window ID for the plug</doc>
          <type name="Gdk.NativeWindow" c:type="GdkNativeWindow"/>
        </return-value>
      </method>
      <method name="get_socket_window"
              c:identifier="gtk_plug_get_socket_window"
              version="2.14">
        <doc xml:whitespace="preserve">Retrieves the socket the plug is embedded in.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the window of the socket, or %NULL</doc>
          <type name="Gdk.Window" c:type="GdkWindow*"/>
        </return-value>
      </method>
      <property name="embedded" version="2.12" transfer-ownership="none">
        <doc xml:whitespace="preserve">%TRUE if the plug is embedded in a socket.</doc>
        <type name="gboolean"/>
      </property>
      <property name="socket-window" version="2.14" transfer-ownership="none">
        <doc xml:whitespace="preserve">The window of the socket the plug is embedded in.</doc>
        <type name="Gdk.Window"/>
      </property>
      <field name="window">
        <type name="Window" c:type="GtkWindow"/>
      </field>
      <field name="priv">
        <type name="PlugPrivate" c:type="GtkPlugPrivate*"/>
      </field>
      <glib:signal name="embedded">
        <doc xml:whitespace="preserve">Gets emitted when the plug becomes embedded in a socket.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="PlugClass"
            c:type="GtkPlugClass"
            glib:is-gtype-struct-for="Plug">
      <field name="parent_class">
        <type name="WindowClass" c:type="GtkWindowClass"/>
      </field>
      <field name="embedded">
        <callback name="embedded">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="plug" transfer-ownership="none">
              <type name="Plug" c:type="GtkPlug*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_gtk_reserved1" introspectable="0">
        <callback name="_gtk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved2" introspectable="0">
        <callback name="_gtk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved3" introspectable="0">
        <callback name="_gtk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved4" introspectable="0">
        <callback name="_gtk_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="PlugPrivate" c:type="GtkPlugPrivate" disguised="1">
    </record>
    <enumeration name="PolicyType"
                 glib:type-name="GtkPolicyType"
                 glib:get-type="gtk_policy_type_get_type"
                 c:type="GtkPolicyType">
      <member name="always"
              value="0"
              c:identifier="GTK_POLICY_ALWAYS"
              glib:nick="always"/>
      <member name="automatic"
              value="1"
              c:identifier="GTK_POLICY_AUTOMATIC"
              glib:nick="automatic"/>
      <member name="never"
              value="2"
              c:identifier="GTK_POLICY_NEVER"
              glib:nick="never"/>
    </enumeration>
    <enumeration name="PositionType"
                 glib:type-name="GtkPositionType"
                 glib:get-type="gtk_position_type_get_type"
                 c:type="GtkPositionType">
      <member name="left"
              value="0"
              c:identifier="GTK_POS_LEFT"
              glib:nick="left"/>
      <member name="right"
              value="1"
              c:identifier="GTK_POS_RIGHT"
              glib:nick="right"/>
      <member name="top" value="2" c:identifier="GTK_POS_TOP" glib:nick="top"/>
      <member name="bottom"
              value="3"
              c:identifier="GTK_POS_BOTTOM"
              glib:nick="bottom"/>
    </enumeration>
    <class name="PrintContext"
           c:symbol-prefix="print_context"
           c:type="GtkPrintContext"
           parent="GObject.Object"
           glib:type-name="GtkPrintContext"
           glib:get-type="gtk_print_context_get_type">
      <method name="create_pango_context"
              c:identifier="gtk_print_context_create_pango_context"
              version="2.10">
        <doc xml:whitespace="preserve">Creates a new #PangoContext that can be used with the
#GtkPrintContext.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new Pango context for @context</doc>
          <type name="Pango.Context" c:type="PangoContext*"/>
        </return-value>
      </method>
      <method name="create_pango_layout"
              c:identifier="gtk_print_context_create_pango_layout"
              version="2.10">
        <doc xml:whitespace="preserve">Creates a new #PangoLayout that is suitable for use
with the #GtkPrintContext.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new Pango layout for @context</doc>
          <type name="Pango.Layout" c:type="PangoLayout*"/>
        </return-value>
      </method>
      <method name="get_cairo_context"
              c:identifier="gtk_print_context_get_cairo_context"
              version="2.10">
        <doc xml:whitespace="preserve">Obtains the cairo context that is associated with the
#GtkPrintContext.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the cairo context of @context</doc>
          <type name="cairo.Context" c:type="cairo_t*"/>
        </return-value>
      </method>
      <method name="get_dpi_x"
              c:identifier="gtk_print_context_get_dpi_x"
              version="2.10">
        <doc xml:whitespace="preserve">Obtains the horizontal resolution of the #GtkPrintContext,
in dots per inch.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the horizontal resolution of @context</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </method>
      <method name="get_dpi_y"
              c:identifier="gtk_print_context_get_dpi_y"
              version="2.10">
        <doc xml:whitespace="preserve">Obtains the vertical resolution of the #GtkPrintContext,
in dots per inch.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the vertical resolution of @context</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </method>
      <method name="get_hard_margins"
              c:identifier="gtk_print_context_get_hard_margins"
              version="2.20">
        <doc xml:whitespace="preserve">Obtains the hardware printer margins of the #GtkPrintContext, in units.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the hard margins were retrieved</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="top" transfer-ownership="none">
            <doc xml:whitespace="preserve">top hardware printer margin</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="bottom" transfer-ownership="none">
            <doc xml:whitespace="preserve">bottom hardware printer margin</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="left" transfer-ownership="none">
            <doc xml:whitespace="preserve">left hardware printer margin</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="right" transfer-ownership="none">
            <doc xml:whitespace="preserve">right hardware printer margin</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_height"
              c:identifier="gtk_print_context_get_height"
              version="2.10">
        <doc xml:whitespace="preserve">Obtains the height of the #GtkPrintContext, in pixels.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the height of @context</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </method>
      <method name="get_page_setup"
              c:identifier="gtk_print_context_get_page_setup"
              version="2.10">
        <doc xml:whitespace="preserve">Obtains the #GtkPageSetup that determines the page
dimensions of the #GtkPrintContext.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the page setup of @context</doc>
          <type name="PageSetup" c:type="GtkPageSetup*"/>
        </return-value>
      </method>
      <method name="get_pango_fontmap"
              c:identifier="gtk_print_context_get_pango_fontmap"
              version="2.10">
        <doc xml:whitespace="preserve">Returns a #PangoFontMap that is suitable for use
with the #GtkPrintContext.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the font map of @context</doc>
          <type name="Pango.FontMap" c:type="PangoFontMap*"/>
        </return-value>
      </method>
      <method name="get_width"
              c:identifier="gtk_print_context_get_width"
              version="2.10">
        <doc xml:whitespace="preserve">Obtains the width of the #GtkPrintContext, in pixels.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the width of @context</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </method>
      <method name="set_cairo_context"
              c:identifier="gtk_print_context_set_cairo_context"
              version="2.10">
        <doc xml:whitespace="preserve">Sets a new cairo context on a print context. 
This function is intended to be used when implementing
an internal print preview, it is not needed for printing,
since GTK+ itself creates a suitable cairo context in that
case.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="cr" transfer-ownership="none">
            <doc xml:whitespace="preserve">the cairo context</doc>
            <type name="cairo.Context" c:type="cairo_t*"/>
          </parameter>
          <parameter name="dpi_x" transfer-ownership="none">
            <doc xml:whitespace="preserve">the horizontal resolution to use with @cr</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="dpi_y" transfer-ownership="none">
            <doc xml:whitespace="preserve">the vertical resolution to use with @cr</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
    </class>
    <enumeration name="PrintDuplex"
                 glib:type-name="GtkPrintDuplex"
                 glib:get-type="gtk_print_duplex_get_type"
                 c:type="GtkPrintDuplex">
      <member name="simplex"
              value="0"
              c:identifier="GTK_PRINT_DUPLEX_SIMPLEX"
              glib:nick="simplex"/>
      <member name="horizontal"
              value="1"
              c:identifier="GTK_PRINT_DUPLEX_HORIZONTAL"
              glib:nick="horizontal"/>
      <member name="vertical"
              value="2"
              c:identifier="GTK_PRINT_DUPLEX_VERTICAL"
              glib:nick="vertical"/>
    </enumeration>
    <enumeration name="PrintError"
                 glib:type-name="GtkPrintError"
                 glib:get-type="gtk_print_error_get_type"
                 c:type="GtkPrintError"
                 glib:error-quark="gtk_print_error_quark">
      <member name="general"
              value="0"
              c:identifier="GTK_PRINT_ERROR_GENERAL"
              glib:nick="general"/>
      <member name="internal_error"
              value="1"
              c:identifier="GTK_PRINT_ERROR_INTERNAL_ERROR"
              glib:nick="internal-error"/>
      <member name="nomem"
              value="2"
              c:identifier="GTK_PRINT_ERROR_NOMEM"
              glib:nick="nomem"/>
      <member name="invalid_file"
              value="3"
              c:identifier="GTK_PRINT_ERROR_INVALID_FILE"
              glib:nick="invalid-file"/>
    </enumeration>
    <class name="PrintOperation"
           c:symbol-prefix="print_operation"
           c:type="GtkPrintOperation"
           parent="GObject.Object"
           glib:type-name="GtkPrintOperation"
           glib:get-type="gtk_print_operation_get_type"
           glib:type-struct="PrintOperationClass">
      <implements name="PrintOperationPreview"/>
      <constructor name="new"
                   c:identifier="gtk_print_operation_new"
                   version="2.10">
        <doc xml:whitespace="preserve">Creates a new #GtkPrintOperation.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new #GtkPrintOperation</doc>
          <type name="PrintOperation" c:type="GtkPrintOperation*"/>
        </return-value>
      </constructor>
      <method name="cancel"
              c:identifier="gtk_print_operation_cancel"
              version="2.10">
        <doc xml:whitespace="preserve">Cancels a running print operation. This function may
be called from a #GtkPrintOperation::begin-print, 
#GtkPrintOperation::paginate or #GtkPrintOperation::draw-page
signal handler to stop the currently running print 
operation.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="draw_page_finish"
              c:identifier="gtk_print_operation_draw_page_finish"
              version="2.16">
        <doc xml:whitespace="preserve">Signalize that drawing of particular page is complete.
It is called after completion of page drawing (e.g. drawing in another
thread).
If gtk_print_operation_set_defer_drawing() was called before, then this function
has to be called by application. In another case it is called by the library
itself.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="get_default_page_setup"
              c:identifier="gtk_print_operation_get_default_page_setup"
              version="2.10">
        <doc xml:whitespace="preserve">Returns the default page setup, see
gtk_print_operation_set_default_page_setup().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the default page setup</doc>
          <type name="PageSetup" c:type="GtkPageSetup*"/>
        </return-value>
      </method>
      <method name="get_embed_page_setup"
              c:identifier="gtk_print_operation_get_embed_page_setup"
              version="2.18">
        <doc xml:whitespace="preserve">Gets the value of #GtkPrintOperation::embed-page-setup property.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">whether page setup selection combos are embedded</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_error"
              c:identifier="gtk_print_operation_get_error"
              version="2.10"
              throws="1">
        <doc xml:whitespace="preserve">Call this when the result of a print operation is
%GTK_PRINT_OPERATION_RESULT_ERROR, either as returned by 
gtk_print_operation_run(), or in the #GtkPrintOperation::done signal 
handler. The returned #GError will contain more details on what went wrong.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="get_has_selection"
              c:identifier="gtk_print_operation_get_has_selection"
              version="2.18">
        <doc xml:whitespace="preserve">Gets the value of #GtkPrintOperation::has-selection property.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">whether there is a selection</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_n_pages_to_print"
              c:identifier="gtk_print_operation_get_n_pages_to_print"
              version="2.18">
        <doc xml:whitespace="preserve">Returns the number of pages that will be printed.
Note that this value is set during print preparation phase
(%GTK_PRINT_STATUS_PREPARING), so this function should never be
called before the data generation phase (%GTK_PRINT_STATUS_GENERATING_DATA).
You can connect to the #GtkPrintOperation::status-changed signal
and call gtk_print_operation_get_n_pages_to_print() when
print status is %GTK_PRINT_STATUS_GENERATING_DATA.
This is typically used to track the progress of print operation.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the number of pages that will be printed</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="get_print_settings"
              c:identifier="gtk_print_operation_get_print_settings"
              version="2.10">
        <doc xml:whitespace="preserve">Returns the current print settings.
Note that the return value is %NULL until either
gtk_print_operation_set_print_settings() or
gtk_print_operation_run() have been called.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the current print settings of @op.</doc>
          <type name="PrintSettings" c:type="GtkPrintSettings*"/>
        </return-value>
      </method>
      <method name="get_status"
              c:identifier="gtk_print_operation_get_status"
              version="2.10">
        <doc xml:whitespace="preserve">Returns the status of the print operation. 
Also see gtk_print_operation_get_status_string().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the status of the print operation</doc>
          <type name="PrintStatus" c:type="GtkPrintStatus"/>
        </return-value>
      </method>
      <method name="get_status_string"
              c:identifier="gtk_print_operation_get_status_string"
              version="2.10">
        <doc xml:whitespace="preserve">Returns a string representation of the status of the 
print operation. The string is translated and suitable
for displaying the print status e.g. in a #GtkStatusbar.
Use gtk_print_operation_get_status() to obtain a status
value that is suitable for programmatic use. 
of the print operation</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a string representation of the status</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_support_selection"
              c:identifier="gtk_print_operation_get_support_selection"
              version="2.18">
        <doc xml:whitespace="preserve">Gets the value of #GtkPrintOperation::support-selection property.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">whether the application supports print of selection</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="is_finished"
              c:identifier="gtk_print_operation_is_finished"
              version="2.10">
        <doc xml:whitespace="preserve">A convenience function to find out if the print operation
is finished, either successfully (%GTK_PRINT_STATUS_FINISHED)
or unsuccessfully (%GTK_PRINT_STATUS_FINISHED_ABORTED).
can be in a non-finished state even after done has been called, as
the operation status then tracks the print job status on the printer.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE, if the print operation is finished.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="run"
              c:identifier="gtk_print_operation_run"
              version="2.10"
              throws="1">
        <doc xml:whitespace="preserve">Runs the print operation, by first letting the user modify
print settings in the print dialog, and then print the document.
Normally that this function does not return until the rendering of all 
pages is complete. You can connect to the 
#GtkPrintOperation::status-changed signal on @op to obtain some 
information about the progress of the print operation. 
Furthermore, it may use a recursive mainloop to show the print dialog.
If you call gtk_print_operation_set_allow_async() or set the 
#GtkPrintOperation:allow-async property the operation will run 
asynchronously if this is supported on the platform. The 
#GtkPrintOperation::done signal will be emitted with the result of the 
operation when the it is done (i.e. when the dialog is canceled, or when 
the print succeeds or fails).
|[
if (settings != NULL)
gtk_print_operation_set_print_settings (print, settings);
if (page_setup != NULL)
gtk_print_operation_set_default_page_setup (print, page_setup);
g_signal_connect (print, "begin-print", 
G_CALLBACK (begin_print), &amp;data);
g_signal_connect (print, "draw-page", 
G_CALLBACK (draw_page), &amp;data);
res = gtk_print_operation_run (print, 
GTK_PRINT_OPERATION_ACTION_PRINT_DIALOG, 
parent, 
&amp;error);
if (res == GTK_PRINT_OPERATION_RESULT_ERROR)
{
error_dialog = gtk_message_dialog_new (GTK_WINDOW (parent),
GTK_DIALOG_DESTROY_WITH_PARENT,
GTK_MESSAGE_ERROR,
GTK_BUTTONS_CLOSE,
"Error printing file:\n%s",
error-&gt;message);
g_signal_connect (error_dialog, "response", 
G_CALLBACK (gtk_widget_destroy), NULL);
gtk_widget_show (error_dialog);
g_error_free (error);
}
else if (res == GTK_PRINT_OPERATION_RESULT_APPLY)
{
if (settings != NULL)
g_object_unref (settings);
settings = g_object_ref (gtk_print_operation_get_print_settings (print));
}
]|
Note that gtk_print_operation_run() can only be called once on a
given #GtkPrintOperation.
%GTK_PRINT_OPERATION_RESULT_APPLY indicates that the printing was
completed successfully. In this case, it is a good idea to obtain 
the used print settings with gtk_print_operation_get_print_settings() 
and store them for reuse with the next print operation. A value of
%GTK_PRINT_OPERATION_RESULT_IN_PROGRESS means the operation is running
asynchronously, and will emit the #GtkPrintOperation::done signal when 
done.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the result of the print operation. A return value of</doc>
          <type name="PrintOperationResult" c:type="GtkPrintOperationResult"/>
        </return-value>
        <parameters>
          <parameter name="action" transfer-ownership="none">
            <doc xml:whitespace="preserve">the action to start</doc>
            <type name="PrintOperationAction"
                  c:type="GtkPrintOperationAction"/>
          </parameter>
          <parameter name="parent" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">Transient parent of the dialog</doc>
            <type name="Window" c:type="GtkWindow*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_allow_async"
              c:identifier="gtk_print_operation_set_allow_async"
              version="2.10">
        <doc xml:whitespace="preserve">Sets whether the gtk_print_operation_run() may return
before the print operation is completed. Note that
some platforms may not allow asynchronous operation.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="allow_async" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE to allow asynchronous operation</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_current_page"
              c:identifier="gtk_print_operation_set_current_page"
              version="2.10">
        <doc xml:whitespace="preserve">Sets the current page.
If this is called before gtk_print_operation_run(), 
the user will be able to select to print only the current page.
Note that this only makes sense for pre-paginated documents.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="current_page" transfer-ownership="none">
            <doc xml:whitespace="preserve">the current page, 0-based</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_custom_tab_label"
              c:identifier="gtk_print_operation_set_custom_tab_label"
              version="2.10">
        <doc xml:whitespace="preserve">Sets the label for the tab holding custom widgets.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="label" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">the label to use, or %NULL to use the default label</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_default_page_setup"
              c:identifier="gtk_print_operation_set_default_page_setup"
              version="2.10">
        <doc xml:whitespace="preserve">Makes @default_page_setup the default page setup for @op.
This page setup will be used by gtk_print_operation_run(),
but it can be overridden on a per-page basis by connecting
to the #GtkPrintOperation::request-page-setup signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="default_page_setup"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">a #GtkPageSetup, or %NULL</doc>
            <type name="PageSetup" c:type="GtkPageSetup*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_defer_drawing"
              c:identifier="gtk_print_operation_set_defer_drawing"
              version="2.16">
        <doc xml:whitespace="preserve">Sets up the #GtkPrintOperation to wait for calling of
gtk_print_operation_draw_page_finish() from application. It can
be used for drawing page in another thread.
This function must be called in the callback of "draw-page" signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="set_embed_page_setup"
              c:identifier="gtk_print_operation_set_embed_page_setup"
              version="2.18">
        <doc xml:whitespace="preserve">Embed page size combo box and orientation combo box into page setup page.
Selected page setup is stored as default page setup in #GtkPrintOperation.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="embed" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE to embed page setup selection in the #GtkPrintDialog</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_export_filename"
              c:identifier="gtk_print_operation_set_export_filename"
              version="2.10">
        <doc xml:whitespace="preserve">Sets up the #GtkPrintOperation to generate a file instead
of showing the print dialog. The indended use of this function
is for implementing "Export to PDF" actions. Currently, PDF
is the only supported format.
"Print to PDF" support is independent of this and is done
by letting the user pick the "Print to PDF" item from the list
of printers in the print dialog.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:whitespace="preserve">the filename for the exported file</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_has_selection"
              c:identifier="gtk_print_operation_set_has_selection"
              version="2.18">
        <doc xml:whitespace="preserve">Sets whether there is a selection to print.
Application has to set number of pages to which the selection
will draw by gtk_print_operation_set_n_pages() in a callback of
#GtkPrintOperation::begin-print.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="has_selection" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE indicates that a selection exists</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_job_name"
              c:identifier="gtk_print_operation_set_job_name"
              version="2.10">
        <doc xml:whitespace="preserve">Sets the name of the print job. The name is used to identify 
the job (e.g. in monitoring applications like eggcups). 
If you don't set a job name, GTK+ picks a default one by 
numbering successive print jobs.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="job_name" transfer-ownership="none">
            <doc xml:whitespace="preserve">a string that identifies the print job</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_n_pages"
              c:identifier="gtk_print_operation_set_n_pages"
              version="2.10">
        <doc xml:whitespace="preserve">Sets the number of pages in the document. 
This &lt;emphasis&gt;must&lt;/emphasis&gt; be set to a positive number
before the rendering starts. It may be set in a 
#GtkPrintOperation::begin-print signal hander.
Note that the page numbers passed to the 
#GtkPrintOperation::request-page-setup 
and #GtkPrintOperation::draw-page signals are 0-based, i.e. if 
the user chooses to print all pages, the last ::draw-page signal 
will be for page @n_pages - 1.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="n_pages" transfer-ownership="none">
            <doc xml:whitespace="preserve">the number of pages</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_print_settings"
              c:identifier="gtk_print_operation_set_print_settings"
              version="2.10">
        <doc xml:whitespace="preserve">Sets the print settings for @op. This is typically used to
re-establish print settings from a previous print operation,
see gtk_print_operation_run().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="print_settings"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">#GtkPrintSettings</doc>
            <type name="PrintSettings" c:type="GtkPrintSettings*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_show_progress"
              c:identifier="gtk_print_operation_set_show_progress"
              version="2.10">
        <doc xml:whitespace="preserve">If @show_progress is %TRUE, the print operation will show a 
progress dialog during the print operation.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="show_progress" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE to show a progress dialog</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_support_selection"
              c:identifier="gtk_print_operation_set_support_selection"
              version="2.18">
        <doc xml:whitespace="preserve">Sets whether selection is supported by #GtkPrintOperation.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="support_selection" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE to support selection</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_track_print_status"
              c:identifier="gtk_print_operation_set_track_print_status"
              version="2.10">
        <doc xml:whitespace="preserve">If track_status is %TRUE, the print operation will try to continue report
on the status of the print job in the printer queues and printer. This
can allow your application to show things like "out of paper" issues,
and when the print job actually reaches the printer.
This function is often implemented using some form of polling, so it should
not be enabled unless needed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="track_status" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE to track status after printing</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_unit"
              c:identifier="gtk_print_operation_set_unit"
              version="2.10">
        <doc xml:whitespace="preserve">Sets up the transformation for the cairo context obtained from
#GtkPrintContext in such a way that distances are measured in 
units of @unit.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="unit" transfer-ownership="none">
            <doc xml:whitespace="preserve">the unit to use</doc>
            <type name="Unit" c:type="GtkUnit"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_use_full_page"
              c:identifier="gtk_print_operation_set_use_full_page"
              version="2.10">
        <doc xml:whitespace="preserve">If @full_page is %TRUE, the transformation for the cairo context 
obtained from #GtkPrintContext puts the origin at the top left 
corner of the page (which may not be the top left corner of the 
sheet, depending on page orientation and the number of pages per 
sheet). Otherwise, the origin is at the top left corner of the
imageable area (i.e. inside the margins).</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="full_page" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE to set up the #GtkPrintContext for the full page</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="allow-async"
                version="2.10"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Determines whether the print operation may run asynchronously or not.
Some systems don't support asynchronous printing, but those that do
will return %GTK_PRINT_OPERATION_RESULT_IN_PROGRESS as the status, and
emit the #GtkPrintOperation::done signal when the operation is actually 
done.
The Windows port does not support asynchronous operation at all (this 
is unlikely to change). On other platforms, all actions except for 
%GTK_PRINT_OPERATION_ACTION_EXPORT support asynchronous operation.</doc>
        <type name="gboolean"/>
      </property>
      <property name="current-page"
                version="2.10"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The current page in the document.
If this is set before gtk_print_operation_run(), 
the user will be able to select to print only the current page.
Note that this only makes sense for pre-paginated documents.</doc>
        <type name="gint"/>
      </property>
      <property name="custom-tab-label"
                version="2.10"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Used as the label of the tab containing custom widgets.
Note that this property may be ignored on some platforms.
If this is %NULL, GTK+ uses a default label.</doc>
        <type name="utf8"/>
      </property>
      <property name="default-page-setup"
                version="2.10"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The #GtkPageSetup used by default.
This page setup will be used by gtk_print_operation_run(),
but it can be overridden on a per-page basis by connecting
to the #GtkPrintOperation::request-page-setup signal.</doc>
        <type name="PageSetup"/>
      </property>
      <property name="embed-page-setup"
                version="2.18"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">If %TRUE, page size combo box and orientation combo box are embedded into page setup page.</doc>
        <type name="gboolean"/>
      </property>
      <property name="export-filename"
                version="2.10"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The name of a file to generate instead of showing the print dialog. 
Currently, PDF is the only supported format.
The intended use of this property is for implementing 
"Export to PDF" actions.
"Print to PDF" support is independent of this and is done
by letting the user pick the "Print to PDF" item from the 
list of printers in the print dialog.</doc>
        <type name="utf8"/>
      </property>
      <property name="has-selection"
                version="2.18"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Determines whether there is a selection in your application.
This can allow your application to print the selection.
This is typically used to make a "Selection" button sensitive.</doc>
        <type name="gboolean"/>
      </property>
      <property name="job-name"
                version="2.10"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">A string used to identify the job (e.g. in monitoring 
applications like eggcups). 
If you don't set a job name, GTK+ picks a default one 
by numbering successive print jobs.</doc>
        <type name="utf8"/>
      </property>
      <property name="n-pages"
                version="2.10"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The number of pages in the document. 
This &lt;emphasis&gt;must&lt;/emphasis&gt; be set to a positive number
before the rendering starts. It may be set in a 
#GtkPrintOperation::begin-print signal hander.
Note that the page numbers passed to the 
#GtkPrintOperation::request-page-setup and 
#GtkPrintOperation::draw-page signals are 0-based, i.e. if 
the user chooses to print all pages, the last ::draw-page signal 
will be for page @n_pages - 1.</doc>
        <type name="gint"/>
      </property>
      <property name="n-pages-to-print"
                version="2.18"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The number of pages that will be printed.
Note that this value is set during print preparation phase
(%GTK_PRINT_STATUS_PREPARING), so this value should never be
get before the data generation phase (%GTK_PRINT_STATUS_GENERATING_DATA).
You can connect to the #GtkPrintOperation::status-changed signal
and call gtk_print_operation_get_n_pages_to_print() when
print status is %GTK_PRINT_STATUS_GENERATING_DATA.
This is typically used to track the progress of print operation.</doc>
        <type name="gint"/>
      </property>
      <property name="print-settings"
                version="2.10"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The #GtkPrintSettings used for initializing the dialog.
Setting this property is typically used to re-establish 
print settings from a previous print operation, see 
gtk_print_operation_run().</doc>
        <type name="PrintSettings"/>
      </property>
      <property name="show-progress"
                version="2.10"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Determines whether to show a progress dialog during the 
print operation.</doc>
        <type name="gboolean"/>
      </property>
      <property name="status" version="2.10" transfer-ownership="none">
        <doc xml:whitespace="preserve">The status of the print operation.</doc>
        <type name="PrintStatus"/>
      </property>
      <property name="status-string" version="2.10" transfer-ownership="none">
        <doc xml:whitespace="preserve">A string representation of the status of the print operation. 
The string is translated and suitable for displaying the print 
status e.g. in a #GtkStatusbar.
See the #GtkPrintOperation:status property for a status value that 
is suitable for programmatic use.</doc>
        <type name="utf8"/>
      </property>
      <property name="support-selection"
                version="2.18"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">If %TRUE, the print operation will support print of selection.
This allows the print dialog to show a "Selection" button.</doc>
        <type name="gboolean"/>
      </property>
      <property name="track-print-status"
                version="2.10"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">If %TRUE, the print operation will try to continue report on 
the status of the print job in the printer queues and printer. 
This can allow your application to show things like "out of paper" 
issues, and when the print job actually reaches the printer. 
However, this is often implemented using polling, and should 
not be enabled unless needed.</doc>
        <type name="gboolean"/>
      </property>
      <property name="unit"
                version="2.10"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The transformation for the cairo context obtained from
#GtkPrintContext is set up in such a way that distances 
are measured in units of @unit.</doc>
        <type name="Unit"/>
      </property>
      <property name="use-full-page"
                version="2.10"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">If %TRUE, the transformation for the cairo context obtained 
from #GtkPrintContext puts the origin at the top left corner 
of the page (which may not be the top left corner of the sheet, 
depending on page orientation and the number of pages per sheet). 
Otherwise, the origin is at the top left corner of the imageable 
area (i.e. inside the margins).</doc>
        <type name="gboolean"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="PrintOperationPrivate" c:type="GtkPrintOperationPrivate*"/>
      </field>
      <glib:signal name="begin-print" version="2.10">
        <doc xml:whitespace="preserve">Emitted after the user has finished changing print settings
in the dialog, before the actual rendering starts. 
A typical use for ::begin-print is to use the parameters from the
#GtkPrintContext and paginate the document accordingly, and then
set the number of pages with gtk_print_operation_set_n_pages().</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GtkPrintContext for the current operation</doc>
            <type name="PrintContext"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="create-custom-widget"
                   version="2.10"
                   introspectable="0">
        <doc xml:whitespace="preserve">Emitted when displaying the print dialog. If you return a
widget in a handler for this signal it will be added to a custom
tab in the print dialog. You typically return a container widget
with multiple widgets in it.
The print dialog owns the returned widget, and its lifetime is not 
controlled by the application. However, the widget is guaranteed 
to stay around until the #GtkPrintOperation::custom-widget-apply 
signal is emitted on the operation. Then you can read out any 
information you need from the widgets.
or %NULL</doc>
        <return-value>
          <doc xml:whitespace="preserve">A custom widget that gets embedded in the print dialog,</doc>
          <type name="GObject.Object"/>
        </return-value>
      </glib:signal>
      <glib:signal name="custom-widget-apply" version="2.10">
        <doc xml:whitespace="preserve">Emitted right before #GtkPrintOperation::begin-print if you added
a custom widget in the #GtkPrintOperation::create-custom-widget handler. 
When you get this signal you should read the information from the 
custom widgets, as the widgets are not guaraneed to be around at a 
later time.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the custom widget added in create-custom-widget</doc>
            <type name="Widget"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="done" version="2.10">
        <doc xml:whitespace="preserve">Emitted when the print operation run has finished doing
everything required for printing. 
If @result is %GTK_PRINT_OPERATION_RESULT_ERROR then you can call
gtk_print_operation_get_error() for more information.
If you enabled print status tracking then 
gtk_print_operation_is_finished() may still return %FALSE 
after #GtkPrintOperation::done was emitted.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the result of the print operation</doc>
            <type name="PrintOperationResult"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="draw-page" version="2.10">
        <doc xml:whitespace="preserve">Emitted for every page that is printed. The signal handler
must render the @page_nr's page onto the cairo context obtained
from @context using gtk_print_context_get_cairo_context().
|[
static void
draw_page (GtkPrintOperation *operation,
GtkPrintContext   *context,
gint               page_nr,
gpointer           user_data)
{
cairo_t *cr;
PangoLayout *layout;
gdouble width, text_height;
gint layout_height;
PangoFontDescription *desc;
cr = gtk_print_context_get_cairo_context (context);
width = gtk_print_context_get_width (context);
cairo_rectangle (cr, 0, 0, width, HEADER_HEIGHT);
cairo_set_source_rgb (cr, 0.8, 0.8, 0.8);
cairo_fill (cr);
layout = gtk_print_context_create_pango_layout (context);
desc = pango_font_description_from_string ("sans 14");
pango_layout_set_font_description (layout, desc);
pango_font_description_free (desc);
pango_layout_set_text (layout, "some text", -1);
pango_layout_set_width (layout, width * PANGO_SCALE);
pango_layout_set_alignment (layout, PANGO_ALIGN_CENTER);
pango_layout_get_size (layout, NULL, &amp;layout_height);
text_height = (gdouble)layout_height / PANGO_SCALE;
cairo_move_to (cr, width / 2,  (HEADER_HEIGHT - text_height) / 2);
pango_cairo_show_layout (cr, layout);
g_object_unref (layout);
}
]|
Use gtk_print_operation_set_use_full_page() and 
gtk_print_operation_set_unit() before starting the print operation
to set up the transformation of the cairo context according to your
needs.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GtkPrintContext for the current operation</doc>
            <type name="PrintContext"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <doc xml:whitespace="preserve">the number of the currently printed page (0-based)</doc>
            <type name="gint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="end-print" version="2.10">
        <doc xml:whitespace="preserve">Emitted after all pages have been rendered. 
A handler for this signal can clean up any resources that have
been allocated in the #GtkPrintOperation::begin-print handler.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GtkPrintContext for the current operation</doc>
            <type name="PrintContext"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="paginate" version="2.10">
        <doc xml:whitespace="preserve">Emitted after the #GtkPrintOperation::begin-print signal, but before 
the actual rendering starts. It keeps getting emitted until a connected 
signal handler returns %TRUE.
The ::paginate signal is intended to be used for paginating a document
in small chunks, to avoid blocking the user interface for a long
time. The signal handler should update the number of pages using
gtk_print_operation_set_n_pages(), and return %TRUE if the document
has been completely paginated.
If you don't need to do pagination in chunks, you can simply do
it all in the ::begin-print handler, and set the number of pages
from there.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if pagination is complete</doc>
          <type name="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GtkPrintContext for the current operation</doc>
            <type name="PrintContext"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="preview" version="2.10">
        <doc xml:whitespace="preserve">Gets emitted when a preview is requested from the native dialog.
The default handler for this signal uses an external viewer 
application to preview.
To implement a custom print preview, an application must return
%TRUE from its handler for this signal. In order to use the
provided @context for the preview implementation, it must be
given a suitable cairo context with gtk_print_context_set_cairo_context().
The custom preview implementation can use 
gtk_print_operation_preview_is_selected() and 
gtk_print_operation_preview_render_page() to find pages which
are selected for print and render them. The preview must be
finished by calling gtk_print_operation_preview_end_preview()
(typically in response to the user clicking a close button).</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the listener wants to take over control of the preview</doc>
          <type name="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GtkPrintPreviewOperation for the current operation</doc>
            <type name="PrintOperationPreview"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GtkPrintContext that will be used</doc>
            <type name="PrintContext"/>
          </parameter>
          <parameter name="p1" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">the #GtkWindow to use as window parent, or %NULL</doc>
            <type name="Window"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="request-page-setup" version="2.10">
        <doc xml:whitespace="preserve">Emitted once for every page that is printed, to give
the application a chance to modify the page setup. Any changes 
done to @setup will be in force only for printing this page.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GtkPrintContext for the current operation</doc>
            <type name="PrintContext"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <doc xml:whitespace="preserve">the number of the currently printed page (0-based)</doc>
            <type name="gint"/>
          </parameter>
          <parameter name="p1" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GtkPageSetup</doc>
            <type name="PageSetup"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="status-changed" version="2.10">
        <doc xml:whitespace="preserve">Emitted at between the various phases of the print operation.
See #GtkPrintStatus for the phases that are being discriminated.
Use gtk_print_operation_get_status() to find out the current
status.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
      <glib:signal name="update-custom-widget" version="2.18">
        <doc xml:whitespace="preserve">Emitted after change of selected printer. The actual page setup and
print settings are passed to the custom widget, which can actualize
itself according to this change.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the custom widget added in create-custom-widget</doc>
            <type name="Widget"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <doc xml:whitespace="preserve">actual page setup</doc>
            <type name="PageSetup"/>
          </parameter>
          <parameter name="p1" transfer-ownership="none">
            <doc xml:whitespace="preserve">actual print settings</doc>
            <type name="PrintSettings"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <enumeration name="PrintOperationAction"
                 glib:type-name="GtkPrintOperationAction"
                 glib:get-type="gtk_print_operation_action_get_type"
                 c:type="GtkPrintOperationAction">
      <member name="print_dialog"
              value="0"
              c:identifier="GTK_PRINT_OPERATION_ACTION_PRINT_DIALOG"
              glib:nick="print-dialog"/>
      <member name="print"
              value="1"
              c:identifier="GTK_PRINT_OPERATION_ACTION_PRINT"
              glib:nick="print"/>
      <member name="preview"
              value="2"
              c:identifier="GTK_PRINT_OPERATION_ACTION_PREVIEW"
              glib:nick="preview"/>
      <member name="export"
              value="3"
              c:identifier="GTK_PRINT_OPERATION_ACTION_EXPORT"
              glib:nick="export"/>
    </enumeration>
    <record name="PrintOperationClass"
            c:type="GtkPrintOperationClass"
            glib:is-gtype-struct-for="PrintOperation">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="done">
        <callback name="done">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="operation" transfer-ownership="none">
              <type name="PrintOperation" c:type="GtkPrintOperation*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <type name="PrintOperationResult"
                    c:type="GtkPrintOperationResult"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="begin_print">
        <callback name="begin_print">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="operation" transfer-ownership="none">
              <type name="PrintOperation" c:type="GtkPrintOperation*"/>
            </parameter>
            <parameter name="context" transfer-ownership="none">
              <type name="PrintContext" c:type="GtkPrintContext*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="paginate">
        <callback name="paginate">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="operation" transfer-ownership="none">
              <type name="PrintOperation" c:type="GtkPrintOperation*"/>
            </parameter>
            <parameter name="context" transfer-ownership="none">
              <type name="PrintContext" c:type="GtkPrintContext*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="request_page_setup">
        <callback name="request_page_setup">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="operation" transfer-ownership="none">
              <type name="PrintOperation" c:type="GtkPrintOperation*"/>
            </parameter>
            <parameter name="context" transfer-ownership="none">
              <type name="PrintContext" c:type="GtkPrintContext*"/>
            </parameter>
            <parameter name="page_nr" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="setup" transfer-ownership="none">
              <type name="PageSetup" c:type="GtkPageSetup*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="draw_page">
        <callback name="draw_page">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="operation" transfer-ownership="none">
              <type name="PrintOperation" c:type="GtkPrintOperation*"/>
            </parameter>
            <parameter name="context" transfer-ownership="none">
              <type name="PrintContext" c:type="GtkPrintContext*"/>
            </parameter>
            <parameter name="page_nr" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="end_print">
        <callback name="end_print">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="operation" transfer-ownership="none">
              <type name="PrintOperation" c:type="GtkPrintOperation*"/>
            </parameter>
            <parameter name="context" transfer-ownership="none">
              <type name="PrintContext" c:type="GtkPrintContext*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="status_changed">
        <callback name="status_changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="operation" transfer-ownership="none">
              <type name="PrintOperation" c:type="GtkPrintOperation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="create_custom_widget" introspectable="0">
        <callback name="create_custom_widget" introspectable="0">
          <return-value>
            <type name="Widget" c:type="GtkWidget*"/>
          </return-value>
          <parameters>
            <parameter name="operation" transfer-ownership="none">
              <type name="PrintOperation" c:type="GtkPrintOperation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="custom_widget_apply">
        <callback name="custom_widget_apply">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="operation" transfer-ownership="none">
              <type name="PrintOperation" c:type="GtkPrintOperation*"/>
            </parameter>
            <parameter name="widget" transfer-ownership="none">
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="preview">
        <callback name="preview">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="operation" transfer-ownership="none">
              <type name="PrintOperation" c:type="GtkPrintOperation*"/>
            </parameter>
            <parameter name="preview" transfer-ownership="none">
              <type name="PrintOperationPreview"
                    c:type="GtkPrintOperationPreview*"/>
            </parameter>
            <parameter name="context" transfer-ownership="none">
              <type name="PrintContext" c:type="GtkPrintContext*"/>
            </parameter>
            <parameter name="parent" transfer-ownership="none">
              <type name="Window" c:type="GtkWindow*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="update_custom_widget">
        <callback name="update_custom_widget">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="operation" transfer-ownership="none">
              <type name="PrintOperation" c:type="GtkPrintOperation*"/>
            </parameter>
            <parameter name="widget" transfer-ownership="none">
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
            <parameter name="setup" transfer-ownership="none">
              <type name="PageSetup" c:type="GtkPageSetup*"/>
            </parameter>
            <parameter name="settings" transfer-ownership="none">
              <type name="PrintSettings" c:type="GtkPrintSettings*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_gtk_reserved1" introspectable="0">
        <callback name="_gtk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved2" introspectable="0">
        <callback name="_gtk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved3" introspectable="0">
        <callback name="_gtk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved4" introspectable="0">
        <callback name="_gtk_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved5" introspectable="0">
        <callback name="_gtk_reserved5">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved6" introspectable="0">
        <callback name="_gtk_reserved6">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <interface name="PrintOperationPreview"
               c:symbol-prefix="print_operation_preview"
               c:type="GtkPrintOperationPreview"
               glib:type-name="GtkPrintOperationPreview"
               glib:get-type="gtk_print_operation_preview_get_type"
               glib:type-struct="PrintOperationPreviewIface">
      <virtual-method name="end_preview" invoker="end_preview" version="2.10">
        <doc xml:whitespace="preserve">Ends a preview. 
This function must be called to finish a custom print preview.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </virtual-method>
      <virtual-method name="is_selected" invoker="is_selected" version="2.10">
        <doc xml:whitespace="preserve">Returns whether the given page is included in the set of pages that
have been selected for printing.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the page has been selected for printing</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="page_nr" transfer-ownership="none">
            <doc xml:whitespace="preserve">a page number</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="render_page" invoker="render_page" version="2.10">
        <doc xml:whitespace="preserve">Renders a page to the preview, using the print context that
was passed to the #GtkPrintOperation::preview handler together
with @preview.
A custom iprint preview should use this function in its ::expose
handler to render the currently selected page.
Note that this function requires a suitable cairo context to 
be associated with the print context.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="page_nr" transfer-ownership="none">
            <doc xml:whitespace="preserve">the page to render</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="end_preview"
              c:identifier="gtk_print_operation_preview_end_preview"
              version="2.10">
        <doc xml:whitespace="preserve">Ends a preview. 
This function must be called to finish a custom print preview.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="is_selected"
              c:identifier="gtk_print_operation_preview_is_selected"
              version="2.10">
        <doc xml:whitespace="preserve">Returns whether the given page is included in the set of pages that
have been selected for printing.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the page has been selected for printing</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="page_nr" transfer-ownership="none">
            <doc xml:whitespace="preserve">a page number</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="render_page"
              c:identifier="gtk_print_operation_preview_render_page"
              version="2.10">
        <doc xml:whitespace="preserve">Renders a page to the preview, using the print context that
was passed to the #GtkPrintOperation::preview handler together
with @preview.
A custom iprint preview should use this function in its ::expose
handler to render the currently selected page.
Note that this function requires a suitable cairo context to 
be associated with the print context.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="page_nr" transfer-ownership="none">
            <doc xml:whitespace="preserve">the page to render</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <glib:signal name="got-page-size">
        <doc xml:whitespace="preserve">The ::got-page-size signal is emitted once for each page
that gets rendered to the preview. 
A handler for this signal should update the @context
according to @page_setup and set up a suitable cairo
context, using gtk_print_context_set_cairo_context().</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the current #GtkPrintContext</doc>
            <type name="PrintContext"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GtkPageSetup for the current page</doc>
            <type name="PageSetup"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="ready">
        <doc xml:whitespace="preserve">The ::ready signal gets emitted once per preview operation,
before the first page is rendered.
A handler for this signal can be used for setup tasks.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the current #GtkPrintContext</doc>
            <type name="PrintContext"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="PrintOperationPreviewIface"
            c:type="GtkPrintOperationPreviewIface"
            glib:is-gtype-struct-for="PrintOperationPreview">
      <field name="g_iface">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="ready">
        <callback name="ready">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="preview" transfer-ownership="none">
              <type name="PrintOperationPreview"
                    c:type="GtkPrintOperationPreview*"/>
            </parameter>
            <parameter name="context" transfer-ownership="none">
              <type name="PrintContext" c:type="GtkPrintContext*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="got_page_size">
        <callback name="got_page_size">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="preview" transfer-ownership="none">
              <type name="PrintOperationPreview"
                    c:type="GtkPrintOperationPreview*"/>
            </parameter>
            <parameter name="context" transfer-ownership="none">
              <type name="PrintContext" c:type="GtkPrintContext*"/>
            </parameter>
            <parameter name="page_setup" transfer-ownership="none">
              <type name="PageSetup" c:type="GtkPageSetup*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="render_page">
        <callback name="render_page">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="preview" transfer-ownership="none">
              <type name="PrintOperationPreview"
                    c:type="GtkPrintOperationPreview*"/>
            </parameter>
            <parameter name="page_nr" transfer-ownership="none">
              <doc xml:whitespace="preserve">the page to render</doc>
              <type name="gint" c:type="gint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="is_selected">
        <callback name="is_selected">
          <return-value transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE if the page has been selected for printing</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="preview" transfer-ownership="none">
              <type name="PrintOperationPreview"
                    c:type="GtkPrintOperationPreview*"/>
            </parameter>
            <parameter name="page_nr" transfer-ownership="none">
              <doc xml:whitespace="preserve">a page number</doc>
              <type name="gint" c:type="gint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="end_preview">
        <callback name="end_preview">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="preview" transfer-ownership="none">
              <type name="PrintOperationPreview"
                    c:type="GtkPrintOperationPreview*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_gtk_reserved1" introspectable="0">
        <callback name="_gtk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved2" introspectable="0">
        <callback name="_gtk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved3" introspectable="0">
        <callback name="_gtk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved4" introspectable="0">
        <callback name="_gtk_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved5" introspectable="0">
        <callback name="_gtk_reserved5">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved6" introspectable="0">
        <callback name="_gtk_reserved6">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved7" introspectable="0">
        <callback name="_gtk_reserved7">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="PrintOperationPrivate"
            c:type="GtkPrintOperationPrivate"
            disguised="1">
    </record>
    <enumeration name="PrintOperationResult"
                 glib:type-name="GtkPrintOperationResult"
                 glib:get-type="gtk_print_operation_result_get_type"
                 c:type="GtkPrintOperationResult">
      <member name="error"
              value="0"
              c:identifier="GTK_PRINT_OPERATION_RESULT_ERROR"
              glib:nick="error"/>
      <member name="apply"
              value="1"
              c:identifier="GTK_PRINT_OPERATION_RESULT_APPLY"
              glib:nick="apply"/>
      <member name="cancel"
              value="2"
              c:identifier="GTK_PRINT_OPERATION_RESULT_CANCEL"
              glib:nick="cancel"/>
      <member name="in_progress"
              value="3"
              c:identifier="GTK_PRINT_OPERATION_RESULT_IN_PROGRESS"
              glib:nick="in-progress"/>
    </enumeration>
    <enumeration name="PrintPages"
                 glib:type-name="GtkPrintPages"
                 glib:get-type="gtk_print_pages_get_type"
                 c:type="GtkPrintPages">
      <member name="all"
              value="0"
              c:identifier="GTK_PRINT_PAGES_ALL"
              glib:nick="all"/>
      <member name="current"
              value="1"
              c:identifier="GTK_PRINT_PAGES_CURRENT"
              glib:nick="current"/>
      <member name="ranges"
              value="2"
              c:identifier="GTK_PRINT_PAGES_RANGES"
              glib:nick="ranges"/>
      <member name="selection"
              value="3"
              c:identifier="GTK_PRINT_PAGES_SELECTION"
              glib:nick="selection"/>
    </enumeration>
    <enumeration name="PrintQuality"
                 glib:type-name="GtkPrintQuality"
                 glib:get-type="gtk_print_quality_get_type"
                 c:type="GtkPrintQuality">
      <member name="low"
              value="0"
              c:identifier="GTK_PRINT_QUALITY_LOW"
              glib:nick="low"/>
      <member name="normal"
              value="1"
              c:identifier="GTK_PRINT_QUALITY_NORMAL"
              glib:nick="normal"/>
      <member name="high"
              value="2"
              c:identifier="GTK_PRINT_QUALITY_HIGH"
              glib:nick="high"/>
      <member name="draft"
              value="3"
              c:identifier="GTK_PRINT_QUALITY_DRAFT"
              glib:nick="draft"/>
    </enumeration>
    <class name="PrintSettings"
           c:symbol-prefix="print_settings"
           c:type="GtkPrintSettings"
           parent="GObject.Object"
           glib:type-name="GtkPrintSettings"
           glib:get-type="gtk_print_settings_get_type">
      <constructor name="new"
                   c:identifier="gtk_print_settings_new"
                   version="2.10">
        <doc xml:whitespace="preserve">Creates a new #GtkPrintSettings object.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new #GtkPrintSettings object</doc>
          <type name="PrintSettings" c:type="GtkPrintSettings*"/>
        </return-value>
      </constructor>
      <constructor name="new_from_file"
                   c:identifier="gtk_print_settings_new_from_file"
                   version="2.12"
                   throws="1">
        <doc xml:whitespace="preserve">Reads the print settings from @file_name. Returns a new #GtkPrintSettings
object with the restored settings, or %NULL if an error occurred. If the
file could not be loaded then error is set to either a #GFileError or
#GKeyFileError.  See gtk_print_settings_to_file().</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the restored #GtkPrintSettings</doc>
          <type name="PrintSettings" c:type="GtkPrintSettings*"/>
        </return-value>
        <parameters>
          <parameter name="file_name" transfer-ownership="none">
            <doc xml:whitespace="preserve">the filename to read the settings from</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_key_file"
                   c:identifier="gtk_print_settings_new_from_key_file"
                   version="2.12"
                   throws="1">
        <doc xml:whitespace="preserve">Reads the print settings from the group @group_name in @key_file.  Returns a
new #GtkPrintSettings object with the restored settings, or %NULL if an
error occurred. If the file could not be loaded then error is set to either
a #GFileError or #GKeyFileError.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the restored #GtkPrintSettings</doc>
          <type name="PrintSettings" c:type="GtkPrintSettings*"/>
        </return-value>
        <parameters>
          <parameter name="key_file" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GKeyFile to retrieve the settings from</doc>
            <type name="GLib.KeyFile" c:type="GKeyFile*"/>
          </parameter>
          <parameter name="group_name"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">the name of the group to use, or %NULL to use the default "Print Settings"</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="copy"
              c:identifier="gtk_print_settings_copy"
              version="2.10">
        <doc xml:whitespace="preserve">Copies a #GtkPrintSettings object.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a newly allocated copy of @other</doc>
          <type name="PrintSettings" c:type="GtkPrintSettings*"/>
        </return-value>
      </method>
      <method name="foreach"
              c:identifier="gtk_print_settings_foreach"
              version="2.10">
        <doc xml:whitespace="preserve">Calls @func for each key-value pair of @settings.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="func"
                     transfer-ownership="none"
                     scope="call"
                     closure="1">
            <doc xml:whitespace="preserve">the function to call</doc>
            <type name="PrintSettingsFunc" c:type="GtkPrintSettingsFunc"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:whitespace="preserve">user data for @func</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get" c:identifier="gtk_print_settings_get" version="2.10">
        <doc xml:whitespace="preserve">Looks up the string value associated with @key.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the string value for @key</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="key" transfer-ownership="none">
            <doc xml:whitespace="preserve">a key</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_bool"
              c:identifier="gtk_print_settings_get_bool"
              version="2.10">
        <doc xml:whitespace="preserve">Returns the boolean represented by the value
that is associated with @key. 
The string "true" represents %TRUE, any other 
string %FALSE.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE, if @key maps to a true value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="key" transfer-ownership="none">
            <doc xml:whitespace="preserve">a key</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_collate"
              c:identifier="gtk_print_settings_get_collate"
              version="2.10">
        <doc xml:whitespace="preserve">Gets the value of %GTK_PRINT_SETTINGS_COLLATE.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">whether to collate the printed pages</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_default_source"
              c:identifier="gtk_print_settings_get_default_source"
              version="2.10">
        <doc xml:whitespace="preserve">Gets the value of %GTK_PRINT_SETTINGS_DEFAULT_SOURCE.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the default source</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_dither"
              c:identifier="gtk_print_settings_get_dither"
              version="2.10">
        <doc xml:whitespace="preserve">Gets the value of %GTK_PRINT_SETTINGS_DITHER.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the dithering that is used</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_double"
              c:identifier="gtk_print_settings_get_double"
              version="2.10">
        <doc xml:whitespace="preserve">Returns the double value associated with @key, or 0.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the double value of @key</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <parameter name="key" transfer-ownership="none">
            <doc xml:whitespace="preserve">a key</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_double_with_default"
              c:identifier="gtk_print_settings_get_double_with_default"
              version="2.10">
        <doc xml:whitespace="preserve">Returns the floating point number represented by 
the value that is associated with @key, or @default_val
if the value does not represent a floating point number.
Floating point numbers are parsed with g_ascii_strtod().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the floating point number associated with @key</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <parameter name="key" transfer-ownership="none">
            <doc xml:whitespace="preserve">a key</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="def" transfer-ownership="none">
            <doc xml:whitespace="preserve">the default value</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_duplex"
              c:identifier="gtk_print_settings_get_duplex"
              version="2.10">
        <doc xml:whitespace="preserve">Gets the value of %GTK_PRINT_SETTINGS_DUPLEX.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">whether to print the output in duplex.</doc>
          <type name="PrintDuplex" c:type="GtkPrintDuplex"/>
        </return-value>
      </method>
      <method name="get_finishings"
              c:identifier="gtk_print_settings_get_finishings"
              version="2.10">
        <doc xml:whitespace="preserve">Gets the value of %GTK_PRINT_SETTINGS_FINISHINGS.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the finishings</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_int"
              c:identifier="gtk_print_settings_get_int"
              version="2.10">
        <doc xml:whitespace="preserve">Returns the integer value of @key, or 0.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the integer value of @key</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <parameter name="key" transfer-ownership="none">
            <doc xml:whitespace="preserve">a key</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_int_with_default"
              c:identifier="gtk_print_settings_get_int_with_default"
              version="2.10">
        <doc xml:whitespace="preserve">Returns the value of @key, interpreted as
an integer, or the default value.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the integer value of @key</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <parameter name="key" transfer-ownership="none">
            <doc xml:whitespace="preserve">a key</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="def" transfer-ownership="none">
            <doc xml:whitespace="preserve">the default value</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_length"
              c:identifier="gtk_print_settings_get_length"
              version="2.10">
        <doc xml:whitespace="preserve">Returns the value associated with @key, interpreted
as a length. The returned value is converted to @units.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the length value of @key, converted to @unit</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <parameter name="key" transfer-ownership="none">
            <doc xml:whitespace="preserve">a key</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="unit" transfer-ownership="none">
            <doc xml:whitespace="preserve">the unit of the return value</doc>
            <type name="Unit" c:type="GtkUnit"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_media_type"
              c:identifier="gtk_print_settings_get_media_type"
              version="2.10">
        <doc xml:whitespace="preserve">Gets the value of %GTK_PRINT_SETTINGS_MEDIA_TYPE.
The set of media types is defined in PWG 5101.1-2002 PWG.
&lt;!-- FIXME link here --&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the media type</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_n_copies"
              c:identifier="gtk_print_settings_get_n_copies"
              version="2.10">
        <doc xml:whitespace="preserve">Gets the value of %GTK_PRINT_SETTINGS_N_COPIES.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the number of copies to print</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="get_number_up"
              c:identifier="gtk_print_settings_get_number_up"
              version="2.10">
        <doc xml:whitespace="preserve">Gets the value of %GTK_PRINT_SETTINGS_NUMBER_UP.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the number of pages per sheet</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="get_number_up_layout"
              c:identifier="gtk_print_settings_get_number_up_layout"
              version="2.14">
        <doc xml:whitespace="preserve">Gets the value of %GTK_PRINT_SETTINGS_NUMBER_UP_LAYOUT.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">layout of page in number-up mode</doc>
          <type name="NumberUpLayout" c:type="GtkNumberUpLayout"/>
        </return-value>
      </method>
      <method name="get_orientation"
              c:identifier="gtk_print_settings_get_orientation"
              version="2.10">
        <doc xml:whitespace="preserve">Get the value of %GTK_PRINT_SETTINGS_ORIENTATION, 
converted to a #GtkPageOrientation.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the orientation</doc>
          <type name="PageOrientation" c:type="GtkPageOrientation"/>
        </return-value>
      </method>
      <method name="get_output_bin"
              c:identifier="gtk_print_settings_get_output_bin"
              version="2.10">
        <doc xml:whitespace="preserve">Gets the value of %GTK_PRINT_SETTINGS_OUTPUT_BIN.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the output bin</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_page_ranges"
              c:identifier="gtk_print_settings_get_page_ranges"
              version="2.10"
              introspectable="0">
        <doc xml:whitespace="preserve">Gets the value of %GTK_PRINT_SETTINGS_PAGE_RANGES.
Use g_free() to free the array when it is no longer needed.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">an array of #GtkPageRange&lt;!-- --&gt;s.</doc>
          <type name="PageRange" c:type="GtkPageRange*"/>
        </return-value>
        <parameters>
          <parameter name="num_ranges" transfer-ownership="none">
            <doc xml:whitespace="preserve">return location for the length of the returned array</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_page_set"
              c:identifier="gtk_print_settings_get_page_set"
              version="2.10">
        <doc xml:whitespace="preserve">Gets the value of %GTK_PRINT_SETTINGS_PAGE_SET.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the set of pages to print</doc>
          <type name="PageSet" c:type="GtkPageSet"/>
        </return-value>
      </method>
      <method name="get_paper_height"
              c:identifier="gtk_print_settings_get_paper_height"
              version="2.10">
        <doc xml:whitespace="preserve">Gets the value of %GTK_PRINT_SETTINGS_PAPER_HEIGHT,
converted to @unit.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the paper height, in units of @unit</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <parameter name="unit" transfer-ownership="none">
            <doc xml:whitespace="preserve">the unit for the return value</doc>
            <type name="Unit" c:type="GtkUnit"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_paper_size"
              c:identifier="gtk_print_settings_get_paper_size"
              version="2.10">
        <doc xml:whitespace="preserve">Gets the value of %GTK_PRINT_SETTINGS_PAPER_FORMAT, 
converted to a #GtkPaperSize.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the paper size</doc>
          <type name="PaperSize" c:type="GtkPaperSize*"/>
        </return-value>
      </method>
      <method name="get_paper_width"
              c:identifier="gtk_print_settings_get_paper_width"
              version="2.10">
        <doc xml:whitespace="preserve">Gets the value of %GTK_PRINT_SETTINGS_PAPER_WIDTH,
converted to @unit.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the paper width, in units of @unit</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <parameter name="unit" transfer-ownership="none">
            <doc xml:whitespace="preserve">the unit for the return value</doc>
            <type name="Unit" c:type="GtkUnit"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_print_pages"
              c:identifier="gtk_print_settings_get_print_pages"
              version="2.10">
        <doc xml:whitespace="preserve">Gets the value of %GTK_PRINT_SETTINGS_PRINT_PAGES.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">which pages to print</doc>
          <type name="PrintPages" c:type="GtkPrintPages"/>
        </return-value>
      </method>
      <method name="get_printer"
              c:identifier="gtk_print_settings_get_printer"
              version="2.10">
        <doc xml:whitespace="preserve">Convenience function to obtain the value of 
%GTK_PRINT_SETTINGS_PRINTER.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the printer name</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_printer_lpi"
              c:identifier="gtk_print_settings_get_printer_lpi"
              version="2.16">
        <doc xml:whitespace="preserve">Gets the value of %GTK_PRINT_SETTINGS_PRINTER_LPI.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the resolution in lpi (lines per inch)</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </method>
      <method name="get_quality"
              c:identifier="gtk_print_settings_get_quality"
              version="2.10">
        <doc xml:whitespace="preserve">Gets the value of %GTK_PRINT_SETTINGS_QUALITY.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the print quality</doc>
          <type name="PrintQuality" c:type="GtkPrintQuality"/>
        </return-value>
      </method>
      <method name="get_resolution"
              c:identifier="gtk_print_settings_get_resolution"
              version="2.10">
        <doc xml:whitespace="preserve">Gets the value of %GTK_PRINT_SETTINGS_RESOLUTION.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the resolution in dpi</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="get_resolution_x"
              c:identifier="gtk_print_settings_get_resolution_x"
              version="2.16">
        <doc xml:whitespace="preserve">Gets the value of %GTK_PRINT_SETTINGS_RESOLUTION_X.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the horizontal resolution in dpi</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="get_resolution_y"
              c:identifier="gtk_print_settings_get_resolution_y"
              version="2.16">
        <doc xml:whitespace="preserve">Gets the value of %GTK_PRINT_SETTINGS_RESOLUTION_Y.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the vertical resolution in dpi</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="get_reverse"
              c:identifier="gtk_print_settings_get_reverse"
              version="2.10">
        <doc xml:whitespace="preserve">Gets the value of %GTK_PRINT_SETTINGS_REVERSE.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">whether to reverse the order of the printed pages</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_scale"
              c:identifier="gtk_print_settings_get_scale"
              version="2.10">
        <doc xml:whitespace="preserve">Gets the value of %GTK_PRINT_SETTINGS_SCALE.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the scale in percent</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </method>
      <method name="get_use_color"
              c:identifier="gtk_print_settings_get_use_color"
              version="2.10">
        <doc xml:whitespace="preserve">Gets the value of %GTK_PRINT_SETTINGS_USE_COLOR.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">whether to use color</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="has_key"
              c:identifier="gtk_print_settings_has_key"
              version="2.10">
        <doc xml:whitespace="preserve">Returns %TRUE, if a value is associated with @key.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE, if @key has a value</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="key" transfer-ownership="none">
            <doc xml:whitespace="preserve">a key</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="load_file"
              c:identifier="gtk_print_settings_load_file"
              version="2.14"
              throws="1">
        <doc xml:whitespace="preserve">Reads the print settings from @file_name. If the file could not be loaded
then error is set to either a #GFileError or #GKeyFileError.
See gtk_print_settings_to_file().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE on success</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="file_name" transfer-ownership="none">
            <doc xml:whitespace="preserve">the filename to read the settings from</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="load_key_file"
              c:identifier="gtk_print_settings_load_key_file"
              version="2.14"
              throws="1">
        <doc xml:whitespace="preserve">Reads the print settings from the group @group_name in @key_file. If the
file could not be loaded then error is set to either a #GFileError or
#GKeyFileError.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE on success</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="key_file" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GKeyFile to retrieve the settings from</doc>
            <type name="GLib.KeyFile" c:type="GKeyFile*"/>
          </parameter>
          <parameter name="group_name"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">the name of the group to use, or %NULL to use the default "Print Settings"</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set" c:identifier="gtk_print_settings_set" version="2.10">
        <doc xml:whitespace="preserve">Associates @value with @key.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="key" transfer-ownership="none">
            <doc xml:whitespace="preserve">a key</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">a string value, or %NULL</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_bool"
              c:identifier="gtk_print_settings_set_bool"
              version="2.10">
        <doc xml:whitespace="preserve">Sets @key to a boolean value.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="key" transfer-ownership="none">
            <doc xml:whitespace="preserve">a key</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:whitespace="preserve">a boolean</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_collate"
              c:identifier="gtk_print_settings_set_collate"
              version="2.10">
        <doc xml:whitespace="preserve">Sets the value of %GTK_PRINT_SETTINGS_COLLATE.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="collate" transfer-ownership="none">
            <doc xml:whitespace="preserve">whether to collate the output</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_default_source"
              c:identifier="gtk_print_settings_set_default_source"
              version="2.10">
        <doc xml:whitespace="preserve">Sets the value of %GTK_PRINT_SETTINGS_DEFAULT_SOURCE.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="default_source" transfer-ownership="none">
            <doc xml:whitespace="preserve">the default source</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_dither"
              c:identifier="gtk_print_settings_set_dither"
              version="2.10">
        <doc xml:whitespace="preserve">Sets the value of %GTK_PRINT_SETTINGS_DITHER.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="dither" transfer-ownership="none">
            <doc xml:whitespace="preserve">the dithering that is used</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_double"
              c:identifier="gtk_print_settings_set_double"
              version="2.10">
        <doc xml:whitespace="preserve">Sets @key to a double value.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="key" transfer-ownership="none">
            <doc xml:whitespace="preserve">a key</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:whitespace="preserve">a double value</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_duplex"
              c:identifier="gtk_print_settings_set_duplex"
              version="2.10">
        <doc xml:whitespace="preserve">Sets the value of %GTK_PRINT_SETTINGS_DUPLEX.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="duplex" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkPrintDuplex value</doc>
            <type name="PrintDuplex" c:type="GtkPrintDuplex"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_finishings"
              c:identifier="gtk_print_settings_set_finishings"
              version="2.10">
        <doc xml:whitespace="preserve">Sets the value of %GTK_PRINT_SETTINGS_FINISHINGS.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="finishings" transfer-ownership="none">
            <doc xml:whitespace="preserve">the finishings</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_int"
              c:identifier="gtk_print_settings_set_int"
              version="2.10">
        <doc xml:whitespace="preserve">Sets @key to an integer value.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="key" transfer-ownership="none">
            <doc xml:whitespace="preserve">a key</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:whitespace="preserve">an integer</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_length"
              c:identifier="gtk_print_settings_set_length"
              version="2.10">
        <doc xml:whitespace="preserve">Associates a length in units of @unit with @key.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="key" transfer-ownership="none">
            <doc xml:whitespace="preserve">a key</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:whitespace="preserve">a length</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="unit" transfer-ownership="none">
            <doc xml:whitespace="preserve">the unit of @length</doc>
            <type name="Unit" c:type="GtkUnit"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_media_type"
              c:identifier="gtk_print_settings_set_media_type"
              version="2.10">
        <doc xml:whitespace="preserve">Sets the value of %GTK_PRINT_SETTINGS_MEDIA_TYPE.
The set of media types is defined in PWG 5101.1-2002 PWG.
&lt;!-- FIXME link here --&gt;</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="media_type" transfer-ownership="none">
            <doc xml:whitespace="preserve">the media type</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_n_copies"
              c:identifier="gtk_print_settings_set_n_copies"
              version="2.10">
        <doc xml:whitespace="preserve">Sets the value of %GTK_PRINT_SETTINGS_N_COPIES.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="num_copies" transfer-ownership="none">
            <doc xml:whitespace="preserve">the number of copies</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_number_up"
              c:identifier="gtk_print_settings_set_number_up"
              version="2.10">
        <doc xml:whitespace="preserve">Sets the value of %GTK_PRINT_SETTINGS_NUMBER_UP.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="number_up" transfer-ownership="none">
            <doc xml:whitespace="preserve">the number of pages per sheet</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_number_up_layout"
              c:identifier="gtk_print_settings_set_number_up_layout"
              version="2.14">
        <doc xml:whitespace="preserve">Sets the value of %GTK_PRINT_SETTINGS_NUMBER_UP_LAYOUT.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="number_up_layout" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkNumberUpLayout value</doc>
            <type name="NumberUpLayout" c:type="GtkNumberUpLayout"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_orientation"
              c:identifier="gtk_print_settings_set_orientation"
              version="2.10">
        <doc xml:whitespace="preserve">Sets the value of %GTK_PRINT_SETTINGS_ORIENTATION.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="orientation" transfer-ownership="none">
            <doc xml:whitespace="preserve">a page orientation</doc>
            <type name="PageOrientation" c:type="GtkPageOrientation"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_output_bin"
              c:identifier="gtk_print_settings_set_output_bin"
              version="2.10">
        <doc xml:whitespace="preserve">Sets the value of %GTK_PRINT_SETTINGS_OUTPUT_BIN.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="output_bin" transfer-ownership="none">
            <doc xml:whitespace="preserve">the output bin</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_page_ranges"
              c:identifier="gtk_print_settings_set_page_ranges"
              version="2.10">
        <doc xml:whitespace="preserve">Sets the value of %GTK_PRINT_SETTINGS_PAGE_RANGES.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="page_ranges" transfer-ownership="none">
            <doc xml:whitespace="preserve">an array of #GtkPageRange&lt;!-- --&gt;s</doc>
            <type name="PageRange" c:type="GtkPageRange*"/>
          </parameter>
          <parameter name="num_ranges" transfer-ownership="none">
            <doc xml:whitespace="preserve">the length of @page_ranges</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_page_set"
              c:identifier="gtk_print_settings_set_page_set"
              version="2.10">
        <doc xml:whitespace="preserve">Sets the value of %GTK_PRINT_SETTINGS_PAGE_SET.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="page_set" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkPageSet value</doc>
            <type name="PageSet" c:type="GtkPageSet"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_paper_height"
              c:identifier="gtk_print_settings_set_paper_height"
              version="2.10">
        <doc xml:whitespace="preserve">Sets the value of %GTK_PRINT_SETTINGS_PAPER_HEIGHT.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="height" transfer-ownership="none">
            <doc xml:whitespace="preserve">the paper height</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="unit" transfer-ownership="none">
            <doc xml:whitespace="preserve">the units of @height</doc>
            <type name="Unit" c:type="GtkUnit"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_paper_size"
              c:identifier="gtk_print_settings_set_paper_size"
              version="2.10">
        <doc xml:whitespace="preserve">Sets the value of %GTK_PRINT_SETTINGS_PAPER_FORMAT,
%GTK_PRINT_SETTINGS_PAPER_WIDTH and
%GTK_PRINT_SETTINGS_PAPER_HEIGHT.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="paper_size" transfer-ownership="none">
            <doc xml:whitespace="preserve">a paper size</doc>
            <type name="PaperSize" c:type="GtkPaperSize*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_paper_width"
              c:identifier="gtk_print_settings_set_paper_width"
              version="2.10">
        <doc xml:whitespace="preserve">Sets the value of %GTK_PRINT_SETTINGS_PAPER_WIDTH.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="width" transfer-ownership="none">
            <doc xml:whitespace="preserve">the paper width</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="unit" transfer-ownership="none">
            <doc xml:whitespace="preserve">the units of @width</doc>
            <type name="Unit" c:type="GtkUnit"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_print_pages"
              c:identifier="gtk_print_settings_set_print_pages"
              version="2.10">
        <doc xml:whitespace="preserve">Sets the value of %GTK_PRINT_SETTINGS_PRINT_PAGES.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="pages" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkPrintPages value</doc>
            <type name="PrintPages" c:type="GtkPrintPages"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_printer"
              c:identifier="gtk_print_settings_set_printer"
              version="2.10">
        <doc xml:whitespace="preserve">Convenience function to set %GTK_PRINT_SETTINGS_PRINTER
to @printer.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="printer" transfer-ownership="none">
            <doc xml:whitespace="preserve">the printer name</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_printer_lpi"
              c:identifier="gtk_print_settings_set_printer_lpi"
              version="2.16">
        <doc xml:whitespace="preserve">Sets the value of %GTK_PRINT_SETTINGS_PRINTER_LPI.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="lpi" transfer-ownership="none">
            <doc xml:whitespace="preserve">the resolution in lpi (lines per inch)</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_quality"
              c:identifier="gtk_print_settings_set_quality"
              version="2.10">
        <doc xml:whitespace="preserve">Sets the value of %GTK_PRINT_SETTINGS_QUALITY.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="quality" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkPrintQuality value</doc>
            <type name="PrintQuality" c:type="GtkPrintQuality"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_resolution"
              c:identifier="gtk_print_settings_set_resolution"
              version="2.10">
        <doc xml:whitespace="preserve">Sets the values of %GTK_PRINT_SETTINGS_RESOLUTION,
%GTK_PRINT_SETTINGS_RESOLUTION_X and 
%GTK_PRINT_SETTINGS_RESOLUTION_Y.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="resolution" transfer-ownership="none">
            <doc xml:whitespace="preserve">the resolution in dpi</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_resolution_xy"
              c:identifier="gtk_print_settings_set_resolution_xy"
              version="2.16">
        <doc xml:whitespace="preserve">Sets the values of %GTK_PRINT_SETTINGS_RESOLUTION,
%GTK_PRINT_SETTINGS_RESOLUTION_X and
%GTK_PRINT_SETTINGS_RESOLUTION_Y.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="resolution_x" transfer-ownership="none">
            <doc xml:whitespace="preserve">the horizontal resolution in dpi</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="resolution_y" transfer-ownership="none">
            <doc xml:whitespace="preserve">the vertical resolution in dpi</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_reverse"
              c:identifier="gtk_print_settings_set_reverse"
              version="2.10">
        <doc xml:whitespace="preserve">Sets the value of %GTK_PRINT_SETTINGS_REVERSE.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="reverse" transfer-ownership="none">
            <doc xml:whitespace="preserve">whether to reverse the output</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_scale"
              c:identifier="gtk_print_settings_set_scale"
              version="2.10">
        <doc xml:whitespace="preserve">Sets the value of %GTK_PRINT_SETTINGS_SCALE.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="scale" transfer-ownership="none">
            <doc xml:whitespace="preserve">the scale in percent</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_use_color"
              c:identifier="gtk_print_settings_set_use_color"
              version="2.10">
        <doc xml:whitespace="preserve">Sets the value of %GTK_PRINT_SETTINGS_USE_COLOR.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="use_color" transfer-ownership="none">
            <doc xml:whitespace="preserve">whether to use color</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="to_file"
              c:identifier="gtk_print_settings_to_file"
              version="2.12"
              throws="1">
        <doc xml:whitespace="preserve">This function saves the print settings from @settings to @file_name. If the
file could not be loaded then error is set to either a #GFileError or
#GKeyFileError.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE on success</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="file_name" transfer-ownership="none">
            <doc xml:whitespace="preserve">the file to save to</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="to_key_file"
              c:identifier="gtk_print_settings_to_key_file"
              version="2.12">
        <doc xml:whitespace="preserve">This function adds the print settings from @settings to @key_file.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="key_file" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GKeyFile to save the print settings to</doc>
            <type name="GLib.KeyFile" c:type="GKeyFile*"/>
          </parameter>
          <parameter name="group_name" transfer-ownership="none">
            <doc xml:whitespace="preserve">the group to add the settings to in @key_file, or %NULL to use the default "Print Settings"</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unset"
              c:identifier="gtk_print_settings_unset"
              version="2.10">
        <doc xml:whitespace="preserve">Removes any value associated with @key. 
This has the same effect as setting the value to %NULL.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="key" transfer-ownership="none">
            <doc xml:whitespace="preserve">a key</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
    </class>
    <callback name="PrintSettingsFunc" c:type="GtkPrintSettingsFunc">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="key" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="user_data" transfer-ownership="none" closure="2">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <enumeration name="PrintStatus"
                 glib:type-name="GtkPrintStatus"
                 glib:get-type="gtk_print_status_get_type"
                 c:type="GtkPrintStatus">
      <member name="initial"
              value="0"
              c:identifier="GTK_PRINT_STATUS_INITIAL"
              glib:nick="initial"/>
      <member name="preparing"
              value="1"
              c:identifier="GTK_PRINT_STATUS_PREPARING"
              glib:nick="preparing"/>
      <member name="generating_data"
              value="2"
              c:identifier="GTK_PRINT_STATUS_GENERATING_DATA"
              glib:nick="generating-data"/>
      <member name="sending_data"
              value="3"
              c:identifier="GTK_PRINT_STATUS_SENDING_DATA"
              glib:nick="sending-data"/>
      <member name="pending"
              value="4"
              c:identifier="GTK_PRINT_STATUS_PENDING"
              glib:nick="pending"/>
      <member name="pending_issue"
              value="5"
              c:identifier="GTK_PRINT_STATUS_PENDING_ISSUE"
              glib:nick="pending-issue"/>
      <member name="printing"
              value="6"
              c:identifier="GTK_PRINT_STATUS_PRINTING"
              glib:nick="printing"/>
      <member name="finished"
              value="7"
              c:identifier="GTK_PRINT_STATUS_FINISHED"
              glib:nick="finished"/>
      <member name="finished_aborted"
              value="8"
              c:identifier="GTK_PRINT_STATUS_FINISHED_ABORTED"
              glib:nick="finished-aborted"/>
    </enumeration>
    <bitfield name="PrivateFlags"
              glib:type-name="GtkPrivateFlags"
              glib:get-type="gtk_private_flags_get_type"
              c:type="GtkPrivateFlags">
      <member name="user_style"
              value="1"
              c:identifier="PRIVATE_GTK_USER_STYLE"
              glib:nick="user-style"/>
      <member name="resize_pending"
              value="4"
              c:identifier="PRIVATE_GTK_RESIZE_PENDING"
              glib:nick="resize-pending"/>
      <member name="has_pointer"
              value="8"
              c:identifier="PRIVATE_GTK_HAS_POINTER"
              glib:nick="has-pointer"/>
      <member name="shadowed"
              value="16"
              c:identifier="PRIVATE_GTK_SHADOWED"
              glib:nick="shadowed"/>
      <member name="has_shape_mask"
              value="32"
              c:identifier="PRIVATE_GTK_HAS_SHAPE_MASK"
              glib:nick="has-shape-mask"/>
      <member name="in_reparent"
              value="64"
              c:identifier="PRIVATE_GTK_IN_REPARENT"
              glib:nick="in-reparent"/>
      <member name="direction_set"
              value="128"
              c:identifier="PRIVATE_GTK_DIRECTION_SET"
              glib:nick="direction-set"/>
      <member name="direction_ltr"
              value="256"
              c:identifier="PRIVATE_GTK_DIRECTION_LTR"
              glib:nick="direction-ltr"/>
      <member name="anchored"
              value="512"
              c:identifier="PRIVATE_GTK_ANCHORED"
              glib:nick="anchored"/>
      <member name="child_visible"
              value="1024"
              c:identifier="PRIVATE_GTK_CHILD_VISIBLE"
              glib:nick="child-visible"/>
      <member name="redraw_on_alloc"
              value="2048"
              c:identifier="PRIVATE_GTK_REDRAW_ON_ALLOC"
              glib:nick="redraw-on-alloc"/>
      <member name="alloc_needed"
              value="4096"
              c:identifier="PRIVATE_GTK_ALLOC_NEEDED"
              glib:nick="alloc-needed"/>
      <member name="width_request_needed"
              value="8192"
              c:identifier="PRIVATE_GTK_WIDTH_REQUEST_NEEDED"
              glib:nick="width-request-needed"/>
      <member name="height_request_needed"
              value="16384"
              c:identifier="PRIVATE_GTK_HEIGHT_REQUEST_NEEDED"
              glib:nick="height-request-needed"/>
    </bitfield>
    <class name="ProgressBar"
           c:symbol-prefix="progress_bar"
           c:type="GtkProgressBar"
           parent="Widget"
           glib:type-name="GtkProgressBar"
           glib:get-type="gtk_progress_bar_get_type"
           glib:type-struct="ProgressBarClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Buildable"/>
      <implements name="Orientable"/>
      <implements name="SizeRequest"/>
      <constructor name="new" c:identifier="gtk_progress_bar_new">
        <return-value transfer-ownership="none">
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="get_ellipsize"
              c:identifier="gtk_progress_bar_get_ellipsize"
              version="2.6">
        <doc xml:whitespace="preserve">Returns the ellipsizing position of the progressbar.
See gtk_progress_bar_set_ellipsize().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">#PangoEllipsizeMode</doc>
          <type name="Pango.EllipsizeMode" c:type="PangoEllipsizeMode"/>
        </return-value>
      </method>
      <method name="get_fraction" c:identifier="gtk_progress_bar_get_fraction">
        <doc xml:whitespace="preserve">Returns the current fraction of the task that's been completed.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a fraction from 0.0 to 1.0</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </method>
      <method name="get_inverted" c:identifier="gtk_progress_bar_get_inverted">
        <doc xml:whitespace="preserve">Gets the value set by gtk_progress_bar_set_inverted()</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the progress bar is inverted</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_pulse_step"
              c:identifier="gtk_progress_bar_get_pulse_step">
        <doc xml:whitespace="preserve">Retrieves the pulse step set with gtk_progress_bar_set_pulse_step()</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a fraction from 0.0 to 1.0</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </method>
      <method name="get_show_text"
              c:identifier="gtk_progress_bar_get_show_text"
              version="3.0">
        <doc xml:whitespace="preserve">Gets the value of the #GtkProgressBar::show-text property.
See gtk_progress_bar_set_show_text().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if text is shown in the progress bar</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_text" c:identifier="gtk_progress_bar_get_text">
        <doc xml:whitespace="preserve">Retrieves the text displayed superimposed on the progress bar,
if any, otherwise %NULL. The return value is a reference
to the text, not a copy of it, so will become invalid
if you change the text in the progress bar.
and should not be modified or freed.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">text, or %NULL; this string is owned by the widget</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="pulse" c:identifier="gtk_progress_bar_pulse">
        <doc xml:whitespace="preserve">Indicates that some progress is made, but you don't know how much.
Causes the progress bar to enter "activity mode," where a block
bounces back and forth. Each call to gtk_progress_bar_pulse()
causes the block to move by a little bit (the amount of movement
per pulse is determined by gtk_progress_bar_set_pulse_step()).</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="set_ellipsize"
              c:identifier="gtk_progress_bar_set_ellipsize"
              version="2.6">
        <doc xml:whitespace="preserve">if there is not enough space to render the entire string.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="mode" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #PangoEllipsizeMode</doc>
            <type name="Pango.EllipsizeMode" c:type="PangoEllipsizeMode"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_fraction" c:identifier="gtk_progress_bar_set_fraction">
        <doc xml:whitespace="preserve">Causes the progress bar to "fill in" the given fraction
of the bar. The fraction should be between 0.0 and 1.0,
inclusive.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="fraction" transfer-ownership="none">
            <doc xml:whitespace="preserve">fraction of the task that's been completed</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_inverted" c:identifier="gtk_progress_bar_set_inverted">
        <doc xml:whitespace="preserve">Progress bars normally grow from top to bottom or left to right.
Inverted progress bars grow in the opposite direction.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="inverted" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE to invert the progress bar</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_pulse_step"
              c:identifier="gtk_progress_bar_set_pulse_step">
        <doc xml:whitespace="preserve">Sets the fraction of total progress bar length to move the
bouncing block for each call to gtk_progress_bar_pulse().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="fraction" transfer-ownership="none">
            <doc xml:whitespace="preserve">fraction between 0.0 and 1.0</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_show_text"
              c:identifier="gtk_progress_bar_set_show_text"
              version="3.0">
        <doc xml:whitespace="preserve">Sets whether the progressbar will show text superimposed
over the bar. The shown text is either the value of
the #GtkProgressBar::text property or, if that is %NULL,
the #GtkProgressBar::fraction value, as a percentage.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="show_text" transfer-ownership="none">
            <doc xml:whitespace="preserve">whether to show superimposed text</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_text" c:identifier="gtk_progress_bar_set_text">
        <doc xml:whitespace="preserve">Causes the given @text to appear superimposed on the progress bar.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="text" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">a UTF-8 string, or %NULL</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="ellipsize"
                version="2.6"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The preferred place to ellipsize the string, if the progressbar does
not have enough room to display the entire string, specified as a
#PangoEllisizeMode.
Note that setting this property to a value other than
%PANGO_ELLIPSIZE_NONE has the side-effect that the progressbar requests
only enough space to display the ellipsis "...". Another means to set a
progressbar's width is gtk_widget_set_size_request().</doc>
        <type name="Pango.EllipsizeMode"/>
      </property>
      <property name="fraction" writable="1" transfer-ownership="none">
        <type name="gdouble"/>
      </property>
      <property name="inverted" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="pulse-step" writable="1" transfer-ownership="none">
        <type name="gdouble"/>
      </property>
      <property name="show-text" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="text" writable="1" transfer-ownership="none">
        <type name="utf8"/>
      </property>
      <field name="parent">
        <type name="Widget" c:type="GtkWidget"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ProgressBarPrivate" c:type="GtkProgressBarPrivate*"/>
      </field>
    </class>
    <record name="ProgressBarClass"
            c:type="GtkProgressBarClass"
            glib:is-gtype-struct-for="ProgressBar">
      <field name="parent_class">
        <type name="WidgetClass" c:type="GtkWidgetClass"/>
      </field>
      <field name="_gtk_reserved1" introspectable="0">
        <callback name="_gtk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved2" introspectable="0">
        <callback name="_gtk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved3" introspectable="0">
        <callback name="_gtk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved4" introspectable="0">
        <callback name="_gtk_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved5" introspectable="0">
        <callback name="_gtk_reserved5">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved6" introspectable="0">
        <callback name="_gtk_reserved6">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved7" introspectable="0">
        <callback name="_gtk_reserved7">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved8" introspectable="0">
        <callback name="_gtk_reserved8">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="ProgressBarPrivate"
            c:type="GtkProgressBarPrivate"
            disguised="1">
    </record>
    <class name="RadioAction"
           c:symbol-prefix="radio_action"
           c:type="GtkRadioAction"
           parent="ToggleAction"
           glib:type-name="GtkRadioAction"
           glib:get-type="gtk_radio_action_get_type"
           glib:type-struct="RadioActionClass">
      <implements name="Buildable"/>
      <constructor name="new"
                   c:identifier="gtk_radio_action_new"
                   version="2.4">
        <doc xml:whitespace="preserve">Creates a new #GtkRadioAction object. To add the action to
a #GtkActionGroup and set the accelerator for the action,
call gtk_action_group_add_action_with_accel().</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new #GtkRadioAction</doc>
          <type name="RadioAction" c:type="GtkRadioAction*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:whitespace="preserve">A unique name for the action</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="label" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">The label displayed in menu items and on buttons, or %NULL</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="tooltip" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">A tooltip for this action, or %NULL</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="stock_id" transfer-ownership="none">
            <doc xml:whitespace="preserve">The stock icon to display in widgets representing this action, or %NULL</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:whitespace="preserve">The value which gtk_radio_action_get_current_value() should return if this action is selected.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_current_value"
              c:identifier="gtk_radio_action_get_current_value"
              version="2.4">
        <doc xml:whitespace="preserve">Obtains the value property of the currently active member of 
the group to which @action belongs.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The value of the currently active group member</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="get_group"
              c:identifier="gtk_radio_action_get_group"
              version="2.4">
        <doc xml:whitespace="preserve">Returns the list representing the radio group for this object.
Note that the returned list is only valid until the next change
to the group. 
A common way to set up a group of radio group is the following:
|[
GSList *group = NULL;
GtkRadioAction *action;
while (/&amp;ast; more actions to add &amp;ast;/)
{
action = gtk_radio_action_new (...);
gtk_radio_action_set_group (action, group);
group = gtk_radio_action_get_group (action);
}
]|</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the list representing the radio group for this object</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="RadioAction"/>
          </type>
        </return-value>
      </method>
      <method name="join_group"
              c:identifier="gtk_radio_action_join_group"
              version="3.0">
        <doc xml:whitespace="preserve">Joins a radio action object to the group of another radio action object.
Use this in language bindings instead of the gtk_radio_action_get_group() 
and gtk_radio_action_set_group() methods
A common way to set up a group of radio actions is the following:
|[
GtkRadioAction *action;
GtkRadioAction *last_action;
while (/&amp;ast; more actions to add &amp;ast;/)
{
action = gtk_radio_action_new (...);
gtk_radio_action_join_group (action, last_action);
last_action = action;
}
]|</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="group_source"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">a radio action object whos group we are joining, or %NULL to remove the radio action from its group</doc>
            <type name="RadioAction" c:type="GtkRadioAction*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_current_value"
              c:identifier="gtk_radio_action_set_current_value"
              version="2.10">
        <doc xml:whitespace="preserve">Sets the currently active group member to the member with value
property @current_value.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="current_value" transfer-ownership="none">
            <doc xml:whitespace="preserve">the new value</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_group"
              c:identifier="gtk_radio_action_set_group"
              version="2.4">
        <doc xml:whitespace="preserve">Sets the radio group for the radio action object.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="group" transfer-ownership="none">
            <doc xml:whitespace="preserve">a list representing a radio group</doc>
            <type name="GLib.SList" c:type="GSList*">
              <type name="RadioAction"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <property name="current-value"
                version="2.10"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The value property of the currently active member of the group to which
this action belongs.</doc>
        <type name="gint"/>
      </property>
      <property name="group"
                version="2.4"
                readable="0"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Sets a new group for a radio action.</doc>
        <type name="RadioAction"/>
      </property>
      <property name="value"
                version="2.4"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The value is an arbitrary integer which can be used as a
convenient way to determine which action in the group is 
currently active in an ::activate or ::changed signal handler.
See gtk_radio_action_get_current_value() and #GtkRadioActionEntry
for convenient ways to get and set this property.</doc>
        <type name="gint"/>
      </property>
      <field name="parent">
        <type name="ToggleAction" c:type="GtkToggleAction"/>
      </field>
      <field name="private_data">
        <type name="RadioActionPrivate" c:type="GtkRadioActionPrivate*"/>
      </field>
      <glib:signal name="changed" version="2.4">
        <doc xml:whitespace="preserve">The ::changed signal is emitted on every member of a radio group when the
active member is changed. The signal gets emitted after the ::activate signals
for the previous and current active members.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the member of @action&lt;!-- --&gt;s group which has just been activated</doc>
            <type name="RadioAction"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="RadioActionClass"
            c:type="GtkRadioActionClass"
            glib:is-gtype-struct-for="RadioAction">
      <field name="parent_class">
        <type name="ToggleActionClass" c:type="GtkToggleActionClass"/>
      </field>
      <field name="changed">
        <callback name="changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="action" transfer-ownership="none">
              <type name="RadioAction" c:type="GtkRadioAction*"/>
            </parameter>
            <parameter name="current" transfer-ownership="none">
              <type name="RadioAction" c:type="GtkRadioAction*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_gtk_reserved1" introspectable="0">
        <callback name="_gtk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved2" introspectable="0">
        <callback name="_gtk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved3" introspectable="0">
        <callback name="_gtk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved4" introspectable="0">
        <callback name="_gtk_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="RadioActionEntry" c:type="GtkRadioActionEntry">
      <doc xml:whitespace="preserve">#GtkRadioActionEntry structs are used with
gtk_action_group_add_radio_actions() to construct groups of radio actions.</doc>
      <field name="name" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="stock_id" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="label" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="accelerator" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="tooltip" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="value" writable="1">
        <type name="gint" c:type="gint"/>
      </field>
    </record>
    <record name="RadioActionPrivate"
            c:type="GtkRadioActionPrivate"
            disguised="1">
    </record>
    <class name="RadioButton"
           c:symbol-prefix="radio_button"
           c:type="GtkRadioButton"
           parent="CheckButton"
           glib:type-name="GtkRadioButton"
           glib:get-type="gtk_radio_button_get_type"
           glib:type-struct="RadioButtonClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Activatable"/>
      <implements name="Buildable"/>
      <implements name="SizeRequest"/>
      <constructor name="new" c:identifier="gtk_radio_button_new">
        <doc xml:whitespace="preserve">Creates a new #GtkRadioButton. To be of any practical value, a widget should
then be packed into the radio button.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a new radio button</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="group" transfer-ownership="none">
            <doc xml:whitespace="preserve">an existing radio button group, or %NULL if you are creating a new group.</doc>
            <type name="GLib.SList" c:type="GSList*">
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_with_label"
                   c:identifier="gtk_radio_button_new_with_label">
        <doc xml:whitespace="preserve">Creates a new #GtkRadioButton with a text label.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new radio button.</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="group" transfer-ownership="none">
            <doc xml:whitespace="preserve">an existing radio button group, or %NULL if you are creating a new group.</doc>
            <type name="GLib.SList" c:type="GSList*">
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </parameter>
          <parameter name="label" transfer-ownership="none">
            <doc xml:whitespace="preserve">the text label to display next to the radio button.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_with_mnemonic"
                   c:identifier="gtk_radio_button_new_with_mnemonic">
        <doc xml:whitespace="preserve">Creates a new #GtkRadioButton containing a label, adding it to the same
group as @group. The label will be created using
gtk_label_new_with_mnemonic(), so underscores in @label indicate the
mnemonic for the button.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new #GtkRadioButton</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="group" transfer-ownership="none">
            <doc xml:whitespace="preserve">the radio button group</doc>
            <type name="GLib.SList" c:type="GSList*">
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </parameter>
          <parameter name="label" transfer-ownership="none">
            <doc xml:whitespace="preserve">the text of the button, with an underscore in front of the mnemonic character</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_group" c:identifier="gtk_radio_button_get_group">
        <doc xml:whitespace="preserve">Retrieves the group assigned to a radio button.
containing all the radio buttons in the same group
as @radio_button. The returned list is owned by the radio button
and must not be modified or freed.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a linked list</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="RadioButton"/>
          </type>
        </return-value>
      </method>
      <method name="join_group"
              c:identifier="gtk_radio_button_join_group"
              version="3.0">
        <doc xml:whitespace="preserve">Joins a #GtkRadioButton object to the group of another #GtkRadioButton object
Use this in language bindings instead of the gtk_radio_button_get_group() 
and gtk_radio_button_set_group() methods
A common way to set up a group of radio buttons is the following:
|[
GtkRadioButton *radio_button;
GtkRadioButton *last_button;
while (/&amp;ast; more buttons to add &amp;ast;/)
{
radio_button = gtk_radio_button_new (...);
gtk_radio_button_join_group (radio_button, last_button);
last_button = radio_button;
}
]|</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="group_source"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">a radio button object whos group we are joining, or %NULL to remove the radio button from its group</doc>
            <type name="RadioButton" c:type="GtkRadioButton*"/>
          </parameter>
        </parameters>
      </method>
      <method name="new_from_widget"
              c:identifier="gtk_radio_button_new_from_widget">
        <doc xml:whitespace="preserve">Creates a new #GtkRadioButton, adding it to the same group as
should be packed into the radio button.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new radio button.</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
      </method>
      <method name="new_with_label_from_widget"
              c:identifier="gtk_radio_button_new_with_label_from_widget">
        <doc xml:whitespace="preserve">Creates a new #GtkRadioButton with a text label, adding it to
the same group as @radio_group_member.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a new radio button.</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="label" transfer-ownership="none">
            <doc xml:whitespace="preserve">a text string to display next to the radio button.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="new_with_mnemonic_from_widget"
              c:identifier="gtk_radio_button_new_with_mnemonic_from_widget">
        <doc xml:whitespace="preserve">Creates a new #GtkRadioButton containing a label. The label
will be created using gtk_label_new_with_mnemonic(), so underscores
in @label indicate the mnemonic for the button.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new #GtkRadioButton</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="label" transfer-ownership="none">
            <doc xml:whitespace="preserve">the text of the button, with an underscore in front of the mnemonic character</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_group" c:identifier="gtk_radio_button_set_group">
        <doc xml:whitespace="preserve">Sets a #GtkRadioButton's group. It should be noted that this does not change
the layout of your interface in any way, so if you are changing the group,
it is likely you will need to re-arrange the user interface to reflect these
changes.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="group" transfer-ownership="none">
            <doc xml:whitespace="preserve">an existing radio button group, such as one returned from gtk_radio_button_get_group().</doc>
            <type name="GLib.SList" c:type="GSList*">
              <type name="RadioButton"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <property name="group"
                readable="0"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Sets a new group for a radio button.</doc>
        <type name="RadioButton"/>
      </property>
      <field name="check_button">
        <type name="CheckButton" c:type="GtkCheckButton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="RadioButtonPrivate" c:type="GtkRadioButtonPrivate*"/>
      </field>
      <glib:signal name="group-changed" version="2.4">
        <doc xml:whitespace="preserve">Emitted when the group of radio buttons that a radio button belongs
to changes. This is emitted when a radio button switches from
being alone to being part of a group of 2 or more buttons, or
vice-versa, and when a button is moved from one group of 2 or
more buttons to a different one, but not when the composition
of the group that a button belongs to changes.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="RadioButtonClass"
            c:type="GtkRadioButtonClass"
            glib:is-gtype-struct-for="RadioButton">
      <field name="parent_class">
        <type name="CheckButtonClass" c:type="GtkCheckButtonClass"/>
      </field>
      <field name="group_changed">
        <callback name="group_changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="radio_button" transfer-ownership="none">
              <type name="RadioButton" c:type="GtkRadioButton*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_gtk_reserved2" introspectable="0">
        <callback name="_gtk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved3" introspectable="0">
        <callback name="_gtk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved4" introspectable="0">
        <callback name="_gtk_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="RadioButtonPrivate"
            c:type="GtkRadioButtonPrivate"
            disguised="1">
    </record>
    <class name="RadioMenuItem"
           c:symbol-prefix="radio_menu_item"
           c:type="GtkRadioMenuItem"
           parent="CheckMenuItem"
           glib:type-name="GtkRadioMenuItem"
           glib:get-type="gtk_radio_menu_item_get_type"
           glib:type-struct="RadioMenuItemClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Activatable"/>
      <implements name="Buildable"/>
      <implements name="SizeRequest"/>
      <constructor name="new" c:identifier="gtk_radio_menu_item_new">
        <return-value transfer-ownership="none">
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="group" transfer-ownership="none">
            <type name="GLib.SList" c:type="GSList*">
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_with_label"
                   c:identifier="gtk_radio_menu_item_new_with_label">
        <doc xml:whitespace="preserve">Creates a new #GtkRadioMenuItem whose child is a simple #GtkLabel.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">A new #GtkRadioMenuItem</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="group" transfer-ownership="full">
            <type name="GLib.SList" c:type="GSList*">
              <type name="RadioMenuItem"/>
            </type>
          </parameter>
          <parameter name="label" transfer-ownership="none">
            <doc xml:whitespace="preserve">the text for the label</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_with_mnemonic"
                   c:identifier="gtk_radio_menu_item_new_with_mnemonic">
        <doc xml:whitespace="preserve">Creates a new #GtkRadioMenuItem containing a label. The label
will be created using gtk_label_new_with_mnemonic(), so underscores
in @label indicate the mnemonic for the menu item.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a new #GtkRadioMenuItem</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="group" transfer-ownership="none">
            <doc xml:whitespace="preserve">group the radio menu item is inside</doc>
            <type name="GLib.SList" c:type="GSList*">
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </parameter>
          <parameter name="label" transfer-ownership="none">
            <doc xml:whitespace="preserve">the text of the button, with an underscore in front of the mnemonic character</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_group" c:identifier="gtk_radio_menu_item_get_group">
        <doc xml:whitespace="preserve">Returns the group to which the radio menu item belongs, as a #GList of
#GtkRadioMenuItem. The list belongs to GTK+ and should not be freed.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the group of @radio_menu_item</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </return-value>
      </method>
      <method name="new_from_widget"
              c:identifier="gtk_radio_menu_item_new_from_widget"
              version="2.4">
        <doc xml:whitespace="preserve">Creates a new #GtkRadioMenuItem adding it to the same group as @group.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">The new #GtkRadioMenuItem</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
      </method>
      <method name="new_with_label_from_widget"
              c:identifier="gtk_radio_menu_item_new_with_label_from_widget"
              version="2.4">
        <doc xml:whitespace="preserve">Creates a new GtkRadioMenuItem whose child is a simple GtkLabel.
The new #GtkRadioMenuItem is added to the same group as @group.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">The new #GtkRadioMenuItem</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="label" transfer-ownership="none">
            <doc xml:whitespace="preserve">the text for the label</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="new_with_mnemonic_from_widget"
              c:identifier="gtk_radio_menu_item_new_with_mnemonic_from_widget"
              version="2.4">
        <doc xml:whitespace="preserve">Creates a new GtkRadioMenuItem containing a label. The label will be
created using gtk_label_new_with_mnemonic(), so underscores in label
indicate the mnemonic for the menu item.
The new #GtkRadioMenuItem is added to the same group as @group.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">The new #GtkRadioMenuItem</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="label" transfer-ownership="none">
            <doc xml:whitespace="preserve">the text of the button, with an underscore in front of the mnemonic character</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_group" c:identifier="gtk_radio_menu_item_set_group">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="group" transfer-ownership="none">
            <type name="GLib.SList" c:type="GSList*">
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <property name="group"
                version="2.8"
                readable="0"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The radio menu item whose group this widget belongs to.</doc>
        <type name="RadioMenuItem"/>
      </property>
      <field name="check_menu_item">
        <type name="CheckMenuItem" c:type="GtkCheckMenuItem"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="RadioMenuItemPrivate" c:type="GtkRadioMenuItemPrivate*"/>
      </field>
      <glib:signal name="group-changed">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="RadioMenuItemClass"
            c:type="GtkRadioMenuItemClass"
            glib:is-gtype-struct-for="RadioMenuItem">
      <field name="parent_class">
        <type name="CheckMenuItemClass" c:type="GtkCheckMenuItemClass"/>
      </field>
      <field name="group_changed">
        <callback name="group_changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="radio_menu_item" transfer-ownership="none">
              <type name="RadioMenuItem" c:type="GtkRadioMenuItem*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_gtk_reserved2" introspectable="0">
        <callback name="_gtk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved3" introspectable="0">
        <callback name="_gtk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved4" introspectable="0">
        <callback name="_gtk_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="RadioMenuItemPrivate"
            c:type="GtkRadioMenuItemPrivate"
            disguised="1">
    </record>
    <class name="RadioToolButton"
           c:symbol-prefix="radio_tool_button"
           c:type="GtkRadioToolButton"
           parent="ToggleToolButton"
           glib:type-name="GtkRadioToolButton"
           glib:get-type="gtk_radio_tool_button_get_type"
           glib:type-struct="RadioToolButtonClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Activatable"/>
      <implements name="Buildable"/>
      <implements name="SizeRequest"/>
      <constructor name="new"
                   c:identifier="gtk_radio_tool_button_new"
                   version="2.4">
        <doc xml:whitespace="preserve">Creates a new #GtkRadioToolButton, adding it to @group.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The new #GtkRadioToolButton</doc>
          <type name="ToolItem" c:type="GtkToolItem*"/>
        </return-value>
        <parameters>
          <parameter name="group" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">An existing radio button group, or %NULL if you are creating a new group</doc>
            <type name="GLib.SList" c:type="GSList*">
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_stock"
                   c:identifier="gtk_radio_tool_button_new_from_stock"
                   version="2.4">
        <doc xml:whitespace="preserve">Creates a new #GtkRadioToolButton, adding it to @group. 
The new #GtkRadioToolButton will contain an icon and label from the
stock item indicated by @stock_id.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The new #GtkRadioToolItem</doc>
          <type name="ToolItem" c:type="GtkToolItem*"/>
        </return-value>
        <parameters>
          <parameter name="group" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">an existing radio button group, or %NULL if you are creating a new group</doc>
            <type name="GLib.SList" c:type="GSList*">
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </parameter>
          <parameter name="stock_id" transfer-ownership="none">
            <doc xml:whitespace="preserve">the name of a stock item</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_group"
              c:identifier="gtk_radio_tool_button_get_group"
              version="2.4">
        <doc xml:whitespace="preserve">Returns the radio button group @button belongs to.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The group @button belongs to.</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </return-value>
      </method>
      <method name="new_from_widget"
              c:identifier="gtk_radio_tool_button_new_from_widget"
              version="2.4">
        <doc xml:whitespace="preserve">Creates a new #GtkRadioToolButton adding it to the same group as @gruup</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">The new #GtkRadioToolButton</doc>
          <type name="ToolItem" c:type="GtkToolItem*"/>
        </return-value>
      </method>
      <method name="new_with_stock_from_widget"
              c:identifier="gtk_radio_tool_button_new_with_stock_from_widget"
              version="2.4">
        <doc xml:whitespace="preserve">Creates a new #GtkRadioToolButton adding it to the same group as @group.
The new #GtkRadioToolButton will contain an icon and label from the
stock item indicated by @stock_id.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A new #GtkRadioToolButton</doc>
          <type name="ToolItem" c:type="GtkToolItem*"/>
        </return-value>
        <parameters>
          <parameter name="stock_id" transfer-ownership="none">
            <doc xml:whitespace="preserve">the name of a stock item</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_group"
              c:identifier="gtk_radio_tool_button_set_group"
              version="2.4">
        <doc xml:whitespace="preserve">Adds @button to @group, removing it from the group it belonged to before.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="group" transfer-ownership="none">
            <doc xml:whitespace="preserve">an existing radio button group</doc>
            <type name="GLib.SList" c:type="GSList*">
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <property name="group"
                version="2.4"
                readable="0"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Sets a new group for a radio tool button.</doc>
        <type name="RadioToolButton"/>
      </property>
      <field name="parent">
        <type name="ToggleToolButton" c:type="GtkToggleToolButton"/>
      </field>
    </class>
    <record name="RadioToolButtonClass"
            c:type="GtkRadioToolButtonClass"
            glib:is-gtype-struct-for="RadioToolButton">
      <field name="parent_class">
        <type name="ToggleToolButtonClass" c:type="GtkToggleToolButtonClass"/>
      </field>
      <field name="_gtk_reserved1" introspectable="0">
        <callback name="_gtk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved2" introspectable="0">
        <callback name="_gtk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved3" introspectable="0">
        <callback name="_gtk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved4" introspectable="0">
        <callback name="_gtk_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <class name="Range"
           c:symbol-prefix="range"
           c:type="GtkRange"
           parent="Widget"
           abstract="1"
           glib:type-name="GtkRange"
           glib:get-type="gtk_range_get_type"
           glib:type-struct="RangeClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Buildable"/>
      <implements name="Orientable"/>
      <implements name="SizeRequest"/>
      <virtual-method name="get_range_border">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="border_" transfer-ownership="none">
            <type name="Border" c:type="GtkBorder*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="get_adjustment" c:identifier="gtk_range_get_adjustment">
        <doc xml:whitespace="preserve">Get the #GtkAdjustment which is the "model" object for #GtkRange.
See gtk_range_set_adjustment() for details.
The return value does not have a reference added, so should not
be unreferenced.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GtkAdjustment</doc>
          <type name="Adjustment" c:type="GtkAdjustment*"/>
        </return-value>
      </method>
      <method name="get_fill_level"
              c:identifier="gtk_range_get_fill_level"
              version="2.12">
        <doc xml:whitespace="preserve">Gets the current position of the fill level indicator.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The current fill level</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </method>
      <method name="get_flippable"
              c:identifier="gtk_range_get_flippable"
              version="2.18">
        <doc xml:whitespace="preserve">Gets the value set by gtk_range_set_flippable().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the range is flippable</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_inverted" c:identifier="gtk_range_get_inverted">
        <doc xml:whitespace="preserve">Gets the value set by gtk_range_set_inverted().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the range is inverted</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_lower_stepper_sensitivity"
              c:identifier="gtk_range_get_lower_stepper_sensitivity"
              version="2.10">
        <doc xml:whitespace="preserve">Gets the sensitivity policy for the stepper that points to the
'lower' end of the GtkRange's adjustment.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The lower stepper's sensitivity policy.</doc>
          <type name="SensitivityType" c:type="GtkSensitivityType"/>
        </return-value>
      </method>
      <method name="get_min_slider_size"
              c:identifier="gtk_range_get_min_slider_size"
              version="2.20">
        <doc xml:whitespace="preserve">This function is useful mainly for #GtkRange subclasses.
See gtk_range_set_min_slider_size().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The minimum size of the range's slider.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="get_range_rect"
              c:identifier="gtk_range_get_range_rect"
              version="2.20">
        <doc xml:whitespace="preserve">This function returns the area that contains the range's trough
and its steppers, in widget-&gt;window coordinates.
This function is useful mainly for #GtkRange subclasses.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="range_rect" transfer-ownership="none">
            <doc xml:whitespace="preserve">return location for the range rectangle</doc>
            <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_restrict_to_fill_level"
              c:identifier="gtk_range_get_restrict_to_fill_level"
              version="2.12">
        <doc xml:whitespace="preserve">Gets whether the range is restricted to the fill level.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if @range is restricted to the fill level.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_show_fill_level"
              c:identifier="gtk_range_get_show_fill_level"
              version="2.12">
        <doc xml:whitespace="preserve">Gets whether the range displays the fill level graphically.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if @range shows the fill level.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_slider_range"
              c:identifier="gtk_range_get_slider_range"
              version="2.20">
        <doc xml:whitespace="preserve">This function returns sliders range along the long dimension,
in widget-&gt;window coordinates.
This function is useful mainly for #GtkRange subclasses.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="slider_start"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">return location for the slider's start, or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="slider_end"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">return location for the slider's end, or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_slider_size_fixed"
              c:identifier="gtk_range_get_slider_size_fixed"
              version="2.20">
        <doc xml:whitespace="preserve">This function is useful mainly for #GtkRange subclasses.
See gtk_range_set_slider_size_fixed().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">whether the range's slider has a fixed size.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_update_policy"
              c:identifier="gtk_range_get_update_policy">
        <doc xml:whitespace="preserve">Gets the update policy of @range. See gtk_range_set_update_policy().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the current update policy</doc>
          <type name="UpdateType" c:type="GtkUpdateType"/>
        </return-value>
      </method>
      <method name="get_upper_stepper_sensitivity"
              c:identifier="gtk_range_get_upper_stepper_sensitivity"
              version="2.10">
        <doc xml:whitespace="preserve">Gets the sensitivity policy for the stepper that points to the
'upper' end of the GtkRange's adjustment.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The upper stepper's sensitivity policy.</doc>
          <type name="SensitivityType" c:type="GtkSensitivityType"/>
        </return-value>
      </method>
      <method name="get_value" c:identifier="gtk_range_get_value">
        <doc xml:whitespace="preserve">Gets the current value of the range.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">current value of the range.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </method>
      <method name="set_adjustment" c:identifier="gtk_range_set_adjustment">
        <doc xml:whitespace="preserve">Sets the adjustment to be used as the "model" object for this range
widget. The adjustment indicates the current range value, the
minimum and maximum range values, the step/page increments used
for keybindings and scrolling, and the page size. The page size
is normally 0 for #GtkScale and nonzero for #GtkScrollbar, and
indicates the size of the visible area of the widget being scrolled.
The page size affects the size of the scrollbar slider.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="adjustment" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkAdjustment</doc>
            <type name="Adjustment" c:type="GtkAdjustment*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_fill_level"
              c:identifier="gtk_range_set_fill_level"
              version="2.12">
        <doc xml:whitespace="preserve">Set the new position of the fill level indicator.
The "fill level" is probably best described by its most prominent
use case, which is an indicator for the amount of pre-buffering in
a streaming media player. In that use case, the value of the range
would indicate the current play position, and the fill level would
be the position up to which the file/stream has been downloaded.
This amount of prebuffering can be displayed on the range's trough
and is themeable separately from the trough. To enable fill level
display, use gtk_range_set_show_fill_level(). The range defaults
to not showing the fill level.
Additionally, it's possible to restrict the range's slider position
to values which are smaller than the fill level. This is controller
by gtk_range_set_restrict_to_fill_level() and is by default
enabled.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="fill_level" transfer-ownership="none">
            <doc xml:whitespace="preserve">the new position of the fill level indicator</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_flippable"
              c:identifier="gtk_range_set_flippable"
              version="2.18">
        <doc xml:whitespace="preserve">If a range is flippable, it will switch its direction if it is
horizontal and its direction is %GTK_TEXT_DIR_RTL.
See gtk_widget_get_direction().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="flippable" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE to make the range flippable</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_increments" c:identifier="gtk_range_set_increments">
        <doc xml:whitespace="preserve">Sets the step and page sizes for the range.
The step size is used when the user clicks the #GtkScrollbar
arrows or moves #GtkScale via arrow keys. The page size
is used for example when moving via Page Up or Page Down keys.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="step" transfer-ownership="none">
            <doc xml:whitespace="preserve">step size</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="page" transfer-ownership="none">
            <doc xml:whitespace="preserve">page size</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_inverted" c:identifier="gtk_range_set_inverted">
        <doc xml:whitespace="preserve">Ranges normally move from lower to higher values as the
slider moves from top to bottom or left to right. Inverted
ranges have higher values at the top or on the right rather than
on the bottom or left.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="setting" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE to invert the range</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_lower_stepper_sensitivity"
              c:identifier="gtk_range_set_lower_stepper_sensitivity"
              version="2.10">
        <doc xml:whitespace="preserve">Sets the sensitivity policy for the stepper that points to the
'lower' end of the GtkRange's adjustment.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="sensitivity" transfer-ownership="none">
            <doc xml:whitespace="preserve">the lower stepper's sensitivity policy.</doc>
            <type name="SensitivityType" c:type="GtkSensitivityType"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_min_slider_size"
              c:identifier="gtk_range_set_min_slider_size"
              version="2.20">
        <doc xml:whitespace="preserve">Sets the minimum size of the range's slider.
This function is useful mainly for #GtkRange subclasses.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="min_size" transfer-ownership="none">
            <doc xml:whitespace="preserve">The slider's minimum size</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_range" c:identifier="gtk_range_set_range">
        <doc xml:whitespace="preserve">Sets the allowable values in the #GtkRange, and clamps the range
value to be between @min and @max. (If the range has a non-zero
page size, it is clamped between @min and @max - page-size.)</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="min" transfer-ownership="none">
            <doc xml:whitespace="preserve">minimum range value</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="max" transfer-ownership="none">
            <doc xml:whitespace="preserve">maximum range value</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_restrict_to_fill_level"
              c:identifier="gtk_range_set_restrict_to_fill_level"
              version="2.12">
        <doc xml:whitespace="preserve">Sets whether the slider is restricted to the fill level. See
gtk_range_set_fill_level() for a general description of the fill
level concept.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="restrict_to_fill_level" transfer-ownership="none">
            <doc xml:whitespace="preserve">Whether the fill level restricts slider movement.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_show_fill_level"
              c:identifier="gtk_range_set_show_fill_level"
              version="2.12">
        <doc xml:whitespace="preserve">Sets whether a graphical fill level is show on the trough. See
gtk_range_set_fill_level() for a general description of the fill
level concept.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="show_fill_level" transfer-ownership="none">
            <doc xml:whitespace="preserve">Whether a fill level indicator graphics is shown.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_slider_size_fixed"
              c:identifier="gtk_range_set_slider_size_fixed"
              version="2.20">
        <doc xml:whitespace="preserve">Sets whether the range's slider has a fixed size, or a size that
depends on it's adjustment's page size.
This function is useful mainly for #GtkRange subclasses.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="size_fixed" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE to make the slider size constant</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_update_policy"
              c:identifier="gtk_range_set_update_policy">
        <doc xml:whitespace="preserve">Sets the update policy for the range. #GTK_UPDATE_CONTINUOUS means that
anytime the range slider is moved, the range value will change and the
value_changed signal will be emitted. #GTK_UPDATE_DELAYED means that
the value will be updated after a brief timeout where no slider motion
occurs, so updates are spaced by a short time rather than
continuous. #GTK_UPDATE_DISCONTINUOUS means that the value will only
be updated when the user releases the button and ends the slider
drag operation.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="policy" transfer-ownership="none">
            <doc xml:whitespace="preserve">update policy</doc>
            <type name="UpdateType" c:type="GtkUpdateType"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_upper_stepper_sensitivity"
              c:identifier="gtk_range_set_upper_stepper_sensitivity"
              version="2.10">
        <doc xml:whitespace="preserve">Sets the sensitivity policy for the stepper that points to the
'upper' end of the GtkRange's adjustment.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="sensitivity" transfer-ownership="none">
            <doc xml:whitespace="preserve">the upper stepper's sensitivity policy.</doc>
            <type name="SensitivityType" c:type="GtkSensitivityType"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_value" c:identifier="gtk_range_set_value">
        <doc xml:whitespace="preserve">Sets the current value of the range; if the value is outside the
minimum or maximum range values, it will be clamped to fit inside
them. The range emits the #GtkRange::value-changed signal if the 
value changes.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="value" transfer-ownership="none">
            <doc xml:whitespace="preserve">new value of the range</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <property name="adjustment"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="Adjustment"/>
      </property>
      <property name="fill-level"
                version="2.12"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The fill level (e.g. prebuffering of a network stream).
See gtk_range_set_fill_level().</doc>
        <type name="gdouble"/>
      </property>
      <property name="inverted" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="lower-stepper-sensitivity"
                writable="1"
                transfer-ownership="none">
        <type name="SensitivityType"/>
      </property>
      <property name="restrict-to-fill-level"
                version="2.12"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The restrict-to-fill-level property controls whether slider
movement is restricted to an upper boundary set by the
fill level. See gtk_range_set_restrict_to_fill_level().</doc>
        <type name="gboolean"/>
      </property>
      <property name="show-fill-level"
                version="2.12"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The show-fill-level property controls whether fill level indicator
graphics are displayed on the trough. See
gtk_range_set_show_fill_level().</doc>
        <type name="gboolean"/>
      </property>
      <property name="update-policy" writable="1" transfer-ownership="none">
        <type name="UpdateType"/>
      </property>
      <property name="upper-stepper-sensitivity"
                writable="1"
                transfer-ownership="none">
        <type name="SensitivityType"/>
      </property>
      <field name="widget">
        <type name="Widget" c:type="GtkWidget"/>
      </field>
      <field name="priv">
        <type name="RangePrivate" c:type="GtkRangePrivate*"/>
      </field>
      <glib:signal name="adjust-bounds">
        <doc xml:whitespace="preserve">Emitted before clamping a value, to give the application a
chance to adjust the bounds.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the value before we clamp</doc>
            <type name="gdouble"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="change-value" version="2.6">
        <doc xml:whitespace="preserve">The ::change-value signal is emitted when a scroll action is
performed on a range.  It allows an application to determine the
type of scroll event that occurred and the resultant new value.
The application can handle the event itself and return %TRUE to
prevent further processing.  Or, by returning %FALSE, it can pass
the event to other handlers until the default GTK+ handler is
reached.
The value parameter is unrounded.  An application that overrides
the ::change-value signal is responsible for clamping the value to
the desired number of decimal digits; the default GTK+ handler 
clamps the value based on @range-&gt;round_digits.
It is not possible to use delayed update policies in an overridden
::change-value handler.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE to prevent other handlers from being invoked for the signal, %FALSE to propagate the signal further</doc>
          <type name="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the type of scroll action that was performed</doc>
            <type name="ScrollType"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <doc xml:whitespace="preserve">the new value resulting from the scroll action</doc>
            <type name="gdouble"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="move-slider">
        <doc xml:whitespace="preserve">Virtual function that moves the slider. Used for keybindings.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">how to move the slider</doc>
            <type name="ScrollType"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="value-changed">
        <doc xml:whitespace="preserve">Emitted when the range value changes.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="RangeClass"
            c:type="GtkRangeClass"
            glib:is-gtype-struct-for="Range">
      <field name="parent_class">
        <type name="WidgetClass" c:type="GtkWidgetClass"/>
      </field>
      <field name="slider_detail">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="stepper_detail">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="value_changed">
        <callback name="value_changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="range" transfer-ownership="none">
              <type name="Range" c:type="GtkRange*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="adjust_bounds">
        <callback name="adjust_bounds">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="range" transfer-ownership="none">
              <type name="Range" c:type="GtkRange*"/>
            </parameter>
            <parameter name="new_value" transfer-ownership="none">
              <type name="gdouble" c:type="gdouble"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="move_slider">
        <callback name="move_slider">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="range" transfer-ownership="none">
              <type name="Range" c:type="GtkRange*"/>
            </parameter>
            <parameter name="scroll" transfer-ownership="none">
              <type name="ScrollType" c:type="GtkScrollType"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_range_border">
        <callback name="get_range_border">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="range" transfer-ownership="none">
              <type name="Range" c:type="GtkRange*"/>
            </parameter>
            <parameter name="border_" transfer-ownership="none">
              <type name="Border" c:type="GtkBorder*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="change_value">
        <callback name="change_value">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="range" transfer-ownership="none">
              <type name="Range" c:type="GtkRange*"/>
            </parameter>
            <parameter name="scroll" transfer-ownership="none">
              <type name="ScrollType" c:type="GtkScrollType"/>
            </parameter>
            <parameter name="new_value" transfer-ownership="none">
              <type name="gdouble" c:type="gdouble"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_gtk_reserved1" introspectable="0">
        <callback name="_gtk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved2" introspectable="0">
        <callback name="_gtk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved3" introspectable="0">
        <callback name="_gtk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="RangePrivate" c:type="GtkRangePrivate" disguised="1">
    </record>
    <record name="RcContext" c:type="GtkRcContext" disguised="1">
    </record>
    <bitfield name="RcFlags"
              glib:type-name="GtkRcFlags"
              glib:get-type="gtk_rc_flags_get_type"
              c:type="GtkRcFlags">
      <member name="fg" value="1" c:identifier="GTK_RC_FG" glib:nick="fg"/>
      <member name="bg" value="2" c:identifier="GTK_RC_BG" glib:nick="bg"/>
      <member name="text"
              value="4"
              c:identifier="GTK_RC_TEXT"
              glib:nick="text"/>
      <member name="base"
              value="8"
              c:identifier="GTK_RC_BASE"
              glib:nick="base"/>
    </bitfield>
    <record name="RcProperty" c:type="GtkRcProperty">
      <field name="type_name" writable="1">
        <type name="GLib.Quark" c:type="GQuark"/>
      </field>
      <field name="property_name" writable="1">
        <type name="GLib.Quark" c:type="GQuark"/>
      </field>
      <field name="origin" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="value" writable="1">
        <type name="GObject.Value" c:type="GValue"/>
      </field>
    </record>
    <callback name="RcPropertyParser" c:type="GtkRcPropertyParser">
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="pspec" transfer-ownership="none">
          <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
        </parameter>
        <parameter name="rc_string" transfer-ownership="none">
          <type name="GLib.String" c:type="GString*"/>
        </parameter>
        <parameter name="property_value" transfer-ownership="none">
          <type name="GObject.Value" c:type="GValue*"/>
        </parameter>
      </parameters>
    </callback>
    <class name="RcStyle"
           c:symbol-prefix="rc_style"
           c:type="GtkRcStyle"
           parent="GObject.Object"
           glib:type-name="GtkRcStyle"
           glib:get-type="gtk_rc_style_get_type"
           glib:type-struct="RcStyleClass">
      <constructor name="new" c:identifier="gtk_rc_style_new">
        <return-value transfer-ownership="full">
          <type name="RcStyle" c:type="GtkRcStyle*"/>
        </return-value>
      </constructor>
      <virtual-method name="create_rc_style" introspectable="0">
        <return-value>
          <type name="RcStyle" c:type="GtkRcStyle*"/>
        </return-value>
      </virtual-method>
      <virtual-method name="create_style" introspectable="0">
        <return-value>
          <type name="Style" c:type="GtkStyle*"/>
        </return-value>
      </virtual-method>
      <virtual-method name="merge">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="src" transfer-ownership="none">
            <type name="RcStyle" c:type="GtkRcStyle*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="parse">
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="settings" transfer-ownership="none">
            <type name="Settings" c:type="GtkSettings*"/>
          </parameter>
          <parameter name="scanner" transfer-ownership="none">
            <type name="GLib.Scanner" c:type="GScanner*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="copy" c:identifier="gtk_rc_style_copy">
        <doc xml:whitespace="preserve">Makes a copy of the specified #GtkRcStyle. This function
will correctly copy an RC style that is a member of a class
derived from #GtkRcStyle.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the resulting #GtkRcStyle</doc>
          <type name="RcStyle" c:type="GtkRcStyle*"/>
        </return-value>
      </method>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="name">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="bg_pixmap_name">
        <array zero-terminated="0" c:type="utf8" fixed-size="5">
          <type name="utf8" c:type="gchar*"/>
        </array>
      </field>
      <field name="font_desc">
        <type name="Pango.FontDescription" c:type="PangoFontDescription*"/>
      </field>
      <field name="color_flags">
        <array zero-terminated="0" c:type="GtkRcFlags" fixed-size="5">
          <type name="RcFlags" c:type="GtkRcFlags"/>
        </array>
      </field>
      <field name="fg">
        <array zero-terminated="0" c:type="GdkColor" fixed-size="5">
          <type name="Gdk.Color" c:type="GdkColor"/>
        </array>
      </field>
      <field name="bg">
        <array zero-terminated="0" c:type="GdkColor" fixed-size="5">
          <type name="Gdk.Color" c:type="GdkColor"/>
        </array>
      </field>
      <field name="text">
        <array zero-terminated="0" c:type="GdkColor" fixed-size="5">
          <type name="Gdk.Color" c:type="GdkColor"/>
        </array>
      </field>
      <field name="base">
        <array zero-terminated="0" c:type="GdkColor" fixed-size="5">
          <type name="Gdk.Color" c:type="GdkColor"/>
        </array>
      </field>
      <field name="xthickness">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="ythickness">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="rc_properties">
        <array name="GLib.Array" c:type="GArray*">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
      <field name="rc_style_lists">
        <type name="GLib.SList" c:type="GSList*">
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </field>
      <field name="icon_factories">
        <type name="GLib.SList" c:type="GSList*">
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </field>
      <field name="engine_specified" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
    </class>
    <record name="RcStyleClass"
            c:type="GtkRcStyleClass"
            glib:is-gtype-struct-for="RcStyle">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="create_rc_style" introspectable="0">
        <callback name="create_rc_style" introspectable="0">
          <return-value>
            <type name="RcStyle" c:type="GtkRcStyle*"/>
          </return-value>
          <parameters>
            <parameter name="rc_style" transfer-ownership="none">
              <type name="RcStyle" c:type="GtkRcStyle*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="parse">
        <callback name="parse">
          <return-value transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="rc_style" transfer-ownership="none">
              <type name="RcStyle" c:type="GtkRcStyle*"/>
            </parameter>
            <parameter name="settings" transfer-ownership="none">
              <type name="Settings" c:type="GtkSettings*"/>
            </parameter>
            <parameter name="scanner" transfer-ownership="none">
              <type name="GLib.Scanner" c:type="GScanner*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="merge">
        <callback name="merge">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="dest" transfer-ownership="none">
              <type name="RcStyle" c:type="GtkRcStyle*"/>
            </parameter>
            <parameter name="src" transfer-ownership="none">
              <type name="RcStyle" c:type="GtkRcStyle*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="create_style" introspectable="0">
        <callback name="create_style" introspectable="0">
          <return-value>
            <type name="Style" c:type="GtkStyle*"/>
          </return-value>
          <parameters>
            <parameter name="rc_style" transfer-ownership="none">
              <type name="RcStyle" c:type="GtkRcStyle*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_gtk_reserved1" introspectable="0">
        <callback name="_gtk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved2" introspectable="0">
        <callback name="_gtk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved3" introspectable="0">
        <callback name="_gtk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved4" introspectable="0">
        <callback name="_gtk_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <enumeration name="RcTokenType"
                 glib:type-name="GtkRcTokenType"
                 glib:get-type="gtk_rc_token_type_get_type"
                 c:type="GtkRcTokenType">
      <member name="invalid"
              value="270"
              c:identifier="GTK_RC_TOKEN_INVALID"
              glib:nick="invalid"/>
      <member name="include"
              value="271"
              c:identifier="GTK_RC_TOKEN_INCLUDE"
              glib:nick="include"/>
      <member name="normal"
              value="272"
              c:identifier="GTK_RC_TOKEN_NORMAL"
              glib:nick="normal"/>
      <member name="active"
              value="273"
              c:identifier="GTK_RC_TOKEN_ACTIVE"
              glib:nick="active"/>
      <member name="prelight"
              value="274"
              c:identifier="GTK_RC_TOKEN_PRELIGHT"
              glib:nick="prelight"/>
      <member name="selected"
              value="275"
              c:identifier="GTK_RC_TOKEN_SELECTED"
              glib:nick="selected"/>
      <member name="insensitive"
              value="276"
              c:identifier="GTK_RC_TOKEN_INSENSITIVE"
              glib:nick="insensitive"/>
      <member name="fg"
              value="277"
              c:identifier="GTK_RC_TOKEN_FG"
              glib:nick="fg"/>
      <member name="bg"
              value="278"
              c:identifier="GTK_RC_TOKEN_BG"
              glib:nick="bg"/>
      <member name="text"
              value="279"
              c:identifier="GTK_RC_TOKEN_TEXT"
              glib:nick="text"/>
      <member name="base"
              value="280"
              c:identifier="GTK_RC_TOKEN_BASE"
              glib:nick="base"/>
      <member name="xthickness"
              value="281"
              c:identifier="GTK_RC_TOKEN_XTHICKNESS"
              glib:nick="xthickness"/>
      <member name="ythickness"
              value="282"
              c:identifier="GTK_RC_TOKEN_YTHICKNESS"
              glib:nick="ythickness"/>
      <member name="font"
              value="283"
              c:identifier="GTK_RC_TOKEN_FONT"
              glib:nick="font"/>
      <member name="fontset"
              value="284"
              c:identifier="GTK_RC_TOKEN_FONTSET"
              glib:nick="fontset"/>
      <member name="font_name"
              value="285"
              c:identifier="GTK_RC_TOKEN_FONT_NAME"
              glib:nick="font-name"/>
      <member name="bg_pixmap"
              value="286"
              c:identifier="GTK_RC_TOKEN_BG_PIXMAP"
              glib:nick="bg-pixmap"/>
      <member name="pixmap_path"
              value="287"
              c:identifier="GTK_RC_TOKEN_PIXMAP_PATH"
              glib:nick="pixmap-path"/>
      <member name="style"
              value="288"
              c:identifier="GTK_RC_TOKEN_STYLE"
              glib:nick="style"/>
      <member name="binding"
              value="289"
              c:identifier="GTK_RC_TOKEN_BINDING"
              glib:nick="binding"/>
      <member name="bind"
              value="290"
              c:identifier="GTK_RC_TOKEN_BIND"
              glib:nick="bind"/>
      <member name="widget"
              value="291"
              c:identifier="GTK_RC_TOKEN_WIDGET"
              glib:nick="widget"/>
      <member name="widget_class"
              value="292"
              c:identifier="GTK_RC_TOKEN_WIDGET_CLASS"
              glib:nick="widget-class"/>
      <member name="class"
              value="293"
              c:identifier="GTK_RC_TOKEN_CLASS"
              glib:nick="class"/>
      <member name="lowest"
              value="294"
              c:identifier="GTK_RC_TOKEN_LOWEST"
              glib:nick="lowest"/>
      <member name="gtk"
              value="295"
              c:identifier="GTK_RC_TOKEN_GTK"
              glib:nick="gtk"/>
      <member name="application"
              value="296"
              c:identifier="GTK_RC_TOKEN_APPLICATION"
              glib:nick="application"/>
      <member name="theme"
              value="297"
              c:identifier="GTK_RC_TOKEN_THEME"
              glib:nick="theme"/>
      <member name="rc"
              value="298"
              c:identifier="GTK_RC_TOKEN_RC"
              glib:nick="rc"/>
      <member name="highest"
              value="299"
              c:identifier="GTK_RC_TOKEN_HIGHEST"
              glib:nick="highest"/>
      <member name="engine"
              value="300"
              c:identifier="GTK_RC_TOKEN_ENGINE"
              glib:nick="engine"/>
      <member name="module_path"
              value="301"
              c:identifier="GTK_RC_TOKEN_MODULE_PATH"
              glib:nick="module-path"/>
      <member name="im_module_path"
              value="302"
              c:identifier="GTK_RC_TOKEN_IM_MODULE_PATH"
              glib:nick="im-module-path"/>
      <member name="im_module_file"
              value="303"
              c:identifier="GTK_RC_TOKEN_IM_MODULE_FILE"
              glib:nick="im-module-file"/>
      <member name="stock"
              value="304"
              c:identifier="GTK_RC_TOKEN_STOCK"
              glib:nick="stock"/>
      <member name="ltr"
              value="305"
              c:identifier="GTK_RC_TOKEN_LTR"
              glib:nick="ltr"/>
      <member name="rtl"
              value="306"
              c:identifier="GTK_RC_TOKEN_RTL"
              glib:nick="rtl"/>
      <member name="color"
              value="307"
              c:identifier="GTK_RC_TOKEN_COLOR"
              glib:nick="color"/>
      <member name="unbind"
              value="308"
              c:identifier="GTK_RC_TOKEN_UNBIND"
              glib:nick="unbind"/>
      <member name="last"
              value="309"
              c:identifier="GTK_RC_TOKEN_LAST"
              glib:nick="last"/>
    </enumeration>
    <class name="RecentAction"
           c:symbol-prefix="recent_action"
           c:type="GtkRecentAction"
           parent="Action"
           glib:type-name="GtkRecentAction"
           glib:get-type="gtk_recent_action_get_type"
           glib:type-struct="RecentActionClass">
      <implements name="Buildable"/>
      <implements name="RecentChooser"/>
      <constructor name="new"
                   c:identifier="gtk_recent_action_new"
                   version="2.12">
        <doc xml:whitespace="preserve">Creates a new #GtkRecentAction object. To add the action to
a #GtkActionGroup and set the accelerator for the action,
call gtk_action_group_add_action_with_accel().</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the newly created #GtkRecentAction.</doc>
          <type name="Action" c:type="GtkAction*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:whitespace="preserve">a unique name for the action</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="label" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">the label displayed in menu items and on buttons, or %NULL</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="tooltip" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">a tooltip for the action, or %NULL</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="stock_id" transfer-ownership="none">
            <doc xml:whitespace="preserve">the stock icon to display in widgets representing the action, or %NULL</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_manager"
                   c:identifier="gtk_recent_action_new_for_manager"
                   version="2.12">
        <doc xml:whitespace="preserve">Creates a new #GtkRecentAction object. To add the action to
a #GtkActionGroup and set the accelerator for the action,
call gtk_action_group_add_action_with_accel().</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the newly created #GtkRecentAction</doc>
          <type name="Action" c:type="GtkAction*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:whitespace="preserve">a unique name for the action</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="label" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">the label displayed in menu items and on buttons, or %NULL</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="tooltip" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">a tooltip for the action, or %NULL</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="stock_id" transfer-ownership="none">
            <doc xml:whitespace="preserve">the stock icon to display in widgets representing the action, or %NULL</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="manager" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">a #GtkRecentManager, or %NULL for using the default #GtkRecentManager</doc>
            <type name="RecentManager" c:type="GtkRecentManager*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_show_numbers"
              c:identifier="gtk_recent_action_get_show_numbers"
              version="2.12">
        <doc xml:whitespace="preserve">Returns the value set by gtk_recent_chooser_menu_set_show_numbers().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if numbers should be shown.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="set_show_numbers"
              c:identifier="gtk_recent_action_set_show_numbers"
              version="2.12">
        <doc xml:whitespace="preserve">Sets whether a number should be added to the items shown by the
widgets representing @action. The numbers are shown to provide
a unique character for a mnemonic to be used inside the menu item's
label. Only the first ten items get a number to avoid clashes.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="show_numbers" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE if the shown items should be numbered</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="show-numbers" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <field name="parent_instance">
        <type name="Action" c:type="GtkAction"/>
      </field>
      <field name="priv">
        <type name="RecentActionPrivate" c:type="GtkRecentActionPrivate*"/>
      </field>
    </class>
    <record name="RecentActionClass"
            c:type="GtkRecentActionClass"
            glib:is-gtype-struct-for="RecentAction">
      <field name="parent_class">
        <type name="ActionClass" c:type="GtkActionClass"/>
      </field>
    </record>
    <record name="RecentActionPrivate"
            c:type="GtkRecentActionPrivate"
            disguised="1">
    </record>
    <interface name="RecentChooser"
               c:symbol-prefix="recent_chooser"
               c:type="GtkRecentChooser"
               glib:type-name="GtkRecentChooser"
               glib:get-type="gtk_recent_chooser_get_type"
               glib:type-struct="RecentChooserIface">
      <virtual-method name="add_filter" invoker="add_filter" version="2.10">
        <doc xml:whitespace="preserve">Adds @filter to the list of #GtkRecentFilter objects held by @chooser.
If no previous filter objects were defined, this function will call
gtk_recent_chooser_set_filter().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="filter" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkRecentFilter</doc>
            <type name="RecentFilter" c:type="GtkRecentFilter*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_current_uri"
                      invoker="get_current_uri"
                      version="2.10">
        <doc xml:whitespace="preserve">Gets the URI currently selected by @chooser.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a newly allocated string holding a URI.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </virtual-method>
      <virtual-method name="get_items" invoker="get_items" version="2.10">
        <doc xml:whitespace="preserve">Gets the list of recently used resources in form of #GtkRecentInfo objects.
The return value of this function is affected by the "sort-type" and
"limit" properties of @chooser.
list of #GtkRecentInfo objects.  You should
use gtk_recent_info_unref() on every item of the list, and then free
the list itself using g_list_free().</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A newly allocated</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="RecentInfo"/>
          </type>
        </return-value>
      </virtual-method>
      <virtual-method name="get_recent_manager" introspectable="0">
        <return-value>
          <type name="RecentManager" c:type="GtkRecentManager*"/>
        </return-value>
      </virtual-method>
      <virtual-method name="list_filters"
                      invoker="list_filters"
                      version="2.10">
        <doc xml:whitespace="preserve">Gets the #GtkRecentFilter objects held by @chooser.
of #GtkRecentFilter objects.  You
should just free the returned list using g_slist_free().</doc>
        <return-value transfer-ownership="container">
          <doc xml:whitespace="preserve">A singly linked list</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="RecentFilter"/>
          </type>
        </return-value>
      </virtual-method>
      <virtual-method name="remove_filter"
                      invoker="remove_filter"
                      version="2.10">
        <doc xml:whitespace="preserve">Removes @filter from the list of #GtkRecentFilter objects held by @chooser.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="filter" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkRecentFilter</doc>
            <type name="RecentFilter" c:type="GtkRecentFilter*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="select_all" invoker="select_all" version="2.10">
        <doc xml:whitespace="preserve">Selects all the items inside @chooser, if the @chooser supports
multiple selection.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </virtual-method>
      <virtual-method name="select_uri"
                      invoker="select_uri"
                      version="2.10"
                      throws="1">
        <doc xml:whitespace="preserve">Selects @uri inside @chooser.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if @uri was found.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:whitespace="preserve">a URI</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_current_uri"
                      invoker="set_current_uri"
                      version="2.10"
                      throws="1">
        <doc xml:whitespace="preserve">Sets @uri as the current URI for @chooser.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the URI was found.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:whitespace="preserve">a URI</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_sort_func"
                      invoker="set_sort_func"
                      version="2.10">
        <doc xml:whitespace="preserve">Sets the comparison function used when sorting to be @sort_func.  If
the @chooser has the sort type set to #GTK_RECENT_SORT_CUSTOM then
the chooser will sort using this function.
To the comparison function will be passed two #GtkRecentInfo structs and
item comes before the second, zero if the two items are equal and
a negative integer if the first item comes after the second.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="sort_func"
                     transfer-ownership="none"
                     scope="notified"
                     closure="1"
                     destroy="2">
            <doc xml:whitespace="preserve">the comparison function</doc>
            <type name="RecentSortFunc" c:type="GtkRecentSortFunc"/>
          </parameter>
          <parameter name="sort_data" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">user data to pass to @sort_func, or %NULL</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="data_destroy"
                     transfer-ownership="none"
                     allow-none="1"
                     scope="async">
            <doc xml:whitespace="preserve">destroy notifier for @sort_data, or %NULL</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="unselect_all"
                      invoker="unselect_all"
                      version="2.10">
        <doc xml:whitespace="preserve">Unselects all the items inside @chooser.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </virtual-method>
      <virtual-method name="unselect_uri"
                      invoker="unselect_uri"
                      version="2.10">
        <doc xml:whitespace="preserve">Unselects @uri inside @chooser.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:whitespace="preserve">a URI</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="add_filter"
              c:identifier="gtk_recent_chooser_add_filter"
              version="2.10">
        <doc xml:whitespace="preserve">Adds @filter to the list of #GtkRecentFilter objects held by @chooser.
If no previous filter objects were defined, this function will call
gtk_recent_chooser_set_filter().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="filter" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkRecentFilter</doc>
            <type name="RecentFilter" c:type="GtkRecentFilter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_current_item"
              c:identifier="gtk_recent_chooser_get_current_item"
              version="2.10">
        <doc xml:whitespace="preserve">Gets the #GtkRecentInfo currently selected by @chooser.
when you have finished using it.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a #GtkRecentInfo.  Use gtk_recent_info_unref() when</doc>
          <type name="RecentInfo" c:type="GtkRecentInfo*"/>
        </return-value>
      </method>
      <method name="get_current_uri"
              c:identifier="gtk_recent_chooser_get_current_uri"
              version="2.10">
        <doc xml:whitespace="preserve">Gets the URI currently selected by @chooser.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a newly allocated string holding a URI.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_filter"
              c:identifier="gtk_recent_chooser_get_filter"
              version="2.10">
        <doc xml:whitespace="preserve">Gets the #GtkRecentFilter object currently used by @chooser to affect
the display of the recently used resources.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GtkRecentFilter object.</doc>
          <type name="RecentFilter" c:type="GtkRecentFilter*"/>
        </return-value>
      </method>
      <method name="get_items"
              c:identifier="gtk_recent_chooser_get_items"
              version="2.10">
        <doc xml:whitespace="preserve">Gets the list of recently used resources in form of #GtkRecentInfo objects.
The return value of this function is affected by the "sort-type" and
"limit" properties of @chooser.
list of #GtkRecentInfo objects.  You should
use gtk_recent_info_unref() on every item of the list, and then free
the list itself using g_list_free().</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A newly allocated</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="RecentInfo"/>
          </type>
        </return-value>
      </method>
      <method name="get_limit"
              c:identifier="gtk_recent_chooser_get_limit"
              version="2.10">
        <doc xml:whitespace="preserve">Gets the number of items returned by gtk_recent_chooser_get_items()
and gtk_recent_chooser_get_uris().
returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">A positive integer, or -1 meaning that all items are</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="get_local_only"
              c:identifier="gtk_recent_chooser_get_local_only"
              version="2.10">
        <doc xml:whitespace="preserve">Gets whether only local resources should be shown in the recently used
resources selector.  See gtk_recent_chooser_set_local_only()</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if only local resources should be shown.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_select_multiple"
              c:identifier="gtk_recent_chooser_get_select_multiple"
              version="2.10">
        <doc xml:whitespace="preserve">Gets whether @chooser can select multiple items.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if @chooser can select more than one item.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_show_icons"
              c:identifier="gtk_recent_chooser_get_show_icons"
              version="2.10">
        <doc xml:whitespace="preserve">Retrieves whether @chooser should show an icon near the resource.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the icons should be displayed, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_show_not_found"
              c:identifier="gtk_recent_chooser_get_show_not_found"
              version="2.10">
        <doc xml:whitespace="preserve">Retrieves whether @chooser should show the recently used resources that
were not found.
%FALSE otheriwse.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the resources not found should be displayed, and</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_show_private"
              c:identifier="gtk_recent_chooser_get_show_private"
              version="2.10">
        <doc xml:whitespace="preserve">Returns whether @chooser should display recently used resources
registered as private.
%FALSE otherwise.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the recent chooser should show private items,</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_show_tips"
              c:identifier="gtk_recent_chooser_get_show_tips"
              version="2.10">
        <doc xml:whitespace="preserve">Gets whether @chooser should display tooltips containing the full path
of a recently user resource.
%FALSE otherwise.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the recent chooser should show tooltips,</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_sort_type"
              c:identifier="gtk_recent_chooser_get_sort_type"
              version="2.10">
        <doc xml:whitespace="preserve">Gets the value set by gtk_recent_chooser_set_sort_type().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the sorting order of the @chooser.</doc>
          <type name="RecentSortType" c:type="GtkRecentSortType"/>
        </return-value>
      </method>
      <method name="get_uris"
              c:identifier="gtk_recent_chooser_get_uris"
              version="2.10">
        <doc xml:whitespace="preserve">Gets the URI of the recently used resources.
The return value of this function is affected by the "sort-type" and "limit"
properties of @chooser.
Since the returned array is %NULL terminated, @length may be %NULL.
of strings. Use g_strfreev() to free it.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A newly allocated, %NULL-terminated array</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <parameter name="length" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">return location for a the length of the URI list, or %NULL</doc>
            <type name="gulong" c:type="gsize*"/>
          </parameter>
        </parameters>
      </method>
      <method name="list_filters"
              c:identifier="gtk_recent_chooser_list_filters"
              version="2.10">
        <doc xml:whitespace="preserve">Gets the #GtkRecentFilter objects held by @chooser.
of #GtkRecentFilter objects.  You
should just free the returned list using g_slist_free().</doc>
        <return-value transfer-ownership="container">
          <doc xml:whitespace="preserve">A singly linked list</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="RecentFilter"/>
          </type>
        </return-value>
      </method>
      <method name="remove_filter"
              c:identifier="gtk_recent_chooser_remove_filter"
              version="2.10">
        <doc xml:whitespace="preserve">Removes @filter from the list of #GtkRecentFilter objects held by @chooser.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="filter" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkRecentFilter</doc>
            <type name="RecentFilter" c:type="GtkRecentFilter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="select_all"
              c:identifier="gtk_recent_chooser_select_all"
              version="2.10">
        <doc xml:whitespace="preserve">Selects all the items inside @chooser, if the @chooser supports
multiple selection.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="select_uri"
              c:identifier="gtk_recent_chooser_select_uri"
              version="2.10"
              throws="1">
        <doc xml:whitespace="preserve">Selects @uri inside @chooser.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if @uri was found.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:whitespace="preserve">a URI</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_current_uri"
              c:identifier="gtk_recent_chooser_set_current_uri"
              version="2.10"
              throws="1">
        <doc xml:whitespace="preserve">Sets @uri as the current URI for @chooser.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the URI was found.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:whitespace="preserve">a URI</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_filter"
              c:identifier="gtk_recent_chooser_set_filter"
              version="2.10">
        <doc xml:whitespace="preserve">Sets @filter as the current #GtkRecentFilter object used by @chooser
to affect the displayed recently used resources.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="filter" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkRecentFilter</doc>
            <type name="RecentFilter" c:type="GtkRecentFilter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_limit"
              c:identifier="gtk_recent_chooser_set_limit"
              version="2.10">
        <doc xml:whitespace="preserve">Sets the number of items that should be returned by
gtk_recent_chooser_get_items() and gtk_recent_chooser_get_uris().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="limit" transfer-ownership="none">
            <doc xml:whitespace="preserve">a positive integer, or -1 for all items</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_local_only"
              c:identifier="gtk_recent_chooser_set_local_only"
              version="2.10">
        <doc xml:whitespace="preserve">Sets whether only local resources, that is resources using the file:// URI
scheme, should be shown in the recently used resources selector.  If
to be accessible through the operating system native file system.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="local_only" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE if only local files can be shown</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_select_multiple"
              c:identifier="gtk_recent_chooser_set_select_multiple"
              version="2.10">
        <doc xml:whitespace="preserve">Sets whether @chooser can select multiple items.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="select_multiple" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE if @chooser can select more than one item</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_show_icons"
              c:identifier="gtk_recent_chooser_set_show_icons"
              version="2.10">
        <doc xml:whitespace="preserve">Sets whether @chooser should show an icon near the resource when
displaying it.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="show_icons" transfer-ownership="none">
            <doc xml:whitespace="preserve">whether to show an icon near the resource</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_show_not_found"
              c:identifier="gtk_recent_chooser_set_show_not_found"
              version="2.10">
        <doc xml:whitespace="preserve">Sets whether @chooser should display the recently used resources that
it didn't find.  This only applies to local resources.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="show_not_found" transfer-ownership="none">
            <doc xml:whitespace="preserve">whether to show the local items we didn't find</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_show_private"
              c:identifier="gtk_recent_chooser_set_show_private"
              version="2.10">
        <doc xml:whitespace="preserve">Whether to show recently used resources marked registered as private.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="show_private" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE to show private items, %FALSE otherwise</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_show_tips"
              c:identifier="gtk_recent_chooser_set_show_tips"
              version="2.10">
        <doc xml:whitespace="preserve">Sets whether to show a tooltips containing the full path of each
recently used resource in a #GtkRecentChooser widget.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="show_tips" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE if tooltips should be shown</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_sort_func"
              c:identifier="gtk_recent_chooser_set_sort_func"
              version="2.10">
        <doc xml:whitespace="preserve">Sets the comparison function used when sorting to be @sort_func.  If
the @chooser has the sort type set to #GTK_RECENT_SORT_CUSTOM then
the chooser will sort using this function.
To the comparison function will be passed two #GtkRecentInfo structs and
item comes before the second, zero if the two items are equal and
a negative integer if the first item comes after the second.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="sort_func"
                     transfer-ownership="none"
                     scope="notified"
                     closure="1"
                     destroy="2">
            <doc xml:whitespace="preserve">the comparison function</doc>
            <type name="RecentSortFunc" c:type="GtkRecentSortFunc"/>
          </parameter>
          <parameter name="sort_data" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">user data to pass to @sort_func, or %NULL</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="data_destroy"
                     transfer-ownership="none"
                     allow-none="1"
                     scope="async">
            <doc xml:whitespace="preserve">destroy notifier for @sort_data, or %NULL</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_sort_type"
              c:identifier="gtk_recent_chooser_set_sort_type"
              version="2.10">
        <doc xml:whitespace="preserve">Changes the sorting order of the recently used resources list displayed by</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="sort_type" transfer-ownership="none">
            <doc xml:whitespace="preserve">sort order that the chooser should use</doc>
            <type name="RecentSortType" c:type="GtkRecentSortType"/>
          </parameter>
        </parameters>
      </method>
      <method name="unselect_all"
              c:identifier="gtk_recent_chooser_unselect_all"
              version="2.10">
        <doc xml:whitespace="preserve">Unselects all the items inside @chooser.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="unselect_uri"
              c:identifier="gtk_recent_chooser_unselect_uri"
              version="2.10">
        <doc xml:whitespace="preserve">Unselects @uri inside @chooser.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:whitespace="preserve">a URI</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="filter"
                version="2.10"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The #GtkRecentFilter object to be used when displaying
the recently used resources.</doc>
        <type name="RecentFilter"/>
      </property>
      <property name="limit"
                version="2.10"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The maximum number of recently used resources to be displayed,
or -1 to display all items. By default, the
override that limit on a particular instance of #GtkRecentChooser
by setting this property.</doc>
        <type name="gint"/>
      </property>
      <property name="local-only"
                version="2.10"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Whether this #GtkRecentChooser should display only local (file:)
resources.</doc>
        <type name="gboolean"/>
      </property>
      <property name="recent-manager"
                version="2.10"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The #GtkRecentManager instance used by the #GtkRecentChooser to
display the list of recently used resources.</doc>
        <type name="RecentManager"/>
      </property>
      <property name="select-multiple"
                version="2.10"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Allow the user to select multiple resources.</doc>
        <type name="gboolean"/>
      </property>
      <property name="show-icons"
                version="2.10"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Whether this #GtkRecentChooser should display an icon near the item.</doc>
        <type name="gboolean"/>
      </property>
      <property name="show-not-found"
                version="2.10"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Whether this #GtkRecentChooser should display the recently used resources
even if not present anymore. Setting this to %FALSE will perform a
potentially expensive check on every local resource (every remote
resource will always be displayed).</doc>
        <type name="gboolean"/>
      </property>
      <property name="show-private" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="show-tips"
                version="2.10"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Whether this #GtkRecentChooser should display a tooltip containing the
full path of the recently used resources.</doc>
        <type name="gboolean"/>
      </property>
      <property name="sort-type"
                version="2.10"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Sorting order to be used when displaying the recently used resources.</doc>
        <type name="RecentSortType"/>
      </property>
      <glib:signal name="item-activated">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
      <glib:signal name="selection-changed">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
    </interface>
    <class name="RecentChooserDialog"
           c:symbol-prefix="recent_chooser_dialog"
           c:type="GtkRecentChooserDialog"
           parent="Dialog"
           glib:type-name="GtkRecentChooserDialog"
           glib:get-type="gtk_recent_chooser_dialog_get_type"
           glib:type-struct="RecentChooserDialogClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Buildable"/>
      <implements name="RecentChooser"/>
      <implements name="SizeRequest"/>
      <constructor name="new"
                   c:identifier="gtk_recent_chooser_dialog_new"
                   version="2.10"
                   introspectable="0">
        <doc xml:whitespace="preserve">Creates a new #GtkRecentChooserDialog.  This function is analogous to
gtk_dialog_new_with_buttons().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a new #GtkRecentChooserDialog</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="title" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">Title of the dialog, or %NULL</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="parent" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">Transient parent of the dialog, or %NULL,</doc>
            <type name="Window" c:type="GtkWindow*"/>
          </parameter>
          <parameter name="first_button_text"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">stock ID or text to go in the first button, or %NULL</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter transfer-ownership="none">
            <varargs>
            </varargs>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_manager"
                   c:identifier="gtk_recent_chooser_dialog_new_for_manager"
                   version="2.10"
                   introspectable="0">
        <doc xml:whitespace="preserve">Creates a new #GtkRecentChooserDialog with a specified recent manager.
This is useful if you have implemented your own recent manager, or if you
have a customized instance of a #GtkRecentManager object.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a new #GtkRecentChooserDialog</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="title" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">Title of the dialog, or %NULL</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="parent" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">Transient parent of the dialog, or %NULL,</doc>
            <type name="Window" c:type="GtkWindow*"/>
          </parameter>
          <parameter name="manager" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkRecentManager</doc>
            <type name="RecentManager" c:type="GtkRecentManager*"/>
          </parameter>
          <parameter name="first_button_text"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">stock ID or text to go in the first button, or %NULL</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter transfer-ownership="none">
            <varargs>
            </varargs>
          </parameter>
        </parameters>
      </constructor>
      <field name="parent_instance">
        <type name="Dialog" c:type="GtkDialog"/>
      </field>
      <field name="priv">
        <type name="RecentChooserDialogPrivate"
              c:type="GtkRecentChooserDialogPrivate*"/>
      </field>
    </class>
    <record name="RecentChooserDialogClass"
            c:type="GtkRecentChooserDialogClass"
            glib:is-gtype-struct-for="RecentChooserDialog">
      <field name="parent_class">
        <type name="DialogClass" c:type="GtkDialogClass"/>
      </field>
    </record>
    <record name="RecentChooserDialogPrivate"
            c:type="GtkRecentChooserDialogPrivate"
            disguised="1">
    </record>
    <enumeration name="RecentChooserError"
                 version="2.10"
                 glib:type-name="GtkRecentChooserError"
                 glib:get-type="gtk_recent_chooser_error_get_type"
                 c:type="GtkRecentChooserError"
                 glib:error-quark="gtk_recent_chooser_error_quark">
      <doc xml:whitespace="preserve">These identify the various errors that can occur while calling
#GtkRecentChooser functions.</doc>
      <member name="not_found"
              value="0"
              c:identifier="GTK_RECENT_CHOOSER_ERROR_NOT_FOUND"
              glib:nick="not-found"/>
      <member name="invalid_uri"
              value="1"
              c:identifier="GTK_RECENT_CHOOSER_ERROR_INVALID_URI"
              glib:nick="invalid-uri"/>
    </enumeration>
    <record name="RecentChooserIface"
            c:type="GtkRecentChooserIface"
            glib:is-gtype-struct-for="RecentChooser">
      <field name="base_iface">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="set_current_uri">
        <callback name="set_current_uri" throws="1">
          <return-value transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE if the URI was found.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="chooser" transfer-ownership="none">
              <type name="RecentChooser" c:type="GtkRecentChooser*"/>
            </parameter>
            <parameter name="uri" transfer-ownership="none">
              <doc xml:whitespace="preserve">a URI</doc>
              <type name="utf8" c:type="gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_current_uri">
        <callback name="get_current_uri">
          <return-value transfer-ownership="full">
            <doc xml:whitespace="preserve">a newly allocated string holding a URI.</doc>
            <type name="utf8" c:type="gchar*"/>
          </return-value>
          <parameters>
            <parameter name="chooser" transfer-ownership="none">
              <type name="RecentChooser" c:type="GtkRecentChooser*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="select_uri">
        <callback name="select_uri" throws="1">
          <return-value transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE if @uri was found.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="chooser" transfer-ownership="none">
              <type name="RecentChooser" c:type="GtkRecentChooser*"/>
            </parameter>
            <parameter name="uri" transfer-ownership="none">
              <doc xml:whitespace="preserve">a URI</doc>
              <type name="utf8" c:type="gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="unselect_uri">
        <callback name="unselect_uri">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="chooser" transfer-ownership="none">
              <type name="RecentChooser" c:type="GtkRecentChooser*"/>
            </parameter>
            <parameter name="uri" transfer-ownership="none">
              <doc xml:whitespace="preserve">a URI</doc>
              <type name="utf8" c:type="gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="select_all">
        <callback name="select_all">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="chooser" transfer-ownership="none">
              <type name="RecentChooser" c:type="GtkRecentChooser*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="unselect_all">
        <callback name="unselect_all">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="chooser" transfer-ownership="none">
              <type name="RecentChooser" c:type="GtkRecentChooser*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_items">
        <callback name="get_items">
          <return-value transfer-ownership="full">
            <doc xml:whitespace="preserve">A newly allocated</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="RecentInfo"/>
            </type>
          </return-value>
          <parameters>
            <parameter name="chooser" transfer-ownership="none">
              <type name="RecentChooser" c:type="GtkRecentChooser*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_recent_manager" introspectable="0">
        <callback name="get_recent_manager" introspectable="0">
          <return-value>
            <type name="RecentManager" c:type="GtkRecentManager*"/>
          </return-value>
          <parameters>
            <parameter name="chooser" transfer-ownership="none">
              <type name="RecentChooser" c:type="GtkRecentChooser*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="add_filter">
        <callback name="add_filter">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="chooser" transfer-ownership="none">
              <type name="RecentChooser" c:type="GtkRecentChooser*"/>
            </parameter>
            <parameter name="filter" transfer-ownership="none">
              <doc xml:whitespace="preserve">a #GtkRecentFilter</doc>
              <type name="RecentFilter" c:type="GtkRecentFilter*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="remove_filter">
        <callback name="remove_filter">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="chooser" transfer-ownership="none">
              <type name="RecentChooser" c:type="GtkRecentChooser*"/>
            </parameter>
            <parameter name="filter" transfer-ownership="none">
              <doc xml:whitespace="preserve">a #GtkRecentFilter</doc>
              <type name="RecentFilter" c:type="GtkRecentFilter*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="list_filters">
        <callback name="list_filters">
          <return-value transfer-ownership="container">
            <doc xml:whitespace="preserve">A singly linked list</doc>
            <type name="GLib.SList" c:type="GSList*">
              <type name="RecentFilter"/>
            </type>
          </return-value>
          <parameters>
            <parameter name="chooser" transfer-ownership="none">
              <type name="RecentChooser" c:type="GtkRecentChooser*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_sort_func">
        <callback name="set_sort_func">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="chooser" transfer-ownership="none">
              <type name="RecentChooser" c:type="GtkRecentChooser*"/>
            </parameter>
            <parameter name="sort_func"
                       transfer-ownership="none"
                       scope="notified"
                       closure="2"
                       destroy="3">
              <doc xml:whitespace="preserve">the comparison function</doc>
              <type name="RecentSortFunc" c:type="GtkRecentSortFunc"/>
            </parameter>
            <parameter name="sort_data"
                       transfer-ownership="none"
                       allow-none="1">
              <doc xml:whitespace="preserve">user data to pass to @sort_func, or %NULL</doc>
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
            <parameter name="data_destroy"
                       transfer-ownership="none"
                       allow-none="1"
                       scope="async">
              <doc xml:whitespace="preserve">destroy notifier for @sort_data, or %NULL</doc>
              <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="item_activated">
        <callback name="item_activated">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="chooser" transfer-ownership="none">
              <type name="RecentChooser" c:type="GtkRecentChooser*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="selection_changed">
        <callback name="selection_changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="chooser" transfer-ownership="none">
              <type name="RecentChooser" c:type="GtkRecentChooser*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="RecentChooserMenu"
           c:symbol-prefix="recent_chooser_menu"
           c:type="GtkRecentChooserMenu"
           parent="Menu"
           glib:type-name="GtkRecentChooserMenu"
           glib:get-type="gtk_recent_chooser_menu_get_type"
           glib:type-struct="RecentChooserMenuClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Activatable"/>
      <implements name="Buildable"/>
      <implements name="RecentChooser"/>
      <implements name="SizeRequest"/>
      <constructor name="new"
                   c:identifier="gtk_recent_chooser_menu_new"
                   version="2.10">
        <doc xml:whitespace="preserve">Creates a new #GtkRecentChooserMenu widget.
This kind of widget shows the list of recently used resources as
a menu, each item as a menu item.  Each item inside the menu might
have an icon, representing its MIME type, and a number, for mnemonic
access.
This widget implements the #GtkRecentChooser interface.
This widget creates its own #GtkRecentManager object.  See the
gtk_recent_chooser_menu_new_for_manager() function to know how to create
a #GtkRecentChooserMenu widget bound to another #GtkRecentManager object.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a new #GtkRecentChooserMenu</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <constructor name="new_for_manager"
                   c:identifier="gtk_recent_chooser_menu_new_for_manager"
                   version="2.10">
        <doc xml:whitespace="preserve">Creates a new #GtkRecentChooserMenu widget using @manager as
the underlying recently used resources manager.
This is useful if you have implemented your own recent manager,
or if you have a customized instance of a #GtkRecentManager
object or if you wish to share a common #GtkRecentManager object
among multiple #GtkRecentChooser widgets.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a new #GtkRecentChooserMenu, bound to @manager.</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="manager" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkRecentManager</doc>
            <type name="RecentManager" c:type="GtkRecentManager*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_show_numbers"
              c:identifier="gtk_recent_chooser_menu_get_show_numbers"
              version="2.10">
        <doc xml:whitespace="preserve">Returns the value set by gtk_recent_chooser_menu_set_show_numbers().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if numbers should be shown.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="set_show_numbers"
              c:identifier="gtk_recent_chooser_menu_set_show_numbers"
              version="2.10">
        <doc xml:whitespace="preserve">Sets whether a number should be added to the items of @menu.  The
numbers are shown to provide a unique character for a mnemonic to
be used inside ten menu item's label.  Only the first the items
get a number to avoid clashes.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="show_numbers" transfer-ownership="none">
            <doc xml:whitespace="preserve">whether to show numbers</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="show-numbers" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <field name="parent_instance">
        <type name="Menu" c:type="GtkMenu"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="RecentChooserMenuPrivate"
              c:type="GtkRecentChooserMenuPrivate*"/>
      </field>
    </class>
    <record name="RecentChooserMenuClass"
            c:type="GtkRecentChooserMenuClass"
            glib:is-gtype-struct-for="RecentChooserMenu">
      <field name="parent_class">
        <type name="MenuClass" c:type="GtkMenuClass"/>
      </field>
      <field name="gtk_recent1">
        <callback name="gtk_recent1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="gtk_recent2">
        <callback name="gtk_recent2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="gtk_recent3">
        <callback name="gtk_recent3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="gtk_recent4">
        <callback name="gtk_recent4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="RecentChooserMenuPrivate"
            c:type="GtkRecentChooserMenuPrivate"
            disguised="1">
    </record>
    <class name="RecentChooserWidget"
           c:symbol-prefix="recent_chooser_widget"
           c:type="GtkRecentChooserWidget"
           parent="VBox"
           glib:type-name="GtkRecentChooserWidget"
           glib:get-type="gtk_recent_chooser_widget_get_type"
           glib:type-struct="RecentChooserWidgetClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Buildable"/>
      <implements name="Orientable"/>
      <implements name="RecentChooser"/>
      <implements name="SizeRequest"/>
      <constructor name="new"
                   c:identifier="gtk_recent_chooser_widget_new"
                   version="2.10">
        <doc xml:whitespace="preserve">Creates a new #GtkRecentChooserWidget object.  This is an embeddable widget
used to access the recently used resources list.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a new #GtkRecentChooserWidget</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <constructor name="new_for_manager"
                   c:identifier="gtk_recent_chooser_widget_new_for_manager"
                   version="2.10">
        <doc xml:whitespace="preserve">Creates a new #GtkRecentChooserWidget with a specified recent manager.
This is useful if you have implemented your own recent manager, or if you
have a customized instance of a #GtkRecentManager object.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a new #GtkRecentChooserWidget</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="manager" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkRecentManager</doc>
            <type name="RecentManager" c:type="GtkRecentManager*"/>
          </parameter>
        </parameters>
      </constructor>
      <field name="parent_instance">
        <type name="VBox" c:type="GtkVBox"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="RecentChooserWidgetPrivate"
              c:type="GtkRecentChooserWidgetPrivate*"/>
      </field>
    </class>
    <record name="RecentChooserWidgetClass"
            c:type="GtkRecentChooserWidgetClass"
            glib:is-gtype-struct-for="RecentChooserWidget">
      <field name="parent_class">
        <type name="VBoxClass" c:type="GtkVBoxClass"/>
      </field>
    </record>
    <record name="RecentChooserWidgetPrivate"
            c:type="GtkRecentChooserWidgetPrivate"
            disguised="1">
    </record>
    <record name="RecentData" c:type="GtkRecentData">
      <doc xml:whitespace="preserve">Meta-data to be passed to gtk_recent_manager_add_full() when
registering a recently used resource.</doc>
      <field name="display_name" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="description" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="mime_type" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="app_name" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="app_exec" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="groups" writable="1">
        <type name="utf8" c:type="gchar**"/>
      </field>
      <field name="is_private" writable="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
    </record>
    <class name="RecentFilter"
           c:symbol-prefix="recent_filter"
           c:type="GtkRecentFilter"
           parent="Object"
           glib:type-name="GtkRecentFilter"
           glib:get-type="gtk_recent_filter_get_type">
      <constructor name="new"
                   c:identifier="gtk_recent_filter_new"
                   version="2.10">
        <doc xml:whitespace="preserve">Creates a new #GtkRecentFilter with no rules added to it.
Such filter does not accept any recently used resources, so is not
particularly useful until you add rules with
gtk_recent_filter_add_pattern(), gtk_recent_filter_add_mime_type(),
gtk_recent_filter_add_application(), gtk_recent_filter_add_age().
To create a filter that accepts any recently used resource, use:
|[
GtkRecentFilter *filter = gtk_recent_filter_new ();
gtk_recent_filter_add_pattern (filter, "*");
]|</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a new #GtkRecentFilter</doc>
          <type name="RecentFilter" c:type="GtkRecentFilter*"/>
        </return-value>
      </constructor>
      <method name="add_age"
              c:identifier="gtk_recent_filter_add_age"
              version="2.10">
        <doc xml:whitespace="preserve">Adds a rule that allows resources based on their age - that is, the number
of days elapsed since they were last modified.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="days" transfer-ownership="none">
            <doc xml:whitespace="preserve">number of days</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_application"
              c:identifier="gtk_recent_filter_add_application"
              version="2.10">
        <doc xml:whitespace="preserve">Adds a rule that allows resources based on the name of the application
that has registered them.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="application" transfer-ownership="none">
            <doc xml:whitespace="preserve">an application name</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_custom"
              c:identifier="gtk_recent_filter_add_custom"
              version="2.10">
        <doc xml:whitespace="preserve">Adds a rule to a filter that allows resources based on a custom callback
function. The bitfield @needed which is passed in provides information
about what sorts of information that the filter function needs;
this allows GTK+ to avoid retrieving expensive information when
it isn't needed by the filter.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="needed" transfer-ownership="none">
            <doc xml:whitespace="preserve">bitfield of flags indicating the information that the custom filter function needs.</doc>
            <type name="RecentFilterFlags" c:type="GtkRecentFilterFlags"/>
          </parameter>
          <parameter name="func"
                     transfer-ownership="none"
                     scope="notified"
                     closure="2"
                     destroy="3">
            <doc xml:whitespace="preserve">callback function; if the function returns %TRUE, then the file will be displayed.</doc>
            <type name="RecentFilterFunc" c:type="GtkRecentFilterFunc"/>
          </parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:whitespace="preserve">data to pass to @func</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="data_destroy"
                     transfer-ownership="none"
                     scope="async">
            <doc xml:whitespace="preserve">function to call to free @data when it is no longer needed.</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_group"
              c:identifier="gtk_recent_filter_add_group"
              version="2.10">
        <doc xml:whitespace="preserve">Adds a rule that allows resources based on the name of the group
to which they belong</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="group" transfer-ownership="none">
            <doc xml:whitespace="preserve">a group name</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_mime_type"
              c:identifier="gtk_recent_filter_add_mime_type"
              version="2.10">
        <doc xml:whitespace="preserve">Adds a rule that allows resources based on their registered MIME type.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="mime_type" transfer-ownership="none">
            <doc xml:whitespace="preserve">a MIME type</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_pattern"
              c:identifier="gtk_recent_filter_add_pattern"
              version="2.10">
        <doc xml:whitespace="preserve">Adds a rule that allows resources based on a pattern matching their
display name.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="pattern" transfer-ownership="none">
            <doc xml:whitespace="preserve">a file pattern</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_pixbuf_formats"
              c:identifier="gtk_recent_filter_add_pixbuf_formats"
              version="2.10">
        <doc xml:whitespace="preserve">Adds a rule allowing image files in the formats supported
by GdkPixbuf.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="filter"
              c:identifier="gtk_recent_filter_filter"
              version="2.10">
        <doc xml:whitespace="preserve">Tests whether a file should be displayed according to @filter.
The #GtkRecentFilterInfo structure @filter_info should include
the fields returned from gtk_recent_filter_get_needed().
This function will not typically be used by applications; it
is intended principally for use in the implementation of
#GtkRecentChooser.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the file should be displayed</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="filter_info" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkRecentFilterInfo structure containing information about a recently used resource</doc>
            <type name="RecentFilterInfo" c:type="GtkRecentFilterInfo*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_name"
              c:identifier="gtk_recent_filter_get_name"
              version="2.10">
        <doc xml:whitespace="preserve">Gets the human-readable name for the filter.
See gtk_recent_filter_set_name().
is owned by the filter object and should not be freed.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the name of the filter, or %NULL.  The returned string</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_needed"
              c:identifier="gtk_recent_filter_get_needed"
              version="2.10">
        <doc xml:whitespace="preserve">Gets the fields that need to be filled in for the structure
passed to gtk_recent_filter_filter()
This function will not typically be used by applications; it
is intended principally for use in the implementation of
#GtkRecentChooser.
calling gtk_recent_filter_filter()</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">bitfield of flags indicating needed fields when</doc>
          <type name="RecentFilterFlags" c:type="GtkRecentFilterFlags"/>
        </return-value>
      </method>
      <method name="set_name"
              c:identifier="gtk_recent_filter_set_name"
              version="2.10">
        <doc xml:whitespace="preserve">Sets the human-readable name of the filter; this is the string
that will be displayed in the recently used resources selector
user interface if there is a selectable list of filters.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:whitespace="preserve">then human readable name of @filter</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
    </class>
    <bitfield name="RecentFilterFlags"
              glib:type-name="GtkRecentFilterFlags"
              glib:get-type="gtk_recent_filter_flags_get_type"
              c:type="GtkRecentFilterFlags">
      <member name="uri"
              value="1"
              c:identifier="GTK_RECENT_FILTER_URI"
              glib:nick="uri"/>
      <member name="display_name"
              value="2"
              c:identifier="GTK_RECENT_FILTER_DISPLAY_NAME"
              glib:nick="display-name"/>
      <member name="mime_type"
              value="4"
              c:identifier="GTK_RECENT_FILTER_MIME_TYPE"
              glib:nick="mime-type"/>
      <member name="application"
              value="8"
              c:identifier="GTK_RECENT_FILTER_APPLICATION"
              glib:nick="application"/>
      <member name="group"
              value="16"
              c:identifier="GTK_RECENT_FILTER_GROUP"
              glib:nick="group"/>
      <member name="age"
              value="32"
              c:identifier="GTK_RECENT_FILTER_AGE"
              glib:nick="age"/>
    </bitfield>
    <callback name="RecentFilterFunc" c:type="GtkRecentFilterFunc">
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="filter_info" transfer-ownership="none">
          <type name="RecentFilterInfo" c:type="GtkRecentFilterInfo*"/>
        </parameter>
        <parameter name="user_data" transfer-ownership="none" closure="1">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <record name="RecentFilterInfo" c:type="GtkRecentFilterInfo">
      <field name="contains" writable="1">
        <type name="RecentFilterFlags" c:type="GtkRecentFilterFlags"/>
      </field>
      <field name="uri" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="display_name" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="mime_type" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="applications" writable="1">
        <type name="utf8" c:type="gchar**"/>
      </field>
      <field name="groups" writable="1">
        <type name="utf8" c:type="gchar**"/>
      </field>
      <field name="age" writable="1">
        <type name="gint" c:type="gint"/>
      </field>
    </record>
    <record name="RecentInfo"
            c:type="GtkRecentInfo"
            version="2.10"
            glib:type-name="GtkRecentInfo"
            glib:get-type="gtk_recent_info_get_type"
            c:symbol-prefix="recent_info">
      <doc xml:whitespace="preserve">#GtkRecentInfo is an opaque data structure
whose members can only be accessed using the provided API.
#GtkRecentInfo constains all the meta-data
associated with an entry in the recently used files list.</doc>
      <method name="exists"
              c:identifier="gtk_recent_info_exists"
              version="2.10">
        <doc xml:whitespace="preserve">Checks whether the resource pointed by @info still exists.  At
the moment this check is done only on resources pointing to local files.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the resource exists</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_added"
              c:identifier="gtk_recent_info_get_added"
              version="2.10">
        <doc xml:whitespace="preserve">Gets the timestamp (seconds from system's Epoch) when the resource
was added to the recently used resources list.
the resource was added to the list, or -1 on failure.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the number of seconds elapsed from system's Epoch when</doc>
          <type name="glong" c:type="time_t"/>
        </return-value>
      </method>
      <method name="get_age"
              c:identifier="gtk_recent_info_get_age"
              version="2.10">
        <doc xml:whitespace="preserve">Gets the number of days elapsed since the last update of the resource
pointed by @info.
since the time this resource was last modified.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a positive integer containing the number of days elapsed</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="get_application_info"
              c:identifier="gtk_recent_info_get_application_info"
              version="2.10">
        <doc xml:whitespace="preserve">Gets the data regarding the application that has registered the resource
pointed by @info.
If the command line contains any escape characters defined inside the
storage specification, they will be expanded.
resource inside the recently used list, or %FALSE otherwise. The
modified or freed</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if an application with @app_name has registered this</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="app_name" transfer-ownership="none">
            <doc xml:whitespace="preserve">the name of the application that has registered this item</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="app_exec"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none">
            <doc xml:whitespace="preserve">return location for the string containing the command line</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="count"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:whitespace="preserve">return location for the number of times this item was registered</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
          <parameter name="time_"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:whitespace="preserve">return location for the timestamp this item was last registered for this application</doc>
            <type name="glong" c:type="time_t*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_applications"
              c:identifier="gtk_recent_info_get_applications"
              version="2.10">
        <doc xml:whitespace="preserve">Retrieves the list of applications that have registered this resource.
a newly allocated %NULL-terminated array of strings.
Use g_strfreev() to free it.</doc>
        <return-value transfer-ownership="full">
          <array length="0" c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <parameter name="length"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     allow-none="1">
            <doc xml:whitespace="preserve">return location for the length of the returned list</doc>
            <type name="gulong" c:type="gsize*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_description"
              c:identifier="gtk_recent_info_get_description"
              version="2.10">
        <doc xml:whitespace="preserve">Gets the (short) description of the resource.
is owned by the recent manager, and should not be freed.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the description of the resource.  The returned string</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_display_name"
              c:identifier="gtk_recent_info_get_display_name"
              version="2.10">
        <doc xml:whitespace="preserve">Gets the name of the resource.  If none has been defined, the basename
of the resource is obtained.
is owned by the recent manager, and should not be freed.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the display name of the resource.  The returned string</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_groups"
              c:identifier="gtk_recent_info_get_groups"
              version="2.10">
        <doc xml:whitespace="preserve">Returns all groups registered for the recently used item @info.  The
array of returned group names will be %NULL terminated, so length might
optionally be %NULL.
a newly allocated %NULL terminated array of strings.
Use g_strfreev() to free it.</doc>
        <return-value transfer-ownership="full">
          <array length="0" c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <parameter name="length"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     allow-none="1">
            <doc xml:whitespace="preserve">return location for the number of groups returned</doc>
            <type name="gulong" c:type="gsize*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_icon"
              c:identifier="gtk_recent_info_get_icon"
              version="2.10">
        <doc xml:whitespace="preserve">Retrieves the icon of size @size associated to the resource MIME type.
or %NULL. Use g_object_unref() when finished using the icon.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a #GdkPixbuf containing the icon,</doc>
          <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
        <parameters>
          <parameter name="size" transfer-ownership="none">
            <doc xml:whitespace="preserve">the size of the icon in pixels</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_mime_type"
              c:identifier="gtk_recent_info_get_mime_type"
              version="2.10">
        <doc xml:whitespace="preserve">Gets the MIME type of the resource.
is owned by the recent manager, and should not be freed.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the MIME type of the resource.  The returned string</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_modified"
              c:identifier="gtk_recent_info_get_modified"
              version="2.10">
        <doc xml:whitespace="preserve">Gets the timestamp (seconds from system's Epoch) when the resource
was last modified.
the resource was last modified, or -1 on failure.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the number of seconds elapsed from system's Epoch when</doc>
          <type name="glong" c:type="time_t"/>
        </return-value>
      </method>
      <method name="get_private_hint"
              c:identifier="gtk_recent_info_get_private_hint"
              version="2.10">
        <doc xml:whitespace="preserve">Gets the value of the "private" flag.  Resources in the recently used
list that have this flag set to %TRUE should only be displayed by the
applications that have registered them.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the private flag was found, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_short_name"
              c:identifier="gtk_recent_info_get_short_name"
              version="2.10">
        <doc xml:whitespace="preserve">Computes a valid UTF-8 string that can be used as the name of the item in a
menu or list.  For example, calling this function on an item that refers to
"file:///foo/bar.txt" will yield "bar.txt".
g_free().</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A newly-allocated string in UTF-8 encoding; free it with</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_uri"
              c:identifier="gtk_recent_info_get_uri"
              version="2.10">
        <doc xml:whitespace="preserve">Gets the URI of the resource.
owned by the recent manager, and should not be freed.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the URI of the resource.  The returned string is</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_uri_display"
              c:identifier="gtk_recent_info_get_uri_display"
              version="2.10">
        <doc xml:whitespace="preserve">Gets a displayable version of the resource's URI.  If the resource
is local, it returns a local path; if the resource is not local,
it returns the UTF-8 encoded content of gtk_recent_info_get_uri().
resource's URI or %NULL. Use g_free() when done using it.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a newly allocated UTF-8 string containing the</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_visited"
              c:identifier="gtk_recent_info_get_visited"
              version="2.10">
        <doc xml:whitespace="preserve">Gets the timestamp (seconds from system's Epoch) when the resource
was last visited.
the resource was last visited, or -1 on failure.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the number of seconds elapsed from system's Epoch when</doc>
          <type name="glong" c:type="time_t"/>
        </return-value>
      </method>
      <method name="has_application"
              c:identifier="gtk_recent_info_has_application"
              version="2.10">
        <doc xml:whitespace="preserve">Checks whether an application registered this resource using @app_name.
%FALSE otherwise.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if an application with name @app_name was found,</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="app_name" transfer-ownership="none">
            <doc xml:whitespace="preserve">a string containing an application name</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="has_group"
              c:identifier="gtk_recent_info_has_group"
              version="2.10">
        <doc xml:whitespace="preserve">Checks whether @group_name appears inside the groups registered for the
recently used item @info.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the group was found.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="group_name" transfer-ownership="none">
            <doc xml:whitespace="preserve">name of a group</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_local"
              c:identifier="gtk_recent_info_is_local"
              version="2.10">
        <doc xml:whitespace="preserve">Checks whether the resource is local or not by looking at the
scheme of its URI.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the resource is local.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="last_application"
              c:identifier="gtk_recent_info_last_application"
              version="2.10">
        <doc xml:whitespace="preserve">Gets the name of the last application that have registered the
recently used resource represented by @info.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">an application name.  Use g_free() to free it.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="match" c:identifier="gtk_recent_info_match" version="2.10">
        <doc xml:whitespace="preserve">Checks whether two #GtkRecentInfo structures point to the same
resource.
resource, %FALSE otherwise.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if both #GtkRecentInfo structures point to se same</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="info_b" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkRecentInfo</doc>
            <type name="RecentInfo" c:type="GtkRecentInfo*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="gtk_recent_info_ref" version="2.10">
        <doc xml:whitespace="preserve">Increases the reference count of @recent_info by one.
by one.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the recent info object with its reference count increased</doc>
          <type name="RecentInfo" c:type="GtkRecentInfo*"/>
        </return-value>
      </method>
      <method name="unref" c:identifier="gtk_recent_info_unref" version="2.10">
        <doc xml:whitespace="preserve">Decreases the reference count of @info by one.  If the reference
count reaches zero, @info is deallocated, and the memory freed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
    </record>
    <class name="RecentManager"
           c:symbol-prefix="recent_manager"
           c:type="GtkRecentManager"
           version="2.10"
           parent="GObject.Object"
           glib:type-name="GtkRecentManager"
           glib:get-type="gtk_recent_manager_get_type"
           glib:type-struct="RecentManagerClass">
      <doc xml:whitespace="preserve">#GtkRecentManager contains only private data
and should be accessed using the provided API.</doc>
      <constructor name="new"
                   c:identifier="gtk_recent_manager_new"
                   version="2.10">
        <doc xml:whitespace="preserve">Creates a new recent manager object.  Recent manager objects are used to
handle the list of recently used resources.  A #GtkRecentManager object
monitors the recently used resources list, and emits the "changed" signal
each time something inside the list changes.
#GtkRecentManager objects are expensive: be sure to create them only when
needed. You should use gtk_recent_manager_get_default() instead.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A newly created #GtkRecentManager object.</doc>
          <type name="RecentManager" c:type="GtkRecentManager*"/>
        </return-value>
      </constructor>
      <function name="get_default"
                c:identifier="gtk_recent_manager_get_default"
                version="2.10">
        <doc xml:whitespace="preserve">Gets a unique instance of #GtkRecentManager, that you can share
in your application without caring about memory management. The
returned instance will be freed when you application terminates.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">A unique #GtkRecentManager. Do not ref or unref it.</doc>
          <type name="RecentManager" c:type="GtkRecentManager*"/>
        </return-value>
      </function>
      <method name="add_full"
              c:identifier="gtk_recent_manager_add_full"
              version="2.10">
        <doc xml:whitespace="preserve">Adds a new resource, pointed by @uri, into the recently used
resources list, using the metadata specified inside the #GtkRecentData
structure passed in @recent_data.
The passed URI will be used to identify this resource inside the
list.
In order to register the new recently used resource, metadata about
the resource must be passed as well as the URI; the metadata is
stored in a #GtkRecentData structure, which must contain the MIME
type of the resource pointed by the URI; the name of the application
that is registering the item, and a command line to be used when
launching the item.
Optionally, a #GtkRecentData structure might contain a UTF-8 string
to be used when viewing the item instead of the last component of the
URI; a short description of the item; whether the item should be
considered private - that is, should be displayed only by the
applications that have registered it.
recently used resources list, %FALSE otherwise.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the new item was successfully added to the</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:whitespace="preserve">a valid URI</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="recent_data" transfer-ownership="none">
            <doc xml:whitespace="preserve">metadata of the resource</doc>
            <type name="RecentData" c:type="GtkRecentData*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_item"
              c:identifier="gtk_recent_manager_add_item"
              version="2.10">
        <doc xml:whitespace="preserve">Adds a new resource, pointed by @uri, into the recently used
resources list.
This function automatically retrieves some of the needed
metadata and setting other metadata to common default values; it
then feeds the data to gtk_recent_manager_add_full().
See gtk_recent_manager_add_full() if you want to explicitly
define the metadata for the resource pointed by @uri.
to the recently used resources list</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the new item was successfully added</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:whitespace="preserve">a valid URI</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_items"
              c:identifier="gtk_recent_manager_get_items"
              version="2.10">
        <doc xml:whitespace="preserve">Gets the list of recently used resources.
newly allocated #GtkRecentInfo objects. Use
gtk_recent_info_unref() on each item inside the list, and then
free the list itself using g_list_free().</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a list of</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="RecentInfo"/>
          </type>
        </return-value>
      </method>
      <method name="has_item"
              c:identifier="gtk_recent_manager_has_item"
              version="2.10">
        <doc xml:whitespace="preserve">Checks whether there is a recently used resource registered
with @uri inside the recent manager.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the resource was found, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:whitespace="preserve">a URI</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="lookup_item"
              c:identifier="gtk_recent_manager_lookup_item"
              version="2.10"
              throws="1">
        <doc xml:whitespace="preserve">Searches for a URI inside the recently used resources list, and
returns a structure containing informations about the resource
like its MIME type, or its display name.
about the resource pointed by @uri, or %NULL if the URI was
not registered in the recently used resources list.  Free with
gtk_recent_info_unref().</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a #GtkRecentInfo structure containing information</doc>
          <type name="RecentInfo" c:type="GtkRecentInfo*"/>
        </return-value>
        <parameters>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:whitespace="preserve">a URI</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="move_item"
              c:identifier="gtk_recent_manager_move_item"
              version="2.10"
              throws="1">
        <doc xml:whitespace="preserve">Changes the location of a recently used resource from @uri to @new_uri.
Please note that this function will not affect the resource pointed
by the URIs, but only the URI used in the recently used resources list.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:whitespace="preserve">the URI of a recently used resource</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="new_uri" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">the new URI of the recently used resource, or %NULL to remove the item pointed by @uri in the list</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="purge_items"
              c:identifier="gtk_recent_manager_purge_items"
              version="2.10"
              throws="1">
        <doc xml:whitespace="preserve">Purges every item from the recently used resources list.
recently used resources list.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the number of items that have been removed from the</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="remove_item"
              c:identifier="gtk_recent_manager_remove_item"
              version="2.10"
              throws="1">
        <doc xml:whitespace="preserve">Removes a resource pointed by @uri from the recently used resources
list handled by a recent manager.
removed by the recently used resources list, and %FALSE otherwise.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the item pointed by @uri has been successfully</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:whitespace="preserve">the URI of the item you wish to remove</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="filename"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8"/>
      </property>
      <property name="size" transfer-ownership="none">
        <type name="gint"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="RecentManagerPrivate" c:type="GtkRecentManagerPrivate*"/>
      </field>
      <glib:signal name="changed">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="RecentManagerClass"
            c:type="GtkRecentManagerClass"
            glib:is-gtype-struct-for="RecentManager"
            version="2.10">
      <doc xml:whitespace="preserve">#GtkRecentManagerClass contains only private data.</doc>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="changed">
        <callback name="changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="manager" transfer-ownership="none">
              <type name="RecentManager" c:type="GtkRecentManager*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_gtk_recent1" introspectable="0">
        <callback name="_gtk_recent1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_recent2" introspectable="0">
        <callback name="_gtk_recent2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_recent3" introspectable="0">
        <callback name="_gtk_recent3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_recent4" introspectable="0">
        <callback name="_gtk_recent4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <enumeration name="RecentManagerError"
                 version="2.10"
                 glib:type-name="GtkRecentManagerError"
                 glib:get-type="gtk_recent_manager_error_get_type"
                 c:type="GtkRecentManagerError"
                 glib:error-quark="gtk_recent_manager_error_quark">
      <doc xml:whitespace="preserve">Error codes for #GtkRecentManager operations</doc>
      <member name="not_found"
              value="0"
              c:identifier="GTK_RECENT_MANAGER_ERROR_NOT_FOUND"
              glib:nick="not-found"/>
      <member name="invalid_uri"
              value="1"
              c:identifier="GTK_RECENT_MANAGER_ERROR_INVALID_URI"
              glib:nick="invalid-uri"/>
      <member name="invalid_encoding"
              value="2"
              c:identifier="GTK_RECENT_MANAGER_ERROR_INVALID_ENCODING"
              glib:nick="invalid-encoding"/>
      <member name="not_registered"
              value="3"
              c:identifier="GTK_RECENT_MANAGER_ERROR_NOT_REGISTERED"
              glib:nick="not-registered"/>
      <member name="read"
              value="4"
              c:identifier="GTK_RECENT_MANAGER_ERROR_READ"
              glib:nick="read"/>
      <member name="write"
              value="5"
              c:identifier="GTK_RECENT_MANAGER_ERROR_WRITE"
              glib:nick="write"/>
      <member name="unknown"
              value="6"
              c:identifier="GTK_RECENT_MANAGER_ERROR_UNKNOWN"
              glib:nick="unknown"/>
    </enumeration>
    <record name="RecentManagerPrivate"
            c:type="GtkRecentManagerPrivate"
            disguised="1">
    </record>
    <callback name="RecentSortFunc" c:type="GtkRecentSortFunc">
      <return-value transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="a" transfer-ownership="none">
          <type name="RecentInfo" c:type="GtkRecentInfo*"/>
        </parameter>
        <parameter name="b" transfer-ownership="none">
          <type name="RecentInfo" c:type="GtkRecentInfo*"/>
        </parameter>
        <parameter name="user_data" transfer-ownership="none" closure="2">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <enumeration name="RecentSortType"
                 version="2.10"
                 glib:type-name="GtkRecentSortType"
                 glib:get-type="gtk_recent_sort_type_get_type"
                 c:type="GtkRecentSortType">
      <doc xml:whitespace="preserve">Used to specify the sorting method to be applyed to the recently
used resource list.</doc>
      <member name="none"
              value="0"
              c:identifier="GTK_RECENT_SORT_NONE"
              glib:nick="none"/>
      <member name="mru"
              value="1"
              c:identifier="GTK_RECENT_SORT_MRU"
              glib:nick="mru"/>
      <member name="lru"
              value="2"
              c:identifier="GTK_RECENT_SORT_LRU"
              glib:nick="lru"/>
      <member name="custom"
              value="3"
              c:identifier="GTK_RECENT_SORT_CUSTOM"
              glib:nick="custom"/>
    </enumeration>
    <enumeration name="ReliefStyle"
                 glib:type-name="GtkReliefStyle"
                 glib:get-type="gtk_relief_style_get_type"
                 c:type="GtkReliefStyle">
      <member name="normal"
              value="0"
              c:identifier="GTK_RELIEF_NORMAL"
              glib:nick="normal"/>
      <member name="half"
              value="1"
              c:identifier="GTK_RELIEF_HALF"
              glib:nick="half"/>
      <member name="none"
              value="2"
              c:identifier="GTK_RELIEF_NONE"
              glib:nick="none"/>
    </enumeration>
    <record name="RequestedSize" c:type="GtkRequestedSize">
      <doc xml:whitespace="preserve">Represents a request of a screen object in a given orientation. These
are primarily used in container implementations when allocating a natural
size for children calling. See gtk_distribute_natural_allocation().</doc>
      <field name="data" writable="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="minimum_size" writable="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="natural_size" writable="1">
        <type name="gint" c:type="gint"/>
      </field>
    </record>
    <record name="Requisition"
            c:type="GtkRequisition"
            glib:type-name="GtkRequisition"
            glib:get-type="gtk_requisition_get_type"
            c:symbol-prefix="requisition">
      <doc xml:whitespace="preserve">A &lt;structname&gt;GtkRequisition&lt;/structname&gt; represents the desired size of a widget. See
&lt;xref linkend="size-requisition"/&gt; for more information.</doc>
      <field name="width" writable="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="height" writable="1">
        <type name="gint" c:type="gint"/>
      </field>
      <constructor name="new" c:identifier="gtk_requisition_new" version="3.0">
        <doc xml:whitespace="preserve">Allocates a new #GtkRequisition structure and initializes its elements to zero.
be freed with gtk_requisition_free().</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new empty #GtkRequisition. The newly allocated #GtkRequisition should</doc>
          <type name="Requisition" c:type="GtkRequisition*"/>
        </return-value>
      </constructor>
      <method name="copy" c:identifier="gtk_requisition_copy">
        <doc xml:whitespace="preserve">Copies a #GtkRequisition.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a copy of @requisition</doc>
          <type name="Requisition" c:type="GtkRequisition*"/>
        </return-value>
      </method>
      <method name="free" c:identifier="gtk_requisition_free">
        <doc xml:whitespace="preserve">Frees a #GtkRequisition.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
    </record>
    <enumeration name="ResizeMode"
                 glib:type-name="GtkResizeMode"
                 glib:get-type="gtk_resize_mode_get_type"
                 c:type="GtkResizeMode">
      <member name="parent"
              value="0"
              c:identifier="GTK_RESIZE_PARENT"
              glib:nick="parent"/>
      <member name="queue"
              value="1"
              c:identifier="GTK_RESIZE_QUEUE"
              glib:nick="queue"/>
      <member name="immediate"
              value="2"
              c:identifier="GTK_RESIZE_IMMEDIATE"
              glib:nick="immediate"/>
    </enumeration>
    <enumeration name="ResponseType"
                 glib:type-name="GtkResponseType"
                 glib:get-type="gtk_response_type_get_type"
                 c:type="GtkResponseType">
      <member name="none"
              value="-1"
              c:identifier="GTK_RESPONSE_NONE"
              glib:nick="none"/>
      <member name="reject"
              value="-2"
              c:identifier="GTK_RESPONSE_REJECT"
              glib:nick="reject"/>
      <member name="accept"
              value="-3"
              c:identifier="GTK_RESPONSE_ACCEPT"
              glib:nick="accept"/>
      <member name="delete_event"
              value="-4"
              c:identifier="GTK_RESPONSE_DELETE_EVENT"
              glib:nick="delete-event"/>
      <member name="ok"
              value="-5"
              c:identifier="GTK_RESPONSE_OK"
              glib:nick="ok"/>
      <member name="cancel"
              value="-6"
              c:identifier="GTK_RESPONSE_CANCEL"
              glib:nick="cancel"/>
      <member name="close"
              value="-7"
              c:identifier="GTK_RESPONSE_CLOSE"
              glib:nick="close"/>
      <member name="yes"
              value="-8"
              c:identifier="GTK_RESPONSE_YES"
              glib:nick="yes"/>
      <member name="no"
              value="-9"
              c:identifier="GTK_RESPONSE_NO"
              glib:nick="no"/>
      <member name="apply"
              value="-10"
              c:identifier="GTK_RESPONSE_APPLY"
              glib:nick="apply"/>
      <member name="help"
              value="-11"
              c:identifier="GTK_RESPONSE_HELP"
              glib:nick="help"/>
    </enumeration>
    <class name="Ruler"
           c:symbol-prefix="ruler"
           c:type="GtkRuler"
           parent="Widget"
           glib:type-name="GtkRuler"
           glib:get-type="gtk_ruler_get_type"
           glib:type-struct="RulerClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Buildable"/>
      <implements name="Orientable"/>
      <implements name="SizeRequest"/>
      <constructor name="new" c:identifier="gtk_ruler_new" version="3.0">
        <doc xml:whitespace="preserve">Creates a new #GtkRuler with the given orientation.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a new #GtkRuler.</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="orientation" transfer-ownership="none">
            <doc xml:whitespace="preserve">the ruler's orientation.</doc>
            <type name="Orientation" c:type="GtkOrientation"/>
          </parameter>
        </parameters>
      </constructor>
      <virtual-method name="draw_pos" invoker="draw_pos">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </virtual-method>
      <virtual-method name="draw_ticks" invoker="draw_ticks">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </virtual-method>
      <method name="draw_pos" c:identifier="gtk_ruler_draw_pos">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="draw_ticks" c:identifier="gtk_ruler_draw_ticks">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="get_metric" c:identifier="gtk_ruler_get_metric">
        <doc xml:whitespace="preserve">Gets the units used for a #GtkRuler. See gtk_ruler_set_metric().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the units currently used for @ruler</doc>
          <type name="MetricType" c:type="GtkMetricType"/>
        </return-value>
      </method>
      <method name="get_range" c:identifier="gtk_ruler_get_range">
        <doc xml:whitespace="preserve">Retrieves values indicating the range and current position of a #GtkRuler.
See gtk_ruler_set_range().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="lower" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">location to store lower limit of the ruler, or %NULL</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="upper" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">location to store upper limit of the ruler, or %NULL</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="position" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">location to store the current position of the mark on the ruler, or %NULL</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="max_size" transfer-ownership="none">
            <doc xml:whitespace="preserve">location to store the maximum size of the ruler used when calculating the space to leave for the text, or %NULL.</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_metric" c:identifier="gtk_ruler_set_metric">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="metric" transfer-ownership="none">
            <type name="MetricType" c:type="GtkMetricType"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_range" c:identifier="gtk_ruler_set_range">
        <doc xml:whitespace="preserve">This sets the range of the ruler.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="lower" transfer-ownership="none">
            <doc xml:whitespace="preserve">the lower limit of the ruler</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="upper" transfer-ownership="none">
            <doc xml:whitespace="preserve">the upper limit of the ruler</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="position" transfer-ownership="none">
            <doc xml:whitespace="preserve">the mark on the ruler</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="max_size" transfer-ownership="none">
            <doc xml:whitespace="preserve">the maximum size of the ruler used when calculating the space to leave for the text</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <property name="lower" writable="1" transfer-ownership="none">
        <type name="gdouble"/>
      </property>
      <property name="max-size" writable="1" transfer-ownership="none">
        <type name="gdouble"/>
      </property>
      <property name="metric"
                version="2.8"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The metric used for the ruler.</doc>
        <type name="MetricType"/>
      </property>
      <property name="position" writable="1" transfer-ownership="none">
        <type name="gdouble"/>
      </property>
      <property name="upper" writable="1" transfer-ownership="none">
        <type name="gdouble"/>
      </property>
      <field name="widget">
        <type name="Widget" c:type="GtkWidget"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="RulerPrivate" c:type="GtkRulerPrivate*"/>
      </field>
    </class>
    <record name="RulerClass"
            c:type="GtkRulerClass"
            glib:is-gtype-struct-for="Ruler">
      <field name="parent_class">
        <type name="WidgetClass" c:type="GtkWidgetClass"/>
      </field>
      <field name="draw_ticks">
        <callback name="draw_ticks">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="ruler" transfer-ownership="none">
              <type name="Ruler" c:type="GtkRuler*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="draw_pos">
        <callback name="draw_pos">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="ruler" transfer-ownership="none">
              <type name="Ruler" c:type="GtkRuler*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_gtk_reserved1" introspectable="0">
        <callback name="_gtk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved2" introspectable="0">
        <callback name="_gtk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved3" introspectable="0">
        <callback name="_gtk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved4" introspectable="0">
        <callback name="_gtk_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="RulerMetric" c:type="GtkRulerMetric">
      <field name="metric_name" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="abbrev" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="pixels_per_unit" writable="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="ruler_scale" writable="1">
        <array zero-terminated="0" c:type="gdouble" fixed-size="10">
          <type name="gdouble" c:type="gdouble"/>
        </array>
      </field>
      <field name="subdivide" writable="1">
        <array zero-terminated="0" c:type="gint" fixed-size="5">
          <type name="gint" c:type="gint"/>
        </array>
      </field>
    </record>
    <record name="RulerPrivate" c:type="GtkRulerPrivate" disguised="1">
    </record>
    <constant name="SIZE_REQUEST_CACHED_SIZES" value="3">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="STOCK_ABOUT" value="gtk-about">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="STOCK_ADD" value="gtk-add">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="STOCK_APPLY" value="gtk-apply">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="STOCK_BOLD" value="gtk-bold">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="STOCK_CANCEL" value="gtk-cancel">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="STOCK_CAPS_LOCK_WARNING" value="gtk-caps-lock-warning">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="STOCK_CDROM" value="gtk-cdrom">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="STOCK_CLEAR" value="gtk-clear">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="STOCK_CLOSE" value="gtk-close">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="STOCK_COLOR_PICKER" value="gtk-color-picker">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="STOCK_CONNECT" value="gtk-connect">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="STOCK_CONVERT" value="gtk-convert">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="STOCK_COPY" value="gtk-copy">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="STOCK_CUT" value="gtk-cut">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="STOCK_DELETE" value="gtk-delete">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="STOCK_DIALOG_AUTHENTICATION"
              value="gtk-dialog-authentication">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="STOCK_DIALOG_ERROR" value="gtk-dialog-error">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="STOCK_DIALOG_INFO" value="gtk-dialog-info">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="STOCK_DIALOG_QUESTION" value="gtk-dialog-question">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="STOCK_DIALOG_WARNING" value="gtk-dialog-warning">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="STOCK_DIRECTORY" value="gtk-directory">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="STOCK_DISCARD" value="gtk-discard">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="STOCK_DISCONNECT" value="gtk-disconnect">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="STOCK_DND" value="gtk-dnd">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="STOCK_DND_MULTIPLE" value="gtk-dnd-multiple">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="STOCK_EDIT" value="gtk-edit">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="STOCK_EXECUTE" value="gtk-execute">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="STOCK_FILE" value="gtk-file">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="STOCK_FIND" value="gtk-find">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="STOCK_FIND_AND_REPLACE" value="gtk-find-and-replace">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="STOCK_FLOPPY" value="gtk-floppy">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="STOCK_FULLSCREEN" value="gtk-fullscreen">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="STOCK_GOTO_BOTTOM" value="gtk-goto-bottom">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="STOCK_GOTO_FIRST" value="gtk-goto-first">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="STOCK_GOTO_LAST" value="gtk-goto-last">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="STOCK_GOTO_TOP" value="gtk-goto-top">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="STOCK_GO_BACK" value="gtk-go-back">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="STOCK_GO_DOWN" value="gtk-go-down">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="STOCK_GO_FORWARD" value="gtk-go-forward">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="STOCK_GO_UP" value="gtk-go-up">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="STOCK_HARDDISK" value="gtk-harddisk">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="STOCK_HELP" value="gtk-help">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="STOCK_HOME" value="gtk-home">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="STOCK_INDENT" value="gtk-indent">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="STOCK_INDEX" value="gtk-index">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="STOCK_INFO" value="gtk-info">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="STOCK_ITALIC" value="gtk-italic">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="STOCK_JUMP_TO" value="gtk-jump-to">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="STOCK_JUSTIFY_CENTER" value="gtk-justify-center">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="STOCK_JUSTIFY_FILL" value="gtk-justify-fill">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="STOCK_JUSTIFY_LEFT" value="gtk-justify-left">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="STOCK_JUSTIFY_RIGHT" value="gtk-justify-right">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="STOCK_LEAVE_FULLSCREEN" value="gtk-leave-fullscreen">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="STOCK_MEDIA_FORWARD" value="gtk-media-forward">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="STOCK_MEDIA_NEXT" value="gtk-media-next">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="STOCK_MEDIA_PAUSE" value="gtk-media-pause">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="STOCK_MEDIA_PLAY" value="gtk-media-play">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="STOCK_MEDIA_PREVIOUS" value="gtk-media-previous">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="STOCK_MEDIA_RECORD" value="gtk-media-record">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="STOCK_MEDIA_REWIND" value="gtk-media-rewind">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="STOCK_MEDIA_STOP" value="gtk-media-stop">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="STOCK_MISSING_IMAGE" value="gtk-missing-image">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="STOCK_NETWORK" value="gtk-network">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="STOCK_NEW" value="gtk-new">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="STOCK_NO" value="gtk-no">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="STOCK_OK" value="gtk-ok">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="STOCK_OPEN" value="gtk-open">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="STOCK_ORIENTATION_LANDSCAPE"
              value="gtk-orientation-landscape">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="STOCK_ORIENTATION_PORTRAIT"
              value="gtk-orientation-portrait">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="STOCK_ORIENTATION_REVERSE_LANDSCAPE"
              value="gtk-orientation-reverse-landscape">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="STOCK_ORIENTATION_REVERSE_PORTRAIT"
              value="gtk-orientation-reverse-portrait">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="STOCK_PAGE_SETUP" value="gtk-page-setup">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="STOCK_PASTE" value="gtk-paste">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="STOCK_PREFERENCES" value="gtk-preferences">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="STOCK_PRINT" value="gtk-print">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="STOCK_PRINT_ERROR" value="gtk-print-error">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="STOCK_PRINT_PAUSED" value="gtk-print-paused">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="STOCK_PRINT_PREVIEW" value="gtk-print-preview">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="STOCK_PRINT_REPORT" value="gtk-print-report">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="STOCK_PRINT_WARNING" value="gtk-print-warning">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="STOCK_PROPERTIES" value="gtk-properties">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="STOCK_QUIT" value="gtk-quit">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="STOCK_REDO" value="gtk-redo">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="STOCK_REFRESH" value="gtk-refresh">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="STOCK_REMOVE" value="gtk-remove">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="STOCK_REVERT_TO_SAVED" value="gtk-revert-to-saved">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="STOCK_SAVE" value="gtk-save">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="STOCK_SAVE_AS" value="gtk-save-as">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="STOCK_SELECT_ALL" value="gtk-select-all">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="STOCK_SELECT_COLOR" value="gtk-select-color">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="STOCK_SELECT_FONT" value="gtk-select-font">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="STOCK_SORT_ASCENDING" value="gtk-sort-ascending">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="STOCK_SORT_DESCENDING" value="gtk-sort-descending">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="STOCK_SPELL_CHECK" value="gtk-spell-check">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="STOCK_STOP" value="gtk-stop">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="STOCK_STRIKETHROUGH" value="gtk-strikethrough">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="STOCK_UNDELETE" value="gtk-undelete">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="STOCK_UNDERLINE" value="gtk-underline">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="STOCK_UNDO" value="gtk-undo">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="STOCK_UNINDENT" value="gtk-unindent">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="STOCK_YES" value="gtk-yes">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="STOCK_ZOOM_100" value="gtk-zoom-100">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="STOCK_ZOOM_FIT" value="gtk-zoom-fit">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="STOCK_ZOOM_IN" value="gtk-zoom-in">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="STOCK_ZOOM_OUT" value="gtk-zoom-out">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <class name="Scale"
           c:symbol-prefix="scale"
           c:type="GtkScale"
           parent="Range"
           glib:type-name="GtkScale"
           glib:get-type="gtk_scale_get_type"
           glib:type-struct="ScaleClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Buildable"/>
      <implements name="Orientable"/>
      <implements name="SizeRequest"/>
      <constructor name="new" c:identifier="gtk_scale_new" version="3.0">
        <doc xml:whitespace="preserve">Creates a new #GtkScale.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a new #GtkScale</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="orientation" transfer-ownership="none">
            <doc xml:whitespace="preserve">the scale's orientation.</doc>
            <type name="Orientation" c:type="GtkOrientation"/>
          </parameter>
          <parameter name="adjustment" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GtkAdjustment which sets the range of the scale, or %NULL to create a new adjustment.</doc>
            <type name="Adjustment" c:type="GtkAdjustment*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_with_range"
                   c:identifier="gtk_scale_new_with_range"
                   version="3.0">
        <doc xml:whitespace="preserve">Creates a new scale widget with the given orientation that lets the
user input a number between @min and @max (including @min and @max)
with the increment @step.  @step must be nonzero; it's the distance
the slider moves when using the arrow keys to adjust the scale
value.
Note that the way in which the precision is derived works best if @step
is a power of ten. If the resulting precision is not suitable for your
needs, use gtk_scale_set_digits() to correct it.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a new #GtkScale</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="orientation" transfer-ownership="none">
            <doc xml:whitespace="preserve">the scale's orientation.</doc>
            <type name="Orientation" c:type="GtkOrientation"/>
          </parameter>
          <parameter name="min" transfer-ownership="none">
            <doc xml:whitespace="preserve">minimum value</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="max" transfer-ownership="none">
            <doc xml:whitespace="preserve">maximum value</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="step" transfer-ownership="none">
            <doc xml:whitespace="preserve">step increment (tick size) used with keyboard shortcuts</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </constructor>
      <virtual-method name="draw_value">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </virtual-method>
      <virtual-method name="get_layout_offsets"
                      invoker="get_layout_offsets"
                      version="2.4">
        <doc xml:whitespace="preserve">Obtains the coordinates where the scale will draw the 
#PangoLayout representing the text in the scale. Remember
when using the #PangoLayout function you need to convert to
and from pixels using PANGO_PIXELS() or #PANGO_SCALE. 
If the #GtkScale:draw-value property is %FALSE, the return 
values are undefined.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="x" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">location to store X offset of layout, or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="y" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">location to store Y offset of layout, or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="add_mark" c:identifier="gtk_scale_add_mark" version="2.16">
        <doc xml:whitespace="preserve">Adds a mark at @value. 
A mark is indicated visually by drawing a tick mark next to the scale, 
and GTK+ makes it easy for the user to position the scale exactly at the 
marks value.
If @markup is not %NULL, text is shown next to the tick mark. 
To remove marks from a scale, use gtk_scale_clear_marks().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="value" transfer-ownership="none">
            <doc xml:whitespace="preserve">the value at which the mark is placed, must be between the lower and upper limits of the scales' adjustment</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="position" transfer-ownership="none">
            <doc xml:whitespace="preserve">where to draw the mark. For a horizontal scale, #GTK_POS_TOP is drawn above the scale, anything else below. For a vertical scale, #GTK_POS_LEFT is drawn to the left of the scale, anything else to the right.</doc>
            <type name="PositionType" c:type="GtkPositionType"/>
          </parameter>
          <parameter name="markup" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">Text to be shown at the mark, using &lt;link linkend="PangoMarkupFormat"&gt;Pango markup&lt;/link&gt;, or %NULL</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="clear_marks"
              c:identifier="gtk_scale_clear_marks"
              version="2.16">
        <doc xml:whitespace="preserve">Removes any marks that have been added with gtk_scale_add_mark().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="get_digits" c:identifier="gtk_scale_get_digits">
        <doc xml:whitespace="preserve">Gets the number of decimal places that are displayed in the value.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the number of decimal places that are displayed</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="get_draw_value" c:identifier="gtk_scale_get_draw_value">
        <doc xml:whitespace="preserve">Returns whether the current value is displayed as a string 
next to the slider.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">whether the current value is displayed as a string</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_layout"
              c:identifier="gtk_scale_get_layout"
              version="2.4">
        <doc xml:whitespace="preserve">Gets the #PangoLayout used to display the scale. The returned
object is owned by the scale so does not need to be freed by
the caller.
or %NULL if the #GtkScale:draw-value property is %FALSE.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the #PangoLayout for this scale,</doc>
          <type name="Pango.Layout" c:type="PangoLayout*"/>
        </return-value>
      </method>
      <method name="get_layout_offsets"
              c:identifier="gtk_scale_get_layout_offsets"
              version="2.4">
        <doc xml:whitespace="preserve">Obtains the coordinates where the scale will draw the 
#PangoLayout representing the text in the scale. Remember
when using the #PangoLayout function you need to convert to
and from pixels using PANGO_PIXELS() or #PANGO_SCALE. 
If the #GtkScale:draw-value property is %FALSE, the return 
values are undefined.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="x" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">location to store X offset of layout, or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="y" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">location to store Y offset of layout, or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_value_pos" c:identifier="gtk_scale_get_value_pos">
        <doc xml:whitespace="preserve">Gets the position in which the current value is displayed.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the position in which the current value is displayed</doc>
          <type name="PositionType" c:type="GtkPositionType"/>
        </return-value>
      </method>
      <method name="set_digits" c:identifier="gtk_scale_set_digits">
        <doc xml:whitespace="preserve">Sets the number of decimal places that are displayed in the value.
Also causes the value of the adjustment to be rounded off to this
number of digits, so the retrieved value matches the value the user saw.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="digits" transfer-ownership="none">
            <doc xml:whitespace="preserve">the number of decimal places to display, e.g. use 1 to display 1.0, 2 to display 1.00, etc</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_draw_value" c:identifier="gtk_scale_set_draw_value">
        <doc xml:whitespace="preserve">Specifies whether the current value is displayed as a string next 
to the slider.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="draw_value" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE to draw the value</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_value_pos" c:identifier="gtk_scale_set_value_pos">
        <doc xml:whitespace="preserve">Sets the position in which the current value is displayed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="pos" transfer-ownership="none">
            <doc xml:whitespace="preserve">the position in which the current value is displayed</doc>
            <type name="PositionType" c:type="GtkPositionType"/>
          </parameter>
        </parameters>
      </method>
      <property name="digits" writable="1" transfer-ownership="none">
        <type name="gint"/>
      </property>
      <property name="draw-value" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="value-pos" writable="1" transfer-ownership="none">
        <type name="PositionType"/>
      </property>
      <field name="range">
        <type name="Range" c:type="GtkRange"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ScalePrivate" c:type="GtkScalePrivate*"/>
      </field>
      <glib:signal name="format-value">
        <doc xml:whitespace="preserve">Signal which allows you to change how the scale value is displayed.
Connect a signal handler which returns an allocated string representing 
Here's an example signal handler which displays a value 1.0 as
with "--&amp;gt;1.0&amp;lt;--".
|[
static gchar*
format_value_callback (GtkScale *scale,
gdouble   value)
{
return g_strdup_printf ("--&amp;gt;&amp;percnt;0.*g&amp;lt;--",
gtk_scale_get_digits (scale), value);
}
]|</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">allocated string representing @value</doc>
          <type name="utf8"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the value to format</doc>
            <type name="gdouble"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <class name="ScaleButton"
           c:symbol-prefix="scale_button"
           c:type="GtkScaleButton"
           parent="Button"
           glib:type-name="GtkScaleButton"
           glib:get-type="gtk_scale_button_get_type"
           glib:type-struct="ScaleButtonClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Activatable"/>
      <implements name="Buildable"/>
      <implements name="Orientable"/>
      <implements name="SizeRequest"/>
      <constructor name="new"
                   c:identifier="gtk_scale_button_new"
                   version="2.12">
        <doc xml:whitespace="preserve">Creates a #GtkScaleButton, with a range between @min and @max, with
a stepping of @step.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a new #GtkScaleButton</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="size" transfer-ownership="none">
            <doc xml:whitespace="preserve">a stock icon size</doc>
            <type name="gint"/>
          </parameter>
          <parameter name="min" transfer-ownership="none">
            <doc xml:whitespace="preserve">the minimum value of the scale (usually 0)</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="max" transfer-ownership="none">
            <doc xml:whitespace="preserve">the maximum value of the scale (usually 100)</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="step" transfer-ownership="none">
            <doc xml:whitespace="preserve">the stepping of value when a scroll-wheel event, or up/down arrow event occurs (usually 2)</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="icons" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">a %NULL-terminated array of icon names, or %NULL if you want to set the list later with gtk_scale_button_set_icons()</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_adjustment"
              c:identifier="gtk_scale_button_get_adjustment"
              version="2.12">
        <doc xml:whitespace="preserve">Gets the #GtkAdjustment associated with the #GtkScaleButton's scale.
See gtk_range_get_adjustment() for details.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the adjustment associated with the scale</doc>
          <type name="Adjustment" c:type="GtkAdjustment*"/>
        </return-value>
      </method>
      <method name="get_minus_button"
              c:identifier="gtk_scale_button_get_minus_button"
              version="2.14">
        <doc xml:whitespace="preserve">Retrieves the minus button of the #GtkScaleButton.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the minus button of the #GtkScaleButton</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
      </method>
      <method name="get_plus_button"
              c:identifier="gtk_scale_button_get_plus_button"
              version="2.14">
        <doc xml:whitespace="preserve">Retrieves the plus button of the #GtkScaleButton.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the plus button of the #GtkScaleButton</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
      </method>
      <method name="get_popup"
              c:identifier="gtk_scale_button_get_popup"
              version="2.14">
        <doc xml:whitespace="preserve">Retrieves the popup of the #GtkScaleButton.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the popup of the #GtkScaleButton</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
      </method>
      <method name="get_value"
              c:identifier="gtk_scale_button_get_value"
              version="2.12">
        <doc xml:whitespace="preserve">Gets the current value of the scale button.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">current value of the scale button</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </method>
      <method name="set_adjustment"
              c:identifier="gtk_scale_button_set_adjustment"
              version="2.12">
        <doc xml:whitespace="preserve">Sets the #GtkAdjustment to be used as a model
for the #GtkScaleButton's scale.
See gtk_range_set_adjustment() for details.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="adjustment" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkAdjustment</doc>
            <type name="Adjustment" c:type="GtkAdjustment*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_icons"
              c:identifier="gtk_scale_button_set_icons"
              version="2.12">
        <doc xml:whitespace="preserve">Sets the icons to be used by the scale button.
For details, see the #GtkScaleButton:icons property.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="icons" transfer-ownership="none">
            <doc xml:whitespace="preserve">a %NULL-terminated array of icon names</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_value"
              c:identifier="gtk_scale_button_set_value"
              version="2.12">
        <doc xml:whitespace="preserve">Sets the current value of the scale; if the value is outside
the minimum or maximum range values, it will be clamped to fit
inside them. The scale button emits the #GtkScaleButton::value-changed
signal if the value changes.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="value" transfer-ownership="none">
            <doc xml:whitespace="preserve">new value of the scale button</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <property name="adjustment" writable="1" transfer-ownership="none">
        <type name="Adjustment"/>
      </property>
      <property name="icons"
                version="2.12"
                introspectable="0"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The names of the icons to be used by the scale button.
The first item in the array will be used in the button
when the current value is the lowest value, the second
item for the highest value. All the subsequent icons will
be used for all the other values, spread evenly over the
range of values.
If there's only one icon name in the @icons array, it will
be used for all the values. If only two icon names are in
the @icons array, the first one will be used for the bottom
50% of the scale, and the second one for the top 50%.
It is recommended to use at least 3 icons so that the
#GtkScaleButton reflects the current value of the scale
better for the users.</doc>
        <type/>
      </property>
      <property name="size" writable="1" transfer-ownership="none">
        <type name="IconSize"/>
      </property>
      <property name="value" writable="1" transfer-ownership="none">
        <type name="gdouble"/>
      </property>
      <field name="parent">
        <type name="Button" c:type="GtkButton"/>
      </field>
      <field name="priv">
        <type name="ScaleButtonPrivate" c:type="GtkScaleButtonPrivate*"/>
      </field>
      <glib:signal name="popdown" version="2.12">
        <doc xml:whitespace="preserve">The ::popdown signal is a
&lt;link linkend="keybinding-signals"&gt;keybinding signal&lt;/link&gt;
which gets emitted to popdown the scale widget.
The default binding for this signal is Escape.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
      <glib:signal name="popup" version="2.12">
        <doc xml:whitespace="preserve">The ::popup signal is a
&lt;link linkend="keybinding-signals"&gt;keybinding signal&lt;/link&gt;
which gets emitted to popup the scale widget.
The default bindings for this signal are Space, Enter and Return.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
      <glib:signal name="value-changed" version="2.12">
        <doc xml:whitespace="preserve">The ::value-changed signal is emitted when the value field has
changed.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the new value</doc>
            <type name="gdouble"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="ScaleButtonClass"
            c:type="GtkScaleButtonClass"
            glib:is-gtype-struct-for="ScaleButton">
      <field name="parent_class">
        <type name="ButtonClass" c:type="GtkButtonClass"/>
      </field>
      <field name="value_changed">
        <callback name="value_changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="button" transfer-ownership="none">
              <type name="ScaleButton" c:type="GtkScaleButton*"/>
            </parameter>
            <parameter name="value" transfer-ownership="none">
              <type name="gdouble" c:type="gdouble"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_gtk_reserved1" introspectable="0">
        <callback name="_gtk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved2" introspectable="0">
        <callback name="_gtk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved3" introspectable="0">
        <callback name="_gtk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved4" introspectable="0">
        <callback name="_gtk_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="ScaleButtonPrivate"
            c:type="GtkScaleButtonPrivate"
            disguised="1">
    </record>
    <record name="ScaleClass"
            c:type="GtkScaleClass"
            glib:is-gtype-struct-for="Scale">
      <field name="parent_class">
        <type name="RangeClass" c:type="GtkRangeClass"/>
      </field>
      <field name="format_value">
        <callback name="format_value">
          <return-value transfer-ownership="full">
            <type name="utf8" c:type="gchar*"/>
          </return-value>
          <parameters>
            <parameter name="scale" transfer-ownership="none">
              <type name="Scale" c:type="GtkScale*"/>
            </parameter>
            <parameter name="value" transfer-ownership="none">
              <type name="gdouble" c:type="gdouble"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="draw_value">
        <callback name="draw_value">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="scale" transfer-ownership="none">
              <type name="Scale" c:type="GtkScale*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_layout_offsets">
        <callback name="get_layout_offsets">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="scale" transfer-ownership="none">
              <type name="Scale" c:type="GtkScale*"/>
            </parameter>
            <parameter name="x" transfer-ownership="none" allow-none="1">
              <doc xml:whitespace="preserve">location to store X offset of layout, or %NULL</doc>
              <type name="gint" c:type="gint*"/>
            </parameter>
            <parameter name="y" transfer-ownership="none" allow-none="1">
              <doc xml:whitespace="preserve">location to store Y offset of layout, or %NULL</doc>
              <type name="gint" c:type="gint*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_gtk_reserved1" introspectable="0">
        <callback name="_gtk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved2" introspectable="0">
        <callback name="_gtk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved3" introspectable="0">
        <callback name="_gtk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="ScalePrivate" c:type="GtkScalePrivate" disguised="1">
    </record>
    <enumeration name="ScrollStep"
                 glib:type-name="GtkScrollStep"
                 glib:get-type="gtk_scroll_step_get_type"
                 c:type="GtkScrollStep">
      <member name="steps"
              value="0"
              c:identifier="GTK_SCROLL_STEPS"
              glib:nick="steps"/>
      <member name="pages"
              value="1"
              c:identifier="GTK_SCROLL_PAGES"
              glib:nick="pages"/>
      <member name="ends"
              value="2"
              c:identifier="GTK_SCROLL_ENDS"
              glib:nick="ends"/>
      <member name="horizontal_steps"
              value="3"
              c:identifier="GTK_SCROLL_HORIZONTAL_STEPS"
              glib:nick="horizontal-steps"/>
      <member name="horizontal_pages"
              value="4"
              c:identifier="GTK_SCROLL_HORIZONTAL_PAGES"
              glib:nick="horizontal-pages"/>
      <member name="horizontal_ends"
              value="5"
              c:identifier="GTK_SCROLL_HORIZONTAL_ENDS"
              glib:nick="horizontal-ends"/>
    </enumeration>
    <enumeration name="ScrollType"
                 glib:type-name="GtkScrollType"
                 glib:get-type="gtk_scroll_type_get_type"
                 c:type="GtkScrollType">
      <member name="none"
              value="0"
              c:identifier="GTK_SCROLL_NONE"
              glib:nick="none"/>
      <member name="jump"
              value="1"
              c:identifier="GTK_SCROLL_JUMP"
              glib:nick="jump"/>
      <member name="step_backward"
              value="2"
              c:identifier="GTK_SCROLL_STEP_BACKWARD"
              glib:nick="step-backward"/>
      <member name="step_forward"
              value="3"
              c:identifier="GTK_SCROLL_STEP_FORWARD"
              glib:nick="step-forward"/>
      <member name="page_backward"
              value="4"
              c:identifier="GTK_SCROLL_PAGE_BACKWARD"
              glib:nick="page-backward"/>
      <member name="page_forward"
              value="5"
              c:identifier="GTK_SCROLL_PAGE_FORWARD"
              glib:nick="page-forward"/>
      <member name="step_up"
              value="6"
              c:identifier="GTK_SCROLL_STEP_UP"
              glib:nick="step-up"/>
      <member name="step_down"
              value="7"
              c:identifier="GTK_SCROLL_STEP_DOWN"
              glib:nick="step-down"/>
      <member name="page_up"
              value="8"
              c:identifier="GTK_SCROLL_PAGE_UP"
              glib:nick="page-up"/>
      <member name="page_down"
              value="9"
              c:identifier="GTK_SCROLL_PAGE_DOWN"
              glib:nick="page-down"/>
      <member name="step_left"
              value="10"
              c:identifier="GTK_SCROLL_STEP_LEFT"
              glib:nick="step-left"/>
      <member name="step_right"
              value="11"
              c:identifier="GTK_SCROLL_STEP_RIGHT"
              glib:nick="step-right"/>
      <member name="page_left"
              value="12"
              c:identifier="GTK_SCROLL_PAGE_LEFT"
              glib:nick="page-left"/>
      <member name="page_right"
              value="13"
              c:identifier="GTK_SCROLL_PAGE_RIGHT"
              glib:nick="page-right"/>
      <member name="start"
              value="14"
              c:identifier="GTK_SCROLL_START"
              glib:nick="start"/>
      <member name="end"
              value="15"
              c:identifier="GTK_SCROLL_END"
              glib:nick="end"/>
    </enumeration>
    <class name="Scrollbar"
           c:symbol-prefix="scrollbar"
           c:type="GtkScrollbar"
           parent="Range"
           glib:type-name="GtkScrollbar"
           glib:get-type="gtk_scrollbar_get_type"
           glib:type-struct="ScrollbarClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Buildable"/>
      <implements name="Orientable"/>
      <implements name="SizeRequest"/>
      <constructor name="new" c:identifier="gtk_scrollbar_new" version="3.0">
        <doc xml:whitespace="preserve">Creates a new scrollbar with the given orientation.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the new #GtkScrollbar.</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="orientation" transfer-ownership="none">
            <doc xml:whitespace="preserve">the scrollbar's orientation.</doc>
            <type name="Orientation" c:type="GtkOrientation"/>
          </parameter>
          <parameter name="adjustment"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">the #GtkAdjustment to use, or %NULL to create a new adjustment.</doc>
            <type name="Adjustment" c:type="GtkAdjustment*"/>
          </parameter>
        </parameters>
      </constructor>
      <field name="range">
        <type name="Range" c:type="GtkRange"/>
      </field>
    </class>
    <record name="ScrollbarClass"
            c:type="GtkScrollbarClass"
            glib:is-gtype-struct-for="Scrollbar">
      <field name="parent_class">
        <type name="RangeClass" c:type="GtkRangeClass"/>
      </field>
      <field name="_gtk_reserved1" introspectable="0">
        <callback name="_gtk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved2" introspectable="0">
        <callback name="_gtk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved3" introspectable="0">
        <callback name="_gtk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved4" introspectable="0">
        <callback name="_gtk_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <class name="ScrolledWindow"
           c:symbol-prefix="scrolled_window"
           c:type="GtkScrolledWindow"
           parent="Bin"
           glib:type-name="GtkScrolledWindow"
           glib:get-type="gtk_scrolled_window_get_type"
           glib:type-struct="ScrolledWindowClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Buildable"/>
      <implements name="SizeRequest"/>
      <constructor name="new" c:identifier="gtk_scrolled_window_new">
        <doc xml:whitespace="preserve">Creates a new scrolled window.
The two arguments are the scrolled window's adjustments; these will be
shared with the scrollbars and the child widget to keep the bars in sync 
with the child. Usually you want to pass %NULL for the adjustments, which 
will cause the scrolled window to create them for you.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a new scrolled window</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="hadjustment"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">horizontal adjustment</doc>
            <type name="Adjustment" c:type="GtkAdjustment*"/>
          </parameter>
          <parameter name="vadjustment"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">vertical adjustment</doc>
            <type name="Adjustment" c:type="GtkAdjustment*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="add_with_viewport"
              c:identifier="gtk_scrolled_window_add_with_viewport">
        <doc xml:whitespace="preserve">Used to add children without native scrolling capabilities. This
is simply a convenience function; it is equivalent to adding the
unscrollable child to a viewport, then adding the viewport to the
scrolled window. If a child has native scrolling, use
gtk_container_add() instead of this function.
The viewport scrolls the child by moving its #GdkWindow, and takes
the size of the child to be the size of its toplevel #GdkWindow. 
This will be very wrong for most widgets that support native scrolling;
for example, if you add a widget such as #GtkTreeView with a viewport,
the whole widget will scroll, including the column headings. Thus, 
widgets with native scrolling support should not be used with the 
#GtkViewport proxy.
A widget supports scrolling natively if the 
set_scroll_adjustments_signal field in #GtkWidgetClass is non-zero,
i.e. has been filled in with a valid signal identifier.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="child" transfer-ownership="none">
            <doc xml:whitespace="preserve">the widget you want to scroll</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_hadjustment"
              c:identifier="gtk_scrolled_window_get_hadjustment">
        <doc xml:whitespace="preserve">Returns the horizontal scrollbar's adjustment, used to connect the
horizontal scrollbar to the child widget's horizontal scroll
functionality.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the horizontal #GtkAdjustment</doc>
          <type name="Adjustment" c:type="GtkAdjustment*"/>
        </return-value>
      </method>
      <method name="get_hscrollbar"
              c:identifier="gtk_scrolled_window_get_hscrollbar"
              version="2.8">
        <doc xml:whitespace="preserve">Returns the horizontal scrollbar of @scrolled_window.
or %NULL if it does not have one.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the horizontal scrollbar of the scrolled window,</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
      </method>
      <method name="get_placement"
              c:identifier="gtk_scrolled_window_get_placement">
        <doc xml:whitespace="preserve">Gets the placement of the contents with respect to the scrollbars
for the scrolled window. See gtk_scrolled_window_set_placement().
See also gtk_scrolled_window_set_placement() and
gtk_scrolled_window_unset_placement().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the current placement value.</doc>
          <type name="CornerType" c:type="GtkCornerType"/>
        </return-value>
      </method>
      <method name="get_policy" c:identifier="gtk_scrolled_window_get_policy">
        <doc xml:whitespace="preserve">Retrieves the current policy values for the horizontal and vertical
scrollbars. See gtk_scrolled_window_set_policy().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="hscrollbar_policy" transfer-ownership="none">
            <doc xml:whitespace="preserve">location to store the policy for the horizontal scrollbar, or %NULL.</doc>
            <type name="PolicyType" c:type="GtkPolicyType*"/>
          </parameter>
          <parameter name="vscrollbar_policy" transfer-ownership="none">
            <doc xml:whitespace="preserve">location to store the policy for the vertical scrollbar, or %NULL.</doc>
            <type name="PolicyType" c:type="GtkPolicyType*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_shadow_type"
              c:identifier="gtk_scrolled_window_get_shadow_type">
        <doc xml:whitespace="preserve">Gets the shadow type of the scrolled window. See 
gtk_scrolled_window_set_shadow_type().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the current shadow type</doc>
          <type name="ShadowType" c:type="GtkShadowType"/>
        </return-value>
      </method>
      <method name="get_vadjustment"
              c:identifier="gtk_scrolled_window_get_vadjustment">
        <doc xml:whitespace="preserve">Returns the vertical scrollbar's adjustment, used to connect the
vertical scrollbar to the child widget's vertical scroll functionality.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the vertical #GtkAdjustment</doc>
          <type name="Adjustment" c:type="GtkAdjustment*"/>
        </return-value>
      </method>
      <method name="get_vscrollbar"
              c:identifier="gtk_scrolled_window_get_vscrollbar"
              version="2.8">
        <doc xml:whitespace="preserve">Returns the vertical scrollbar of @scrolled_window.
or %NULL if it does not have one.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the vertical scrollbar of the scrolled window,</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
      </method>
      <method name="set_hadjustment"
              c:identifier="gtk_scrolled_window_set_hadjustment">
        <doc xml:whitespace="preserve">Sets the #GtkAdjustment for the horizontal scrollbar.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="hadjustment" transfer-ownership="none">
            <doc xml:whitespace="preserve">horizontal scroll adjustment</doc>
            <type name="Adjustment" c:type="GtkAdjustment*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_placement"
              c:identifier="gtk_scrolled_window_set_placement">
        <doc xml:whitespace="preserve">Sets the placement of the contents with respect to the scrollbars
for the scrolled window.
The default is %GTK_CORNER_TOP_LEFT, meaning the child is
in the top left, with the scrollbars underneath and to the right.
Other values in #GtkCornerType are %GTK_CORNER_TOP_RIGHT,
%GTK_CORNER_BOTTOM_LEFT, and %GTK_CORNER_BOTTOM_RIGHT.
See also gtk_scrolled_window_get_placement() and
gtk_scrolled_window_unset_placement().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="window_placement" transfer-ownership="none">
            <doc xml:whitespace="preserve">position of the child window</doc>
            <type name="CornerType" c:type="GtkCornerType"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_policy" c:identifier="gtk_scrolled_window_set_policy">
        <doc xml:whitespace="preserve">Sets the scrollbar policy for the horizontal and vertical scrollbars.
The policy determines when the scrollbar should appear; it is a value
from the #GtkPolicyType enumeration. If %GTK_POLICY_ALWAYS, the
scrollbar is always present; if %GTK_POLICY_NEVER, the scrollbar is
never present; if %GTK_POLICY_AUTOMATIC, the scrollbar is present only
if needed (that is, if the slider part of the bar would be smaller
than the trough - the display is larger than the page size).</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="hscrollbar_policy" transfer-ownership="none">
            <doc xml:whitespace="preserve">policy for horizontal bar</doc>
            <type name="PolicyType" c:type="GtkPolicyType"/>
          </parameter>
          <parameter name="vscrollbar_policy" transfer-ownership="none">
            <doc xml:whitespace="preserve">policy for vertical bar</doc>
            <type name="PolicyType" c:type="GtkPolicyType"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_shadow_type"
              c:identifier="gtk_scrolled_window_set_shadow_type">
        <doc xml:whitespace="preserve">Changes the type of shadow drawn around the contents of</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="type" transfer-ownership="none">
            <doc xml:whitespace="preserve">kind of shadow to draw around scrolled window contents</doc>
            <type name="ShadowType" c:type="GtkShadowType"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_vadjustment"
              c:identifier="gtk_scrolled_window_set_vadjustment">
        <doc xml:whitespace="preserve">Sets the #GtkAdjustment for the vertical scrollbar.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="vadjustment" transfer-ownership="none">
            <doc xml:whitespace="preserve">vertical scroll adjustment</doc>
            <type name="Adjustment" c:type="GtkAdjustment*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unset_placement"
              c:identifier="gtk_scrolled_window_unset_placement"
              version="2.10">
        <doc xml:whitespace="preserve">Unsets the placement of the contents with respect to the scrollbars
for the scrolled window. If no window placement is set for a scrolled
window, it obeys the "gtk-scrolled-window-placement" XSETTING.
See also gtk_scrolled_window_set_placement() and
gtk_scrolled_window_get_placement().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <property name="hadjustment"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="Adjustment"/>
      </property>
      <property name="hscrollbar-policy"
                writable="1"
                transfer-ownership="none">
        <type name="PolicyType"/>
      </property>
      <property name="shadow-type" writable="1" transfer-ownership="none">
        <type name="ShadowType"/>
      </property>
      <property name="vadjustment"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="Adjustment"/>
      </property>
      <property name="vscrollbar-policy"
                writable="1"
                transfer-ownership="none">
        <type name="PolicyType"/>
      </property>
      <property name="window-placement" writable="1" transfer-ownership="none">
        <type name="CornerType"/>
      </property>
      <property name="window-placement-set"
                version="2.10"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Whether "window-placement" should be used to determine the location 
of the contents with respect to the scrollbars. Otherwise, the 
"gtk-scrolled-window-placement" setting is used.</doc>
        <type name="gboolean"/>
      </property>
      <field name="container">
        <type name="Bin" c:type="GtkBin"/>
      </field>
      <field name="priv">
        <type name="ScrolledWindowPrivate" c:type="GtkScrolledWindowPrivate*"/>
      </field>
      <glib:signal name="move-focus-out">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="DirectionType"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="scroll-child">
        <return-value transfer-ownership="none">
          <type name="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="ScrollType"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="gboolean"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="ScrolledWindowClass"
            c:type="GtkScrolledWindowClass"
            glib:is-gtype-struct-for="ScrolledWindow">
      <field name="parent_class">
        <type name="BinClass" c:type="GtkBinClass"/>
      </field>
      <field name="scrollbar_spacing">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="scroll_child">
        <callback name="scroll_child">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="scrolled_window" transfer-ownership="none">
              <type name="ScrolledWindow" c:type="GtkScrolledWindow*"/>
            </parameter>
            <parameter name="scroll" transfer-ownership="none">
              <type name="ScrollType" c:type="GtkScrollType"/>
            </parameter>
            <parameter name="horizontal" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="move_focus_out">
        <callback name="move_focus_out">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="scrolled_window" transfer-ownership="none">
              <type name="ScrolledWindow" c:type="GtkScrolledWindow*"/>
            </parameter>
            <parameter name="direction" transfer-ownership="none">
              <type name="DirectionType" c:type="GtkDirectionType"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_gtk_reserved1" introspectable="0">
        <callback name="_gtk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved2" introspectable="0">
        <callback name="_gtk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved3" introspectable="0">
        <callback name="_gtk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved4" introspectable="0">
        <callback name="_gtk_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="ScrolledWindowPrivate"
            c:type="GtkScrolledWindowPrivate"
            disguised="1">
    </record>
    <record name="SelectionData"
            c:type="GtkSelectionData"
            glib:type-name="GtkSelectionData"
            glib:get-type="gtk_selection_data_get_type"
            c:symbol-prefix="selection_data">
      <field name="selection" writable="1">
        <type name="Gdk.Atom" c:type="GdkAtom"/>
      </field>
      <field name="target" writable="1">
        <type name="Gdk.Atom" c:type="GdkAtom"/>
      </field>
      <field name="type" writable="1">
        <type name="Gdk.Atom" c:type="GdkAtom"/>
      </field>
      <field name="format" writable="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="data" writable="1">
        <type name="guint8" c:type="guchar*"/>
      </field>
      <field name="length" writable="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="display" writable="1">
        <type name="Gdk.Display" c:type="GdkDisplay*"/>
      </field>
      <method name="copy" c:identifier="gtk_selection_data_copy">
        <doc xml:whitespace="preserve">Makes a copy of a #GtkSelectionData structure and its data.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a pointer to a copy of @data.</doc>
          <type name="SelectionData" c:type="GtkSelectionData*"/>
        </return-value>
      </method>
      <method name="free" c:identifier="gtk_selection_data_free">
        <doc xml:whitespace="preserve">Frees a #GtkSelectionData structure returned from
gtk_selection_data_copy().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="get_data"
              c:identifier="gtk_selection_data_get_data"
              version="2.14">
        <doc xml:whitespace="preserve">Retrieves the raw data of the selection.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the raw data of the selection.</doc>
          <type name="guint8" c:type="guchar*"/>
        </return-value>
      </method>
      <method name="get_data_type"
              c:identifier="gtk_selection_data_get_data_type"
              version="2.14"
              introspectable="0">
        <doc xml:whitespace="preserve">Retrieves the data type of the selection.</doc>
        <return-value>
          <doc xml:whitespace="preserve">the data type of the selection.</doc>
          <type name="Gdk.Atom" c:type="GdkAtom"/>
        </return-value>
      </method>
      <method name="get_display"
              c:identifier="gtk_selection_data_get_display"
              version="2.14">
        <doc xml:whitespace="preserve">Retrieves the display of the selection.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the display of the selection.</doc>
          <type name="Gdk.Display" c:type="GdkDisplay*"/>
        </return-value>
      </method>
      <method name="get_format"
              c:identifier="gtk_selection_data_get_format"
              version="2.14">
        <doc xml:whitespace="preserve">Retrieves the format of the selection.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the format of the selection.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="get_length"
              c:identifier="gtk_selection_data_get_length"
              version="2.14">
        <doc xml:whitespace="preserve">Retrieves the length of the raw data of the selection.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the length of the data of the selection.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="get_pixbuf"
              c:identifier="gtk_selection_data_get_pixbuf"
              version="2.6">
        <doc xml:whitespace="preserve">Gets the contents of the selection data as a #GdkPixbuf.
image type and it could be converted to a #GdkPixbuf, a 
newly allocated pixbuf is returned, otherwise %NULL.
If the result is non-%NULL it must be freed with g_object_unref().</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">if the selection data contained a recognized</doc>
          <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
      </method>
      <method name="get_selection"
              c:identifier="gtk_selection_data_get_selection"
              version="2.16"
              introspectable="0">
        <doc xml:whitespace="preserve">Retrieves the selection #GdkAtom of the selection data.</doc>
        <return-value>
          <doc xml:whitespace="preserve">the selection #GdkAtom of the selection data.</doc>
          <type name="Gdk.Atom" c:type="GdkAtom"/>
        </return-value>
      </method>
      <method name="get_target"
              c:identifier="gtk_selection_data_get_target"
              version="2.14"
              introspectable="0">
        <doc xml:whitespace="preserve">Retrieves the target of the selection.</doc>
        <return-value>
          <doc xml:whitespace="preserve">the target of the selection.</doc>
          <type name="Gdk.Atom" c:type="GdkAtom"/>
        </return-value>
      </method>
      <method name="get_targets" c:identifier="gtk_selection_data_get_targets">
        <doc xml:whitespace="preserve">Gets the contents of @selection_data as an array of targets.
This can be used to interpret the results of getting
the standard TARGETS target that is always supplied for
any selection.
array of targets, otherwise %FALSE.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if @selection_data contains a valid</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="targets" transfer-ownership="none">
            <doc xml:whitespace="preserve">location to store an array of targets. The result stored here must be freed with g_free().</doc>
            <type name="Gdk.Atom" c:type="GdkAtom**"/>
          </parameter>
          <parameter name="n_atoms" transfer-ownership="none">
            <doc xml:whitespace="preserve">location to store number of items in @targets.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_text" c:identifier="gtk_selection_data_get_text">
        <doc xml:whitespace="preserve">Gets the contents of the selection data as a UTF-8 string.
text type and it could be converted to UTF-8, a newly allocated
string containing the converted text, otherwise %NULL.
If the result is non-%NULL it must be freed with g_free().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">if the selection data contained a recognized</doc>
          <type name="guint8" c:type="guchar*"/>
        </return-value>
      </method>
      <method name="get_uris"
              c:identifier="gtk_selection_data_get_uris"
              version="2.6">
        <doc xml:whitespace="preserve">Gets the contents of the selection data as array of URIs.
the selection data contains a list of
URIs, a newly allocated %NULL-terminated string array
containing the URIs, otherwise %NULL. If the result is
non-%NULL it must be freed with g_strfreev().</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">if</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
      </method>
      <method name="set" c:identifier="gtk_selection_data_set">
        <doc xml:whitespace="preserve">Stores new data into a #GtkSelectionData object. Should
&lt;emphasis&gt;only&lt;/emphasis&gt; be called from a selection handler callback.
Zero-terminates the stored data.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="type" transfer-ownership="none">
            <doc xml:whitespace="preserve">the type of selection data</doc>
            <type name="Gdk.Atom" c:type="GdkAtom"/>
          </parameter>
          <parameter name="format" transfer-ownership="none">
            <doc xml:whitespace="preserve">format (number of bits in a unit)</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:whitespace="preserve">pointer to the data (will be copied)</doc>
            <type name="guint8" c:type="guchar*"/>
          </parameter>
          <parameter name="length" transfer-ownership="none">
            <doc xml:whitespace="preserve">length of the data</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_pixbuf"
              c:identifier="gtk_selection_data_set_pixbuf"
              version="2.6">
        <doc xml:whitespace="preserve">Sets the contents of the selection from a #GdkPixbuf
The pixbuf is converted to the form determined by
otherwise %FALSE.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the selection was successfully set,</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="pixbuf" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GdkPixbuf</doc>
            <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_text" c:identifier="gtk_selection_data_set_text">
        <doc xml:whitespace="preserve">Sets the contents of the selection from a UTF-8 encoded string.
The string is converted to the form determined by
otherwise %FALSE.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the selection was successfully set,</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="str" transfer-ownership="none">
            <doc xml:whitespace="preserve">a UTF-8 string</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <doc xml:whitespace="preserve">the length of @str, or -1 if @str is nul-terminated.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_uris"
              c:identifier="gtk_selection_data_set_uris"
              version="2.6">
        <doc xml:whitespace="preserve">Sets the contents of the selection from a list of URIs.
The string is converted to the form determined by
otherwise %FALSE.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the selection was successfully set,</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="uris" transfer-ownership="none">
            <doc xml:whitespace="preserve">a %NULL-terminated array of strings holding URIs</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
        </parameters>
      </method>
      <method name="targets_include_image"
              c:identifier="gtk_selection_data_targets_include_image"
              version="2.6">
        <doc xml:whitespace="preserve">Given a #GtkSelectionData object holding a list of targets,
determines if any of the targets in @targets can be used to
provide a #GdkPixbuf.
and a suitable target for images is included, otherwise %FALSE.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if @selection_data holds a list of targets,</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="writable" transfer-ownership="none">
            <doc xml:whitespace="preserve">whether to accept only targets for which GTK+ knows how to convert a pixbuf into the format</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="targets_include_rich_text"
              c:identifier="gtk_selection_data_targets_include_rich_text"
              version="2.10">
        <doc xml:whitespace="preserve">Given a #GtkSelectionData object holding a list of targets,
determines if any of the targets in @targets can be used to
provide rich text.
and a suitable target for rich text is included,
otherwise %FALSE.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if @selection_data holds a list of targets,</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="buffer" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkTextBuffer</doc>
            <type name="TextBuffer" c:type="GtkTextBuffer*"/>
          </parameter>
        </parameters>
      </method>
      <method name="targets_include_text"
              c:identifier="gtk_selection_data_targets_include_text">
        <doc xml:whitespace="preserve">Given a #GtkSelectionData object holding a list of targets,
determines if any of the targets in @targets can be used to
provide text.
and a suitable target for text is included, otherwise %FALSE.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if @selection_data holds a list of targets,</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="targets_include_uri"
              c:identifier="gtk_selection_data_targets_include_uri"
              version="2.10">
        <doc xml:whitespace="preserve">Given a #GtkSelectionData object holding a list of targets,
determines if any of the targets in @targets can be used to
provide a list or URIs.
and a suitable target for URI lists is included, otherwise %FALSE.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if @selection_data holds a list of targets,</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
    </record>
    <enumeration name="SelectionMode"
                 glib:type-name="GtkSelectionMode"
                 glib:get-type="gtk_selection_mode_get_type"
                 c:type="GtkSelectionMode">
      <member name="none"
              value="0"
              c:identifier="GTK_SELECTION_NONE"
              glib:nick="none"/>
      <member name="single"
              value="1"
              c:identifier="GTK_SELECTION_SINGLE"
              glib:nick="single"/>
      <member name="browse"
              value="2"
              c:identifier="GTK_SELECTION_BROWSE"
              glib:nick="browse"/>
      <member name="multiple"
              value="3"
              c:identifier="GTK_SELECTION_MULTIPLE"
              glib:nick="multiple"/>
    </enumeration>
    <enumeration name="SensitivityType"
                 glib:type-name="GtkSensitivityType"
                 glib:get-type="gtk_sensitivity_type_get_type"
                 c:type="GtkSensitivityType">
      <doc xml:whitespace="preserve">Determines how GTK+ handles the sensitivity of stepper arrows
at the end of range widgets.</doc>
      <member name="auto"
              value="0"
              c:identifier="GTK_SENSITIVITY_AUTO"
              glib:nick="auto"/>
      <member name="on"
              value="1"
              c:identifier="GTK_SENSITIVITY_ON"
              glib:nick="on"/>
      <member name="off"
              value="2"
              c:identifier="GTK_SENSITIVITY_OFF"
              glib:nick="off"/>
    </enumeration>
    <class name="Separator"
           c:symbol-prefix="separator"
           c:type="GtkSeparator"
           parent="Widget"
           glib:type-name="GtkSeparator"
           glib:get-type="gtk_separator_get_type"
           glib:type-struct="SeparatorClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Buildable"/>
      <implements name="Orientable"/>
      <implements name="SizeRequest"/>
      <constructor name="new" c:identifier="gtk_separator_new" version="3.0">
        <doc xml:whitespace="preserve">Creates a new #GtkSeparator with the given orientation.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a new #GtkSeparator.</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="orientation" transfer-ownership="none">
            <doc xml:whitespace="preserve">the separator's orientation.</doc>
            <type name="Orientation" c:type="GtkOrientation"/>
          </parameter>
        </parameters>
      </constructor>
      <field name="widget">
        <type name="Widget" c:type="GtkWidget"/>
      </field>
      <field name="priv">
        <type name="SeparatorPrivate" c:type="GtkSeparatorPrivate*"/>
      </field>
    </class>
    <record name="SeparatorClass"
            c:type="GtkSeparatorClass"
            glib:is-gtype-struct-for="Separator">
      <field name="parent_class">
        <type name="WidgetClass" c:type="GtkWidgetClass"/>
      </field>
    </record>
    <class name="SeparatorMenuItem"
           c:symbol-prefix="separator_menu_item"
           c:type="GtkSeparatorMenuItem"
           parent="MenuItem"
           glib:type-name="GtkSeparatorMenuItem"
           glib:get-type="gtk_separator_menu_item_get_type"
           glib:type-struct="SeparatorMenuItemClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Activatable"/>
      <implements name="Buildable"/>
      <implements name="SizeRequest"/>
      <constructor name="new" c:identifier="gtk_separator_menu_item_new">
        <doc xml:whitespace="preserve">Creates a new #GtkSeparatorMenuItem.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a new #GtkSeparatorMenuItem.</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <field name="menu_item">
        <type name="MenuItem" c:type="GtkMenuItem"/>
      </field>
    </class>
    <record name="SeparatorMenuItemClass"
            c:type="GtkSeparatorMenuItemClass"
            glib:is-gtype-struct-for="SeparatorMenuItem">
      <field name="parent_class">
        <type name="MenuItemClass" c:type="GtkMenuItemClass"/>
      </field>
    </record>
    <record name="SeparatorPrivate" c:type="GtkSeparatorPrivate" disguised="1">
    </record>
    <class name="SeparatorToolItem"
           c:symbol-prefix="separator_tool_item"
           c:type="GtkSeparatorToolItem"
           parent="ToolItem"
           glib:type-name="GtkSeparatorToolItem"
           glib:get-type="gtk_separator_tool_item_get_type"
           glib:type-struct="SeparatorToolItemClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Activatable"/>
      <implements name="Buildable"/>
      <implements name="SizeRequest"/>
      <constructor name="new"
                   c:identifier="gtk_separator_tool_item_new"
                   version="2.4">
        <doc xml:whitespace="preserve">Create a new #GtkSeparatorToolItem</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the new #GtkSeparatorToolItem</doc>
          <type name="ToolItem" c:type="GtkToolItem*"/>
        </return-value>
      </constructor>
      <method name="get_draw"
              c:identifier="gtk_separator_tool_item_get_draw"
              version="2.4">
        <doc xml:whitespace="preserve">Returns whether @item is drawn as a line, or just blank. 
See gtk_separator_tool_item_set_draw().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if @item is drawn as a line, or just blank.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="set_draw"
              c:identifier="gtk_separator_tool_item_set_draw"
              version="2.4">
        <doc xml:whitespace="preserve">Whether @item is drawn as a vertical line, or just blank.
Setting this to %FALSE along with gtk_tool_item_set_expand() is useful
to create an item that forces following items to the end of the toolbar.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="draw" transfer-ownership="none">
            <doc xml:whitespace="preserve">whether @item is drawn as a vertical line</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="draw" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <field name="parent">
        <type name="ToolItem" c:type="GtkToolItem"/>
      </field>
      <field name="priv">
        <type name="SeparatorToolItemPrivate"
              c:type="GtkSeparatorToolItemPrivate*"/>
      </field>
    </class>
    <record name="SeparatorToolItemClass"
            c:type="GtkSeparatorToolItemClass"
            glib:is-gtype-struct-for="SeparatorToolItem">
      <field name="parent_class">
        <type name="ToolItemClass" c:type="GtkToolItemClass"/>
      </field>
      <field name="_gtk_reserved1" introspectable="0">
        <callback name="_gtk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved2" introspectable="0">
        <callback name="_gtk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved3" introspectable="0">
        <callback name="_gtk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved4" introspectable="0">
        <callback name="_gtk_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="SeparatorToolItemPrivate"
            c:type="GtkSeparatorToolItemPrivate"
            disguised="1">
    </record>
    <class name="Settings"
           c:symbol-prefix="settings"
           c:type="GtkSettings"
           parent="GObject.Object"
           glib:type-name="GtkSettings"
           glib:get-type="gtk_settings_get_type"
           glib:type-struct="SettingsClass">
      <function name="get_default" c:identifier="gtk_settings_get_default">
        <doc xml:whitespace="preserve">Gets the #GtkSettings object for the default GDK screen, creating
it if necessary. See gtk_settings_get_for_screen().
screen, then returns %NULL.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GtkSettings object. If there is no default</doc>
          <type name="Settings" c:type="GtkSettings*"/>
        </return-value>
      </function>
      <function name="get_for_screen"
                c:identifier="gtk_settings_get_for_screen"
                version="2.2">
        <doc xml:whitespace="preserve">Gets the #GtkSettings object for @screen, creating it if necessary.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GtkSettings object.</doc>
          <type name="Settings" c:type="GtkSettings*"/>
        </return-value>
        <parameters>
          <parameter name="screen" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GdkScreen.</doc>
            <type name="Gdk.Screen" c:type="GdkScreen*"/>
          </parameter>
        </parameters>
      </function>
      <function name="install_property"
                c:identifier="gtk_settings_install_property">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="pspec" transfer-ownership="none">
            <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
          </parameter>
        </parameters>
      </function>
      <function name="install_property_parser"
                c:identifier="gtk_settings_install_property_parser"
                introspectable="0">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="pspec" transfer-ownership="none">
            <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
          </parameter>
          <parameter name="parser" transfer-ownership="none">
            <type name="RcPropertyParser" c:type="GtkRcPropertyParser"/>
          </parameter>
        </parameters>
      </function>
      <method name="set_double_property"
              c:identifier="gtk_settings_set_double_property">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="v_double" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="origin" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_long_property"
              c:identifier="gtk_settings_set_long_property">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="v_long" transfer-ownership="none">
            <type name="glong" c:type="glong"/>
          </parameter>
          <parameter name="origin" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_property_value"
              c:identifier="gtk_settings_set_property_value">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="svalue" transfer-ownership="none">
            <type name="SettingsValue" c:type="GtkSettingsValue*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_string_property"
              c:identifier="gtk_settings_set_string_property">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="v_string" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="origin" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="color-hash" version="2.10" transfer-ownership="none">
        <doc xml:whitespace="preserve">Holds a hash table representation of the #GtkSettings:gtk-color-scheme 
setting, mapping color names to #GdkColor&lt;!-- --&gt;s.</doc>
        <type name="GLib.HashTable">
          <type name="gpointer" c:type="gpointer"/>
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </property>
      <property name="gtk-alternative-button-order"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="gtk-alternative-sort-arrows"
                version="2.12"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Controls the direction of the sort indicators in sorted list and tree
views. By default an arrow pointing down means the column is sorted
in ascending order. When set to %TRUE, this order will be inverted.</doc>
        <type name="gboolean"/>
      </property>
      <property name="gtk-application-prefer-dark-theme"
                version="2.22"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Whether the application prefers to use a dark theme. If a GTK+ theme
includes a dark variant, it will be used instead of the configured
theme.
Some applications benefit from minimizing the amount of light pollution that
interferes with the content. Good candidates for dark themes are photo and
video editors that make the actual content get all the attention and minimize
the distraction of the chrome.
Dark themes should not be used for documents, where large spaces are white/light
and the dark chrome creates too much contrast (web browser, text editor...).</doc>
        <type name="gboolean"/>
      </property>
      <property name="gtk-auto-mnemonics"
                version="2.20"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Whether mnemonics should be automatically shown and hidden when the user
presses the mnemonic activator.</doc>
        <type name="gboolean"/>
      </property>
      <property name="gtk-color-scheme"
                version="2.10"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">A palette of named colors for use in themes. The format of the string is
&lt;programlisting&gt;
...
&lt;/programlisting&gt;
Color names must be acceptable as identifiers in the 
&lt;link linkend="gtk-Resource-Files"&gt;gtkrc&lt;/link&gt; syntax, and
color specifications must be in the format accepted by
gdk_color_parse().
Note that due to the way the color tables from different sources are
merged, color specifications will be converted to hexadecimal form
when getting this property.
Starting with GTK+ 2.12, the entries can alternatively be separated
by ';' instead of newlines:
&lt;programlisting&gt;
&lt;/programlisting&gt;</doc>
        <type name="utf8"/>
      </property>
      <property name="gtk-cursor-blink" writable="1" transfer-ownership="none">
        <doc xml:whitespace="preserve">Whether the cursor should blink. 
Also see the #GtkSettings:gtk-cursor-blink-timeout setting, 
which allows more flexible control over cursor blinking.</doc>
        <type name="gboolean"/>
      </property>
      <property name="gtk-cursor-blink-time"
                writable="1"
                transfer-ownership="none">
        <type name="gint"/>
      </property>
      <property name="gtk-cursor-blink-timeout"
                version="2.12"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Time after which the cursor stops blinking, in seconds.
The timer is reset after each user interaction.
Setting this to zero has the same effect as setting
#GtkSettings:gtk-cursor-blink to %FALSE.</doc>
        <type name="gint"/>
      </property>
      <property name="gtk-cursor-theme-name"
                writable="1"
                transfer-ownership="none">
        <type name="utf8"/>
      </property>
      <property name="gtk-cursor-theme-size"
                writable="1"
                transfer-ownership="none">
        <type name="gint"/>
      </property>
      <property name="gtk-dnd-drag-threshold"
                writable="1"
                transfer-ownership="none">
        <type name="gint"/>
      </property>
      <property name="gtk-double-click-distance"
                writable="1"
                transfer-ownership="none">
        <type name="gint"/>
      </property>
      <property name="gtk-double-click-time"
                writable="1"
                transfer-ownership="none">
        <type name="gint"/>
      </property>
      <property name="gtk-enable-accels"
                version="2.12"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Whether menu items should have visible accelerators which can be
activated.</doc>
        <type name="gboolean"/>
      </property>
      <property name="gtk-enable-animations"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="gtk-enable-event-sounds"
                version="2.14"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Whether to play any event sounds at all.
See the &lt;ulink url="http://www.freedesktop.org/wiki/Specifications/sound-theme-spec"&gt;Sound Theme spec&lt;/ulink&gt; 
for more information on event sounds and sound themes.
GTK+ itself does not support event sounds, you have to use a loadable 
module like the one that comes with libcanberra.</doc>
        <type name="gboolean"/>
      </property>
      <property name="gtk-enable-input-feedback-sounds"
                version="2.14"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Whether to play event sounds as feedback to user input.
See the &lt;ulink url="http://www.freedesktop.org/wiki/Specifications/sound-theme-spec"&gt;Sound Theme spec&lt;/ulink&gt; 
for more information on event sounds and sound themes.
GTK+ itself does not support event sounds, you have to use a loadable 
module like the one that comes with libcanberra.</doc>
        <type name="gboolean"/>
      </property>
      <property name="gtk-enable-mnemonics"
                version="2.12"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Whether labels and menu items should have visible mnemonics which
can be activated.</doc>
        <type name="gboolean"/>
      </property>
      <property name="gtk-enable-tooltips"
                version="2.14"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Whether tooltips should be shown on widgets.</doc>
        <type name="gboolean"/>
      </property>
      <property name="gtk-error-bell"
                version="2.12"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">When %TRUE, keyboard navigation and other input-related errors
will cause a beep. Since the error bell is implemented using
gdk_window_beep(), the windowing system may offer ways to
configure the error bell in many ways, such as flashing the
window or similar visual effects.</doc>
        <type name="gboolean"/>
      </property>
      <property name="gtk-fallback-icon-theme"
                writable="1"
                transfer-ownership="none">
        <type name="utf8"/>
      </property>
      <property name="gtk-file-chooser-backend"
                writable="1"
                transfer-ownership="none">
        <type name="utf8"/>
      </property>
      <property name="gtk-font-name" writable="1" transfer-ownership="none">
        <type name="utf8"/>
      </property>
      <property name="gtk-fontconfig-timestamp"
                writable="1"
                transfer-ownership="none">
        <type name="guint"/>
      </property>
      <property name="gtk-icon-sizes" writable="1" transfer-ownership="none">
        <doc xml:whitespace="preserve">A list of icon sizes. The list is separated by colons, and
item has the form:
&lt;replaceable&gt;size-name&lt;/replaceable&gt; = &lt;replaceable&gt;width&lt;/replaceable&gt; , &lt;replaceable&gt;height&lt;/replaceable&gt;
E.g. "gtk-menu=16,16:gtk-button=20,20:gtk-dialog=48,48". 
gtk-button, gtk-small-toolbar, gtk-large-toolbar, gtk-dnd, 
gtk-dialog. Applications can register their own named icon 
sizes with gtk_icon_size_register().</doc>
        <type name="utf8"/>
      </property>
      <property name="gtk-icon-theme-name"
                writable="1"
                transfer-ownership="none">
        <type name="utf8"/>
      </property>
      <property name="gtk-im-module" writable="1" transfer-ownership="none">
        <doc xml:whitespace="preserve">Which IM (input method) module should be used by default. This is the 
input method that will be used if the user has not explicitly chosen 
another input method from the IM context menu.  
See #GtkIMContext and see the #GtkSettings:gtk-show-input-method-menu property.</doc>
        <type name="utf8"/>
      </property>
      <property name="gtk-key-theme-name"
                writable="1"
                transfer-ownership="none">
        <type name="utf8"/>
      </property>
      <property name="gtk-keynav-cursor-only"
                version="2.12"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">When %TRUE, keyboard navigation should be able to reach all widgets
by using the cursor keys only. Tab, Shift etc. keys can't be expected
to be present on the used input device.</doc>
        <type name="gboolean"/>
      </property>
      <property name="gtk-keynav-wrap-around"
                version="2.12"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">When %TRUE, some widgets will wrap around when doing keyboard
navigation, such as menus, menubars and notebooks.</doc>
        <type name="gboolean"/>
      </property>
      <property name="gtk-menu-bar-accel"
                writable="1"
                transfer-ownership="none">
        <type name="utf8"/>
      </property>
      <property name="gtk-modules" writable="1" transfer-ownership="none">
        <type name="utf8"/>
      </property>
      <property name="gtk-print-backends"
                version="2.10"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">A comma-separated list of print backends to use in the print
dialog. Available print backends depend on the GTK+ installation,
and may include "file", "cups", "lpr" or "papi".</doc>
        <type name="utf8"/>
      </property>
      <property name="gtk-print-preview-command"
                version="2.10"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">A command to run for displaying the print preview. The command
should contain a %f placeholder, which will get replaced by
the path to the pdf file. The command may also contain a %s
placeholder, which will get replaced by the path to a file
containing the print settings in the format produced by 
gtk_print_settings_to_file().
The preview application is responsible for removing the pdf file
and the print settings file when it is done.</doc>
        <type name="utf8"/>
      </property>
      <property name="gtk-recent-files-limit"
                version="2.12"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The number of recently used files that should be displayed by default by
#GtkRecentChooser implementations and by the #GtkFileChooser. A value of
-1 means every recently used file stored.</doc>
        <type name="gint"/>
      </property>
      <property name="gtk-recent-files-max-age"
                version="2.14"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The maximum age, in days, of the items inside the recently used
resources list. Items older than this setting will be excised
from the list. If set to 0, the list will always be empty; if
set to -1, no item will be removed.</doc>
        <type name="gint"/>
      </property>
      <property name="gtk-show-input-method-menu"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="gtk-show-unicode-menu"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="gtk-sound-theme-name"
                version="2.14"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The XDG sound theme to use for event sounds.
See the &lt;ulink url="http://www.freedesktop.org/wiki/Specifications/sound-theme-spec"&gt;Sound Theme spec&lt;/ulink&gt; 
for more information on event sounds and sound themes.
GTK+ itself does not support event sounds, you have to use a loadable 
module like the one that comes with libcanberra.</doc>
        <type name="utf8"/>
      </property>
      <property name="gtk-split-cursor" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="gtk-theme-name" writable="1" transfer-ownership="none">
        <type name="utf8"/>
      </property>
      <property name="gtk-timeout-expand"
                writable="1"
                transfer-ownership="none">
        <type name="gint"/>
      </property>
      <property name="gtk-timeout-initial"
                writable="1"
                transfer-ownership="none">
        <type name="gint"/>
      </property>
      <property name="gtk-timeout-repeat"
                writable="1"
                transfer-ownership="none">
        <type name="gint"/>
      </property>
      <property name="gtk-toolbar-icon-size"
                writable="1"
                transfer-ownership="none">
        <type name="IconSize"/>
      </property>
      <property name="gtk-toolbar-style"
                writable="1"
                transfer-ownership="none">
        <type name="ToolbarStyle"/>
      </property>
      <property name="gtk-tooltip-browse-mode-timeout"
                version="2.12"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Amount of time, in milliseconds, after which the browse mode
will be disabled.
See #GtkSettings:gtk-tooltip-browse-timeout for more information
about browse mode.</doc>
        <type name="gint"/>
      </property>
      <property name="gtk-tooltip-browse-timeout"
                version="2.12"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Controls the time after which tooltips will appear when
browse mode is enabled, in milliseconds.
Browse mode is enabled when the mouse pointer moves off an object
where a tooltip was currently being displayed. If the mouse pointer
hits another object before the browse mode timeout expires (see
#GtkSettings:gtk-tooltip-browse-mode-timeout), it will take the 
amount of milliseconds specified by this setting to popup the tooltip
for the new object.</doc>
        <type name="gint"/>
      </property>
      <property name="gtk-tooltip-timeout"
                version="2.12"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Time, in milliseconds, after which a tooltip could appear if the
cursor is hovering on top of a widget.</doc>
        <type name="gint"/>
      </property>
      <property name="gtk-touchscreen-mode"
                version="2.10"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">When %TRUE, there are no motion notify events delivered on this screen,
and widgets can't use the pointer hovering them for any essential
functionality.</doc>
        <type name="gboolean"/>
      </property>
      <property name="gtk-xft-antialias"
                writable="1"
                transfer-ownership="none">
        <type name="gint"/>
      </property>
      <property name="gtk-xft-dpi" writable="1" transfer-ownership="none">
        <type name="gint"/>
      </property>
      <property name="gtk-xft-hinting" writable="1" transfer-ownership="none">
        <type name="gint"/>
      </property>
      <property name="gtk-xft-hintstyle"
                writable="1"
                transfer-ownership="none">
        <type name="utf8"/>
      </property>
      <property name="gtk-xft-rgba" writable="1" transfer-ownership="none">
        <type name="utf8"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="queued_settings">
        <type name="GLib.Data" c:type="GData*"/>
      </field>
      <field name="property_values">
        <type name="SettingsPropertyValue" c:type="GtkSettingsPropertyValue*"/>
      </field>
      <field name="rc_context">
        <type name="RcContext" c:type="GtkRcContext*"/>
      </field>
      <field name="screen">
        <type name="Gdk.Screen" c:type="GdkScreen*"/>
      </field>
    </class>
    <record name="SettingsClass"
            c:type="GtkSettingsClass"
            glib:is-gtype-struct-for="Settings">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="SettingsPropertyValue"
            c:type="GtkSettingsPropertyValue"
            disguised="1">
    </record>
    <record name="SettingsValue" c:type="GtkSettingsValue">
      <field name="origin" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="value" writable="1">
        <type name="GObject.Value" c:type="GValue"/>
      </field>
    </record>
    <enumeration name="ShadowType"
                 glib:type-name="GtkShadowType"
                 glib:get-type="gtk_shadow_type_get_type"
                 c:type="GtkShadowType">
      <member name="none"
              value="0"
              c:identifier="GTK_SHADOW_NONE"
              glib:nick="none"/>
      <member name="in" value="1" c:identifier="GTK_SHADOW_IN" glib:nick="in"/>
      <member name="out"
              value="2"
              c:identifier="GTK_SHADOW_OUT"
              glib:nick="out"/>
      <member name="etched_in"
              value="3"
              c:identifier="GTK_SHADOW_ETCHED_IN"
              glib:nick="etched-in"/>
      <member name="etched_out"
              value="4"
              c:identifier="GTK_SHADOW_ETCHED_OUT"
              glib:nick="etched-out"/>
    </enumeration>
    <class name="SizeGroup"
           c:symbol-prefix="size_group"
           c:type="GtkSizeGroup"
           parent="GObject.Object"
           glib:type-name="GtkSizeGroup"
           glib:get-type="gtk_size_group_get_type"
           glib:type-struct="SizeGroupClass">
      <implements name="Buildable"/>
      <constructor name="new" c:identifier="gtk_size_group_new">
        <doc xml:whitespace="preserve">Create a new #GtkSizeGroup.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a newly created #GtkSizeGroup</doc>
          <type name="SizeGroup" c:type="GtkSizeGroup*"/>
        </return-value>
        <parameters>
          <parameter name="mode" transfer-ownership="none">
            <doc xml:whitespace="preserve">the mode for the new size group.</doc>
            <type name="SizeGroupMode" c:type="GtkSizeGroupMode"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="add_widget" c:identifier="gtk_size_group_add_widget">
        <doc xml:whitespace="preserve">Adds a widget to a #GtkSizeGroup. In the future, the requisition
of the widget will be determined as the maximum of its requisition
and the requisition of the other widgets in the size group.
Whether this applies horizontally, vertically, or in both directions
depends on the mode of the size group. See gtk_size_group_set_mode().
When the widget is destroyed or no longer referenced elsewhere, it will 
be removed from the size group.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="widget" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GtkWidget to add</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_ignore_hidden"
              c:identifier="gtk_size_group_get_ignore_hidden"
              version="2.8">
        <doc xml:whitespace="preserve">Returns if invisible widgets are ignored when calculating the size.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if invisible widgets are ignored.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_mode" c:identifier="gtk_size_group_get_mode">
        <doc xml:whitespace="preserve">Gets the current mode of the size group. See gtk_size_group_set_mode().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the current mode of the size group.</doc>
          <type name="SizeGroupMode" c:type="GtkSizeGroupMode"/>
        </return-value>
      </method>
      <method name="get_widgets"
              c:identifier="gtk_size_group_get_widgets"
              version="2.10">
        <doc xml:whitespace="preserve">Returns the list of widgets associated with @size_group.
widgets. The list is owned by GTK+ and should not be modified.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GSList of</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="Widget"/>
          </type>
        </return-value>
      </method>
      <method name="remove_widget" c:identifier="gtk_size_group_remove_widget">
        <doc xml:whitespace="preserve">Removes a widget from a #GtkSizeGroup.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="widget" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GtkWidget to remove</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_ignore_hidden"
              c:identifier="gtk_size_group_set_ignore_hidden"
              version="2.8">
        <doc xml:whitespace="preserve">Sets whether unmapped widgets should be ignored when
calculating the size.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="ignore_hidden" transfer-ownership="none">
            <doc xml:whitespace="preserve">whether unmapped widgets should be ignored when calculating the size</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_mode" c:identifier="gtk_size_group_set_mode">
        <doc xml:whitespace="preserve">Sets the #GtkSizeGroupMode of the size group. The mode of the size
group determines whether the widgets in the size group should
all have the same horizontal requisition (%GTK_SIZE_GROUP_MODE_HORIZONTAL)
all have the same vertical requisition (%GTK_SIZE_GROUP_MODE_VERTICAL),
or should all have the same requisition in both directions
(%GTK_SIZE_GROUP_MODE_BOTH).</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="mode" transfer-ownership="none">
            <doc xml:whitespace="preserve">the mode to set for the size group.</doc>
            <type name="SizeGroupMode" c:type="GtkSizeGroupMode"/>
          </parameter>
        </parameters>
      </method>
      <property name="ignore-hidden"
                version="2.8"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">If %TRUE, unmapped widgets are ignored when determining 
the size of the group.</doc>
        <type name="gboolean"/>
      </property>
      <property name="mode" writable="1" transfer-ownership="none">
        <type name="SizeGroupMode"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="SizeGroupPrivate" c:type="GtkSizeGroupPrivate*"/>
      </field>
    </class>
    <record name="SizeGroupClass"
            c:type="GtkSizeGroupClass"
            glib:is-gtype-struct-for="SizeGroup">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="_gtk_reserved1" introspectable="0">
        <callback name="_gtk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved2" introspectable="0">
        <callback name="_gtk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved3" introspectable="0">
        <callback name="_gtk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved4" introspectable="0">
        <callback name="_gtk_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <enumeration name="SizeGroupMode"
                 glib:type-name="GtkSizeGroupMode"
                 glib:get-type="gtk_size_group_mode_get_type"
                 c:type="GtkSizeGroupMode">
      <doc xml:whitespace="preserve">The mode of the size group determines the directions in which the size
group affects the requested sizes of its component widgets.</doc>
      <member name="none"
              value="0"
              c:identifier="GTK_SIZE_GROUP_NONE"
              glib:nick="none"/>
      <member name="horizontal"
              value="1"
              c:identifier="GTK_SIZE_GROUP_HORIZONTAL"
              glib:nick="horizontal"/>
      <member name="vertical"
              value="2"
              c:identifier="GTK_SIZE_GROUP_VERTICAL"
              glib:nick="vertical"/>
      <member name="both"
              value="3"
              c:identifier="GTK_SIZE_GROUP_BOTH"
              glib:nick="both"/>
    </enumeration>
    <record name="SizeGroupPrivate" c:type="GtkSizeGroupPrivate" disguised="1">
    </record>
    <interface name="SizeRequest"
               c:symbol-prefix="size_request"
               c:type="GtkSizeRequest"
               glib:type-name="GtkSizeRequest"
               glib:get-type="gtk_size_request_get_type"
               glib:type-struct="SizeRequestIface">
      <prerequisite name="Widget"/>
      <virtual-method name="get_height" invoker="get_height" version="3.0">
        <doc xml:whitespace="preserve">Retrieves a widget's initial minimum and natural height.
&lt;note&gt;&lt;para&gt;This call is specific to width-for-height requests.&lt;/para&gt;&lt;/note&gt;
The returned request will be modified by the
GtkWidgetClass::adjust_size_request virtual method and by any
#GtkSizeGroup that have been applied. That is, the returned request
is the one that should be used for layout, not necessarily the one
returned by the widget itself.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="minimum_height"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     allow-none="1">
            <doc xml:whitespace="preserve">location to store the minimum height, or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="natural_height"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     allow-none="1">
            <doc xml:whitespace="preserve">location to store the natural height, or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_height_for_width"
                      invoker="get_height_for_width"
                      version="3.0">
        <doc xml:whitespace="preserve">Retrieves a widget's minimum and natural height if it would be given
the specified @width.
The returned request will be modified by the
GtkWidgetClass::adjust_size_request virtual method and by any
#GtkSizeGroup that have been applied. That is, the returned request
is the one that should be used for layout, not necessarily the one
returned by the widget itself.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="width" transfer-ownership="none">
            <doc xml:whitespace="preserve">the width which is available for allocation</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="minimum_height"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     allow-none="1">
            <doc xml:whitespace="preserve">location for storing the minimum height, or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="natural_height"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     allow-none="1">
            <doc xml:whitespace="preserve">location for storing the natural height, or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_request_mode"
                      invoker="get_request_mode"
                      version="3.0">
        <doc xml:whitespace="preserve">Gets whether the widget prefers a height-for-width layout
or a width-for-height layout.
&lt;note&gt;&lt;para&gt;#GtkBin widgets generally propagate the preference of
their child, container widgets need to request something either in
context of their children or in context of their allocation
capabilities.&lt;/para&gt;&lt;/note&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The #GtkSizeRequestMode preferred by @widget.</doc>
          <type name="SizeRequestMode" c:type="GtkSizeRequestMode"/>
        </return-value>
      </virtual-method>
      <virtual-method name="get_width" invoker="get_width" version="3.0">
        <doc xml:whitespace="preserve">Retrieves a widget's initial minimum and natural width.
&lt;note&gt;&lt;para&gt;This call is specific to height-for-width
requests.&lt;/para&gt;&lt;/note&gt;
The returned request will be modified by the
GtkWidgetClass::adjust_size_request virtual method and by any
#GtkSizeGroup that have been applied. That is, the returned request
is the one that should be used for layout, not necessarily the one
returned by the widget itself.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="minimum_width"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     allow-none="1">
            <doc xml:whitespace="preserve">location to store the minimum width, or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="natural_width"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     allow-none="1">
            <doc xml:whitespace="preserve">location to store the natural width, or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_width_for_height"
                      invoker="get_width_for_height"
                      version="3.0">
        <doc xml:whitespace="preserve">Retrieves a widget's minimum and natural width if it would be given
the specified @height.
The returned request will be modified by the
GtkWidgetClass::adjust_size_request virtual method and by any
#GtkSizeGroup that have been applied. That is, the returned request
is the one that should be used for layout, not necessarily the one
returned by the widget itself.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="height" transfer-ownership="none">
            <doc xml:whitespace="preserve">the height which is available for allocation</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="minimum_width"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     allow-none="1">
            <doc xml:whitespace="preserve">location for storing the minimum width, or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="natural_width"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     allow-none="1">
            <doc xml:whitespace="preserve">location for storing the natural width, or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="get_height"
              c:identifier="gtk_size_request_get_height"
              version="3.0">
        <doc xml:whitespace="preserve">Retrieves a widget's initial minimum and natural height.
&lt;note&gt;&lt;para&gt;This call is specific to width-for-height requests.&lt;/para&gt;&lt;/note&gt;
The returned request will be modified by the
GtkWidgetClass::adjust_size_request virtual method and by any
#GtkSizeGroup that have been applied. That is, the returned request
is the one that should be used for layout, not necessarily the one
returned by the widget itself.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="minimum_height"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     allow-none="1">
            <doc xml:whitespace="preserve">location to store the minimum height, or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="natural_height"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     allow-none="1">
            <doc xml:whitespace="preserve">location to store the natural height, or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_height_for_width"
              c:identifier="gtk_size_request_get_height_for_width"
              version="3.0">
        <doc xml:whitespace="preserve">Retrieves a widget's minimum and natural height if it would be given
the specified @width.
The returned request will be modified by the
GtkWidgetClass::adjust_size_request virtual method and by any
#GtkSizeGroup that have been applied. That is, the returned request
is the one that should be used for layout, not necessarily the one
returned by the widget itself.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="width" transfer-ownership="none">
            <doc xml:whitespace="preserve">the width which is available for allocation</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="minimum_height"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     allow-none="1">
            <doc xml:whitespace="preserve">location for storing the minimum height, or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="natural_height"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     allow-none="1">
            <doc xml:whitespace="preserve">location for storing the natural height, or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_request_mode"
              c:identifier="gtk_size_request_get_request_mode"
              version="3.0">
        <doc xml:whitespace="preserve">Gets whether the widget prefers a height-for-width layout
or a width-for-height layout.
&lt;note&gt;&lt;para&gt;#GtkBin widgets generally propagate the preference of
their child, container widgets need to request something either in
context of their children or in context of their allocation
capabilities.&lt;/para&gt;&lt;/note&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The #GtkSizeRequestMode preferred by @widget.</doc>
          <type name="SizeRequestMode" c:type="GtkSizeRequestMode"/>
        </return-value>
      </method>
      <method name="get_size"
              c:identifier="gtk_size_request_get_size"
              version="3.0">
        <doc xml:whitespace="preserve">Retrieves the minimum and natural size of a widget taking
into account the widget's preference for height-for-width management.
This is used to retrieve a suitable size by container widgets which do
not impose any restrictions on the child placement.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="minimum_size"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">location for storing the minimum size, or %NULL</doc>
            <type name="Requisition" c:type="GtkRequisition*"/>
          </parameter>
          <parameter name="natural_size"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">location for storing the natural size, or %NULL</doc>
            <type name="Requisition" c:type="GtkRequisition*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_width"
              c:identifier="gtk_size_request_get_width"
              version="3.0">
        <doc xml:whitespace="preserve">Retrieves a widget's initial minimum and natural width.
&lt;note&gt;&lt;para&gt;This call is specific to height-for-width
requests.&lt;/para&gt;&lt;/note&gt;
The returned request will be modified by the
GtkWidgetClass::adjust_size_request virtual method and by any
#GtkSizeGroup that have been applied. That is, the returned request
is the one that should be used for layout, not necessarily the one
returned by the widget itself.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="minimum_width"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     allow-none="1">
            <doc xml:whitespace="preserve">location to store the minimum width, or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="natural_width"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     allow-none="1">
            <doc xml:whitespace="preserve">location to store the natural width, or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_width_for_height"
              c:identifier="gtk_size_request_get_width_for_height"
              version="3.0">
        <doc xml:whitespace="preserve">Retrieves a widget's minimum and natural width if it would be given
the specified @height.
The returned request will be modified by the
GtkWidgetClass::adjust_size_request virtual method and by any
#GtkSizeGroup that have been applied. That is, the returned request
is the one that should be used for layout, not necessarily the one
returned by the widget itself.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="height" transfer-ownership="none">
            <doc xml:whitespace="preserve">the height which is available for allocation</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="minimum_width"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     allow-none="1">
            <doc xml:whitespace="preserve">location for storing the minimum width, or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="natural_width"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     allow-none="1">
            <doc xml:whitespace="preserve">location for storing the natural width, or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
    </interface>
    <record name="SizeRequestIface"
            c:type="GtkSizeRequestIface"
            glib:is-gtype-struct-for="SizeRequest">
      <field name="g_iface">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="get_request_mode">
        <callback name="get_request_mode">
          <return-value transfer-ownership="none">
            <doc xml:whitespace="preserve">The #GtkSizeRequestMode preferred by @widget.</doc>
            <type name="SizeRequestMode" c:type="GtkSizeRequestMode"/>
          </return-value>
          <parameters>
            <parameter name="widget" transfer-ownership="none">
              <type name="SizeRequest" c:type="GtkSizeRequest*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_height">
        <callback name="get_height">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="widget" transfer-ownership="none">
              <type name="SizeRequest" c:type="GtkSizeRequest*"/>
            </parameter>
            <parameter name="minimum_height"
                       direction="out"
                       caller-allocates="0"
                       transfer-ownership="full"
                       allow-none="1">
              <doc xml:whitespace="preserve">location to store the minimum height, or %NULL</doc>
              <type name="gint" c:type="gint*"/>
            </parameter>
            <parameter name="natural_height"
                       direction="out"
                       caller-allocates="0"
                       transfer-ownership="full"
                       allow-none="1">
              <doc xml:whitespace="preserve">location to store the natural height, or %NULL</doc>
              <type name="gint" c:type="gint*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_width_for_height">
        <callback name="get_width_for_height">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="widget" transfer-ownership="none">
              <type name="SizeRequest" c:type="GtkSizeRequest*"/>
            </parameter>
            <parameter name="height" transfer-ownership="none">
              <doc xml:whitespace="preserve">the height which is available for allocation</doc>
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="minimum_width"
                       direction="out"
                       caller-allocates="0"
                       transfer-ownership="full"
                       allow-none="1">
              <doc xml:whitespace="preserve">location for storing the minimum width, or %NULL</doc>
              <type name="gint" c:type="gint*"/>
            </parameter>
            <parameter name="natural_width"
                       direction="out"
                       caller-allocates="0"
                       transfer-ownership="full"
                       allow-none="1">
              <doc xml:whitespace="preserve">location for storing the natural width, or %NULL</doc>
              <type name="gint" c:type="gint*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_width">
        <callback name="get_width">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="widget" transfer-ownership="none">
              <type name="SizeRequest" c:type="GtkSizeRequest*"/>
            </parameter>
            <parameter name="minimum_width"
                       direction="out"
                       caller-allocates="0"
                       transfer-ownership="full"
                       allow-none="1">
              <doc xml:whitespace="preserve">location to store the minimum width, or %NULL</doc>
              <type name="gint" c:type="gint*"/>
            </parameter>
            <parameter name="natural_width"
                       direction="out"
                       caller-allocates="0"
                       transfer-ownership="full"
                       allow-none="1">
              <doc xml:whitespace="preserve">location to store the natural width, or %NULL</doc>
              <type name="gint" c:type="gint*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_height_for_width">
        <callback name="get_height_for_width">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="widget" transfer-ownership="none">
              <type name="SizeRequest" c:type="GtkSizeRequest*"/>
            </parameter>
            <parameter name="width" transfer-ownership="none">
              <doc xml:whitespace="preserve">the width which is available for allocation</doc>
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="minimum_height"
                       direction="out"
                       caller-allocates="0"
                       transfer-ownership="full"
                       allow-none="1">
              <doc xml:whitespace="preserve">location for storing the minimum height, or %NULL</doc>
              <type name="gint" c:type="gint*"/>
            </parameter>
            <parameter name="natural_height"
                       direction="out"
                       caller-allocates="0"
                       transfer-ownership="full"
                       allow-none="1">
              <doc xml:whitespace="preserve">location for storing the natural height, or %NULL</doc>
              <type name="gint" c:type="gint*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <enumeration name="SizeRequestMode"
                 glib:type-name="GtkSizeRequestMode"
                 glib:get-type="gtk_size_request_mode_get_type"
                 c:type="GtkSizeRequestMode">
      <doc xml:whitespace="preserve">Specifies a preference for height-for-width or
width-for-height geometry management.</doc>
      <member name="height_for_width"
              value="0"
              c:identifier="GTK_SIZE_REQUEST_HEIGHT_FOR_WIDTH"
              glib:nick="height-for-width"/>
      <member name="width_for_height"
              value="1"
              c:identifier="GTK_SIZE_REQUEST_WIDTH_FOR_HEIGHT"
              glib:nick="width-for-height"/>
    </enumeration>
    <class name="Socket"
           c:symbol-prefix="socket"
           c:type="GtkSocket"
           parent="Container"
           glib:type-name="GtkSocket"
           glib:get-type="gtk_socket_get_type"
           glib:type-struct="SocketClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Buildable"/>
      <implements name="SizeRequest"/>
      <constructor name="new" c:identifier="gtk_socket_new">
        <doc xml:whitespace="preserve">Create a new empty #GtkSocket.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the new #GtkSocket.</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="add_id" c:identifier="gtk_socket_add_id">
        <doc xml:whitespace="preserve">Adds an XEMBED client, such as a #GtkPlug, to the #GtkSocket.  The
client may be in the same process or in a different process. 
To embed a #GtkPlug in a #GtkSocket, you can either create the
#GtkPlug with &lt;literal&gt;gtk_plug_new (0)&lt;/literal&gt;, call 
gtk_plug_get_id() to get the window ID of the plug, and then pass that to the
gtk_socket_add_id(), or you can call gtk_socket_get_id() to get the
window ID for the socket, and call gtk_plug_new() passing in that
ID.
The #GtkSocket must have already be added into a toplevel window
before you can make this call.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="window_id" transfer-ownership="none">
            <doc xml:whitespace="preserve">the window ID of a client participating in the XEMBED protocol.</doc>
            <type name="Gdk.NativeWindow" c:type="GdkNativeWindow"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_id" c:identifier="gtk_socket_get_id">
        <doc xml:whitespace="preserve">Gets the window ID of a #GtkSocket widget, which can then
be used to create a client embedded inside the socket, for
instance with gtk_plug_new(). 
The #GtkSocket must have already be added into a toplevel window 
before you can make this call.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the window ID for the socket</doc>
          <type name="Gdk.NativeWindow" c:type="GdkNativeWindow"/>
        </return-value>
      </method>
      <method name="get_plug_window"
              c:identifier="gtk_socket_get_plug_window"
              version=" 2.14">
        <doc xml:whitespace="preserve">Retrieves the window of the plug. Use this to check if the plug has
been created inside of the socket.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the window of the plug if available, or %NULL</doc>
          <type name="Gdk.Window" c:type="GdkWindow*"/>
        </return-value>
      </method>
      <field name="container">
        <type name="Container" c:type="GtkContainer"/>
      </field>
      <field name="request_width">
        <type name="guint16" c:type="guint16"/>
      </field>
      <field name="request_height">
        <type name="guint16" c:type="guint16"/>
      </field>
      <field name="current_width">
        <type name="guint16" c:type="guint16"/>
      </field>
      <field name="current_height">
        <type name="guint16" c:type="guint16"/>
      </field>
      <field name="plug_window">
        <type name="Gdk.Window" c:type="GdkWindow*"/>
      </field>
      <field name="plug_widget">
        <type name="Widget" c:type="GtkWidget*"/>
      </field>
      <field name="xembed_version">
        <type name="gshort" c:type="gshort"/>
      </field>
      <field name="same_app" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="focus_in" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="have_size" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="need_map" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="is_mapped" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="active" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="accel_group">
        <type name="AccelGroup" c:type="GtkAccelGroup*"/>
      </field>
      <field name="toplevel">
        <type name="Widget" c:type="GtkWidget*"/>
      </field>
      <glib:signal name="plug-added">
        <doc xml:whitespace="preserve">This signal is emitted when a client is successfully
added to the socket.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
      <glib:signal name="plug-removed">
        <doc xml:whitespace="preserve">This signal is emitted when a client is removed from the socket. 
The default action is to destroy the #GtkSocket widget, so if you 
want to reuse it you must add a signal handler that returns %TRUE.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE to stop other handlers from being invoked.</doc>
          <type name="gboolean"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="SocketClass"
            c:type="GtkSocketClass"
            glib:is-gtype-struct-for="Socket">
      <field name="parent_class">
        <type name="ContainerClass" c:type="GtkContainerClass"/>
      </field>
      <field name="plug_added">
        <callback name="plug_added">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="socket_" transfer-ownership="none">
              <type name="Socket" c:type="GtkSocket*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="plug_removed">
        <callback name="plug_removed">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="socket_" transfer-ownership="none">
              <type name="Socket" c:type="GtkSocket*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_gtk_reserved1" introspectable="0">
        <callback name="_gtk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved2" introspectable="0">
        <callback name="_gtk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved3" introspectable="0">
        <callback name="_gtk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved4" introspectable="0">
        <callback name="_gtk_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <enumeration name="SortType"
                 glib:type-name="GtkSortType"
                 glib:get-type="gtk_sort_type_get_type"
                 c:type="GtkSortType">
      <member name="ascending"
              value="0"
              c:identifier="GTK_SORT_ASCENDING"
              glib:nick="ascending"/>
      <member name="descending"
              value="1"
              c:identifier="GTK_SORT_DESCENDING"
              glib:nick="descending"/>
    </enumeration>
    <class name="SpinButton"
           c:symbol-prefix="spin_button"
           c:type="GtkSpinButton"
           parent="Entry"
           glib:type-name="GtkSpinButton"
           glib:get-type="gtk_spin_button_get_type"
           glib:type-struct="SpinButtonClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Buildable"/>
      <implements name="CellEditable"/>
      <implements name="Editable"/>
      <implements name="SizeRequest"/>
      <constructor name="new" c:identifier="gtk_spin_button_new">
        <return-value transfer-ownership="none">
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="adjustment" transfer-ownership="none">
            <type name="Adjustment" c:type="GtkAdjustment*"/>
          </parameter>
          <parameter name="climb_rate" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="digits" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_with_range"
                   c:identifier="gtk_spin_button_new_with_range">
        <doc xml:whitespace="preserve">This is a convenience constructor that allows creation of a numeric 
#GtkSpinButton without manually creating an adjustment. The value is 
initially set to the minimum value and a page increment of 10 * @step
is the default. The precision of the spin button is equivalent to the 
precision of @step. 
Note that the way in which the precision is derived works best if @step 
is a power of ten. If the resulting precision is not suitable for your 
needs, use gtk_spin_button_set_digits() to correct it.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The new spin button as a #GtkWidget.</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="min" transfer-ownership="none">
            <doc xml:whitespace="preserve">Minimum allowable value</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="max" transfer-ownership="none">
            <doc xml:whitespace="preserve">Maximum allowable value</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="step" transfer-ownership="none">
            <doc xml:whitespace="preserve">Increment added or subtracted by spinning the widget</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="configure" c:identifier="gtk_spin_button_configure">
        <doc xml:whitespace="preserve">Changes the properties of an existing spin button. The adjustment, climb rate,
and number of decimal places are all changed accordingly, after this function call.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="adjustment"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">a #GtkAdjustment.</doc>
            <type name="Adjustment" c:type="GtkAdjustment*"/>
          </parameter>
          <parameter name="climb_rate" transfer-ownership="none">
            <doc xml:whitespace="preserve">the new climb rate.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="digits" transfer-ownership="none">
            <doc xml:whitespace="preserve">the number of decimal places to display in the spin button.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_adjustment"
              c:identifier="gtk_spin_button_get_adjustment">
        <doc xml:whitespace="preserve">Get the adjustment associated with a #GtkSpinButton</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the #GtkAdjustment of @spin_button</doc>
          <type name="Adjustment" c:type="GtkAdjustment*"/>
        </return-value>
      </method>
      <method name="get_digits" c:identifier="gtk_spin_button_get_digits">
        <doc xml:whitespace="preserve">Fetches the precision of @spin_button. See gtk_spin_button_set_digits().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the current precision</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
      </method>
      <method name="get_increments"
              c:identifier="gtk_spin_button_get_increments">
        <doc xml:whitespace="preserve">Gets the current step and page the increments used by @spin_button. See
gtk_spin_button_set_increments().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="step" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">location to store step increment, or %NULL</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="page" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">location to store page increment, or %NULL</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_numeric" c:identifier="gtk_spin_button_get_numeric">
        <doc xml:whitespace="preserve">Returns whether non-numeric text can be typed into the spin button.
See gtk_spin_button_set_numeric().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if only numeric text can be entered</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_range" c:identifier="gtk_spin_button_get_range">
        <doc xml:whitespace="preserve">Gets the range allowed for @spin_button. See
gtk_spin_button_set_range().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="min" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">location to store minimum allowed value, or %NULL</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="max" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">location to store maximum allowed value, or %NULL</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_snap_to_ticks"
              c:identifier="gtk_spin_button_get_snap_to_ticks">
        <doc xml:whitespace="preserve">Returns whether the values are corrected to the nearest step. See
gtk_spin_button_set_snap_to_ticks().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if values are snapped to the nearest step.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_update_policy"
              c:identifier="gtk_spin_button_get_update_policy">
        <doc xml:whitespace="preserve">Gets the update behavior of a spin button. See
gtk_spin_button_set_update_policy().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the current update policy</doc>
          <type name="SpinButtonUpdatePolicy"
                c:type="GtkSpinButtonUpdatePolicy"/>
        </return-value>
      </method>
      <method name="get_value" c:identifier="gtk_spin_button_get_value">
        <doc xml:whitespace="preserve">Get the value in the @spin_button.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the value of @spin_button</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </method>
      <method name="get_value_as_int"
              c:identifier="gtk_spin_button_get_value_as_int">
        <doc xml:whitespace="preserve">Get the value @spin_button represented as an integer.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the value of @spin_button</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="get_wrap" c:identifier="gtk_spin_button_get_wrap">
        <doc xml:whitespace="preserve">Returns whether the spin button's value wraps around to the
opposite limit when the upper or lower limit of the range is
exceeded. See gtk_spin_button_set_wrap().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the spin button wraps around</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="set_adjustment"
              c:identifier="gtk_spin_button_set_adjustment">
        <doc xml:whitespace="preserve">Replaces the #GtkAdjustment associated with @spin_button.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="adjustment" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkAdjustment to replace the existing adjustment</doc>
            <type name="Adjustment" c:type="GtkAdjustment*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_digits" c:identifier="gtk_spin_button_set_digits">
        <doc xml:whitespace="preserve">Set the precision to be displayed by @spin_button. Up to 20 digit precision
is allowed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="digits" transfer-ownership="none">
            <doc xml:whitespace="preserve">the number of digits after the decimal point to be displayed for the spin button's value</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_increments"
              c:identifier="gtk_spin_button_set_increments">
        <doc xml:whitespace="preserve">Sets the step and page increments for spin_button.  This affects how 
quickly the value changes when the spin button's arrows are activated.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="step" transfer-ownership="none">
            <doc xml:whitespace="preserve">increment applied for a button 1 press.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="page" transfer-ownership="none">
            <doc xml:whitespace="preserve">increment applied for a button 2 press.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_numeric" c:identifier="gtk_spin_button_set_numeric">
        <doc xml:whitespace="preserve">Sets the flag that determines if non-numeric text can be typed into
the spin button.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="numeric" transfer-ownership="none">
            <doc xml:whitespace="preserve">flag indicating if only numeric entry is allowed.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_range" c:identifier="gtk_spin_button_set_range">
        <doc xml:whitespace="preserve">Sets the minimum and maximum allowable values for @spin_button</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="min" transfer-ownership="none">
            <doc xml:whitespace="preserve">minimum allowable value</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="max" transfer-ownership="none">
            <doc xml:whitespace="preserve">maximum allowable value</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_snap_to_ticks"
              c:identifier="gtk_spin_button_set_snap_to_ticks">
        <doc xml:whitespace="preserve">Sets the policy as to whether values are corrected to the nearest step 
increment when a spin button is activated after providing an invalid value.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="snap_to_ticks" transfer-ownership="none">
            <doc xml:whitespace="preserve">a flag indicating if invalid values should be corrected.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_update_policy"
              c:identifier="gtk_spin_button_set_update_policy">
        <doc xml:whitespace="preserve">Sets the update behavior of a spin button. This determines whether the
spin button is always updated or only when a valid value is set.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="policy" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkSpinButtonUpdatePolicy value</doc>
            <type name="SpinButtonUpdatePolicy"
                  c:type="GtkSpinButtonUpdatePolicy"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_value" c:identifier="gtk_spin_button_set_value">
        <doc xml:whitespace="preserve">Set the value of @spin_button.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="value" transfer-ownership="none">
            <doc xml:whitespace="preserve">the new value</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_wrap" c:identifier="gtk_spin_button_set_wrap">
        <doc xml:whitespace="preserve">Sets the flag that determines if a spin button value wraps around to the
opposite limit when the upper or lower limit of the range is exceeded.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="wrap" transfer-ownership="none">
            <doc xml:whitespace="preserve">a flag indicating if wrapping behavior is performed.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="spin" c:identifier="gtk_spin_button_spin">
        <doc xml:whitespace="preserve">Increment or decrement a spin button's value in a specified direction
by a specified amount.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="direction" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkSpinType indicating the direction to spin.</doc>
            <type name="SpinType" c:type="GtkSpinType"/>
          </parameter>
          <parameter name="increment" transfer-ownership="none">
            <doc xml:whitespace="preserve">step increment to apply in the specified direction.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="update" c:identifier="gtk_spin_button_update">
        <doc xml:whitespace="preserve">Manually force an update of the spin button.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <property name="adjustment" writable="1" transfer-ownership="none">
        <type name="Adjustment"/>
      </property>
      <property name="climb-rate" writable="1" transfer-ownership="none">
        <type name="gdouble"/>
      </property>
      <property name="digits" writable="1" transfer-ownership="none">
        <type name="guint"/>
      </property>
      <property name="numeric" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="snap-to-ticks" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="update-policy" writable="1" transfer-ownership="none">
        <type name="SpinButtonUpdatePolicy"/>
      </property>
      <property name="value" writable="1" transfer-ownership="none">
        <type name="gdouble"/>
      </property>
      <property name="wrap" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <field name="entry">
        <type name="Entry" c:type="GtkEntry"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="SpinButtonPrivate" c:type="GtkSpinButtonPrivate*"/>
      </field>
      <glib:signal name="change-value">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="ScrollType"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="input">
        <return-value transfer-ownership="none">
          <type name="gint"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="gpointer"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="output">
        <doc xml:whitespace="preserve">The ::output signal can be used to change to formatting
of the value that is displayed in the spin buttons entry.
|[
/&amp;ast; show leading zeros &amp;ast;/
static gboolean
on_output (GtkSpinButton *spin,
gpointer       data)
{
GtkAdjustment *adj;
gchar *text;
int value;
adj = gtk_spin_button_get_adjustment (spin);
value = (int)gtk_adjustment_get_value (adj);
text = g_strdup_printf ("%02d", value);
gtk_entry_set_text (GTK_ENTRY (spin), text);
g_free (text);
return TRUE;
}
]|</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the value has been displayed.</doc>
          <type name="gboolean"/>
        </return-value>
      </glib:signal>
      <glib:signal name="value-changed">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
      <glib:signal name="wrapped" version="2.10">
        <doc xml:whitespace="preserve">The wrapped signal is emitted right after the spinbutton wraps
from its maximum to minimum value or vice-versa.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="SpinButtonClass"
            c:type="GtkSpinButtonClass"
            glib:is-gtype-struct-for="SpinButton">
      <field name="parent_class">
        <type name="EntryClass" c:type="GtkEntryClass"/>
      </field>
      <field name="input">
        <callback name="input">
          <return-value transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </return-value>
          <parameters>
            <parameter name="spin_button" transfer-ownership="none">
              <type name="SpinButton" c:type="GtkSpinButton*"/>
            </parameter>
            <parameter name="new_value" transfer-ownership="none">
              <type name="gdouble" c:type="gdouble*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="output">
        <callback name="output">
          <return-value transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </return-value>
          <parameters>
            <parameter name="spin_button" transfer-ownership="none">
              <type name="SpinButton" c:type="GtkSpinButton*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="value_changed">
        <callback name="value_changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="spin_button" transfer-ownership="none">
              <type name="SpinButton" c:type="GtkSpinButton*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="change_value">
        <callback name="change_value">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="spin_button" transfer-ownership="none">
              <type name="SpinButton" c:type="GtkSpinButton*"/>
            </parameter>
            <parameter name="scroll" transfer-ownership="none">
              <type name="ScrollType" c:type="GtkScrollType"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="wrapped">
        <callback name="wrapped">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="spin_button" transfer-ownership="none">
              <type name="SpinButton" c:type="GtkSpinButton*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_gtk_reserved1" introspectable="0">
        <callback name="_gtk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved2" introspectable="0">
        <callback name="_gtk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved3" introspectable="0">
        <callback name="_gtk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="SpinButtonPrivate"
            c:type="GtkSpinButtonPrivate"
            disguised="1">
    </record>
    <enumeration name="SpinButtonUpdatePolicy"
                 glib:type-name="GtkSpinButtonUpdatePolicy"
                 glib:get-type="gtk_spin_button_update_policy_get_type"
                 c:type="GtkSpinButtonUpdatePolicy">
      <member name="always"
              value="0"
              c:identifier="GTK_UPDATE_ALWAYS"
              glib:nick="always"/>
      <member name="if_valid"
              value="1"
              c:identifier="GTK_UPDATE_IF_VALID"
              glib:nick="if-valid"/>
    </enumeration>
    <enumeration name="SpinType"
                 glib:type-name="GtkSpinType"
                 glib:get-type="gtk_spin_type_get_type"
                 c:type="GtkSpinType">
      <member name="step_forward"
              value="0"
              c:identifier="GTK_SPIN_STEP_FORWARD"
              glib:nick="step-forward"/>
      <member name="step_backward"
              value="1"
              c:identifier="GTK_SPIN_STEP_BACKWARD"
              glib:nick="step-backward"/>
      <member name="page_forward"
              value="2"
              c:identifier="GTK_SPIN_PAGE_FORWARD"
              glib:nick="page-forward"/>
      <member name="page_backward"
              value="3"
              c:identifier="GTK_SPIN_PAGE_BACKWARD"
              glib:nick="page-backward"/>
      <member name="home"
              value="4"
              c:identifier="GTK_SPIN_HOME"
              glib:nick="home"/>
      <member name="end"
              value="5"
              c:identifier="GTK_SPIN_END"
              glib:nick="end"/>
      <member name="user_defined"
              value="6"
              c:identifier="GTK_SPIN_USER_DEFINED"
              glib:nick="user-defined"/>
    </enumeration>
    <class name="Spinner"
           c:symbol-prefix="spinner"
           c:type="GtkSpinner"
           parent="Widget"
           glib:type-name="GtkSpinner"
           glib:get-type="gtk_spinner_get_type"
           glib:type-struct="SpinnerClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Buildable"/>
      <implements name="SizeRequest"/>
      <constructor name="new" c:identifier="gtk_spinner_new" version="2.20">
        <doc xml:whitespace="preserve">Returns a new spinner widget. Not yet started.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a new #GtkSpinner</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="start" c:identifier="gtk_spinner_start" version="2.20">
        <doc xml:whitespace="preserve">Starts the animation of the spinner.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="stop" c:identifier="gtk_spinner_stop" version="2.20">
        <doc xml:whitespace="preserve">Stops the animation of the spinner.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <property name="active" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <field name="parent">
        <type name="Widget" c:type="GtkWidget"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="SpinnerPrivate" c:type="GtkSpinnerPrivate*"/>
      </field>
    </class>
    <record name="SpinnerClass"
            c:type="GtkSpinnerClass"
            glib:is-gtype-struct-for="Spinner">
      <field name="parent_class">
        <type name="WidgetClass" c:type="GtkWidgetClass"/>
      </field>
    </record>
    <record name="SpinnerPrivate" c:type="GtkSpinnerPrivate" disguised="1">
    </record>
    <enumeration name="StateType"
                 glib:type-name="GtkStateType"
                 glib:get-type="gtk_state_type_get_type"
                 c:type="GtkStateType">
      <member name="normal"
              value="0"
              c:identifier="GTK_STATE_NORMAL"
              glib:nick="normal"/>
      <member name="active"
              value="1"
              c:identifier="GTK_STATE_ACTIVE"
              glib:nick="active"/>
      <member name="prelight"
              value="2"
              c:identifier="GTK_STATE_PRELIGHT"
              glib:nick="prelight"/>
      <member name="selected"
              value="3"
              c:identifier="GTK_STATE_SELECTED"
              glib:nick="selected"/>
      <member name="insensitive"
              value="4"
              c:identifier="GTK_STATE_INSENSITIVE"
              glib:nick="insensitive"/>
    </enumeration>
    <class name="StatusIcon"
           c:symbol-prefix="status_icon"
           c:type="GtkStatusIcon"
           parent="GObject.Object"
           glib:type-name="GtkStatusIcon"
           glib:get-type="gtk_status_icon_get_type"
           glib:type-struct="StatusIconClass">
      <constructor name="new"
                   c:identifier="gtk_status_icon_new"
                   version="2.10">
        <doc xml:whitespace="preserve">Creates an empty status icon object.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new #GtkStatusIcon</doc>
          <type name="StatusIcon" c:type="GtkStatusIcon*"/>
        </return-value>
      </constructor>
      <constructor name="new_from_file"
                   c:identifier="gtk_status_icon_new_from_file"
                   version="2.10">
        <doc xml:whitespace="preserve">Creates a status icon displaying the file @filename. 
The image will be scaled down to fit in the available 
space in the notification area, if necessary.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new #GtkStatusIcon</doc>
          <type name="StatusIcon" c:type="GtkStatusIcon*"/>
        </return-value>
        <parameters>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:whitespace="preserve">a filename</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_gicon"
                   c:identifier="gtk_status_icon_new_from_gicon"
                   version="2.14">
        <doc xml:whitespace="preserve">Creates a status icon displaying a #GIcon. If the icon is a
themed icon, it will be updated when the theme changes.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new #GtkStatusIcon</doc>
          <type name="StatusIcon" c:type="GtkStatusIcon*"/>
        </return-value>
        <parameters>
          <parameter name="icon" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GIcon</doc>
            <type name="Gio.Icon" c:type="GIcon*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_icon_name"
                   c:identifier="gtk_status_icon_new_from_icon_name"
                   version="2.10">
        <doc xml:whitespace="preserve">Creates a status icon displaying an icon from the current icon theme.
If the current icon theme is changed, the icon will be updated 
appropriately.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new #GtkStatusIcon</doc>
          <type name="StatusIcon" c:type="GtkStatusIcon*"/>
        </return-value>
        <parameters>
          <parameter name="icon_name" transfer-ownership="none">
            <doc xml:whitespace="preserve">an icon name</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_pixbuf"
                   c:identifier="gtk_status_icon_new_from_pixbuf"
                   version="2.10">
        <doc xml:whitespace="preserve">Creates a status icon displaying @pixbuf. 
The image will be scaled down to fit in the available 
space in the notification area, if necessary.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new #GtkStatusIcon</doc>
          <type name="StatusIcon" c:type="GtkStatusIcon*"/>
        </return-value>
        <parameters>
          <parameter name="pixbuf" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GdkPixbuf</doc>
            <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_stock"
                   c:identifier="gtk_status_icon_new_from_stock"
                   version="2.10">
        <doc xml:whitespace="preserve">Creates a status icon displaying a stock icon. Sample stock icon
names are #GTK_STOCK_OPEN, #GTK_STOCK_QUIT. You can register your 
own stock icon names, see gtk_icon_factory_add_default() and 
gtk_icon_factory_add().</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new #GtkStatusIcon</doc>
          <type name="StatusIcon" c:type="GtkStatusIcon*"/>
        </return-value>
        <parameters>
          <parameter name="stock_id" transfer-ownership="none">
            <doc xml:whitespace="preserve">a stock icon id</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="position_menu"
                c:identifier="gtk_status_icon_position_menu"
                version="2.10">
        <doc xml:whitespace="preserve">Menu positioning function to use with gtk_menu_popup()
to position @menu aligned to the status icon @user_data.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="menu" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GtkMenu</doc>
            <type name="Menu" c:type="GtkMenu*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:whitespace="preserve">return location for the x position</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:whitespace="preserve">return location for the y position</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="push_in" transfer-ownership="none">
            <doc xml:whitespace="preserve">whether the first menu item should be offset (pushed in) to be aligned with the menu popup position (only useful for GtkOptionMenu).</doc>
            <type name="gboolean" c:type="gboolean*"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:whitespace="preserve">the status icon to position the menu on</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <method name="get_geometry"
              c:identifier="gtk_status_icon_get_geometry"
              version="2.10">
        <doc xml:whitespace="preserve">Obtains information about the location of the status icon
on screen. This information can be used to e.g. position 
popups like notification bubbles. 
See gtk_status_icon_position_menu() for a more convenient 
alternative for positioning menus.
Note that some platforms do not allow GTK+ to provide 
this information, and even on platforms that do allow it,
the information is not reliable unless the status icon
is embedded in a notification area, see
gtk_status_icon_is_embedded().
been filled in</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the location information has</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="screen"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">return location for the screen, or %NULL if the information is not needed</doc>
            <type name="Gdk.Screen" c:type="GdkScreen**"/>
          </parameter>
          <parameter name="area"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">return location for the area occupied by the status icon, or %NULL</doc>
            <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
          </parameter>
          <parameter name="orientation"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">return location for the orientation of the panel in which the status icon is embedded, or %NULL. A panel at the top or bottom of the screen is horizontal, a panel at the left or right is vertical.</doc>
            <type name="Orientation" c:type="GtkOrientation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_gicon"
              c:identifier="gtk_status_icon_get_gicon"
              version="2.14">
        <doc xml:whitespace="preserve">Retrieves the #GIcon being displayed by the #GtkStatusIcon.
The storage type of the status icon must be %GTK_IMAGE_EMPTY or
%GTK_IMAGE_GICON (see gtk_status_icon_get_storage_type()).
The caller of this function does not own a reference to the
returned #GIcon.
If this function fails, @icon is left unchanged;</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the displayed icon, or %NULL if the image is empty</doc>
          <type name="Gio.Icon" c:type="GIcon*"/>
        </return-value>
      </method>
      <method name="get_has_tooltip"
              c:identifier="gtk_status_icon_get_has_tooltip"
              version="2.16">
        <doc xml:whitespace="preserve">Returns the current value of the has-tooltip property.
See #GtkStatusIcon:has-tooltip for more information.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">current value of has-tooltip on @status_icon.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_icon_name"
              c:identifier="gtk_status_icon_get_icon_name"
              version="2.10">
        <doc xml:whitespace="preserve">Gets the name of the icon being displayed by the #GtkStatusIcon.
The storage type of the status icon must be %GTK_IMAGE_EMPTY or
%GTK_IMAGE_ICON_NAME (see gtk_status_icon_get_storage_type()).
The returned string is owned by the #GtkStatusIcon and should not
be freed or modified.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">name of the displayed icon, or %NULL if the image is empty.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_pixbuf"
              c:identifier="gtk_status_icon_get_pixbuf"
              version="2.10">
        <doc xml:whitespace="preserve">Gets the #GdkPixbuf being displayed by the #GtkStatusIcon.
The storage type of the status icon must be %GTK_IMAGE_EMPTY or
%GTK_IMAGE_PIXBUF (see gtk_status_icon_get_storage_type()).
The caller of this function does not own a reference to the
returned pixbuf.
or %NULL if the image is empty.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the displayed pixbuf,</doc>
          <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
      </method>
      <method name="get_screen"
              c:identifier="gtk_status_icon_get_screen"
              version="2.12">
        <doc xml:whitespace="preserve">Returns the #GdkScreen associated with @status_icon.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GdkScreen.</doc>
          <type name="Gdk.Screen" c:type="GdkScreen*"/>
        </return-value>
      </method>
      <method name="get_size"
              c:identifier="gtk_status_icon_get_size"
              version="2.10">
        <doc xml:whitespace="preserve">Gets the size in pixels that is available for the image. 
Stock icons and named icons adapt their size automatically
if the size of the notification area changes. For other
storage types, the size-changed signal can be used to
react to size changes.
Note that the returned size is only meaningful while the 
status icon is embedded (see gtk_status_icon_is_embedded()).</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the size that is available for the image</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="get_stock"
              c:identifier="gtk_status_icon_get_stock"
              version="2.10">
        <doc xml:whitespace="preserve">Gets the id of the stock icon being displayed by the #GtkStatusIcon.
The storage type of the status icon must be %GTK_IMAGE_EMPTY or
%GTK_IMAGE_STOCK (see gtk_status_icon_get_storage_type()).
The returned string is owned by the #GtkStatusIcon and should not
be freed or modified.
or %NULL if the image is empty.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">stock id of the displayed stock icon,</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_storage_type"
              c:identifier="gtk_status_icon_get_storage_type"
              version="2.10">
        <doc xml:whitespace="preserve">Gets the type of representation being used by the #GtkStatusIcon
to store image data. If the #GtkStatusIcon has no image data,
the return value will be %GTK_IMAGE_EMPTY.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the image representation being used</doc>
          <type name="ImageType" c:type="GtkImageType"/>
        </return-value>
      </method>
      <method name="get_title"
              c:identifier="gtk_status_icon_get_title"
              version="2.18">
        <doc xml:whitespace="preserve">Gets the title of this tray icon. See gtk_status_icon_set_title().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the title of the status icon</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_tooltip_markup"
              c:identifier="gtk_status_icon_get_tooltip_markup"
              version="2.16">
        <doc xml:whitespace="preserve">Gets the contents of the tooltip for @status_icon.
returned string with g_free() when done.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the tooltip text, or %NULL. You should free the</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_tooltip_text"
              c:identifier="gtk_status_icon_get_tooltip_text"
              version="2.16">
        <doc xml:whitespace="preserve">Gets the contents of the tooltip for @status_icon.
returned string with g_free() when done.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the tooltip text, or %NULL. You should free the</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_visible"
              c:identifier="gtk_status_icon_get_visible"
              version="2.10">
        <doc xml:whitespace="preserve">Returns whether the status icon is visible or not. 
Note that being visible does not guarantee that 
the user can actually see the icon, see also 
gtk_status_icon_is_embedded().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the status icon is visible</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_x11_window_id"
              c:identifier="gtk_status_icon_get_x11_window_id"
              version="2.14">
        <doc xml:whitespace="preserve">This function is only useful on the X11/freedesktop.org platform.
It returns a window ID for the widget in the underlying
status icon implementation.  This is useful for the Galago 
notification service, which can send a window ID in the protocol 
in order for the server to position notification windows 
pointing to a status icon reliably.
This function is not intended for other use cases which are
more likely to be met by one of the non-X11 specific methods, such
as gtk_status_icon_position_menu().
underlying X11 Window</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">An 32 bit unsigned integer identifier for the</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
      </method>
      <method name="is_embedded"
              c:identifier="gtk_status_icon_is_embedded"
              version="2.10">
        <doc xml:whitespace="preserve">Returns whether the status icon is embedded in a notification
area. 
a notification area.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the status icon is embedded in</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="set_from_file"
              c:identifier="gtk_status_icon_set_from_file"
              version="2.10 ">
        <doc xml:whitespace="preserve">Makes @status_icon display the file @filename.
See gtk_status_icon_new_from_file() for details.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:whitespace="preserve">a filename</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_from_gicon"
              c:identifier="gtk_status_icon_set_from_gicon"
              version="2.14">
        <doc xml:whitespace="preserve">Makes @status_icon display the #GIcon.
See gtk_status_icon_new_from_gicon() for details.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="icon" transfer-ownership="none">
            <doc xml:whitespace="preserve">a GIcon</doc>
            <type name="Gio.Icon" c:type="GIcon*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_from_icon_name"
              c:identifier="gtk_status_icon_set_from_icon_name"
              version="2.10 ">
        <doc xml:whitespace="preserve">Makes @status_icon display the icon named @icon_name from the 
current icon theme.
See gtk_status_icon_new_from_icon_name() for details.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="icon_name" transfer-ownership="none">
            <doc xml:whitespace="preserve">an icon name</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_from_pixbuf"
              c:identifier="gtk_status_icon_set_from_pixbuf"
              version="2.10">
        <doc xml:whitespace="preserve">Makes @status_icon display @pixbuf.
See gtk_status_icon_new_from_pixbuf() for details.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="pixbuf" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">a #GdkPixbuf or %NULL</doc>
            <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_from_stock"
              c:identifier="gtk_status_icon_set_from_stock"
              version="2.10 ">
        <doc xml:whitespace="preserve">Makes @status_icon display the stock icon with the id @stock_id.
See gtk_status_icon_new_from_stock() for details.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="stock_id" transfer-ownership="none">
            <doc xml:whitespace="preserve">a stock icon id</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_has_tooltip"
              c:identifier="gtk_status_icon_set_has_tooltip"
              version="2.16">
        <doc xml:whitespace="preserve">Sets the has-tooltip property on @status_icon to @has_tooltip.
See #GtkStatusIcon:has-tooltip for more information.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="has_tooltip" transfer-ownership="none">
            <doc xml:whitespace="preserve">whether or not @status_icon has a tooltip</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_name"
              c:identifier="gtk_status_icon_set_name"
              version="2.20">
        <doc xml:whitespace="preserve">Sets the name of this tray icon.
This should be a string identifying this icon. It is may be
used for sorting the icons in the tray and will not be shown to
the user.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:whitespace="preserve">the name</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_screen"
              c:identifier="gtk_status_icon_set_screen"
              version="2.12">
        <doc xml:whitespace="preserve">Sets the #GdkScreen where @status_icon is displayed; if
the icon is already mapped, it will be unmapped, and
then remapped on the new screen.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="screen" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GdkScreen</doc>
            <type name="Gdk.Screen" c:type="GdkScreen*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_title"
              c:identifier="gtk_status_icon_set_title"
              version="2.18">
        <doc xml:whitespace="preserve">Sets the title of this tray icon.
This should be a short, human-readable, localized string 
describing the tray icon. It may be used by tools like screen
readers to render the tray icon.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="title" transfer-ownership="none">
            <doc xml:whitespace="preserve">the title</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_tooltip_markup"
              c:identifier="gtk_status_icon_set_tooltip_markup"
              version="2.16">
        <doc xml:whitespace="preserve">Sets @markup as the contents of the tooltip, which is marked up with
the &lt;link linkend="PangoMarkupFormat"&gt;Pango text markup language&lt;/link&gt;.
This function will take care of setting #GtkStatusIcon:has-tooltip to %TRUE
and of the default handler for the #GtkStatusIcon::query-tooltip signal.
See also the #GtkStatusIcon:tooltip-markup property and
gtk_tooltip_set_markup().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="markup" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">the contents of the tooltip for @status_icon, or %NULL</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_tooltip_text"
              c:identifier="gtk_status_icon_set_tooltip_text"
              version="2.16">
        <doc xml:whitespace="preserve">Sets @text as the contents of the tooltip.
This function will take care of setting #GtkStatusIcon:has-tooltip to
%TRUE and of the default handler for the #GtkStatusIcon::query-tooltip
signal.
See also the #GtkStatusIcon:tooltip-text property and
gtk_tooltip_set_text().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="text" transfer-ownership="none">
            <doc xml:whitespace="preserve">the contents of the tooltip for @status_icon</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_visible"
              c:identifier="gtk_status_icon_set_visible"
              version="2.10">
        <doc xml:whitespace="preserve">Shows or hides a status icon.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="visible" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE to show the status icon, %FALSE to hide it</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="embedded" version="2.12" transfer-ownership="none">
        <doc xml:whitespace="preserve">%TRUE if the statusicon is embedded in a notification area.</doc>
        <type name="gboolean"/>
      </property>
      <property name="file"
                readable="0"
                writable="1"
                transfer-ownership="none">
        <type name="utf8"/>
      </property>
      <property name="gicon"
                version="2.14"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The #GIcon displayed in the #GtkStatusIcon. For themed icons,
the image will be updated automatically if the theme changes.</doc>
        <type name="Gio.Icon"/>
      </property>
      <property name="has-tooltip"
                version="2.16"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Enables or disables the emission of #GtkStatusIcon::query-tooltip on
tooltip, in this case the status icon will be queried using
#GtkStatusIcon::query-tooltip to determine whether it will provide a
tooltip or not.
Note that setting this property to %TRUE for the first time will change
the event masks of the windows of this status icon to include leave-notify
and motion-notify events. This will not be undone when the property is set
to %FALSE again.
Whether this property is respected is platform dependent.
For plain text tooltips, use #GtkStatusIcon:tooltip-text in preference.</doc>
        <type name="gboolean"/>
      </property>
      <property name="icon-name" writable="1" transfer-ownership="none">
        <type name="utf8"/>
      </property>
      <property name="orientation" version="2.12" transfer-ownership="none">
        <doc xml:whitespace="preserve">The orientation of the tray in which the statusicon 
is embedded.</doc>
        <type name="Orientation"/>
      </property>
      <property name="pixbuf" writable="1" transfer-ownership="none">
        <type name="GdkPixbuf.Pixbuf"/>
      </property>
      <property name="screen" writable="1" transfer-ownership="none">
        <type name="Gdk.Screen"/>
      </property>
      <property name="size" transfer-ownership="none">
        <type name="gint"/>
      </property>
      <property name="stock" writable="1" transfer-ownership="none">
        <type name="utf8"/>
      </property>
      <property name="storage-type" transfer-ownership="none">
        <type name="ImageType"/>
      </property>
      <property name="title"
                version="2.18"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The title of this tray icon. This should be a short, human-readable,
localized string describing the tray icon. It may be used by tools
like screen readers to render the tray icon.</doc>
        <type name="utf8"/>
      </property>
      <property name="tooltip-markup"
                version="2.16"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Sets the text of tooltip to be the given string, which is marked up
with the &lt;link linkend="PangoMarkupFormat"&gt;Pango text markup 
language&lt;/link&gt;. Also see gtk_tooltip_set_markup().
This is a convenience property which will take care of getting the
tooltip shown if the given string is not %NULL.
#GtkStatusIcon:has-tooltip will automatically be set to %TRUE and
the default handler for the #GtkStatusIcon::query-tooltip signal
will take care of displaying the tooltip.
On some platforms, embedded markup will be ignored.</doc>
        <type name="utf8"/>
      </property>
      <property name="tooltip-text"
                version="2.16"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Sets the text of tooltip to be the given string.
Also see gtk_tooltip_set_text().
This is a convenience property which will take care of getting the
tooltip shown if the given string is not %NULL.
#GtkStatusIcon:has-tooltip will automatically be set to %TRUE and
the default handler for the #GtkStatusIcon::query-tooltip signal
will take care of displaying the tooltip.
Note that some platforms have limitations on the length of tooltips
that they allow on status icons, e.g. Windows only shows the first
64 characters.</doc>
        <type name="utf8"/>
      </property>
      <property name="visible" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="StatusIconPrivate" c:type="GtkStatusIconPrivate*"/>
      </field>
      <glib:signal name="activate" version="2.10">
        <doc xml:whitespace="preserve">Gets emitted when the user activates the status icon. 
If and how status icons can activated is platform-dependent.
Unlike most G_SIGNAL_ACTION signals, this signal is meant to 
be used by applications and should be wrapped by language bindings.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
      <glib:signal name="button-press-event" version="2.14">
        <doc xml:whitespace="preserve">The ::button-press-event signal will be emitted when a button
(typically from a mouse) is pressed.
Whether this event is emitted is platform-dependent.  Use the ::activate
and ::popup-menu signals in preference.
for the event. %FALSE to propagate the event further.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE to stop other handlers from being invoked</doc>
          <type name="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GdkEventButton which triggered this signal</doc>
            <type name="Gdk.Event"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="button-release-event" version="2.14">
        <doc xml:whitespace="preserve">The ::button-release-event signal will be emitted when a button
(typically from a mouse) is released.
Whether this event is emitted is platform-dependent.  Use the ::activate
and ::popup-menu signals in preference.
for the event. %FALSE to propagate the event further.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE to stop other handlers from being invoked</doc>
          <type name="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GdkEventButton which triggered this signal</doc>
            <type name="Gdk.Event"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="popup-menu" version="2.10">
        <doc xml:whitespace="preserve">Gets emitted when the user brings up the context menu
of the status icon. Whether status icons can have context 
menus and how these are activated is platform-dependent.
The @button and @activate_time parameters should be 
passed as the last to arguments to gtk_menu_popup().
Unlike most G_SIGNAL_ACTION signals, this signal is meant to 
be used by applications and should be wrapped by language bindings.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the button that was pressed, or 0 if the signal is not emitted in response to a button press event</doc>
            <type name="guint"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <doc xml:whitespace="preserve">the timestamp of the event that triggered the signal emission</doc>
            <type name="guint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="query-tooltip" version="2.16">
        <doc xml:whitespace="preserve">Emitted when the #GtkSettings:gtk-tooltip-timeout has expired with the
cursor hovering above @status_icon; or emitted when @status_icon got
focus in keyboard mode.
Using the given coordinates, the signal handler should determine
whether a tooltip should be shown for @status_icon. If this is
the case %TRUE should be returned, %FALSE otherwise. Note that if
should not be used.
The signal handler is free to manipulate @tooltip with the therefore
destined function calls.
Whether this signal is emitted is platform-dependent.
For plain text tooltips, use #GtkStatusIcon:tooltip-text in preference.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if @tooltip should be shown right now, %FALSE otherwise.</doc>
          <type name="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the x coordinate of the cursor position where the request has been emitted, relative to @status_icon</doc>
            <type name="gint"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <doc xml:whitespace="preserve">the y coordinate of the cursor position where the request has been emitted, relative to @status_icon</doc>
            <type name="gint"/>
          </parameter>
          <parameter name="p1" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE if the tooltip was trigged using the keyboard</doc>
            <type name="gboolean"/>
          </parameter>
          <parameter name="p2" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkTooltip</doc>
            <type name="Tooltip"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="scroll-event" version="2.16">
        <doc xml:whitespace="preserve">The ::scroll-event signal is emitted when a button in the 4 to 7
range is pressed. Wheel mice are usually configured to generate
button press events for buttons 4 and 5 when the wheel is turned.
Whether this event is emitted is platform-dependent.
%FALSE to propagate the event further.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE to stop other handlers from being invoked for the event.</doc>
          <type name="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GdkEventScroll which triggered this signal</doc>
            <type name="Gdk.Event"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="size-changed" version="2.10">
        <doc xml:whitespace="preserve">Gets emitted when the size available for the image
changes, e.g. because the notification area got resized.
size. Otherwise, GTK+ will scale the icon as necessary.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the icon was updated for the new</doc>
          <type name="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the new size</doc>
            <type name="gint"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="StatusIconClass"
            c:type="GtkStatusIconClass"
            glib:is-gtype-struct-for="StatusIcon">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="activate">
        <callback name="activate">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="status_icon" transfer-ownership="none">
              <type name="StatusIcon" c:type="GtkStatusIcon*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="popup_menu">
        <callback name="popup_menu">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="status_icon" transfer-ownership="none">
              <type name="StatusIcon" c:type="GtkStatusIcon*"/>
            </parameter>
            <parameter name="button" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="activate_time" transfer-ownership="none">
              <type name="guint32" c:type="guint32"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="size_changed">
        <callback name="size_changed">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="status_icon" transfer-ownership="none">
              <type name="StatusIcon" c:type="GtkStatusIcon*"/>
            </parameter>
            <parameter name="size" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="button_press_event">
        <callback name="button_press_event">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="status_icon" transfer-ownership="none">
              <type name="StatusIcon" c:type="GtkStatusIcon*"/>
            </parameter>
            <parameter name="event" transfer-ownership="none">
              <type name="Gdk.EventButton" c:type="GdkEventButton*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="button_release_event">
        <callback name="button_release_event">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="status_icon" transfer-ownership="none">
              <type name="StatusIcon" c:type="GtkStatusIcon*"/>
            </parameter>
            <parameter name="event" transfer-ownership="none">
              <type name="Gdk.EventButton" c:type="GdkEventButton*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="scroll_event">
        <callback name="scroll_event">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="status_icon" transfer-ownership="none">
              <type name="StatusIcon" c:type="GtkStatusIcon*"/>
            </parameter>
            <parameter name="event" transfer-ownership="none">
              <type name="Gdk.EventScroll" c:type="GdkEventScroll*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="query_tooltip">
        <callback name="query_tooltip">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="status_icon" transfer-ownership="none">
              <type name="StatusIcon" c:type="GtkStatusIcon*"/>
            </parameter>
            <parameter name="x" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="y" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="keyboard_mode" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
            <parameter name="tooltip" transfer-ownership="none">
              <type name="Tooltip" c:type="GtkTooltip*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="__gtk_reserved1">
        <type name="gpointer" c:type="void*"/>
      </field>
      <field name="__gtk_reserved2">
        <type name="gpointer" c:type="void*"/>
      </field>
    </record>
    <record name="StatusIconPrivate"
            c:type="GtkStatusIconPrivate"
            disguised="1">
    </record>
    <class name="Statusbar"
           c:symbol-prefix="statusbar"
           c:type="GtkStatusbar"
           parent="HBox"
           glib:type-name="GtkStatusbar"
           glib:get-type="gtk_statusbar_get_type"
           glib:type-struct="StatusbarClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Buildable"/>
      <implements name="Orientable"/>
      <implements name="SizeRequest"/>
      <constructor name="new" c:identifier="gtk_statusbar_new">
        <doc xml:whitespace="preserve">Creates a new #GtkStatusbar ready for messages.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the new #GtkStatusbar</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="get_context_id"
              c:identifier="gtk_statusbar_get_context_id">
        <doc xml:whitespace="preserve">Returns a new context identifier, given a description 
of the actual context. Note that the description is 
&lt;emphasis&gt;not&lt;/emphasis&gt; shown in the UI.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">an integer id</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="context_description" transfer-ownership="none">
            <doc xml:whitespace="preserve">textual description of what context the new message is being used in</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_has_resize_grip"
              c:identifier="gtk_statusbar_get_has_resize_grip">
        <doc xml:whitespace="preserve">Returns whether the statusbar has a resize grip.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the statusbar has a resize grip.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_message_area"
              c:identifier="gtk_statusbar_get_message_area"
              version="2.20">
        <doc xml:whitespace="preserve">Retrieves the box containing the label widget.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GtkBox</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
      </method>
      <method name="pop" c:identifier="gtk_statusbar_pop">
        <doc xml:whitespace="preserve">Removes the first message in the #GtkStatusBar's stack
with the given context id. 
Note that this may not change the displayed message, if 
the message at the top of the stack has a different 
context id.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="context_id" transfer-ownership="none">
            <doc xml:whitespace="preserve">a context identifier</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="push" c:identifier="gtk_statusbar_push">
        <doc xml:whitespace="preserve">Pushes a new message onto a statusbar's stack.
gtk_statusbar_remove().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a message id that can be used with</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="context_id" transfer-ownership="none">
            <doc xml:whitespace="preserve">the message's context id, as returned by gtk_statusbar_get_context_id()</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="text" transfer-ownership="none">
            <doc xml:whitespace="preserve">the message to add to the statusbar</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove" c:identifier="gtk_statusbar_remove">
        <doc xml:whitespace="preserve">Forces the removal of a message from a statusbar's stack. 
The exact @context_id and @message_id must be specified.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="context_id" transfer-ownership="none">
            <doc xml:whitespace="preserve">a context identifier</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="message_id" transfer-ownership="none">
            <doc xml:whitespace="preserve">a message identifier, as returned by gtk_statusbar_push()</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_all"
              c:identifier="gtk_statusbar_remove_all"
              version="2.22">
        <doc xml:whitespace="preserve">Forces the removal of all messages from a statusbar's
stack with the exact @context_id.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="context_id" transfer-ownership="none">
            <doc xml:whitespace="preserve">a context identifier</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_has_resize_grip"
              c:identifier="gtk_statusbar_set_has_resize_grip">
        <doc xml:whitespace="preserve">Sets whether the statusbar has a resize grip. 
%TRUE by default.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="setting" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE to have a resize grip</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="has-resize-grip"
                version="2.4"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Whether the statusbar has a grip for resizing the toplevel window.</doc>
        <type name="gboolean"/>
      </property>
      <field name="parent_widget">
        <type name="HBox" c:type="GtkHBox"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="StatusbarPrivate" c:type="GtkStatusbarPrivate*"/>
      </field>
      <glib:signal name="text-popped">
        <doc xml:whitespace="preserve">Is emitted whenever a new message is popped off a statusbar's stack.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the context id of the relevant message/statusbar.</doc>
            <type name="guint"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <doc xml:whitespace="preserve">the message that was just popped.</doc>
            <type name="utf8"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="text-pushed">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="guint"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="utf8"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="StatusbarClass"
            c:type="GtkStatusbarClass"
            glib:is-gtype-struct-for="Statusbar">
      <field name="parent_class">
        <type name="HBoxClass" c:type="GtkHBoxClass"/>
      </field>
      <field name="reserved">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="text_pushed">
        <callback name="text_pushed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="statusbar" transfer-ownership="none">
              <type name="Statusbar" c:type="GtkStatusbar*"/>
            </parameter>
            <parameter name="context_id" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="text" transfer-ownership="none">
              <type name="utf8" c:type="gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="text_popped">
        <callback name="text_popped">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="statusbar" transfer-ownership="none">
              <type name="Statusbar" c:type="GtkStatusbar*"/>
            </parameter>
            <parameter name="context_id" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="text" transfer-ownership="none">
              <type name="utf8" c:type="gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_gtk_reserved1" introspectable="0">
        <callback name="_gtk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved2" introspectable="0">
        <callback name="_gtk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved3" introspectable="0">
        <callback name="_gtk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved4" introspectable="0">
        <callback name="_gtk_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="StatusbarPrivate" c:type="GtkStatusbarPrivate" disguised="1">
    </record>
    <record name="StockItem" c:type="GtkStockItem">
      <field name="stock_id" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="label" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="modifier" writable="1">
        <type name="Gdk.ModifierType" c:type="GdkModifierType"/>
      </field>
      <field name="keyval" writable="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="translation_domain" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <method name="copy"
              c:identifier="gtk_stock_item_copy"
              introspectable="0">
        <doc xml:whitespace="preserve">Copies a stock item, mostly useful for language bindings and not in applications.</doc>
        <return-value>
          <doc xml:whitespace="preserve">a new #GtkStockItem</doc>
          <type name="StockItem" c:type="GtkStockItem*"/>
        </return-value>
      </method>
      <method name="free" c:identifier="gtk_stock_item_free">
        <doc xml:whitespace="preserve">Frees a stock item allocated on the heap, such as one returned by
gtk_stock_item_copy(). Also frees the fields inside the stock item,
if they are not %NULL.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
    </record>
    <class name="Style"
           c:symbol-prefix="style"
           c:type="GtkStyle"
           parent="GObject.Object"
           glib:type-name="GtkStyle"
           glib:get-type="gtk_style_get_type"
           glib:type-struct="StyleClass">
      <constructor name="new" c:identifier="gtk_style_new">
        <doc xml:whitespace="preserve">Creates a new #GtkStyle.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new #GtkStyle.</doc>
          <type name="Style" c:type="GtkStyle*"/>
        </return-value>
      </constructor>
      <virtual-method name="clone" introspectable="0">
        <return-value>
          <type name="Style" c:type="GtkStyle*"/>
        </return-value>
      </virtual-method>
      <virtual-method name="copy">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="src" transfer-ownership="none">
            <type name="Style" c:type="GtkStyle*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="draw_arrow">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="window" transfer-ownership="none">
            <type name="Gdk.Window" c:type="GdkWindow*"/>
          </parameter>
          <parameter name="state_type" transfer-ownership="none">
            <type name="StateType" c:type="GtkStateType"/>
          </parameter>
          <parameter name="shadow_type" transfer-ownership="none">
            <type name="ShadowType" c:type="GtkShadowType"/>
          </parameter>
          <parameter name="area" transfer-ownership="none">
            <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
          </parameter>
          <parameter name="widget" transfer-ownership="none">
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="detail" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arrow_type" transfer-ownership="none">
            <type name="ArrowType" c:type="GtkArrowType"/>
          </parameter>
          <parameter name="fill" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="draw_box">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="window" transfer-ownership="none">
            <type name="Gdk.Window" c:type="GdkWindow*"/>
          </parameter>
          <parameter name="state_type" transfer-ownership="none">
            <type name="StateType" c:type="GtkStateType"/>
          </parameter>
          <parameter name="shadow_type" transfer-ownership="none">
            <type name="ShadowType" c:type="GtkShadowType"/>
          </parameter>
          <parameter name="area" transfer-ownership="none">
            <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
          </parameter>
          <parameter name="widget" transfer-ownership="none">
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="detail" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="draw_box_gap">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="window" transfer-ownership="none">
            <type name="Gdk.Window" c:type="GdkWindow*"/>
          </parameter>
          <parameter name="state_type" transfer-ownership="none">
            <type name="StateType" c:type="GtkStateType"/>
          </parameter>
          <parameter name="shadow_type" transfer-ownership="none">
            <type name="ShadowType" c:type="GtkShadowType"/>
          </parameter>
          <parameter name="area" transfer-ownership="none">
            <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
          </parameter>
          <parameter name="widget" transfer-ownership="none">
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="detail" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="gap_side" transfer-ownership="none">
            <type name="PositionType" c:type="GtkPositionType"/>
          </parameter>
          <parameter name="gap_x" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="gap_width" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="draw_check">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="window" transfer-ownership="none">
            <type name="Gdk.Window" c:type="GdkWindow*"/>
          </parameter>
          <parameter name="state_type" transfer-ownership="none">
            <type name="StateType" c:type="GtkStateType"/>
          </parameter>
          <parameter name="shadow_type" transfer-ownership="none">
            <type name="ShadowType" c:type="GtkShadowType"/>
          </parameter>
          <parameter name="area" transfer-ownership="none">
            <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
          </parameter>
          <parameter name="widget" transfer-ownership="none">
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="detail" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="draw_diamond">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="window" transfer-ownership="none">
            <type name="Gdk.Window" c:type="GdkWindow*"/>
          </parameter>
          <parameter name="state_type" transfer-ownership="none">
            <type name="StateType" c:type="GtkStateType"/>
          </parameter>
          <parameter name="shadow_type" transfer-ownership="none">
            <type name="ShadowType" c:type="GtkShadowType"/>
          </parameter>
          <parameter name="area" transfer-ownership="none">
            <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
          </parameter>
          <parameter name="widget" transfer-ownership="none">
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="detail" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="draw_expander">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="window" transfer-ownership="none">
            <type name="Gdk.Window" c:type="GdkWindow*"/>
          </parameter>
          <parameter name="state_type" transfer-ownership="none">
            <type name="StateType" c:type="GtkStateType"/>
          </parameter>
          <parameter name="area" transfer-ownership="none">
            <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
          </parameter>
          <parameter name="widget" transfer-ownership="none">
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="detail" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="expander_style" transfer-ownership="none">
            <type name="ExpanderStyle" c:type="GtkExpanderStyle"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="draw_extension">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="window" transfer-ownership="none">
            <type name="Gdk.Window" c:type="GdkWindow*"/>
          </parameter>
          <parameter name="state_type" transfer-ownership="none">
            <type name="StateType" c:type="GtkStateType"/>
          </parameter>
          <parameter name="shadow_type" transfer-ownership="none">
            <type name="ShadowType" c:type="GtkShadowType"/>
          </parameter>
          <parameter name="area" transfer-ownership="none">
            <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
          </parameter>
          <parameter name="widget" transfer-ownership="none">
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="detail" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="gap_side" transfer-ownership="none">
            <type name="PositionType" c:type="GtkPositionType"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="draw_flat_box">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="window" transfer-ownership="none">
            <type name="Gdk.Window" c:type="GdkWindow*"/>
          </parameter>
          <parameter name="state_type" transfer-ownership="none">
            <type name="StateType" c:type="GtkStateType"/>
          </parameter>
          <parameter name="shadow_type" transfer-ownership="none">
            <type name="ShadowType" c:type="GtkShadowType"/>
          </parameter>
          <parameter name="area" transfer-ownership="none">
            <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
          </parameter>
          <parameter name="widget" transfer-ownership="none">
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="detail" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="draw_focus">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="window" transfer-ownership="none">
            <type name="Gdk.Window" c:type="GdkWindow*"/>
          </parameter>
          <parameter name="state_type" transfer-ownership="none">
            <type name="StateType" c:type="GtkStateType"/>
          </parameter>
          <parameter name="area" transfer-ownership="none">
            <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
          </parameter>
          <parameter name="widget" transfer-ownership="none">
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="detail" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="draw_handle">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="window" transfer-ownership="none">
            <type name="Gdk.Window" c:type="GdkWindow*"/>
          </parameter>
          <parameter name="state_type" transfer-ownership="none">
            <type name="StateType" c:type="GtkStateType"/>
          </parameter>
          <parameter name="shadow_type" transfer-ownership="none">
            <type name="ShadowType" c:type="GtkShadowType"/>
          </parameter>
          <parameter name="area" transfer-ownership="none">
            <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
          </parameter>
          <parameter name="widget" transfer-ownership="none">
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="detail" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="orientation" transfer-ownership="none">
            <type name="Orientation" c:type="GtkOrientation"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="draw_hline">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="window" transfer-ownership="none">
            <type name="Gdk.Window" c:type="GdkWindow*"/>
          </parameter>
          <parameter name="state_type" transfer-ownership="none">
            <type name="StateType" c:type="GtkStateType"/>
          </parameter>
          <parameter name="area" transfer-ownership="none">
            <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
          </parameter>
          <parameter name="widget" transfer-ownership="none">
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="detail" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="x1" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="x2" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="draw_layout">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="window" transfer-ownership="none">
            <type name="Gdk.Window" c:type="GdkWindow*"/>
          </parameter>
          <parameter name="state_type" transfer-ownership="none">
            <type name="StateType" c:type="GtkStateType"/>
          </parameter>
          <parameter name="use_text" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="area" transfer-ownership="none">
            <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
          </parameter>
          <parameter name="widget" transfer-ownership="none">
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="detail" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="layout" transfer-ownership="none">
            <type name="Pango.Layout" c:type="PangoLayout*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="draw_option">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="window" transfer-ownership="none">
            <type name="Gdk.Window" c:type="GdkWindow*"/>
          </parameter>
          <parameter name="state_type" transfer-ownership="none">
            <type name="StateType" c:type="GtkStateType"/>
          </parameter>
          <parameter name="shadow_type" transfer-ownership="none">
            <type name="ShadowType" c:type="GtkShadowType"/>
          </parameter>
          <parameter name="area" transfer-ownership="none">
            <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
          </parameter>
          <parameter name="widget" transfer-ownership="none">
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="detail" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="draw_resize_grip">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="window" transfer-ownership="none">
            <type name="Gdk.Window" c:type="GdkWindow*"/>
          </parameter>
          <parameter name="state_type" transfer-ownership="none">
            <type name="StateType" c:type="GtkStateType"/>
          </parameter>
          <parameter name="area" transfer-ownership="none">
            <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
          </parameter>
          <parameter name="widget" transfer-ownership="none">
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="detail" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="edge" transfer-ownership="none">
            <type name="Gdk.WindowEdge" c:type="GdkWindowEdge"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="draw_shadow">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="window" transfer-ownership="none">
            <type name="Gdk.Window" c:type="GdkWindow*"/>
          </parameter>
          <parameter name="state_type" transfer-ownership="none">
            <type name="StateType" c:type="GtkStateType"/>
          </parameter>
          <parameter name="shadow_type" transfer-ownership="none">
            <type name="ShadowType" c:type="GtkShadowType"/>
          </parameter>
          <parameter name="area" transfer-ownership="none">
            <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
          </parameter>
          <parameter name="widget" transfer-ownership="none">
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="detail" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="draw_shadow_gap">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="window" transfer-ownership="none">
            <type name="Gdk.Window" c:type="GdkWindow*"/>
          </parameter>
          <parameter name="state_type" transfer-ownership="none">
            <type name="StateType" c:type="GtkStateType"/>
          </parameter>
          <parameter name="shadow_type" transfer-ownership="none">
            <type name="ShadowType" c:type="GtkShadowType"/>
          </parameter>
          <parameter name="area" transfer-ownership="none">
            <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
          </parameter>
          <parameter name="widget" transfer-ownership="none">
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="detail" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="gap_side" transfer-ownership="none">
            <type name="PositionType" c:type="GtkPositionType"/>
          </parameter>
          <parameter name="gap_x" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="gap_width" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="draw_slider">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="window" transfer-ownership="none">
            <type name="Gdk.Window" c:type="GdkWindow*"/>
          </parameter>
          <parameter name="state_type" transfer-ownership="none">
            <type name="StateType" c:type="GtkStateType"/>
          </parameter>
          <parameter name="shadow_type" transfer-ownership="none">
            <type name="ShadowType" c:type="GtkShadowType"/>
          </parameter>
          <parameter name="area" transfer-ownership="none">
            <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
          </parameter>
          <parameter name="widget" transfer-ownership="none">
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="detail" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="orientation" transfer-ownership="none">
            <type name="Orientation" c:type="GtkOrientation"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="draw_spinner">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="window" transfer-ownership="none">
            <type name="Gdk.Window" c:type="GdkWindow*"/>
          </parameter>
          <parameter name="state_type" transfer-ownership="none">
            <type name="StateType" c:type="GtkStateType"/>
          </parameter>
          <parameter name="area" transfer-ownership="none">
            <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
          </parameter>
          <parameter name="widget" transfer-ownership="none">
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="detail" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="step" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="draw_tab">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="window" transfer-ownership="none">
            <type name="Gdk.Window" c:type="GdkWindow*"/>
          </parameter>
          <parameter name="state_type" transfer-ownership="none">
            <type name="StateType" c:type="GtkStateType"/>
          </parameter>
          <parameter name="shadow_type" transfer-ownership="none">
            <type name="ShadowType" c:type="GtkShadowType"/>
          </parameter>
          <parameter name="area" transfer-ownership="none">
            <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
          </parameter>
          <parameter name="widget" transfer-ownership="none">
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="detail" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="draw_vline">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="window" transfer-ownership="none">
            <type name="Gdk.Window" c:type="GdkWindow*"/>
          </parameter>
          <parameter name="state_type" transfer-ownership="none">
            <type name="StateType" c:type="GtkStateType"/>
          </parameter>
          <parameter name="area" transfer-ownership="none">
            <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
          </parameter>
          <parameter name="widget" transfer-ownership="none">
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="detail" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="y1_" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="y2_" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="init_from_rc">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="rc_style" transfer-ownership="none">
            <type name="RcStyle" c:type="GtkRcStyle*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="render_icon" invoker="render_icon">
        <doc xml:whitespace="preserve">Renders the icon specified by @source at the given @size
according to the given parameters and returns the result in a
pixbuf.
containing the rendered icon</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a newly-created #GdkPixbuf</doc>
          <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
        <parameters>
          <parameter name="source" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GtkIconSource specifying the icon to render</doc>
            <type name="IconSource" c:type="GtkIconSource*"/>
          </parameter>
          <parameter name="direction" transfer-ownership="none">
            <doc xml:whitespace="preserve">a text direction</doc>
            <type name="TextDirection" c:type="GtkTextDirection"/>
          </parameter>
          <parameter name="state" transfer-ownership="none">
            <doc xml:whitespace="preserve">a state</doc>
            <type name="StateType" c:type="GtkStateType"/>
          </parameter>
          <parameter name="size" transfer-ownership="none">
            <doc xml:whitespace="preserve">the size to render the icon at. A size of (GtkIconSize)-1 means render at the size of the source and don't scale.</doc>
            <type name="gint"/>
          </parameter>
          <parameter name="widget" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">the widget</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="detail" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">a style detail</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_background" invoker="set_background">
        <doc xml:whitespace="preserve">Sets the background of @window to the background color or pixmap
specified by @style for the given state.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="window" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GdkWindow</doc>
            <type name="Gdk.Window" c:type="GdkWindow*"/>
          </parameter>
          <parameter name="state_type" transfer-ownership="none">
            <doc xml:whitespace="preserve">a state</doc>
            <type name="StateType" c:type="GtkStateType"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="apply_default_background"
              c:identifier="gtk_style_apply_default_background">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="window" transfer-ownership="none">
            <type name="Gdk.Window" c:type="GdkWindow*"/>
          </parameter>
          <parameter name="set_bg" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="state_type" transfer-ownership="none">
            <type name="StateType" c:type="GtkStateType"/>
          </parameter>
          <parameter name="area" transfer-ownership="none" allow-none="1">
            <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="attach" c:identifier="gtk_style_attach" introspectable="0">
        <doc xml:whitespace="preserve">Attaches a style to a window; this process allocates the
colors and creates the GC's for the style - it specializes
it to a particular visual and colormap. The process may
involve the creation of a new style if the style has already
been attached to a window with a different style and colormap.
Since this function may return a new object, you have to use it
in the following way:
&lt;literal&gt;style = gtk_style_attach (style, window)&lt;/literal&gt;
If the style is newly created, the style parameter
will be unref'ed, and the new style will have
a reference count belonging to the caller.</doc>
        <return-value>
          <doc xml:whitespace="preserve">Either @style, or a newly-created #GtkStyle.</doc>
          <type name="Style" c:type="GtkStyle*"/>
        </return-value>
        <parameters>
          <parameter name="window" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GdkWindow.</doc>
            <type name="Gdk.Window" c:type="GdkWindow*"/>
          </parameter>
        </parameters>
      </method>
      <method name="copy" c:identifier="gtk_style_copy">
        <doc xml:whitespace="preserve">Creates a copy of the passed in #GtkStyle object.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a copy of @style</doc>
          <type name="Style" c:type="GtkStyle*"/>
        </return-value>
      </method>
      <method name="detach" c:identifier="gtk_style_detach">
        <doc xml:whitespace="preserve">Detaches a style from a window. If the style is not attached
to any windows anymore, it is unrealized. See gtk_style_attach().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="get"
              c:identifier="gtk_style_get"
              version="2.16"
              introspectable="0">
        <doc xml:whitespace="preserve">Gets the values of a multiple style properties for @widget_type
from @style.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="widget_type" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GType of a descendant of #GtkWidget</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
          <parameter name="first_property_name" transfer-ownership="none">
            <doc xml:whitespace="preserve">the name of the first style property to get</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter transfer-ownership="none">
            <varargs>
            </varargs>
          </parameter>
        </parameters>
      </method>
      <method name="get_style_property"
              c:identifier="gtk_style_get_style_property"
              version="2.16">
        <doc xml:whitespace="preserve">Queries the value of a style property corresponding to a
widget class is in the given style.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="widget_type" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GType of a descendant of #GtkWidget</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
          <parameter name="property_name" transfer-ownership="none">
            <doc xml:whitespace="preserve">the name of the style property to get</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GValue where the value of the property being queried will be stored</doc>
            <type name="GObject.Value" c:type="GValue*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_valist"
              c:identifier="gtk_style_get_valist"
              version="2.16"
              introspectable="0">
        <doc xml:whitespace="preserve">Non-vararg variant of gtk_style_get().
Used primarily by language bindings.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="widget_type" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GType of a descendant of #GtkWidget</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
          <parameter name="first_property_name" transfer-ownership="none">
            <doc xml:whitespace="preserve">the name of the first style property to get</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="var_args" transfer-ownership="none">
            <doc xml:whitespace="preserve">a &lt;type&gt;va_list&lt;/type&gt; of pairs of property names and locations to return the property values, starting with the location for @first_property_name.</doc>
            <type name="va_list" c:type="va_list"/>
          </parameter>
        </parameters>
      </method>
      <method name="lookup_color"
              c:identifier="gtk_style_lookup_color"
              version="2.10">
        <doc xml:whitespace="preserve">Looks up @color_name in the style's logical color mappings,
filling in @color and returning %TRUE if found, otherwise
returning %FALSE. Do not cache the found mapping, because
it depends on the #GtkStyle and might change when a theme
switch occurs.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the mapping was found.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="color_name" transfer-ownership="none">
            <doc xml:whitespace="preserve">the name of the logical color to look up</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="color" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GdkColor to fill in</doc>
            <type name="Gdk.Color" c:type="GdkColor*"/>
          </parameter>
        </parameters>
      </method>
      <method name="lookup_icon_set" c:identifier="gtk_style_lookup_icon_set">
        <doc xml:whitespace="preserve">Looks up @stock_id in the icon factories associated with @style
and the default icon factory, returning an icon set if found,
otherwise %NULL.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">icon set of @stock_id</doc>
          <type name="IconSet" c:type="GtkIconSet*"/>
        </return-value>
        <parameters>
          <parameter name="stock_id" transfer-ownership="none">
            <doc xml:whitespace="preserve">an icon name</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="render_icon" c:identifier="gtk_style_render_icon">
        <doc xml:whitespace="preserve">Renders the icon specified by @source at the given @size
according to the given parameters and returns the result in a
pixbuf.
containing the rendered icon</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a newly-created #GdkPixbuf</doc>
          <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
        <parameters>
          <parameter name="source" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GtkIconSource specifying the icon to render</doc>
            <type name="IconSource" c:type="GtkIconSource*"/>
          </parameter>
          <parameter name="direction" transfer-ownership="none">
            <doc xml:whitespace="preserve">a text direction</doc>
            <type name="TextDirection" c:type="GtkTextDirection"/>
          </parameter>
          <parameter name="state" transfer-ownership="none">
            <doc xml:whitespace="preserve">a state</doc>
            <type name="StateType" c:type="GtkStateType"/>
          </parameter>
          <parameter name="size" transfer-ownership="none">
            <doc xml:whitespace="preserve">the size to render the icon at. A size of (GtkIconSize)-1 means render at the size of the source and don't scale.</doc>
            <type name="gint"/>
          </parameter>
          <parameter name="widget" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">the widget</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="detail" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">a style detail</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_background" c:identifier="gtk_style_set_background">
        <doc xml:whitespace="preserve">Sets the background of @window to the background color or pixmap
specified by @style for the given state.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="window" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GdkWindow</doc>
            <type name="Gdk.Window" c:type="GdkWindow*"/>
          </parameter>
          <parameter name="state_type" transfer-ownership="none">
            <doc xml:whitespace="preserve">a state</doc>
            <type name="StateType" c:type="GtkStateType"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="fg">
        <array zero-terminated="0" c:type="GdkColor" fixed-size="5">
          <type name="Gdk.Color" c:type="GdkColor"/>
        </array>
      </field>
      <field name="bg">
        <array zero-terminated="0" c:type="GdkColor" fixed-size="5">
          <type name="Gdk.Color" c:type="GdkColor"/>
        </array>
      </field>
      <field name="light">
        <array zero-terminated="0" c:type="GdkColor" fixed-size="5">
          <type name="Gdk.Color" c:type="GdkColor"/>
        </array>
      </field>
      <field name="dark">
        <array zero-terminated="0" c:type="GdkColor" fixed-size="5">
          <type name="Gdk.Color" c:type="GdkColor"/>
        </array>
      </field>
      <field name="mid">
        <array zero-terminated="0" c:type="GdkColor" fixed-size="5">
          <type name="Gdk.Color" c:type="GdkColor"/>
        </array>
      </field>
      <field name="text">
        <array zero-terminated="0" c:type="GdkColor" fixed-size="5">
          <type name="Gdk.Color" c:type="GdkColor"/>
        </array>
      </field>
      <field name="base">
        <array zero-terminated="0" c:type="GdkColor" fixed-size="5">
          <type name="Gdk.Color" c:type="GdkColor"/>
        </array>
      </field>
      <field name="text_aa">
        <array zero-terminated="0" c:type="GdkColor" fixed-size="5">
          <type name="Gdk.Color" c:type="GdkColor"/>
        </array>
      </field>
      <field name="black">
        <type name="Gdk.Color" c:type="GdkColor"/>
      </field>
      <field name="white">
        <type name="Gdk.Color" c:type="GdkColor"/>
      </field>
      <field name="font_desc">
        <type name="Pango.FontDescription" c:type="PangoFontDescription*"/>
      </field>
      <field name="xthickness">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="ythickness">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="bg_pixmap">
        <array zero-terminated="0" c:type="GdkPixmap" fixed-size="5">
          <type name="Gdk.Pixmap" c:type="GdkPixmap*"/>
        </array>
      </field>
      <field name="attach_count">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="depth">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="colormap">
        <type name="Gdk.Colormap" c:type="GdkColormap*"/>
      </field>
      <field name="private_font_desc">
        <type name="Pango.FontDescription" c:type="PangoFontDescription*"/>
      </field>
      <field name="rc_style">
        <type name="RcStyle" c:type="GtkRcStyle*"/>
      </field>
      <field name="styles">
        <type name="GLib.SList" c:type="GSList*">
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </field>
      <field name="property_cache">
        <array name="GLib.Array" c:type="GArray*">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
      <field name="icon_factories">
        <type name="GLib.SList" c:type="GSList*">
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </field>
      <glib:signal name="realize" version="2.4">
        <doc xml:whitespace="preserve">Emitted when the style has been initialized for a particular
colormap and depth. Connecting to this signal is probably seldom
useful since most of the time applications and widgets only
deal with styles that have been already realized.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
      <glib:signal name="unrealize" version="2.4">
        <doc xml:whitespace="preserve">Emitted when the aspects of the style specific to a particular colormap
and depth are being cleaned up. A connection to this signal can be useful
if a widget wants to cache objects as object data on #GtkStyle.
This signal provides a convenient place to free such cached objects.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="StyleClass"
            c:type="GtkStyleClass"
            glib:is-gtype-struct-for="Style">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="realize">
        <callback name="realize">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="style" transfer-ownership="none">
              <type name="Style" c:type="GtkStyle*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="unrealize">
        <callback name="unrealize">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="style" transfer-ownership="none">
              <type name="Style" c:type="GtkStyle*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="copy">
        <callback name="copy">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="style" transfer-ownership="none">
              <type name="Style" c:type="GtkStyle*"/>
            </parameter>
            <parameter name="src" transfer-ownership="none">
              <type name="Style" c:type="GtkStyle*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="clone" introspectable="0">
        <callback name="clone" introspectable="0">
          <return-value>
            <type name="Style" c:type="GtkStyle*"/>
          </return-value>
          <parameters>
            <parameter name="style" transfer-ownership="none">
              <type name="Style" c:type="GtkStyle*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="init_from_rc">
        <callback name="init_from_rc">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="style" transfer-ownership="none">
              <type name="Style" c:type="GtkStyle*"/>
            </parameter>
            <parameter name="rc_style" transfer-ownership="none">
              <type name="RcStyle" c:type="GtkRcStyle*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_background">
        <callback name="set_background">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="style" transfer-ownership="none">
              <type name="Style" c:type="GtkStyle*"/>
            </parameter>
            <parameter name="window" transfer-ownership="none">
              <doc xml:whitespace="preserve">a #GdkWindow</doc>
              <type name="Gdk.Window" c:type="GdkWindow*"/>
            </parameter>
            <parameter name="state_type" transfer-ownership="none">
              <doc xml:whitespace="preserve">a state</doc>
              <type name="StateType" c:type="GtkStateType"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="render_icon">
        <callback name="render_icon">
          <return-value transfer-ownership="full">
            <doc xml:whitespace="preserve">a newly-created #GdkPixbuf</doc>
            <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
          </return-value>
          <parameters>
            <parameter name="style" transfer-ownership="none">
              <type name="Style" c:type="GtkStyle*"/>
            </parameter>
            <parameter name="source" transfer-ownership="none">
              <doc xml:whitespace="preserve">the #GtkIconSource specifying the icon to render</doc>
              <type name="IconSource" c:type="GtkIconSource*"/>
            </parameter>
            <parameter name="direction" transfer-ownership="none">
              <doc xml:whitespace="preserve">a text direction</doc>
              <type name="TextDirection" c:type="GtkTextDirection"/>
            </parameter>
            <parameter name="state" transfer-ownership="none">
              <doc xml:whitespace="preserve">a state</doc>
              <type name="StateType" c:type="GtkStateType"/>
            </parameter>
            <parameter name="size" transfer-ownership="none">
              <doc xml:whitespace="preserve">the size to render the icon at. A size of (GtkIconSize)-1 means render at the size of the source and don't scale.</doc>
              <type name="gint"/>
            </parameter>
            <parameter name="widget" transfer-ownership="none" allow-none="1">
              <doc xml:whitespace="preserve">the widget</doc>
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
            <parameter name="detail" transfer-ownership="none" allow-none="1">
              <doc xml:whitespace="preserve">a style detail</doc>
              <type name="utf8" c:type="gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="draw_hline">
        <callback name="draw_hline">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="style" transfer-ownership="none">
              <type name="Style" c:type="GtkStyle*"/>
            </parameter>
            <parameter name="window" transfer-ownership="none">
              <type name="Gdk.Window" c:type="GdkWindow*"/>
            </parameter>
            <parameter name="state_type" transfer-ownership="none">
              <type name="StateType" c:type="GtkStateType"/>
            </parameter>
            <parameter name="area" transfer-ownership="none">
              <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
            </parameter>
            <parameter name="widget" transfer-ownership="none">
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
            <parameter name="detail" transfer-ownership="none">
              <type name="utf8" c:type="gchar*"/>
            </parameter>
            <parameter name="x1" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="x2" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="y" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="draw_vline">
        <callback name="draw_vline">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="style" transfer-ownership="none">
              <type name="Style" c:type="GtkStyle*"/>
            </parameter>
            <parameter name="window" transfer-ownership="none">
              <type name="Gdk.Window" c:type="GdkWindow*"/>
            </parameter>
            <parameter name="state_type" transfer-ownership="none">
              <type name="StateType" c:type="GtkStateType"/>
            </parameter>
            <parameter name="area" transfer-ownership="none">
              <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
            </parameter>
            <parameter name="widget" transfer-ownership="none">
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
            <parameter name="detail" transfer-ownership="none">
              <type name="utf8" c:type="gchar*"/>
            </parameter>
            <parameter name="y1_" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="y2_" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="x" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="draw_shadow">
        <callback name="draw_shadow">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="style" transfer-ownership="none">
              <type name="Style" c:type="GtkStyle*"/>
            </parameter>
            <parameter name="window" transfer-ownership="none">
              <type name="Gdk.Window" c:type="GdkWindow*"/>
            </parameter>
            <parameter name="state_type" transfer-ownership="none">
              <type name="StateType" c:type="GtkStateType"/>
            </parameter>
            <parameter name="shadow_type" transfer-ownership="none">
              <type name="ShadowType" c:type="GtkShadowType"/>
            </parameter>
            <parameter name="area" transfer-ownership="none">
              <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
            </parameter>
            <parameter name="widget" transfer-ownership="none">
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
            <parameter name="detail" transfer-ownership="none">
              <type name="utf8" c:type="gchar*"/>
            </parameter>
            <parameter name="x" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="y" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="width" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="height" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="draw_arrow">
        <callback name="draw_arrow">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="style" transfer-ownership="none">
              <type name="Style" c:type="GtkStyle*"/>
            </parameter>
            <parameter name="window" transfer-ownership="none">
              <type name="Gdk.Window" c:type="GdkWindow*"/>
            </parameter>
            <parameter name="state_type" transfer-ownership="none">
              <type name="StateType" c:type="GtkStateType"/>
            </parameter>
            <parameter name="shadow_type" transfer-ownership="none">
              <type name="ShadowType" c:type="GtkShadowType"/>
            </parameter>
            <parameter name="area" transfer-ownership="none">
              <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
            </parameter>
            <parameter name="widget" transfer-ownership="none">
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
            <parameter name="detail" transfer-ownership="none">
              <type name="utf8" c:type="gchar*"/>
            </parameter>
            <parameter name="arrow_type" transfer-ownership="none">
              <type name="ArrowType" c:type="GtkArrowType"/>
            </parameter>
            <parameter name="fill" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
            <parameter name="x" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="y" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="width" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="height" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="draw_diamond">
        <callback name="draw_diamond">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="style" transfer-ownership="none">
              <type name="Style" c:type="GtkStyle*"/>
            </parameter>
            <parameter name="window" transfer-ownership="none">
              <type name="Gdk.Window" c:type="GdkWindow*"/>
            </parameter>
            <parameter name="state_type" transfer-ownership="none">
              <type name="StateType" c:type="GtkStateType"/>
            </parameter>
            <parameter name="shadow_type" transfer-ownership="none">
              <type name="ShadowType" c:type="GtkShadowType"/>
            </parameter>
            <parameter name="area" transfer-ownership="none">
              <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
            </parameter>
            <parameter name="widget" transfer-ownership="none">
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
            <parameter name="detail" transfer-ownership="none">
              <type name="utf8" c:type="gchar*"/>
            </parameter>
            <parameter name="x" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="y" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="width" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="height" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="draw_box">
        <callback name="draw_box">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="style" transfer-ownership="none">
              <type name="Style" c:type="GtkStyle*"/>
            </parameter>
            <parameter name="window" transfer-ownership="none">
              <type name="Gdk.Window" c:type="GdkWindow*"/>
            </parameter>
            <parameter name="state_type" transfer-ownership="none">
              <type name="StateType" c:type="GtkStateType"/>
            </parameter>
            <parameter name="shadow_type" transfer-ownership="none">
              <type name="ShadowType" c:type="GtkShadowType"/>
            </parameter>
            <parameter name="area" transfer-ownership="none">
              <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
            </parameter>
            <parameter name="widget" transfer-ownership="none">
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
            <parameter name="detail" transfer-ownership="none">
              <type name="utf8" c:type="gchar*"/>
            </parameter>
            <parameter name="x" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="y" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="width" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="height" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="draw_flat_box">
        <callback name="draw_flat_box">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="style" transfer-ownership="none">
              <type name="Style" c:type="GtkStyle*"/>
            </parameter>
            <parameter name="window" transfer-ownership="none">
              <type name="Gdk.Window" c:type="GdkWindow*"/>
            </parameter>
            <parameter name="state_type" transfer-ownership="none">
              <type name="StateType" c:type="GtkStateType"/>
            </parameter>
            <parameter name="shadow_type" transfer-ownership="none">
              <type name="ShadowType" c:type="GtkShadowType"/>
            </parameter>
            <parameter name="area" transfer-ownership="none">
              <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
            </parameter>
            <parameter name="widget" transfer-ownership="none">
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
            <parameter name="detail" transfer-ownership="none">
              <type name="utf8" c:type="gchar*"/>
            </parameter>
            <parameter name="x" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="y" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="width" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="height" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="draw_check">
        <callback name="draw_check">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="style" transfer-ownership="none">
              <type name="Style" c:type="GtkStyle*"/>
            </parameter>
            <parameter name="window" transfer-ownership="none">
              <type name="Gdk.Window" c:type="GdkWindow*"/>
            </parameter>
            <parameter name="state_type" transfer-ownership="none">
              <type name="StateType" c:type="GtkStateType"/>
            </parameter>
            <parameter name="shadow_type" transfer-ownership="none">
              <type name="ShadowType" c:type="GtkShadowType"/>
            </parameter>
            <parameter name="area" transfer-ownership="none">
              <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
            </parameter>
            <parameter name="widget" transfer-ownership="none">
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
            <parameter name="detail" transfer-ownership="none">
              <type name="utf8" c:type="gchar*"/>
            </parameter>
            <parameter name="x" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="y" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="width" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="height" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="draw_option">
        <callback name="draw_option">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="style" transfer-ownership="none">
              <type name="Style" c:type="GtkStyle*"/>
            </parameter>
            <parameter name="window" transfer-ownership="none">
              <type name="Gdk.Window" c:type="GdkWindow*"/>
            </parameter>
            <parameter name="state_type" transfer-ownership="none">
              <type name="StateType" c:type="GtkStateType"/>
            </parameter>
            <parameter name="shadow_type" transfer-ownership="none">
              <type name="ShadowType" c:type="GtkShadowType"/>
            </parameter>
            <parameter name="area" transfer-ownership="none">
              <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
            </parameter>
            <parameter name="widget" transfer-ownership="none">
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
            <parameter name="detail" transfer-ownership="none">
              <type name="utf8" c:type="gchar*"/>
            </parameter>
            <parameter name="x" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="y" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="width" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="height" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="draw_tab">
        <callback name="draw_tab">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="style" transfer-ownership="none">
              <type name="Style" c:type="GtkStyle*"/>
            </parameter>
            <parameter name="window" transfer-ownership="none">
              <type name="Gdk.Window" c:type="GdkWindow*"/>
            </parameter>
            <parameter name="state_type" transfer-ownership="none">
              <type name="StateType" c:type="GtkStateType"/>
            </parameter>
            <parameter name="shadow_type" transfer-ownership="none">
              <type name="ShadowType" c:type="GtkShadowType"/>
            </parameter>
            <parameter name="area" transfer-ownership="none">
              <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
            </parameter>
            <parameter name="widget" transfer-ownership="none">
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
            <parameter name="detail" transfer-ownership="none">
              <type name="utf8" c:type="gchar*"/>
            </parameter>
            <parameter name="x" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="y" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="width" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="height" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="draw_shadow_gap">
        <callback name="draw_shadow_gap">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="style" transfer-ownership="none">
              <type name="Style" c:type="GtkStyle*"/>
            </parameter>
            <parameter name="window" transfer-ownership="none">
              <type name="Gdk.Window" c:type="GdkWindow*"/>
            </parameter>
            <parameter name="state_type" transfer-ownership="none">
              <type name="StateType" c:type="GtkStateType"/>
            </parameter>
            <parameter name="shadow_type" transfer-ownership="none">
              <type name="ShadowType" c:type="GtkShadowType"/>
            </parameter>
            <parameter name="area" transfer-ownership="none">
              <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
            </parameter>
            <parameter name="widget" transfer-ownership="none">
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
            <parameter name="detail" transfer-ownership="none">
              <type name="utf8" c:type="gchar*"/>
            </parameter>
            <parameter name="x" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="y" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="width" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="height" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="gap_side" transfer-ownership="none">
              <type name="PositionType" c:type="GtkPositionType"/>
            </parameter>
            <parameter name="gap_x" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="gap_width" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="draw_box_gap">
        <callback name="draw_box_gap">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="style" transfer-ownership="none">
              <type name="Style" c:type="GtkStyle*"/>
            </parameter>
            <parameter name="window" transfer-ownership="none">
              <type name="Gdk.Window" c:type="GdkWindow*"/>
            </parameter>
            <parameter name="state_type" transfer-ownership="none">
              <type name="StateType" c:type="GtkStateType"/>
            </parameter>
            <parameter name="shadow_type" transfer-ownership="none">
              <type name="ShadowType" c:type="GtkShadowType"/>
            </parameter>
            <parameter name="area" transfer-ownership="none">
              <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
            </parameter>
            <parameter name="widget" transfer-ownership="none">
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
            <parameter name="detail" transfer-ownership="none">
              <type name="utf8" c:type="gchar*"/>
            </parameter>
            <parameter name="x" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="y" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="width" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="height" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="gap_side" transfer-ownership="none">
              <type name="PositionType" c:type="GtkPositionType"/>
            </parameter>
            <parameter name="gap_x" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="gap_width" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="draw_extension">
        <callback name="draw_extension">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="style" transfer-ownership="none">
              <type name="Style" c:type="GtkStyle*"/>
            </parameter>
            <parameter name="window" transfer-ownership="none">
              <type name="Gdk.Window" c:type="GdkWindow*"/>
            </parameter>
            <parameter name="state_type" transfer-ownership="none">
              <type name="StateType" c:type="GtkStateType"/>
            </parameter>
            <parameter name="shadow_type" transfer-ownership="none">
              <type name="ShadowType" c:type="GtkShadowType"/>
            </parameter>
            <parameter name="area" transfer-ownership="none">
              <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
            </parameter>
            <parameter name="widget" transfer-ownership="none">
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
            <parameter name="detail" transfer-ownership="none">
              <type name="utf8" c:type="gchar*"/>
            </parameter>
            <parameter name="x" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="y" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="width" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="height" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="gap_side" transfer-ownership="none">
              <type name="PositionType" c:type="GtkPositionType"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="draw_focus">
        <callback name="draw_focus">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="style" transfer-ownership="none">
              <type name="Style" c:type="GtkStyle*"/>
            </parameter>
            <parameter name="window" transfer-ownership="none">
              <type name="Gdk.Window" c:type="GdkWindow*"/>
            </parameter>
            <parameter name="state_type" transfer-ownership="none">
              <type name="StateType" c:type="GtkStateType"/>
            </parameter>
            <parameter name="area" transfer-ownership="none">
              <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
            </parameter>
            <parameter name="widget" transfer-ownership="none">
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
            <parameter name="detail" transfer-ownership="none">
              <type name="utf8" c:type="gchar*"/>
            </parameter>
            <parameter name="x" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="y" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="width" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="height" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="draw_slider">
        <callback name="draw_slider">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="style" transfer-ownership="none">
              <type name="Style" c:type="GtkStyle*"/>
            </parameter>
            <parameter name="window" transfer-ownership="none">
              <type name="Gdk.Window" c:type="GdkWindow*"/>
            </parameter>
            <parameter name="state_type" transfer-ownership="none">
              <type name="StateType" c:type="GtkStateType"/>
            </parameter>
            <parameter name="shadow_type" transfer-ownership="none">
              <type name="ShadowType" c:type="GtkShadowType"/>
            </parameter>
            <parameter name="area" transfer-ownership="none">
              <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
            </parameter>
            <parameter name="widget" transfer-ownership="none">
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
            <parameter name="detail" transfer-ownership="none">
              <type name="utf8" c:type="gchar*"/>
            </parameter>
            <parameter name="x" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="y" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="width" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="height" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="orientation" transfer-ownership="none">
              <type name="Orientation" c:type="GtkOrientation"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="draw_handle">
        <callback name="draw_handle">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="style" transfer-ownership="none">
              <type name="Style" c:type="GtkStyle*"/>
            </parameter>
            <parameter name="window" transfer-ownership="none">
              <type name="Gdk.Window" c:type="GdkWindow*"/>
            </parameter>
            <parameter name="state_type" transfer-ownership="none">
              <type name="StateType" c:type="GtkStateType"/>
            </parameter>
            <parameter name="shadow_type" transfer-ownership="none">
              <type name="ShadowType" c:type="GtkShadowType"/>
            </parameter>
            <parameter name="area" transfer-ownership="none">
              <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
            </parameter>
            <parameter name="widget" transfer-ownership="none">
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
            <parameter name="detail" transfer-ownership="none">
              <type name="utf8" c:type="gchar*"/>
            </parameter>
            <parameter name="x" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="y" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="width" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="height" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="orientation" transfer-ownership="none">
              <type name="Orientation" c:type="GtkOrientation"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="draw_expander">
        <callback name="draw_expander">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="style" transfer-ownership="none">
              <type name="Style" c:type="GtkStyle*"/>
            </parameter>
            <parameter name="window" transfer-ownership="none">
              <type name="Gdk.Window" c:type="GdkWindow*"/>
            </parameter>
            <parameter name="state_type" transfer-ownership="none">
              <type name="StateType" c:type="GtkStateType"/>
            </parameter>
            <parameter name="area" transfer-ownership="none">
              <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
            </parameter>
            <parameter name="widget" transfer-ownership="none">
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
            <parameter name="detail" transfer-ownership="none">
              <type name="utf8" c:type="gchar*"/>
            </parameter>
            <parameter name="x" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="y" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="expander_style" transfer-ownership="none">
              <type name="ExpanderStyle" c:type="GtkExpanderStyle"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="draw_layout">
        <callback name="draw_layout">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="style" transfer-ownership="none">
              <type name="Style" c:type="GtkStyle*"/>
            </parameter>
            <parameter name="window" transfer-ownership="none">
              <type name="Gdk.Window" c:type="GdkWindow*"/>
            </parameter>
            <parameter name="state_type" transfer-ownership="none">
              <type name="StateType" c:type="GtkStateType"/>
            </parameter>
            <parameter name="use_text" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
            <parameter name="area" transfer-ownership="none">
              <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
            </parameter>
            <parameter name="widget" transfer-ownership="none">
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
            <parameter name="detail" transfer-ownership="none">
              <type name="utf8" c:type="gchar*"/>
            </parameter>
            <parameter name="x" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="y" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="layout" transfer-ownership="none">
              <type name="Pango.Layout" c:type="PangoLayout*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="draw_resize_grip">
        <callback name="draw_resize_grip">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="style" transfer-ownership="none">
              <type name="Style" c:type="GtkStyle*"/>
            </parameter>
            <parameter name="window" transfer-ownership="none">
              <type name="Gdk.Window" c:type="GdkWindow*"/>
            </parameter>
            <parameter name="state_type" transfer-ownership="none">
              <type name="StateType" c:type="GtkStateType"/>
            </parameter>
            <parameter name="area" transfer-ownership="none">
              <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
            </parameter>
            <parameter name="widget" transfer-ownership="none">
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
            <parameter name="detail" transfer-ownership="none">
              <type name="utf8" c:type="gchar*"/>
            </parameter>
            <parameter name="edge" transfer-ownership="none">
              <type name="Gdk.WindowEdge" c:type="GdkWindowEdge"/>
            </parameter>
            <parameter name="x" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="y" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="width" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="height" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="draw_spinner">
        <callback name="draw_spinner">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="style" transfer-ownership="none">
              <type name="Style" c:type="GtkStyle*"/>
            </parameter>
            <parameter name="window" transfer-ownership="none">
              <type name="Gdk.Window" c:type="GdkWindow*"/>
            </parameter>
            <parameter name="state_type" transfer-ownership="none">
              <type name="StateType" c:type="GtkStateType"/>
            </parameter>
            <parameter name="area" transfer-ownership="none">
              <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
            </parameter>
            <parameter name="widget" transfer-ownership="none">
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
            <parameter name="detail" transfer-ownership="none">
              <type name="utf8" c:type="gchar*"/>
            </parameter>
            <parameter name="step" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="x" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="y" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="width" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="height" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_gtk_reserved1" introspectable="0">
        <callback name="_gtk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved2" introspectable="0">
        <callback name="_gtk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved3" introspectable="0">
        <callback name="_gtk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved4" introspectable="0">
        <callback name="_gtk_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved5" introspectable="0">
        <callback name="_gtk_reserved5">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved6" introspectable="0">
        <callback name="_gtk_reserved6">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved7" introspectable="0">
        <callback name="_gtk_reserved7">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved8" introspectable="0">
        <callback name="_gtk_reserved8">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved9" introspectable="0">
        <callback name="_gtk_reserved9">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved10" introspectable="0">
        <callback name="_gtk_reserved10">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved11" introspectable="0">
        <callback name="_gtk_reserved11">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <constant name="TEXT_VIEW_PRIORITY_VALIDATE" value="5">
      <type name="gint" c:type="gint"/>
    </constant>
    <class name="Table"
           c:symbol-prefix="table"
           c:type="GtkTable"
           parent="Container"
           glib:type-name="GtkTable"
           glib:get-type="gtk_table_get_type"
           glib:type-struct="TableClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Buildable"/>
      <implements name="SizeRequest"/>
      <constructor name="new" c:identifier="gtk_table_new">
        <return-value transfer-ownership="none">
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="rows" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="columns" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="homogeneous" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="attach" c:identifier="gtk_table_attach">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="child" transfer-ownership="none">
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="left_attach" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="right_attach" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="top_attach" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="bottom_attach" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="xoptions" transfer-ownership="none">
            <type name="AttachOptions" c:type="GtkAttachOptions"/>
          </parameter>
          <parameter name="yoptions" transfer-ownership="none">
            <type name="AttachOptions" c:type="GtkAttachOptions"/>
          </parameter>
          <parameter name="xpadding" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="ypadding" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="attach_defaults" c:identifier="gtk_table_attach_defaults">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="widget" transfer-ownership="none">
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="left_attach" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="right_attach" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="top_attach" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="bottom_attach" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_col_spacing" c:identifier="gtk_table_get_col_spacing">
        <doc xml:whitespace="preserve">Gets the amount of space between column @col, and
column @col + 1. See gtk_table_set_col_spacing().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the column spacing</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="column" transfer-ownership="none">
            <doc xml:whitespace="preserve">a column in the table, 0 indicates the first column</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_default_col_spacing"
              c:identifier="gtk_table_get_default_col_spacing">
        <doc xml:whitespace="preserve">Gets the default column spacing for the table. This is
the spacing that will be used for newly added columns.
(See gtk_table_set_col_spacings())</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the default column spacing</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
      </method>
      <method name="get_default_row_spacing"
              c:identifier="gtk_table_get_default_row_spacing">
        <doc xml:whitespace="preserve">Gets the default row spacing for the table. This is
the spacing that will be used for newly added rows.
(See gtk_table_set_row_spacings())</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the default row spacing</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
      </method>
      <method name="get_homogeneous" c:identifier="gtk_table_get_homogeneous">
        <doc xml:whitespace="preserve">Returns whether the table cells are all constrained to the same
width and height. (See gtk_table_set_homogenous ())</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the cells are all constrained to the same size</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_row_spacing" c:identifier="gtk_table_get_row_spacing">
        <doc xml:whitespace="preserve">Gets the amount of space between row @row, and
row @row + 1. See gtk_table_set_row_spacing().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the row spacing</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="row" transfer-ownership="none">
            <doc xml:whitespace="preserve">a row in the table, 0 indicates the first row</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_size" c:identifier="gtk_table_get_size" version="2.22">
        <doc xml:whitespace="preserve">Returns the number of rows and columns in the table.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="rows"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     allow-none="1">
            <doc xml:whitespace="preserve">return location for the number of rows, or %NULL</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
          <parameter name="columns"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     allow-none="1">
            <doc xml:whitespace="preserve">return location for the number of columns, or %NULL</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="resize" c:identifier="gtk_table_resize">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="rows" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="columns" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_col_spacing" c:identifier="gtk_table_set_col_spacing">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="column" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="spacing" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_col_spacings"
              c:identifier="gtk_table_set_col_spacings">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="spacing" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_homogeneous" c:identifier="gtk_table_set_homogeneous">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="homogeneous" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_row_spacing" c:identifier="gtk_table_set_row_spacing">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="row" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="spacing" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_row_spacings"
              c:identifier="gtk_table_set_row_spacings">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="spacing" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <property name="column-spacing" writable="1" transfer-ownership="none">
        <type name="guint"/>
      </property>
      <property name="homogeneous" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="n-columns" writable="1" transfer-ownership="none">
        <type name="guint"/>
      </property>
      <property name="n-rows" writable="1" transfer-ownership="none">
        <type name="guint"/>
      </property>
      <property name="row-spacing" writable="1" transfer-ownership="none">
        <type name="guint"/>
      </property>
      <field name="container">
        <type name="Container" c:type="GtkContainer"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="TablePrivate" c:type="GtkTablePrivate*"/>
      </field>
    </class>
    <record name="TableChild" c:type="GtkTableChild">
      <field name="widget" writable="1">
        <type name="Widget" c:type="GtkWidget*"/>
      </field>
      <field name="left_attach" writable="1">
        <type name="guint16" c:type="guint16"/>
      </field>
      <field name="right_attach" writable="1">
        <type name="guint16" c:type="guint16"/>
      </field>
      <field name="top_attach" writable="1">
        <type name="guint16" c:type="guint16"/>
      </field>
      <field name="bottom_attach" writable="1">
        <type name="guint16" c:type="guint16"/>
      </field>
      <field name="xpadding" writable="1">
        <type name="guint16" c:type="guint16"/>
      </field>
      <field name="ypadding" writable="1">
        <type name="guint16" c:type="guint16"/>
      </field>
      <field name="xexpand" writable="1" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="yexpand" writable="1" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="xshrink" writable="1" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="yshrink" writable="1" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="xfill" writable="1" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="yfill" writable="1" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
    </record>
    <record name="TableClass"
            c:type="GtkTableClass"
            glib:is-gtype-struct-for="Table">
      <field name="parent_class">
        <type name="ContainerClass" c:type="GtkContainerClass"/>
      </field>
    </record>
    <record name="TablePrivate" c:type="GtkTablePrivate" disguised="1">
    </record>
    <record name="TableRowCol" c:type="GtkTableRowCol">
      <field name="requisition" writable="1">
        <type name="guint16" c:type="guint16"/>
      </field>
      <field name="allocation" writable="1">
        <type name="guint16" c:type="guint16"/>
      </field>
      <field name="spacing" writable="1">
        <type name="guint16" c:type="guint16"/>
      </field>
      <field name="need_expand" writable="1" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="need_shrink" writable="1" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="expand" writable="1" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="shrink" writable="1" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="empty" writable="1" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
    </record>
    <record name="TargetEntry" c:type="GtkTargetEntry">
      <field name="target" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="flags" writable="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="info" writable="1">
        <type name="guint" c:type="guint"/>
      </field>
    </record>
    <bitfield name="TargetFlags"
              glib:type-name="GtkTargetFlags"
              glib:get-type="gtk_target_flags_get_type"
              c:type="GtkTargetFlags">
      <member name="same_app"
              value="1"
              c:identifier="GTK_TARGET_SAME_APP"
              glib:nick="same-app"/>
      <member name="same_widget"
              value="2"
              c:identifier="GTK_TARGET_SAME_WIDGET"
              glib:nick="same-widget"/>
      <member name="other_app"
              value="4"
              c:identifier="GTK_TARGET_OTHER_APP"
              glib:nick="other-app"/>
      <member name="other_widget"
              value="8"
              c:identifier="GTK_TARGET_OTHER_WIDGET"
              glib:nick="other-widget"/>
    </bitfield>
    <record name="TargetList"
            c:type="GtkTargetList"
            glib:type-name="GtkTargetList"
            glib:get-type="gtk_target_list_get_type"
            c:symbol-prefix="target_list">
      <field name="list" writable="1">
        <type name="GLib.List" c:type="GList*">
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </field>
      <field name="ref_count" writable="1">
        <type name="guint" c:type="guint"/>
      </field>
      <constructor name="new" c:identifier="gtk_target_list_new">
        <doc xml:whitespace="preserve">Creates a new #GtkTargetList from an array of #GtkTargetEntry.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the new #GtkTargetList.</doc>
          <type name="TargetList" c:type="GtkTargetList*"/>
        </return-value>
        <parameters>
          <parameter name="targets" transfer-ownership="none">
            <doc xml:whitespace="preserve">Pointer to an array of #GtkTargetEntry</doc>
            <type name="TargetEntry" c:type="GtkTargetEntry*"/>
          </parameter>
          <parameter name="ntargets" transfer-ownership="none">
            <doc xml:whitespace="preserve">number of entries in @targets.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="add" c:identifier="gtk_target_list_add">
        <doc xml:whitespace="preserve">Appends another target to a #GtkTargetList.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="target" transfer-ownership="none">
            <doc xml:whitespace="preserve">the interned atom representing the target</doc>
            <type name="Gdk.Atom" c:type="GdkAtom"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:whitespace="preserve">the flags for this target</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="info" transfer-ownership="none">
            <doc xml:whitespace="preserve">an ID that will be passed back to the application</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_image_targets"
              c:identifier="gtk_target_list_add_image_targets"
              version="2.6">
        <doc xml:whitespace="preserve">Appends the image targets supported by #GtkSelection to
the target list. All targets are added with the same @info.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="info" transfer-ownership="none">
            <doc xml:whitespace="preserve">an ID that will be passed back to the application</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="writable" transfer-ownership="none">
            <doc xml:whitespace="preserve">whether to add only targets for which GTK+ knows how to convert a pixbuf into the format</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_rich_text_targets"
              c:identifier="gtk_target_list_add_rich_text_targets"
              version="2.10">
        <doc xml:whitespace="preserve">Appends the rich text targets registered with
gtk_text_buffer_register_serialize_format() or
gtk_text_buffer_register_deserialize_format() to the target list. All
targets are added with the same @info.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="info" transfer-ownership="none">
            <doc xml:whitespace="preserve">an ID that will be passed back to the application</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="deserializable" transfer-ownership="none">
            <doc xml:whitespace="preserve">if %TRUE, then deserializable rich text formats will be added, serializable formats otherwise.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="buffer" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkTextBuffer.</doc>
            <type name="TextBuffer" c:type="GtkTextBuffer*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_table" c:identifier="gtk_target_list_add_table">
        <doc xml:whitespace="preserve">Prepends a table of #GtkTargetEntry to a target list.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="targets" transfer-ownership="none">
            <doc xml:whitespace="preserve">the table of #GtkTargetEntry</doc>
            <type name="TargetEntry" c:type="GtkTargetEntry*"/>
          </parameter>
          <parameter name="ntargets" transfer-ownership="none">
            <doc xml:whitespace="preserve">number of targets in the table</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_text_targets"
              c:identifier="gtk_target_list_add_text_targets"
              version="2.6">
        <doc xml:whitespace="preserve">Appends the text targets supported by #GtkSelection to
the target list. All targets are added with the same @info.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="info" transfer-ownership="none">
            <doc xml:whitespace="preserve">an ID that will be passed back to the application</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_uri_targets"
              c:identifier="gtk_target_list_add_uri_targets"
              version="2.6">
        <doc xml:whitespace="preserve">Appends the URI targets supported by #GtkSelection to
the target list. All targets are added with the same @info.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="info" transfer-ownership="none">
            <doc xml:whitespace="preserve">an ID that will be passed back to the application</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="find" c:identifier="gtk_target_list_find">
        <doc xml:whitespace="preserve">Looks up a given target in a #GtkTargetList.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the target was found, otherwise %FALSE</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="target" transfer-ownership="none">
            <doc xml:whitespace="preserve">an interned atom representing the target to search for</doc>
            <type name="Gdk.Atom" c:type="GdkAtom"/>
          </parameter>
          <parameter name="info" transfer-ownership="none">
            <doc xml:whitespace="preserve">a pointer to the location to store application info for target, or %NULL</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="gtk_target_list_ref">
        <doc xml:whitespace="preserve">Increases the reference count of a #GtkTargetList by one.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the passed in #GtkTargetList.</doc>
          <type name="TargetList" c:type="GtkTargetList*"/>
        </return-value>
      </method>
      <method name="remove" c:identifier="gtk_target_list_remove">
        <doc xml:whitespace="preserve">Removes a target from a target list.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="target" transfer-ownership="none">
            <doc xml:whitespace="preserve">the interned atom representing the target</doc>
            <type name="Gdk.Atom" c:type="GdkAtom"/>
          </parameter>
        </parameters>
      </method>
      <method name="unref" c:identifier="gtk_target_list_unref">
        <doc xml:whitespace="preserve">Decreases the reference count of a #GtkTargetList by one.
If the resulting reference count is zero, frees the list.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
    </record>
    <record name="TargetPair" c:type="GtkTargetPair">
      <field name="target" writable="1">
        <type name="Gdk.Atom" c:type="GdkAtom"/>
      </field>
      <field name="flags" writable="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="info" writable="1">
        <type name="guint" c:type="guint"/>
      </field>
    </record>
    <class name="TearoffMenuItem"
           c:symbol-prefix="tearoff_menu_item"
           c:type="GtkTearoffMenuItem"
           parent="MenuItem"
           glib:type-name="GtkTearoffMenuItem"
           glib:get-type="gtk_tearoff_menu_item_get_type"
           glib:type-struct="TearoffMenuItemClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Activatable"/>
      <implements name="Buildable"/>
      <implements name="SizeRequest"/>
      <constructor name="new" c:identifier="gtk_tearoff_menu_item_new">
        <return-value transfer-ownership="none">
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <field name="menu_item">
        <type name="MenuItem" c:type="GtkMenuItem"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="TearoffMenuItemPrivate"
              c:type="GtkTearoffMenuItemPrivate*"/>
      </field>
    </class>
    <record name="TearoffMenuItemClass"
            c:type="GtkTearoffMenuItemClass"
            glib:is-gtype-struct-for="TearoffMenuItem">
      <field name="parent_class">
        <type name="MenuItemClass" c:type="GtkMenuItemClass"/>
      </field>
      <field name="_gtk_reserved1" introspectable="0">
        <callback name="_gtk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved2" introspectable="0">
        <callback name="_gtk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved3" introspectable="0">
        <callback name="_gtk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved4" introspectable="0">
        <callback name="_gtk_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="TearoffMenuItemPrivate"
            c:type="GtkTearoffMenuItemPrivate"
            disguised="1">
    </record>
    <record name="TextAppearance" c:type="GtkTextAppearance">
      <field name="bg_color" writable="1">
        <type name="Gdk.Color" c:type="GdkColor"/>
      </field>
      <field name="fg_color" writable="1">
        <type name="Gdk.Color" c:type="GdkColor"/>
      </field>
      <field name="rise" writable="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="padding1" writable="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="underline" writable="1" bits="4">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="strikethrough" writable="1" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="draw_bg" writable="1" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="inside_selection" writable="1" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="is_text" writable="1" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="pad1" writable="1" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="pad2" writable="1" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="pad3" writable="1" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="pad4" writable="1" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
    </record>
    <record name="TextAttributes"
            c:type="GtkTextAttributes"
            glib:type-name="GtkTextAttributes"
            glib:get-type="gtk_text_attributes_get_type"
            c:symbol-prefix="text_attributes">
      <field name="refcount" writable="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="appearance" writable="1">
        <type name="TextAppearance" c:type="GtkTextAppearance"/>
      </field>
      <field name="justification" writable="1">
        <type name="Justification" c:type="GtkJustification"/>
      </field>
      <field name="direction" writable="1">
        <type name="TextDirection" c:type="GtkTextDirection"/>
      </field>
      <field name="font" writable="1">
        <type name="Pango.FontDescription" c:type="PangoFontDescription*"/>
      </field>
      <field name="font_scale" writable="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="left_margin" writable="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="indent" writable="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="right_margin" writable="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="pixels_above_lines" writable="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="pixels_below_lines" writable="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="pixels_inside_wrap" writable="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="tabs" writable="1">
        <type name="Pango.TabArray" c:type="PangoTabArray*"/>
      </field>
      <field name="wrap_mode" writable="1">
        <type name="WrapMode" c:type="GtkWrapMode"/>
      </field>
      <field name="language" writable="1">
        <type name="Pango.Language" c:type="PangoLanguage*"/>
      </field>
      <field name="pg_bg_color" writable="1">
        <type name="Gdk.Color" c:type="GdkColor*"/>
      </field>
      <field name="invisible" writable="1" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="bg_full_height" writable="1" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="editable" writable="1" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="pad1" writable="1" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="pad2" writable="1" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="pad3" writable="1" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="pad4" writable="1" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <constructor name="new" c:identifier="gtk_text_attributes_new">
        <doc xml:whitespace="preserve">Creates a #GtkTextAttributes, which describes
a set of properties on some text.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new #GtkTextAttributes</doc>
          <type name="TextAttributes" c:type="GtkTextAttributes*"/>
        </return-value>
      </constructor>
      <method name="copy" c:identifier="gtk_text_attributes_copy">
        <doc xml:whitespace="preserve">Copies @src and returns a new #GtkTextAttributes.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a copy of @src</doc>
          <type name="TextAttributes" c:type="GtkTextAttributes*"/>
        </return-value>
      </method>
      <method name="copy_values"
              c:identifier="gtk_text_attributes_copy_values">
        <doc xml:whitespace="preserve">Copies the values from @src to @dest so that @dest has the same values
as @src. Frees existing values in @dest.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="dest" transfer-ownership="none">
            <doc xml:whitespace="preserve">another #GtkTextAttributes</doc>
            <type name="TextAttributes" c:type="GtkTextAttributes*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="gtk_text_attributes_ref">
        <doc xml:whitespace="preserve">Increments the reference count on @values.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the #GtkTextAttributes that were passed in</doc>
          <type name="TextAttributes" c:type="GtkTextAttributes*"/>
        </return-value>
      </method>
      <method name="unref" c:identifier="gtk_text_attributes_unref">
        <doc xml:whitespace="preserve">Decrements the reference count on @values, freeing the structure
if the reference count reaches 0.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
    </record>
    <record name="TextBTree" c:type="GtkTextBTree" disguised="1">
    </record>
    <class name="TextBuffer"
           c:symbol-prefix="text_buffer"
           c:type="GtkTextBuffer"
           parent="GObject.Object"
           glib:type-name="GtkTextBuffer"
           glib:get-type="gtk_text_buffer_get_type"
           glib:type-struct="TextBufferClass">
      <constructor name="new" c:identifier="gtk_text_buffer_new">
        <doc xml:whitespace="preserve">Creates a new text buffer.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new text buffer</doc>
          <type name="TextBuffer" c:type="GtkTextBuffer*"/>
        </return-value>
        <parameters>
          <parameter name="table" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">a tag table, or %NULL to create a new one</doc>
            <type name="TextTagTable" c:type="GtkTextTagTable*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="add_mark"
              c:identifier="gtk_text_buffer_add_mark"
              version="2.12">
        <doc xml:whitespace="preserve">Adds the mark at position @where. The mark must not be added to
another buffer, and if its name is not %NULL then there must not
be another mark in the buffer with the same name.
Emits the "mark-set" signal as notification of the mark's initial
placement.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="mark" transfer-ownership="none">
            <doc xml:whitespace="preserve">the mark to add</doc>
            <type name="TextMark" c:type="GtkTextMark*"/>
          </parameter>
          <parameter name="where" transfer-ownership="none">
            <doc xml:whitespace="preserve">location to place mark</doc>
            <type name="TextIter" c:type="GtkTextIter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_selection_clipboard"
              c:identifier="gtk_text_buffer_add_selection_clipboard">
        <doc xml:whitespace="preserve">Adds @clipboard to the list of clipboards in which the selection 
contents of @buffer are available. In most cases, @clipboard will be 
the #GtkClipboard of type %GDK_SELECTION_PRIMARY for a view of @buffer.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="clipboard" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkClipboard</doc>
            <type name="Clipboard" c:type="GtkClipboard*"/>
          </parameter>
        </parameters>
      </method>
      <method name="apply_tag" c:identifier="gtk_text_buffer_apply_tag">
        <doc xml:whitespace="preserve">Emits the "apply-tag" signal on @buffer. The default
handler for the signal applies @tag to the given range.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="tag" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkTextTag</doc>
            <type name="TextTag" c:type="GtkTextTag*"/>
          </parameter>
          <parameter name="start" transfer-ownership="none">
            <doc xml:whitespace="preserve">one bound of range to be tagged</doc>
            <type name="TextIter" c:type="GtkTextIter*"/>
          </parameter>
          <parameter name="end" transfer-ownership="none">
            <doc xml:whitespace="preserve">other bound of range to be tagged</doc>
            <type name="TextIter" c:type="GtkTextIter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="apply_tag_by_name"
              c:identifier="gtk_text_buffer_apply_tag_by_name">
        <doc xml:whitespace="preserve">Calls gtk_text_tag_table_lookup() on the buffer's tag table to
get a #GtkTextTag, then calls gtk_text_buffer_apply_tag().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:whitespace="preserve">name of a named #GtkTextTag</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="start" transfer-ownership="none">
            <doc xml:whitespace="preserve">one bound of range to be tagged</doc>
            <type name="TextIter" c:type="GtkTextIter*"/>
          </parameter>
          <parameter name="end" transfer-ownership="none">
            <doc xml:whitespace="preserve">other bound of range to be tagged</doc>
            <type name="TextIter" c:type="GtkTextIter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="backspace"
              c:identifier="gtk_text_buffer_backspace"
              version="2.6">
        <doc xml:whitespace="preserve">Performs the appropriate action as if the user hit the delete
key with the cursor at the position specified by @iter. In the
normal case a single character will be deleted, but when
combining accents are involved, more than one character can
be deleted, and when precomposed character and accent combinations
are involved, less than one character will be deleted.
Because the buffer is modified, all outstanding iterators become 
invalid after calling this function; however, the @iter will be
re-initialized to point to the location where text was deleted.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the buffer was modified</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="iter" transfer-ownership="none">
            <doc xml:whitespace="preserve">a position in @buffer</doc>
            <type name="TextIter" c:type="GtkTextIter*"/>
          </parameter>
          <parameter name="interactive" transfer-ownership="none">
            <doc xml:whitespace="preserve">whether the deletion is caused by user interaction</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="default_editable" transfer-ownership="none">
            <doc xml:whitespace="preserve">whether the buffer is editable by default</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="begin_user_action"
              c:identifier="gtk_text_buffer_begin_user_action">
        <doc xml:whitespace="preserve">Called to indicate that the buffer operations between here and a
call to gtk_text_buffer_end_user_action() are part of a single
user-visible operation. The operations between
gtk_text_buffer_begin_user_action() and
gtk_text_buffer_end_user_action() can then be grouped when creating
an undo stack. #GtkTextBuffer maintains a count of calls to
gtk_text_buffer_begin_user_action() that have not been closed with
a call to gtk_text_buffer_end_user_action(), and emits the 
"begin-user-action" and "end-user-action" signals only for the 
outermost pair of calls. This allows you to build user actions 
from other user actions.
The "interactive" buffer mutation functions, such as
gtk_text_buffer_insert_interactive(), automatically call begin/end
user action around the buffer operations they perform, so there's
no need to add extra calls if you user action consists solely of a
single call to one of those functions.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="copy_clipboard"
              c:identifier="gtk_text_buffer_copy_clipboard">
        <doc xml:whitespace="preserve">Copies the currently-selected text to a clipboard.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="clipboard" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GtkClipboard object to copy to</doc>
            <type name="Clipboard" c:type="GtkClipboard*"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_child_anchor"
              c:identifier="gtk_text_buffer_create_child_anchor">
        <doc xml:whitespace="preserve">This is a convenience function which simply creates a child anchor
with gtk_text_child_anchor_new() and inserts it into the buffer
with gtk_text_buffer_insert_child_anchor(). The new anchor is
owned by the buffer; no reference count is returned to
the caller of gtk_text_buffer_create_child_anchor().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the created child anchor</doc>
          <type name="TextChildAnchor" c:type="GtkTextChildAnchor*"/>
        </return-value>
        <parameters>
          <parameter name="iter" transfer-ownership="none">
            <doc xml:whitespace="preserve">location in the buffer</doc>
            <type name="TextIter" c:type="GtkTextIter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_mark" c:identifier="gtk_text_buffer_create_mark">
        <doc xml:whitespace="preserve">Creates a mark at position @where. If @mark_name is %NULL, the mark
is anonymous; otherwise, the mark can be retrieved by name using
gtk_text_buffer_get_mark(). If a mark has left gravity, and text is
inserted at the mark's current location, the mark will be moved to
the left of the newly-inserted text. If the mark has right gravity
(@left_gravity = %FALSE), the mark will end up on the right of
newly-inserted text. The standard left-to-right cursor is a mark
with right gravity (when you type, the cursor stays on the right
side of the text you're typing).
The caller of this function does &lt;emphasis&gt;not&lt;/emphasis&gt; own a 
reference to the returned #GtkTextMark, so you can ignore the 
return value if you like. Marks are owned by the buffer and go 
away when the buffer does.
Emits the "mark-set" signal as notification of the mark's initial
placement.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the new #GtkTextMark object</doc>
          <type name="TextMark" c:type="GtkTextMark*"/>
        </return-value>
        <parameters>
          <parameter name="mark_name" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">name for mark, or %NULL</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="where" transfer-ownership="none">
            <doc xml:whitespace="preserve">location to place mark</doc>
            <type name="TextIter" c:type="GtkTextIter*"/>
          </parameter>
          <parameter name="left_gravity" transfer-ownership="none">
            <doc xml:whitespace="preserve">whether the mark has left gravity</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_tag"
              c:identifier="gtk_text_buffer_create_tag"
              introspectable="0">
        <doc xml:whitespace="preserve">Creates a tag and adds it to the tag table for @buffer.
Equivalent to calling gtk_text_tag_new() and then adding the
tag to the buffer's tag table. The returned tag is owned by
the buffer's tag table, so the ref count will be equal to one.
If @tag_name is %NULL, the tag is anonymous.
If @tag_name is non-%NULL, a tag called @tag_name must not already
exist in the tag table for this buffer.
The @first_property_name argument and subsequent arguments are a list
of properties to set on the tag, as with g_object_set().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a new tag</doc>
          <type name="TextTag" c:type="GtkTextTag*"/>
        </return-value>
        <parameters>
          <parameter name="tag_name" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">name of the new tag, or %NULL</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="first_property_name"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">name of first property to set, or %NULL</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter transfer-ownership="none">
            <varargs>
            </varargs>
          </parameter>
        </parameters>
      </method>
      <method name="cut_clipboard"
              c:identifier="gtk_text_buffer_cut_clipboard">
        <doc xml:whitespace="preserve">Copies the currently-selected text to a clipboard, then deletes
said text if it's editable.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="clipboard" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GtkClipboard object to cut to</doc>
            <type name="Clipboard" c:type="GtkClipboard*"/>
          </parameter>
          <parameter name="default_editable" transfer-ownership="none">
            <doc xml:whitespace="preserve">default editability of the buffer</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="delete" c:identifier="gtk_text_buffer_delete">
        <doc xml:whitespace="preserve">Deletes text between @start and @end. The order of @start and @end
is not actually relevant; gtk_text_buffer_delete() will reorder
them. This function actually emits the "delete-range" signal, and
the default handler of that signal deletes the text. Because the
buffer is modified, all outstanding iterators become invalid after
calling this function; however, the @start and @end will be
re-initialized to point to the location where text was deleted.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="start" transfer-ownership="none">
            <doc xml:whitespace="preserve">a position in @buffer</doc>
            <type name="TextIter" c:type="GtkTextIter*"/>
          </parameter>
          <parameter name="end" transfer-ownership="none">
            <doc xml:whitespace="preserve">another position in @buffer</doc>
            <type name="TextIter" c:type="GtkTextIter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="delete_interactive"
              c:identifier="gtk_text_buffer_delete_interactive">
        <doc xml:whitespace="preserve">Deletes all &lt;emphasis&gt;editable&lt;/emphasis&gt; text in the given range.
Calls gtk_text_buffer_delete() for each editable sub-range of
[@start,@end). @start and @end are revalidated to point to
the location of the last deleted range, or left untouched if
no text was deleted.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">whether some text was actually deleted</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="start_iter" transfer-ownership="none">
            <doc xml:whitespace="preserve">start of range to delete</doc>
            <type name="TextIter" c:type="GtkTextIter*"/>
          </parameter>
          <parameter name="end_iter" transfer-ownership="none">
            <doc xml:whitespace="preserve">end of range</doc>
            <type name="TextIter" c:type="GtkTextIter*"/>
          </parameter>
          <parameter name="default_editable" transfer-ownership="none">
            <doc xml:whitespace="preserve">whether the buffer is editable by default</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="delete_mark" c:identifier="gtk_text_buffer_delete_mark">
        <doc xml:whitespace="preserve">Deletes @mark, so that it's no longer located anywhere in the
buffer. Removes the reference the buffer holds to the mark, so if
you haven't called g_object_ref() on the mark, it will be freed. Even
if the mark isn't freed, most operations on @mark become
invalid, until it gets added to a buffer again with 
gtk_text_buffer_add_mark(). Use gtk_text_mark_get_deleted() to  
find out if a mark has been removed from its buffer.
The "mark-deleted" signal will be emitted as notification after 
the mark is deleted.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="mark" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkTextMark in @buffer</doc>
            <type name="TextMark" c:type="GtkTextMark*"/>
          </parameter>
        </parameters>
      </method>
      <method name="delete_mark_by_name"
              c:identifier="gtk_text_buffer_delete_mark_by_name">
        <doc xml:whitespace="preserve">Deletes the mark named @name; the mark must exist. See
gtk_text_buffer_delete_mark() for details.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:whitespace="preserve">name of a mark in @buffer</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="delete_selection"
              c:identifier="gtk_text_buffer_delete_selection">
        <doc xml:whitespace="preserve">Deletes the range between the "insert" and "selection_bound" marks,
that is, the currently-selected text. If @interactive is %TRUE,
the editability of the selection will be considered (users can't delete
uneditable text).</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">whether there was a non-empty selection to delete</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="interactive" transfer-ownership="none">
            <doc xml:whitespace="preserve">whether the deletion is caused by user interaction</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="default_editable" transfer-ownership="none">
            <doc xml:whitespace="preserve">whether the buffer is editable by default</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="deserialize"
              c:identifier="gtk_text_buffer_deserialize"
              version="2.10"
              throws="1">
        <doc xml:whitespace="preserve">This function deserializes rich text in format @format and inserts
it at @iter.
gtk_text_buffer_register_deserialize_format() or
gtk_text_buffer_register_deserialize_tagset() beforehand.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE on success, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="content_buffer" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GtkTextBuffer to deserialize into</doc>
            <type name="TextBuffer" c:type="GtkTextBuffer*"/>
          </parameter>
          <parameter name="format" transfer-ownership="none">
            <doc xml:whitespace="preserve">the rich text format to use for deserializing</doc>
            <type name="Gdk.Atom" c:type="GdkAtom"/>
          </parameter>
          <parameter name="iter" transfer-ownership="none">
            <doc xml:whitespace="preserve">insertion point for the deserialized text</doc>
            <type name="TextIter" c:type="GtkTextIter*"/>
          </parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:whitespace="preserve">data to deserialize</doc>
            <type name="guint8" c:type="guint8*"/>
          </parameter>
          <parameter name="length" transfer-ownership="none">
            <doc xml:whitespace="preserve">length of @data</doc>
            <type name="gulong" c:type="gsize"/>
          </parameter>
        </parameters>
      </method>
      <method name="deserialize_get_can_create_tags"
              c:identifier="gtk_text_buffer_deserialize_get_can_create_tags"
              version="2.10">
        <doc xml:whitespace="preserve">This functions returns the value set with
gtk_text_buffer_deserialize_set_can_create_tags()</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">whether deserializing this format may create tags</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="format" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GdkAtom representing a registered rich text format</doc>
            <type name="Gdk.Atom" c:type="GdkAtom"/>
          </parameter>
        </parameters>
      </method>
      <method name="deserialize_set_can_create_tags"
              c:identifier="gtk_text_buffer_deserialize_set_can_create_tags"
              version="2.10">
        <doc xml:whitespace="preserve">Use this function to allow a rich text deserialization function to
create new tags in the receiving buffer. Note that using this
function is almost always a bad idea, because the rich text
functions you register should know how to map the rich text format
they handler to your text buffers set of tags.
The ability of creating new (arbitrary!) tags in the receiving buffer
is meant for special rich text formats like the internal one that
is registered using gtk_text_buffer_register_deserialize_tagset(),
because that format is essentially a dump of the internal structure
of the source buffer, including its tag names.
You should allow creation of tags only if you know what you are
doing, e.g. if you defined a tagset name for your application
suite's text buffers and you know that it's fine to receive new
tags from these buffers, because you know that your application can
handle the newly created tags.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="format" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GdkAtom representing a registered rich text format</doc>
            <type name="Gdk.Atom" c:type="GdkAtom"/>
          </parameter>
          <parameter name="can_create_tags" transfer-ownership="none">
            <doc xml:whitespace="preserve">whether deserializing this format may create tags</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="end_user_action"
              c:identifier="gtk_text_buffer_end_user_action">
        <doc xml:whitespace="preserve">Should be paired with a call to gtk_text_buffer_begin_user_action().
See that function for a full explanation.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="get_bounds" c:identifier="gtk_text_buffer_get_bounds">
        <doc xml:whitespace="preserve">Retrieves the first and last iterators in the buffer, i.e. the
entire buffer lies within the range [@start,@end).</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="start"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:whitespace="preserve">iterator to initialize with first position in the buffer</doc>
            <type name="TextIter" c:type="GtkTextIter*"/>
          </parameter>
          <parameter name="end"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:whitespace="preserve">iterator to initialize with the end iterator</doc>
            <type name="TextIter" c:type="GtkTextIter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_char_count"
              c:identifier="gtk_text_buffer_get_char_count">
        <doc xml:whitespace="preserve">Gets the number of characters in the buffer; note that characters
and bytes are not the same, you can't e.g. expect the contents of
the buffer in string form to be this many bytes long. The character
count is cached, so this function is very fast.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">number of characters in the buffer</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="get_copy_target_list"
              c:identifier="gtk_text_buffer_get_copy_target_list"
              version="2.10">
        <doc xml:whitespace="preserve">This function returns the list of targets this text buffer can
provide for copying and as DND source. The targets in the list are
added with %info values from the #GtkTextBufferTargetInfo enum,
using gtk_target_list_add_rich_text_targets() and
gtk_target_list_add_text_targets().</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the #GtkTargetList</doc>
          <type name="TargetList" c:type="GtkTargetList*"/>
        </return-value>
      </method>
      <method name="get_deserialize_formats"
              c:identifier="gtk_text_buffer_get_deserialize_formats"
              version="2.10"
              introspectable="0">
        <doc xml:whitespace="preserve">This function returns the rich text deserialize formats registered
with @buffer using gtk_text_buffer_register_deserialize_format() or
gtk_text_buffer_register_deserialize_tagset()
formats.</doc>
        <return-value>
          <doc xml:whitespace="preserve">an array of #GdkAtom&lt;!-- --&gt;s representing the registered</doc>
          <type name="Gdk.Atom" c:type="GdkAtom*"/>
        </return-value>
        <parameters>
          <parameter name="n_formats" transfer-ownership="none">
            <doc xml:whitespace="preserve">return location for the number of formats</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_end_iter" c:identifier="gtk_text_buffer_get_end_iter">
        <doc xml:whitespace="preserve">Initializes @iter with the "end iterator," one past the last valid
character in the text buffer. If dereferenced with
gtk_text_iter_get_char(), the end iterator has a character value of
0. The entire buffer lies in the range from the first position in
the buffer (call gtk_text_buffer_get_start_iter() to get
character position 0) to the end iterator.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="iter"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:whitespace="preserve">iterator to initialize</doc>
            <type name="TextIter" c:type="GtkTextIter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_has_selection"
              c:identifier="gtk_text_buffer_get_has_selection"
              version="2.10">
        <doc xml:whitespace="preserve">Indicates whether the buffer has some text currently selected.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the there is text selected</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_insert" c:identifier="gtk_text_buffer_get_insert">
        <doc xml:whitespace="preserve">Returns the mark that represents the cursor (insertion point).
Equivalent to calling gtk_text_buffer_get_mark() to get the mark
named "insert", but very slightly more efficient, and involves less
typing.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">insertion point mark</doc>
          <type name="TextMark" c:type="GtkTextMark*"/>
        </return-value>
      </method>
      <method name="get_iter_at_child_anchor"
              c:identifier="gtk_text_buffer_get_iter_at_child_anchor">
        <doc xml:whitespace="preserve">Obtains the location of @anchor within @buffer.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="iter"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:whitespace="preserve">an iterator to be initialized</doc>
            <type name="TextIter" c:type="GtkTextIter*"/>
          </parameter>
          <parameter name="anchor" transfer-ownership="none">
            <doc xml:whitespace="preserve">a child anchor that appears in @buffer</doc>
            <type name="TextChildAnchor" c:type="GtkTextChildAnchor*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_iter_at_line"
              c:identifier="gtk_text_buffer_get_iter_at_line">
        <doc xml:whitespace="preserve">Initializes @iter to the start of the given line.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="iter"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:whitespace="preserve">iterator to initialize</doc>
            <type name="TextIter" c:type="GtkTextIter*"/>
          </parameter>
          <parameter name="line_number" transfer-ownership="none">
            <doc xml:whitespace="preserve">line number counting from 0</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_iter_at_line_index"
              c:identifier="gtk_text_buffer_get_iter_at_line_index">
        <doc xml:whitespace="preserve">Obtains an iterator pointing to @byte_index within the given line.
beyond the end of the line.  Note &lt;emphasis&gt;bytes&lt;/emphasis&gt;, not
characters; UTF-8 may encode one character as multiple bytes.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="iter"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:whitespace="preserve">iterator to initialize</doc>
            <type name="TextIter" c:type="GtkTextIter*"/>
          </parameter>
          <parameter name="line_number" transfer-ownership="none">
            <doc xml:whitespace="preserve">line number counting from 0</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="byte_index" transfer-ownership="none">
            <doc xml:whitespace="preserve">byte index from start of line</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_iter_at_line_offset"
              c:identifier="gtk_text_buffer_get_iter_at_line_offset">
        <doc xml:whitespace="preserve">Obtains an iterator pointing to @char_offset within the given
line. The @char_offset must exist, offsets off the end of the line
are not allowed. Note &lt;emphasis&gt;characters&lt;/emphasis&gt;, not bytes;
UTF-8 may encode one character as multiple bytes.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="iter"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:whitespace="preserve">iterator to initialize</doc>
            <type name="TextIter" c:type="GtkTextIter*"/>
          </parameter>
          <parameter name="line_number" transfer-ownership="none">
            <doc xml:whitespace="preserve">line number counting from 0</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="char_offset" transfer-ownership="none">
            <doc xml:whitespace="preserve">char offset from start of line</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_iter_at_mark"
              c:identifier="gtk_text_buffer_get_iter_at_mark">
        <doc xml:whitespace="preserve">Initializes @iter with the current position of @mark.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="iter"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:whitespace="preserve">iterator to initialize</doc>
            <type name="TextIter" c:type="GtkTextIter*"/>
          </parameter>
          <parameter name="mark" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkTextMark in @buffer</doc>
            <type name="TextMark" c:type="GtkTextMark*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_iter_at_offset"
              c:identifier="gtk_text_buffer_get_iter_at_offset">
        <doc xml:whitespace="preserve">Initializes @iter to a position @char_offset chars from the start
of the entire buffer. If @char_offset is -1 or greater than the number
of characters in the buffer, @iter is initialized to the end iterator,
the iterator one past the last valid character in the buffer.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="iter"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:whitespace="preserve">iterator to initialize</doc>
            <type name="TextIter" c:type="GtkTextIter*"/>
          </parameter>
          <parameter name="char_offset" transfer-ownership="none">
            <doc xml:whitespace="preserve">char offset from start of buffer, counting from 0, or -1</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_line_count"
              c:identifier="gtk_text_buffer_get_line_count">
        <doc xml:whitespace="preserve">Obtains the number of lines in the buffer. This value is cached, so
the function is very fast.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">number of lines in the buffer</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="get_mark" c:identifier="gtk_text_buffer_get_mark">
        <doc xml:whitespace="preserve">Returns the mark named @name in buffer @buffer, or %NULL if no such
mark exists in the buffer.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GtkTextMark, or %NULL</doc>
          <type name="TextMark" c:type="GtkTextMark*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:whitespace="preserve">a mark name</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_modified" c:identifier="gtk_text_buffer_get_modified">
        <doc xml:whitespace="preserve">Indicates whether the buffer has been modified since the last call
to gtk_text_buffer_set_modified() set the modification flag to
%FALSE. Used for example to enable a "save" function in a text
editor.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the buffer has been modified</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_paste_target_list"
              c:identifier="gtk_text_buffer_get_paste_target_list"
              version="2.10">
        <doc xml:whitespace="preserve">This function returns the list of targets this text buffer supports
for pasting and as DND destination. The targets in the list are
added with %info values from the #GtkTextBufferTargetInfo enum,
using gtk_target_list_add_rich_text_targets() and
gtk_target_list_add_text_targets().</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the #GtkTargetList</doc>
          <type name="TargetList" c:type="GtkTargetList*"/>
        </return-value>
      </method>
      <method name="get_selection_bound"
              c:identifier="gtk_text_buffer_get_selection_bound">
        <doc xml:whitespace="preserve">Returns the mark that represents the selection bound.  Equivalent
to calling gtk_text_buffer_get_mark() to get the mark named
"selection_bound", but very slightly more efficient, and involves
less typing.
The currently-selected text in @buffer is the region between the
"selection_bound" and "insert" marks. If "selection_bound" and
"insert" are in the same place, then there is no current selection.
gtk_text_buffer_get_selection_bounds() is another convenient function
for handling the selection, if you just want to know whether there's a
selection and what its bounds are.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">selection bound mark</doc>
          <type name="TextMark" c:type="GtkTextMark*"/>
        </return-value>
      </method>
      <method name="get_selection_bounds"
              c:identifier="gtk_text_buffer_get_selection_bounds">
        <doc xml:whitespace="preserve">Returns %TRUE if some text is selected; places the bounds
of the selection in @start and @end (if the selection has length 0,
then @start and @end are filled in with the same value).
NULL, then they are not filled in, but the return value still indicates
whether text is selected.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">whether the selection has nonzero length</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="start"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:whitespace="preserve">iterator to initialize with selection start</doc>
            <type name="TextIter" c:type="GtkTextIter*"/>
          </parameter>
          <parameter name="end"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:whitespace="preserve">iterator to initialize with selection end</doc>
            <type name="TextIter" c:type="GtkTextIter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_serialize_formats"
              c:identifier="gtk_text_buffer_get_serialize_formats"
              version="2.10"
              introspectable="0">
        <doc xml:whitespace="preserve">This function returns the rich text serialize formats registered
with @buffer using gtk_text_buffer_register_serialize_format() or
gtk_text_buffer_register_serialize_tagset()
formats.</doc>
        <return-value>
          <doc xml:whitespace="preserve">an array of #GdkAtom&lt;!-- --&gt;s representing the registered</doc>
          <type name="Gdk.Atom" c:type="GdkAtom*"/>
        </return-value>
        <parameters>
          <parameter name="n_formats" transfer-ownership="none">
            <doc xml:whitespace="preserve">return location for the number of formats</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_slice" c:identifier="gtk_text_buffer_get_slice">
        <doc xml:whitespace="preserve">Returns the text in the range [@start,@end). Excludes undisplayed
text (text marked with tags that set the invisibility attribute) if
0xFFFC character whenever the buffer contains
embedded images, so byte and character indexes into
the returned string &lt;emphasis&gt;do&lt;/emphasis&gt; correspond to byte
and character indexes into the buffer. Contrast with
gtk_text_buffer_get_text(). Note that 0xFFFC can occur in normal
text as well, so it is not a reliable indicator that a pixbuf or
widget is in the buffer.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">an allocated UTF-8 string</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="start" transfer-ownership="none">
            <doc xml:whitespace="preserve">start of a range</doc>
            <type name="TextIter" c:type="GtkTextIter*"/>
          </parameter>
          <parameter name="end" transfer-ownership="none">
            <doc xml:whitespace="preserve">end of a range</doc>
            <type name="TextIter" c:type="GtkTextIter*"/>
          </parameter>
          <parameter name="include_hidden_chars" transfer-ownership="none">
            <doc xml:whitespace="preserve">whether to include invisible text</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_start_iter"
              c:identifier="gtk_text_buffer_get_start_iter">
        <doc xml:whitespace="preserve">Initialized @iter with the first position in the text buffer. This
is the same as using gtk_text_buffer_get_iter_at_offset() to get
the iter at character offset 0.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="iter"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:whitespace="preserve">iterator to initialize</doc>
            <type name="TextIter" c:type="GtkTextIter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_tag_table"
              c:identifier="gtk_text_buffer_get_tag_table">
        <doc xml:whitespace="preserve">Get the #GtkTextTagTable associated with this buffer.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the buffer's tag table</doc>
          <type name="TextTagTable" c:type="GtkTextTagTable*"/>
        </return-value>
      </method>
      <method name="get_text" c:identifier="gtk_text_buffer_get_text">
        <doc xml:whitespace="preserve">Returns the text in the range [@start,@end). Excludes undisplayed
text (text marked with tags that set the invisibility attribute) if
representing embedded images, so byte and character indexes into
the returned string do &lt;emphasis&gt;not&lt;/emphasis&gt; correspond to byte
and character indexes into the buffer. Contrast with
gtk_text_buffer_get_slice().</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">an allocated UTF-8 string</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="start" transfer-ownership="none">
            <doc xml:whitespace="preserve">start of a range</doc>
            <type name="TextIter" c:type="GtkTextIter*"/>
          </parameter>
          <parameter name="end" transfer-ownership="none">
            <doc xml:whitespace="preserve">end of a range</doc>
            <type name="TextIter" c:type="GtkTextIter*"/>
          </parameter>
          <parameter name="include_hidden_chars" transfer-ownership="none">
            <doc xml:whitespace="preserve">whether to include invisible text</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="insert" c:identifier="gtk_text_buffer_insert">
        <doc xml:whitespace="preserve">Inserts @len bytes of @text at position @iter.  If @len is -1,
entirety. Emits the "insert-text" signal; insertion actually occurs
in the default handler for the signal. @iter is invalidated when
insertion occurs (because the buffer contents change), but the
default signal handler revalidates it to point to the end of the
inserted text.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="iter" transfer-ownership="none">
            <doc xml:whitespace="preserve">a position in the buffer</doc>
            <type name="TextIter" c:type="GtkTextIter*"/>
          </parameter>
          <parameter name="text" transfer-ownership="none">
            <doc xml:whitespace="preserve">text in UTF-8 format</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <doc xml:whitespace="preserve">length of text in bytes, or -1</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="insert_at_cursor"
              c:identifier="gtk_text_buffer_insert_at_cursor">
        <doc xml:whitespace="preserve">Simply calls gtk_text_buffer_insert(), using the current
cursor position as the insertion point.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="text" transfer-ownership="none">
            <doc xml:whitespace="preserve">text in UTF-8 format</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <doc xml:whitespace="preserve">length of text, in bytes</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="insert_child_anchor"
              c:identifier="gtk_text_buffer_insert_child_anchor">
        <doc xml:whitespace="preserve">Inserts a child widget anchor into the text buffer at @iter. The
anchor will be counted as one character in character counts, and
when obtaining the buffer contents as a string, will be represented
by the Unicode "object replacement character" 0xFFFC. Note that the
"slice" variants for obtaining portions of the buffer as a string
include this character for child anchors, but the "text" variants do
not. E.g. see gtk_text_buffer_get_slice() and
gtk_text_buffer_get_text(). Consider
gtk_text_buffer_create_child_anchor() as a more convenient
alternative to this function. The buffer will add a reference to
the anchor, so you can unref it after insertion.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="iter" transfer-ownership="none">
            <doc xml:whitespace="preserve">location to insert the anchor</doc>
            <type name="TextIter" c:type="GtkTextIter*"/>
          </parameter>
          <parameter name="anchor" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkTextChildAnchor</doc>
            <type name="TextChildAnchor" c:type="GtkTextChildAnchor*"/>
          </parameter>
        </parameters>
      </method>
      <method name="insert_interactive"
              c:identifier="gtk_text_buffer_insert_interactive">
        <doc xml:whitespace="preserve">Like gtk_text_buffer_insert(), but the insertion will not occur if
want to prevent insertions at ineditable locations if the insertion
results from a user action (is interactive).
have a tag affecting editability applied to it. Typically the
result of gtk_text_view_get_editable() is appropriate here.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">whether text was actually inserted</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="iter" transfer-ownership="none">
            <doc xml:whitespace="preserve">a position in @buffer</doc>
            <type name="TextIter" c:type="GtkTextIter*"/>
          </parameter>
          <parameter name="text" transfer-ownership="none">
            <doc xml:whitespace="preserve">some UTF-8 text</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <doc xml:whitespace="preserve">length of text in bytes, or -1</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="default_editable" transfer-ownership="none">
            <doc xml:whitespace="preserve">default editability of buffer</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="insert_interactive_at_cursor"
              c:identifier="gtk_text_buffer_insert_interactive_at_cursor">
        <doc xml:whitespace="preserve">Calls gtk_text_buffer_insert_interactive() at the cursor
position.
have a tag affecting editability applied to it. Typically the
result of gtk_text_view_get_editable() is appropriate here.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">whether text was actually inserted</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="text" transfer-ownership="none">
            <doc xml:whitespace="preserve">text in UTF-8 format</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <doc xml:whitespace="preserve">length of text in bytes, or -1</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="default_editable" transfer-ownership="none">
            <doc xml:whitespace="preserve">default editability of buffer</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="insert_pixbuf"
              c:identifier="gtk_text_buffer_insert_pixbuf">
        <doc xml:whitespace="preserve">Inserts an image into the text buffer at @iter. The image will be
counted as one character in character counts, and when obtaining
the buffer contents as a string, will be represented by the Unicode
"object replacement character" 0xFFFC. Note that the "slice"
variants for obtaining portions of the buffer as a string include
this character for pixbufs, but the "text" variants do
not. e.g. see gtk_text_buffer_get_slice() and
gtk_text_buffer_get_text().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="iter" transfer-ownership="none">
            <doc xml:whitespace="preserve">location to insert the pixbuf</doc>
            <type name="TextIter" c:type="GtkTextIter*"/>
          </parameter>
          <parameter name="pixbuf" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GdkPixbuf</doc>
            <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
          </parameter>
        </parameters>
      </method>
      <method name="insert_range" c:identifier="gtk_text_buffer_insert_range">
        <doc xml:whitespace="preserve">Copies text, tags, and pixbufs between @start and @end (the order
of @start and @end doesn't matter) and inserts the copy at @iter.
Used instead of simply getting/inserting text because it preserves
images and tags. If @start and @end are in a different buffer from
Implemented via emissions of the insert_text and apply_tag signals,
so expect those.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="iter" transfer-ownership="none">
            <doc xml:whitespace="preserve">a position in @buffer</doc>
            <type name="TextIter" c:type="GtkTextIter*"/>
          </parameter>
          <parameter name="start" transfer-ownership="none">
            <doc xml:whitespace="preserve">a position in a #GtkTextBuffer</doc>
            <type name="TextIter" c:type="GtkTextIter*"/>
          </parameter>
          <parameter name="end" transfer-ownership="none">
            <doc xml:whitespace="preserve">another position in the same buffer as @start</doc>
            <type name="TextIter" c:type="GtkTextIter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="insert_range_interactive"
              c:identifier="gtk_text_buffer_insert_range_interactive">
        <doc xml:whitespace="preserve">Same as gtk_text_buffer_insert_range(), but does nothing if the
insertion point isn't editable. The @default_editable parameter
indicates whether the text is editable at @iter if no tags
enclosing @iter affect editability. Typically the result of
gtk_text_view_get_editable() is appropriate here.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">whether an insertion was possible at @iter</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="iter" transfer-ownership="none">
            <doc xml:whitespace="preserve">a position in @buffer</doc>
            <type name="TextIter" c:type="GtkTextIter*"/>
          </parameter>
          <parameter name="start" transfer-ownership="none">
            <doc xml:whitespace="preserve">a position in a #GtkTextBuffer</doc>
            <type name="TextIter" c:type="GtkTextIter*"/>
          </parameter>
          <parameter name="end" transfer-ownership="none">
            <doc xml:whitespace="preserve">another position in the same buffer as @start</doc>
            <type name="TextIter" c:type="GtkTextIter*"/>
          </parameter>
          <parameter name="default_editable" transfer-ownership="none">
            <doc xml:whitespace="preserve">default editability of the buffer</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="insert_with_tags"
              c:identifier="gtk_text_buffer_insert_with_tags"
              introspectable="0">
        <doc xml:whitespace="preserve">Inserts @text into @buffer at @iter, applying the list of tags to
the newly-inserted text. The last tag specified must be NULL to
terminate the list. Equivalent to calling gtk_text_buffer_insert(),
then gtk_text_buffer_apply_tag() on the inserted text;
gtk_text_buffer_insert_with_tags() is just a convenience function.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="iter" transfer-ownership="none">
            <doc xml:whitespace="preserve">an iterator in @buffer</doc>
            <type name="TextIter" c:type="GtkTextIter*"/>
          </parameter>
          <parameter name="text" transfer-ownership="none">
            <doc xml:whitespace="preserve">UTF-8 text</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <doc xml:whitespace="preserve">length of @text, or -1</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="first_tag" transfer-ownership="none">
            <doc xml:whitespace="preserve">first tag to apply to @text</doc>
            <type name="TextTag" c:type="GtkTextTag*"/>
          </parameter>
          <parameter transfer-ownership="none">
            <varargs>
            </varargs>
          </parameter>
        </parameters>
      </method>
      <method name="insert_with_tags_by_name"
              c:identifier="gtk_text_buffer_insert_with_tags_by_name"
              introspectable="0">
        <doc xml:whitespace="preserve">Same as gtk_text_buffer_insert_with_tags(), but allows you
to pass in tag names instead of tag objects.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="iter" transfer-ownership="none">
            <doc xml:whitespace="preserve">position in @buffer</doc>
            <type name="TextIter" c:type="GtkTextIter*"/>
          </parameter>
          <parameter name="text" transfer-ownership="none">
            <doc xml:whitespace="preserve">UTF-8 text</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <doc xml:whitespace="preserve">length of @text, or -1</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="first_tag_name" transfer-ownership="none">
            <doc xml:whitespace="preserve">name of a tag to apply to @text</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter transfer-ownership="none">
            <varargs>
            </varargs>
          </parameter>
        </parameters>
      </method>
      <method name="move_mark" c:identifier="gtk_text_buffer_move_mark">
        <doc xml:whitespace="preserve">Moves @mark to the new location @where. Emits the "mark-set" signal
as notification of the move.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="mark" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkTextMark</doc>
            <type name="TextMark" c:type="GtkTextMark*"/>
          </parameter>
          <parameter name="where" transfer-ownership="none">
            <doc xml:whitespace="preserve">new location for @mark in @buffer</doc>
            <type name="TextIter" c:type="GtkTextIter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="move_mark_by_name"
              c:identifier="gtk_text_buffer_move_mark_by_name">
        <doc xml:whitespace="preserve">Moves the mark named @name (which must exist) to location @where.
See gtk_text_buffer_move_mark() for details.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:whitespace="preserve">name of a mark</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="where" transfer-ownership="none">
            <doc xml:whitespace="preserve">new location for mark</doc>
            <type name="TextIter" c:type="GtkTextIter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="paste_clipboard"
              c:identifier="gtk_text_buffer_paste_clipboard">
        <doc xml:whitespace="preserve">Pastes the contents of a clipboard at the insertion point, or
we'll ask for the paste data and return, and at some point later
after the main loop runs, the paste data will be inserted.)</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="clipboard" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GtkClipboard to paste from</doc>
            <type name="Clipboard" c:type="GtkClipboard*"/>
          </parameter>
          <parameter name="override_location"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">location to insert pasted text, or %NULL for at the cursor</doc>
            <type name="TextIter" c:type="GtkTextIter*"/>
          </parameter>
          <parameter name="default_editable" transfer-ownership="none">
            <doc xml:whitespace="preserve">whether the buffer is editable by default</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="place_cursor" c:identifier="gtk_text_buffer_place_cursor">
        <doc xml:whitespace="preserve">This function moves the "insert" and "selection_bound" marks
simultaneously.  If you move them to the same place in two steps
with gtk_text_buffer_move_mark(), you will temporarily select a
region in between their old and new locations, which can be pretty
inefficient since the temporarily-selected region will force stuff
to be recalculated. This function moves them as a unit, which can
be optimized.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="where" transfer-ownership="none">
            <doc xml:whitespace="preserve">where to put the cursor</doc>
            <type name="TextIter" c:type="GtkTextIter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="register_deserialize_format"
              c:identifier="gtk_text_buffer_register_deserialize_format"
              version="2.10"
              introspectable="0">
        <doc xml:whitespace="preserve">This function registers a rich text deserialization @function along with
its @mime_type with the passed @buffer.
format's mime-type.</doc>
        <return-value>
          <doc xml:whitespace="preserve">the #GdkAtom that corresponds to the newly registered</doc>
          <type name="Gdk.Atom" c:type="GdkAtom"/>
        </return-value>
        <parameters>
          <parameter name="mime_type" transfer-ownership="none">
            <doc xml:whitespace="preserve">the format's mime-type</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="function"
                     transfer-ownership="none"
                     scope="notified"
                     closure="2"
                     destroy="3">
            <doc xml:whitespace="preserve">the deserialize function to register</doc>
            <type name="TextBufferDeserializeFunc"
                  c:type="GtkTextBufferDeserializeFunc"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:whitespace="preserve">@function's user_data</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="user_data_destroy"
                     transfer-ownership="none"
                     scope="async">
            <doc xml:whitespace="preserve">a function to call when @user_data is no longer needed</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </method>
      <method name="register_deserialize_tagset"
              c:identifier="gtk_text_buffer_register_deserialize_tagset"
              version="2.10"
              introspectable="0">
        <doc xml:whitespace="preserve">This function registers GTK+'s internal rich text serialization
format with the passed @buffer. See
gtk_text_buffer_register_serialize_tagset() for details.
format's mime-type.</doc>
        <return-value>
          <doc xml:whitespace="preserve">the #GdkAtom that corresponds to the newly registered</doc>
          <type name="Gdk.Atom" c:type="GdkAtom"/>
        </return-value>
        <parameters>
          <parameter name="tagset_name"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">an optional tagset name, on %NULL</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="register_serialize_format"
              c:identifier="gtk_text_buffer_register_serialize_format"
              version="2.10"
              introspectable="0">
        <doc xml:whitespace="preserve">This function registers a rich text serialization @function along with
its @mime_type with the passed @buffer.
format's mime-type.</doc>
        <return-value>
          <doc xml:whitespace="preserve">the #GdkAtom that corresponds to the newly registered</doc>
          <type name="Gdk.Atom" c:type="GdkAtom"/>
        </return-value>
        <parameters>
          <parameter name="mime_type" transfer-ownership="none">
            <doc xml:whitespace="preserve">the format's mime-type</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="function"
                     transfer-ownership="none"
                     scope="notified"
                     closure="2"
                     destroy="3">
            <doc xml:whitespace="preserve">the serialize function to register</doc>
            <type name="TextBufferSerializeFunc"
                  c:type="GtkTextBufferSerializeFunc"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:whitespace="preserve">%function's user_data</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="user_data_destroy"
                     transfer-ownership="none"
                     scope="async">
            <doc xml:whitespace="preserve">a function to call when @user_data is no longer needed</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </method>
      <method name="register_serialize_tagset"
              c:identifier="gtk_text_buffer_register_serialize_tagset"
              version="2.10"
              introspectable="0">
        <doc xml:whitespace="preserve">This function registers GTK+'s internal rich text serialization
format with the passed @buffer. The internal format does not comply
to any standard rich text format and only works between #GtkTextBuffer
instances. It is capable of serializing all of a text buffer's tags
and embedded pixbufs.
This function is just a wrapper around
gtk_text_buffer_register_serialize_format(). The mime type used
for registering is "application/x-gtk-text-buffer-rich-text", or
"application/x-gtk-text-buffer-rich-text;format=@tagset_name" if a
The @tagset_name can be used to restrict the transfer of rich text
to buffers with compatible sets of tags, in order to avoid unknown
tags from being pasted. It is probably the common case to pass an
identifier != %NULL here, since the %NULL tagset requires the
receiving buffer to deal with with pasting of arbitrary tags.
format's mime-type.</doc>
        <return-value>
          <doc xml:whitespace="preserve">the #GdkAtom that corresponds to the newly registered</doc>
          <type name="Gdk.Atom" c:type="GdkAtom"/>
        </return-value>
        <parameters>
          <parameter name="tagset_name"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">an optional tagset name, on %NULL</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_all_tags"
              c:identifier="gtk_text_buffer_remove_all_tags">
        <doc xml:whitespace="preserve">Removes all tags in the range between @start and @end.  Be careful
with this function; it could remove tags added in code unrelated to
the code you're currently writing. That is, using this function is
probably a bad idea if you have two or more unrelated code sections
that add tags.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="start" transfer-ownership="none">
            <doc xml:whitespace="preserve">one bound of range to be untagged</doc>
            <type name="TextIter" c:type="GtkTextIter*"/>
          </parameter>
          <parameter name="end" transfer-ownership="none">
            <doc xml:whitespace="preserve">other bound of range to be untagged</doc>
            <type name="TextIter" c:type="GtkTextIter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_selection_clipboard"
              c:identifier="gtk_text_buffer_remove_selection_clipboard">
        <doc xml:whitespace="preserve">Removes a #GtkClipboard added with 
gtk_text_buffer_add_selection_clipboard().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="clipboard" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkClipboard added to @buffer by gtk_text_buffer_add_selection_clipboard()</doc>
            <type name="Clipboard" c:type="GtkClipboard*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_tag" c:identifier="gtk_text_buffer_remove_tag">
        <doc xml:whitespace="preserve">Emits the "remove-tag" signal. The default handler for the signal
removes all occurrences of @tag from the given range. @start and</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="tag" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkTextTag</doc>
            <type name="TextTag" c:type="GtkTextTag*"/>
          </parameter>
          <parameter name="start" transfer-ownership="none">
            <doc xml:whitespace="preserve">one bound of range to be untagged</doc>
            <type name="TextIter" c:type="GtkTextIter*"/>
          </parameter>
          <parameter name="end" transfer-ownership="none">
            <doc xml:whitespace="preserve">other bound of range to be untagged</doc>
            <type name="TextIter" c:type="GtkTextIter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_tag_by_name"
              c:identifier="gtk_text_buffer_remove_tag_by_name">
        <doc xml:whitespace="preserve">Calls gtk_text_tag_table_lookup() on the buffer's tag table to
get a #GtkTextTag, then calls gtk_text_buffer_remove_tag().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:whitespace="preserve">name of a #GtkTextTag</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="start" transfer-ownership="none">
            <doc xml:whitespace="preserve">one bound of range to be untagged</doc>
            <type name="TextIter" c:type="GtkTextIter*"/>
          </parameter>
          <parameter name="end" transfer-ownership="none">
            <doc xml:whitespace="preserve">other bound of range to be untagged</doc>
            <type name="TextIter" c:type="GtkTextIter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="select_range"
              c:identifier="gtk_text_buffer_select_range"
              version="2.4">
        <doc xml:whitespace="preserve">This function moves the "insert" and "selection_bound" marks
simultaneously.  If you move them in two steps
with gtk_text_buffer_move_mark(), you will temporarily select a
region in between their old and new locations, which can be pretty
inefficient since the temporarily-selected region will force stuff
to be recalculated. This function moves them as a unit, which can
be optimized.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="ins" transfer-ownership="none">
            <doc xml:whitespace="preserve">where to put the "insert" mark</doc>
            <type name="TextIter" c:type="GtkTextIter*"/>
          </parameter>
          <parameter name="bound" transfer-ownership="none">
            <doc xml:whitespace="preserve">where to put the "selection_bound" mark</doc>
            <type name="TextIter" c:type="GtkTextIter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="serialize"
              c:identifier="gtk_text_buffer_serialize"
              version="2.10">
        <doc xml:whitespace="preserve">This function serializes the portion of text between @start
and @end in the rich text format represented by @format.
gtk_text_buffer_register_serialize_format() or
gtk_text_buffer_register_serialize_tagset() beforehand.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the serialized data, encoded as @format</doc>
          <type name="guint8" c:type="guint8*"/>
        </return-value>
        <parameters>
          <parameter name="content_buffer" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GtkTextBuffer to serialize</doc>
            <type name="TextBuffer" c:type="GtkTextBuffer*"/>
          </parameter>
          <parameter name="format" transfer-ownership="none">
            <doc xml:whitespace="preserve">the rich text format to use for serializing</doc>
            <type name="Gdk.Atom" c:type="GdkAtom"/>
          </parameter>
          <parameter name="start" transfer-ownership="none">
            <doc xml:whitespace="preserve">start of block of text to serialize</doc>
            <type name="TextIter" c:type="GtkTextIter*"/>
          </parameter>
          <parameter name="end" transfer-ownership="none">
            <doc xml:whitespace="preserve">end of block of test to serialize</doc>
            <type name="TextIter" c:type="GtkTextIter*"/>
          </parameter>
          <parameter name="length" transfer-ownership="none">
            <doc xml:whitespace="preserve">return location for the length of the serialized data</doc>
            <type name="gulong" c:type="gsize*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_modified" c:identifier="gtk_text_buffer_set_modified">
        <doc xml:whitespace="preserve">Used to keep track of whether the buffer has been modified since the
last time it was saved. Whenever the buffer is saved to disk, call
gtk_text_buffer_set_modified (@buffer, FALSE). When the buffer is modified,
it will automatically toggled on the modified bit again. When the modified
bit flips, the buffer emits a "modified-changed" signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="setting" transfer-ownership="none">
            <doc xml:whitespace="preserve">modification flag setting</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_text" c:identifier="gtk_text_buffer_set_text">
        <doc xml:whitespace="preserve">Deletes current contents of @buffer, and inserts @text instead. If</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="text" transfer-ownership="none">
            <doc xml:whitespace="preserve">UTF-8 text to insert</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <doc xml:whitespace="preserve">length of @text in bytes</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="unregister_deserialize_format"
              c:identifier="gtk_text_buffer_unregister_deserialize_format"
              version="2.10">
        <doc xml:whitespace="preserve">This function unregisters a rich text format that was previously
registered using gtk_text_buffer_register_deserialize_format() or
gtk_text_buffer_register_deserialize_tagset().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="format" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GdkAtom representing a registered rich text format.</doc>
            <type name="Gdk.Atom" c:type="GdkAtom"/>
          </parameter>
        </parameters>
      </method>
      <method name="unregister_serialize_format"
              c:identifier="gtk_text_buffer_unregister_serialize_format"
              version="2.10">
        <doc xml:whitespace="preserve">This function unregisters a rich text format that was previously
registered using gtk_text_buffer_register_serialize_format() or
gtk_text_buffer_register_serialize_tagset()</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="format" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GdkAtom representing a registered rich text format.</doc>
            <type name="Gdk.Atom" c:type="GdkAtom"/>
          </parameter>
        </parameters>
      </method>
      <property name="copy-target-list"
                version="2.10"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The list of targets this buffer supports for clipboard copying
and as DND source.</doc>
        <type name="TargetList"/>
      </property>
      <property name="cursor-position"
                version="2.10"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The position of the insert mark (as offset from the beginning 
of the buffer). It is useful for getting notified when the 
cursor moves.</doc>
        <type name="gint"/>
      </property>
      <property name="has-selection" version="2.10" transfer-ownership="none">
        <doc xml:whitespace="preserve">Whether the buffer has some text currently selected.</doc>
        <type name="gboolean"/>
      </property>
      <property name="paste-target-list"
                version="2.10"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The list of targets this buffer supports for clipboard pasting
and as DND destination.</doc>
        <type name="TargetList"/>
      </property>
      <property name="tag-table"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="TextTagTable"/>
      </property>
      <property name="text"
                version="2.8"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The text content of the buffer. Without child widgets and images,
see gtk_text_buffer_get_text() for more information.</doc>
        <type name="utf8"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="TextBufferPrivate" c:type="GtkTextBufferPrivate*"/>
      </field>
      <glib:signal name="apply-tag">
        <doc xml:whitespace="preserve">The ::apply-tag signal is emitted to apply a tag to a
range of text in a #GtkTextBuffer. 
Applying actually occurs in the default handler.
Note that if your handler runs before the default handler it must not 
invalidate the @start and @end iters (or has to revalidate them). 
gtk_text_buffer_apply_tag(),
gtk_text_buffer_insert_with_tags(),
gtk_text_buffer_insert_range().</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the applied tag</doc>
            <type name="TextTag"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <doc xml:whitespace="preserve">the start of the range the tag is applied to</doc>
            <type name="TextIter"/>
          </parameter>
          <parameter name="p1" transfer-ownership="none">
            <doc xml:whitespace="preserve">the end of the range the tag is applied to</doc>
            <type name="TextIter"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="begin-user-action">
        <doc xml:whitespace="preserve">The ::begin-user-action signal is emitted at the beginning of a single
user-visible operation on a #GtkTextBuffer.
gtk_text_buffer_begin_user_action(),
gtk_text_buffer_insert_interactive(),
gtk_text_buffer_insert_range_interactive(),
gtk_text_buffer_delete_interactive(),
gtk_text_buffer_backspace(),
gtk_text_buffer_delete_selection().</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
      <glib:signal name="changed">
        <doc xml:whitespace="preserve">The ::changed signal is emitted when the content of a #GtkTextBuffer 
has changed.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
      <glib:signal name="delete-range">
        <doc xml:whitespace="preserve">The ::delete-range signal is emitted to delete a range 
from a #GtkTextBuffer. 
Note that if your handler runs before the default handler it must not 
invalidate the @start and @end iters (or has to revalidate them). 
The default signal handler revalidates the @start and @end iters to 
both point point to the location where text was deleted. Handlers
which run after the default handler (see g_signal_connect_after())
do not have access to the deleted text.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the start of the range to be deleted</doc>
            <type name="TextIter"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <doc xml:whitespace="preserve">the end of the range to be deleted</doc>
            <type name="TextIter"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="end-user-action">
        <doc xml:whitespace="preserve">The ::end-user-action signal is emitted at the end of a single
user-visible operation on the #GtkTextBuffer.
gtk_text_buffer_end_user_action(),
gtk_text_buffer_insert_interactive(),
gtk_text_buffer_insert_range_interactive(),
gtk_text_buffer_delete_interactive(),
gtk_text_buffer_backspace(),
gtk_text_buffer_delete_selection(),
gtk_text_buffer_backspace().</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
      <glib:signal name="insert-child-anchor">
        <doc xml:whitespace="preserve">The ::insert-child-anchor signal is emitted to insert a
#GtkTextChildAnchor in a #GtkTextBuffer.
Insertion actually occurs in the default handler.
Note that if your handler runs before the default handler it must
not invalidate the @location iter (or has to revalidate it). 
The default signal handler revalidates it to be placed after the 
inserted @anchor.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">position to insert @anchor in @textbuffer</doc>
            <type name="TextIter"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GtkTextChildAnchor to be inserted</doc>
            <type name="TextChildAnchor"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="insert-pixbuf">
        <doc xml:whitespace="preserve">The ::insert-pixbuf signal is emitted to insert a #GdkPixbuf 
in a #GtkTextBuffer. Insertion actually occurs in the default handler.
Note that if your handler runs before the default handler it must not 
invalidate the @location iter (or has to revalidate it). 
The default signal handler revalidates it to be placed after the 
inserted @pixbuf.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">position to insert @pixbuf in @textbuffer</doc>
            <type name="TextIter"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GdkPixbuf to be inserted</doc>
            <type name="GdkPixbuf.Pixbuf"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="insert-text">
        <doc xml:whitespace="preserve">The ::insert-text signal is emitted to insert text in a #GtkTextBuffer.
Insertion actually occurs in the default handler.  
Note that if your handler runs before the default handler it must not 
invalidate the @location iter (or has to revalidate it). 
The default signal handler revalidates it to point to the end of the 
inserted text.
gtk_text_buffer_insert(), 
gtk_text_buffer_insert_range().</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">position to insert @text in @textbuffer</doc>
            <type name="TextIter"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <doc xml:whitespace="preserve">the UTF-8 text to be inserted</doc>
            <type name="utf8"/>
          </parameter>
          <parameter name="p1" transfer-ownership="none">
            <doc xml:whitespace="preserve">length of the inserted text in bytes</doc>
            <type name="gint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="mark-deleted">
        <doc xml:whitespace="preserve">The ::mark-deleted signal is emitted as notification
after a #GtkTextMark is deleted. 
See also:
gtk_text_buffer_delete_mark().</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">The mark that was deleted</doc>
            <type name="TextMark"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="mark-set">
        <doc xml:whitespace="preserve">The ::mark-set signal is emitted as notification
after a #GtkTextMark is set.
gtk_text_buffer_create_mark(),
gtk_text_buffer_move_mark().</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">The location of @mark in @textbuffer</doc>
            <type name="TextIter"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <doc xml:whitespace="preserve">The mark that is set</doc>
            <type name="TextMark"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="modified-changed">
        <doc xml:whitespace="preserve">The ::modified-changed signal is emitted when the modified bit of a 
#GtkTextBuffer flips.
See also:
gtk_text_buffer_set_modified().</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
      <glib:signal name="paste-done" version="2.16">
        <doc xml:whitespace="preserve">The paste-done signal is emitted after paste operation has been completed.
This is useful to properly scroll the view to the end of the pasted text.
See gtk_text_buffer_paste_clipboard() for more details.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Clipboard"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="remove-tag">
        <doc xml:whitespace="preserve">The ::remove-tag signal is emitted to remove all occurrences of @tag from
a range of text in a #GtkTextBuffer. 
Removal actually occurs in the default handler.
Note that if your handler runs before the default handler it must not 
invalidate the @start and @end iters (or has to revalidate them). 
gtk_text_buffer_remove_tag().</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the tag to be removed</doc>
            <type name="TextTag"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <doc xml:whitespace="preserve">the start of the range the tag is removed from</doc>
            <type name="TextIter"/>
          </parameter>
          <parameter name="p1" transfer-ownership="none">
            <doc xml:whitespace="preserve">the end of the range the tag is removed from</doc>
            <type name="TextIter"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="TextBufferClass"
            c:type="GtkTextBufferClass"
            glib:is-gtype-struct-for="TextBuffer">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="insert_text">
        <callback name="insert_text">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="buffer" transfer-ownership="none">
              <type name="TextBuffer" c:type="GtkTextBuffer*"/>
            </parameter>
            <parameter name="pos" transfer-ownership="none">
              <type name="TextIter" c:type="GtkTextIter*"/>
            </parameter>
            <parameter name="text" transfer-ownership="none">
              <type name="utf8" c:type="gchar*"/>
            </parameter>
            <parameter name="length" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="insert_pixbuf">
        <callback name="insert_pixbuf">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="buffer" transfer-ownership="none">
              <type name="TextBuffer" c:type="GtkTextBuffer*"/>
            </parameter>
            <parameter name="pos" transfer-ownership="none">
              <type name="TextIter" c:type="GtkTextIter*"/>
            </parameter>
            <parameter name="pixbuf" transfer-ownership="none">
              <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="insert_child_anchor">
        <callback name="insert_child_anchor">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="buffer" transfer-ownership="none">
              <type name="TextBuffer" c:type="GtkTextBuffer*"/>
            </parameter>
            <parameter name="pos" transfer-ownership="none">
              <type name="TextIter" c:type="GtkTextIter*"/>
            </parameter>
            <parameter name="anchor" transfer-ownership="none">
              <type name="TextChildAnchor" c:type="GtkTextChildAnchor*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="delete_range">
        <callback name="delete_range">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="buffer" transfer-ownership="none">
              <type name="TextBuffer" c:type="GtkTextBuffer*"/>
            </parameter>
            <parameter name="start" transfer-ownership="none">
              <type name="TextIter" c:type="GtkTextIter*"/>
            </parameter>
            <parameter name="end" transfer-ownership="none">
              <type name="TextIter" c:type="GtkTextIter*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="changed">
        <callback name="changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="buffer" transfer-ownership="none">
              <type name="TextBuffer" c:type="GtkTextBuffer*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="modified_changed">
        <callback name="modified_changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="buffer" transfer-ownership="none">
              <type name="TextBuffer" c:type="GtkTextBuffer*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="mark_set">
        <callback name="mark_set">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="buffer" transfer-ownership="none">
              <type name="TextBuffer" c:type="GtkTextBuffer*"/>
            </parameter>
            <parameter name="location" transfer-ownership="none">
              <type name="TextIter" c:type="GtkTextIter*"/>
            </parameter>
            <parameter name="mark" transfer-ownership="none">
              <type name="TextMark" c:type="GtkTextMark*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="mark_deleted">
        <callback name="mark_deleted">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="buffer" transfer-ownership="none">
              <type name="TextBuffer" c:type="GtkTextBuffer*"/>
            </parameter>
            <parameter name="mark" transfer-ownership="none">
              <type name="TextMark" c:type="GtkTextMark*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="apply_tag">
        <callback name="apply_tag">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="buffer" transfer-ownership="none">
              <type name="TextBuffer" c:type="GtkTextBuffer*"/>
            </parameter>
            <parameter name="tag" transfer-ownership="none">
              <type name="TextTag" c:type="GtkTextTag*"/>
            </parameter>
            <parameter name="start_char" transfer-ownership="none">
              <type name="TextIter" c:type="GtkTextIter*"/>
            </parameter>
            <parameter name="end_char" transfer-ownership="none">
              <type name="TextIter" c:type="GtkTextIter*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="remove_tag">
        <callback name="remove_tag">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="buffer" transfer-ownership="none">
              <type name="TextBuffer" c:type="GtkTextBuffer*"/>
            </parameter>
            <parameter name="tag" transfer-ownership="none">
              <type name="TextTag" c:type="GtkTextTag*"/>
            </parameter>
            <parameter name="start_char" transfer-ownership="none">
              <type name="TextIter" c:type="GtkTextIter*"/>
            </parameter>
            <parameter name="end_char" transfer-ownership="none">
              <type name="TextIter" c:type="GtkTextIter*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="begin_user_action">
        <callback name="begin_user_action">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="buffer" transfer-ownership="none">
              <type name="TextBuffer" c:type="GtkTextBuffer*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="end_user_action">
        <callback name="end_user_action">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="buffer" transfer-ownership="none">
              <type name="TextBuffer" c:type="GtkTextBuffer*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="paste_done">
        <callback name="paste_done">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="buffer" transfer-ownership="none">
              <type name="TextBuffer" c:type="GtkTextBuffer*"/>
            </parameter>
            <parameter name="clipboard" transfer-ownership="none">
              <type name="Clipboard" c:type="GtkClipboard*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_gtk_reserved1" introspectable="0">
        <callback name="_gtk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved2" introspectable="0">
        <callback name="_gtk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved3" introspectable="0">
        <callback name="_gtk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved4" introspectable="0">
        <callback name="_gtk_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved5" introspectable="0">
        <callback name="_gtk_reserved5">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <callback name="TextBufferDeserializeFunc"
              c:type="GtkTextBufferDeserializeFunc"
              throws="1">
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="register_buffer" transfer-ownership="none">
          <type name="TextBuffer" c:type="GtkTextBuffer*"/>
        </parameter>
        <parameter name="content_buffer" transfer-ownership="none">
          <type name="TextBuffer" c:type="GtkTextBuffer*"/>
        </parameter>
        <parameter name="iter" transfer-ownership="none">
          <type name="TextIter" c:type="GtkTextIter*"/>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <type name="guint8" c:type="guint8*"/>
        </parameter>
        <parameter name="length" transfer-ownership="none">
          <type name="gulong" c:type="gsize"/>
        </parameter>
        <parameter name="create_tags" transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="user_data" transfer-ownership="none" closure="6">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <record name="TextBufferPrivate"
            c:type="GtkTextBufferPrivate"
            disguised="1">
    </record>
    <callback name="TextBufferSerializeFunc"
              c:type="GtkTextBufferSerializeFunc">
      <return-value transfer-ownership="none">
        <type name="guint8" c:type="guint8*"/>
      </return-value>
      <parameters>
        <parameter name="register_buffer" transfer-ownership="none">
          <type name="TextBuffer" c:type="GtkTextBuffer*"/>
        </parameter>
        <parameter name="content_buffer" transfer-ownership="none">
          <type name="TextBuffer" c:type="GtkTextBuffer*"/>
        </parameter>
        <parameter name="start" transfer-ownership="none">
          <type name="TextIter" c:type="GtkTextIter*"/>
        </parameter>
        <parameter name="end" transfer-ownership="none">
          <type name="TextIter" c:type="GtkTextIter*"/>
        </parameter>
        <parameter name="length" transfer-ownership="none">
          <type name="gulong" c:type="gsize*"/>
        </parameter>
        <parameter name="user_data" transfer-ownership="none" closure="5">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <enumeration name="TextBufferTargetInfo"
                 glib:type-name="GtkTextBufferTargetInfo"
                 glib:get-type="gtk_text_buffer_target_info_get_type"
                 c:type="GtkTextBufferTargetInfo">
      <member name="buffer_contents"
              value="-1"
              c:identifier="GTK_TEXT_BUFFER_TARGET_INFO_BUFFER_CONTENTS"
              glib:nick="buffer-contents"/>
      <member name="rich_text"
              value="-2"
              c:identifier="GTK_TEXT_BUFFER_TARGET_INFO_RICH_TEXT"
              glib:nick="rich-text"/>
      <member name="text"
              value="-3"
              c:identifier="GTK_TEXT_BUFFER_TARGET_INFO_TEXT"
              glib:nick="text"/>
    </enumeration>
    <callback name="TextCharPredicate"
              c:type="GtkTextCharPredicate"
              introspectable="0">
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="ch" transfer-ownership="none">
          <type name="gunichar" c:type="gunichar"/>
        </parameter>
        <parameter name="user_data" transfer-ownership="none" closure="1">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <class name="TextChildAnchor"
           c:symbol-prefix="text_child_anchor"
           c:type="GtkTextChildAnchor"
           parent="GObject.Object"
           glib:type-name="GtkTextChildAnchor"
           glib:get-type="gtk_text_child_anchor_get_type"
           glib:type-struct="TextChildAnchorClass">
      <constructor name="new" c:identifier="gtk_text_child_anchor_new">
        <doc xml:whitespace="preserve">Creates a new #GtkTextChildAnchor. Usually you would then insert
it into a #GtkTextBuffer with gtk_text_buffer_insert_child_anchor().
To perform the creation and insertion in one step, use the
convenience function gtk_text_buffer_create_child_anchor().</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new #GtkTextChildAnchor</doc>
          <type name="TextChildAnchor" c:type="GtkTextChildAnchor*"/>
        </return-value>
      </constructor>
      <method name="get_deleted"
              c:identifier="gtk_text_child_anchor_get_deleted">
        <doc xml:whitespace="preserve">Determines whether a child anchor has been deleted from
the buffer. Keep in mind that the child anchor will be
unreferenced when removed from the buffer, so you need to
hold your own reference (with g_object_ref()) if you plan
to use this function &amp;mdash; otherwise all deleted child anchors
will also be finalized.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the child anchor has been deleted from its buffer</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_widgets"
              c:identifier="gtk_text_child_anchor_get_widgets">
        <doc xml:whitespace="preserve">Gets a list of all widgets anchored at this child anchor.
The returned list should be freed with g_list_free().</doc>
        <return-value transfer-ownership="container">
          <doc xml:whitespace="preserve">list of widgets anchored at @anchor</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Widget"/>
          </type>
        </return-value>
      </method>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="segment">
        <type name="gpointer" c:type="gpointer"/>
      </field>
    </class>
    <record name="TextChildAnchorClass"
            c:type="GtkTextChildAnchorClass"
            glib:is-gtype-struct-for="TextChildAnchor">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="_gtk_reserved1" introspectable="0">
        <callback name="_gtk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved2" introspectable="0">
        <callback name="_gtk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved3" introspectable="0">
        <callback name="_gtk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved4" introspectable="0">
        <callback name="_gtk_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <enumeration name="TextDirection"
                 glib:type-name="GtkTextDirection"
                 glib:get-type="gtk_text_direction_get_type"
                 c:type="GtkTextDirection">
      <member name="none"
              value="0"
              c:identifier="GTK_TEXT_DIR_NONE"
              glib:nick="none"/>
      <member name="ltr"
              value="1"
              c:identifier="GTK_TEXT_DIR_LTR"
              glib:nick="ltr"/>
      <member name="rtl"
              value="2"
              c:identifier="GTK_TEXT_DIR_RTL"
              glib:nick="rtl"/>
    </enumeration>
    <record name="TextIter"
            c:type="GtkTextIter"
            glib:type-name="GtkTextIter"
            glib:get-type="gtk_text_iter_get_type"
            c:symbol-prefix="text_iter">
      <field name="dummy1" writable="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="dummy2" writable="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="dummy3" writable="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="dummy4" writable="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="dummy5" writable="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="dummy6" writable="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="dummy7" writable="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="dummy8" writable="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="dummy9" writable="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="dummy10" writable="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="dummy11" writable="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="dummy12" writable="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="dummy13" writable="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="dummy14" writable="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <method name="backward_char" c:identifier="gtk_text_iter_backward_char">
        <doc xml:whitespace="preserve">Moves backward by one character offset. Returns %TRUE if movement
was possible; if @iter was the first in the buffer (character
offset 0), gtk_text_iter_backward_char () returns %FALSE for convenience when
writing loops.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">whether movement was possible</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="backward_chars"
              c:identifier="gtk_text_iter_backward_chars">
        <doc xml:whitespace="preserve">Moves @count characters backward, if possible (if @count would move
past the start or end of the buffer, moves to the start or end of
the buffer).  The return value indicates whether the iterator moved
onto a dereferenceable position; if the iterator didn't move, or
moved onto the end iterator, then %FALSE is returned. If @count is 0,
the function does nothing and returns %FALSE.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">whether @iter moved and is dereferenceable</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="count" transfer-ownership="none">
            <doc xml:whitespace="preserve">number of characters to move</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="backward_cursor_position"
              c:identifier="gtk_text_iter_backward_cursor_position">
        <doc xml:whitespace="preserve">Like gtk_text_iter_forward_cursor_position(), but moves backward.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if we moved</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="backward_cursor_positions"
              c:identifier="gtk_text_iter_backward_cursor_positions">
        <doc xml:whitespace="preserve">Moves up to @count cursor positions. See
gtk_text_iter_forward_cursor_position() for details.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if we moved and the new position is dereferenceable</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="count" transfer-ownership="none">
            <doc xml:whitespace="preserve">number of positions to move</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="backward_find_char"
              c:identifier="gtk_text_iter_backward_find_char"
              introspectable="0">
        <doc xml:whitespace="preserve">Same as gtk_text_iter_forward_find_char(), but goes backward from @iter.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">whether a match was found</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="pred"
                     transfer-ownership="none"
                     scope="call"
                     closure="1">
            <doc xml:whitespace="preserve">function to be called on each character</doc>
            <type name="TextCharPredicate" c:type="GtkTextCharPredicate"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:whitespace="preserve">user data for @pred</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="limit" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">search limit, or %NULL for none</doc>
            <type name="TextIter" c:type="GtkTextIter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="backward_line" c:identifier="gtk_text_iter_backward_line">
        <doc xml:whitespace="preserve">Moves @iter to the start of the previous line. Returns %TRUE if
function returns %FALSE. Therefore if @iter was already on line 0,
but not at the start of the line, @iter is snapped to the start of
the line and the function returns %TRUE. (Note that this implies that
in a loop calling this function, the line number may not change on
every iteration, if your first iteration is on line 0.)</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">whether @iter moved</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="backward_lines"
              c:identifier="gtk_text_iter_backward_lines">
        <doc xml:whitespace="preserve">Moves @count lines backward, if possible (if @count would move
past the start or end of the buffer, moves to the start or end of
the buffer).  The return value indicates whether the iterator moved
onto a dereferenceable position; if the iterator didn't move, or
moved onto the end iterator, then %FALSE is returned. If @count is 0,
the function does nothing and returns %FALSE. If @count is negative,
moves forward by 0 - @count lines.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">whether @iter moved and is dereferenceable</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="count" transfer-ownership="none">
            <doc xml:whitespace="preserve">number of lines to move backward</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="backward_search"
              c:identifier="gtk_text_iter_backward_search">
        <doc xml:whitespace="preserve">Same as gtk_text_iter_forward_search(), but moves backward.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">whether a match was found</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="str" transfer-ownership="none">
            <doc xml:whitespace="preserve">search string</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:whitespace="preserve">bitmask of flags affecting the search</doc>
            <type name="TextSearchFlags" c:type="GtkTextSearchFlags"/>
          </parameter>
          <parameter name="match_start"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">return location for start of match, or %NULL</doc>
            <type name="TextIter" c:type="GtkTextIter*"/>
          </parameter>
          <parameter name="match_end"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">return location for end of match, or %NULL</doc>
            <type name="TextIter" c:type="GtkTextIter*"/>
          </parameter>
          <parameter name="limit" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">location of last possible @match_start, or %NULL for start of buffer</doc>
            <type name="TextIter" c:type="GtkTextIter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="backward_sentence_start"
              c:identifier="gtk_text_iter_backward_sentence_start">
        <doc xml:whitespace="preserve">Moves backward to the previous sentence start; if @iter is already at
the start of a sentence, moves backward to the next one.  Sentence
boundaries are determined by Pango and should be correct for nearly
any language (if not, the correct fix would be to the Pango text
boundary algorithms).</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if @iter moved and is not the end iterator</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="backward_sentence_starts"
              c:identifier="gtk_text_iter_backward_sentence_starts">
        <doc xml:whitespace="preserve">Calls gtk_text_iter_backward_sentence_start() up to @count times,
or until it returns %FALSE. If @count is negative, moves forward
instead of backward.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if @iter moved and is not the end iterator</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="count" transfer-ownership="none">
            <doc xml:whitespace="preserve">number of sentences to move</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="backward_to_tag_toggle"
              c:identifier="gtk_text_iter_backward_to_tag_toggle">
        <doc xml:whitespace="preserve">Moves backward to the next toggle (on or off) of the
#GtkTextTag @tag, or to the next toggle of any tag if
returns %FALSE, otherwise %TRUE. Does not return toggles
located at @iter, only toggles before @iter. Sets @iter
to the location of the toggle, or the start of the buffer
if no toggle is found.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">whether we found a tag toggle before @iter</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="tag" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">a #GtkTextTag, or %NULL</doc>
            <type name="TextTag" c:type="GtkTextTag*"/>
          </parameter>
        </parameters>
      </method>
      <method name="backward_visible_cursor_position"
              c:identifier="gtk_text_iter_backward_visible_cursor_position"
              version="2.4">
        <doc xml:whitespace="preserve">Moves @iter forward to the previous visible cursor position. See 
gtk_text_iter_backward_cursor_position() for details.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if we moved and the new position is dereferenceable</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="backward_visible_cursor_positions"
              c:identifier="gtk_text_iter_backward_visible_cursor_positions"
              version="2.4">
        <doc xml:whitespace="preserve">Moves up to @count visible cursor positions. See
gtk_text_iter_backward_cursor_position() for details.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if we moved and the new position is dereferenceable</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="count" transfer-ownership="none">
            <doc xml:whitespace="preserve">number of positions to move</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="backward_visible_line"
              c:identifier="gtk_text_iter_backward_visible_line"
              version="2.8">
        <doc xml:whitespace="preserve">Moves @iter to the start of the previous visible line. Returns %TRUE if
function returns %FALSE. Therefore if @iter was already on line 0,
but not at the start of the line, @iter is snapped to the start of
the line and the function returns %TRUE. (Note that this implies that
in a loop calling this function, the line number may not change on
every iteration, if your first iteration is on line 0.)</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">whether @iter moved</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="backward_visible_lines"
              c:identifier="gtk_text_iter_backward_visible_lines"
              version="2.8">
        <doc xml:whitespace="preserve">Moves @count visible lines backward, if possible (if @count would move
past the start or end of the buffer, moves to the start or end of
the buffer).  The return value indicates whether the iterator moved
onto a dereferenceable position; if the iterator didn't move, or
moved onto the end iterator, then %FALSE is returned. If @count is 0,
the function does nothing and returns %FALSE. If @count is negative,
moves forward by 0 - @count lines.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">whether @iter moved and is dereferenceable</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="count" transfer-ownership="none">
            <doc xml:whitespace="preserve">number of lines to move backward</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="backward_visible_word_start"
              c:identifier="gtk_text_iter_backward_visible_word_start"
              version="2.4">
        <doc xml:whitespace="preserve">Moves backward to the previous visible word start. (If @iter is currently 
on a word start, moves backward to the next one after that.) Word breaks
are determined by Pango and should be correct for nearly any
language (if not, the correct fix would be to the Pango word break
algorithms).</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if @iter moved and is not the end iterator</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="backward_visible_word_starts"
              c:identifier="gtk_text_iter_backward_visible_word_starts"
              version="2.4">
        <doc xml:whitespace="preserve">Calls gtk_text_iter_backward_visible_word_start() up to @count times.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if @iter moved and is not the end iterator</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="count" transfer-ownership="none">
            <doc xml:whitespace="preserve">number of times to move</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="backward_word_start"
              c:identifier="gtk_text_iter_backward_word_start">
        <doc xml:whitespace="preserve">Moves backward to the previous word start. (If @iter is currently on a
word start, moves backward to the next one after that.) Word breaks
are determined by Pango and should be correct for nearly any
language (if not, the correct fix would be to the Pango word break
algorithms).</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if @iter moved and is not the end iterator</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="backward_word_starts"
              c:identifier="gtk_text_iter_backward_word_starts">
        <doc xml:whitespace="preserve">Calls gtk_text_iter_backward_word_start() up to @count times.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if @iter moved and is not the end iterator</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="count" transfer-ownership="none">
            <doc xml:whitespace="preserve">number of times to move</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="begins_tag" c:identifier="gtk_text_iter_begins_tag">
        <doc xml:whitespace="preserve">Returns %TRUE if @tag is toggled on at exactly this point. If @tag
is %NULL, returns %TRUE if any tag is toggled on at this point. Note
that the gtk_text_iter_begins_tag () returns %TRUE if @iter is the
&lt;emphasis&gt;start&lt;/emphasis&gt; of the tagged range;
gtk_text_iter_has_tag () tells you whether an iterator is
&lt;emphasis&gt;within&lt;/emphasis&gt; a tagged range.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">whether @iter is the start of a range tagged with @tag</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="tag" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">a #GtkTextTag, or %NULL</doc>
            <type name="TextTag" c:type="GtkTextTag*"/>
          </parameter>
        </parameters>
      </method>
      <method name="can_insert" c:identifier="gtk_text_iter_can_insert">
        <doc xml:whitespace="preserve">Considering the default editability of the buffer, and tags that
affect editability, determines whether text inserted at @iter would
be editable. If text inserted at @iter would be editable then the
user should be allowed to insert text at @iter.
gtk_text_buffer_insert_interactive() uses this function to decide
whether insertions are allowed at a given position.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">whether text inserted at @iter would be editable</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="default_editability" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE if text is editable by default</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="compare" c:identifier="gtk_text_iter_compare">
        <doc xml:whitespace="preserve">A qsort()-style function that returns negative if @lhs is less than
Ordering is in character offset order, i.e. the first character in the buffer
is less than the second character in the buffer.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">-1 if @lhs is less than @rhs, 1 if @lhs is greater, 0 if they are equal</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <parameter name="rhs" transfer-ownership="none">
            <doc xml:whitespace="preserve">another #GtkTextIter</doc>
            <type name="TextIter" c:type="GtkTextIter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="copy" c:identifier="gtk_text_iter_copy">
        <doc xml:whitespace="preserve">Creates a dynamically-allocated copy of an iterator. This function
is not useful in applications, because iterators can be copied with a
simple assignment (&lt;literal&gt;GtkTextIter i = j;&lt;/literal&gt;). The
function is used by language bindings.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a copy of the @iter, free with gtk_text_iter_free ()</doc>
          <type name="TextIter" c:type="GtkTextIter*"/>
        </return-value>
      </method>
      <method name="editable" c:identifier="gtk_text_iter_editable">
        <doc xml:whitespace="preserve">Returns whether the character at @iter is within an editable region
of text.  Non-editable text is "locked" and can't be changed by the
user via #GtkTextView. This function is simply a convenience
wrapper around gtk_text_iter_get_attributes (). If no tags applied
to this text affect editability, @default_setting will be returned.
You don't want to use this function to decide whether text can be
inserted at @iter, because for insertion you don't want to know
whether the char at @iter is inside an editable range, you want to
know whether a new character inserted at @iter would be inside an
editable range. Use gtk_text_iter_can_insert() to handle this
case.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">whether @iter is inside an editable range</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="default_setting" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE if text is editable by default</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="ends_line" c:identifier="gtk_text_iter_ends_line">
        <doc xml:whitespace="preserve">Returns %TRUE if @iter points to the start of the paragraph
delimiter characters for a line (delimiters will be either a
newline, a carriage return, a carriage return followed by a
newline, or a Unicode paragraph separator character). Note that an
iterator pointing to the \n of a \r\n pair will not be counted as
the end of a line, the line ends before the \r. The end iterator is
considered to be at the end of a line, even though there are no
paragraph delimiter chars there.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">whether @iter is at the end of a line</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="ends_sentence" c:identifier="gtk_text_iter_ends_sentence">
        <doc xml:whitespace="preserve">Determines whether @iter ends a sentence.  Sentence boundaries are
determined by Pango and should be correct for nearly any language
(if not, the correct fix would be to the Pango text boundary
algorithms).</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if @iter is at the end of a sentence.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="ends_tag" c:identifier="gtk_text_iter_ends_tag">
        <doc xml:whitespace="preserve">Returns %TRUE if @tag is toggled off at exactly this point. If @tag
is %NULL, returns %TRUE if any tag is toggled off at this point. Note
that the gtk_text_iter_ends_tag () returns %TRUE if @iter is the
&lt;emphasis&gt;end&lt;/emphasis&gt; of the tagged range;
gtk_text_iter_has_tag () tells you whether an iterator is
&lt;emphasis&gt;within&lt;/emphasis&gt; a tagged range.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">whether @iter is the end of a range tagged with @tag</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="tag" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">a #GtkTextTag, or %NULL</doc>
            <type name="TextTag" c:type="GtkTextTag*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ends_word" c:identifier="gtk_text_iter_ends_word">
        <doc xml:whitespace="preserve">Determines whether @iter ends a natural-language word.  Word breaks
are determined by Pango and should be correct for nearly any
language (if not, the correct fix would be to the Pango word break
algorithms).</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if @iter is at the end of a word</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="equal" c:identifier="gtk_text_iter_equal">
        <doc xml:whitespace="preserve">Tests whether two iterators are equal, using the fastest possible
mechanism. This function is very fast; you can expect it to perform
better than e.g. getting the character offset for each iterator and
comparing the offsets yourself. Also, it's a bit faster than
gtk_text_iter_compare().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the iterators point to the same place in the buffer</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="rhs" transfer-ownership="none">
            <doc xml:whitespace="preserve">another #GtkTextIter</doc>
            <type name="TextIter" c:type="GtkTextIter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="forward_char" c:identifier="gtk_text_iter_forward_char">
        <doc xml:whitespace="preserve">Moves @iter forward by one character offset. Note that images
embedded in the buffer occupy 1 character slot, so
gtk_text_iter_forward_char () may actually move onto an image instead
of a character, if you have images in your buffer.  If @iter is the
end iterator or one character before it, @iter will now point at
the end iterator, and gtk_text_iter_forward_char () returns %FALSE for
convenience when writing loops.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">whether @iter moved and is dereferenceable</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="forward_chars" c:identifier="gtk_text_iter_forward_chars">
        <doc xml:whitespace="preserve">Moves @count characters if possible (if @count would move past the
start or end of the buffer, moves to the start or end of the
buffer). The return value indicates whether the new position of
(the last iterator in the buffer is not dereferenceable). If @count
is 0, the function does nothing and returns %FALSE.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">whether @iter moved and is dereferenceable</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="count" transfer-ownership="none">
            <doc xml:whitespace="preserve">number of characters to move, may be negative</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="forward_cursor_position"
              c:identifier="gtk_text_iter_forward_cursor_position">
        <doc xml:whitespace="preserve">Moves @iter forward by a single cursor position. Cursor positions
are (unsurprisingly) positions where the cursor can appear. Perhaps
surprisingly, there may not be a cursor position between all
characters. The most common example for European languages would be
a carriage return/newline sequence. For some Unicode characters,
the equivalent of say the letter "a" with an accent mark will be
represented as two characters, first the letter then a "combining
mark" that causes the accent to be rendered; so the cursor can't go
between those two characters. See also the #PangoLogAttr structure and
pango_break() function.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if we moved and the new position is dereferenceable</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="forward_cursor_positions"
              c:identifier="gtk_text_iter_forward_cursor_positions">
        <doc xml:whitespace="preserve">Moves up to @count cursor positions. See
gtk_text_iter_forward_cursor_position() for details.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if we moved and the new position is dereferenceable</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="count" transfer-ownership="none">
            <doc xml:whitespace="preserve">number of positions to move</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="forward_find_char"
              c:identifier="gtk_text_iter_forward_find_char"
              introspectable="0">
        <doc xml:whitespace="preserve">Advances @iter, calling @pred on each character. If
If @pred never returns %TRUE, @iter is set to @limit if</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">whether a match was found</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="pred"
                     transfer-ownership="none"
                     scope="call"
                     closure="1">
            <doc xml:whitespace="preserve">a function to be called on each character</doc>
            <type name="TextCharPredicate" c:type="GtkTextCharPredicate"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:whitespace="preserve">user data for @pred</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="limit" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">search limit, or %NULL for none</doc>
            <type name="TextIter" c:type="GtkTextIter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="forward_line" c:identifier="gtk_text_iter_forward_line">
        <doc xml:whitespace="preserve">Moves @iter to the start of the next line. If the iter is already on the
last line of the buffer, moves the iter to the end of the current line.
If after the operation, the iter is at the end of the buffer and not
dereferencable, returns %FALSE. Otherwise, returns %TRUE.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">whether @iter can be dereferenced</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="forward_lines" c:identifier="gtk_text_iter_forward_lines">
        <doc xml:whitespace="preserve">Moves @count lines forward, if possible (if @count would move
past the start or end of the buffer, moves to the start or end of
the buffer).  The return value indicates whether the iterator moved
onto a dereferenceable position; if the iterator didn't move, or
moved onto the end iterator, then %FALSE is returned. If @count is 0,
the function does nothing and returns %FALSE. If @count is negative,
moves backward by 0 - @count lines.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">whether @iter moved and is dereferenceable</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="count" transfer-ownership="none">
            <doc xml:whitespace="preserve">number of lines to move forward</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="forward_search"
              c:identifier="gtk_text_iter_forward_search">
        <doc xml:whitespace="preserve">Searches forward for @str. Any match is returned by setting
first character after the match. The search will not continue past
may wish to use @limit to avoid locking up your UI on large
buffers.
If the #GTK_TEXT_SEARCH_VISIBLE_ONLY flag is present, the match may
have invisible text interspersed in @str. i.e. @str will be a
possibly-noncontiguous subsequence of the matched range. similarly,
if you specify #GTK_TEXT_SEARCH_TEXT_ONLY, the match may have
pixbufs or child widgets mixed inside the matched range. If these
flags are not given, the match must be exact; the special 0xFFFC
character in @str will match embedded pixbufs or child widgets.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">whether a match was found</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="str" transfer-ownership="none">
            <doc xml:whitespace="preserve">a search string</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:whitespace="preserve">flags affecting how the search is done</doc>
            <type name="TextSearchFlags" c:type="GtkTextSearchFlags"/>
          </parameter>
          <parameter name="match_start"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">return location for start of match, or %NULL</doc>
            <type name="TextIter" c:type="GtkTextIter*"/>
          </parameter>
          <parameter name="match_end"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">return location for end of match, or %NULL</doc>
            <type name="TextIter" c:type="GtkTextIter*"/>
          </parameter>
          <parameter name="limit" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">bound for the search, or %NULL for the end of the buffer</doc>
            <type name="TextIter" c:type="GtkTextIter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="forward_sentence_end"
              c:identifier="gtk_text_iter_forward_sentence_end">
        <doc xml:whitespace="preserve">Moves forward to the next sentence end. (If @iter is at the end of
a sentence, moves to the next end of sentence.)  Sentence
boundaries are determined by Pango and should be correct for nearly
any language (if not, the correct fix would be to the Pango text
boundary algorithms).</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if @iter moved and is not the end iterator</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="forward_sentence_ends"
              c:identifier="gtk_text_iter_forward_sentence_ends">
        <doc xml:whitespace="preserve">Calls gtk_text_iter_forward_sentence_end() @count times (or until
gtk_text_iter_forward_sentence_end() returns %FALSE). If @count is
negative, moves backward instead of forward.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if @iter moved and is not the end iterator</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="count" transfer-ownership="none">
            <doc xml:whitespace="preserve">number of sentences to move</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="forward_to_end"
              c:identifier="gtk_text_iter_forward_to_end">
        <doc xml:whitespace="preserve">Moves @iter forward to the "end iterator," which points one past the last
valid character in the buffer. gtk_text_iter_get_char() called on the
end iterator returns 0, which is convenient for writing loops.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="forward_to_line_end"
              c:identifier="gtk_text_iter_forward_to_line_end">
        <doc xml:whitespace="preserve">Moves the iterator to point to the paragraph delimiter characters,
which will be either a newline, a carriage return, a carriage
return/newline in sequence, or the Unicode paragraph separator
character. If the iterator is already at the paragraph delimiter
characters, moves to the paragraph delimiter characters for the
next line. If @iter is on the last line in the buffer, which does
not end in paragraph delimiters, moves to the end iterator (end of
the last line), and returns %FALSE.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if we moved and the new location is not the end iterator</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="forward_to_tag_toggle"
              c:identifier="gtk_text_iter_forward_to_tag_toggle">
        <doc xml:whitespace="preserve">Moves forward to the next toggle (on or off) of the
#GtkTextTag @tag, or to the next toggle of any tag if
returns %FALSE, otherwise %TRUE. Does not return toggles
located at @iter, only toggles after @iter. Sets @iter to
the location of the toggle, or to the end of the buffer
if no toggle is found.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">whether we found a tag toggle after @iter</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="tag" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">a #GtkTextTag, or %NULL</doc>
            <type name="TextTag" c:type="GtkTextTag*"/>
          </parameter>
        </parameters>
      </method>
      <method name="forward_visible_cursor_position"
              c:identifier="gtk_text_iter_forward_visible_cursor_position"
              version="2.4">
        <doc xml:whitespace="preserve">Moves @iter forward to the next visible cursor position. See 
gtk_text_iter_forward_cursor_position() for details.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if we moved and the new position is dereferenceable</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="forward_visible_cursor_positions"
              c:identifier="gtk_text_iter_forward_visible_cursor_positions"
              version="2.4">
        <doc xml:whitespace="preserve">Moves up to @count visible cursor positions. See
gtk_text_iter_forward_cursor_position() for details.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if we moved and the new position is dereferenceable</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="count" transfer-ownership="none">
            <doc xml:whitespace="preserve">number of positions to move</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="forward_visible_line"
              c:identifier="gtk_text_iter_forward_visible_line"
              version="2.8">
        <doc xml:whitespace="preserve">Moves @iter to the start of the next visible line. Returns %TRUE if there
was a next line to move to, and %FALSE if @iter was simply moved to
the end of the buffer and is now not dereferenceable, or if @iter was
already at the end of the buffer.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">whether @iter can be dereferenced</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="forward_visible_lines"
              c:identifier="gtk_text_iter_forward_visible_lines"
              version="2.8">
        <doc xml:whitespace="preserve">Moves @count visible lines forward, if possible (if @count would move
past the start or end of the buffer, moves to the start or end of
the buffer).  The return value indicates whether the iterator moved
onto a dereferenceable position; if the iterator didn't move, or
moved onto the end iterator, then %FALSE is returned. If @count is 0,
the function does nothing and returns %FALSE. If @count is negative,
moves backward by 0 - @count lines.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">whether @iter moved and is dereferenceable</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="count" transfer-ownership="none">
            <doc xml:whitespace="preserve">number of lines to move forward</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="forward_visible_word_end"
              c:identifier="gtk_text_iter_forward_visible_word_end"
              version="2.4">
        <doc xml:whitespace="preserve">Moves forward to the next visible word end. (If @iter is currently on a
word end, moves forward to the next one after that.) Word breaks
are determined by Pango and should be correct for nearly any
language (if not, the correct fix would be to the Pango word break
algorithms).</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if @iter moved and is not the end iterator</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="forward_visible_word_ends"
              c:identifier="gtk_text_iter_forward_visible_word_ends"
              version="2.4">
        <doc xml:whitespace="preserve">Calls gtk_text_iter_forward_visible_word_end() up to @count times.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if @iter moved and is not the end iterator</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="count" transfer-ownership="none">
            <doc xml:whitespace="preserve">number of times to move</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="forward_word_end"
              c:identifier="gtk_text_iter_forward_word_end">
        <doc xml:whitespace="preserve">Moves forward to the next word end. (If @iter is currently on a
word end, moves forward to the next one after that.) Word breaks
are determined by Pango and should be correct for nearly any
language (if not, the correct fix would be to the Pango word break
algorithms).</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if @iter moved and is not the end iterator</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="forward_word_ends"
              c:identifier="gtk_text_iter_forward_word_ends">
        <doc xml:whitespace="preserve">Calls gtk_text_iter_forward_word_end() up to @count times.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if @iter moved and is not the end iterator</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="count" transfer-ownership="none">
            <doc xml:whitespace="preserve">number of times to move</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="gtk_text_iter_free">
        <doc xml:whitespace="preserve">Free an iterator allocated on the heap. This function
is intended for use in language bindings, and is not
especially useful for applications, because iterators can
simply be allocated on the stack.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="get_attributes"
              c:identifier="gtk_text_iter_get_attributes">
        <doc xml:whitespace="preserve">Computes the effect of any tags applied to this spot in the
text. The @values parameter should be initialized to the default
settings you wish to use if no tags are in effect. You'd typically
obtain the defaults from gtk_text_view_get_default_attributes().
gtk_text_iter_get_attributes () will modify @values, applying the
effects of any tags present at @iter. If any tags affected @values,
the function returns %TRUE.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if @values was modified</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="values" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkTextAttributes to be filled in</doc>
            <type name="TextAttributes" c:type="GtkTextAttributes*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_buffer" c:identifier="gtk_text_iter_get_buffer">
        <doc xml:whitespace="preserve">Returns the #GtkTextBuffer this iterator is associated with.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the buffer</doc>
          <type name="TextBuffer" c:type="GtkTextBuffer*"/>
        </return-value>
      </method>
      <method name="get_bytes_in_line"
              c:identifier="gtk_text_iter_get_bytes_in_line">
        <doc xml:whitespace="preserve">Returns the number of bytes in the line containing @iter,
including the paragraph delimiters.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">number of bytes in the line</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="get_char"
              c:identifier="gtk_text_iter_get_char"
              introspectable="0">
        <doc xml:whitespace="preserve">Returns the Unicode character at this iterator.  (Equivalent to
operator* on a C++ iterator.)  If the element at this iterator is a
non-character element, such as an image embedded in the buffer, the
Unicode "unknown" character 0xFFFC is returned. If invoked on
the end iterator, zero is returned; zero is not a valid Unicode character.
So you can write a loop which ends when gtk_text_iter_get_char ()
returns 0.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a Unicode character, or 0 if @iter is not dereferenceable</doc>
          <type name="gunichar" c:type="gunichar"/>
        </return-value>
      </method>
      <method name="get_chars_in_line"
              c:identifier="gtk_text_iter_get_chars_in_line">
        <doc xml:whitespace="preserve">Returns the number of characters in the line containing @iter,
including the paragraph delimiters.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">number of characters in the line</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="get_child_anchor"
              c:identifier="gtk_text_iter_get_child_anchor">
        <doc xml:whitespace="preserve">If the location at @iter contains a child anchor, the
anchor is returned (with no new reference count added). Otherwise,
%NULL is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the anchor at @iter</doc>
          <type name="TextChildAnchor" c:type="GtkTextChildAnchor*"/>
        </return-value>
      </method>
      <method name="get_language" c:identifier="gtk_text_iter_get_language">
        <doc xml:whitespace="preserve">A convenience wrapper around gtk_text_iter_get_attributes (),
which returns the language in effect at @iter. If no tags affecting
language apply to @iter, the return value is identical to that of
gtk_get_default_language ().</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">language in effect at @iter</doc>
          <type name="Pango.Language" c:type="PangoLanguage*"/>
        </return-value>
      </method>
      <method name="get_line" c:identifier="gtk_text_iter_get_line">
        <doc xml:whitespace="preserve">Returns the line number containing the iterator. Lines in
a #GtkTextBuffer are numbered beginning with 0 for the first
line in the buffer.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a line number</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="get_line_index"
              c:identifier="gtk_text_iter_get_line_index">
        <doc xml:whitespace="preserve">Returns the byte index of the iterator, counting
from the start of a newline-terminated line.
Remember that #GtkTextBuffer encodes text in
UTF-8, and that characters can require a variable
number of bytes to represent.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">distance from start of line, in bytes</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="get_line_offset"
              c:identifier="gtk_text_iter_get_line_offset">
        <doc xml:whitespace="preserve">Returns the character offset of the iterator,
counting from the start of a newline-terminated line.
The first character on the line has offset 0.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">offset from start of line</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="get_marks" c:identifier="gtk_text_iter_get_marks">
        <doc xml:whitespace="preserve">Returns a list of all #GtkTextMark at this location. Because marks
are not iterable (they don't take up any "space" in the buffer,
they are just marks in between iterable locations), multiple marks
can exist in the same place. The returned list is not in any
meaningful order.</doc>
        <return-value transfer-ownership="container">
          <doc xml:whitespace="preserve">list of #GtkTextMark</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="TextMark"/>
          </type>
        </return-value>
      </method>
      <method name="get_offset" c:identifier="gtk_text_iter_get_offset">
        <doc xml:whitespace="preserve">Returns the character offset of an iterator.
Each character in a #GtkTextBuffer has an offset,
starting with 0 for the first character in the buffer.
Use gtk_text_buffer_get_iter_at_offset () to convert an
offset back into an iterator.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a character offset</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="get_pixbuf" c:identifier="gtk_text_iter_get_pixbuf">
        <doc xml:whitespace="preserve">If the element at @iter is a pixbuf, the pixbuf is returned
(with no new reference count added). Otherwise,
%NULL is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the pixbuf at @iter</doc>
          <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
      </method>
      <method name="get_slice" c:identifier="gtk_text_iter_get_slice">
        <doc xml:whitespace="preserve">Returns the text in the given range. A "slice" is an array of
characters encoded in UTF-8 format, including the Unicode "unknown"
character 0xFFFC for iterable non-character elements in the buffer,
such as images.  Because images are encoded in the slice, byte and
character offsets in the returned array will correspond to byte
offsets in the text buffer. Note that 0xFFFC can occur in normal
text as well, so it is not a reliable indicator that a pixbuf or
widget is in the buffer.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">slice of text from the buffer</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="end" transfer-ownership="none">
            <doc xml:whitespace="preserve">iterator at end of a range</doc>
            <type name="TextIter" c:type="GtkTextIter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_tags" c:identifier="gtk_text_iter_get_tags">
        <doc xml:whitespace="preserve">Returns a list of tags that apply to @iter, in ascending order of
priority (highest-priority tags are last). The #GtkTextTag in the
list don't have a reference added, but you have to free the list
itself.</doc>
        <return-value transfer-ownership="container">
          <doc xml:whitespace="preserve">list of #GtkTextTag</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="TextTag"/>
          </type>
        </return-value>
      </method>
      <method name="get_text" c:identifier="gtk_text_iter_get_text">
        <doc xml:whitespace="preserve">Returns &lt;emphasis&gt;text&lt;/emphasis&gt; in the given range.  If the range
contains non-text elements such as images, the character and byte
offsets in the returned string will not correspond to character and
byte offsets in the buffer. If you want offsets to correspond, see
gtk_text_iter_get_slice ().</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">array of characters from the buffer</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="end" transfer-ownership="none">
            <doc xml:whitespace="preserve">iterator at end of a range</doc>
            <type name="TextIter" c:type="GtkTextIter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_toggled_tags"
              c:identifier="gtk_text_iter_get_toggled_tags">
        <doc xml:whitespace="preserve">Returns a list of #GtkTextTag that are toggled on or off at this
point.  (If @toggled_on is %TRUE, the list contains tags that are
toggled on.) If a tag is toggled on at @iter, then some non-empty
range of characters following @iter has that tag applied to it.  If
a tag is toggled off, then some non-empty range following @iter
does &lt;emphasis&gt;not&lt;/emphasis&gt; have the tag applied to it.</doc>
        <return-value transfer-ownership="container">
          <doc xml:whitespace="preserve">tags toggled at this point</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="TextTag"/>
          </type>
        </return-value>
        <parameters>
          <parameter name="toggled_on" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE to get toggled-on tags</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_visible_line_index"
              c:identifier="gtk_text_iter_get_visible_line_index">
        <doc xml:whitespace="preserve">Returns the number of bytes from the start of the
line to the given @iter, not counting bytes that
are invisible due to tags with the "invisible" flag
toggled on.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">byte index of @iter with respect to the start of the line</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="get_visible_line_offset"
              c:identifier="gtk_text_iter_get_visible_line_offset">
        <doc xml:whitespace="preserve">Returns the offset in characters from the start of the
line to the given @iter, not counting characters that
are invisible due to tags with the "invisible" flag
toggled on.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">offset in visible characters from the start of the line</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="get_visible_slice"
              c:identifier="gtk_text_iter_get_visible_slice">
        <doc xml:whitespace="preserve">Like gtk_text_iter_get_slice (), but invisible text is not included.
Invisible text is usually invisible because a #GtkTextTag with the
"invisible" attribute turned on has been applied to it.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">slice of text from the buffer</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="end" transfer-ownership="none">
            <doc xml:whitespace="preserve">iterator at end of range</doc>
            <type name="TextIter" c:type="GtkTextIter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_visible_text"
              c:identifier="gtk_text_iter_get_visible_text">
        <doc xml:whitespace="preserve">Like gtk_text_iter_get_text (), but invisible text is not included.
Invisible text is usually invisible because a #GtkTextTag with the
"invisible" attribute turned on has been applied to it.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">string containing visible text in the range</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="end" transfer-ownership="none">
            <doc xml:whitespace="preserve">iterator at end of range</doc>
            <type name="TextIter" c:type="GtkTextIter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="has_tag" c:identifier="gtk_text_iter_has_tag">
        <doc xml:whitespace="preserve">Returns %TRUE if @iter is within a range tagged with @tag.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">whether @iter is tagged with @tag</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="tag" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkTextTag</doc>
            <type name="TextTag" c:type="GtkTextTag*"/>
          </parameter>
        </parameters>
      </method>
      <method name="in_range" c:identifier="gtk_text_iter_in_range">
        <doc xml:whitespace="preserve">Checks whether @iter falls in the range [@start, @end).</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if @iter is in the range</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="start" transfer-ownership="none">
            <doc xml:whitespace="preserve">start of range</doc>
            <type name="TextIter" c:type="GtkTextIter*"/>
          </parameter>
          <parameter name="end" transfer-ownership="none">
            <doc xml:whitespace="preserve">end of range</doc>
            <type name="TextIter" c:type="GtkTextIter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="inside_sentence"
              c:identifier="gtk_text_iter_inside_sentence">
        <doc xml:whitespace="preserve">Determines whether @iter is inside a sentence (as opposed to in
between two sentences, e.g. after a period and before the first
letter of the next sentence).  Sentence boundaries are determined
by Pango and should be correct for nearly any language (if not, the
correct fix would be to the Pango text boundary algorithms).</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if @iter is inside a sentence.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="inside_word" c:identifier="gtk_text_iter_inside_word">
        <doc xml:whitespace="preserve">Determines whether @iter is inside a natural-language word (as
opposed to say inside some whitespace).  Word breaks are determined
by Pango and should be correct for nearly any language (if not, the
correct fix would be to the Pango word break algorithms).</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if @iter is inside a word</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="is_cursor_position"
              c:identifier="gtk_text_iter_is_cursor_position">
        <doc xml:whitespace="preserve">See gtk_text_iter_forward_cursor_position() or #PangoLogAttr or
pango_break() for details on what a cursor position is.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the cursor can be placed at @iter</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="is_end" c:identifier="gtk_text_iter_is_end">
        <doc xml:whitespace="preserve">Returns %TRUE if @iter is the end iterator, i.e. one past the last
dereferenceable iterator in the buffer. gtk_text_iter_is_end () is
the most efficient way to check whether an iterator is the end
iterator.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">whether @iter is the end iterator</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="is_start" c:identifier="gtk_text_iter_is_start">
        <doc xml:whitespace="preserve">Returns %TRUE if @iter is the first iterator in the buffer, that is
if @iter has a character offset of 0.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">whether @iter is the first in the buffer</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="order" c:identifier="gtk_text_iter_order">
        <doc xml:whitespace="preserve">Swaps the value of @first and @second if @second comes before
in sequence. Most text buffer functions that take a range call this
automatically on your behalf, so there's no real reason to call it yourself
in those cases. There are some exceptions, such as gtk_text_iter_in_range(),
that expect a pre-sorted range.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="second" transfer-ownership="none">
            <doc xml:whitespace="preserve">another #GtkTextIter</doc>
            <type name="TextIter" c:type="GtkTextIter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_line" c:identifier="gtk_text_iter_set_line">
        <doc xml:whitespace="preserve">Moves iterator @iter to the start of the line @line_number.  If
buffer, moves @iter to the start of the last line in the buffer.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="line_number" transfer-ownership="none">
            <doc xml:whitespace="preserve">line number (counted from 0)</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_line_index"
              c:identifier="gtk_text_iter_set_line_index">
        <doc xml:whitespace="preserve">Same as gtk_text_iter_set_line_offset(), but works with a
&lt;emphasis&gt;byte&lt;/emphasis&gt; index. The given byte index must be at
the start of a character, it can't be in the middle of a UTF-8
encoded character.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="byte_on_line" transfer-ownership="none">
            <doc xml:whitespace="preserve">a byte index relative to the start of @iter's current line</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_line_offset"
              c:identifier="gtk_text_iter_set_line_offset">
        <doc xml:whitespace="preserve">Moves @iter within a line, to a new &lt;emphasis&gt;character&lt;/emphasis&gt;
(not byte) offset. The given character offset must be less than or
equal to the number of characters in the line; if equal, @iter
moves to the start of the next line. See
gtk_text_iter_set_line_index() if you have a byte index rather than
a character offset.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="char_on_line" transfer-ownership="none">
            <doc xml:whitespace="preserve">a character offset relative to the start of @iter's current line</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_offset" c:identifier="gtk_text_iter_set_offset">
        <doc xml:whitespace="preserve">Sets @iter to point to @char_offset. @char_offset counts from the start
of the entire text buffer, starting with 0.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="char_offset" transfer-ownership="none">
            <doc xml:whitespace="preserve">a character number</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_visible_line_index"
              c:identifier="gtk_text_iter_set_visible_line_index">
        <doc xml:whitespace="preserve">Like gtk_text_iter_set_line_index(), but the index is in visible
bytes, i.e. text with a tag making it invisible is not counted
in the index.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="byte_on_line" transfer-ownership="none">
            <doc xml:whitespace="preserve">a byte index</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_visible_line_offset"
              c:identifier="gtk_text_iter_set_visible_line_offset">
        <doc xml:whitespace="preserve">Like gtk_text_iter_set_line_offset(), but the offset is in visible
characters, i.e. text with a tag making it invisible is not
counted in the offset.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="char_on_line" transfer-ownership="none">
            <doc xml:whitespace="preserve">a character offset</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="starts_line" c:identifier="gtk_text_iter_starts_line">
        <doc xml:whitespace="preserve">Returns %TRUE if @iter begins a paragraph,
i.e. if gtk_text_iter_get_line_offset () would return 0.
However this function is potentially more efficient than
gtk_text_iter_get_line_offset () because it doesn't have to compute
the offset, it just has to see whether it's 0.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">whether @iter begins a line</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="starts_sentence"
              c:identifier="gtk_text_iter_starts_sentence">
        <doc xml:whitespace="preserve">Determines whether @iter begins a sentence.  Sentence boundaries are
determined by Pango and should be correct for nearly any language
(if not, the correct fix would be to the Pango text boundary
algorithms).</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if @iter is at the start of a sentence.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="starts_word" c:identifier="gtk_text_iter_starts_word">
        <doc xml:whitespace="preserve">Determines whether @iter begins a natural-language word.  Word
breaks are determined by Pango and should be correct for nearly any
language (if not, the correct fix would be to the Pango word break
algorithms).</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if @iter is at the start of a word</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="toggles_tag" c:identifier="gtk_text_iter_toggles_tag">
        <doc xml:whitespace="preserve">This is equivalent to (gtk_text_iter_begins_tag () ||
gtk_text_iter_ends_tag ()), i.e. it tells you whether a range with</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">whether @tag is toggled on or off at @iter</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="tag" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">a #GtkTextTag, or %NULL</doc>
            <type name="TextTag" c:type="GtkTextTag*"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <class name="TextMark"
           c:symbol-prefix="text_mark"
           c:type="GtkTextMark"
           parent="GObject.Object"
           glib:type-name="GtkTextMark"
           glib:get-type="gtk_text_mark_get_type"
           glib:type-struct="TextMarkClass">
      <constructor name="new" c:identifier="gtk_text_mark_new" version="2.12">
        <doc xml:whitespace="preserve">Creates a text mark. Add it to a buffer using gtk_text_buffer_add_mark().
If @name is %NULL, the mark is anonymous; otherwise, the mark can be 
retrieved by name using gtk_text_buffer_get_mark(). If a mark has left 
gravity, and text is inserted at the mark's current location, the mark 
will be moved to the left of the newly-inserted text. If the mark has 
right gravity (@left_gravity = %FALSE), the mark will end up on the 
right of newly-inserted text. The standard left-to-right cursor is a 
mark with right gravity (when you type, the cursor stays on the right
side of the text you're typing).</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">new #GtkTextMark</doc>
          <type name="TextMark" c:type="GtkTextMark*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">mark name or %NULL</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="left_gravity" transfer-ownership="none">
            <doc xml:whitespace="preserve">whether the mark should have left gravity</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_buffer" c:identifier="gtk_text_mark_get_buffer">
        <doc xml:whitespace="preserve">Gets the buffer this mark is located inside,
or %NULL if the mark is deleted.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the mark's #GtkTextBuffer</doc>
          <type name="TextBuffer" c:type="GtkTextBuffer*"/>
        </return-value>
      </method>
      <method name="get_deleted" c:identifier="gtk_text_mark_get_deleted">
        <doc xml:whitespace="preserve">Returns %TRUE if the mark has been removed from its buffer
with gtk_text_buffer_delete_mark(). See gtk_text_buffer_add_mark()
for a way to add it to a buffer again.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">whether the mark is deleted</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_left_gravity"
              c:identifier="gtk_text_mark_get_left_gravity">
        <doc xml:whitespace="preserve">Determines whether the mark has left gravity.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the mark has left gravity, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_name" c:identifier="gtk_text_mark_get_name">
        <doc xml:whitespace="preserve">Returns the mark name; returns NULL for anonymous marks.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">mark name</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_visible" c:identifier="gtk_text_mark_get_visible">
        <doc xml:whitespace="preserve">Returns %TRUE if the mark is visible (i.e. a cursor is displayed
for it).</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if visible</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="set_visible" c:identifier="gtk_text_mark_set_visible">
        <doc xml:whitespace="preserve">Sets the visibility of @mark; the insertion point is normally
visible, i.e. you can see it as a vertical bar. Also, the text
widget uses a visible mark to indicate where a drop will occur when
dragging-and-dropping text. Most other marks are not visible.
Marks are not visible by default.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="setting" transfer-ownership="none">
            <doc xml:whitespace="preserve">visibility of mark</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="left-gravity"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="name"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="segment">
        <type name="gpointer" c:type="gpointer"/>
      </field>
    </class>
    <record name="TextMarkClass"
            c:type="GtkTextMarkClass"
            glib:is-gtype-struct-for="TextMark">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="_gtk_reserved1" introspectable="0">
        <callback name="_gtk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved2" introspectable="0">
        <callback name="_gtk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved3" introspectable="0">
        <callback name="_gtk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved4" introspectable="0">
        <callback name="_gtk_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <bitfield name="TextSearchFlags"
              glib:type-name="GtkTextSearchFlags"
              glib:get-type="gtk_text_search_flags_get_type"
              c:type="GtkTextSearchFlags">
      <member name="visible_only"
              value="1"
              c:identifier="GTK_TEXT_SEARCH_VISIBLE_ONLY"
              glib:nick="visible-only"/>
      <member name="text_only"
              value="2"
              c:identifier="GTK_TEXT_SEARCH_TEXT_ONLY"
              glib:nick="text-only"/>
    </bitfield>
    <class name="TextTag"
           c:symbol-prefix="text_tag"
           c:type="GtkTextTag"
           parent="GObject.Object"
           glib:type-name="GtkTextTag"
           glib:get-type="gtk_text_tag_get_type"
           glib:type-struct="TextTagClass">
      <constructor name="new" c:identifier="gtk_text_tag_new">
        <doc xml:whitespace="preserve">Creates a #GtkTextTag. Configure the tag using object arguments,
i.e. using g_object_set().</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new #GtkTextTag</doc>
          <type name="TextTag" c:type="GtkTextTag*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">tag name, or %NULL</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="event" c:identifier="gtk_text_tag_event">
        <doc xml:whitespace="preserve">Emits the "event" signal on the #GtkTextTag.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">result of signal emission (whether the event was handled)</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="event_object" transfer-ownership="none">
            <doc xml:whitespace="preserve">object that received the event, such as a widget</doc>
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
          <parameter name="event" transfer-ownership="none">
            <doc xml:whitespace="preserve">the event</doc>
            <type name="Gdk.Event" c:type="GdkEvent*"/>
          </parameter>
          <parameter name="iter" transfer-ownership="none">
            <doc xml:whitespace="preserve">location where the event was received</doc>
            <type name="TextIter" c:type="GtkTextIter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_priority" c:identifier="gtk_text_tag_get_priority">
        <doc xml:whitespace="preserve">Get the tag priority.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The tag's priority.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="set_priority" c:identifier="gtk_text_tag_set_priority">
        <doc xml:whitespace="preserve">Sets the priority of a #GtkTextTag. Valid priorities are
start at 0 and go to one less than gtk_text_tag_table_get_size().
Each tag in a table has a unique priority; setting the priority
of one tag shifts the priorities of all the other tags in the
table to maintain a unique priority for each tag. Higher priority
tags "win" if two tags both set the same text attribute. When adding
a tag to a tag table, it will be assigned the highest priority in
the table by default; so normally the precedence of a set of tags
is the order in which they were added to the table, or created with
gtk_text_buffer_create_tag(), which adds the tag to the buffer's table
automatically.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="priority" transfer-ownership="none">
            <doc xml:whitespace="preserve">the new priority</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <property name="accumulative-margin"
                version="2.12"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Whether the margins accumulate or override each other.
When set to %TRUE the margins of this tag are added to the margins 
of any other non-accumulative margins present. When set to %FALSE 
the margins override one another (the default).</doc>
        <type name="gboolean"/>
      </property>
      <property name="background"
                readable="0"
                writable="1"
                transfer-ownership="none">
        <type name="utf8"/>
      </property>
      <property name="background-full-height"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="background-full-height-set"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="background-gdk" writable="1" transfer-ownership="none">
        <type name="Gdk.Color"/>
      </property>
      <property name="background-set" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="direction" writable="1" transfer-ownership="none">
        <type name="TextDirection"/>
      </property>
      <property name="editable" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="editable-set" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="family" writable="1" transfer-ownership="none">
        <type name="utf8"/>
      </property>
      <property name="family-set" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="font" writable="1" transfer-ownership="none">
        <doc xml:whitespace="preserve">Font description as string, e.g. \"Sans Italic 12\". 
Note that the initial value of this property depends on
the internals of #PangoFontDescription.</doc>
        <type name="utf8"/>
      </property>
      <property name="font-desc" writable="1" transfer-ownership="none">
        <type name="Pango.FontDescription"/>
      </property>
      <property name="foreground"
                readable="0"
                writable="1"
                transfer-ownership="none">
        <type name="utf8"/>
      </property>
      <property name="foreground-gdk" writable="1" transfer-ownership="none">
        <type name="Gdk.Color"/>
      </property>
      <property name="foreground-set" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="indent" writable="1" transfer-ownership="none">
        <type name="gint"/>
      </property>
      <property name="indent-set" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="invisible"
                version="2.8"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Whether this text is hidden.
Note that there may still be problems with the support for invisible 
text, in particular when navigating programmatically inside a buffer
containing invisible segments.</doc>
        <type name="gboolean"/>
      </property>
      <property name="invisible-set" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="justification" writable="1" transfer-ownership="none">
        <type name="Justification"/>
      </property>
      <property name="justification-set"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="language" writable="1" transfer-ownership="none">
        <doc xml:whitespace="preserve">The language this text is in, as an ISO code. Pango can use this as a 
hint when rendering the text. If not set, an appropriate default will be 
used.
Note that the initial value of this property depends on the current
locale, see also gtk_get_default_language().</doc>
        <type name="utf8"/>
      </property>
      <property name="language-set" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="left-margin" writable="1" transfer-ownership="none">
        <type name="gint"/>
      </property>
      <property name="left-margin-set" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="name"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8"/>
      </property>
      <property name="paragraph-background"
                version="2.8"
                readable="0"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The paragraph background color as a string.</doc>
        <type name="utf8"/>
      </property>
      <property name="paragraph-background-gdk"
                version="2.8"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The paragraph background color as a as a (possibly unallocated) 
#GdkColor.</doc>
        <type name="Gdk.Color"/>
      </property>
      <property name="paragraph-background-set"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="pixels-above-lines"
                writable="1"
                transfer-ownership="none">
        <type name="gint"/>
      </property>
      <property name="pixels-above-lines-set"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="pixels-below-lines"
                writable="1"
                transfer-ownership="none">
        <type name="gint"/>
      </property>
      <property name="pixels-below-lines-set"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="pixels-inside-wrap"
                writable="1"
                transfer-ownership="none">
        <type name="gint"/>
      </property>
      <property name="pixels-inside-wrap-set"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="right-margin" writable="1" transfer-ownership="none">
        <type name="gint"/>
      </property>
      <property name="right-margin-set" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="rise" writable="1" transfer-ownership="none">
        <type name="gint"/>
      </property>
      <property name="rise-set" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="scale" writable="1" transfer-ownership="none">
        <type name="gdouble"/>
      </property>
      <property name="scale-set" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="size" writable="1" transfer-ownership="none">
        <type name="gint"/>
      </property>
      <property name="size-points" writable="1" transfer-ownership="none">
        <type name="gdouble"/>
      </property>
      <property name="size-set" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="stretch" writable="1" transfer-ownership="none">
        <type name="Pango.Stretch"/>
      </property>
      <property name="stretch-set" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="strikethrough" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="strikethrough-set"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="style" writable="1" transfer-ownership="none">
        <type name="Pango.Style"/>
      </property>
      <property name="style-set" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="tabs" writable="1" transfer-ownership="none">
        <type name="Pango.TabArray"/>
      </property>
      <property name="tabs-set" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="underline" writable="1" transfer-ownership="none">
        <type name="Pango.Underline"/>
      </property>
      <property name="underline-set" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="variant" writable="1" transfer-ownership="none">
        <type name="Pango.Variant"/>
      </property>
      <property name="variant-set" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="weight" writable="1" transfer-ownership="none">
        <type name="gint"/>
      </property>
      <property name="weight-set" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="wrap-mode" writable="1" transfer-ownership="none">
        <type name="WrapMode"/>
      </property>
      <property name="wrap-mode-set" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="table">
        <type name="TextTagTable" c:type="GtkTextTagTable*"/>
      </field>
      <field name="name">
        <type name="utf8" c:type="char*"/>
      </field>
      <field name="priority">
        <type name="gint" c:type="int"/>
      </field>
      <field name="values">
        <type name="TextAttributes" c:type="GtkTextAttributes*"/>
      </field>
      <field name="bg_color_set" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="fg_color_set" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="scale_set" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="justification_set" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="left_margin_set" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="indent_set" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="rise_set" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="strikethrough_set" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="right_margin_set" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="pixels_above_lines_set" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="pixels_below_lines_set" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="pixels_inside_wrap_set" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="tabs_set" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="underline_set" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="wrap_mode_set" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="bg_full_height_set" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="invisible_set" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="editable_set" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="language_set" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="pg_bg_color_set" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="accumulative_margin" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="pad1" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <glib:signal name="event">
        <doc xml:whitespace="preserve">The ::event signal is emitted when an event occurs on a region of the
buffer marked with this tag.
event. %FALSE to propagate the event further.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE to stop other handlers from being invoked for the</doc>
          <type name="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the object the event was fired from (typically a #GtkTextView)</doc>
            <type name="GObject.Object"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <doc xml:whitespace="preserve">the event which triggered the signal</doc>
            <type name="Gdk.Event"/>
          </parameter>
          <parameter name="p1" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkTextIter pointing at the location the event occured</doc>
            <type name="TextIter"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="TextTagClass"
            c:type="GtkTextTagClass"
            glib:is-gtype-struct-for="TextTag">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="event">
        <callback name="event">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="tag" transfer-ownership="none">
              <type name="TextTag" c:type="GtkTextTag*"/>
            </parameter>
            <parameter name="event_object" transfer-ownership="none">
              <type name="GObject.Object" c:type="GObject*"/>
            </parameter>
            <parameter name="event" transfer-ownership="none">
              <type name="Gdk.Event" c:type="GdkEvent*"/>
            </parameter>
            <parameter name="iter" transfer-ownership="none">
              <type name="TextIter" c:type="GtkTextIter*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_gtk_reserved1" introspectable="0">
        <callback name="_gtk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved2" introspectable="0">
        <callback name="_gtk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved3" introspectable="0">
        <callback name="_gtk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved4" introspectable="0">
        <callback name="_gtk_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <class name="TextTagTable"
           c:symbol-prefix="text_tag_table"
           c:type="GtkTextTagTable"
           parent="GObject.Object"
           glib:type-name="GtkTextTagTable"
           glib:get-type="gtk_text_tag_table_get_type"
           glib:type-struct="TextTagTableClass">
      <constructor name="new" c:identifier="gtk_text_tag_table_new">
        <doc xml:whitespace="preserve">Creates a new #GtkTextTagTable. The table contains no tags by
default.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new #GtkTextTagTable</doc>
          <type name="TextTagTable" c:type="GtkTextTagTable*"/>
        </return-value>
      </constructor>
      <method name="add" c:identifier="gtk_text_tag_table_add">
        <doc xml:whitespace="preserve">Add a tag to the table. The tag is assigned the highest priority
in the table.
the same name as an already-added tag.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="tag" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkTextTag</doc>
            <type name="TextTag" c:type="GtkTextTag*"/>
          </parameter>
        </parameters>
      </method>
      <method name="foreach" c:identifier="gtk_text_tag_table_foreach">
        <doc xml:whitespace="preserve">Calls @func on each tag in @table, with user data @data.
Note that the table may not be modified while iterating 
over it (you can't add/remove tags).</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="func"
                     transfer-ownership="none"
                     scope="call"
                     closure="1">
            <doc xml:whitespace="preserve">a function to call on each tag</doc>
            <type name="TextTagTableForeach" c:type="GtkTextTagTableForeach"/>
          </parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:whitespace="preserve">user data</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_size" c:identifier="gtk_text_tag_table_get_size">
        <doc xml:whitespace="preserve">Returns the size of the table (number of tags)</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">number of tags in @table</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="lookup" c:identifier="gtk_text_tag_table_lookup">
        <doc xml:whitespace="preserve">Look up a named tag.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The tag, or %NULL if none by that name is in the table.</doc>
          <type name="TextTag" c:type="GtkTextTag*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:whitespace="preserve">name of a tag</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove" c:identifier="gtk_text_tag_table_remove">
        <doc xml:whitespace="preserve">Remove a tag from the table. This will remove the table's
reference to the tag, so be careful - the tag will end
up destroyed if you don't have a reference to it.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="tag" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkTextTag</doc>
            <type name="TextTag" c:type="GtkTextTag*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="TextTagTablePrivate" c:type="GtkTextTagTablePrivate*"/>
      </field>
      <glib:signal name="tag-added">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the added tag.</doc>
            <type name="TextTag"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="tag-changed">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the changed tag.</doc>
            <type name="TextTag"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <doc xml:whitespace="preserve">whether the size has been changed.</doc>
            <type name="gboolean"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="tag-removed">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the removed tag.</doc>
            <type name="TextTag"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="TextTagTableClass"
            c:type="GtkTextTagTableClass"
            glib:is-gtype-struct-for="TextTagTable">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="tag_changed">
        <callback name="tag_changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="table" transfer-ownership="none">
              <type name="TextTagTable" c:type="GtkTextTagTable*"/>
            </parameter>
            <parameter name="tag" transfer-ownership="none">
              <type name="TextTag" c:type="GtkTextTag*"/>
            </parameter>
            <parameter name="size_changed" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="tag_added">
        <callback name="tag_added">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="table" transfer-ownership="none">
              <type name="TextTagTable" c:type="GtkTextTagTable*"/>
            </parameter>
            <parameter name="tag" transfer-ownership="none">
              <type name="TextTag" c:type="GtkTextTag*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="tag_removed">
        <callback name="tag_removed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="table" transfer-ownership="none">
              <type name="TextTagTable" c:type="GtkTextTagTable*"/>
            </parameter>
            <parameter name="tag" transfer-ownership="none">
              <type name="TextTag" c:type="GtkTextTag*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_gtk_reserved1" introspectable="0">
        <callback name="_gtk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved2" introspectable="0">
        <callback name="_gtk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved3" introspectable="0">
        <callback name="_gtk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved4" introspectable="0">
        <callback name="_gtk_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <callback name="TextTagTableForeach" c:type="GtkTextTagTableForeach">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="tag" transfer-ownership="none">
          <type name="TextTag" c:type="GtkTextTag*"/>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <record name="TextTagTablePrivate"
            c:type="GtkTextTagTablePrivate"
            disguised="1">
    </record>
    <class name="TextView"
           c:symbol-prefix="text_view"
           c:type="GtkTextView"
           parent="Container"
           glib:type-name="GtkTextView"
           glib:get-type="gtk_text_view_get_type"
           glib:type-struct="TextViewClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Buildable"/>
      <implements name="SizeRequest"/>
      <constructor name="new" c:identifier="gtk_text_view_new">
        <doc xml:whitespace="preserve">Creates a new #GtkTextView. If you don't call gtk_text_view_set_buffer()
before using the text view, an empty default buffer will be created
for you. Get the buffer with gtk_text_view_get_buffer(). If you want
to specify your own buffer, consider gtk_text_view_new_with_buffer().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a new #GtkTextView</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <constructor name="new_with_buffer"
                   c:identifier="gtk_text_view_new_with_buffer">
        <doc xml:whitespace="preserve">Creates a new #GtkTextView widget displaying the buffer
this function is equivalent to gtk_text_view_new(). The
text view adds its own reference count to the buffer; it does not
take over an existing reference.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a new #GtkTextView.</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="buffer" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkTextBuffer</doc>
            <type name="TextBuffer" c:type="GtkTextBuffer*"/>
          </parameter>
        </parameters>
      </constructor>
      <virtual-method name="move_focus">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="direction" transfer-ownership="none">
            <type name="DirectionType" c:type="GtkDirectionType"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="add_child_at_anchor"
              c:identifier="gtk_text_view_add_child_at_anchor">
        <doc xml:whitespace="preserve">Adds a child widget in the text buffer, at the given @anchor.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="child" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkWidget</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="anchor" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkTextChildAnchor in the #GtkTextBuffer for @text_view</doc>
            <type name="TextChildAnchor" c:type="GtkTextChildAnchor*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_child_in_window"
              c:identifier="gtk_text_view_add_child_in_window">
        <doc xml:whitespace="preserve">Adds a child at fixed coordinates in one of the text widget's
windows. The window must have nonzero size (see
gtk_text_view_set_border_window_size()). Note that the child
coordinates are given relative to the #GdkWindow in question, and
that these coordinates have no sane relationship to scrolling. When
placing a child in #GTK_TEXT_WINDOW_WIDGET, scrolling is
irrelevant, the child floats above all scrollable areas. But when
placing a child in one of the scrollable windows (border windows or
text window), you'll need to compute the child's correct position
in buffer coordinates any time scrolling occurs or buffer changes
occur, and then call gtk_text_view_move_child() to update the
child's position. Unfortunately there's no good way to detect that
scrolling has occurred, using the current API; a possible hack
would be to update all child positions when the scroll adjustments
change or the text buffer changes. See bug 64518 on
bugzilla.gnome.org for status of fixing this issue.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="child" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkWidget</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="which_window" transfer-ownership="none">
            <doc xml:whitespace="preserve">which window the child should appear in</doc>
            <type name="TextWindowType" c:type="GtkTextWindowType"/>
          </parameter>
          <parameter name="xpos" transfer-ownership="none">
            <doc xml:whitespace="preserve">X position of child in window coordinates</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="ypos" transfer-ownership="none">
            <doc xml:whitespace="preserve">Y position of child in window coordinates</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="backward_display_line"
              c:identifier="gtk_text_view_backward_display_line">
        <doc xml:whitespace="preserve">Moves the given @iter backward by one display (wrapped) line.
A display line is different from a paragraph. Paragraphs are
separated by newlines or other paragraph separator characters.
Display lines are created by line-wrapping a paragraph. If
wrapping is turned off, display lines and paragraphs will be the
same. Display lines are divided differently for each view, since
they depend on the view's width; paragraphs are the same in all
views, since they depend on the contents of the #GtkTextBuffer.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if @iter was moved and is not on the end iterator</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="iter" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkTextIter</doc>
            <type name="TextIter" c:type="GtkTextIter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="backward_display_line_start"
              c:identifier="gtk_text_view_backward_display_line_start">
        <doc xml:whitespace="preserve">Moves the given @iter backward to the next display line start.
A display line is different from a paragraph. Paragraphs are
separated by newlines or other paragraph separator characters.
Display lines are created by line-wrapping a paragraph. If
wrapping is turned off, display lines and paragraphs will be the
same. Display lines are divided differently for each view, since
they depend on the view's width; paragraphs are the same in all
views, since they depend on the contents of the #GtkTextBuffer.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if @iter was moved and is not on the end iterator</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="iter" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkTextIter</doc>
            <type name="TextIter" c:type="GtkTextIter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="buffer_to_window_coords"
              c:identifier="gtk_text_view_buffer_to_window_coords">
        <doc xml:whitespace="preserve">Converts coordinate (@buffer_x, @buffer_y) to coordinates for the window
Note that you can't convert coordinates for a nonexisting window (see 
gtk_text_view_set_border_window_size()).</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="win" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkTextWindowType except #GTK_TEXT_WINDOW_PRIVATE</doc>
            <type name="TextWindowType" c:type="GtkTextWindowType"/>
          </parameter>
          <parameter name="buffer_x" transfer-ownership="none">
            <doc xml:whitespace="preserve">buffer x coordinate</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="buffer_y" transfer-ownership="none">
            <doc xml:whitespace="preserve">buffer y coordinate</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="window_x"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     allow-none="1">
            <doc xml:whitespace="preserve">window x coordinate return location or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="window_y"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     allow-none="1">
            <doc xml:whitespace="preserve">window y coordinate return location or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="forward_display_line"
              c:identifier="gtk_text_view_forward_display_line">
        <doc xml:whitespace="preserve">Moves the given @iter forward by one display (wrapped) line.
A display line is different from a paragraph. Paragraphs are
separated by newlines or other paragraph separator characters.
Display lines are created by line-wrapping a paragraph. If
wrapping is turned off, display lines and paragraphs will be the
same. Display lines are divided differently for each view, since
they depend on the view's width; paragraphs are the same in all
views, since they depend on the contents of the #GtkTextBuffer.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if @iter was moved and is not on the end iterator</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="iter" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkTextIter</doc>
            <type name="TextIter" c:type="GtkTextIter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="forward_display_line_end"
              c:identifier="gtk_text_view_forward_display_line_end">
        <doc xml:whitespace="preserve">Moves the given @iter forward to the next display line end.
A display line is different from a paragraph. Paragraphs are
separated by newlines or other paragraph separator characters.
Display lines are created by line-wrapping a paragraph. If
wrapping is turned off, display lines and paragraphs will be the
same. Display lines are divided differently for each view, since
they depend on the view's width; paragraphs are the same in all
views, since they depend on the contents of the #GtkTextBuffer.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if @iter was moved and is not on the end iterator</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="iter" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkTextIter</doc>
            <type name="TextIter" c:type="GtkTextIter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_accepts_tab"
              c:identifier="gtk_text_view_get_accepts_tab"
              version="2.4">
        <doc xml:whitespace="preserve">Returns whether pressing the Tab key inserts a tab characters.
gtk_text_view_set_accepts_tab().
%FALSE if pressing the Tab key moves the keyboard focus.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if pressing the Tab key inserts a tab character,</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_border_window_size"
              c:identifier="gtk_text_view_get_border_window_size">
        <doc xml:whitespace="preserve">Gets the width of the specified border window. See
gtk_text_view_set_border_window_size().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">width of window</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <parameter name="type" transfer-ownership="none">
            <doc xml:whitespace="preserve">window to return size from</doc>
            <type name="TextWindowType" c:type="GtkTextWindowType"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_buffer" c:identifier="gtk_text_view_get_buffer">
        <doc xml:whitespace="preserve">Returns the #GtkTextBuffer being displayed by this text view.
The reference count on the buffer is not incremented; the caller
of this function won't own a new reference.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GtkTextBuffer</doc>
          <type name="TextBuffer" c:type="GtkTextBuffer*"/>
        </return-value>
      </method>
      <method name="get_cursor_visible"
              c:identifier="gtk_text_view_get_cursor_visible">
        <doc xml:whitespace="preserve">Find out whether the cursor is being displayed.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">whether the insertion mark is visible</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_default_attributes"
              c:identifier="gtk_text_view_get_default_attributes">
        <doc xml:whitespace="preserve">Obtains a copy of the default text attributes. These are the
attributes used for text unless a tag overrides them.
You'd typically pass the default attributes in to
gtk_text_iter_get_attributes() in order to get the
attributes in effect at a given text position.
The return value is a copy owned by the caller of this function,
and should be freed.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new #GtkTextAttributes</doc>
          <type name="TextAttributes" c:type="GtkTextAttributes*"/>
        </return-value>
      </method>
      <method name="get_editable" c:identifier="gtk_text_view_get_editable">
        <doc xml:whitespace="preserve">Returns the default editability of the #GtkTextView. Tags in the
buffer may override this setting for some ranges of text.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">whether text is editable by default</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_hadjustment"
              c:identifier="gtk_text_view_get_hadjustment"
              version="2.22">
        <doc xml:whitespace="preserve">Gets the horizontal-scrolling #GtkAdjustment.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">pointer to the horizontal #GtkAdjustment</doc>
          <type name="Adjustment" c:type="GtkAdjustment*"/>
        </return-value>
      </method>
      <method name="get_indent" c:identifier="gtk_text_view_get_indent">
        <doc xml:whitespace="preserve">Gets the default indentation of paragraphs in @text_view.
Tags in the view's buffer may override the default.
The indentation may be negative.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">number of pixels of indentation</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="get_iter_at_location"
              c:identifier="gtk_text_view_get_iter_at_location">
        <doc xml:whitespace="preserve">Retrieves the iterator at buffer coordinates @x and @y. Buffer
coordinates are coordinates for the entire buffer, not just the
currently-displayed portion.  If you have coordinates from an
event, you have to convert those to buffer coordinates with
gtk_text_view_window_to_buffer_coords().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="iter"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkTextIter</doc>
            <type name="TextIter" c:type="GtkTextIter*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:whitespace="preserve">x position, in buffer coordinates</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:whitespace="preserve">y position, in buffer coordinates</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_iter_at_position"
              c:identifier="gtk_text_view_get_iter_at_position"
              version="2.6">
        <doc xml:whitespace="preserve">Retrieves the iterator pointing to the character at buffer 
coordinates @x and @y. Buffer coordinates are coordinates for 
the entire buffer, not just the currently-displayed portion.  
If you have coordinates from an event, you have to convert 
those to buffer coordinates with 
gtk_text_view_window_to_buffer_coords().
Note that this is different from gtk_text_view_get_iter_at_location(),
which returns cursor locations, i.e. positions &lt;emphasis&gt;between&lt;/emphasis&gt;
characters.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="iter"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkTextIter</doc>
            <type name="TextIter" c:type="GtkTextIter*"/>
          </parameter>
          <parameter name="trailing"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     allow-none="1">
            <doc xml:whitespace="preserve">if non-%NULL, location to store an integer indicating where in the grapheme the user clicked. It will either be zero, or the number of characters in the grapheme. 0 represents the trailing edge of the grapheme.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:whitespace="preserve">x position, in buffer coordinates</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:whitespace="preserve">y position, in buffer coordinates</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_iter_location"
              c:identifier="gtk_text_view_get_iter_location">
        <doc xml:whitespace="preserve">Gets a rectangle which roughly contains the character at @iter.
The rectangle position is in buffer coordinates; use
gtk_text_view_buffer_to_window_coords() to convert these
coordinates to coordinates for one of the windows in the text view.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="iter" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkTextIter</doc>
            <type name="TextIter" c:type="GtkTextIter*"/>
          </parameter>
          <parameter name="location"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:whitespace="preserve">bounds of the character at @iter</doc>
            <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_justification"
              c:identifier="gtk_text_view_get_justification">
        <doc xml:whitespace="preserve">Gets the default justification of paragraphs in @text_view.
Tags in the buffer may override the default.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">default justification</doc>
          <type name="Justification" c:type="GtkJustification"/>
        </return-value>
      </method>
      <method name="get_left_margin"
              c:identifier="gtk_text_view_get_left_margin">
        <doc xml:whitespace="preserve">Gets the default left margin size of paragraphs in the @text_view.
Tags in the buffer may override the default.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">left margin in pixels</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="get_line_at_y" c:identifier="gtk_text_view_get_line_at_y">
        <doc xml:whitespace="preserve">Gets the #GtkTextIter at the start of the line containing
the coordinate @y. @y is in buffer coordinates, convert from
window coordinates with gtk_text_view_window_to_buffer_coords().
If non-%NULL, @line_top will be filled with the coordinate of the top
edge of the line.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="target_iter"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkTextIter</doc>
            <type name="TextIter" c:type="GtkTextIter*"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:whitespace="preserve">a y coordinate</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="line_top"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:whitespace="preserve">return location for top coordinate of the line</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_line_yrange"
              c:identifier="gtk_text_view_get_line_yrange">
        <doc xml:whitespace="preserve">Gets the y coordinate of the top of the line containing @iter,
and the height of the line. The coordinate is a buffer coordinate;
convert to window coordinates with gtk_text_view_buffer_to_window_coords().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="iter" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkTextIter</doc>
            <type name="TextIter" c:type="GtkTextIter*"/>
          </parameter>
          <parameter name="y"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:whitespace="preserve">return location for a y coordinate</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="height"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:whitespace="preserve">return location for a height</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_overwrite"
              c:identifier="gtk_text_view_get_overwrite"
              version="2.4">
        <doc xml:whitespace="preserve">Returns whether the #GtkTextView is in overwrite mode or not.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">whether @text_view is in overwrite mode or not.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_pixels_above_lines"
              c:identifier="gtk_text_view_get_pixels_above_lines">
        <doc xml:whitespace="preserve">Gets the default number of pixels to put above paragraphs.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">default number of pixels above paragraphs</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="get_pixels_below_lines"
              c:identifier="gtk_text_view_get_pixels_below_lines">
        <doc xml:whitespace="preserve">Gets the value set by gtk_text_view_set_pixels_below_lines().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">default number of blank pixels below paragraphs</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="get_pixels_inside_wrap"
              c:identifier="gtk_text_view_get_pixels_inside_wrap">
        <doc xml:whitespace="preserve">Gets the value set by gtk_text_view_set_pixels_inside_wrap().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">default number of pixels of blank space between wrapped lines</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="get_right_margin"
              c:identifier="gtk_text_view_get_right_margin">
        <doc xml:whitespace="preserve">Gets the default right margin for text in @text_view. Tags
in the buffer may override the default.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">right margin in pixels</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="get_tabs" c:identifier="gtk_text_view_get_tabs">
        <doc xml:whitespace="preserve">Gets the default tabs for @text_view. Tags in the buffer may
override the defaults. The returned array will be %NULL if
"standard" (8-space) tabs are used. Free the return value
with pango_tab_array_free().
tabs are used; must be freed with pango_tab_array_free().</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">copy of default tab array, or %NULL if "standard"</doc>
          <type name="Pango.TabArray" c:type="PangoTabArray*"/>
        </return-value>
      </method>
      <method name="get_vadjustment"
              c:identifier="gtk_text_view_get_vadjustment"
              version="2.22">
        <doc xml:whitespace="preserve">Gets the vertical-scrolling #GtkAdjustment.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">pointer to the vertical #GtkAdjustment</doc>
          <type name="Adjustment" c:type="GtkAdjustment*"/>
        </return-value>
      </method>
      <method name="get_visible_rect"
              c:identifier="gtk_text_view_get_visible_rect">
        <doc xml:whitespace="preserve">Fills @visible_rect with the currently-visible
region of the buffer, in buffer coordinates. Convert to window coordinates
with gtk_text_view_buffer_to_window_coords().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="visible_rect" transfer-ownership="none">
            <doc xml:whitespace="preserve">rectangle to fill</doc>
            <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_window" c:identifier="gtk_text_view_get_window">
        <doc xml:whitespace="preserve">Retrieves the #GdkWindow corresponding to an area of the text view;
possible windows include the overall widget window, child windows
on the left, right, top, bottom, and the window that displays the
text buffer. Windows are %NULL and nonexistent if their width or
height is 0, and are nonexistent before the widget has been
realized.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GdkWindow, or %NULL</doc>
          <type name="Gdk.Window" c:type="GdkWindow*"/>
        </return-value>
        <parameters>
          <parameter name="win" transfer-ownership="none">
            <doc xml:whitespace="preserve">window to get</doc>
            <type name="TextWindowType" c:type="GtkTextWindowType"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_window_type"
              c:identifier="gtk_text_view_get_window_type">
        <doc xml:whitespace="preserve">Usually used to find out which window an event corresponds to.
If you connect to an event signal on @text_view, this function
should be called on &lt;literal&gt;event-&amp;gt;window&lt;/literal&gt; to
see which window it was.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the window type.</doc>
          <type name="TextWindowType" c:type="GtkTextWindowType"/>
        </return-value>
        <parameters>
          <parameter name="window" transfer-ownership="none">
            <doc xml:whitespace="preserve">a window type</doc>
            <type name="Gdk.Window" c:type="GdkWindow*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_wrap_mode" c:identifier="gtk_text_view_get_wrap_mode">
        <doc xml:whitespace="preserve">Gets the line wrapping for the view.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the line wrap setting</doc>
          <type name="WrapMode" c:type="GtkWrapMode"/>
        </return-value>
      </method>
      <method name="im_context_filter_keypress"
              c:identifier="gtk_text_view_im_context_filter_keypress"
              version="2.22">
        <doc xml:whitespace="preserve">Allow the #GtkTextView input method to internally handle key press
and release events. If this function returns %TRUE, then no further
processing should be done for this key event. See
gtk_im_context_filter_keypress().
Note that you are expected to call this function from your handler
when overriding key event handling. This is needed in the case when
you need to insert your own key handling between the input method
and the default key event handling of the #GtkTextView.
|[
static gboolean
gtk_foo_bar_key_press_event (GtkWidget   *widget,
GdkEventKey *event)
{
if ((key-&gt;keyval == GDK_Return || key-&gt;keyval == GDK_KP_Enter))
{
if (gtk_text_view_im_context_filter_keypress (GTK_TEXT_VIEW (view), event))
return TRUE;
}
/&amp;ast; Do some stuff &amp;ast;/
return GTK_WIDGET_CLASS (gtk_foo_bar_parent_class)-&gt;key_press_event (widget, event);
}
]|</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the input method handled the key event.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="event" transfer-ownership="none">
            <doc xml:whitespace="preserve">the key event</doc>
            <type name="Gdk.EventKey" c:type="GdkEventKey*"/>
          </parameter>
        </parameters>
      </method>
      <method name="move_child" c:identifier="gtk_text_view_move_child">
        <doc xml:whitespace="preserve">Updates the position of a child, as for gtk_text_view_add_child_in_window().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="child" transfer-ownership="none">
            <doc xml:whitespace="preserve">child widget already added to the text view</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="xpos" transfer-ownership="none">
            <doc xml:whitespace="preserve">new X position in window coordinates</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="ypos" transfer-ownership="none">
            <doc xml:whitespace="preserve">new Y position in window coordinates</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="move_mark_onscreen"
              c:identifier="gtk_text_view_move_mark_onscreen">
        <doc xml:whitespace="preserve">Moves a mark within the buffer so that it's
located within the currently-visible text area.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the mark moved (wasn't already onscreen)</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="mark" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkTextMark</doc>
            <type name="TextMark" c:type="GtkTextMark*"/>
          </parameter>
        </parameters>
      </method>
      <method name="move_visually" c:identifier="gtk_text_view_move_visually">
        <doc xml:whitespace="preserve">Move the iterator a given number of characters visually, treating
it as the strong cursor position. If @count is positive, then the
new strong cursor position will be @count positions to the right of
the old cursor position. If @count is negative then the new strong
cursor position will be @count positions to the left of the old
cursor position.
In the presence of bi-directional text, the correspondence
between logical and visual order will depend on the direction
of the current run, and there may be jumps when the cursor
is moved off of the end of a run.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if @iter moved and is not on the end iterator</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="iter" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkTextIter</doc>
            <type name="TextIter" c:type="GtkTextIter*"/>
          </parameter>
          <parameter name="count" transfer-ownership="none">
            <doc xml:whitespace="preserve">number of characters to move (negative moves left, positive moves right)</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="place_cursor_onscreen"
              c:identifier="gtk_text_view_place_cursor_onscreen">
        <doc xml:whitespace="preserve">Moves the cursor to the currently visible region of the
buffer, it it isn't there already.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the cursor had to be moved.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="reset_im_context"
              c:identifier="gtk_text_view_reset_im_context"
              version="2.22">
        <doc xml:whitespace="preserve">Reset the input method context of the text view if needed.
This can be necessary in the case where modifying the buffer
would confuse on-going input method behavior.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="scroll_mark_onscreen"
              c:identifier="gtk_text_view_scroll_mark_onscreen">
        <doc xml:whitespace="preserve">Scrolls @text_view the minimum distance such that @mark is contained
within the visible area of the widget.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="mark" transfer-ownership="none">
            <doc xml:whitespace="preserve">a mark in the buffer for @text_view</doc>
            <type name="TextMark" c:type="GtkTextMark*"/>
          </parameter>
        </parameters>
      </method>
      <method name="scroll_to_iter"
              c:identifier="gtk_text_view_scroll_to_iter">
        <doc xml:whitespace="preserve">Scrolls @text_view so that @iter is on the screen in the position
indicated by @xalign and @yalign. An alignment of 0.0 indicates
left or top, 1.0 indicates right or bottom, 0.5 means center. 
If @use_align is %FALSE, the text scrolls the minimal distance to 
get the mark onscreen, possibly not scrolling at all. The effective 
screen for purposes of this function is reduced by a margin of size 
Note that this function uses the currently-computed height of the
lines in the text buffer. Line heights are computed in an idle 
handler; so this function may not have the desired effect if it's 
called before the height computations. To avoid oddness, consider 
using gtk_text_view_scroll_to_mark() which saves a point to be 
scrolled to after line validation.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if scrolling occurred</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="iter" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkTextIter</doc>
            <type name="TextIter" c:type="GtkTextIter*"/>
          </parameter>
          <parameter name="within_margin" transfer-ownership="none">
            <doc xml:whitespace="preserve">margin as a [0.0,0.5) fraction of screen size</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="use_align" transfer-ownership="none">
            <doc xml:whitespace="preserve">whether to use alignment arguments (if %FALSE, just get the mark onscreen)</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="xalign" transfer-ownership="none">
            <doc xml:whitespace="preserve">horizontal alignment of mark within visible area</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="yalign" transfer-ownership="none">
            <doc xml:whitespace="preserve">vertical alignment of mark within visible area</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="scroll_to_mark"
              c:identifier="gtk_text_view_scroll_to_mark">
        <doc xml:whitespace="preserve">Scrolls @text_view so that @mark is on the screen in the position
indicated by @xalign and @yalign. An alignment of 0.0 indicates
left or top, 1.0 indicates right or bottom, 0.5 means center. 
If @use_align is %FALSE, the text scrolls the minimal distance to 
get the mark onscreen, possibly not scrolling at all. The effective 
screen for purposes of this function is reduced by a margin of size</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="mark" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkTextMark</doc>
            <type name="TextMark" c:type="GtkTextMark*"/>
          </parameter>
          <parameter name="within_margin" transfer-ownership="none">
            <doc xml:whitespace="preserve">margin as a [0.0,0.5) fraction of screen size</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="use_align" transfer-ownership="none">
            <doc xml:whitespace="preserve">whether to use alignment arguments (if %FALSE, just get the mark onscreen)</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="xalign" transfer-ownership="none">
            <doc xml:whitespace="preserve">horizontal alignment of mark within visible area</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="yalign" transfer-ownership="none">
            <doc xml:whitespace="preserve">vertical alignment of mark within visible area</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_accepts_tab"
              c:identifier="gtk_text_view_set_accepts_tab"
              version="2.4">
        <doc xml:whitespace="preserve">Sets the behavior of the text widget when the Tab key is pressed. 
If @accepts_tab is %TRUE, a tab character is inserted. If @accepts_tab 
is %FALSE the keyboard focus is moved to the next widget in the focus 
chain.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="accepts_tab" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE if pressing the Tab key should insert a tab character, %FALSE, if pressing the Tab key should move the keyboard focus.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_border_window_size"
              c:identifier="gtk_text_view_set_border_window_size">
        <doc xml:whitespace="preserve">Sets the width of %GTK_TEXT_WINDOW_LEFT or %GTK_TEXT_WINDOW_RIGHT,
or the height of %GTK_TEXT_WINDOW_TOP or %GTK_TEXT_WINDOW_BOTTOM.
Automatically destroys the corresponding window if the size is set
to 0, and creates the window if the size is set to non-zero.  This
function can only be used for the "border windows," it doesn't work
with #GTK_TEXT_WINDOW_WIDGET, #GTK_TEXT_WINDOW_TEXT, or
#GTK_TEXT_WINDOW_PRIVATE.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="type" transfer-ownership="none">
            <doc xml:whitespace="preserve">window to affect</doc>
            <type name="TextWindowType" c:type="GtkTextWindowType"/>
          </parameter>
          <parameter name="size" transfer-ownership="none">
            <doc xml:whitespace="preserve">width or height of the window</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_buffer" c:identifier="gtk_text_view_set_buffer">
        <doc xml:whitespace="preserve">Sets @buffer as the buffer being displayed by @text_view. The previous
buffer displayed by the text view is unreferenced, and a reference is
added to @buffer. If you owned a reference to @buffer before passing it
to this function, you must remove that reference yourself; #GtkTextView
will not "adopt" it.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="buffer" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">a #GtkTextBuffer</doc>
            <type name="TextBuffer" c:type="GtkTextBuffer*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_cursor_visible"
              c:identifier="gtk_text_view_set_cursor_visible">
        <doc xml:whitespace="preserve">Toggles whether the insertion point is displayed. A buffer with no editable
text probably shouldn't have a visible cursor, so you may want to turn
the cursor off.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="setting" transfer-ownership="none">
            <doc xml:whitespace="preserve">whether to show the insertion cursor</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_editable" c:identifier="gtk_text_view_set_editable">
        <doc xml:whitespace="preserve">Sets the default editability of the #GtkTextView. You can override
this default setting with tags in the buffer, using the "editable"
attribute of tags.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="setting" transfer-ownership="none">
            <doc xml:whitespace="preserve">whether it's editable</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_indent" c:identifier="gtk_text_view_set_indent">
        <doc xml:whitespace="preserve">Sets the default indentation for paragraphs in @text_view.
Tags in the buffer may override the default.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="indent" transfer-ownership="none">
            <doc xml:whitespace="preserve">indentation in pixels</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_justification"
              c:identifier="gtk_text_view_set_justification">
        <doc xml:whitespace="preserve">Sets the default justification of text in @text_view.
Tags in the view's buffer may override the default.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="justification" transfer-ownership="none">
            <doc xml:whitespace="preserve">justification</doc>
            <type name="Justification" c:type="GtkJustification"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_left_margin"
              c:identifier="gtk_text_view_set_left_margin">
        <doc xml:whitespace="preserve">Sets the default left margin for text in @text_view.
Tags in the buffer may override the default.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="left_margin" transfer-ownership="none">
            <doc xml:whitespace="preserve">left margin in pixels</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_overwrite"
              c:identifier="gtk_text_view_set_overwrite"
              version="2.4">
        <doc xml:whitespace="preserve">Changes the #GtkTextView overwrite mode.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="overwrite" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE to turn on overwrite mode, %FALSE to turn it off</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_pixels_above_lines"
              c:identifier="gtk_text_view_set_pixels_above_lines">
        <doc xml:whitespace="preserve">Sets the default number of blank pixels above paragraphs in @text_view.
Tags in the buffer for @text_view may override the defaults.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="pixels_above_lines" transfer-ownership="none">
            <doc xml:whitespace="preserve">pixels above paragraphs</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_pixels_below_lines"
              c:identifier="gtk_text_view_set_pixels_below_lines">
        <doc xml:whitespace="preserve">Sets the default number of pixels of blank space
to put below paragraphs in @text_view. May be overridden
by tags applied to @text_view's buffer.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="pixels_below_lines" transfer-ownership="none">
            <doc xml:whitespace="preserve">pixels below paragraphs</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_pixels_inside_wrap"
              c:identifier="gtk_text_view_set_pixels_inside_wrap">
        <doc xml:whitespace="preserve">Sets the default number of pixels of blank space to leave between
display/wrapped lines within a paragraph. May be overridden by
tags in @text_view's buffer.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="pixels_inside_wrap" transfer-ownership="none">
            <doc xml:whitespace="preserve">default number of pixels between wrapped lines</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_right_margin"
              c:identifier="gtk_text_view_set_right_margin">
        <doc xml:whitespace="preserve">Sets the default right margin for text in the text view.
Tags in the buffer may override the default.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="right_margin" transfer-ownership="none">
            <doc xml:whitespace="preserve">right margin in pixels</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_tabs" c:identifier="gtk_text_view_set_tabs">
        <doc xml:whitespace="preserve">Sets the default tab stops for paragraphs in @text_view.
Tags in the buffer may override the default.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="tabs" transfer-ownership="none">
            <doc xml:whitespace="preserve">tabs as a #PangoTabArray</doc>
            <type name="Pango.TabArray" c:type="PangoTabArray*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_wrap_mode" c:identifier="gtk_text_view_set_wrap_mode">
        <doc xml:whitespace="preserve">Sets the line wrapping for the view.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="wrap_mode" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkWrapMode</doc>
            <type name="WrapMode" c:type="GtkWrapMode"/>
          </parameter>
        </parameters>
      </method>
      <method name="starts_display_line"
              c:identifier="gtk_text_view_starts_display_line">
        <doc xml:whitespace="preserve">Determines whether @iter is at the start of a display line.
See gtk_text_view_forward_display_line() for an explanation of
display lines vs. paragraphs.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if @iter begins a wrapped line</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="iter" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkTextIter</doc>
            <type name="TextIter" c:type="GtkTextIter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="window_to_buffer_coords"
              c:identifier="gtk_text_view_window_to_buffer_coords">
        <doc xml:whitespace="preserve">Converts coordinates on the window identified by @win to buffer
coordinates, storing the result in (@buffer_x,@buffer_y).
Note that you can't convert coordinates for a nonexisting window (see 
gtk_text_view_set_border_window_size()).</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="win" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkTextWindowType except #GTK_TEXT_WINDOW_PRIVATE</doc>
            <type name="TextWindowType" c:type="GtkTextWindowType"/>
          </parameter>
          <parameter name="window_x" transfer-ownership="none">
            <doc xml:whitespace="preserve">window x coordinate</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="window_y" transfer-ownership="none">
            <doc xml:whitespace="preserve">window y coordinate</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="buffer_x"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     allow-none="1">
            <doc xml:whitespace="preserve">buffer x coordinate return location or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="buffer_y"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     allow-none="1">
            <doc xml:whitespace="preserve">buffer y coordinate return location or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <property name="accepts-tab" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="buffer" writable="1" transfer-ownership="none">
        <type name="TextBuffer"/>
      </property>
      <property name="cursor-visible" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="editable" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="im-module"
                version="2.16"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Which IM (input method) module should be used for this entry. 
See #GtkIMContext.
Setting this to a non-%NULL value overrides the
system-wide IM module setting. See the GtkSettings 
#GtkSettings:gtk-im-module property.</doc>
        <type name="utf8"/>
      </property>
      <property name="indent" writable="1" transfer-ownership="none">
        <type name="gint"/>
      </property>
      <property name="justification" writable="1" transfer-ownership="none">
        <type name="Justification"/>
      </property>
      <property name="left-margin" writable="1" transfer-ownership="none">
        <type name="gint"/>
      </property>
      <property name="overwrite" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="pixels-above-lines"
                writable="1"
                transfer-ownership="none">
        <type name="gint"/>
      </property>
      <property name="pixels-below-lines"
                writable="1"
                transfer-ownership="none">
        <type name="gint"/>
      </property>
      <property name="pixels-inside-wrap"
                writable="1"
                transfer-ownership="none">
        <type name="gint"/>
      </property>
      <property name="right-margin" writable="1" transfer-ownership="none">
        <type name="gint"/>
      </property>
      <property name="tabs" writable="1" transfer-ownership="none">
        <type name="Pango.TabArray"/>
      </property>
      <property name="wrap-mode" writable="1" transfer-ownership="none">
        <type name="WrapMode"/>
      </property>
      <field name="parent_instance">
        <type name="Container" c:type="GtkContainer"/>
      </field>
      <field name="priv">
        <type name="TextViewPrivate" c:type="GtkTextViewPrivate*"/>
      </field>
      <glib:signal name="backspace">
        <doc xml:whitespace="preserve">The ::backspace signal is a 
&lt;link linkend="keybinding-signals"&gt;keybinding signal&lt;/link&gt; 
which gets emitted when the user asks for it.
The default bindings for this signal are
Backspace and Shift-Backspace.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
      <glib:signal name="copy-clipboard">
        <doc xml:whitespace="preserve">The ::copy-clipboard signal is a 
&lt;link linkend="keybinding-signals"&gt;keybinding signal&lt;/link&gt; 
which gets emitted to copy the selection to the clipboard.
The default bindings for this signal are
Ctrl-c and Ctrl-Insert.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
      <glib:signal name="cut-clipboard">
        <doc xml:whitespace="preserve">The ::cut-clipboard signal is a 
&lt;link linkend="keybinding-signals"&gt;keybinding signal&lt;/link&gt; 
which gets emitted to cut the selection to the clipboard.
The default bindings for this signal are
Ctrl-x and Shift-Delete.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
      <glib:signal name="delete-from-cursor">
        <doc xml:whitespace="preserve">The ::delete-from-cursor signal is a 
&lt;link linkend="keybinding-signals"&gt;keybinding signal&lt;/link&gt; 
which gets emitted when the user initiates a text deletion.
If the @type is %GTK_DELETE_CHARS, GTK+ deletes the selection
if there is one, otherwise it deletes the requested number
of characters.
The default bindings for this signal are
Delete for deleting a character, Ctrl-Delete for 
deleting a word and Ctrl-Backspace for deleting a word 
backwords.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the granularity of the deletion, as a #GtkDeleteType</doc>
            <type name="DeleteType"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <doc xml:whitespace="preserve">the number of @type units to delete</doc>
            <type name="gint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="insert-at-cursor">
        <doc xml:whitespace="preserve">The ::insert-at-cursor signal is a
&lt;link linkend="keybinding-signals"&gt;keybinding signal&lt;/link&gt;
which gets emitted when the user initiates the insertion of a 
fixed string at the cursor.
This signal has no default bindings.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the string to insert</doc>
            <type name="utf8"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="move-cursor">
        <doc xml:whitespace="preserve">The ::move-cursor signal is a 
&lt;link linkend="keybinding-signals"&gt;keybinding signal&lt;/link&gt; 
which gets emitted when the user initiates a cursor movement. 
If the cursor is not visible in @text_view, this signal causes
the viewport to be moved instead.
Applications should not connect to it, but may emit it with 
g_signal_emit_by_name() if they need to control the cursor
programmatically.
The default bindings for this signal come in two variants,
the variant with the Shift modifier extends the selection,
the variant without the Shift modifer does not.
There are too many key combinations to list them all here.
&lt;itemizedlist&gt;
&lt;listitem&gt;Arrow keys move by individual characters/lines&lt;/listitem&gt;
&lt;listitem&gt;Ctrl-arrow key combinations move by words/paragraphs&lt;/listitem&gt;
&lt;listitem&gt;Home/End keys move to the ends of the buffer&lt;/listitem&gt;
&lt;listitem&gt;PageUp/PageDown keys move vertically by pages&lt;/listitem&gt;
&lt;listitem&gt;Ctrl-PageUp/PageDown keys move horizontally by pages&lt;/listitem&gt;
&lt;/itemizedlist&gt;</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the granularity of the move, as a #GtkMovementStep</doc>
            <type name="MovementStep"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <doc xml:whitespace="preserve">the number of @step units to move</doc>
            <type name="gint"/>
          </parameter>
          <parameter name="p1" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE if the move should extend the selection</doc>
            <type name="gboolean"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="move-viewport">
        <doc xml:whitespace="preserve">The ::move-viewport signal is a 
&lt;link linkend="keybinding-signals"&gt;keybinding signal&lt;/link&gt; 
which can be bound to key combinations to allow the user
to move the viewport, i.e. change what part of the text view
is visible in a containing scrolled window.
There are no default bindings for this signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the granularity of the move, as a #GtkMovementStep</doc>
            <type name="ScrollStep"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <doc xml:whitespace="preserve">the number of @step units to move</doc>
            <type name="gint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="paste-clipboard">
        <doc xml:whitespace="preserve">The ::paste-clipboard signal is a 
&lt;link linkend="keybinding-signals"&gt;keybinding signal&lt;/link&gt; 
which gets emitted to paste the contents of the clipboard 
into the text view.
The default bindings for this signal are
Ctrl-v and Shift-Insert.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
      <glib:signal name="populate-popup">
        <doc xml:whitespace="preserve">The ::populate-popup signal gets emitted before showing the 
context menu of the text view.
If you need to add items to the context menu, connect
to this signal and append your menuitems to the @menu.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the menu that is being populated</doc>
            <type name="Menu"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="preedit-changed" version="2.20">
        <doc xml:whitespace="preserve">If an input method is used, the typed text will not immediately
be committed to the buffer. So if you are interested in the text,
connect to this signal.
This signal is only emitted if the text at the given position
is actually editable.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the current preedit string</doc>
            <type name="utf8"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="select-all">
        <doc xml:whitespace="preserve">The ::select-all signal is a 
&lt;link linkend="keybinding-signals"&gt;keybinding signal&lt;/link&gt; 
which gets emitted to select or unselect the complete
contents of the text view.
The default bindings for this signal are Ctrl-a and Ctrl-/ 
for selecting and Shift-Ctrl-a and Ctrl-\ for unselecting.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE to select, %FALSE to unselect</doc>
            <type name="gboolean"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="set-anchor">
        <doc xml:whitespace="preserve">The ::set-anchor signal is a
&lt;link linkend="keybinding-signals"&gt;keybinding signal&lt;/link&gt;
which gets emitted when the user initiates setting the "anchor" 
mark. The "anchor" mark gets placed at the same position as the
"insert" mark.
This signal has no default bindings.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
      <glib:signal name="set-scroll-adjustments">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Adjustment"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="Adjustment"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="toggle-cursor-visible">
        <doc xml:whitespace="preserve">The ::toggle-cursor-visible signal is a 
&lt;link linkend="keybinding-signals"&gt;keybinding signal&lt;/link&gt; 
which gets emitted to toggle the visibility of the cursor.
The default binding for this signal is F7.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
      <glib:signal name="toggle-overwrite">
        <doc xml:whitespace="preserve">The ::toggle-overwrite signal is a 
&lt;link linkend="keybinding-signals"&gt;keybinding signal&lt;/link&gt; 
which gets emitted to toggle the overwrite mode of the text view.
The default bindings for this signal is Insert.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="TextViewClass"
            c:type="GtkTextViewClass"
            glib:is-gtype-struct-for="TextView">
      <field name="parent_class">
        <type name="ContainerClass" c:type="GtkContainerClass"/>
      </field>
      <field name="set_scroll_adjustments">
        <callback name="set_scroll_adjustments">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="text_view" transfer-ownership="none">
              <type name="TextView" c:type="GtkTextView*"/>
            </parameter>
            <parameter name="hadjustment" transfer-ownership="none">
              <type name="Adjustment" c:type="GtkAdjustment*"/>
            </parameter>
            <parameter name="vadjustment" transfer-ownership="none">
              <type name="Adjustment" c:type="GtkAdjustment*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="populate_popup">
        <callback name="populate_popup">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="text_view" transfer-ownership="none">
              <type name="TextView" c:type="GtkTextView*"/>
            </parameter>
            <parameter name="menu" transfer-ownership="none">
              <type name="Menu" c:type="GtkMenu*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="move_cursor">
        <callback name="move_cursor">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="text_view" transfer-ownership="none">
              <type name="TextView" c:type="GtkTextView*"/>
            </parameter>
            <parameter name="step" transfer-ownership="none">
              <type name="MovementStep" c:type="GtkMovementStep"/>
            </parameter>
            <parameter name="count" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="extend_selection" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_anchor">
        <callback name="set_anchor">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="text_view" transfer-ownership="none">
              <type name="TextView" c:type="GtkTextView*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="insert_at_cursor">
        <callback name="insert_at_cursor">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="text_view" transfer-ownership="none">
              <type name="TextView" c:type="GtkTextView*"/>
            </parameter>
            <parameter name="str" transfer-ownership="none">
              <type name="utf8" c:type="gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="delete_from_cursor">
        <callback name="delete_from_cursor">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="text_view" transfer-ownership="none">
              <type name="TextView" c:type="GtkTextView*"/>
            </parameter>
            <parameter name="type" transfer-ownership="none">
              <type name="DeleteType" c:type="GtkDeleteType"/>
            </parameter>
            <parameter name="count" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="backspace">
        <callback name="backspace">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="text_view" transfer-ownership="none">
              <type name="TextView" c:type="GtkTextView*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="cut_clipboard">
        <callback name="cut_clipboard">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="text_view" transfer-ownership="none">
              <type name="TextView" c:type="GtkTextView*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="copy_clipboard">
        <callback name="copy_clipboard">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="text_view" transfer-ownership="none">
              <type name="TextView" c:type="GtkTextView*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="paste_clipboard">
        <callback name="paste_clipboard">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="text_view" transfer-ownership="none">
              <type name="TextView" c:type="GtkTextView*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="toggle_overwrite">
        <callback name="toggle_overwrite">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="text_view" transfer-ownership="none">
              <type name="TextView" c:type="GtkTextView*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="move_focus">
        <callback name="move_focus">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="text_view" transfer-ownership="none">
              <type name="TextView" c:type="GtkTextView*"/>
            </parameter>
            <parameter name="direction" transfer-ownership="none">
              <type name="DirectionType" c:type="GtkDirectionType"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_gtk_reserved1" introspectable="0">
        <callback name="_gtk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved2" introspectable="0">
        <callback name="_gtk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved3" introspectable="0">
        <callback name="_gtk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved4" introspectable="0">
        <callback name="_gtk_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved5" introspectable="0">
        <callback name="_gtk_reserved5">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved6" introspectable="0">
        <callback name="_gtk_reserved6">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved7" introspectable="0">
        <callback name="_gtk_reserved7">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="TextViewPrivate" c:type="GtkTextViewPrivate" disguised="1">
    </record>
    <enumeration name="TextWindowType"
                 glib:type-name="GtkTextWindowType"
                 glib:get-type="gtk_text_window_type_get_type"
                 c:type="GtkTextWindowType">
      <member name="private"
              value="0"
              c:identifier="GTK_TEXT_WINDOW_PRIVATE"
              glib:nick="private"/>
      <member name="widget"
              value="1"
              c:identifier="GTK_TEXT_WINDOW_WIDGET"
              glib:nick="widget"/>
      <member name="text"
              value="2"
              c:identifier="GTK_TEXT_WINDOW_TEXT"
              glib:nick="text"/>
      <member name="left"
              value="3"
              c:identifier="GTK_TEXT_WINDOW_LEFT"
              glib:nick="left"/>
      <member name="right"
              value="4"
              c:identifier="GTK_TEXT_WINDOW_RIGHT"
              glib:nick="right"/>
      <member name="top"
              value="5"
              c:identifier="GTK_TEXT_WINDOW_TOP"
              glib:nick="top"/>
      <member name="bottom"
              value="6"
              c:identifier="GTK_TEXT_WINDOW_BOTTOM"
              glib:nick="bottom"/>
    </enumeration>
    <record name="ThemeEngine" c:type="GtkThemeEngine" disguised="1">
    </record>
    <class name="ToggleAction"
           c:symbol-prefix="toggle_action"
           c:type="GtkToggleAction"
           parent="Action"
           glib:type-name="GtkToggleAction"
           glib:get-type="gtk_toggle_action_get_type"
           glib:type-struct="ToggleActionClass">
      <implements name="Buildable"/>
      <constructor name="new"
                   c:identifier="gtk_toggle_action_new"
                   version="2.4">
        <doc xml:whitespace="preserve">Creates a new #GtkToggleAction object. To add the action to
a #GtkActionGroup and set the accelerator for the action,
call gtk_action_group_add_action_with_accel().</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new #GtkToggleAction</doc>
          <type name="ToggleAction" c:type="GtkToggleAction*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:whitespace="preserve">A unique name for the action</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="label" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">The label displayed in menu items and on buttons, or %NULL</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="tooltip" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">A tooltip for the action, or %NULL</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="stock_id" transfer-ownership="none">
            <doc xml:whitespace="preserve">The stock icon to display in widgets representing the action, or %NULL</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_active"
              c:identifier="gtk_toggle_action_get_active"
              version="2.4">
        <doc xml:whitespace="preserve">Returns the checked state of the toggle action.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the checked state of the toggle action</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_draw_as_radio"
              c:identifier="gtk_toggle_action_get_draw_as_radio"
              version="2.4">
        <doc xml:whitespace="preserve">Returns whether the action should have proxies like a radio action.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">whether the action should have proxies like a radio action.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="set_active"
              c:identifier="gtk_toggle_action_set_active"
              version="2.4">
        <doc xml:whitespace="preserve">Sets the checked state on the toggle action.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="is_active" transfer-ownership="none">
            <doc xml:whitespace="preserve">whether the action should be checked or not</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_draw_as_radio"
              c:identifier="gtk_toggle_action_set_draw_as_radio"
              version="2.4">
        <doc xml:whitespace="preserve">Sets whether the action should have proxies like a radio action.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="draw_as_radio" transfer-ownership="none">
            <doc xml:whitespace="preserve">whether the action should have proxies like a radio action</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="toggled"
              c:identifier="gtk_toggle_action_toggled"
              version="2.4">
        <doc xml:whitespace="preserve">Emits the "toggled" signal on the toggle action.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <property name="active"
                version="2.10"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Whether the toggle action should be active.</doc>
        <type name="gboolean"/>
      </property>
      <property name="draw-as-radio" writable="1" transfer-ownership="none">
        <doc xml:whitespace="preserve">Whether the proxies for this action look like radio action proxies.
This is an appearance property and thus only applies if 
#GtkActivatable:use-action-appearance is %TRUE.</doc>
        <type name="gboolean"/>
      </property>
      <field name="parent">
        <type name="Action" c:type="GtkAction"/>
      </field>
      <field name="private_data">
        <type name="ToggleActionPrivate" c:type="GtkToggleActionPrivate*"/>
      </field>
      <glib:signal name="toggled">
        <doc xml:whitespace="preserve">Should be connected if you wish to perform an action
whenever the #GtkToggleAction state is changed.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="ToggleActionClass"
            c:type="GtkToggleActionClass"
            glib:is-gtype-struct-for="ToggleAction">
      <field name="parent_class">
        <type name="ActionClass" c:type="GtkActionClass"/>
      </field>
      <field name="toggled">
        <callback name="toggled">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="action" transfer-ownership="none">
              <type name="ToggleAction" c:type="GtkToggleAction*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_gtk_reserved1" introspectable="0">
        <callback name="_gtk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved2" introspectable="0">
        <callback name="_gtk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved3" introspectable="0">
        <callback name="_gtk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved4" introspectable="0">
        <callback name="_gtk_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="ToggleActionEntry" c:type="GtkToggleActionEntry">
      <doc xml:whitespace="preserve">#GtkToggleActionEntry structs are used with
gtk_action_group_add_toggle_actions() to construct toggle actions.</doc>
      <field name="name" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="stock_id" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="label" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="accelerator" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="tooltip" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="callback" writable="1">
        <type name="GObject.Callback" c:type="GCallback"/>
      </field>
      <field name="is_active" writable="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
    </record>
    <record name="ToggleActionPrivate"
            c:type="GtkToggleActionPrivate"
            disguised="1">
    </record>
    <class name="ToggleButton"
           c:symbol-prefix="toggle_button"
           c:type="GtkToggleButton"
           parent="Button"
           glib:type-name="GtkToggleButton"
           glib:get-type="gtk_toggle_button_get_type"
           glib:type-struct="ToggleButtonClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Activatable"/>
      <implements name="Buildable"/>
      <implements name="SizeRequest"/>
      <constructor name="new" c:identifier="gtk_toggle_button_new">
        <return-value transfer-ownership="none">
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <constructor name="new_with_label"
                   c:identifier="gtk_toggle_button_new_with_label">
        <return-value transfer-ownership="none">
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="label" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_with_mnemonic"
                   c:identifier="gtk_toggle_button_new_with_mnemonic">
        <doc xml:whitespace="preserve">Creates a new #GtkToggleButton containing a label. The label
will be created using gtk_label_new_with_mnemonic(), so underscores
in @label indicate the mnemonic for the button.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a new #GtkToggleButton</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="label" transfer-ownership="none">
            <doc xml:whitespace="preserve">the text of the button, with an underscore in front of the mnemonic character</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_active" c:identifier="gtk_toggle_button_get_active">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_inconsistent"
              c:identifier="gtk_toggle_button_get_inconsistent">
        <doc xml:whitespace="preserve">Gets the value set by gtk_toggle_button_set_inconsistent().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the button is displayed as inconsistent, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_mode" c:identifier="gtk_toggle_button_get_mode">
        <doc xml:whitespace="preserve">Retrieves whether the button is displayed as a separate indicator
and label. See gtk_toggle_button_set_mode().
and label.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the togglebutton is drawn as a separate indicator</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="set_active" c:identifier="gtk_toggle_button_set_active">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="is_active" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_inconsistent"
              c:identifier="gtk_toggle_button_set_inconsistent">
        <doc xml:whitespace="preserve">If the user has selected a range of elements (such as some text or
spreadsheet cells) that are affected by a toggle button, and the
current values in that range are inconsistent, you may want to
display the toggle in an "in between" state. This function turns on
"in between" display.  Normally you would turn off the inconsistent
state again if the user toggles the toggle button. This has to be
done manually, gtk_toggle_button_set_inconsistent() only affects
visual appearance, it doesn't affect the semantics of the button.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="setting" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE if state is inconsistent</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_mode" c:identifier="gtk_toggle_button_set_mode">
        <doc xml:whitespace="preserve">Sets whether the button is displayed as a separate indicator and label.
You can call this function on a checkbutton or a radiobutton with
This function only affects instances of classes like #GtkCheckButton
and #GtkRadioButton that derive from #GtkToggleButton,
not instances of #GtkToggleButton itself.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="draw_indicator" transfer-ownership="none">
            <doc xml:whitespace="preserve">if %TRUE, draw the button as a separate indicator and label; if %FALSE, draw the button like a normal button</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="toggled" c:identifier="gtk_toggle_button_toggled">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <property name="active" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="draw-indicator" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="inconsistent" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <field name="button">
        <type name="Button" c:type="GtkButton"/>
      </field>
      <field name="active" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="draw_indicator" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="inconsistent" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <glib:signal name="toggled">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="ToggleButtonClass"
            c:type="GtkToggleButtonClass"
            glib:is-gtype-struct-for="ToggleButton">
      <field name="parent_class">
        <type name="ButtonClass" c:type="GtkButtonClass"/>
      </field>
      <field name="toggled">
        <callback name="toggled">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="toggle_button" transfer-ownership="none">
              <type name="ToggleButton" c:type="GtkToggleButton*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_gtk_reserved1" introspectable="0">
        <callback name="_gtk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved2" introspectable="0">
        <callback name="_gtk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved3" introspectable="0">
        <callback name="_gtk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved4" introspectable="0">
        <callback name="_gtk_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <class name="ToggleToolButton"
           c:symbol-prefix="toggle_tool_button"
           c:type="GtkToggleToolButton"
           parent="ToolButton"
           glib:type-name="GtkToggleToolButton"
           glib:get-type="gtk_toggle_tool_button_get_type"
           glib:type-struct="ToggleToolButtonClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Activatable"/>
      <implements name="Buildable"/>
      <implements name="SizeRequest"/>
      <constructor name="new"
                   c:identifier="gtk_toggle_tool_button_new"
                   version="2.4">
        <doc xml:whitespace="preserve">Returns a new #GtkToggleToolButton</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a newly created #GtkToggleToolButton</doc>
          <type name="ToolItem" c:type="GtkToolItem*"/>
        </return-value>
      </constructor>
      <constructor name="new_from_stock"
                   c:identifier="gtk_toggle_tool_button_new_from_stock"
                   version="2.4">
        <doc xml:whitespace="preserve">Creates a new #GtkToggleToolButton containing the image and text from a
stock item. Some stock ids have preprocessor macros like #GTK_STOCK_OK
and #GTK_STOCK_APPLY.
It is an error if @stock_id is not a name of a stock item.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">A new #GtkToggleToolButton</doc>
          <type name="ToolItem" c:type="GtkToolItem*"/>
        </return-value>
        <parameters>
          <parameter name="stock_id" transfer-ownership="none">
            <doc xml:whitespace="preserve">the name of the stock item</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_active"
              c:identifier="gtk_toggle_tool_button_get_active"
              version="2.4">
        <doc xml:whitespace="preserve">Queries a #GtkToggleToolButton and returns its current state.
Returns %TRUE if the toggle button is pressed in and %FALSE if it is raised.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the toggle tool button is pressed in, %FALSE if not</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="set_active"
              c:identifier="gtk_toggle_tool_button_set_active"
              version="2.4">
        <doc xml:whitespace="preserve">Sets the status of the toggle tool button. Set to %TRUE if you
want the GtkToggleButton to be 'pressed in', and %FALSE to raise it.
This action causes the toggled signal to be emitted.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="is_active" transfer-ownership="none">
            <doc xml:whitespace="preserve">whether @button should be active</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="active"
                version="2.8"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">If the toggle tool button should be pressed in.</doc>
        <type name="gboolean"/>
      </property>
      <field name="parent">
        <type name="ToolButton" c:type="GtkToolButton"/>
      </field>
      <field name="priv">
        <type name="ToggleToolButtonPrivate"
              c:type="GtkToggleToolButtonPrivate*"/>
      </field>
      <glib:signal name="toggled">
        <doc xml:whitespace="preserve">Emitted whenever the toggle tool button changes state.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="ToggleToolButtonClass"
            c:type="GtkToggleToolButtonClass"
            glib:is-gtype-struct-for="ToggleToolButton">
      <field name="parent_class">
        <type name="ToolButtonClass" c:type="GtkToolButtonClass"/>
      </field>
      <field name="toggled">
        <callback name="toggled">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="button" transfer-ownership="none">
              <type name="ToggleToolButton" c:type="GtkToggleToolButton*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_gtk_reserved1" introspectable="0">
        <callback name="_gtk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved2" introspectable="0">
        <callback name="_gtk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved3" introspectable="0">
        <callback name="_gtk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved4" introspectable="0">
        <callback name="_gtk_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="ToggleToolButtonPrivate"
            c:type="GtkToggleToolButtonPrivate"
            disguised="1">
    </record>
    <class name="ToolButton"
           c:symbol-prefix="tool_button"
           c:type="GtkToolButton"
           parent="ToolItem"
           glib:type-name="GtkToolButton"
           glib:get-type="gtk_tool_button_get_type"
           glib:type-struct="ToolButtonClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Activatable"/>
      <implements name="Buildable"/>
      <implements name="SizeRequest"/>
      <constructor name="new" c:identifier="gtk_tool_button_new" version="2.4">
        <doc xml:whitespace="preserve">Creates a new %GtkToolButton using @icon_widget as icon and @label as
label.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">A new #GtkToolButton</doc>
          <type name="ToolItem" c:type="GtkToolItem*"/>
        </return-value>
        <parameters>
          <parameter name="icon_widget"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">a #GtkMisc widget that will be used as icon widget, or %NULL</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="label" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">a string that will be used as label, or %NULL</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_stock"
                   c:identifier="gtk_tool_button_new_from_stock"
                   version="2.4">
        <doc xml:whitespace="preserve">Creates a new #GtkToolButton containing the image and text from a
stock item. Some stock ids have preprocessor macros like #GTK_STOCK_OK
and #GTK_STOCK_APPLY.
It is an error if @stock_id is not a name of a stock item.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">A new #GtkToolButton</doc>
          <type name="ToolItem" c:type="GtkToolItem*"/>
        </return-value>
        <parameters>
          <parameter name="stock_id" transfer-ownership="none">
            <doc xml:whitespace="preserve">the name of the stock item</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_icon_name"
              c:identifier="gtk_tool_button_get_icon_name">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_icon_widget"
              c:identifier="gtk_tool_button_get_icon_widget"
              version="2.4">
        <doc xml:whitespace="preserve">Return the widget used as icon widget on @button.
See gtk_tool_button_set_icon_widget().
on @button, or %NULL.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The widget used as icon</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
      </method>
      <method name="get_label"
              c:identifier="gtk_tool_button_get_label"
              version="2.4">
        <doc xml:whitespace="preserve">Returns the label used by the tool button, or %NULL if the tool button
doesn't have a label. or uses a the label from a stock item. The returned
string is owned by GTK+, and must not be modified or freed.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The label, or %NULL</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_label_widget"
              c:identifier="gtk_tool_button_get_label_widget"
              version="2.4">
        <doc xml:whitespace="preserve">Returns the widget used as label on @button.
See gtk_tool_button_set_label_widget().
on @button, or %NULL.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The widget used as label</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
      </method>
      <method name="get_stock_id"
              c:identifier="gtk_tool_button_get_stock_id"
              version="2.4">
        <doc xml:whitespace="preserve">Returns the name of the stock item. See gtk_tool_button_set_stock_id().
The returned string is owned by GTK+ and must not be freed or modifed.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the name of the stock item for @button.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_use_underline"
              c:identifier="gtk_tool_button_get_use_underline"
              version="2.4">
        <doc xml:whitespace="preserve">Returns whether underscores in the label property are used as mnemonics
on menu items on the overflow menu. See gtk_tool_button_set_use_underline().
mnemonics on menu items on the overflow menu.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if underscores in the label property are used as</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="set_icon_name"
              c:identifier="gtk_tool_button_set_icon_name">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="icon_name" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_icon_widget"
              c:identifier="gtk_tool_button_set_icon_widget"
              version="2.4">
        <doc xml:whitespace="preserve">Sets @icon as the widget used as icon on @button. If @icon_widget is
%NULL the icon is determined by the "stock_id" property. If the
"stock_id" property is also %NULL, @button will not have an icon.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="icon_widget"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">the widget used as icon, or %NULL</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_label"
              c:identifier="gtk_tool_button_set_label"
              version="2.4">
        <doc xml:whitespace="preserve">Sets @label as the label used for the tool button. The "label" property
only has an effect if not overridden by a non-%NULL "label_widget" property.
If both the "label_widget" and "label" properties are %NULL, the label
is determined by the "stock_id" property. If the "stock_id" property is also
%NULL, @button will not have a label.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="label" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">a string that will be used as label, or %NULL.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_label_widget"
              c:identifier="gtk_tool_button_set_label_widget"
              version="2.4">
        <doc xml:whitespace="preserve">Sets @label_widget as the widget that will be used as the label
for @button. If @label_widget is %NULL the "label" property is used
as label. If "label" is also %NULL, the label in the stock item
determined by the "stock_id" property is used as label. If
"stock_id" is also %NULL, @button does not have a label.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="label_widget"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">the widget used as label, or %NULL</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_stock_id"
              c:identifier="gtk_tool_button_set_stock_id"
              version="2.4">
        <doc xml:whitespace="preserve">Sets the name of the stock item. See gtk_tool_button_new_from_stock().
The stock_id property only has an effect if not
overridden by non-%NULL "label" and "icon_widget" properties.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="stock_id" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">a name of a stock item, or %NULL</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_use_underline"
              c:identifier="gtk_tool_button_set_use_underline"
              version="2.4">
        <doc xml:whitespace="preserve">If set, an underline in the label property indicates that the next character
should be used for the mnemonic accelerator key in the overflow menu. For
example, if the label property is "_Open" and @use_underline is %TRUE,
the label on the tool button will be "Open" and the item on the overflow
menu will have an underlined 'O'.
Labels shown on tool buttons never have mnemonics on them; this property
only affects the menu item on the overflow menu.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="use_underline" transfer-ownership="none">
            <doc xml:whitespace="preserve">whether the button label has the form "_Open"</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="icon-name"
                version="2.8"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The name of the themed icon displayed on the item.
This property only has an effect if not overridden by "label", 
"icon_widget" or "stock_id" properties.</doc>
        <type name="utf8"/>
      </property>
      <property name="icon-widget" writable="1" transfer-ownership="none">
        <type name="Widget"/>
      </property>
      <property name="label" writable="1" transfer-ownership="none">
        <type name="utf8"/>
      </property>
      <property name="label-widget" writable="1" transfer-ownership="none">
        <type name="Widget"/>
      </property>
      <property name="stock-id" writable="1" transfer-ownership="none">
        <type name="utf8"/>
      </property>
      <property name="use-underline" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <field name="parent">
        <type name="ToolItem" c:type="GtkToolItem"/>
      </field>
      <field name="priv">
        <type name="ToolButtonPrivate" c:type="GtkToolButtonPrivate*"/>
      </field>
      <glib:signal name="clicked">
        <doc xml:whitespace="preserve">This signal is emitted when the tool button is clicked with the mouse
or activated with the keyboard.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="ToolButtonClass"
            c:type="GtkToolButtonClass"
            glib:is-gtype-struct-for="ToolButton">
      <field name="parent_class">
        <type name="ToolItemClass" c:type="GtkToolItemClass"/>
      </field>
      <field name="button_type">
        <type name="GType" c:type="GType"/>
      </field>
      <field name="clicked">
        <callback name="clicked">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="tool_item" transfer-ownership="none">
              <type name="ToolButton" c:type="GtkToolButton*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_gtk_reserved1" introspectable="0">
        <callback name="_gtk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved2" introspectable="0">
        <callback name="_gtk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved3" introspectable="0">
        <callback name="_gtk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved4" introspectable="0">
        <callback name="_gtk_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="ToolButtonPrivate"
            c:type="GtkToolButtonPrivate"
            disguised="1">
    </record>
    <class name="ToolItem"
           c:symbol-prefix="tool_item"
           c:type="GtkToolItem"
           parent="Bin"
           glib:type-name="GtkToolItem"
           glib:get-type="gtk_tool_item_get_type"
           glib:type-struct="ToolItemClass">
      <doc xml:whitespace="preserve">The GtkToolItem struct contains only private data.
It should only be accessed through the functions described below.</doc>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Activatable"/>
      <implements name="Buildable"/>
      <implements name="SizeRequest"/>
      <constructor name="new" c:identifier="gtk_tool_item_new" version="2.4">
        <doc xml:whitespace="preserve">Creates a new #GtkToolItem</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the new #GtkToolItem</doc>
          <type name="ToolItem" c:type="GtkToolItem*"/>
        </return-value>
      </constructor>
      <method name="get_ellipsize_mode"
              c:identifier="gtk_tool_item_get_ellipsize_mode"
              version="2.20">
        <doc xml:whitespace="preserve">Returns the ellipsize mode used for @tool_item. Custom subclasses of
#GtkToolItem should call this function to find out how text should
be ellipsized.
should be ellipsized.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a #PangoEllipsizeMode indicating how text in @tool_item</doc>
          <type name="Pango.EllipsizeMode" c:type="PangoEllipsizeMode"/>
        </return-value>
      </method>
      <method name="get_expand"
              c:identifier="gtk_tool_item_get_expand"
              version="2.4">
        <doc xml:whitespace="preserve">Returns whether @tool_item is allocated extra space.
See gtk_tool_item_set_expand().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if @tool_item is allocated extra space.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_homogeneous"
              c:identifier="gtk_tool_item_get_homogeneous"
              version="2.4">
        <doc xml:whitespace="preserve">Returns whether @tool_item is the same size as other homogeneous
items. See gtk_tool_item_set_homogeneous().
items.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the item is the same size as other homogeneous</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_icon_size"
              c:identifier="gtk_tool_item_get_icon_size"
              version="2.4">
        <doc xml:whitespace="preserve">Returns the icon size used for @tool_item. Custom subclasses of
#GtkToolItem should call this function to find out what size icons
they should use.
used for @tool_item</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GtkIconSize indicating the icon size</doc>
          <type name="gint"/>
        </return-value>
      </method>
      <method name="get_is_important"
              c:identifier="gtk_tool_item_get_is_important"
              version="2.4">
        <doc xml:whitespace="preserve">Returns whether @tool_item is considered important. See
gtk_tool_item_set_is_important()</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if @tool_item is considered important.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_orientation"
              c:identifier="gtk_tool_item_get_orientation"
              version="2.4">
        <doc xml:whitespace="preserve">Returns the orientation used for @tool_item. Custom subclasses of
#GtkToolItem should call this function to find out what size icons
they should use.
used for @tool_item</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GtkOrientation indicating the orientation</doc>
          <type name="Orientation" c:type="GtkOrientation"/>
        </return-value>
      </method>
      <method name="get_proxy_menu_item"
              c:identifier="gtk_tool_item_get_proxy_menu_item"
              version="2.4">
        <doc xml:whitespace="preserve">If @menu_item_id matches the string passed to
gtk_tool_item_set_proxy_menu_item() return the corresponding #GtkMenuItem.
Custom subclasses of #GtkToolItem should use this function to
update their menu item when the #GtkToolItem changes. That the
will not inadvertently change a menu item that they did not create.
gtk_tool_item_set_proxy_menu_item(), if the @menu_item_id&lt;!-- --&gt;s
match.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The #GtkMenuItem passed to</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="menu_item_id" transfer-ownership="none">
            <doc xml:whitespace="preserve">a string used to identify the menu item</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_relief_style"
              c:identifier="gtk_tool_item_get_relief_style"
              version="2.4">
        <doc xml:whitespace="preserve">Returns the relief style of @tool_item. See gtk_button_set_relief_style().
Custom subclasses of #GtkToolItem should call this function in the handler
of the #GtkToolItem::toolbar_reconfigured signal to find out the
relief style of buttons.
for @tool_item.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GtkReliefStyle indicating the relief style used</doc>
          <type name="ReliefStyle" c:type="GtkReliefStyle"/>
        </return-value>
      </method>
      <method name="get_text_alignment"
              c:identifier="gtk_tool_item_get_text_alignment"
              version="2.20">
        <doc xml:whitespace="preserve">Returns the text alignment used for @tool_item. Custom subclasses of
#GtkToolItem should call this function to find out how text should
be aligned.
used for @tool_item</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a #gfloat indicating the horizontal text alignment</doc>
          <type name="gfloat" c:type="gfloat"/>
        </return-value>
      </method>
      <method name="get_text_orientation"
              c:identifier="gtk_tool_item_get_text_orientation"
              version="2.20">
        <doc xml:whitespace="preserve">Returns the text orientation used for @tool_item. Custom subclasses of
#GtkToolItem should call this function to find out how text should
be orientated.
used for @tool_item</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GtkOrientation indicating the text orientation</doc>
          <type name="Orientation" c:type="GtkOrientation"/>
        </return-value>
      </method>
      <method name="get_text_size_group"
              c:identifier="gtk_tool_item_get_text_size_group"
              version="2.20">
        <doc xml:whitespace="preserve">Returns the size group used for labels in @tool_item.
Custom subclasses of #GtkToolItem should call this function
and use the size group for labels.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GtkSizeGroup</doc>
          <type name="SizeGroup" c:type="GtkSizeGroup*"/>
        </return-value>
      </method>
      <method name="get_toolbar_style"
              c:identifier="gtk_tool_item_get_toolbar_style"
              version="2.4">
        <doc xml:whitespace="preserve">Returns the toolbar style used for @tool_item. Custom subclasses of
#GtkToolItem should call this function in the handler of the
GtkToolItem::toolbar_reconfigured signal to find out in what style
the toolbar is displayed and change themselves accordingly 
Possibilities are:
&lt;itemizedlist&gt;
&lt;listitem&gt; GTK_TOOLBAR_BOTH, meaning the tool item should show
both an icon and a label, stacked vertically &lt;/listitem&gt;
&lt;listitem&gt; GTK_TOOLBAR_ICONS, meaning the toolbar shows
only icons &lt;/listitem&gt;
&lt;listitem&gt; GTK_TOOLBAR_TEXT, meaning the tool item should only
show text&lt;/listitem&gt;
&lt;listitem&gt; GTK_TOOLBAR_BOTH_HORIZ, meaning the tool item should show
both an icon and a label, arranged horizontally (however, note the 
#GtkToolButton::has_text_horizontally that makes tool buttons not
show labels when the toolbar style is GTK_TOOLBAR_BOTH_HORIZ.
&lt;/listitem&gt;
&lt;/itemizedlist&gt;
for @tool_item.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">A #GtkToolbarStyle indicating the toolbar style used</doc>
          <type name="ToolbarStyle" c:type="GtkToolbarStyle"/>
        </return-value>
      </method>
      <method name="get_use_drag_window"
              c:identifier="gtk_tool_item_get_use_drag_window"
              version="2.4">
        <doc xml:whitespace="preserve">Returns whether @tool_item has a drag window. See
gtk_tool_item_set_use_drag_window().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if @tool_item uses a drag window.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_visible_horizontal"
              c:identifier="gtk_tool_item_get_visible_horizontal"
              version="2.4">
        <doc xml:whitespace="preserve">Returns whether the @tool_item is visible on toolbars that are
docked horizontally.
docked horizontally.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if @tool_item is visible on toolbars that are</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_visible_vertical"
              c:identifier="gtk_tool_item_get_visible_vertical"
              version="2.4">
        <doc xml:whitespace="preserve">Returns whether @tool_item is visible when the toolbar is docked vertically.
See gtk_tool_item_set_visible_vertical().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">Whether @tool_item is visible when the toolbar is docked vertically</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="rebuild_menu"
              c:identifier="gtk_tool_item_rebuild_menu"
              version="2.6">
        <doc xml:whitespace="preserve">Calling this function signals to the toolbar that the
overflow menu item for @tool_item has changed. If the
overflow menu is visible when this function it called,
the menu will be rebuilt.
The function must be called when the tool item changes what it
will do in response to the #GtkToolItem::create-menu-proxy signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="retrieve_proxy_menu_item"
              c:identifier="gtk_tool_item_retrieve_proxy_menu_item"
              version="2.4">
        <doc xml:whitespace="preserve">Returns the #GtkMenuItem that was last set by
gtk_tool_item_set_proxy_menu_item(), ie. the #GtkMenuItem
that is going to appear in the overflow menu.
overflow menu for @tool_item.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The #GtkMenuItem that is going to appear in the</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
      </method>
      <method name="set_expand"
              c:identifier="gtk_tool_item_set_expand"
              version="2.4">
        <doc xml:whitespace="preserve">Sets whether @tool_item is allocated extra space when there
is more room on the toolbar then needed for the items. The
effect is that the item gets bigger when the toolbar gets bigger
and smaller when the toolbar gets smaller.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="expand" transfer-ownership="none">
            <doc xml:whitespace="preserve">Whether @tool_item is allocated extra space</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_homogeneous"
              c:identifier="gtk_tool_item_set_homogeneous"
              version="2.4">
        <doc xml:whitespace="preserve">Sets whether @tool_item is to be allocated the same size as other
homogeneous items. The effect is that all homogeneous items will have
the same width as the widest of the items.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="homogeneous" transfer-ownership="none">
            <doc xml:whitespace="preserve">whether @tool_item is the same size as other homogeneous items</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_is_important"
              c:identifier="gtk_tool_item_set_is_important"
              version="2.4">
        <doc xml:whitespace="preserve">Sets whether @tool_item should be considered important. The #GtkToolButton
class uses this property to determine whether to show or hide its label
when the toolbar style is %GTK_TOOLBAR_BOTH_HORIZ. The result is that
only tool buttons with the "is_important" property set have labels, an
effect known as "priority text"</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="is_important" transfer-ownership="none">
            <doc xml:whitespace="preserve">whether the tool item should be considered important</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_proxy_menu_item"
              c:identifier="gtk_tool_item_set_proxy_menu_item"
              version="2.4">
        <doc xml:whitespace="preserve">Sets the #GtkMenuItem used in the toolbar overflow menu. The
should also be used with gtk_tool_item_get_proxy_menu_item().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="menu_item_id" transfer-ownership="none">
            <doc xml:whitespace="preserve">a string used to identify @menu_item</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="menu_item" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkMenuItem to be used in the overflow menu</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_tooltip_markup"
              c:identifier="gtk_tool_item_set_tooltip_markup"
              version="2.12">
        <doc xml:whitespace="preserve">Sets the markup text to be displayed as tooltip on the item.
See gtk_widget_set_tooltip_markup().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="markup" transfer-ownership="none">
            <doc xml:whitespace="preserve">markup text to be used as tooltip for @tool_item</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_tooltip_text"
              c:identifier="gtk_tool_item_set_tooltip_text"
              version="2.12">
        <doc xml:whitespace="preserve">Sets the text to be displayed as tooltip on the item.
See gtk_widget_set_tooltip_text().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="text" transfer-ownership="none">
            <doc xml:whitespace="preserve">text to be used as tooltip for @tool_item</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_use_drag_window"
              c:identifier="gtk_tool_item_set_use_drag_window"
              version="2.4">
        <doc xml:whitespace="preserve">Sets whether @tool_item has a drag window. When %TRUE the
toolitem can be used as a drag source through gtk_drag_source_set().
When @tool_item has a drag window it will intercept all events,
even those that would otherwise be sent to a child of @tool_item.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="use_drag_window" transfer-ownership="none">
            <doc xml:whitespace="preserve">Whether @tool_item has a drag window.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_visible_horizontal"
              c:identifier="gtk_tool_item_set_visible_horizontal"
              version="2.4">
        <doc xml:whitespace="preserve">Sets whether @tool_item is visible when the toolbar is docked horizontally.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="visible_horizontal" transfer-ownership="none">
            <doc xml:whitespace="preserve">Whether @tool_item is visible when in horizontal mode</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_visible_vertical"
              c:identifier="gtk_tool_item_set_visible_vertical"
              version="2.4">
        <doc xml:whitespace="preserve">Sets whether @tool_item is visible when the toolbar is docked
vertically. Some tool items, such as text entries, are too wide to be
useful on a vertically docked toolbar. If @visible_vertical is %FALSE</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="visible_vertical" transfer-ownership="none">
            <doc xml:whitespace="preserve">whether @tool_item is visible when the toolbar is in vertical mode</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="toolbar_reconfigured"
              c:identifier="gtk_tool_item_toolbar_reconfigured"
              version="2.14">
        <doc xml:whitespace="preserve">Emits the signal #GtkToolItem::toolbar_reconfigured on @tool_item.
#GtkToolbar and other #GtkToolShell implementations use this function
to notify children, when some aspect of their configuration changes.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <property name="is-important" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="visible-horizontal"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="visible-vertical" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <field name="parent">
        <type name="Bin" c:type="GtkBin"/>
      </field>
      <field name="priv">
        <type name="ToolItemPrivate" c:type="GtkToolItemPrivate*"/>
      </field>
      <glib:signal name="create-menu-proxy">
        <doc xml:whitespace="preserve">This signal is emitted when the toolbar needs information from @tool_item
about whether the item should appear in the toolbar overflow menu. In
response the tool item should either
&lt;itemizedlist&gt;
&lt;listitem&gt;call gtk_tool_item_set_proxy_menu_item() with a %NULL
pointer and return %TRUE to indicate that the item should not appear
in the overflow menu
&lt;/listitem&gt;
&lt;listitem&gt; call gtk_tool_item_set_proxy_menu_item() with a new menu
item and return %TRUE, or 
&lt;/listitem&gt;
&lt;listitem&gt; return %FALSE to indicate that the signal was not
handled by the item. This means that
the item will not appear in the overflow menu unless a later handler
installs a menu item.
&lt;/listitem&gt;
&lt;/itemizedlist&gt;
The toolbar may cache the result of this signal. When the tool item changes
how it will respond to this signal it must call gtk_tool_item_rebuild_menu()
to invalidate the cache and ensure that the toolbar rebuilds its overflow
menu.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the signal was handled, %FALSE if not</doc>
          <type name="gboolean"/>
        </return-value>
      </glib:signal>
      <glib:signal name="toolbar-reconfigured">
        <doc xml:whitespace="preserve">This signal is emitted when some property of the toolbar that the
item is a child of changes. For custom subclasses of #GtkToolItem,
the default handler of this signal use the functions
&lt;itemizedlist&gt;
&lt;listitem&gt;gtk_tool_shell_get_orientation()&lt;/listitem&gt;
&lt;listitem&gt;gtk_tool_shell_get_style()&lt;/listitem&gt;
&lt;listitem&gt;gtk_tool_shell_get_icon_size()&lt;/listitem&gt;
&lt;listitem&gt;gtk_tool_shell_get_relief_style()&lt;/listitem&gt;
&lt;/itemizedlist&gt;
to find out what the toolbar should look like and change
themselves accordingly.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="ToolItemClass"
            c:type="GtkToolItemClass"
            glib:is-gtype-struct-for="ToolItem">
      <field name="parent_class">
        <type name="BinClass" c:type="GtkBinClass"/>
      </field>
      <field name="create_menu_proxy">
        <callback name="create_menu_proxy">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="tool_item" transfer-ownership="none">
              <type name="ToolItem" c:type="GtkToolItem*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="toolbar_reconfigured">
        <callback name="toolbar_reconfigured">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="tool_item" transfer-ownership="none">
              <type name="ToolItem" c:type="GtkToolItem*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_gtk_reserved1" introspectable="0">
        <callback name="_gtk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved2" introspectable="0">
        <callback name="_gtk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved3" introspectable="0">
        <callback name="_gtk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved4" introspectable="0">
        <callback name="_gtk_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <class name="ToolItemGroup"
           c:symbol-prefix="tool_item_group"
           c:type="GtkToolItemGroup"
           parent="Container"
           glib:type-name="GtkToolItemGroup"
           glib:get-type="gtk_tool_item_group_get_type"
           glib:type-struct="ToolItemGroupClass">
      <doc xml:whitespace="preserve">This should not be accessed directly. Use the accessor functions below.</doc>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Buildable"/>
      <implements name="SizeRequest"/>
      <implements name="ToolShell"/>
      <constructor name="new"
                   c:identifier="gtk_tool_item_group_new"
                   version="2.20">
        <doc xml:whitespace="preserve">Creates a new tool item group with label @label.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a new #GtkToolItemGroup.</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="label" transfer-ownership="none">
            <doc xml:whitespace="preserve">the label of the new group</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_collapsed"
              c:identifier="gtk_tool_item_group_get_collapsed"
              version="2.20">
        <doc xml:whitespace="preserve">Gets whether @group is collapsed or expanded.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if @group is collapsed, %FALSE if it is expanded</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_drop_item"
              c:identifier="gtk_tool_item_group_get_drop_item"
              version="2.20">
        <doc xml:whitespace="preserve">Gets the tool item at position (x, y).</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the #GtkToolItem at position (x, y)</doc>
          <type name="ToolItem" c:type="GtkToolItem*"/>
        </return-value>
        <parameters>
          <parameter name="x" transfer-ownership="none">
            <doc xml:whitespace="preserve">the x position</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:whitespace="preserve">the y position</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_ellipsize"
              c:identifier="gtk_tool_item_group_get_ellipsize"
              version="2.20">
        <doc xml:whitespace="preserve">Gets the ellipsization mode of @group.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the #PangoEllipsizeMode of @group</doc>
          <type name="Pango.EllipsizeMode" c:type="PangoEllipsizeMode"/>
        </return-value>
      </method>
      <method name="get_header_relief"
              c:identifier="gtk_tool_item_group_get_header_relief"
              version="2.20">
        <doc xml:whitespace="preserve">Gets the relief mode of the header button of @group.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the #GtkReliefStyle</doc>
          <type name="ReliefStyle" c:type="GtkReliefStyle"/>
        </return-value>
      </method>
      <method name="get_item_position"
              c:identifier="gtk_tool_item_group_get_item_position"
              version="2.20">
        <doc xml:whitespace="preserve">Gets the position of @item in @group as index.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the index of @item in @group or -1 if @item is no child of @group</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <parameter name="item" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkToolItem</doc>
            <type name="ToolItem" c:type="GtkToolItem*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_label"
              c:identifier="gtk_tool_item_group_get_label"
              version="2.20">
        <doc xml:whitespace="preserve">Gets the label of @group.
and must not be modified. Note that %NULL is returned if a custom
label has been set with gtk_tool_item_group_set_label_widget()</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the label of @group. The label is an internal string of @group</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_label_widget"
              c:identifier="gtk_tool_item_group_get_label_widget"
              version="2.20">
        <doc xml:whitespace="preserve">Gets the label widget of @group.
See gtk_tool_item_group_set_label_widget().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the label widget of @group</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
      </method>
      <method name="get_n_items"
              c:identifier="gtk_tool_item_group_get_n_items"
              version="2.20">
        <doc xml:whitespace="preserve">Gets the number of tool items in @group.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the number of tool items in @group</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
      </method>
      <method name="get_nth_item"
              c:identifier="gtk_tool_item_group_get_nth_item"
              version="2.20">
        <doc xml:whitespace="preserve">Gets the tool item at @index in group.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the #GtkToolItem at index</doc>
          <type name="ToolItem" c:type="GtkToolItem*"/>
        </return-value>
        <parameters>
          <parameter name="index" transfer-ownership="none">
            <doc xml:whitespace="preserve">the index</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="insert"
              c:identifier="gtk_tool_item_group_insert"
              version="2.20">
        <doc xml:whitespace="preserve">Inserts @item at @position in the list of children of @group.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="item" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GtkToolItem to insert into @group</doc>
            <type name="ToolItem" c:type="GtkToolItem*"/>
          </parameter>
          <parameter name="position" transfer-ownership="none">
            <doc xml:whitespace="preserve">the position of @item in @group, starting with 0. The position -1 means end of list.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_collapsed"
              c:identifier="gtk_tool_item_group_set_collapsed"
              version="2.20">
        <doc xml:whitespace="preserve">Sets whether the @group should be collapsed or expanded.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="collapsed" transfer-ownership="none">
            <doc xml:whitespace="preserve">whether the @group should be collapsed or expanded</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_ellipsize"
              c:identifier="gtk_tool_item_group_set_ellipsize"
              version="2.20">
        <doc xml:whitespace="preserve">Sets the ellipsization mode which should be used by labels in @group.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="ellipsize" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #PangoEllipsizeMode labels in @group should use</doc>
            <type name="Pango.EllipsizeMode" c:type="PangoEllipsizeMode"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_header_relief"
              c:identifier="gtk_tool_item_group_set_header_relief"
              version="2.20">
        <doc xml:whitespace="preserve">Set the button relief of the group header.
See gtk_button_set_relief() for details.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="style" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GtkReliefStyle</doc>
            <type name="ReliefStyle" c:type="GtkReliefStyle"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_item_position"
              c:identifier="gtk_tool_item_group_set_item_position"
              version="2.20">
        <doc xml:whitespace="preserve">Sets the position of @item in the list of children of @group.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="item" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GtkToolItem to move to a new position, should be a child of @group.</doc>
            <type name="ToolItem" c:type="GtkToolItem*"/>
          </parameter>
          <parameter name="position" transfer-ownership="none">
            <doc xml:whitespace="preserve">the new position of @item in @group, starting with 0. The position -1 means end of list.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_label"
              c:identifier="gtk_tool_item_group_set_label"
              version="2.20">
        <doc xml:whitespace="preserve">Sets the label of the tool item group. The label is displayed in the header
of the group.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="label" transfer-ownership="none">
            <doc xml:whitespace="preserve">the new human-readable label of of the group</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_label_widget"
              c:identifier="gtk_tool_item_group_set_label_widget"
              version="2.20">
        <doc xml:whitespace="preserve">Sets the label of the tool item group.
The label widget is displayed in the header of the group, in place
of the usual label.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="label_widget" transfer-ownership="none">
            <doc xml:whitespace="preserve">the widget to be displayed in place of the usual label</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <property name="collapsed" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="ellipsize" writable="1" transfer-ownership="none">
        <type name="Pango.EllipsizeMode"/>
      </property>
      <property name="header-relief" writable="1" transfer-ownership="none">
        <type name="ReliefStyle"/>
      </property>
      <property name="label" writable="1" transfer-ownership="none">
        <type name="utf8"/>
      </property>
      <property name="label-widget" writable="1" transfer-ownership="none">
        <type name="Widget"/>
      </property>
      <field name="parent_instance">
        <type name="Container" c:type="GtkContainer"/>
      </field>
      <field name="priv">
        <type name="ToolItemGroupPrivate" c:type="GtkToolItemGroupPrivate*"/>
      </field>
    </class>
    <record name="ToolItemGroupClass"
            c:type="GtkToolItemGroupClass"
            glib:is-gtype-struct-for="ToolItemGroup">
      <field name="parent_class">
        <type name="ContainerClass" c:type="GtkContainerClass"/>
      </field>
    </record>
    <record name="ToolItemGroupPrivate"
            c:type="GtkToolItemGroupPrivate"
            disguised="1">
    </record>
    <record name="ToolItemPrivate" c:type="GtkToolItemPrivate" disguised="1">
    </record>
    <class name="ToolPalette"
           c:symbol-prefix="tool_palette"
           c:type="GtkToolPalette"
           parent="Container"
           glib:type-name="GtkToolPalette"
           glib:get-type="gtk_tool_palette_get_type"
           glib:type-struct="ToolPaletteClass">
      <doc xml:whitespace="preserve">This should not be accessed directly. Use the accessor functions below.</doc>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Buildable"/>
      <implements name="Orientable"/>
      <implements name="SizeRequest"/>
      <constructor name="new"
                   c:identifier="gtk_tool_palette_new"
                   version="2.20">
        <doc xml:whitespace="preserve">Creates a new tool palette.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a new #GtkToolPalette</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <function name="get_drag_target_group"
                c:identifier="gtk_tool_palette_get_drag_target_group"
                version="2.20">
        <doc xml:whitespace="preserve">Get the target entry for a dragged #GtkToolItemGroup.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the #GtkTargetEntry for a dragged group</doc>
          <type name="TargetEntry" c:type="GtkTargetEntry*"/>
        </return-value>
      </function>
      <function name="get_drag_target_item"
                c:identifier="gtk_tool_palette_get_drag_target_item"
                version="2.20">
        <doc xml:whitespace="preserve">Gets the target entry for a dragged #GtkToolItem.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the #GtkTargetEntry for a dragged item.</doc>
          <type name="TargetEntry" c:type="GtkTargetEntry*"/>
        </return-value>
      </function>
      <method name="add_drag_dest"
              c:identifier="gtk_tool_palette_add_drag_dest"
              version="2.20">
        <doc xml:whitespace="preserve">Sets @palette as drag source (see gtk_tool_palette_set_drag_source())
and sets @widget as a drag destination for drags from @palette.
See gtk_drag_dest_set().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="widget" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkWidget which should be a drag destination for @palette</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:whitespace="preserve">the flags that specify what actions GTK+ should take for drops on that widget</doc>
            <type name="DestDefaults" c:type="GtkDestDefaults"/>
          </parameter>
          <parameter name="targets" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GtkToolPaletteDragTarget&lt;!-- --&gt;s which the widget should support</doc>
            <type name="ToolPaletteDragTargets"
                  c:type="GtkToolPaletteDragTargets"/>
          </parameter>
          <parameter name="actions" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GdkDragAction&lt;!-- --&gt;s which the widget should suppport</doc>
            <type name="Gdk.DragAction" c:type="GdkDragAction"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_drag_item"
              c:identifier="gtk_tool_palette_get_drag_item"
              version="2.20">
        <doc xml:whitespace="preserve">Get the dragged item from the selection.
This could be a #GtkToolItem or a #GtkToolItemGroup.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the dragged item in selection</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="selection" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkSelectionData</doc>
            <type name="SelectionData" c:type="GtkSelectionData*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_drop_group"
              c:identifier="gtk_tool_palette_get_drop_group"
              version="2.20">
        <doc xml:whitespace="preserve">Gets the group at position (x, y).
if there is no such group</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the #GtkToolItemGroup at position or %NULL</doc>
          <type name="ToolItemGroup" c:type="GtkToolItemGroup*"/>
        </return-value>
        <parameters>
          <parameter name="x" transfer-ownership="none">
            <doc xml:whitespace="preserve">the x position</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:whitespace="preserve">the y position</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_drop_item"
              c:identifier="gtk_tool_palette_get_drop_item"
              version="2.20">
        <doc xml:whitespace="preserve">Gets the item at position (x, y).
See gtk_tool_palette_get_drop_group().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the #GtkToolItem at position or %NULL if there is no such item</doc>
          <type name="ToolItem" c:type="GtkToolItem*"/>
        </return-value>
        <parameters>
          <parameter name="x" transfer-ownership="none">
            <doc xml:whitespace="preserve">the x position</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:whitespace="preserve">the y position</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_exclusive"
              c:identifier="gtk_tool_palette_get_exclusive"
              version="2.20">
        <doc xml:whitespace="preserve">Gets whether @group is exclusive or not.
See gtk_tool_palette_set_exclusive().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if @group is exclusive</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="group" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkToolItemGroup which is a child of palette</doc>
            <type name="ToolItemGroup" c:type="GtkToolItemGroup*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_expand"
              c:identifier="gtk_tool_palette_get_expand"
              version="2.20">
        <doc xml:whitespace="preserve">Gets whether group should be given extra space.
See gtk_tool_palette_set_expand().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if group should be given extra space, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="group" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkToolItemGroup which is a child of palette</doc>
            <type name="ToolItemGroup" c:type="GtkToolItemGroup*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_group_position"
              c:identifier="gtk_tool_palette_get_group_position"
              version="2.20">
        <doc xml:whitespace="preserve">Gets the position of @group in @palette as index.
See gtk_tool_palette_set_group_position().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the index of group or -1 if @group is not a child of @palette</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <parameter name="group" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkToolItemGroup</doc>
            <type name="ToolItemGroup" c:type="GtkToolItemGroup*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_hadjustment"
              c:identifier="gtk_tool_palette_get_hadjustment"
              version="2.20">
        <doc xml:whitespace="preserve">Gets the horizontal adjustment of the tool palette.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the horizontal adjustment of @palette</doc>
          <type name="Adjustment" c:type="GtkAdjustment*"/>
        </return-value>
      </method>
      <method name="get_icon_size"
              c:identifier="gtk_tool_palette_get_icon_size"
              version="2.20">
        <doc xml:whitespace="preserve">Gets the size of icons in the tool palette.
See gtk_tool_palette_set_icon_size().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the #GtkIconSize of icons in the tool palette</doc>
          <type name="gint"/>
        </return-value>
      </method>
      <method name="get_style"
              c:identifier="gtk_tool_palette_get_style"
              version="2.20">
        <doc xml:whitespace="preserve">Gets the style (icons, text or both) of items in the tool palette.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the #GtkToolbarStyle of items in the tool palette.</doc>
          <type name="ToolbarStyle" c:type="GtkToolbarStyle"/>
        </return-value>
      </method>
      <method name="get_vadjustment"
              c:identifier="gtk_tool_palette_get_vadjustment"
              version="2.20">
        <doc xml:whitespace="preserve">Gets the vertical adjustment of the tool palette.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the vertical adjustment of @palette</doc>
          <type name="Adjustment" c:type="GtkAdjustment*"/>
        </return-value>
      </method>
      <method name="set_drag_source"
              c:identifier="gtk_tool_palette_set_drag_source"
              version="2.20">
        <doc xml:whitespace="preserve">Sets the tool palette as a drag source.
Enables all groups and items in the tool palette as drag sources
on button 1 and button 3 press with copy and move actions.
See gtk_drag_source_set().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="targets" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GtkToolPaletteDragTarget&lt;!-- --&gt;s which the widget should support</doc>
            <type name="ToolPaletteDragTargets"
                  c:type="GtkToolPaletteDragTargets"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_exclusive"
              c:identifier="gtk_tool_palette_set_exclusive"
              version="2.20">
        <doc xml:whitespace="preserve">Sets whether the group should be exclusive or not.
If an exclusive group is expanded all other groups are collapsed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="group" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkToolItemGroup which is a child of palette</doc>
            <type name="ToolItemGroup" c:type="GtkToolItemGroup*"/>
          </parameter>
          <parameter name="exclusive" transfer-ownership="none">
            <doc xml:whitespace="preserve">whether the group should be exclusive or not</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_expand"
              c:identifier="gtk_tool_palette_set_expand"
              version="2.20">
        <doc xml:whitespace="preserve">Sets whether the group should be given extra space.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="group" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkToolItemGroup which is a child of palette</doc>
            <type name="ToolItemGroup" c:type="GtkToolItemGroup*"/>
          </parameter>
          <parameter name="expand" transfer-ownership="none">
            <doc xml:whitespace="preserve">whether the group should be given extra space</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_group_position"
              c:identifier="gtk_tool_palette_set_group_position"
              version="2.20">
        <doc xml:whitespace="preserve">Sets the position of the group as an index of the tool palette.
If position is 0 the group will become the first child, if position is
-1 it will become the last child.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="group" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkToolItemGroup which is a child of palette</doc>
            <type name="ToolItemGroup" c:type="GtkToolItemGroup*"/>
          </parameter>
          <parameter name="position" transfer-ownership="none">
            <doc xml:whitespace="preserve">a new index for group</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_icon_size"
              c:identifier="gtk_tool_palette_set_icon_size"
              version="2.20">
        <doc xml:whitespace="preserve">Sets the size of icons in the tool palette.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="icon_size" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GtkIconSize that icons in the tool palette shall have</doc>
            <type name="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_style"
              c:identifier="gtk_tool_palette_set_style"
              version="2.20">
        <doc xml:whitespace="preserve">Sets the style (text, icons or both) of items in the tool palette.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="style" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GtkToolbarStyle that items in the tool palette shall have</doc>
            <type name="ToolbarStyle" c:type="GtkToolbarStyle"/>
          </parameter>
        </parameters>
      </method>
      <method name="unset_icon_size"
              c:identifier="gtk_tool_palette_unset_icon_size"
              version="2.20">
        <doc xml:whitespace="preserve">Unsets the tool palette icon size set with gtk_tool_palette_set_icon_size(),
so that user preferences will be used to determine the icon size.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="unset_style"
              c:identifier="gtk_tool_palette_unset_style"
              version="2.20">
        <doc xml:whitespace="preserve">Unsets a toolbar style set with gtk_tool_palette_set_style(),
so that user preferences will be used to determine the toolbar style.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <property name="icon-size"
                version="2.20"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The size of the icons in a tool palette is normally determined by
the #GtkSettings:toolbar-icon-size setting. When this property is set,
it overrides the setting.
This should only be used for special-purpose tool palettes, normal
application tool palettes should respect the user preferences for the
size of icons.</doc>
        <type name="IconSize"/>
      </property>
      <property name="icon-size-set"
                version="2.20"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Is %TRUE if the #GtkToolPalette:icon-size property has been set.</doc>
        <type name="gboolean"/>
      </property>
      <property name="toolbar-style"
                version="2.20"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The style of items in the tool palette.</doc>
        <type name="ToolbarStyle"/>
      </property>
      <field name="parent_instance">
        <type name="Container" c:type="GtkContainer"/>
      </field>
      <field name="priv">
        <type name="ToolPalettePrivate" c:type="GtkToolPalettePrivate*"/>
      </field>
      <glib:signal name="set-scroll-adjustments" version="2.20">
        <doc xml:whitespace="preserve">Set the scroll adjustments for the viewport.
Usually scrolled containers like GtkScrolledWindow will emit this
signal to connect two instances of GtkScrollbar to the scroll
directions of the GtkToolpalette.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">The horizontal adjustment</doc>
            <type name="Adjustment"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <doc xml:whitespace="preserve">The vertical adjustment</doc>
            <type name="Adjustment"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="ToolPaletteClass"
            c:type="GtkToolPaletteClass"
            glib:is-gtype-struct-for="ToolPalette">
      <field name="parent_class">
        <type name="ContainerClass" c:type="GtkContainerClass"/>
      </field>
      <field name="set_scroll_adjustments">
        <callback name="set_scroll_adjustments">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="widget" transfer-ownership="none">
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
            <parameter name="hadjustment" transfer-ownership="none">
              <type name="Adjustment" c:type="GtkAdjustment*"/>
            </parameter>
            <parameter name="vadjustment" transfer-ownership="none">
              <type name="Adjustment" c:type="GtkAdjustment*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_gtk_reserved1" introspectable="0">
        <callback name="_gtk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved2" introspectable="0">
        <callback name="_gtk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved3" introspectable="0">
        <callback name="_gtk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved4" introspectable="0">
        <callback name="_gtk_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved5" introspectable="0">
        <callback name="_gtk_reserved5">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved6" introspectable="0">
        <callback name="_gtk_reserved6">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <bitfield name="ToolPaletteDragTargets"
              glib:type-name="GtkToolPaletteDragTargets"
              glib:get-type="gtk_tool_palette_drag_targets_get_type"
              c:type="GtkToolPaletteDragTargets">
      <doc xml:whitespace="preserve">Flags used to specify the supported drag targets.</doc>
      <member name="items"
              value="1"
              c:identifier="GTK_TOOL_PALETTE_DRAG_ITEMS"
              glib:nick="items"/>
      <member name="groups"
              value="2"
              c:identifier="GTK_TOOL_PALETTE_DRAG_GROUPS"
              glib:nick="groups"/>
    </bitfield>
    <record name="ToolPalettePrivate"
            c:type="GtkToolPalettePrivate"
            disguised="1">
    </record>
    <interface name="ToolShell"
               c:symbol-prefix="tool_shell"
               c:type="GtkToolShell"
               glib:type-name="GtkToolShell"
               glib:get-type="gtk_tool_shell_get_type"
               glib:type-struct="ToolShellIface">
      <doc xml:whitespace="preserve">Dummy structure for accessing instances of #GtkToolShellIface.</doc>
      <prerequisite name="Widget"/>
      <virtual-method name="get_ellipsize_mode" invoker="get_ellipsize_mode">
        <return-value transfer-ownership="none">
          <type name="Pango.EllipsizeMode" c:type="PangoEllipsizeMode"/>
        </return-value>
      </virtual-method>
      <virtual-method name="get_icon_size">
        <return-value transfer-ownership="none">
          <type name="IconSize" c:type="GtkIconSize"/>
        </return-value>
      </virtual-method>
      <virtual-method name="get_orientation"
                      invoker="get_orientation"
                      version="2.14">
        <doc xml:whitespace="preserve">Retrieves the current orientation for the tool shell. Tool items must not
call this function directly, but rely on gtk_tool_item_get_orientation()
instead.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the current orientation of @shell</doc>
          <type name="Orientation" c:type="GtkOrientation"/>
        </return-value>
      </virtual-method>
      <virtual-method name="get_relief_style"
                      invoker="get_relief_style"
                      version="2.14">
        <doc xml:whitespace="preserve">Returns the relief style of buttons on @shell. Tool items must not call this
function directly, but rely on gtk_tool_item_get_relief_style() instead.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The relief style of buttons on @shell.</doc>
          <type name="ReliefStyle" c:type="GtkReliefStyle"/>
        </return-value>
      </virtual-method>
      <virtual-method name="get_style" invoker="get_style" version="2.14">
        <doc xml:whitespace="preserve">Retrieves whether the tool shell has text, icons, or both. Tool items must
not call this function directly, but rely on gtk_tool_item_get_style()
instead.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the current style of @shell</doc>
          <type name="ToolbarStyle" c:type="GtkToolbarStyle"/>
        </return-value>
      </virtual-method>
      <virtual-method name="get_text_alignment"
                      invoker="get_text_alignment"
                      version="2.20">
        <doc xml:whitespace="preserve">Retrieves the current text alignment for the tool shell. Tool items must not
call this function directly, but rely on gtk_tool_item_get_text_alignment()
instead.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the current text alignment of @shell</doc>
          <type name="gfloat" c:type="gfloat"/>
        </return-value>
      </virtual-method>
      <virtual-method name="get_text_orientation"
                      invoker="get_text_orientation"
                      version="2.20">
        <doc xml:whitespace="preserve">Retrieves the current text orientation for the tool shell. Tool items must not
call this function directly, but rely on gtk_tool_item_get_text_orientation()
instead.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the current text orientation of @shell</doc>
          <type name="Orientation" c:type="GtkOrientation"/>
        </return-value>
      </virtual-method>
      <virtual-method name="get_text_size_group"
                      invoker="get_text_size_group"
                      version="2.20">
        <doc xml:whitespace="preserve">Retrieves the current text size group for the tool shell. Tool items must not
call this function directly, but rely on gtk_tool_item_get_text_size_group()
instead.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the current text size group of @shell</doc>
          <type name="SizeGroup" c:type="GtkSizeGroup*"/>
        </return-value>
      </virtual-method>
      <virtual-method name="rebuild_menu"
                      invoker="rebuild_menu"
                      version="2.14">
        <doc xml:whitespace="preserve">Calling this function signals the tool shell that the overflow menu item for
tool items have changed. If there is an overflow menu and if it is visible
when this function it called, the menu will be rebuilt.
Tool items must not call this function directly, but rely on
gtk_tool_item_rebuild_menu() instead.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </virtual-method>
      <method name="get_ellipsize_mode"
              c:identifier="gtk_tool_shell_get_ellipsize_mode">
        <return-value transfer-ownership="none">
          <type name="Pango.EllipsizeMode" c:type="PangoEllipsizeMode"/>
        </return-value>
      </method>
      <method name="get_icon_size"
              c:identifier="gtk_tool_shell_get_icon_size"
              version="2.14">
        <doc xml:whitespace="preserve">Retrieves the icon size for the tool shell. Tool items must not call this
function directly, but rely on gtk_tool_item_get_icon_size() instead.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the current size for icons of @shell</doc>
          <type name="gint"/>
        </return-value>
      </method>
      <method name="get_orientation"
              c:identifier="gtk_tool_shell_get_orientation"
              version="2.14">
        <doc xml:whitespace="preserve">Retrieves the current orientation for the tool shell. Tool items must not
call this function directly, but rely on gtk_tool_item_get_orientation()
instead.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the current orientation of @shell</doc>
          <type name="Orientation" c:type="GtkOrientation"/>
        </return-value>
      </method>
      <method name="get_relief_style"
              c:identifier="gtk_tool_shell_get_relief_style"
              version="2.14">
        <doc xml:whitespace="preserve">Returns the relief style of buttons on @shell. Tool items must not call this
function directly, but rely on gtk_tool_item_get_relief_style() instead.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The relief style of buttons on @shell.</doc>
          <type name="ReliefStyle" c:type="GtkReliefStyle"/>
        </return-value>
      </method>
      <method name="get_style"
              c:identifier="gtk_tool_shell_get_style"
              version="2.14">
        <doc xml:whitespace="preserve">Retrieves whether the tool shell has text, icons, or both. Tool items must
not call this function directly, but rely on gtk_tool_item_get_style()
instead.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the current style of @shell</doc>
          <type name="ToolbarStyle" c:type="GtkToolbarStyle"/>
        </return-value>
      </method>
      <method name="get_text_alignment"
              c:identifier="gtk_tool_shell_get_text_alignment"
              version="2.20">
        <doc xml:whitespace="preserve">Retrieves the current text alignment for the tool shell. Tool items must not
call this function directly, but rely on gtk_tool_item_get_text_alignment()
instead.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the current text alignment of @shell</doc>
          <type name="gfloat" c:type="gfloat"/>
        </return-value>
      </method>
      <method name="get_text_orientation"
              c:identifier="gtk_tool_shell_get_text_orientation"
              version="2.20">
        <doc xml:whitespace="preserve">Retrieves the current text orientation for the tool shell. Tool items must not
call this function directly, but rely on gtk_tool_item_get_text_orientation()
instead.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the current text orientation of @shell</doc>
          <type name="Orientation" c:type="GtkOrientation"/>
        </return-value>
      </method>
      <method name="get_text_size_group"
              c:identifier="gtk_tool_shell_get_text_size_group"
              version="2.20">
        <doc xml:whitespace="preserve">Retrieves the current text size group for the tool shell. Tool items must not
call this function directly, but rely on gtk_tool_item_get_text_size_group()
instead.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the current text size group of @shell</doc>
          <type name="SizeGroup" c:type="GtkSizeGroup*"/>
        </return-value>
      </method>
      <method name="rebuild_menu"
              c:identifier="gtk_tool_shell_rebuild_menu"
              version="2.14">
        <doc xml:whitespace="preserve">Calling this function signals the tool shell that the overflow menu item for
tool items have changed. If there is an overflow menu and if it is visible
when this function it called, the menu will be rebuilt.
Tool items must not call this function directly, but rely on
gtk_tool_item_rebuild_menu() instead.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
    </interface>
    <record name="ToolShellIface"
            c:type="GtkToolShellIface"
            glib:is-gtype-struct-for="ToolShell">
      <doc xml:whitespace="preserve">Virtual function table for the #GtkToolShell interface.</doc>
      <field name="g_iface">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="get_icon_size">
        <callback name="get_icon_size">
          <return-value transfer-ownership="none">
            <type name="IconSize" c:type="GtkIconSize"/>
          </return-value>
          <parameters>
            <parameter name="shell" transfer-ownership="none">
              <type name="ToolShell" c:type="GtkToolShell*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_orientation">
        <callback name="get_orientation">
          <return-value transfer-ownership="none">
            <doc xml:whitespace="preserve">the current orientation of @shell</doc>
            <type name="Orientation" c:type="GtkOrientation"/>
          </return-value>
          <parameters>
            <parameter name="shell" transfer-ownership="none">
              <type name="ToolShell" c:type="GtkToolShell*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_style">
        <callback name="get_style">
          <return-value transfer-ownership="none">
            <doc xml:whitespace="preserve">the current style of @shell</doc>
            <type name="ToolbarStyle" c:type="GtkToolbarStyle"/>
          </return-value>
          <parameters>
            <parameter name="shell" transfer-ownership="none">
              <type name="ToolShell" c:type="GtkToolShell*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_relief_style">
        <callback name="get_relief_style">
          <return-value transfer-ownership="none">
            <doc xml:whitespace="preserve">The relief style of buttons on @shell.</doc>
            <type name="ReliefStyle" c:type="GtkReliefStyle"/>
          </return-value>
          <parameters>
            <parameter name="shell" transfer-ownership="none">
              <type name="ToolShell" c:type="GtkToolShell*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="rebuild_menu">
        <callback name="rebuild_menu">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="shell" transfer-ownership="none">
              <type name="ToolShell" c:type="GtkToolShell*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_text_orientation">
        <callback name="get_text_orientation">
          <return-value transfer-ownership="none">
            <doc xml:whitespace="preserve">the current text orientation of @shell</doc>
            <type name="Orientation" c:type="GtkOrientation"/>
          </return-value>
          <parameters>
            <parameter name="shell" transfer-ownership="none">
              <type name="ToolShell" c:type="GtkToolShell*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_text_alignment">
        <callback name="get_text_alignment">
          <return-value transfer-ownership="none">
            <doc xml:whitespace="preserve">the current text alignment of @shell</doc>
            <type name="gfloat" c:type="gfloat"/>
          </return-value>
          <parameters>
            <parameter name="shell" transfer-ownership="none">
              <type name="ToolShell" c:type="GtkToolShell*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_ellipsize_mode">
        <callback name="get_ellipsize_mode">
          <return-value transfer-ownership="none">
            <type name="Pango.EllipsizeMode" c:type="PangoEllipsizeMode"/>
          </return-value>
          <parameters>
            <parameter name="shell" transfer-ownership="none">
              <type name="ToolShell" c:type="GtkToolShell*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_text_size_group">
        <callback name="get_text_size_group">
          <return-value transfer-ownership="none">
            <doc xml:whitespace="preserve">the current text size group of @shell</doc>
            <type name="SizeGroup" c:type="GtkSizeGroup*"/>
          </return-value>
          <parameters>
            <parameter name="shell" transfer-ownership="none">
              <type name="ToolShell" c:type="GtkToolShell*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="Toolbar"
           c:symbol-prefix="toolbar"
           c:type="GtkToolbar"
           parent="Container"
           glib:type-name="GtkToolbar"
           glib:get-type="gtk_toolbar_get_type"
           glib:type-struct="ToolbarClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Buildable"/>
      <implements name="Orientable"/>
      <implements name="SizeRequest"/>
      <implements name="ToolShell"/>
      <constructor name="new" c:identifier="gtk_toolbar_new">
        <doc xml:whitespace="preserve">Creates a new toolbar.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the newly-created toolbar.</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="get_drop_index"
              c:identifier="gtk_toolbar_get_drop_index"
              version="2.4">
        <doc xml:whitespace="preserve">Returns the position corresponding to the indicated point on
this function returns the position a new item should be
inserted.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The position corresponding to the point (@x, @y) on the toolbar.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <parameter name="x" transfer-ownership="none">
            <doc xml:whitespace="preserve">x coordinate of a point on the toolbar</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:whitespace="preserve">y coordinate of a point on the toolbar</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_icon_size" c:identifier="gtk_toolbar_get_icon_size">
        <doc xml:whitespace="preserve">Retrieves the icon size for the toolbar. See gtk_toolbar_set_icon_size().
the toolbar.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the current icon size for the icons on</doc>
          <type name="gint"/>
        </return-value>
      </method>
      <method name="get_item_index"
              c:identifier="gtk_toolbar_get_item_index"
              version="2.4">
        <doc xml:whitespace="preserve">Returns the position of @item on the toolbar, starting from 0.
It is an error if @item is not a child of the toolbar.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the position of item on the toolbar.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <parameter name="item" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkToolItem that is a child of @toolbar</doc>
            <type name="ToolItem" c:type="GtkToolItem*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_n_items"
              c:identifier="gtk_toolbar_get_n_items"
              version="2.4">
        <doc xml:whitespace="preserve">Returns the number of items on the toolbar.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the number of items on the toolbar</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="get_nth_item"
              c:identifier="gtk_toolbar_get_nth_item"
              version="2.4">
        <doc xml:whitespace="preserve">Returns the @n&lt;!-- --&gt;'th item on @toolbar, or %NULL if the
toolbar does not contain an @n&lt;!-- --&gt;'th item.
or %NULL if there isn't an @n&lt;!-- --&gt;'th item.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The @n&lt;!-- --&gt;'th #GtkToolItem on @toolbar,</doc>
          <type name="ToolItem" c:type="GtkToolItem*"/>
        </return-value>
        <parameters>
          <parameter name="n" transfer-ownership="none">
            <doc xml:whitespace="preserve">A position on the toolbar</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_relief_style"
              c:identifier="gtk_toolbar_get_relief_style"
              version="2.4">
        <doc xml:whitespace="preserve">Returns the relief style of buttons on @toolbar. See
gtk_button_set_relief().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The relief style of buttons on @toolbar.</doc>
          <type name="ReliefStyle" c:type="GtkReliefStyle"/>
        </return-value>
      </method>
      <method name="get_show_arrow"
              c:identifier="gtk_toolbar_get_show_arrow"
              version="2.4">
        <doc xml:whitespace="preserve">Returns whether the toolbar has an overflow menu.
See gtk_toolbar_set_show_arrow().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the toolbar has an overflow menu.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_style" c:identifier="gtk_toolbar_get_style">
        <doc xml:whitespace="preserve">Retrieves whether the toolbar has text, icons, or both . See
gtk_toolbar_set_style().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the current style of @toolbar</doc>
          <type name="ToolbarStyle" c:type="GtkToolbarStyle"/>
        </return-value>
      </method>
      <method name="insert" c:identifier="gtk_toolbar_insert" version="2.4">
        <doc xml:whitespace="preserve">Insert a #GtkToolItem into the toolbar at position @pos. If @pos is
0 the item is prepended to the start of the toolbar. If @pos is
negative, the item is appended to the end of the toolbar.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="item" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkToolItem</doc>
            <type name="ToolItem" c:type="GtkToolItem*"/>
          </parameter>
          <parameter name="pos" transfer-ownership="none">
            <doc xml:whitespace="preserve">the position of the new item</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_drop_highlight_item"
              c:identifier="gtk_toolbar_set_drop_highlight_item"
              version="2.4">
        <doc xml:whitespace="preserve">Highlights @toolbar to give an idea of what it would look like
if @item was added to @toolbar at the position indicated by @index_.
If @item is %NULL, highlighting is turned off. In that case @index_ 
is ignored.
The @tool_item passed to this function must not be part of any widget
hierarchy. When an item is set as drop highlight item it can not
added to any widget hierarchy or used as highlight item for another
toolbar.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="tool_item" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">a #GtkToolItem, or %NULL to turn of highlighting</doc>
            <type name="ToolItem" c:type="GtkToolItem*"/>
          </parameter>
          <parameter name="index_" transfer-ownership="none">
            <doc xml:whitespace="preserve">a position on @toolbar</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_icon_size" c:identifier="gtk_toolbar_set_icon_size">
        <doc xml:whitespace="preserve">This function sets the size of stock icons in the toolbar. You
can call it both before you add the icons and after they've been
added. The size you set will override user preferences for the default
icon size.
This should only be used for special-purpose toolbars, normal
application toolbars should respect the user preferences for the
size of icons.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="icon_size" transfer-ownership="none">
            <doc xml:whitespace="preserve">The #GtkIconSize that stock icons in the toolbar shall have.</doc>
            <type name="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_show_arrow"
              c:identifier="gtk_toolbar_set_show_arrow"
              version="2.4">
        <doc xml:whitespace="preserve">Sets whether to show an overflow menu when
items that there are not room are available through an
overflow menu.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="show_arrow" transfer-ownership="none">
            <doc xml:whitespace="preserve">Whether to show an overflow menu</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_style" c:identifier="gtk_toolbar_set_style">
        <doc xml:whitespace="preserve">Alters the view of @toolbar to display either icons only, text only, or both.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="style" transfer-ownership="none">
            <doc xml:whitespace="preserve">the new style for @toolbar.</doc>
            <type name="ToolbarStyle" c:type="GtkToolbarStyle"/>
          </parameter>
        </parameters>
      </method>
      <method name="unset_icon_size"
              c:identifier="gtk_toolbar_unset_icon_size">
        <doc xml:whitespace="preserve">Unsets toolbar icon size set with gtk_toolbar_set_icon_size(), so that
user preferences will be used to determine the icon size.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="unset_style" c:identifier="gtk_toolbar_unset_style">
        <doc xml:whitespace="preserve">Unsets a toolbar style set with gtk_toolbar_set_style(), so that
user preferences will be used to determine the toolbar style.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <property name="icon-size"
                version="2.10"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The size of the icons in a toolbar is normally determined by
the toolbar-icon-size setting. When this property is set, it 
overrides the setting. 
This should only be used for special-purpose toolbars, normal
application toolbars should respect the user preferences for the
size of icons.</doc>
        <type name="gint"/>
      </property>
      <property name="icon-size-set"
                version="2.10"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Is %TRUE if the icon-size property has been set.</doc>
        <type name="gboolean"/>
      </property>
      <property name="show-arrow" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="toolbar-style" writable="1" transfer-ownership="none">
        <type name="ToolbarStyle"/>
      </property>
      <field name="container">
        <type name="Container" c:type="GtkContainer"/>
      </field>
      <field name="priv">
        <type name="ToolbarPrivate" c:type="GtkToolbarPrivate*"/>
      </field>
      <glib:signal name="focus-home-or-end">
        <doc xml:whitespace="preserve">A keybinding signal used internally by GTK+. This signal can't
be used in application code</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the signal was handled, %FALSE if not</doc>
          <type name="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE if the first item should be focused</doc>
            <type name="gboolean"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="orientation-changed">
        <doc xml:whitespace="preserve">Emitted when the orientation of the toolbar changes.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the new #GtkOrientation of the toolbar</doc>
            <type name="Orientation"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="popup-context-menu">
        <doc xml:whitespace="preserve">Emitted when the user right-clicks the toolbar or uses the
keybinding to display a popup menu.
Application developers should handle this signal if they want
to display a context menu on the toolbar. The context-menu should
appear at the coordinates given by @x and @y. The mouse button
number is given by the @button parameter. If the menu was popped
up using the keybaord, @button is -1.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">return %TRUE if the signal was handled, %FALSE if not</doc>
          <type name="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the x coordinate of the point where the menu should appear</doc>
            <type name="gint"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <doc xml:whitespace="preserve">the y coordinate of the point where the menu should appear</doc>
            <type name="gint"/>
          </parameter>
          <parameter name="p1" transfer-ownership="none">
            <doc xml:whitespace="preserve">the mouse button the user pressed, or -1</doc>
            <type name="gint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="style-changed">
        <doc xml:whitespace="preserve">Emitted when the style of the toolbar changes.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the new #GtkToolbarStyle of the toolbar</doc>
            <type name="ToolbarStyle"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="ToolbarClass"
            c:type="GtkToolbarClass"
            glib:is-gtype-struct-for="Toolbar">
      <field name="parent_class">
        <type name="ContainerClass" c:type="GtkContainerClass"/>
      </field>
      <field name="orientation_changed">
        <callback name="orientation_changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="toolbar" transfer-ownership="none">
              <type name="Toolbar" c:type="GtkToolbar*"/>
            </parameter>
            <parameter name="orientation" transfer-ownership="none">
              <type name="Orientation" c:type="GtkOrientation"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="style_changed">
        <callback name="style_changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="toolbar" transfer-ownership="none">
              <type name="Toolbar" c:type="GtkToolbar*"/>
            </parameter>
            <parameter name="style" transfer-ownership="none">
              <type name="ToolbarStyle" c:type="GtkToolbarStyle"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="popup_context_menu">
        <callback name="popup_context_menu">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="toolbar" transfer-ownership="none">
              <type name="Toolbar" c:type="GtkToolbar*"/>
            </parameter>
            <parameter name="x" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="y" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="button_number" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_gtk_reserved1" introspectable="0">
        <callback name="_gtk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved2" introspectable="0">
        <callback name="_gtk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved3" introspectable="0">
        <callback name="_gtk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="ToolbarPrivate" c:type="GtkToolbarPrivate" disguised="1">
    </record>
    <enumeration name="ToolbarSpaceStyle"
                 glib:type-name="GtkToolbarSpaceStyle"
                 glib:get-type="gtk_toolbar_space_style_get_type"
                 c:type="GtkToolbarSpaceStyle">
      <member name="empty"
              value="0"
              c:identifier="GTK_TOOLBAR_SPACE_EMPTY"
              glib:nick="empty"/>
      <member name="line"
              value="1"
              c:identifier="GTK_TOOLBAR_SPACE_LINE"
              glib:nick="line"/>
    </enumeration>
    <enumeration name="ToolbarStyle"
                 glib:type-name="GtkToolbarStyle"
                 glib:get-type="gtk_toolbar_style_get_type"
                 c:type="GtkToolbarStyle">
      <member name="icons"
              value="0"
              c:identifier="GTK_TOOLBAR_ICONS"
              glib:nick="icons"/>
      <member name="text"
              value="1"
              c:identifier="GTK_TOOLBAR_TEXT"
              glib:nick="text"/>
      <member name="both"
              value="2"
              c:identifier="GTK_TOOLBAR_BOTH"
              glib:nick="both"/>
      <member name="both_horiz"
              value="3"
              c:identifier="GTK_TOOLBAR_BOTH_HORIZ"
              glib:nick="both-horiz"/>
    </enumeration>
    <class name="Tooltip"
           c:symbol-prefix="tooltip"
           c:type="GtkTooltip"
           parent="GObject.Object"
           glib:type-name="GtkTooltip"
           glib:get-type="gtk_tooltip_get_type">
      <function name="trigger_tooltip_query"
                c:identifier="gtk_tooltip_trigger_tooltip_query"
                version="2.12">
        <doc xml:whitespace="preserve">Triggers a new tooltip query on @display, in order to update the current
visible tooltip, or to show/hide the current tooltip.  This function is
useful to call when, for example, the state of the widget changed by a
key press.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="display" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GdkDisplay</doc>
            <type name="Gdk.Display" c:type="GdkDisplay*"/>
          </parameter>
        </parameters>
      </function>
      <method name="set_custom"
              c:identifier="gtk_tooltip_set_custom"
              version="2.12">
        <doc xml:whitespace="preserve">Replaces the widget packed into the tooltip with
away.
By default a box with a #GtkImage and #GtkLabel is embedded in 
the tooltip, which can be configured using gtk_tooltip_set_markup() 
and gtk_tooltip_set_icon().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="custom_widget"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">a #GtkWidget, or %NULL to unset the old custom widget.</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_icon"
              c:identifier="gtk_tooltip_set_icon"
              version="2.12">
        <doc xml:whitespace="preserve">Sets the icon of the tooltip (which is in front of the text) to be</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="pixbuf" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">a #GdkPixbuf, or %NULL</doc>
            <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_icon_from_gicon"
              c:identifier="gtk_tooltip_set_icon_from_gicon"
              version="2.20">
        <doc xml:whitespace="preserve">Sets the icon of the tooltip (which is in front of the text)
to be the icon indicated by @gicon with the size indicated
by @size. If @gicon is %NULL, the image will be hidden.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="gicon" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">a #GIcon representing the icon, or %NULL</doc>
            <type name="Gio.Icon" c:type="GIcon*"/>
          </parameter>
          <parameter name="size" transfer-ownership="none">
            <doc xml:whitespace="preserve">a stock icon size</doc>
            <type name="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_icon_from_icon_name"
              c:identifier="gtk_tooltip_set_icon_from_icon_name"
              version="2.14">
        <doc xml:whitespace="preserve">Sets the icon of the tooltip (which is in front of the text) to be
the icon indicated by @icon_name with the size indicated
by @size.  If @icon_name is %NULL, the image will be hidden.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="icon_name" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">an icon name, or %NULL</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="size" transfer-ownership="none">
            <doc xml:whitespace="preserve">a stock icon size</doc>
            <type name="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_icon_from_stock"
              c:identifier="gtk_tooltip_set_icon_from_stock"
              version="2.12">
        <doc xml:whitespace="preserve">Sets the icon of the tooltip (which is in front of the text) to be
the stock item indicated by @stock_id with the size indicated
by @size.  If @stock_id is %NULL, the image will be hidden.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="stock_id" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">a stock id, or %NULL</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="size" transfer-ownership="none">
            <doc xml:whitespace="preserve">a stock icon size</doc>
            <type name="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_markup"
              c:identifier="gtk_tooltip_set_markup"
              version="2.12">
        <doc xml:whitespace="preserve">Sets the text of the tooltip to be @markup, which is marked up
with the &lt;link
linkend="PangoMarkupFormat"&gt;Pango text markup language&lt;/link&gt;.
If @markup is %NULL, the label will be hidden.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="markup" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">a markup string (see &lt;link linkend="PangoMarkupFormat"&gt;Pango markup format&lt;/link&gt;) or %NULL</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_text"
              c:identifier="gtk_tooltip_set_text"
              version="2.12">
        <doc xml:whitespace="preserve">Sets the text of the tooltip to be @text. If @text is %NULL, the label
will be hidden. See also gtk_tooltip_set_markup().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="text" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">a text string or %NULL</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_tip_area"
              c:identifier="gtk_tooltip_set_tip_area"
              version="2.12">
        <doc xml:whitespace="preserve">Sets the area of the widget, where the contents of this tooltip apply,
to be @rect (in widget coordinates).  This is especially useful for
properly setting tooltips on #GtkTreeView rows and cells, #GtkIconViews,
etc.
For setting tooltips on #GtkTreeView, please refer to the convenience
gtk_tree_view_set_tooltip_cell().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="rect" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GdkRectangle</doc>
            <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
          </parameter>
        </parameters>
      </method>
    </class>
    <callback name="TranslateFunc" c:type="GtkTranslateFunc">
      <return-value transfer-ownership="full">
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="path" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="func_data" transfer-ownership="none">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="TreeCellDataFunc" c:type="GtkTreeCellDataFunc">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="tree_column" transfer-ownership="none">
          <type name="TreeViewColumn" c:type="GtkTreeViewColumn*"/>
        </parameter>
        <parameter name="cell" transfer-ownership="none">
          <type name="CellRenderer" c:type="GtkCellRenderer*"/>
        </parameter>
        <parameter name="tree_model" transfer-ownership="none">
          <type name="TreeModel" c:type="GtkTreeModel*"/>
        </parameter>
        <parameter name="iter" transfer-ownership="none">
          <type name="TreeIter" c:type="GtkTreeIter*"/>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="TreeDestroyCountFunc" c:type="GtkTreeDestroyCountFunc">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="tree_view" transfer-ownership="none">
          <type name="TreeView" c:type="GtkTreeView*"/>
        </parameter>
        <parameter name="path" transfer-ownership="none">
          <type name="TreePath" c:type="GtkTreePath*"/>
        </parameter>
        <parameter name="children" transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="user_data" transfer-ownership="none" closure="3">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <interface name="TreeDragDest"
               c:symbol-prefix="tree_drag_dest"
               c:type="GtkTreeDragDest"
               glib:type-name="GtkTreeDragDest"
               glib:get-type="gtk_tree_drag_dest_get_type"
               glib:type-struct="TreeDragDestIface">
      <virtual-method name="drag_data_received" invoker="drag_data_received">
        <doc xml:whitespace="preserve">Asks the #GtkTreeDragDest to insert a row before the path @dest,
deriving the contents of the row from @selection_data. If @dest is
outside the tree so that inserting before it is impossible, %FALSE
will be returned. Also, %FALSE may be returned if the new row is
not created for some model-specific reason.  Should robustly handle
a @dest no longer found in the model!</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">whether a new row was created before position @dest</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="dest" transfer-ownership="none">
            <doc xml:whitespace="preserve">row to drop in front of</doc>
            <type name="TreePath" c:type="GtkTreePath*"/>
          </parameter>
          <parameter name="selection_data" transfer-ownership="none">
            <doc xml:whitespace="preserve">data to drop</doc>
            <type name="SelectionData" c:type="GtkSelectionData*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="row_drop_possible" invoker="row_drop_possible">
        <doc xml:whitespace="preserve">Determines whether a drop is possible before the given @dest_path,
at the same depth as @dest_path. i.e., can we drop the data in
exist; the return value will almost certainly be %FALSE if the
parent of @dest_path doesn't exist, though.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if a drop is possible before @dest_path</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="dest_path" transfer-ownership="none">
            <doc xml:whitespace="preserve">destination row</doc>
            <type name="TreePath" c:type="GtkTreePath*"/>
          </parameter>
          <parameter name="selection_data" transfer-ownership="none">
            <doc xml:whitespace="preserve">the data being dragged</doc>
            <type name="SelectionData" c:type="GtkSelectionData*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="drag_data_received"
              c:identifier="gtk_tree_drag_dest_drag_data_received">
        <doc xml:whitespace="preserve">Asks the #GtkTreeDragDest to insert a row before the path @dest,
deriving the contents of the row from @selection_data. If @dest is
outside the tree so that inserting before it is impossible, %FALSE
will be returned. Also, %FALSE may be returned if the new row is
not created for some model-specific reason.  Should robustly handle
a @dest no longer found in the model!</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">whether a new row was created before position @dest</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="dest" transfer-ownership="none">
            <doc xml:whitespace="preserve">row to drop in front of</doc>
            <type name="TreePath" c:type="GtkTreePath*"/>
          </parameter>
          <parameter name="selection_data" transfer-ownership="none">
            <doc xml:whitespace="preserve">data to drop</doc>
            <type name="SelectionData" c:type="GtkSelectionData*"/>
          </parameter>
        </parameters>
      </method>
      <method name="row_drop_possible"
              c:identifier="gtk_tree_drag_dest_row_drop_possible">
        <doc xml:whitespace="preserve">Determines whether a drop is possible before the given @dest_path,
at the same depth as @dest_path. i.e., can we drop the data in
exist; the return value will almost certainly be %FALSE if the
parent of @dest_path doesn't exist, though.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if a drop is possible before @dest_path</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="dest_path" transfer-ownership="none">
            <doc xml:whitespace="preserve">destination row</doc>
            <type name="TreePath" c:type="GtkTreePath*"/>
          </parameter>
          <parameter name="selection_data" transfer-ownership="none">
            <doc xml:whitespace="preserve">the data being dragged</doc>
            <type name="SelectionData" c:type="GtkSelectionData*"/>
          </parameter>
        </parameters>
      </method>
    </interface>
    <record name="TreeDragDestIface"
            c:type="GtkTreeDragDestIface"
            glib:is-gtype-struct-for="TreeDragDest">
      <field name="g_iface">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="drag_data_received">
        <callback name="drag_data_received">
          <return-value transfer-ownership="none">
            <doc xml:whitespace="preserve">whether a new row was created before position @dest</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="drag_dest" transfer-ownership="none">
              <type name="TreeDragDest" c:type="GtkTreeDragDest*"/>
            </parameter>
            <parameter name="dest" transfer-ownership="none">
              <doc xml:whitespace="preserve">row to drop in front of</doc>
              <type name="TreePath" c:type="GtkTreePath*"/>
            </parameter>
            <parameter name="selection_data" transfer-ownership="none">
              <doc xml:whitespace="preserve">data to drop</doc>
              <type name="SelectionData" c:type="GtkSelectionData*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="row_drop_possible">
        <callback name="row_drop_possible">
          <return-value transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE if a drop is possible before @dest_path</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="drag_dest" transfer-ownership="none">
              <type name="TreeDragDest" c:type="GtkTreeDragDest*"/>
            </parameter>
            <parameter name="dest_path" transfer-ownership="none">
              <doc xml:whitespace="preserve">destination row</doc>
              <type name="TreePath" c:type="GtkTreePath*"/>
            </parameter>
            <parameter name="selection_data" transfer-ownership="none">
              <doc xml:whitespace="preserve">the data being dragged</doc>
              <type name="SelectionData" c:type="GtkSelectionData*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <interface name="TreeDragSource"
               c:symbol-prefix="tree_drag_source"
               c:type="GtkTreeDragSource"
               glib:type-name="GtkTreeDragSource"
               glib:get-type="gtk_tree_drag_source_get_type"
               glib:type-struct="TreeDragSourceIface">
      <virtual-method name="drag_data_delete" invoker="drag_data_delete">
        <doc xml:whitespace="preserve">Asks the #GtkTreeDragSource to delete the row at @path, because
it was moved somewhere else via drag-and-drop. Returns %FALSE
if the deletion fails because @path no longer exists, or for
some model-specific reason. Should robustly handle a @path no
longer found in the model!</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the row was successfully deleted</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="path" transfer-ownership="none">
            <doc xml:whitespace="preserve">row that was being dragged</doc>
            <type name="TreePath" c:type="GtkTreePath*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="drag_data_get" invoker="drag_data_get">
        <doc xml:whitespace="preserve">Asks the #GtkTreeDragSource to fill in @selection_data with a
representation of the row at @path. @selection_data-&gt;target gives
the required type of the data.  Should robustly handle a @path no
longer found in the model!</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if data of the required type was provided</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="path" transfer-ownership="none">
            <doc xml:whitespace="preserve">row that was dragged</doc>
            <type name="TreePath" c:type="GtkTreePath*"/>
          </parameter>
          <parameter name="selection_data" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkSelectionData to fill with data from the dragged row</doc>
            <type name="SelectionData" c:type="GtkSelectionData*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="row_draggable" invoker="row_draggable">
        <doc xml:whitespace="preserve">Asks the #GtkTreeDragSource whether a particular row can be used as
the source of a DND operation. If the source doesn't implement
this interface, the row is assumed draggable.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the row can be dragged</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="path" transfer-ownership="none">
            <doc xml:whitespace="preserve">row on which user is initiating a drag</doc>
            <type name="TreePath" c:type="GtkTreePath*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="drag_data_delete"
              c:identifier="gtk_tree_drag_source_drag_data_delete">
        <doc xml:whitespace="preserve">Asks the #GtkTreeDragSource to delete the row at @path, because
it was moved somewhere else via drag-and-drop. Returns %FALSE
if the deletion fails because @path no longer exists, or for
some model-specific reason. Should robustly handle a @path no
longer found in the model!</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the row was successfully deleted</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="path" transfer-ownership="none">
            <doc xml:whitespace="preserve">row that was being dragged</doc>
            <type name="TreePath" c:type="GtkTreePath*"/>
          </parameter>
        </parameters>
      </method>
      <method name="drag_data_get"
              c:identifier="gtk_tree_drag_source_drag_data_get">
        <doc xml:whitespace="preserve">Asks the #GtkTreeDragSource to fill in @selection_data with a
representation of the row at @path. @selection_data-&gt;target gives
the required type of the data.  Should robustly handle a @path no
longer found in the model!</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if data of the required type was provided</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="path" transfer-ownership="none">
            <doc xml:whitespace="preserve">row that was dragged</doc>
            <type name="TreePath" c:type="GtkTreePath*"/>
          </parameter>
          <parameter name="selection_data" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkSelectionData to fill with data from the dragged row</doc>
            <type name="SelectionData" c:type="GtkSelectionData*"/>
          </parameter>
        </parameters>
      </method>
      <method name="row_draggable"
              c:identifier="gtk_tree_drag_source_row_draggable">
        <doc xml:whitespace="preserve">Asks the #GtkTreeDragSource whether a particular row can be used as
the source of a DND operation. If the source doesn't implement
this interface, the row is assumed draggable.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the row can be dragged</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="path" transfer-ownership="none">
            <doc xml:whitespace="preserve">row on which user is initiating a drag</doc>
            <type name="TreePath" c:type="GtkTreePath*"/>
          </parameter>
        </parameters>
      </method>
    </interface>
    <record name="TreeDragSourceIface"
            c:type="GtkTreeDragSourceIface"
            glib:is-gtype-struct-for="TreeDragSource">
      <field name="g_iface">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="row_draggable">
        <callback name="row_draggable">
          <return-value transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE if the row can be dragged</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="drag_source" transfer-ownership="none">
              <type name="TreeDragSource" c:type="GtkTreeDragSource*"/>
            </parameter>
            <parameter name="path" transfer-ownership="none">
              <doc xml:whitespace="preserve">row on which user is initiating a drag</doc>
              <type name="TreePath" c:type="GtkTreePath*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="drag_data_get">
        <callback name="drag_data_get">
          <return-value transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE if data of the required type was provided</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="drag_source" transfer-ownership="none">
              <type name="TreeDragSource" c:type="GtkTreeDragSource*"/>
            </parameter>
            <parameter name="path" transfer-ownership="none">
              <doc xml:whitespace="preserve">row that was dragged</doc>
              <type name="TreePath" c:type="GtkTreePath*"/>
            </parameter>
            <parameter name="selection_data" transfer-ownership="none">
              <doc xml:whitespace="preserve">a #GtkSelectionData to fill with data from the dragged row</doc>
              <type name="SelectionData" c:type="GtkSelectionData*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="drag_data_delete">
        <callback name="drag_data_delete">
          <return-value transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE if the row was successfully deleted</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="drag_source" transfer-ownership="none">
              <type name="TreeDragSource" c:type="GtkTreeDragSource*"/>
            </parameter>
            <parameter name="path" transfer-ownership="none">
              <doc xml:whitespace="preserve">row that was being dragged</doc>
              <type name="TreePath" c:type="GtkTreePath*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="TreeIter"
            c:type="GtkTreeIter"
            glib:type-name="GtkTreeIter"
            glib:get-type="gtk_tree_iter_get_type"
            c:symbol-prefix="tree_iter">
      <field name="stamp" writable="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="user_data" writable="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="user_data2" writable="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="user_data3" writable="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <method name="copy" c:identifier="gtk_tree_iter_copy">
        <doc xml:whitespace="preserve">Creates a dynamically allocated tree iterator as a copy of @iter.  
This function is not intended for use in applications, because you 
can just copy the structs by value 
(&lt;literal&gt;GtkTreeIter new_iter = iter;&lt;/literal&gt;).
You must free this iter with gtk_tree_iter_free().</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a newly-allocated copy of @iter.</doc>
          <type name="TreeIter" c:type="GtkTreeIter*"/>
        </return-value>
      </method>
      <method name="free" c:identifier="gtk_tree_iter_free">
        <doc xml:whitespace="preserve">Frees an iterator that has been allocated by gtk_tree_iter_copy().
This function is mainly used for language bindings.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
    </record>
    <callback name="TreeIterCompareFunc" c:type="GtkTreeIterCompareFunc">
      <return-value transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="model" transfer-ownership="none">
          <type name="TreeModel" c:type="GtkTreeModel*"/>
        </parameter>
        <parameter name="a" transfer-ownership="none">
          <type name="TreeIter" c:type="GtkTreeIter*"/>
        </parameter>
        <parameter name="b" transfer-ownership="none">
          <type name="TreeIter" c:type="GtkTreeIter*"/>
        </parameter>
        <parameter name="user_data" transfer-ownership="none" closure="3">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <interface name="TreeModel"
               c:symbol-prefix="tree_model"
               c:type="GtkTreeModel"
               glib:type-name="GtkTreeModel"
               glib:get-type="gtk_tree_model_get_type"
               glib:type-struct="TreeModelIface">
      <virtual-method name="get_column_type" invoker="get_column_type">
        <doc xml:whitespace="preserve">Returns the type of the column.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The type of the column.</doc>
          <type name="GType" c:type="GType"/>
        </return-value>
        <parameters>
          <parameter name="index_" transfer-ownership="none">
            <doc xml:whitespace="preserve">The column index.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_flags" invoker="get_flags">
        <doc xml:whitespace="preserve">Returns a set of flags supported by this interface.  The flags are a bitwise
combination of #GtkTreeModelFlags.  The flags supported should not change
during the lifecycle of the @tree_model.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The flags supported by this interface.</doc>
          <type name="TreeModelFlags" c:type="GtkTreeModelFlags"/>
        </return-value>
      </virtual-method>
      <virtual-method name="get_iter" invoker="get_iter">
        <doc xml:whitespace="preserve">Sets @iter to a valid iterator pointing to @path.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE, if @iter was set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="iter"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:whitespace="preserve">The uninitialized #GtkTreeIter.</doc>
            <type name="TreeIter" c:type="GtkTreeIter*"/>
          </parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:whitespace="preserve">The #GtkTreePath.</doc>
            <type name="TreePath" c:type="GtkTreePath*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_n_columns" invoker="get_n_columns">
        <doc xml:whitespace="preserve">Returns the number of columns supported by @tree_model.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The number of columns.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </virtual-method>
      <virtual-method name="get_path" invoker="get_path">
        <doc xml:whitespace="preserve">Returns a newly-created #GtkTreePath referenced by @iter.  This path should
be freed with gtk_tree_path_free().</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a newly-created #GtkTreePath.</doc>
          <type name="TreePath" c:type="GtkTreePath*"/>
        </return-value>
        <parameters>
          <parameter name="iter" transfer-ownership="none">
            <doc xml:whitespace="preserve">The #GtkTreeIter.</doc>
            <type name="TreeIter" c:type="GtkTreeIter*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_value" invoker="get_value">
        <doc xml:whitespace="preserve">Initializes and sets @value to that at @column.
When done with @value, g_value_unset() needs to be called 
to free any allocated memory.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="iter" transfer-ownership="none">
            <doc xml:whitespace="preserve">The #GtkTreeIter.</doc>
            <type name="TreeIter" c:type="GtkTreeIter*"/>
          </parameter>
          <parameter name="column" transfer-ownership="none">
            <doc xml:whitespace="preserve">The column to lookup the value at.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="value"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:whitespace="preserve">An empty #GValue to set.</doc>
            <type name="GObject.Value" c:type="GValue*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="iter_children" invoker="iter_children">
        <doc xml:whitespace="preserve">Sets @iter to point to the first child of @parent.  If @parent has no
children, %FALSE is returned and @iter is set to be invalid.  @parent
will remain a valid node after this function has been called.
If @parent is %NULL returns the first node, equivalent to
&lt;literal&gt;gtk_tree_model_get_iter_first (tree_model, iter);&lt;/literal&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE, if @child has been set to the first child.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="iter"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:whitespace="preserve">The new #GtkTreeIter to be set to the child.</doc>
            <type name="TreeIter" c:type="GtkTreeIter*"/>
          </parameter>
          <parameter name="parent" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">The #GtkTreeIter, or %NULL</doc>
            <type name="TreeIter" c:type="GtkTreeIter*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="iter_has_child" invoker="iter_has_child">
        <doc xml:whitespace="preserve">Returns %TRUE if @iter has children, %FALSE otherwise.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if @iter has children.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="iter" transfer-ownership="none">
            <doc xml:whitespace="preserve">The #GtkTreeIter to test for children.</doc>
            <type name="TreeIter" c:type="GtkTreeIter*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="iter_n_children" invoker="iter_n_children">
        <doc xml:whitespace="preserve">Returns the number of children that @iter has.  As a special case, if @iter
is %NULL, then the number of toplevel nodes is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The number of children of @iter.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <parameter name="iter" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">The #GtkTreeIter, or %NULL.</doc>
            <type name="TreeIter" c:type="GtkTreeIter*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="iter_next" invoker="iter_next">
        <doc xml:whitespace="preserve">Sets @iter to point to the node following it at the current level.  If there
is no next @iter, %FALSE is returned and @iter is set to be invalid.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if @iter has been changed to the next node.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="iter" transfer-ownership="none">
            <doc xml:whitespace="preserve">The #GtkTreeIter.</doc>
            <type name="TreeIter" c:type="GtkTreeIter*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="iter_nth_child" invoker="iter_nth_child">
        <doc xml:whitespace="preserve">Sets @iter to be the child of @parent, using the given index.  The first
index is 0.  If @n is too big, or @parent has no children, @iter is set
to an invalid iterator and %FALSE is returned.  @parent will remain a valid
node after this function has been called.  As a special case, if @parent is
%NULL, then the @n&lt;!-- --&gt;th root node is set.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE, if @parent has an @n&lt;!-- --&gt;th child.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="iter"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:whitespace="preserve">The #GtkTreeIter to set to the nth child.</doc>
            <type name="TreeIter" c:type="GtkTreeIter*"/>
          </parameter>
          <parameter name="parent" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">The #GtkTreeIter to get the child from, or %NULL.</doc>
            <type name="TreeIter" c:type="GtkTreeIter*"/>
          </parameter>
          <parameter name="n" transfer-ownership="none">
            <doc xml:whitespace="preserve">Then index of the desired child.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="iter_parent" invoker="iter_parent">
        <doc xml:whitespace="preserve">Sets @iter to be the parent of @child.  If @child is at the toplevel, and
doesn't have a parent, then @iter is set to an invalid iterator and %FALSE
is returned.  @child will remain a valid node after this function has been
called.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE, if @iter is set to the parent of @child.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="iter"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:whitespace="preserve">The new #GtkTreeIter to set to the parent.</doc>
            <type name="TreeIter" c:type="GtkTreeIter*"/>
          </parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:whitespace="preserve">The #GtkTreeIter.</doc>
            <type name="TreeIter" c:type="GtkTreeIter*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="ref_node" invoker="ref_node">
        <doc xml:whitespace="preserve">Lets the tree ref the node.  This is an optional method for models to
implement.  To be more specific, models may ignore this call as it exists
primarily for performance reasons.
This function is primarily meant as a way for views to let caching model 
know when nodes are being displayed (and hence, whether or not to cache that
node.)  For example, a file-system based model would not want to keep the
entire file-hierarchy in memory, just the sections that are currently being
displayed by every current view.
A model should be expected to be able to get an iter independent of its
reffed state.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="iter" transfer-ownership="none">
            <doc xml:whitespace="preserve">The #GtkTreeIter.</doc>
            <type name="TreeIter" c:type="GtkTreeIter*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="unref_node" invoker="unref_node">
        <doc xml:whitespace="preserve">Lets the tree unref the node.  This is an optional method for models to
implement.  To be more specific, models may ignore this call as it exists
primarily for performance reasons.
For more information on what this means, see gtk_tree_model_ref_node().
Please note that nodes that are deleted are not unreffed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="iter" transfer-ownership="none">
            <doc xml:whitespace="preserve">The #GtkTreeIter.</doc>
            <type name="TreeIter" c:type="GtkTreeIter*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="filter_new"
              c:identifier="gtk_tree_model_filter_new"
              version="2.4">
        <doc xml:whitespace="preserve">Creates a new #GtkTreeModel, with @child_model as the child_model
and @root as the virtual root.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A new #GtkTreeModel.</doc>
          <type name="TreeModel" c:type="GtkTreeModel*"/>
        </return-value>
        <parameters>
          <parameter name="root" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">A #GtkTreePath or %NULL.</doc>
            <type name="TreePath" c:type="GtkTreePath*"/>
          </parameter>
        </parameters>
      </method>
      <method name="foreach" c:identifier="gtk_tree_model_foreach">
        <doc xml:whitespace="preserve">Calls func on each node in model in a depth-first fashion.
If @func returns %TRUE, then the tree ceases to be walked, and
gtk_tree_model_foreach() returns.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="func"
                     transfer-ownership="none"
                     scope="call"
                     closure="1">
            <doc xml:whitespace="preserve">A function to be called on each row</doc>
            <type name="TreeModelForeachFunc"
                  c:type="GtkTreeModelForeachFunc"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:whitespace="preserve">User data to passed to func.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get" c:identifier="gtk_tree_model_get" introspectable="0">
        <doc xml:whitespace="preserve">Gets the value of one or more cells in the row referenced by @iter.
The variable argument list should contain integer column numbers,
each column number followed by a place to store the value being
retrieved.  The list is terminated by a -1. For example, to get a
value from column 0 with type %G_TYPE_STRING, you would
where &lt;literal&gt;place_string_here&lt;/literal&gt; is a &lt;type&gt;gchar*&lt;/type&gt; to be 
filled with the string.
Returned values with type %G_TYPE_OBJECT have to be unreferenced, values
with type %G_TYPE_STRING or %G_TYPE_BOXED have to be freed. Other values are
passed by value.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="iter" transfer-ownership="none">
            <doc xml:whitespace="preserve">a row in @tree_model</doc>
            <type name="TreeIter" c:type="GtkTreeIter*"/>
          </parameter>
          <parameter transfer-ownership="none">
            <varargs>
            </varargs>
          </parameter>
        </parameters>
      </method>
      <method name="get_column_type"
              c:identifier="gtk_tree_model_get_column_type">
        <doc xml:whitespace="preserve">Returns the type of the column.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The type of the column.</doc>
          <type name="GType" c:type="GType"/>
        </return-value>
        <parameters>
          <parameter name="index_" transfer-ownership="none">
            <doc xml:whitespace="preserve">The column index.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_flags" c:identifier="gtk_tree_model_get_flags">
        <doc xml:whitespace="preserve">Returns a set of flags supported by this interface.  The flags are a bitwise
combination of #GtkTreeModelFlags.  The flags supported should not change
during the lifecycle of the @tree_model.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The flags supported by this interface.</doc>
          <type name="TreeModelFlags" c:type="GtkTreeModelFlags"/>
        </return-value>
      </method>
      <method name="get_iter" c:identifier="gtk_tree_model_get_iter">
        <doc xml:whitespace="preserve">Sets @iter to a valid iterator pointing to @path.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE, if @iter was set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="iter"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:whitespace="preserve">The uninitialized #GtkTreeIter.</doc>
            <type name="TreeIter" c:type="GtkTreeIter*"/>
          </parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:whitespace="preserve">The #GtkTreePath.</doc>
            <type name="TreePath" c:type="GtkTreePath*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_iter_first"
              c:identifier="gtk_tree_model_get_iter_first">
        <doc xml:whitespace="preserve">Initializes @iter with the first iterator in the tree (the one at the path
"0") and returns %TRUE.  Returns %FALSE if the tree is empty.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE, if @iter was set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="iter"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:whitespace="preserve">The uninitialized #GtkTreeIter.</doc>
            <type name="TreeIter" c:type="GtkTreeIter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_iter_from_string"
              c:identifier="gtk_tree_model_get_iter_from_string">
        <doc xml:whitespace="preserve">Sets @iter to a valid iterator pointing to @path_string, if it
exists. Otherwise, @iter is left invalid and %FALSE is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE, if @iter was set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="iter"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:whitespace="preserve">An uninitialized #GtkTreeIter.</doc>
            <type name="TreeIter" c:type="GtkTreeIter*"/>
          </parameter>
          <parameter name="path_string" transfer-ownership="none">
            <doc xml:whitespace="preserve">A string representation of a #GtkTreePath.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_n_columns" c:identifier="gtk_tree_model_get_n_columns">
        <doc xml:whitespace="preserve">Returns the number of columns supported by @tree_model.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The number of columns.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="get_path" c:identifier="gtk_tree_model_get_path">
        <doc xml:whitespace="preserve">Returns a newly-created #GtkTreePath referenced by @iter.  This path should
be freed with gtk_tree_path_free().</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a newly-created #GtkTreePath.</doc>
          <type name="TreePath" c:type="GtkTreePath*"/>
        </return-value>
        <parameters>
          <parameter name="iter" transfer-ownership="none">
            <doc xml:whitespace="preserve">The #GtkTreeIter.</doc>
            <type name="TreeIter" c:type="GtkTreeIter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_string_from_iter"
              c:identifier="gtk_tree_model_get_string_from_iter"
              version="2.2">
        <doc xml:whitespace="preserve">Generates a string representation of the iter. This string is a ':'
separated list of numbers. For example, "4:10:0:3" would be an
acceptable return value for this string.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A newly-allocated string. Must be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="iter" transfer-ownership="none">
            <doc xml:whitespace="preserve">An #GtkTreeIter.</doc>
            <type name="TreeIter" c:type="GtkTreeIter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_valist"
              c:identifier="gtk_tree_model_get_valist"
              introspectable="0">
        <doc xml:whitespace="preserve">See gtk_tree_model_get(), this version takes a &lt;type&gt;va_list&lt;/type&gt; 
for language bindings to use.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="iter" transfer-ownership="none">
            <doc xml:whitespace="preserve">a row in @tree_model</doc>
            <type name="TreeIter" c:type="GtkTreeIter*"/>
          </parameter>
          <parameter name="var_args" transfer-ownership="none">
            <doc xml:whitespace="preserve">&lt;type&gt;va_list&lt;/type&gt; of column/return location pairs</doc>
            <type name="va_list" c:type="va_list"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_value" c:identifier="gtk_tree_model_get_value">
        <doc xml:whitespace="preserve">Initializes and sets @value to that at @column.
When done with @value, g_value_unset() needs to be called 
to free any allocated memory.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="iter" transfer-ownership="none">
            <doc xml:whitespace="preserve">The #GtkTreeIter.</doc>
            <type name="TreeIter" c:type="GtkTreeIter*"/>
          </parameter>
          <parameter name="column" transfer-ownership="none">
            <doc xml:whitespace="preserve">The column to lookup the value at.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="value"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:whitespace="preserve">An empty #GValue to set.</doc>
            <type name="GObject.Value" c:type="GValue*"/>
          </parameter>
        </parameters>
      </method>
      <method name="iter_children" c:identifier="gtk_tree_model_iter_children">
        <doc xml:whitespace="preserve">Sets @iter to point to the first child of @parent.  If @parent has no
children, %FALSE is returned and @iter is set to be invalid.  @parent
will remain a valid node after this function has been called.
If @parent is %NULL returns the first node, equivalent to
&lt;literal&gt;gtk_tree_model_get_iter_first (tree_model, iter);&lt;/literal&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE, if @child has been set to the first child.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="iter"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:whitespace="preserve">The new #GtkTreeIter to be set to the child.</doc>
            <type name="TreeIter" c:type="GtkTreeIter*"/>
          </parameter>
          <parameter name="parent" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">The #GtkTreeIter, or %NULL</doc>
            <type name="TreeIter" c:type="GtkTreeIter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="iter_has_child"
              c:identifier="gtk_tree_model_iter_has_child">
        <doc xml:whitespace="preserve">Returns %TRUE if @iter has children, %FALSE otherwise.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if @iter has children.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="iter" transfer-ownership="none">
            <doc xml:whitespace="preserve">The #GtkTreeIter to test for children.</doc>
            <type name="TreeIter" c:type="GtkTreeIter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="iter_n_children"
              c:identifier="gtk_tree_model_iter_n_children">
        <doc xml:whitespace="preserve">Returns the number of children that @iter has.  As a special case, if @iter
is %NULL, then the number of toplevel nodes is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The number of children of @iter.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <parameter name="iter" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">The #GtkTreeIter, or %NULL.</doc>
            <type name="TreeIter" c:type="GtkTreeIter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="iter_next" c:identifier="gtk_tree_model_iter_next">
        <doc xml:whitespace="preserve">Sets @iter to point to the node following it at the current level.  If there
is no next @iter, %FALSE is returned and @iter is set to be invalid.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if @iter has been changed to the next node.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="iter" transfer-ownership="none">
            <doc xml:whitespace="preserve">The #GtkTreeIter.</doc>
            <type name="TreeIter" c:type="GtkTreeIter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="iter_nth_child"
              c:identifier="gtk_tree_model_iter_nth_child">
        <doc xml:whitespace="preserve">Sets @iter to be the child of @parent, using the given index.  The first
index is 0.  If @n is too big, or @parent has no children, @iter is set
to an invalid iterator and %FALSE is returned.  @parent will remain a valid
node after this function has been called.  As a special case, if @parent is
%NULL, then the @n&lt;!-- --&gt;th root node is set.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE, if @parent has an @n&lt;!-- --&gt;th child.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="iter"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:whitespace="preserve">The #GtkTreeIter to set to the nth child.</doc>
            <type name="TreeIter" c:type="GtkTreeIter*"/>
          </parameter>
          <parameter name="parent" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">The #GtkTreeIter to get the child from, or %NULL.</doc>
            <type name="TreeIter" c:type="GtkTreeIter*"/>
          </parameter>
          <parameter name="n" transfer-ownership="none">
            <doc xml:whitespace="preserve">Then index of the desired child.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="iter_parent" c:identifier="gtk_tree_model_iter_parent">
        <doc xml:whitespace="preserve">Sets @iter to be the parent of @child.  If @child is at the toplevel, and
doesn't have a parent, then @iter is set to an invalid iterator and %FALSE
is returned.  @child will remain a valid node after this function has been
called.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE, if @iter is set to the parent of @child.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="iter"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:whitespace="preserve">The new #GtkTreeIter to set to the parent.</doc>
            <type name="TreeIter" c:type="GtkTreeIter*"/>
          </parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:whitespace="preserve">The #GtkTreeIter.</doc>
            <type name="TreeIter" c:type="GtkTreeIter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref_node" c:identifier="gtk_tree_model_ref_node">
        <doc xml:whitespace="preserve">Lets the tree ref the node.  This is an optional method for models to
implement.  To be more specific, models may ignore this call as it exists
primarily for performance reasons.
This function is primarily meant as a way for views to let caching model 
know when nodes are being displayed (and hence, whether or not to cache that
node.)  For example, a file-system based model would not want to keep the
entire file-hierarchy in memory, just the sections that are currently being
displayed by every current view.
A model should be expected to be able to get an iter independent of its
reffed state.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="iter" transfer-ownership="none">
            <doc xml:whitespace="preserve">The #GtkTreeIter.</doc>
            <type name="TreeIter" c:type="GtkTreeIter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="row_changed" c:identifier="gtk_tree_model_row_changed">
        <doc xml:whitespace="preserve">Emits the "row-changed" signal on @tree_model.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="path" transfer-ownership="none">
            <doc xml:whitespace="preserve">A #GtkTreePath pointing to the changed row</doc>
            <type name="TreePath" c:type="GtkTreePath*"/>
          </parameter>
          <parameter name="iter" transfer-ownership="none">
            <doc xml:whitespace="preserve">A valid #GtkTreeIter pointing to the changed row</doc>
            <type name="TreeIter" c:type="GtkTreeIter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="row_deleted" c:identifier="gtk_tree_model_row_deleted">
        <doc xml:whitespace="preserve">Emits the "row-deleted" signal on @tree_model.  This should be called by
models after a row has been removed.  The location pointed to by @path 
should be the location that the row previously was at.  It may not be a 
valid location anymore.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="path" transfer-ownership="none">
            <doc xml:whitespace="preserve">A #GtkTreePath pointing to the previous location of the deleted row.</doc>
            <type name="TreePath" c:type="GtkTreePath*"/>
          </parameter>
        </parameters>
      </method>
      <method name="row_has_child_toggled"
              c:identifier="gtk_tree_model_row_has_child_toggled">
        <doc xml:whitespace="preserve">Emits the "row-has-child-toggled" signal on @tree_model.  This should be
called by models after the child state of a node changes.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="path" transfer-ownership="none">
            <doc xml:whitespace="preserve">A #GtkTreePath pointing to the changed row</doc>
            <type name="TreePath" c:type="GtkTreePath*"/>
          </parameter>
          <parameter name="iter" transfer-ownership="none">
            <doc xml:whitespace="preserve">A valid #GtkTreeIter pointing to the changed row</doc>
            <type name="TreeIter" c:type="GtkTreeIter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="row_inserted" c:identifier="gtk_tree_model_row_inserted">
        <doc xml:whitespace="preserve">Emits the "row-inserted" signal on @tree_model</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="path" transfer-ownership="none">
            <doc xml:whitespace="preserve">A #GtkTreePath pointing to the inserted row</doc>
            <type name="TreePath" c:type="GtkTreePath*"/>
          </parameter>
          <parameter name="iter" transfer-ownership="none">
            <doc xml:whitespace="preserve">A valid #GtkTreeIter pointing to the inserted row</doc>
            <type name="TreeIter" c:type="GtkTreeIter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="rows_reordered"
              c:identifier="gtk_tree_model_rows_reordered">
        <doc xml:whitespace="preserve">Emits the "rows-reordered" signal on @tree_model.  This should be called by
models when their rows have been reordered.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="path" transfer-ownership="none">
            <doc xml:whitespace="preserve">A #GtkTreePath pointing to the tree node whose children have been reordered</doc>
            <type name="TreePath" c:type="GtkTreePath*"/>
          </parameter>
          <parameter name="iter" transfer-ownership="none">
            <doc xml:whitespace="preserve">A valid #GtkTreeIter pointing to the node whose children have been reordered, or %NULL if the depth of @path is 0.</doc>
            <type name="TreeIter" c:type="GtkTreeIter*"/>
          </parameter>
          <parameter name="new_order" transfer-ownership="none">
            <doc xml:whitespace="preserve">an array of integers mapping the current position of each child to its old position before the re-ordering, i.e. @new_order&lt;literal&gt;[newpos] = oldpos&lt;/literal&gt;.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="sort_new_with_model"
              c:identifier="gtk_tree_model_sort_new_with_model">
        <doc xml:whitespace="preserve">Creates a new #GtkTreeModel, with @child_model as the child model.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A new #GtkTreeModel.</doc>
          <type name="TreeModel" c:type="GtkTreeModel*"/>
        </return-value>
      </method>
      <method name="unref_node" c:identifier="gtk_tree_model_unref_node">
        <doc xml:whitespace="preserve">Lets the tree unref the node.  This is an optional method for models to
implement.  To be more specific, models may ignore this call as it exists
primarily for performance reasons.
For more information on what this means, see gtk_tree_model_ref_node().
Please note that nodes that are deleted are not unreffed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="iter" transfer-ownership="none">
            <doc xml:whitespace="preserve">The #GtkTreeIter.</doc>
            <type name="TreeIter" c:type="GtkTreeIter*"/>
          </parameter>
        </parameters>
      </method>
      <glib:signal name="row-changed">
        <doc xml:whitespace="preserve">This signal is emitted when a row in the model has changed.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkTreePath identifying the changed row</doc>
            <type name="TreePath"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <doc xml:whitespace="preserve">a valid #GtkTreeIter pointing to the changed row</doc>
            <type name="TreeIter"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="row-deleted">
        <doc xml:whitespace="preserve">This signal is emitted when a row has been deleted.
Note that no iterator is passed to the signal handler,
since the row is already deleted.
Implementations of GtkTreeModel must emit row-deleted 
&lt;emphasis&gt;before&lt;/emphasis&gt; removing the node from its
internal data structures.  This is because models and 
views which access and monitor this model might have
references on the node which need to be released in the
row-deleted handler.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkTreePath identifying the row</doc>
            <type name="TreePath"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="row-has-child-toggled">
        <doc xml:whitespace="preserve">This signal is emitted when a row has gotten the first child row or lost
its last child row.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkTreePath identifying the row</doc>
            <type name="TreePath"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <doc xml:whitespace="preserve">a valid #GtkTreeIter pointing to the row</doc>
            <type name="TreeIter"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="row-inserted">
        <doc xml:whitespace="preserve">This signal is emitted when a new row has been inserted in the model.
Note that the row may still be empty at this point, since
it is a common pattern to first insert an empty row, and 
then fill it with the desired values.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkTreePath identifying the new row</doc>
            <type name="TreePath"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <doc xml:whitespace="preserve">a valid #GtkTreeIter pointing to the new row</doc>
            <type name="TreeIter"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="rows-reordered">
        <doc xml:whitespace="preserve">This signal is emitted when the children of a node in the #GtkTreeModel
have been reordered. 
Note that this signal is &lt;emphasis&gt;not&lt;/emphasis&gt; emitted
when rows are reordered by DND, since this is implemented
by removing and then reinserting the row.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkTreePath identifying the tree node whose children have been reordered</doc>
            <type name="TreePath"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <doc xml:whitespace="preserve">a valid #GtkTreeIter pointing to the node whose</doc>
            <type name="TreeIter"/>
          </parameter>
          <parameter name="p1" transfer-ownership="none">
            <doc xml:whitespace="preserve">an array of integers mapping the current position of each child to its old position before the re-ordering, i.e. @new_order&lt;literal&gt;[newpos] = oldpos&lt;/literal&gt;.</doc>
            <type name="gpointer"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <class name="TreeModelFilter"
           c:symbol-prefix="tree_model_filter"
           c:type="GtkTreeModelFilter"
           parent="GObject.Object"
           glib:type-name="GtkTreeModelFilter"
           glib:get-type="gtk_tree_model_filter_get_type"
           glib:type-struct="TreeModelFilterClass">
      <implements name="TreeDragSource"/>
      <implements name="TreeModel"/>
      <virtual-method name="modify">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="child_model" transfer-ownership="none">
            <type name="TreeModel" c:type="GtkTreeModel*"/>
          </parameter>
          <parameter name="iter" transfer-ownership="none">
            <type name="TreeIter" c:type="GtkTreeIter*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="GObject.Value" c:type="GValue*"/>
          </parameter>
          <parameter name="column" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="visible">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="child_model" transfer-ownership="none">
            <type name="TreeModel" c:type="GtkTreeModel*"/>
          </parameter>
          <parameter name="iter" transfer-ownership="none">
            <type name="TreeIter" c:type="GtkTreeIter*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="clear_cache"
              c:identifier="gtk_tree_model_filter_clear_cache"
              version="2.4">
        <doc xml:whitespace="preserve">This function should almost never be called. It clears the @filter
of any cached iterators that haven't been reffed with
gtk_tree_model_ref_node(). This might be useful if the child model
being filtered is static (and doesn't change often) and there has been
a lot of unreffed access to nodes. As a side effect of this function,
all unreffed iters will be invalid.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="convert_child_iter_to_iter"
              c:identifier="gtk_tree_model_filter_convert_child_iter_to_iter"
              version="2.4">
        <doc xml:whitespace="preserve">Sets @filter_iter to point to the row in @filter that corresponds to the
row pointed at by @child_iter.  If @filter_iter was not set, %FALSE is
returned.
valid iterator pointing to a visible row in child model.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE, if @filter_iter was set, i.e. if @child_iter is a</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="filter_iter"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:whitespace="preserve">An uninitialized #GtkTreeIter.</doc>
            <type name="TreeIter" c:type="GtkTreeIter*"/>
          </parameter>
          <parameter name="child_iter" transfer-ownership="none">
            <doc xml:whitespace="preserve">A valid #GtkTreeIter pointing to a row on the child model.</doc>
            <type name="TreeIter" c:type="GtkTreeIter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="convert_child_path_to_path"
              c:identifier="gtk_tree_model_filter_convert_child_path_to_path"
              version="2.4">
        <doc xml:whitespace="preserve">Converts @child_path to a path relative to @filter. That is, @child_path
points to a path in the child model. The rerturned path will point to the
same row in the filtered model. If @child_path isn't a valid path on the
child model or points to a row which is not visible in @filter, then %NULL
is returned.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A newly allocated #GtkTreePath, or %NULL.</doc>
          <type name="TreePath" c:type="GtkTreePath*"/>
        </return-value>
        <parameters>
          <parameter name="child_path" transfer-ownership="none">
            <doc xml:whitespace="preserve">A #GtkTreePath to convert.</doc>
            <type name="TreePath" c:type="GtkTreePath*"/>
          </parameter>
        </parameters>
      </method>
      <method name="convert_iter_to_child_iter"
              c:identifier="gtk_tree_model_filter_convert_iter_to_child_iter"
              version="2.4">
        <doc xml:whitespace="preserve">Sets @child_iter to point to the row pointed to by @filter_iter.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="child_iter"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:whitespace="preserve">An uninitialized #GtkTreeIter.</doc>
            <type name="TreeIter" c:type="GtkTreeIter*"/>
          </parameter>
          <parameter name="filter_iter" transfer-ownership="none">
            <doc xml:whitespace="preserve">A valid #GtkTreeIter pointing to a row on @filter.</doc>
            <type name="TreeIter" c:type="GtkTreeIter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="convert_path_to_child_path"
              c:identifier="gtk_tree_model_filter_convert_path_to_child_path"
              version="2.4">
        <doc xml:whitespace="preserve">Converts @filter_path to a path on the child model of @filter. That is,
point to the same location in the model not being filtered. If @filter_path
does not point to a location in the child model, %NULL is returned.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A newly allocated #GtkTreePath, or %NULL.</doc>
          <type name="TreePath" c:type="GtkTreePath*"/>
        </return-value>
        <parameters>
          <parameter name="filter_path" transfer-ownership="none">
            <doc xml:whitespace="preserve">A #GtkTreePath to convert.</doc>
            <type name="TreePath" c:type="GtkTreePath*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_model"
              c:identifier="gtk_tree_model_filter_get_model"
              version="2.4">
        <doc xml:whitespace="preserve">Returns a pointer to the child model of @filter.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">A pointer to a #GtkTreeModel.</doc>
          <type name="TreeModel" c:type="GtkTreeModel*"/>
        </return-value>
      </method>
      <method name="refilter"
              c:identifier="gtk_tree_model_filter_refilter"
              version="2.4">
        <doc xml:whitespace="preserve">Emits ::row_changed for each row in the child model, which causes
the filter to re-evaluate whether a row is visible or not.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="set_modify_func"
              c:identifier="gtk_tree_model_filter_set_modify_func"
              version="2.4">
        <doc xml:whitespace="preserve">With the @n_columns and @types parameters, you give an array of column
types for this model (which will be exposed to the parent model/view).
The @func, @data and @destroy parameters are for specifying the modify
function. The modify function will get called for &lt;emphasis&gt;each&lt;/emphasis&gt;
data access, the goal of the modify function is to return the data which 
should be displayed at the location specified using the parameters of the 
modify function.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="n_columns" transfer-ownership="none">
            <doc xml:whitespace="preserve">The number of columns in the filter model.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="types" transfer-ownership="none">
            <doc xml:whitespace="preserve">The #GType&lt;!-- --&gt;s of the columns.</doc>
            <type name="GType" c:type="GType*"/>
          </parameter>
          <parameter name="func"
                     transfer-ownership="none"
                     scope="notified"
                     closure="3"
                     destroy="4">
            <doc xml:whitespace="preserve">A #GtkTreeModelFilterModifyFunc</doc>
            <type name="TreeModelFilterModifyFunc"
                  c:type="GtkTreeModelFilterModifyFunc"/>
          </parameter>
          <parameter name="data" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">User data to pass to the modify function, or %NULL.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="destroy"
                     transfer-ownership="none"
                     allow-none="1"
                     scope="async">
            <doc xml:whitespace="preserve">Destroy notifier of @data, or %NULL.</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_visible_column"
              c:identifier="gtk_tree_model_filter_set_visible_column"
              version="2.4">
        <doc xml:whitespace="preserve">Sets @column of the child_model to be the column where @filter should
look for visibility information. @columns should be a column of type
%G_TYPE_BOOLEAN, where %TRUE means that a row is visible, and %FALSE
if not.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="column" transfer-ownership="none">
            <doc xml:whitespace="preserve">A #gint which is the column containing the visible information.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_visible_func"
              c:identifier="gtk_tree_model_filter_set_visible_func"
              version="2.4">
        <doc xml:whitespace="preserve">Sets the visible function used when filtering the @filter to be @func. The
function should return %TRUE if the given row should be visible and
%FALSE otherwise.
If the condition calculated by the function changes over time (e.g. because
it depends on some global parameters), you must call 
gtk_tree_model_filter_refilter() to keep the visibility information of 
the model uptodate.
Note that @func is called whenever a row is inserted, when it may still be
empty. The visible function should therefore take special care of empty
rows, like in the example below.
&lt;informalexample&gt;&lt;programlisting&gt;
static gboolean
visible_func (GtkTreeModel *model,
GtkTreeIter  *iter,
gpointer      data)
{
/&amp;ast; Visible if row is non-empty and first column is "HI" &amp;ast;/
gchar *str;
gboolean visible = FALSE;
gtk_tree_model_get (model, iter, 0, &amp;str, -1);
if (str &amp;&amp; strcmp (str, "HI") == 0)
visible = TRUE;
g_free (str);
return visible;
}
&lt;/programlisting&gt;&lt;/informalexample&gt;</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="func"
                     transfer-ownership="none"
                     scope="notified"
                     closure="1"
                     destroy="2">
            <doc xml:whitespace="preserve">A #GtkTreeModelFilterVisibleFunc, the visible function.</doc>
            <type name="TreeModelFilterVisibleFunc"
                  c:type="GtkTreeModelFilterVisibleFunc"/>
          </parameter>
          <parameter name="data" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">User data to pass to the visible function, or %NULL.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="destroy"
                     transfer-ownership="none"
                     allow-none="1"
                     scope="async">
            <doc xml:whitespace="preserve">Destroy notifier of @data, or %NULL.</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </method>
      <property name="child-model"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="TreeModel"/>
      </property>
      <property name="virtual-root"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="TreePath"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="TreeModelFilterPrivate"
              c:type="GtkTreeModelFilterPrivate*"/>
      </field>
    </class>
    <record name="TreeModelFilterClass"
            c:type="GtkTreeModelFilterClass"
            glib:is-gtype-struct-for="TreeModelFilter">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="visible">
        <callback name="visible">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="TreeModelFilter" c:type="GtkTreeModelFilter*"/>
            </parameter>
            <parameter name="child_model" transfer-ownership="none">
              <type name="TreeModel" c:type="GtkTreeModel*"/>
            </parameter>
            <parameter name="iter" transfer-ownership="none">
              <type name="TreeIter" c:type="GtkTreeIter*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="modify">
        <callback name="modify">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="TreeModelFilter" c:type="GtkTreeModelFilter*"/>
            </parameter>
            <parameter name="child_model" transfer-ownership="none">
              <type name="TreeModel" c:type="GtkTreeModel*"/>
            </parameter>
            <parameter name="iter" transfer-ownership="none">
              <type name="TreeIter" c:type="GtkTreeIter*"/>
            </parameter>
            <parameter name="value" transfer-ownership="none">
              <type name="GObject.Value" c:type="GValue*"/>
            </parameter>
            <parameter name="column" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_gtk_reserved0" introspectable="0">
        <callback name="_gtk_reserved0">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved1" introspectable="0">
        <callback name="_gtk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <callback name="TreeModelFilterModifyFunc"
              c:type="GtkTreeModelFilterModifyFunc">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="model" transfer-ownership="none">
          <type name="TreeModel" c:type="GtkTreeModel*"/>
        </parameter>
        <parameter name="iter" transfer-ownership="none">
          <type name="TreeIter" c:type="GtkTreeIter*"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <type name="GObject.Value" c:type="GValue*"/>
        </parameter>
        <parameter name="column" transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <record name="TreeModelFilterPrivate"
            c:type="GtkTreeModelFilterPrivate"
            disguised="1">
    </record>
    <callback name="TreeModelFilterVisibleFunc"
              c:type="GtkTreeModelFilterVisibleFunc">
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="model" transfer-ownership="none">
          <type name="TreeModel" c:type="GtkTreeModel*"/>
        </parameter>
        <parameter name="iter" transfer-ownership="none">
          <type name="TreeIter" c:type="GtkTreeIter*"/>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <bitfield name="TreeModelFlags"
              glib:type-name="GtkTreeModelFlags"
              glib:get-type="gtk_tree_model_flags_get_type"
              c:type="GtkTreeModelFlags">
      <member name="iters_persist"
              value="1"
              c:identifier="GTK_TREE_MODEL_ITERS_PERSIST"
              glib:nick="iters-persist"/>
      <member name="list_only"
              value="2"
              c:identifier="GTK_TREE_MODEL_LIST_ONLY"
              glib:nick="list-only"/>
    </bitfield>
    <callback name="TreeModelForeachFunc" c:type="GtkTreeModelForeachFunc">
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="model" transfer-ownership="none">
          <type name="TreeModel" c:type="GtkTreeModel*"/>
        </parameter>
        <parameter name="path" transfer-ownership="none">
          <type name="TreePath" c:type="GtkTreePath*"/>
        </parameter>
        <parameter name="iter" transfer-ownership="none">
          <type name="TreeIter" c:type="GtkTreeIter*"/>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <record name="TreeModelIface"
            c:type="GtkTreeModelIface"
            glib:is-gtype-struct-for="TreeModel">
      <field name="g_iface">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="row_changed">
        <callback name="row_changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="tree_model" transfer-ownership="none">
              <type name="TreeModel" c:type="GtkTreeModel*"/>
            </parameter>
            <parameter name="path" transfer-ownership="none">
              <type name="TreePath" c:type="GtkTreePath*"/>
            </parameter>
            <parameter name="iter" transfer-ownership="none">
              <type name="TreeIter" c:type="GtkTreeIter*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="row_inserted">
        <callback name="row_inserted">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="tree_model" transfer-ownership="none">
              <type name="TreeModel" c:type="GtkTreeModel*"/>
            </parameter>
            <parameter name="path" transfer-ownership="none">
              <type name="TreePath" c:type="GtkTreePath*"/>
            </parameter>
            <parameter name="iter" transfer-ownership="none">
              <type name="TreeIter" c:type="GtkTreeIter*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="row_has_child_toggled">
        <callback name="row_has_child_toggled">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="tree_model" transfer-ownership="none">
              <type name="TreeModel" c:type="GtkTreeModel*"/>
            </parameter>
            <parameter name="path" transfer-ownership="none">
              <type name="TreePath" c:type="GtkTreePath*"/>
            </parameter>
            <parameter name="iter" transfer-ownership="none">
              <type name="TreeIter" c:type="GtkTreeIter*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="row_deleted">
        <callback name="row_deleted">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="tree_model" transfer-ownership="none">
              <type name="TreeModel" c:type="GtkTreeModel*"/>
            </parameter>
            <parameter name="path" transfer-ownership="none">
              <type name="TreePath" c:type="GtkTreePath*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="rows_reordered">
        <callback name="rows_reordered">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="tree_model" transfer-ownership="none">
              <type name="TreeModel" c:type="GtkTreeModel*"/>
            </parameter>
            <parameter name="path" transfer-ownership="none">
              <type name="TreePath" c:type="GtkTreePath*"/>
            </parameter>
            <parameter name="iter" transfer-ownership="none">
              <type name="TreeIter" c:type="GtkTreeIter*"/>
            </parameter>
            <parameter name="new_order" transfer-ownership="none">
              <type name="gint" c:type="gint*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_flags">
        <callback name="get_flags">
          <return-value transfer-ownership="none">
            <doc xml:whitespace="preserve">The flags supported by this interface.</doc>
            <type name="TreeModelFlags" c:type="GtkTreeModelFlags"/>
          </return-value>
          <parameters>
            <parameter name="tree_model" transfer-ownership="none">
              <type name="TreeModel" c:type="GtkTreeModel*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_n_columns">
        <callback name="get_n_columns">
          <return-value transfer-ownership="none">
            <doc xml:whitespace="preserve">The number of columns.</doc>
            <type name="gint" c:type="gint"/>
          </return-value>
          <parameters>
            <parameter name="tree_model" transfer-ownership="none">
              <type name="TreeModel" c:type="GtkTreeModel*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_column_type">
        <callback name="get_column_type">
          <return-value transfer-ownership="none">
            <doc xml:whitespace="preserve">The type of the column.</doc>
            <type name="GType" c:type="GType"/>
          </return-value>
          <parameters>
            <parameter name="tree_model" transfer-ownership="none">
              <type name="TreeModel" c:type="GtkTreeModel*"/>
            </parameter>
            <parameter name="index_" transfer-ownership="none">
              <doc xml:whitespace="preserve">The column index.</doc>
              <type name="gint" c:type="gint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_iter">
        <callback name="get_iter">
          <return-value transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE, if @iter was set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="tree_model" transfer-ownership="none">
              <type name="TreeModel" c:type="GtkTreeModel*"/>
            </parameter>
            <parameter name="iter"
                       direction="out"
                       caller-allocates="1"
                       transfer-ownership="none">
              <doc xml:whitespace="preserve">The uninitialized #GtkTreeIter.</doc>
              <type name="TreeIter" c:type="GtkTreeIter*"/>
            </parameter>
            <parameter name="path" transfer-ownership="none">
              <doc xml:whitespace="preserve">The #GtkTreePath.</doc>
              <type name="TreePath" c:type="GtkTreePath*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_path">
        <callback name="get_path">
          <return-value transfer-ownership="full">
            <doc xml:whitespace="preserve">a newly-created #GtkTreePath.</doc>
            <type name="TreePath" c:type="GtkTreePath*"/>
          </return-value>
          <parameters>
            <parameter name="tree_model" transfer-ownership="none">
              <type name="TreeModel" c:type="GtkTreeModel*"/>
            </parameter>
            <parameter name="iter" transfer-ownership="none">
              <doc xml:whitespace="preserve">The #GtkTreeIter.</doc>
              <type name="TreeIter" c:type="GtkTreeIter*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_value">
        <callback name="get_value">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="tree_model" transfer-ownership="none">
              <type name="TreeModel" c:type="GtkTreeModel*"/>
            </parameter>
            <parameter name="iter" transfer-ownership="none">
              <doc xml:whitespace="preserve">The #GtkTreeIter.</doc>
              <type name="TreeIter" c:type="GtkTreeIter*"/>
            </parameter>
            <parameter name="column" transfer-ownership="none">
              <doc xml:whitespace="preserve">The column to lookup the value at.</doc>
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="value"
                       direction="out"
                       caller-allocates="1"
                       transfer-ownership="none">
              <doc xml:whitespace="preserve">An empty #GValue to set.</doc>
              <type name="GObject.Value" c:type="GValue*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="iter_next">
        <callback name="iter_next">
          <return-value transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE if @iter has been changed to the next node.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="tree_model" transfer-ownership="none">
              <type name="TreeModel" c:type="GtkTreeModel*"/>
            </parameter>
            <parameter name="iter" transfer-ownership="none">
              <doc xml:whitespace="preserve">The #GtkTreeIter.</doc>
              <type name="TreeIter" c:type="GtkTreeIter*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="iter_children">
        <callback name="iter_children">
          <return-value transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE, if @child has been set to the first child.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="tree_model" transfer-ownership="none">
              <type name="TreeModel" c:type="GtkTreeModel*"/>
            </parameter>
            <parameter name="iter"
                       direction="out"
                       caller-allocates="1"
                       transfer-ownership="none">
              <doc xml:whitespace="preserve">The new #GtkTreeIter to be set to the child.</doc>
              <type name="TreeIter" c:type="GtkTreeIter*"/>
            </parameter>
            <parameter name="parent" transfer-ownership="none" allow-none="1">
              <doc xml:whitespace="preserve">The #GtkTreeIter, or %NULL</doc>
              <type name="TreeIter" c:type="GtkTreeIter*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="iter_has_child">
        <callback name="iter_has_child">
          <return-value transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE if @iter has children.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="tree_model" transfer-ownership="none">
              <type name="TreeModel" c:type="GtkTreeModel*"/>
            </parameter>
            <parameter name="iter" transfer-ownership="none">
              <doc xml:whitespace="preserve">The #GtkTreeIter to test for children.</doc>
              <type name="TreeIter" c:type="GtkTreeIter*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="iter_n_children">
        <callback name="iter_n_children">
          <return-value transfer-ownership="none">
            <doc xml:whitespace="preserve">The number of children of @iter.</doc>
            <type name="gint" c:type="gint"/>
          </return-value>
          <parameters>
            <parameter name="tree_model" transfer-ownership="none">
              <type name="TreeModel" c:type="GtkTreeModel*"/>
            </parameter>
            <parameter name="iter" transfer-ownership="none" allow-none="1">
              <doc xml:whitespace="preserve">The #GtkTreeIter, or %NULL.</doc>
              <type name="TreeIter" c:type="GtkTreeIter*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="iter_nth_child">
        <callback name="iter_nth_child">
          <return-value transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE, if @parent has an @n&lt;!-- --&gt;th child.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="tree_model" transfer-ownership="none">
              <type name="TreeModel" c:type="GtkTreeModel*"/>
            </parameter>
            <parameter name="iter"
                       direction="out"
                       caller-allocates="1"
                       transfer-ownership="none">
              <doc xml:whitespace="preserve">The #GtkTreeIter to set to the nth child.</doc>
              <type name="TreeIter" c:type="GtkTreeIter*"/>
            </parameter>
            <parameter name="parent" transfer-ownership="none" allow-none="1">
              <doc xml:whitespace="preserve">The #GtkTreeIter to get the child from, or %NULL.</doc>
              <type name="TreeIter" c:type="GtkTreeIter*"/>
            </parameter>
            <parameter name="n" transfer-ownership="none">
              <doc xml:whitespace="preserve">Then index of the desired child.</doc>
              <type name="gint" c:type="gint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="iter_parent">
        <callback name="iter_parent">
          <return-value transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE, if @iter is set to the parent of @child.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="tree_model" transfer-ownership="none">
              <type name="TreeModel" c:type="GtkTreeModel*"/>
            </parameter>
            <parameter name="iter"
                       direction="out"
                       caller-allocates="1"
                       transfer-ownership="none">
              <doc xml:whitespace="preserve">The new #GtkTreeIter to set to the parent.</doc>
              <type name="TreeIter" c:type="GtkTreeIter*"/>
            </parameter>
            <parameter name="child" transfer-ownership="none">
              <doc xml:whitespace="preserve">The #GtkTreeIter.</doc>
              <type name="TreeIter" c:type="GtkTreeIter*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="ref_node">
        <callback name="ref_node">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="tree_model" transfer-ownership="none">
              <type name="TreeModel" c:type="GtkTreeModel*"/>
            </parameter>
            <parameter name="iter" transfer-ownership="none">
              <doc xml:whitespace="preserve">The #GtkTreeIter.</doc>
              <type name="TreeIter" c:type="GtkTreeIter*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="unref_node">
        <callback name="unref_node">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="tree_model" transfer-ownership="none">
              <type name="TreeModel" c:type="GtkTreeModel*"/>
            </parameter>
            <parameter name="iter" transfer-ownership="none">
              <doc xml:whitespace="preserve">The #GtkTreeIter.</doc>
              <type name="TreeIter" c:type="GtkTreeIter*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="TreeModelSort"
           c:symbol-prefix="tree_model_sort"
           c:type="GtkTreeModelSort"
           parent="GObject.Object"
           glib:type-name="GtkTreeModelSort"
           glib:get-type="gtk_tree_model_sort_get_type"
           glib:type-struct="TreeModelSortClass">
      <implements name="TreeDragSource"/>
      <implements name="TreeModel"/>
      <implements name="TreeSortable"/>
      <method name="clear_cache"
              c:identifier="gtk_tree_model_sort_clear_cache">
        <doc xml:whitespace="preserve">This function should almost never be called.  It clears the @tree_model_sort
of any cached iterators that haven't been reffed with
gtk_tree_model_ref_node().  This might be useful if the child model being
sorted is static (and doesn't change often) and there has been a lot of
unreffed access to nodes.  As a side effect of this function, all unreffed
iters will be invalid.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="convert_child_iter_to_iter"
              c:identifier="gtk_tree_model_sort_convert_child_iter_to_iter">
        <doc xml:whitespace="preserve">Sets @sort_iter to point to the row in @tree_model_sort that corresponds to
the row pointed at by @child_iter.  If @sort_iter was not set, %FALSE
valid iterator pointer to a visible row in the child model.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE, if @sort_iter was set, i.e. if @sort_iter is a</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="sort_iter"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:whitespace="preserve">An uninitialized #GtkTreeIter.</doc>
            <type name="TreeIter" c:type="GtkTreeIter*"/>
          </parameter>
          <parameter name="child_iter" transfer-ownership="none">
            <doc xml:whitespace="preserve">A valid #GtkTreeIter pointing to a row on the child model</doc>
            <type name="TreeIter" c:type="GtkTreeIter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="convert_child_path_to_path"
              c:identifier="gtk_tree_model_sort_convert_child_path_to_path">
        <doc xml:whitespace="preserve">Converts @child_path to a path relative to @tree_model_sort.  That is,
point to the same row in the sorted model.  If @child_path isn't a valid 
path on the child model, then %NULL is returned.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A newly allocated #GtkTreePath, or %NULL</doc>
          <type name="TreePath" c:type="GtkTreePath*"/>
        </return-value>
        <parameters>
          <parameter name="child_path" transfer-ownership="none">
            <doc xml:whitespace="preserve">A #GtkTreePath to convert</doc>
            <type name="TreePath" c:type="GtkTreePath*"/>
          </parameter>
        </parameters>
      </method>
      <method name="convert_iter_to_child_iter"
              c:identifier="gtk_tree_model_sort_convert_iter_to_child_iter">
        <doc xml:whitespace="preserve">Sets @child_iter to point to the row pointed to by @sorted_iter.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="child_iter"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:whitespace="preserve">An uninitialized #GtkTreeIter</doc>
            <type name="TreeIter" c:type="GtkTreeIter*"/>
          </parameter>
          <parameter name="sorted_iter" transfer-ownership="none">
            <doc xml:whitespace="preserve">A valid #GtkTreeIter pointing to a row on @tree_model_sort.</doc>
            <type name="TreeIter" c:type="GtkTreeIter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="convert_path_to_child_path"
              c:identifier="gtk_tree_model_sort_convert_path_to_child_path">
        <doc xml:whitespace="preserve">Converts @sorted_path to a path on the child model of @tree_model_sort.  
That is, @sorted_path points to a location in @tree_model_sort.  The 
returned path will point to the same location in the model not being 
sorted.  If @sorted_path does not point to a location in the child model, 
%NULL is returned.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A newly allocated #GtkTreePath, or %NULL</doc>
          <type name="TreePath" c:type="GtkTreePath*"/>
        </return-value>
        <parameters>
          <parameter name="sorted_path" transfer-ownership="none">
            <doc xml:whitespace="preserve">A #GtkTreePath to convert</doc>
            <type name="TreePath" c:type="GtkTreePath*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_model" c:identifier="gtk_tree_model_sort_get_model">
        <doc xml:whitespace="preserve">Returns the model the #GtkTreeModelSort is sorting.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the "child model" being sorted</doc>
          <type name="TreeModel" c:type="GtkTreeModel*"/>
        </return-value>
      </method>
      <method name="iter_is_valid"
              c:identifier="gtk_tree_model_sort_iter_is_valid"
              version="2.2">
        <doc xml:whitespace="preserve">&lt;warning&gt;&lt;para&gt;
This function is slow. Only use it for debugging and/or testing purposes.
&lt;/para&gt;&lt;/warning&gt;
Checks if the given iter is a valid iter for this #GtkTreeModelSort.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the iter is valid, %FALSE if the iter is invalid.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="iter" transfer-ownership="none">
            <doc xml:whitespace="preserve">A #GtkTreeIter.</doc>
            <type name="TreeIter" c:type="GtkTreeIter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="reset_default_sort_func"
              c:identifier="gtk_tree_model_sort_reset_default_sort_func">
        <doc xml:whitespace="preserve">This resets the default sort function to be in the 'unsorted' state.  That
is, it is in the same order as the child model. It will re-sort the model
to be in the same order as the child model only if the #GtkTreeModelSort
is in 'unsorted' state.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <property name="model"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="TreeModel"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="root" readable="0" private="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="stamp" readable="0" private="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="child_flags" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="child_model" readable="0" private="1">
        <type name="TreeModel" c:type="GtkTreeModel*"/>
      </field>
      <field name="zero_ref_count" readable="0" private="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="sort_list" readable="0" private="1">
        <type name="GLib.List" c:type="GList*">
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </field>
      <field name="sort_column_id" readable="0" private="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="order" readable="0" private="1">
        <type name="SortType" c:type="GtkSortType"/>
      </field>
      <field name="default_sort_func" readable="0" private="1">
        <type name="TreeIterCompareFunc" c:type="GtkTreeIterCompareFunc"/>
      </field>
      <field name="default_sort_data" readable="0" private="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="default_sort_destroy" readable="0" private="1">
        <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
      </field>
      <field name="changed_id" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="inserted_id" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="has_child_toggled_id" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="deleted_id" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="reordered_id" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
    </class>
    <record name="TreeModelSortClass"
            c:type="GtkTreeModelSortClass"
            glib:is-gtype-struct-for="TreeModelSort">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="_gtk_reserved1" introspectable="0">
        <callback name="_gtk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved2" introspectable="0">
        <callback name="_gtk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved3" introspectable="0">
        <callback name="_gtk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved4" introspectable="0">
        <callback name="_gtk_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="TreePath"
            c:type="GtkTreePath"
            glib:type-name="GtkTreePath"
            glib:get-type="gtk_tree_path_get_type"
            c:symbol-prefix="tree_path">
      <constructor name="new" c:identifier="gtk_tree_path_new">
        <doc xml:whitespace="preserve">Creates a new #GtkTreePath.  This structure refers to a row.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A newly created #GtkTreePath.</doc>
          <type name="TreePath" c:type="GtkTreePath*"/>
        </return-value>
      </constructor>
      <constructor name="new_first" c:identifier="gtk_tree_path_new_first">
        <doc xml:whitespace="preserve">Creates a new #GtkTreePath.  The string representation of this path is "0"</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A new #GtkTreePath.</doc>
          <type name="TreePath" c:type="GtkTreePath*"/>
        </return-value>
      </constructor>
      <constructor name="new_from_indices"
                   c:identifier="gtk_tree_path_new_from_indices"
                   version="2.2"
                   introspectable="0">
        <doc xml:whitespace="preserve">Creates a new path with @first_index and @varargs as indices.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A newly created #GtkTreePath.</doc>
          <type name="TreePath" c:type="GtkTreePath*"/>
        </return-value>
        <parameters>
          <parameter name="first_index" transfer-ownership="none">
            <doc xml:whitespace="preserve">first integer</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter transfer-ownership="none">
            <varargs>
            </varargs>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_string"
                   c:identifier="gtk_tree_path_new_from_string">
        <doc xml:whitespace="preserve">Creates a new #GtkTreePath initialized to @path.  @path is expected to be a
colon separated list of numbers.  For example, the string "10:4:0" would
create a path of depth 3 pointing to the 11th child of the root node, the 5th
child of that 11th child, and the 1st child of that 5th child.  If an invalid
path string is passed in, %NULL is returned.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A newly-created #GtkTreePath, or %NULL</doc>
          <type name="TreePath" c:type="GtkTreePath*"/>
        </return-value>
        <parameters>
          <parameter name="path" transfer-ownership="none">
            <doc xml:whitespace="preserve">The string representation of a path.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="append_index" c:identifier="gtk_tree_path_append_index">
        <doc xml:whitespace="preserve">Appends a new index to a path.  As a result, the depth of the path is
increased.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="index_" transfer-ownership="none">
            <doc xml:whitespace="preserve">The index.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="compare" c:identifier="gtk_tree_path_compare">
        <doc xml:whitespace="preserve">Compares two paths.  If @a appears before @b in a tree, then -1 is returned.
If @b appears before @a, then 1 is returned.  If the two nodes are equal,
then 0 is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The relative positions of @a and @b</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <parameter name="b" transfer-ownership="none">
            <doc xml:whitespace="preserve">A #GtkTreePath to compare with.</doc>
            <type name="TreePath" c:type="GtkTreePath*"/>
          </parameter>
        </parameters>
      </method>
      <method name="copy" c:identifier="gtk_tree_path_copy">
        <doc xml:whitespace="preserve">Creates a new #GtkTreePath as a copy of @path.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A new #GtkTreePath.</doc>
          <type name="TreePath" c:type="GtkTreePath*"/>
        </return-value>
      </method>
      <method name="down" c:identifier="gtk_tree_path_down">
        <doc xml:whitespace="preserve">Moves @path to point to the first child of the current path.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="free" c:identifier="gtk_tree_path_free">
        <doc xml:whitespace="preserve">Frees @path.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="get_depth" c:identifier="gtk_tree_path_get_depth">
        <doc xml:whitespace="preserve">Returns the current depth of @path.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The depth of @path</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="get_indices"
              c:identifier="gtk_tree_path_get_indices"
              shadowed-by="get_indices_with_depth">
        <doc xml:whitespace="preserve">Returns the current indices of @path.  This is an array of integers, each
representing a node in a tree.  This value should not be freed.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The current indices, or %NULL.</doc>
          <type name="gint" c:type="gint*"/>
        </return-value>
      </method>
      <method name="get_indices_with_depth"
              c:identifier="gtk_tree_path_get_indices_with_depth"
              shadows="get_indices"
              version="3.0">
        <doc xml:whitespace="preserve">Returns the current indices of @path.
This is an array of integers, each representing a node in a tree.
It also returns the number of elements in the array.
The array should not be freed.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The current indices, or %NULL.</doc>
          <array length="0" c:type="gint*">
            <type name="gint"/>
          </array>
        </return-value>
        <parameters>
          <parameter name="depth"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:whitespace="preserve">Number of elements returned in the integer array</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_ancestor" c:identifier="gtk_tree_path_is_ancestor">
        <doc xml:whitespace="preserve">Returns %TRUE if @descendant is a descendant of @path.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if @descendant is contained inside @path</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="descendant" transfer-ownership="none">
            <doc xml:whitespace="preserve">another #GtkTreePath</doc>
            <type name="TreePath" c:type="GtkTreePath*"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_descendant" c:identifier="gtk_tree_path_is_descendant">
        <doc xml:whitespace="preserve">Returns %TRUE if @path is a descendant of @ancestor.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if @ancestor contains @path somewhere below it</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="ancestor" transfer-ownership="none">
            <doc xml:whitespace="preserve">another #GtkTreePath</doc>
            <type name="TreePath" c:type="GtkTreePath*"/>
          </parameter>
        </parameters>
      </method>
      <method name="next" c:identifier="gtk_tree_path_next">
        <doc xml:whitespace="preserve">Moves the @path to point to the next node at the current depth.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="prepend_index" c:identifier="gtk_tree_path_prepend_index">
        <doc xml:whitespace="preserve">Prepends a new index to a path.  As a result, the depth of the path is
increased.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="index_" transfer-ownership="none">
            <doc xml:whitespace="preserve">The index.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="prev" c:identifier="gtk_tree_path_prev">
        <doc xml:whitespace="preserve">Moves the @path to point to the previous node at the current depth, 
if it exists.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if @path has a previous node, and the move was made.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="to_string" c:identifier="gtk_tree_path_to_string">
        <doc xml:whitespace="preserve">Generates a string representation of the path.  This string is a ':'
separated list of numbers.  For example, "4:10:0:3" would be an acceptable return value for this string.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A newly-allocated string.  Must be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="up" c:identifier="gtk_tree_path_up">
        <doc xml:whitespace="preserve">Moves the @path to point to its parent node, if it has a parent.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if @path has a parent, and the move was made.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
    </record>
    <record name="TreeRowReference"
            c:type="GtkTreeRowReference"
            glib:type-name="GtkTreeRowReference"
            glib:get-type="gtk_tree_row_reference_get_type"
            c:symbol-prefix="tree_row_reference">
      <constructor name="new" c:identifier="gtk_tree_row_reference_new">
        <doc xml:whitespace="preserve">Creates a row reference based on @path.  This reference will keep pointing 
to the node pointed to by @path, so long as it exists.  It listens to all
signals emitted by @model, and updates its path appropriately.  If @path
isn't a valid path in @model, then %NULL is returned.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A newly allocated #GtkTreeRowReference, or %NULL</doc>
          <type name="TreeRowReference" c:type="GtkTreeRowReference*"/>
        </return-value>
        <parameters>
          <parameter name="model" transfer-ownership="none">
            <doc xml:whitespace="preserve">A #GtkTreeModel</doc>
            <type name="TreeModel" c:type="GtkTreeModel*"/>
          </parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:whitespace="preserve">A valid #GtkTreePath to monitor</doc>
            <type name="TreePath" c:type="GtkTreePath*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_proxy"
                   c:identifier="gtk_tree_row_reference_new_proxy">
        <doc xml:whitespace="preserve">You do not need to use this function.  Creates a row reference based on
so long as it exists.  If @path isn't a valid path in @model, then %NULL is
returned.  However, unlike references created with
gtk_tree_row_reference_new(), it does not listen to the model for changes.
The creator of the row reference must do this explicitly using
gtk_tree_row_reference_inserted(), gtk_tree_row_reference_deleted(),
gtk_tree_row_reference_reordered().
These functions must be called exactly once per proxy when the
corresponding signal on the model is emitted. This single call
updates all row references for that proxy. Since built-in GTK+
objects like #GtkTreeView already use this mechanism internally,
using them as the proxy object will produce unpredictable results.
Further more, passing the same object as @model and @proxy
doesn't work for reasons of internal implementation.
This type of row reference is primarily meant by structures that need to
carefully monitor exactly when a row reference updates itself, and is not
generally needed by most applications.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A newly allocated #GtkTreeRowReference, or %NULL</doc>
          <type name="TreeRowReference" c:type="GtkTreeRowReference*"/>
        </return-value>
        <parameters>
          <parameter name="proxy" transfer-ownership="none">
            <doc xml:whitespace="preserve">A proxy #GObject</doc>
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
          <parameter name="model" transfer-ownership="none">
            <doc xml:whitespace="preserve">A #GtkTreeModel</doc>
            <type name="TreeModel" c:type="GtkTreeModel*"/>
          </parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:whitespace="preserve">A valid #GtkTreePath to monitor</doc>
            <type name="TreePath" c:type="GtkTreePath*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="copy"
              c:identifier="gtk_tree_row_reference_copy"
              version="2.2">
        <doc xml:whitespace="preserve">Copies a #GtkTreeRowReference.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a copy of @reference.</doc>
          <type name="TreeRowReference" c:type="GtkTreeRowReference*"/>
        </return-value>
      </method>
      <method name="free" c:identifier="gtk_tree_row_reference_free">
        <doc xml:whitespace="preserve">Free's @reference. @reference may be %NULL.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="get_model"
              c:identifier="gtk_tree_row_reference_get_model"
              version="2.8">
        <doc xml:whitespace="preserve">Returns the model that the row reference is monitoring.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the model</doc>
          <type name="TreeModel" c:type="GtkTreeModel*"/>
        </return-value>
      </method>
      <method name="get_path" c:identifier="gtk_tree_row_reference_get_path">
        <doc xml:whitespace="preserve">Returns a path that the row reference currently points to, or %NULL if the
path pointed to is no longer valid.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A current path, or %NULL.</doc>
          <type name="TreePath" c:type="GtkTreePath*"/>
        </return-value>
      </method>
      <method name="valid" c:identifier="gtk_tree_row_reference_valid">
        <doc xml:whitespace="preserve">Returns %TRUE if the @reference is non-%NULL and refers to a current valid
path.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if @reference points to a valid path.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
    </record>
    <class name="TreeSelection"
           c:symbol-prefix="tree_selection"
           c:type="GtkTreeSelection"
           parent="GObject.Object"
           glib:type-name="GtkTreeSelection"
           glib:get-type="gtk_tree_selection_get_type"
           glib:type-struct="TreeSelectionClass">
      <method name="count_selected_rows"
              c:identifier="gtk_tree_selection_count_selected_rows"
              version="2.2">
        <doc xml:whitespace="preserve">Returns the number of rows that have been selected in @tree.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The number of rows selected.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="get_mode" c:identifier="gtk_tree_selection_get_mode">
        <doc xml:whitespace="preserve">Gets the selection mode for @selection. See
gtk_tree_selection_set_mode().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the current selection mode</doc>
          <type name="SelectionMode" c:type="GtkSelectionMode"/>
        </return-value>
      </method>
      <method name="get_select_function"
              c:identifier="gtk_tree_selection_get_select_function"
              version="2.14"
              introspectable="0">
        <doc xml:whitespace="preserve">Returns the current selection function.</doc>
        <return-value>
          <doc xml:whitespace="preserve">The function.</doc>
          <type name="TreeSelectionFunc" c:type="GtkTreeSelectionFunc"/>
        </return-value>
      </method>
      <method name="get_selected"
              c:identifier="gtk_tree_selection_get_selected">
        <doc xml:whitespace="preserve">Sets @iter to the currently selected node if @selection is set to
#GTK_SELECTION_SINGLE or #GTK_SELECTION_BROWSE.  @iter may be NULL if you
just want to test if @selection has any selected nodes.  @model is filled
with the current model as a convenience.  This function will not work if you
use @selection is #GTK_SELECTION_MULTIPLE.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">TRUE, if there is a selected node.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="model"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">A pointer to set to the #GtkTreeModel, or NULL.</doc>
            <type name="TreeModel" c:type="GtkTreeModel**"/>
          </parameter>
          <parameter name="iter"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">The #GtkTreeIter, or NULL.</doc>
            <type name="TreeIter" c:type="GtkTreeIter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_selected_rows"
              c:identifier="gtk_tree_selection_get_selected_rows"
              version="2.2">
        <doc xml:whitespace="preserve">Creates a list of path of all selected rows. Additionally, if you are
planning on modifying the model after calling this function, you may
want to convert the returned list into a list of #GtkTreeRowReference&lt;!-- --&gt;s.
To do this, you can use gtk_tree_row_reference_new().
To free the return value, use:
|[
g_list_foreach (list, (GFunc) gtk_tree_path_free, NULL);
g_list_free (list);
]|</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A #GList containing a #GtkTreePath for each selected row.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="TreePath"/>
          </type>
        </return-value>
        <parameters>
          <parameter name="model"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">A pointer to set to the #GtkTreeModel, or %NULL.</doc>
            <type name="TreeModel" c:type="GtkTreeModel**"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_tree_view"
              c:identifier="gtk_tree_selection_get_tree_view">
        <doc xml:whitespace="preserve">Returns the tree view associated with @selection.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">A #GtkTreeView</doc>
          <type name="TreeView" c:type="GtkTreeView*"/>
        </return-value>
      </method>
      <method name="get_user_data"
              c:identifier="gtk_tree_selection_get_user_data"
              introspectable="0">
        <doc xml:whitespace="preserve">Returns the user data for the selection function.</doc>
        <return-value>
          <doc xml:whitespace="preserve">The user data.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </return-value>
      </method>
      <method name="iter_is_selected"
              c:identifier="gtk_tree_selection_iter_is_selected">
        <doc xml:whitespace="preserve">Returns %TRUE if the row at @iter is currently selected.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE, if @iter is selected</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="iter" transfer-ownership="none">
            <doc xml:whitespace="preserve">A valid #GtkTreeIter</doc>
            <type name="TreeIter" c:type="GtkTreeIter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="path_is_selected"
              c:identifier="gtk_tree_selection_path_is_selected">
        <doc xml:whitespace="preserve">Returns %TRUE if the row pointed to by @path is currently selected.  If @path
does not point to a valid location, %FALSE is returned</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if @path is selected.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="path" transfer-ownership="none">
            <doc xml:whitespace="preserve">A #GtkTreePath to check selection on.</doc>
            <type name="TreePath" c:type="GtkTreePath*"/>
          </parameter>
        </parameters>
      </method>
      <method name="select_all" c:identifier="gtk_tree_selection_select_all">
        <doc xml:whitespace="preserve">Selects all the nodes. @selection must be set to #GTK_SELECTION_MULTIPLE
mode.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="select_iter" c:identifier="gtk_tree_selection_select_iter">
        <doc xml:whitespace="preserve">Selects the specified iterator.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="iter" transfer-ownership="none">
            <doc xml:whitespace="preserve">The #GtkTreeIter to be selected.</doc>
            <type name="TreeIter" c:type="GtkTreeIter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="select_path" c:identifier="gtk_tree_selection_select_path">
        <doc xml:whitespace="preserve">Select the row at @path.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="path" transfer-ownership="none">
            <doc xml:whitespace="preserve">The #GtkTreePath to be selected.</doc>
            <type name="TreePath" c:type="GtkTreePath*"/>
          </parameter>
        </parameters>
      </method>
      <method name="select_range"
              c:identifier="gtk_tree_selection_select_range">
        <doc xml:whitespace="preserve">Selects a range of nodes, determined by @start_path and @end_path inclusive.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="start_path" transfer-ownership="none">
            <doc xml:whitespace="preserve">The initial node of the range.</doc>
            <type name="TreePath" c:type="GtkTreePath*"/>
          </parameter>
          <parameter name="end_path" transfer-ownership="none">
            <doc xml:whitespace="preserve">The final node of the range.</doc>
            <type name="TreePath" c:type="GtkTreePath*"/>
          </parameter>
        </parameters>
      </method>
      <method name="selected_foreach"
              c:identifier="gtk_tree_selection_selected_foreach">
        <doc xml:whitespace="preserve">Calls a function for each selected node. Note that you cannot modify
the tree or selection from within this function. As a result,
gtk_tree_selection_get_selected_rows() might be more useful.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="func"
                     transfer-ownership="none"
                     scope="call"
                     closure="1">
            <doc xml:whitespace="preserve">The function to call for each selected node.</doc>
            <type name="TreeSelectionForeachFunc"
                  c:type="GtkTreeSelectionForeachFunc"/>
          </parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:whitespace="preserve">user data to pass to the function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_mode" c:identifier="gtk_tree_selection_set_mode">
        <doc xml:whitespace="preserve">Sets the selection mode of the @selection.  If the previous type was
#GTK_SELECTION_MULTIPLE, then the anchor is kept selected, if it was
previously selected.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="type" transfer-ownership="none">
            <doc xml:whitespace="preserve">The selection mode</doc>
            <type name="SelectionMode" c:type="GtkSelectionMode"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_select_function"
              c:identifier="gtk_tree_selection_set_select_function">
        <doc xml:whitespace="preserve">Sets the selection function.
If set, this function is called before any node is selected or unselected,
giving some control over which nodes are selected. The select function
should return %TRUE if the state of the node may be toggled, and %FALSE
if the state of the node should be left unchanged.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="func"
                     transfer-ownership="none"
                     scope="notified"
                     closure="1"
                     destroy="2">
            <doc xml:whitespace="preserve">The selection function. May be %NULL</doc>
            <type name="TreeSelectionFunc" c:type="GtkTreeSelectionFunc"/>
          </parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:whitespace="preserve">The selection function's data. May be %NULL</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="destroy" transfer-ownership="none" scope="async">
            <doc xml:whitespace="preserve">The destroy function for user data.  May be %NULL</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </method>
      <method name="unselect_all"
              c:identifier="gtk_tree_selection_unselect_all">
        <doc xml:whitespace="preserve">Unselects all the nodes.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="unselect_iter"
              c:identifier="gtk_tree_selection_unselect_iter">
        <doc xml:whitespace="preserve">Unselects the specified iterator.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="iter" transfer-ownership="none">
            <doc xml:whitespace="preserve">The #GtkTreeIter to be unselected.</doc>
            <type name="TreeIter" c:type="GtkTreeIter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unselect_path"
              c:identifier="gtk_tree_selection_unselect_path">
        <doc xml:whitespace="preserve">Unselects the row at @path.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="path" transfer-ownership="none">
            <doc xml:whitespace="preserve">The #GtkTreePath to be unselected.</doc>
            <type name="TreePath" c:type="GtkTreePath*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unselect_range"
              c:identifier="gtk_tree_selection_unselect_range"
              version="2.2">
        <doc xml:whitespace="preserve">Unselects a range of nodes, determined by @start_path and @end_path
inclusive.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="start_path" transfer-ownership="none">
            <doc xml:whitespace="preserve">The initial node of the range.</doc>
            <type name="TreePath" c:type="GtkTreePath*"/>
          </parameter>
          <parameter name="end_path" transfer-ownership="none">
            <doc xml:whitespace="preserve">The initial node of the range.</doc>
            <type name="TreePath" c:type="GtkTreePath*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="tree_view">
        <type name="TreeView" c:type="GtkTreeView*"/>
      </field>
      <field name="type">
        <type name="SelectionMode" c:type="GtkSelectionMode"/>
      </field>
      <field name="user_func">
        <type name="TreeSelectionFunc" c:type="GtkTreeSelectionFunc"/>
      </field>
      <field name="user_data">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="destroy">
        <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
      </field>
      <glib:signal name="changed">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="TreeSelectionClass"
            c:type="GtkTreeSelectionClass"
            glib:is-gtype-struct-for="TreeSelection">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="changed">
        <callback name="changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="selection" transfer-ownership="none">
              <type name="TreeSelection" c:type="GtkTreeSelection*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_gtk_reserved1" introspectable="0">
        <callback name="_gtk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved2" introspectable="0">
        <callback name="_gtk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved3" introspectable="0">
        <callback name="_gtk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved4" introspectable="0">
        <callback name="_gtk_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <callback name="TreeSelectionForeachFunc"
              c:type="GtkTreeSelectionForeachFunc">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="model" transfer-ownership="none">
          <type name="TreeModel" c:type="GtkTreeModel*"/>
        </parameter>
        <parameter name="path" transfer-ownership="none">
          <type name="TreePath" c:type="GtkTreePath*"/>
        </parameter>
        <parameter name="iter" transfer-ownership="none">
          <type name="TreeIter" c:type="GtkTreeIter*"/>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="TreeSelectionFunc" c:type="GtkTreeSelectionFunc">
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="selection" transfer-ownership="none">
          <type name="TreeSelection" c:type="GtkTreeSelection*"/>
        </parameter>
        <parameter name="model" transfer-ownership="none">
          <type name="TreeModel" c:type="GtkTreeModel*"/>
        </parameter>
        <parameter name="path" transfer-ownership="none">
          <type name="TreePath" c:type="GtkTreePath*"/>
        </parameter>
        <parameter name="path_currently_selected" transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <interface name="TreeSortable"
               c:symbol-prefix="tree_sortable"
               c:type="GtkTreeSortable"
               glib:type-name="GtkTreeSortable"
               glib:get-type="gtk_tree_sortable_get_type"
               glib:type-struct="TreeSortableIface">
      <prerequisite name="TreeModel"/>
      <virtual-method name="get_sort_column_id" invoker="get_sort_column_id">
        <doc xml:whitespace="preserve">Fills in @sort_column_id and @order with the current sort column and the
order. It returns %TRUE unless the @sort_column_id is 
%GTK_TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID or 
%GTK_TREE_SORTABLE_UNSORTED_SORT_COLUMN_ID.
column ids.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the sort column is not one of the special sort</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="sort_column_id" transfer-ownership="none">
            <doc xml:whitespace="preserve">The sort column id to be filled in</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="order" transfer-ownership="none">
            <doc xml:whitespace="preserve">The #GtkSortType to be filled in</doc>
            <type name="SortType" c:type="GtkSortType*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="has_default_sort_func"
                      invoker="has_default_sort_func">
        <doc xml:whitespace="preserve">Returns %TRUE if the model has a default sort function. This is used
primarily by GtkTreeViewColumns in order to determine if a model can 
go back to the default state, or not.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE, if the model has a default sort function</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </virtual-method>
      <virtual-method name="set_default_sort_func"
                      invoker="set_default_sort_func">
        <doc xml:whitespace="preserve">Sets the default comparison function used when sorting to be @sort_func.  
If the current sort column id of @sortable is
%GTK_TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID, then the model will sort using 
this function.
If @sort_func is %NULL, then there will be no default comparison function.
This means that once the model  has been sorted, it can't go back to the
default state. In this case, when the current sort column id of @sortable 
is %GTK_TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID, the model will be unsorted.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="sort_func"
                     transfer-ownership="none"
                     scope="notified"
                     closure="1"
                     destroy="2">
            <doc xml:whitespace="preserve">The comparison function</doc>
            <type name="TreeIterCompareFunc" c:type="GtkTreeIterCompareFunc"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     allow-none="1"
                     closure="1">
            <doc xml:whitespace="preserve">User data to pass to @sort_func, or %NULL</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="destroy"
                     transfer-ownership="none"
                     allow-none="1"
                     scope="async">
            <doc xml:whitespace="preserve">Destroy notifier of @user_data, or %NULL</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_sort_column_id" invoker="set_sort_column_id">
        <doc xml:whitespace="preserve">Sets the current sort column to be @sort_column_id. The @sortable will
resort itself to reflect this change, after emitting a
#GtkTreeSortable::sort-column-changed signal. @sort_column_id may either be
a regular column id, or one of the following special values:
&lt;variablelist&gt;
&lt;varlistentry&gt;
&lt;term&gt;%GTK_TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID&lt;/term&gt;
&lt;listitem&gt;the default sort function will be used, if it is set&lt;/listitem&gt;
&lt;/varlistentry&gt;
&lt;varlistentry&gt;
&lt;term&gt;%GTK_TREE_SORTABLE_UNSORTED_SORT_COLUMN_ID&lt;/term&gt;
&lt;listitem&gt;no sorting will occur&lt;/listitem&gt;
&lt;/varlistentry&gt;
&lt;/variablelist&gt;</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="sort_column_id" transfer-ownership="none">
            <doc xml:whitespace="preserve">the sort column id to set</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="order" transfer-ownership="none">
            <doc xml:whitespace="preserve">The sort order of the column</doc>
            <type name="SortType" c:type="GtkSortType"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_sort_func" invoker="set_sort_func">
        <doc xml:whitespace="preserve">Sets the comparison function used when sorting to be @sort_func. If the
current sort column id of @sortable is the same as @sort_column_id, then 
the model will sort using this function.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="sort_column_id" transfer-ownership="none">
            <doc xml:whitespace="preserve">the sort column id to set the function for</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="sort_func"
                     transfer-ownership="none"
                     scope="notified"
                     closure="2"
                     destroy="3">
            <doc xml:whitespace="preserve">The comparison function</doc>
            <type name="TreeIterCompareFunc" c:type="GtkTreeIterCompareFunc"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     allow-none="1"
                     closure="2">
            <doc xml:whitespace="preserve">User data to pass to @sort_func, or %NULL</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="destroy"
                     transfer-ownership="none"
                     allow-none="1"
                     scope="async">
            <doc xml:whitespace="preserve">Destroy notifier of @user_data, or %NULL</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="get_sort_column_id"
              c:identifier="gtk_tree_sortable_get_sort_column_id">
        <doc xml:whitespace="preserve">Fills in @sort_column_id and @order with the current sort column and the
order. It returns %TRUE unless the @sort_column_id is 
%GTK_TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID or 
%GTK_TREE_SORTABLE_UNSORTED_SORT_COLUMN_ID.
column ids.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the sort column is not one of the special sort</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="sort_column_id" transfer-ownership="none">
            <doc xml:whitespace="preserve">The sort column id to be filled in</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="order" transfer-ownership="none">
            <doc xml:whitespace="preserve">The #GtkSortType to be filled in</doc>
            <type name="SortType" c:type="GtkSortType*"/>
          </parameter>
        </parameters>
      </method>
      <method name="has_default_sort_func"
              c:identifier="gtk_tree_sortable_has_default_sort_func">
        <doc xml:whitespace="preserve">Returns %TRUE if the model has a default sort function. This is used
primarily by GtkTreeViewColumns in order to determine if a model can 
go back to the default state, or not.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE, if the model has a default sort function</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="set_default_sort_func"
              c:identifier="gtk_tree_sortable_set_default_sort_func">
        <doc xml:whitespace="preserve">Sets the default comparison function used when sorting to be @sort_func.  
If the current sort column id of @sortable is
%GTK_TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID, then the model will sort using 
this function.
If @sort_func is %NULL, then there will be no default comparison function.
This means that once the model  has been sorted, it can't go back to the
default state. In this case, when the current sort column id of @sortable 
is %GTK_TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID, the model will be unsorted.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="sort_func"
                     transfer-ownership="none"
                     scope="notified"
                     closure="1"
                     destroy="2">
            <doc xml:whitespace="preserve">The comparison function</doc>
            <type name="TreeIterCompareFunc" c:type="GtkTreeIterCompareFunc"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">User data to pass to @sort_func, or %NULL</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="destroy"
                     transfer-ownership="none"
                     allow-none="1"
                     scope="async">
            <doc xml:whitespace="preserve">Destroy notifier of @user_data, or %NULL</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_sort_column_id"
              c:identifier="gtk_tree_sortable_set_sort_column_id">
        <doc xml:whitespace="preserve">Sets the current sort column to be @sort_column_id. The @sortable will
resort itself to reflect this change, after emitting a
#GtkTreeSortable::sort-column-changed signal. @sort_column_id may either be
a regular column id, or one of the following special values:
&lt;variablelist&gt;
&lt;varlistentry&gt;
&lt;term&gt;%GTK_TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID&lt;/term&gt;
&lt;listitem&gt;the default sort function will be used, if it is set&lt;/listitem&gt;
&lt;/varlistentry&gt;
&lt;varlistentry&gt;
&lt;term&gt;%GTK_TREE_SORTABLE_UNSORTED_SORT_COLUMN_ID&lt;/term&gt;
&lt;listitem&gt;no sorting will occur&lt;/listitem&gt;
&lt;/varlistentry&gt;
&lt;/variablelist&gt;</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="sort_column_id" transfer-ownership="none">
            <doc xml:whitespace="preserve">the sort column id to set</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="order" transfer-ownership="none">
            <doc xml:whitespace="preserve">The sort order of the column</doc>
            <type name="SortType" c:type="GtkSortType"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_sort_func"
              c:identifier="gtk_tree_sortable_set_sort_func">
        <doc xml:whitespace="preserve">Sets the comparison function used when sorting to be @sort_func. If the
current sort column id of @sortable is the same as @sort_column_id, then 
the model will sort using this function.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="sort_column_id" transfer-ownership="none">
            <doc xml:whitespace="preserve">the sort column id to set the function for</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="sort_func"
                     transfer-ownership="none"
                     scope="notified"
                     closure="2"
                     destroy="3">
            <doc xml:whitespace="preserve">The comparison function</doc>
            <type name="TreeIterCompareFunc" c:type="GtkTreeIterCompareFunc"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">User data to pass to @sort_func, or %NULL</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="destroy"
                     transfer-ownership="none"
                     allow-none="1"
                     scope="async">
            <doc xml:whitespace="preserve">Destroy notifier of @user_data, or %NULL</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </method>
      <method name="sort_column_changed"
              c:identifier="gtk_tree_sortable_sort_column_changed">
        <doc xml:whitespace="preserve">Emits a #GtkTreeSortable::sort-column-changed signal on @sortable.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <glib:signal name="sort-column-changed">
        <doc xml:whitespace="preserve">The ::sort-column-changed signal is emitted when the sort column
or sort order of @sortable is changed. The signal is emitted before
the contents of @sortable are resorted.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
    </interface>
    <record name="TreeSortableIface"
            c:type="GtkTreeSortableIface"
            glib:is-gtype-struct-for="TreeSortable">
      <field name="g_iface">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="sort_column_changed">
        <callback name="sort_column_changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="sortable" transfer-ownership="none">
              <type name="TreeSortable" c:type="GtkTreeSortable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_sort_column_id">
        <callback name="get_sort_column_id">
          <return-value transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE if the sort column is not one of the special sort</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="sortable" transfer-ownership="none">
              <type name="TreeSortable" c:type="GtkTreeSortable*"/>
            </parameter>
            <parameter name="sort_column_id" transfer-ownership="none">
              <doc xml:whitespace="preserve">The sort column id to be filled in</doc>
              <type name="gint" c:type="gint*"/>
            </parameter>
            <parameter name="order" transfer-ownership="none">
              <doc xml:whitespace="preserve">The #GtkSortType to be filled in</doc>
              <type name="SortType" c:type="GtkSortType*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_sort_column_id">
        <callback name="set_sort_column_id">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="sortable" transfer-ownership="none">
              <type name="TreeSortable" c:type="GtkTreeSortable*"/>
            </parameter>
            <parameter name="sort_column_id" transfer-ownership="none">
              <doc xml:whitespace="preserve">the sort column id to set</doc>
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="order" transfer-ownership="none">
              <doc xml:whitespace="preserve">The sort order of the column</doc>
              <type name="SortType" c:type="GtkSortType"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_sort_func">
        <callback name="set_sort_func">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="sortable" transfer-ownership="none">
              <type name="TreeSortable" c:type="GtkTreeSortable*"/>
            </parameter>
            <parameter name="sort_column_id" transfer-ownership="none">
              <doc xml:whitespace="preserve">the sort column id to set the function for</doc>
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="sort_func"
                       transfer-ownership="none"
                       scope="notified"
                       closure="3"
                       destroy="4">
              <doc xml:whitespace="preserve">The comparison function</doc>
              <type name="TreeIterCompareFunc"
                    c:type="GtkTreeIterCompareFunc"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       allow-none="1"
                       closure="3">
              <doc xml:whitespace="preserve">User data to pass to @sort_func, or %NULL</doc>
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
            <parameter name="destroy"
                       transfer-ownership="none"
                       allow-none="1"
                       scope="async">
              <doc xml:whitespace="preserve">Destroy notifier of @user_data, or %NULL</doc>
              <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_default_sort_func">
        <callback name="set_default_sort_func">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="sortable" transfer-ownership="none">
              <type name="TreeSortable" c:type="GtkTreeSortable*"/>
            </parameter>
            <parameter name="sort_func"
                       transfer-ownership="none"
                       scope="notified"
                       closure="2"
                       destroy="3">
              <doc xml:whitespace="preserve">The comparison function</doc>
              <type name="TreeIterCompareFunc"
                    c:type="GtkTreeIterCompareFunc"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       allow-none="1"
                       closure="2">
              <doc xml:whitespace="preserve">User data to pass to @sort_func, or %NULL</doc>
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
            <parameter name="destroy"
                       transfer-ownership="none"
                       allow-none="1"
                       scope="async">
              <doc xml:whitespace="preserve">Destroy notifier of @user_data, or %NULL</doc>
              <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="has_default_sort_func">
        <callback name="has_default_sort_func">
          <return-value transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE, if the model has a default sort function</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="sortable" transfer-ownership="none">
              <type name="TreeSortable" c:type="GtkTreeSortable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="TreeStore"
           c:symbol-prefix="tree_store"
           c:type="GtkTreeStore"
           parent="GObject.Object"
           glib:type-name="GtkTreeStore"
           glib:get-type="gtk_tree_store_get_type"
           glib:type-struct="TreeStoreClass">
      <implements name="Buildable"/>
      <implements name="TreeDragDest"/>
      <implements name="TreeDragSource"/>
      <implements name="TreeModel"/>
      <implements name="TreeSortable"/>
      <constructor name="new"
                   c:identifier="gtk_tree_store_new"
                   introspectable="0">
        <doc xml:whitespace="preserve">Creates a new tree store as with @n_columns columns each of the types passed
in.  Note that only types derived from standard GObject fundamental types 
are supported. 
As an example, &lt;literal&gt;gtk_tree_store_new (3, G_TYPE_INT, G_TYPE_STRING,
GDK_TYPE_PIXBUF);&lt;/literal&gt; will create a new #GtkTreeStore with three columns, of type
&lt;type&gt;int&lt;/type&gt;, &lt;type&gt;string&lt;/type&gt; and #GdkPixbuf respectively.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new #GtkTreeStore</doc>
          <type name="TreeStore" c:type="GtkTreeStore*"/>
        </return-value>
        <parameters>
          <parameter name="n_columns" transfer-ownership="none">
            <doc xml:whitespace="preserve">number of columns in the tree store</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter transfer-ownership="none">
            <varargs>
            </varargs>
          </parameter>
        </parameters>
      </constructor>
      <function name="newv" c:identifier="gtk_tree_store_newv">
        <doc xml:whitespace="preserve">Non vararg creation function.  Used primarily by language bindings.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new #GtkTreeStore</doc>
          <type name="TreeStore" c:type="GtkTreeStore*"/>
        </return-value>
        <parameters>
          <parameter name="n_columns" transfer-ownership="none">
            <doc xml:whitespace="preserve">number of columns in the tree store</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="types" transfer-ownership="none">
            <doc xml:whitespace="preserve">an array of #GType types for the columns, from first to last</doc>
            <array length="0" c:type="GType*">
              <type name="GType"/>
            </array>
          </parameter>
        </parameters>
      </function>
      <method name="append" c:identifier="gtk_tree_store_append">
        <doc xml:whitespace="preserve">Appends a new row to @tree_store.  If @parent is non-%NULL, then it will append the
new row after the last child of @parent, otherwise it will append a row to
the top level.  @iter will be changed to point to this new row.  The row will
be empty after this function is called.  To fill in values, you need to call
gtk_tree_store_set() or gtk_tree_store_set_value().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="iter"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:whitespace="preserve">An unset #GtkTreeIter to set to the appended row</doc>
            <type name="TreeIter" c:type="GtkTreeIter*"/>
          </parameter>
          <parameter name="parent" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">A valid #GtkTreeIter, or %NULL</doc>
            <type name="TreeIter" c:type="GtkTreeIter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="clear" c:identifier="gtk_tree_store_clear">
        <doc xml:whitespace="preserve">Removes all rows from @tree_store</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="insert" c:identifier="gtk_tree_store_insert">
        <doc xml:whitespace="preserve">Creates a new row at @position.  If parent is non-%NULL, then the row will be
made a child of @parent.  Otherwise, the row will be created at the toplevel.
If @position is larger than the number of rows at that level, then the new
row will be inserted to the end of the list.  @iter will be changed to point
to this new row.  The row will be empty after this function is called.  To
fill in values, you need to call gtk_tree_store_set() or
gtk_tree_store_set_value().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="iter"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:whitespace="preserve">An unset #GtkTreeIter to set to the new row</doc>
            <type name="TreeIter" c:type="GtkTreeIter*"/>
          </parameter>
          <parameter name="parent" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">A valid #GtkTreeIter, or %NULL</doc>
            <type name="TreeIter" c:type="GtkTreeIter*"/>
          </parameter>
          <parameter name="position" transfer-ownership="none">
            <doc xml:whitespace="preserve">position to insert the new row</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="insert_after" c:identifier="gtk_tree_store_insert_after">
        <doc xml:whitespace="preserve">Inserts a new row after @sibling.  If @sibling is %NULL, then the row will be
prepended to @parent 's children.  If @parent and @sibling are %NULL, then
the row will be prepended to the toplevel.  If both @sibling and @parent are
set, then @parent must be the parent of @sibling.  When @sibling is set,
this function is called.  To fill in values, you need to call
gtk_tree_store_set() or gtk_tree_store_set_value().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="iter"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:whitespace="preserve">An unset #GtkTreeIter to set to the new row</doc>
            <type name="TreeIter" c:type="GtkTreeIter*"/>
          </parameter>
          <parameter name="parent" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">A valid #GtkTreeIter, or %NULL</doc>
            <type name="TreeIter" c:type="GtkTreeIter*"/>
          </parameter>
          <parameter name="sibling" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">A valid #GtkTreeIter, or %NULL</doc>
            <type name="TreeIter" c:type="GtkTreeIter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="insert_before" c:identifier="gtk_tree_store_insert_before">
        <doc xml:whitespace="preserve">Inserts a new row before @sibling.  If @sibling is %NULL, then the row will
be appended to @parent 's children.  If @parent and @sibling are %NULL, then
the row will be appended to the toplevel.  If both @sibling and @parent are
set, then @parent must be the parent of @sibling.  When @sibling is set,
this function is called.  To fill in values, you need to call
gtk_tree_store_set() or gtk_tree_store_set_value().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="iter"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:whitespace="preserve">An unset #GtkTreeIter to set to the new row</doc>
            <type name="TreeIter" c:type="GtkTreeIter*"/>
          </parameter>
          <parameter name="parent" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">A valid #GtkTreeIter, or %NULL</doc>
            <type name="TreeIter" c:type="GtkTreeIter*"/>
          </parameter>
          <parameter name="sibling" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">A valid #GtkTreeIter, or %NULL</doc>
            <type name="TreeIter" c:type="GtkTreeIter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="insert_with_values"
              c:identifier="gtk_tree_store_insert_with_values"
              version="2.10"
              introspectable="0">
        <doc xml:whitespace="preserve">Creates a new row at @position.  @iter will be changed to point to this
new row.  If @position is larger than the number of rows on the list, then
the new row will be appended to the list.  The row will be filled with
the values given to this function.
Calling
&lt;literal&gt;gtk_tree_store_insert_with_values (tree_store, iter, position, ...)&lt;/literal&gt;
has the same effect as calling
|[
gtk_tree_store_insert (tree_store, iter, position);
gtk_tree_store_set (tree_store, iter, ...);
]|
with the different that the former will only emit a row_inserted signal,
while the latter will emit row_inserted, row_changed and if the tree store
is sorted, rows_reordered.  Since emitting the rows_reordered signal
repeatedly can affect the performance of the program,
gtk_tree_store_insert_with_values() should generally be preferred when
inserting rows in a sorted tree store.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="iter"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">An unset #GtkTreeIter to set the new row, or %NULL.</doc>
            <type name="TreeIter" c:type="GtkTreeIter*"/>
          </parameter>
          <parameter name="parent" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">A valid #GtkTreeIter, or %NULL</doc>
            <type name="TreeIter" c:type="GtkTreeIter*"/>
          </parameter>
          <parameter name="position" transfer-ownership="none">
            <doc xml:whitespace="preserve">position to insert the new row</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter transfer-ownership="none">
            <varargs>
            </varargs>
          </parameter>
        </parameters>
      </method>
      <method name="insert_with_valuesv"
              c:identifier="gtk_tree_store_insert_with_valuesv"
              version="2.10">
        <doc xml:whitespace="preserve">A variant of gtk_tree_store_insert_with_values() which takes
the columns and values as two arrays, instead of varargs.  This
function is mainly intended for language bindings.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="iter"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">An unset #GtkTreeIter to set the new row, or %NULL.</doc>
            <type name="TreeIter" c:type="GtkTreeIter*"/>
          </parameter>
          <parameter name="parent" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">A valid #GtkTreeIter, or %NULL</doc>
            <type name="TreeIter" c:type="GtkTreeIter*"/>
          </parameter>
          <parameter name="position" transfer-ownership="none">
            <doc xml:whitespace="preserve">position to insert the new row</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="columns" transfer-ownership="none">
            <doc xml:whitespace="preserve">an array of column numbers</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="values" transfer-ownership="none">
            <doc xml:whitespace="preserve">an array of GValues</doc>
            <type name="GObject.Value" c:type="GValue*"/>
          </parameter>
          <parameter name="n_values" transfer-ownership="none">
            <doc xml:whitespace="preserve">the length of the @columns and @values arrays</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_ancestor" c:identifier="gtk_tree_store_is_ancestor">
        <doc xml:whitespace="preserve">Returns %TRUE if @iter is an ancestor of @descendant.  That is, @iter is the
parent (or grandparent or great-grandparent) of @descendant.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE, if @iter is an ancestor of @descendant</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="iter" transfer-ownership="none">
            <doc xml:whitespace="preserve">A valid #GtkTreeIter</doc>
            <type name="TreeIter" c:type="GtkTreeIter*"/>
          </parameter>
          <parameter name="descendant" transfer-ownership="none">
            <doc xml:whitespace="preserve">A valid #GtkTreeIter</doc>
            <type name="TreeIter" c:type="GtkTreeIter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="iter_depth" c:identifier="gtk_tree_store_iter_depth">
        <doc xml:whitespace="preserve">Returns the depth of @iter.  This will be 0 for anything on the root level, 1
for anything down a level, etc.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The depth of @iter</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <parameter name="iter" transfer-ownership="none">
            <doc xml:whitespace="preserve">A valid #GtkTreeIter</doc>
            <type name="TreeIter" c:type="GtkTreeIter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="iter_is_valid"
              c:identifier="gtk_tree_store_iter_is_valid"
              version="2.2">
        <doc xml:whitespace="preserve">purposes.
Checks if the given iter is a valid iter for this #GtkTreeStore.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the iter is valid, %FALSE if the iter is invalid.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="iter" transfer-ownership="none">
            <doc xml:whitespace="preserve">A #GtkTreeIter.</doc>
            <type name="TreeIter" c:type="GtkTreeIter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="move_after"
              c:identifier="gtk_tree_store_move_after"
              version="2.2">
        <doc xml:whitespace="preserve">Moves @iter in @tree_store to the position after @position. @iter and
works with unsorted stores. If @position is %NULL, @iter will be moved
to the start of the level.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="iter" transfer-ownership="none">
            <doc xml:whitespace="preserve">A #GtkTreeIter.</doc>
            <type name="TreeIter" c:type="GtkTreeIter*"/>
          </parameter>
          <parameter name="position" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">A #GtkTreeIter.</doc>
            <type name="TreeIter" c:type="GtkTreeIter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="move_before"
              c:identifier="gtk_tree_store_move_before"
              version="2.2">
        <doc xml:whitespace="preserve">Moves @iter in @tree_store to the position before @position. @iter and
works with unsorted stores. If @position is %NULL, @iter will be
moved to the end of the level.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="iter" transfer-ownership="none">
            <doc xml:whitespace="preserve">A #GtkTreeIter.</doc>
            <type name="TreeIter" c:type="GtkTreeIter*"/>
          </parameter>
          <parameter name="position" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">A #GtkTreeIter or %NULL.</doc>
            <type name="TreeIter" c:type="GtkTreeIter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="prepend" c:identifier="gtk_tree_store_prepend">
        <doc xml:whitespace="preserve">Prepends a new row to @tree_store.  If @parent is non-%NULL, then it will prepend
the new row before the first child of @parent, otherwise it will prepend a row
to the top level.  @iter will be changed to point to this new row.  The row
will be empty after this function is called.  To fill in values, you need to
call gtk_tree_store_set() or gtk_tree_store_set_value().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="iter"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:whitespace="preserve">An unset #GtkTreeIter to set to the prepended row</doc>
            <type name="TreeIter" c:type="GtkTreeIter*"/>
          </parameter>
          <parameter name="parent" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">A valid #GtkTreeIter, or %NULL</doc>
            <type name="TreeIter" c:type="GtkTreeIter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove" c:identifier="gtk_tree_store_remove">
        <doc xml:whitespace="preserve">Removes @iter from @tree_store.  After being removed, @iter is set to the
next valid row at that level, or invalidated if it previously pointed to the
last one.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if @iter is still valid, %FALSE if not.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="iter" transfer-ownership="none">
            <doc xml:whitespace="preserve">A valid #GtkTreeIter</doc>
            <type name="TreeIter" c:type="GtkTreeIter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="reorder"
              c:identifier="gtk_tree_store_reorder"
              version="2.2">
        <doc xml:whitespace="preserve">Reorders the children of @parent in @tree_store to follow the order
indicated by @new_order. Note that this function only works with
unsorted stores.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="parent" transfer-ownership="none">
            <doc xml:whitespace="preserve">A #GtkTreeIter.</doc>
            <type name="TreeIter" c:type="GtkTreeIter*"/>
          </parameter>
          <parameter name="new_order" transfer-ownership="none">
            <doc xml:whitespace="preserve">an array of integers mapping the new position of each child to its old position before the re-ordering, i.e. @new_order&lt;literal&gt;[newpos] = oldpos&lt;/literal&gt;.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set" c:identifier="gtk_tree_store_set" introspectable="0">
        <doc xml:whitespace="preserve">Sets the value of one or more cells in the row referenced by @iter.
The variable argument list should contain integer column numbers,
each column number followed by the value to be set. 
The list is terminated by a -1. For example, to set column 0 with type
%G_TYPE_STRING to "Foo", you would write 
&lt;literal&gt;gtk_tree_store_set (store, iter, 0, "Foo", -1)&lt;/literal&gt;.
The value will be referenced by the store if it is a %G_TYPE_OBJECT, and it
will be copied if it is a %G_TYPE_STRING or %G_TYPE_BOXED.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="iter" transfer-ownership="none">
            <doc xml:whitespace="preserve">A valid #GtkTreeIter for the row being modified</doc>
            <type name="TreeIter" c:type="GtkTreeIter*"/>
          </parameter>
          <parameter transfer-ownership="none">
            <varargs>
            </varargs>
          </parameter>
        </parameters>
      </method>
      <method name="set_column_types"
              c:identifier="gtk_tree_store_set_column_types">
        <doc xml:whitespace="preserve">This function is meant primarily for #GObjects that inherit from 
#GtkTreeStore, and should only be used when constructing a new 
#GtkTreeStore.  It will not function after a row has been added, 
or a method on the #GtkTreeModel interface is called.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="n_columns" transfer-ownership="none">
            <doc xml:whitespace="preserve">Number of columns for the tree store</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="types" transfer-ownership="none">
            <doc xml:whitespace="preserve">An array of #GType types, one for each column</doc>
            <array length="0" c:type="GType*">
              <type name="GType"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="set_valist"
              c:identifier="gtk_tree_store_set_valist"
              introspectable="0">
        <doc xml:whitespace="preserve">See gtk_tree_store_set(); this version takes a &lt;type&gt;va_list&lt;/type&gt; for
use by language bindings.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="iter" transfer-ownership="none">
            <doc xml:whitespace="preserve">A valid #GtkTreeIter for the row being modified</doc>
            <type name="TreeIter" c:type="GtkTreeIter*"/>
          </parameter>
          <parameter name="var_args" transfer-ownership="none">
            <doc xml:whitespace="preserve">&lt;type&gt;va_list&lt;/type&gt; of column/value pairs</doc>
            <type name="va_list" c:type="va_list"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_value" c:identifier="gtk_tree_store_set_value">
        <doc xml:whitespace="preserve">Sets the data in the cell specified by @iter and @column.
The type of @value must be convertible to the type of the
column.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="iter" transfer-ownership="none">
            <doc xml:whitespace="preserve">A valid #GtkTreeIter for the row being modified</doc>
            <type name="TreeIter" c:type="GtkTreeIter*"/>
          </parameter>
          <parameter name="column" transfer-ownership="none">
            <doc xml:whitespace="preserve">column number to modify</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:whitespace="preserve">new value for the cell</doc>
            <type name="GObject.Value" c:type="GValue*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_valuesv"
              c:identifier="gtk_tree_store_set_valuesv"
              version="2.12">
        <doc xml:whitespace="preserve">A variant of gtk_tree_store_set_valist() which takes
the columns and values as two arrays, instead of varargs.  This
function is mainly intended for language bindings or in case
the number of columns to change is not known until run-time.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="iter" transfer-ownership="none">
            <doc xml:whitespace="preserve">A valid #GtkTreeIter for the row being modified</doc>
            <type name="TreeIter" c:type="GtkTreeIter*"/>
          </parameter>
          <parameter name="columns" transfer-ownership="none">
            <doc xml:whitespace="preserve">an array of column numbers</doc>
            <array length="3" c:type="gint*">
              <type name="gint"/>
            </array>
          </parameter>
          <parameter name="values" transfer-ownership="none">
            <doc xml:whitespace="preserve">an array of GValues</doc>
            <array length="3" c:type="GValue*">
              <type name="GObject.Value"/>
            </array>
          </parameter>
          <parameter name="n_values" transfer-ownership="none">
            <doc xml:whitespace="preserve">the length of the @columns and @values arrays</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="swap" c:identifier="gtk_tree_store_swap" version="2.2">
        <doc xml:whitespace="preserve">Swaps @a and @b in the same level of @tree_store. Note that this function
only works with unsorted stores.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="a" transfer-ownership="none">
            <doc xml:whitespace="preserve">A #GtkTreeIter.</doc>
            <type name="TreeIter" c:type="GtkTreeIter*"/>
          </parameter>
          <parameter name="b" transfer-ownership="none">
            <doc xml:whitespace="preserve">Another #GtkTreeIter.</doc>
            <type name="TreeIter" c:type="GtkTreeIter*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="stamp">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="root">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="last">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="n_columns">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="sort_column_id">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="sort_list">
        <type name="GLib.List" c:type="GList*">
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </field>
      <field name="order">
        <type name="SortType" c:type="GtkSortType"/>
      </field>
      <field name="column_headers">
        <type name="GType" c:type="GType*"/>
      </field>
      <field name="default_sort_func">
        <type name="TreeIterCompareFunc" c:type="GtkTreeIterCompareFunc"/>
      </field>
      <field name="default_sort_data">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="default_sort_destroy">
        <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
      </field>
      <field name="columns_dirty" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
    </class>
    <record name="TreeStoreClass"
            c:type="GtkTreeStoreClass"
            glib:is-gtype-struct-for="TreeStore">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="_gtk_reserved1" introspectable="0">
        <callback name="_gtk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved2" introspectable="0">
        <callback name="_gtk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved3" introspectable="0">
        <callback name="_gtk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved4" introspectable="0">
        <callback name="_gtk_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <class name="TreeView"
           c:symbol-prefix="tree_view"
           c:type="GtkTreeView"
           parent="Container"
           glib:type-name="GtkTreeView"
           glib:get-type="gtk_tree_view_get_type"
           glib:type-struct="TreeViewClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Buildable"/>
      <implements name="SizeRequest"/>
      <constructor name="new" c:identifier="gtk_tree_view_new">
        <doc xml:whitespace="preserve">Creates a new #GtkTreeView widget.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">A newly created #GtkTreeView widget.</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <constructor name="new_with_model"
                   c:identifier="gtk_tree_view_new_with_model">
        <doc xml:whitespace="preserve">Creates a new #GtkTreeView widget with the model initialized to @model.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">A newly created #GtkTreeView widget.</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="model" transfer-ownership="none">
            <doc xml:whitespace="preserve">the model.</doc>
            <type name="TreeModel" c:type="GtkTreeModel*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="append_column" c:identifier="gtk_tree_view_append_column">
        <doc xml:whitespace="preserve">Appends @column to the list of columns. If @tree_view has "fixed_height"
mode enabled, then @column must have its "sizing" property set to be
GTK_TREE_VIEW_COLUMN_FIXED.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The number of columns in @tree_view after appending.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <parameter name="column" transfer-ownership="none">
            <doc xml:whitespace="preserve">The #GtkTreeViewColumn to add.</doc>
            <type name="TreeViewColumn" c:type="GtkTreeViewColumn*"/>
          </parameter>
        </parameters>
      </method>
      <method name="collapse_all" c:identifier="gtk_tree_view_collapse_all">
        <doc xml:whitespace="preserve">Recursively collapses all visible, expanded nodes in @tree_view.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="collapse_row" c:identifier="gtk_tree_view_collapse_row">
        <doc xml:whitespace="preserve">Collapses a row (hides its child rows, if they exist).</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the row was collapsed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="path" transfer-ownership="none">
            <doc xml:whitespace="preserve">path to a row in the @tree_view</doc>
            <type name="TreePath" c:type="GtkTreePath*"/>
          </parameter>
        </parameters>
      </method>
      <method name="columns_autosize"
              c:identifier="gtk_tree_view_columns_autosize">
        <doc xml:whitespace="preserve">Resizes all columns to their optimal width. Only works after the
treeview has been realized.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="convert_bin_window_to_tree_coords"
              c:identifier="gtk_tree_view_convert_bin_window_to_tree_coords"
              version="2.12">
        <doc xml:whitespace="preserve">Converts bin_window coordinates to coordinates for the
tree (the full scrollable area of the tree).</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bx" transfer-ownership="none">
            <doc xml:whitespace="preserve">X coordinate relative to bin_window</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="by" transfer-ownership="none">
            <doc xml:whitespace="preserve">Y coordinate relative to bin_window</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="tx" transfer-ownership="none">
            <doc xml:whitespace="preserve">return location for tree X coordinate</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="ty" transfer-ownership="none">
            <doc xml:whitespace="preserve">return location for tree Y coordinate</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="convert_bin_window_to_widget_coords"
              c:identifier="gtk_tree_view_convert_bin_window_to_widget_coords"
              version="2.12">
        <doc xml:whitespace="preserve">Converts bin_window coordinates (see gtk_tree_view_get_bin_window())
to widget relative coordinates.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bx" transfer-ownership="none">
            <doc xml:whitespace="preserve">bin_window X coordinate</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="by" transfer-ownership="none">
            <doc xml:whitespace="preserve">bin_window Y coordinate</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="wx" transfer-ownership="none">
            <doc xml:whitespace="preserve">return location for widget X coordinate</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="wy" transfer-ownership="none">
            <doc xml:whitespace="preserve">return location for widget Y coordinate</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="convert_tree_to_bin_window_coords"
              c:identifier="gtk_tree_view_convert_tree_to_bin_window_coords"
              version="2.12">
        <doc xml:whitespace="preserve">Converts tree coordinates (coordinates in full scrollable area of the tree)
to bin_window coordinates.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="tx" transfer-ownership="none">
            <doc xml:whitespace="preserve">tree X coordinate</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="ty" transfer-ownership="none">
            <doc xml:whitespace="preserve">tree Y coordinate</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="bx" transfer-ownership="none">
            <doc xml:whitespace="preserve">return location for X coordinate relative to bin_window</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="by" transfer-ownership="none">
            <doc xml:whitespace="preserve">return location for Y coordinate relative to bin_window</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="convert_tree_to_widget_coords"
              c:identifier="gtk_tree_view_convert_tree_to_widget_coords"
              version="2.12">
        <doc xml:whitespace="preserve">Converts tree coordinates (coordinates in full scrollable area of the tree)
to widget coordinates.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="tx" transfer-ownership="none">
            <doc xml:whitespace="preserve">X coordinate relative to the tree</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="ty" transfer-ownership="none">
            <doc xml:whitespace="preserve">Y coordinate relative to the tree</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="wx" transfer-ownership="none">
            <doc xml:whitespace="preserve">return location for widget X coordinate</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="wy" transfer-ownership="none">
            <doc xml:whitespace="preserve">return location for widget Y coordinate</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="convert_widget_to_bin_window_coords"
              c:identifier="gtk_tree_view_convert_widget_to_bin_window_coords"
              version="2.12">
        <doc xml:whitespace="preserve">Converts widget coordinates to coordinates for the bin_window
(see gtk_tree_view_get_bin_window()).</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="wx" transfer-ownership="none">
            <doc xml:whitespace="preserve">X coordinate relative to the widget</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="wy" transfer-ownership="none">
            <doc xml:whitespace="preserve">Y coordinate relative to the widget</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="bx" transfer-ownership="none">
            <doc xml:whitespace="preserve">return location for bin_window X coordinate</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="by" transfer-ownership="none">
            <doc xml:whitespace="preserve">return location for bin_window Y coordinate</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="convert_widget_to_tree_coords"
              c:identifier="gtk_tree_view_convert_widget_to_tree_coords"
              version="2.12">
        <doc xml:whitespace="preserve">Converts widget coordinates to coordinates for the
tree (the full scrollable area of the tree).</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="wx" transfer-ownership="none">
            <doc xml:whitespace="preserve">X coordinate relative to the widget</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="wy" transfer-ownership="none">
            <doc xml:whitespace="preserve">Y coordinate relative to the widget</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="tx" transfer-ownership="none">
            <doc xml:whitespace="preserve">return location for tree X coordinate</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="ty" transfer-ownership="none">
            <doc xml:whitespace="preserve">return location for tree Y coordinate</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_row_drag_icon"
              c:identifier="gtk_tree_view_create_row_drag_icon">
        <doc xml:whitespace="preserve">Creates a #GdkPixmap representation of the row at @path.
This image is used for a drag icon.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a newly-allocated pixmap of the drag icon.</doc>
          <type name="Gdk.Pixmap" c:type="GdkPixmap*"/>
        </return-value>
        <parameters>
          <parameter name="path" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkTreePath in @tree_view</doc>
            <type name="TreePath" c:type="GtkTreePath*"/>
          </parameter>
        </parameters>
      </method>
      <method name="enable_model_drag_dest"
              c:identifier="gtk_tree_view_enable_model_drag_dest">
        <doc xml:whitespace="preserve">Turns @tree_view into a drop destination for automatic DND. Calling
this method sets #GtkTreeView:reorderable to %FALSE.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="targets" transfer-ownership="none">
            <doc xml:whitespace="preserve">the table of targets that the drag will support</doc>
            <type name="TargetEntry" c:type="GtkTargetEntry*"/>
          </parameter>
          <parameter name="n_targets" transfer-ownership="none">
            <doc xml:whitespace="preserve">the number of items in @targets</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="actions" transfer-ownership="none">
            <doc xml:whitespace="preserve">the bitmask of possible actions for a drag from this widget</doc>
            <type name="Gdk.DragAction" c:type="GdkDragAction"/>
          </parameter>
        </parameters>
      </method>
      <method name="enable_model_drag_source"
              c:identifier="gtk_tree_view_enable_model_drag_source">
        <doc xml:whitespace="preserve">Turns @tree_view into a drag source for automatic DND. Calling this
method sets #GtkTreeView:reorderable to %FALSE.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="start_button_mask" transfer-ownership="none">
            <doc xml:whitespace="preserve">Mask of allowed buttons to start drag</doc>
            <type name="Gdk.ModifierType" c:type="GdkModifierType"/>
          </parameter>
          <parameter name="targets" transfer-ownership="none">
            <doc xml:whitespace="preserve">the table of targets that the drag will support</doc>
            <type name="TargetEntry" c:type="GtkTargetEntry*"/>
          </parameter>
          <parameter name="n_targets" transfer-ownership="none">
            <doc xml:whitespace="preserve">the number of items in @targets</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="actions" transfer-ownership="none">
            <doc xml:whitespace="preserve">the bitmask of possible actions for a drag from this widget</doc>
            <type name="Gdk.DragAction" c:type="GdkDragAction"/>
          </parameter>
        </parameters>
      </method>
      <method name="expand_all" c:identifier="gtk_tree_view_expand_all">
        <doc xml:whitespace="preserve">Recursively expands all nodes in the @tree_view.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="expand_row" c:identifier="gtk_tree_view_expand_row">
        <doc xml:whitespace="preserve">Opens the row so its children are visible.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the row existed and had children</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="path" transfer-ownership="none">
            <doc xml:whitespace="preserve">path to a row</doc>
            <type name="TreePath" c:type="GtkTreePath*"/>
          </parameter>
          <parameter name="open_all" transfer-ownership="none">
            <doc xml:whitespace="preserve">whether to recursively expand, or just expand immediate children</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="expand_to_path"
              c:identifier="gtk_tree_view_expand_to_path"
              version="2.2">
        <doc xml:whitespace="preserve">Expands the row at @path. This will also expand all parent rows of</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="path" transfer-ownership="none">
            <doc xml:whitespace="preserve">path to a row.</doc>
            <type name="TreePath" c:type="GtkTreePath*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_background_area"
              c:identifier="gtk_tree_view_get_background_area">
        <doc xml:whitespace="preserve">Fills the bounding rectangle in bin_window coordinates for the cell at the
row specified by @path and the column specified by @column.  If @path is
%NULL, or points to a node not found in the tree, the @y and @height fields of
the rectangle will be filled with 0. If @column is %NULL, the @x and @width
fields will be filled with 0.  The returned rectangle is equivalent to the
areas tile to cover the entire bin window.  Contrast with the @cell_area,
returned by gtk_tree_view_get_cell_area(), which returns only the cell
itself, excluding surrounding borders and the tree expander area.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="path" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">a #GtkTreePath for the row, or %NULL to get only horizontal coordinates</doc>
            <type name="TreePath" c:type="GtkTreePath*"/>
          </parameter>
          <parameter name="column" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">a #GtkTreeViewColumn for the column, or %NULL to get only vertical coordiantes</doc>
            <type name="TreeViewColumn" c:type="GtkTreeViewColumn*"/>
          </parameter>
          <parameter name="rect" transfer-ownership="none">
            <doc xml:whitespace="preserve">rectangle to fill with cell background rect</doc>
            <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_bin_window"
              c:identifier="gtk_tree_view_get_bin_window">
        <doc xml:whitespace="preserve">Returns the window that @tree_view renders to.
This is used primarily to compare to &lt;literal&gt;event-&gt;window&lt;/literal&gt;
to confirm that the event on @tree_view is on the right window.
hasn't been realized yet</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">A #GdkWindow, or %NULL when @tree_view</doc>
          <type name="Gdk.Window" c:type="GdkWindow*"/>
        </return-value>
      </method>
      <method name="get_cell_area" c:identifier="gtk_tree_view_get_cell_area">
        <doc xml:whitespace="preserve">Fills the bounding rectangle in bin_window coordinates for the cell at the
row specified by @path and the column specified by @column.  If @path is
%NULL, or points to a path not currently displayed, the @y and @height fields
of the rectangle will be filled with 0. If @column is %NULL, the @x and @width
fields will be filled with 0.  The sum of all cell rects does not cover the
entire tree; there are extra pixels in between rows, for example. The
returned rectangle is equivalent to the @cell_area passed to
gtk_cell_renderer_render().  This function is only valid if @tree_view is
realized.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="path" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">a #GtkTreePath for the row, or %NULL to get only horizontal coordinates</doc>
            <type name="TreePath" c:type="GtkTreePath*"/>
          </parameter>
          <parameter name="column" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">a #GtkTreeViewColumn for the column, or %NULL to get only vertical coordinates</doc>
            <type name="TreeViewColumn" c:type="GtkTreeViewColumn*"/>
          </parameter>
          <parameter name="rect" transfer-ownership="none">
            <doc xml:whitespace="preserve">rectangle to fill with cell rect</doc>
            <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_column" c:identifier="gtk_tree_view_get_column">
        <doc xml:whitespace="preserve">Gets the #GtkTreeViewColumn at the given position in the #tree_view.
position is outside the range of columns.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The #GtkTreeViewColumn, or %NULL if the</doc>
          <type name="TreeViewColumn" c:type="GtkTreeViewColumn*"/>
        </return-value>
        <parameters>
          <parameter name="n" transfer-ownership="none">
            <doc xml:whitespace="preserve">The position of the column, counting from 0.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_columns" c:identifier="gtk_tree_view_get_columns">
        <doc xml:whitespace="preserve">Returns a #GList of all the #GtkTreeViewColumn s currently in @tree_view.
The returned list must be freed with g_list_free ().</doc>
        <return-value transfer-ownership="container">
          <doc xml:whitespace="preserve">A list of #GtkTreeViewColumn s</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="TreeViewColumn"/>
          </type>
        </return-value>
      </method>
      <method name="get_cursor" c:identifier="gtk_tree_view_get_cursor">
        <doc xml:whitespace="preserve">Fills in @path and @focus_column with the current path and focus column.  If
the cursor isn't currently set, then *@path will be %NULL.  If no column
currently has focus, then *@focus_column will be %NULL.
The returned #GtkTreePath must be freed with gtk_tree_path_free() when
you are done with it.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="path"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     allow-none="1">
            <doc xml:whitespace="preserve">A pointer to be filled with the current cursor path, or %NULL</doc>
            <type name="TreePath" c:type="GtkTreePath**"/>
          </parameter>
          <parameter name="focus_column"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     allow-none="1">
            <doc xml:whitespace="preserve">A pointer to be filled with the current focus column, or %NULL</doc>
            <type name="TreeViewColumn" c:type="GtkTreeViewColumn**"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_dest_row_at_pos"
              c:identifier="gtk_tree_view_get_dest_row_at_pos">
        <doc xml:whitespace="preserve">Determines the destination row for a given position.  @drag_x and
meaningful if @tree_view is realized.  Therefore this function will always
return %FALSE if @tree_view is not realized or does not have a model.
is indeed the case.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">whether there is a row at the given position, %TRUE if this</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="drag_x" transfer-ownership="none">
            <doc xml:whitespace="preserve">the position to determine the destination row for</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="drag_y" transfer-ownership="none">
            <doc xml:whitespace="preserve">the position to determine the destination row for</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="path"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     allow-none="1">
            <doc xml:whitespace="preserve">Return location for the path of the highlighted row, or %NULL.</doc>
            <type name="TreePath" c:type="GtkTreePath**"/>
          </parameter>
          <parameter name="pos"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">Return location for the drop position, or %NULL</doc>
            <type name="TreeViewDropPosition"
                  c:type="GtkTreeViewDropPosition*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_drag_dest_row"
              c:identifier="gtk_tree_view_get_drag_dest_row">
        <doc xml:whitespace="preserve">Gets information about the row that is highlighted for feedback.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="path"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     allow-none="1">
            <doc xml:whitespace="preserve">Return location for the path of the highlighted row, or %NULL.</doc>
            <type name="TreePath" c:type="GtkTreePath**"/>
          </parameter>
          <parameter name="pos"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">Return location for the drop position, or %NULL</doc>
            <type name="TreeViewDropPosition"
                  c:type="GtkTreeViewDropPosition*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_enable_search"
              c:identifier="gtk_tree_view_get_enable_search">
        <doc xml:whitespace="preserve">Returns whether or not the tree allows to start interactive searching 
by typing in text.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">whether or not to let the user search interactively</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_enable_tree_lines"
              c:identifier="gtk_tree_view_get_enable_tree_lines"
              version="2.10">
        <doc xml:whitespace="preserve">Returns whether or not tree lines are drawn in @tree_view.
otherwise.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if tree lines are drawn in @tree_view, %FALSE</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_expander_column"
              c:identifier="gtk_tree_view_get_expander_column">
        <doc xml:whitespace="preserve">Returns the column that is the current expander column.
This column has the expander arrow drawn next to it.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The expander column.</doc>
          <type name="TreeViewColumn" c:type="GtkTreeViewColumn*"/>
        </return-value>
      </method>
      <method name="get_fixed_height_mode"
              c:identifier="gtk_tree_view_get_fixed_height_mode"
              version="2.6">
        <doc xml:whitespace="preserve">Returns whether fixed height mode is turned on for @tree_view.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if @tree_view is in fixed height mode</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_grid_lines"
              c:identifier="gtk_tree_view_get_grid_lines"
              version="2.10">
        <doc xml:whitespace="preserve">Returns which grid lines are enabled in @tree_view.
are enabled.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GtkTreeViewGridLines value indicating which grid lines</doc>
          <type name="TreeViewGridLines" c:type="GtkTreeViewGridLines"/>
        </return-value>
      </method>
      <method name="get_hadjustment"
              c:identifier="gtk_tree_view_get_hadjustment">
        <doc xml:whitespace="preserve">Gets the #GtkAdjustment currently being used for the horizontal aspect.
if none is currently being used.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">A #GtkAdjustment object, or %NULL</doc>
          <type name="Adjustment" c:type="GtkAdjustment*"/>
        </return-value>
      </method>
      <method name="get_headers_clickable"
              c:identifier="gtk_tree_view_get_headers_clickable"
              version="2.10">
        <doc xml:whitespace="preserve">Returns whether all header columns are clickable.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if all header columns are clickable, otherwise %FALSE</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_headers_visible"
              c:identifier="gtk_tree_view_get_headers_visible">
        <doc xml:whitespace="preserve">Returns %TRUE if the headers on the @tree_view are visible.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">Whether the headers are visible or not.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_hover_expand"
              c:identifier="gtk_tree_view_get_hover_expand"
              version="2.6 ">
        <doc xml:whitespace="preserve">Returns whether hover expansion mode is turned on for @tree_view.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if @tree_view is in hover expansion mode</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_hover_selection"
              c:identifier="gtk_tree_view_get_hover_selection"
              version="2.6 ">
        <doc xml:whitespace="preserve">Returns whether hover selection mode is turned on for @tree_view.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if @tree_view is in hover selection mode</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_level_indentation"
              c:identifier="gtk_tree_view_get_level_indentation"
              version="2.12">
        <doc xml:whitespace="preserve">Returns the amount, in pixels, of extra indentation for child levels
in @tree_view.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the amount of extra indentation for child levels in</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="get_model" c:identifier="gtk_tree_view_get_model">
        <doc xml:whitespace="preserve">Returns the model the #GtkTreeView is based on.  Returns %NULL if the
model is unset.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">A #GtkTreeModel, or %NULL if none is currently being used.</doc>
          <type name="TreeModel" c:type="GtkTreeModel*"/>
        </return-value>
      </method>
      <method name="get_path_at_pos"
              c:identifier="gtk_tree_view_get_path_at_pos">
        <doc xml:whitespace="preserve">Finds the path at the point (@x, @y), relative to bin_window coordinates
(please see gtk_tree_view_get_bin_window()).
That is, @x and @y are relative to an events coordinates. @x and @y must
come from an event on the @tree_view only where &lt;literal&gt;event-&gt;window ==
gtk_tree_view_get_bin_window (&lt;!-- --&gt;)&lt;/literal&gt;. It is primarily for
things like popup menus. If @path is non-%NULL, then it will be filled
with the #GtkTreePath at that point.  This path should be freed with
gtk_tree_path_free().  If @column is non-%NULL, then it will be filled
with the column at that point.  @cell_x and @cell_y return the coordinates
relative to the cell background (i.e. the @background_area passed to
gtk_cell_renderer_render()).  This function is only meaningful if
if @tree_view is not realized or does not have a model.
For converting widget coordinates (eg. the ones you get from
GtkWidget::query-tooltip), please see
gtk_tree_view_convert_widget_to_bin_window_coords().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if a row exists at that coordinate.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="x" transfer-ownership="none">
            <doc xml:whitespace="preserve">The x position to be identified (relative to bin_window).</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:whitespace="preserve">The y position to be identified (relative to bin_window).</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="path"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     allow-none="1">
            <doc xml:whitespace="preserve">A pointer to a #GtkTreePath pointer to be filled in, or %NULL</doc>
            <type name="TreePath" c:type="GtkTreePath**"/>
          </parameter>
          <parameter name="column"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     allow-none="1">
            <doc xml:whitespace="preserve">A pointer to a #GtkTreeViewColumn pointer to be filled in, or %NULL</doc>
            <type name="TreeViewColumn" c:type="GtkTreeViewColumn**"/>
          </parameter>
          <parameter name="cell_x"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     allow-none="1">
            <doc xml:whitespace="preserve">A pointer where the X coordinate relative to the cell can be placed, or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="cell_y"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     allow-none="1">
            <doc xml:whitespace="preserve">A pointer where the Y coordinate relative to the cell can be placed, or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_reorderable"
              c:identifier="gtk_tree_view_get_reorderable">
        <doc xml:whitespace="preserve">Retrieves whether the user can reorder the tree via drag-and-drop. See
gtk_tree_view_set_reorderable().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the tree can be reordered.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_row_separator_func"
              c:identifier="gtk_tree_view_get_row_separator_func"
              version="2.6"
              introspectable="0">
        <doc xml:whitespace="preserve">Returns the current row separator function.</doc>
        <return-value>
          <doc xml:whitespace="preserve">the current row separator function.</doc>
          <type name="TreeViewRowSeparatorFunc"
                c:type="GtkTreeViewRowSeparatorFunc"/>
        </return-value>
      </method>
      <method name="get_rubber_banding"
              c:identifier="gtk_tree_view_get_rubber_banding"
              version="2.10">
        <doc xml:whitespace="preserve">Returns whether rubber banding is turned on for @tree_view.  If the
selection mode is #GTK_SELECTION_MULTIPLE, rubber banding will allow the
user to select multiple rows by dragging the mouse.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if rubber banding in @tree_view is enabled.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_rules_hint"
              c:identifier="gtk_tree_view_get_rules_hint">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_search_column"
              c:identifier="gtk_tree_view_get_search_column">
        <doc xml:whitespace="preserve">Gets the column searched on by the interactive search code.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the column the interactive search code searches in.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="get_search_entry"
              c:identifier="gtk_tree_view_get_search_entry"
              version="2.10">
        <doc xml:whitespace="preserve">Returns the #GtkEntry which is currently in use as interactive search
entry for @tree_view.  In case the built-in entry is being used, %NULL
will be returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the entry currently in use as search entry.</doc>
          <type name="Entry" c:type="GtkEntry*"/>
        </return-value>
      </method>
      <method name="get_search_equal_func"
              c:identifier="gtk_tree_view_get_search_equal_func"
              introspectable="0">
        <doc xml:whitespace="preserve">Returns the compare function currently in use.</doc>
        <return-value>
          <doc xml:whitespace="preserve">the currently used compare function for the search code.</doc>
          <type name="TreeViewSearchEqualFunc"
                c:type="GtkTreeViewSearchEqualFunc"/>
        </return-value>
      </method>
      <method name="get_search_position_func"
              c:identifier="gtk_tree_view_get_search_position_func"
              version="2.10"
              introspectable="0">
        <doc xml:whitespace="preserve">Returns the positioning function currently in use.</doc>
        <return-value>
          <doc xml:whitespace="preserve">the currently used function for positioning the search dialog.</doc>
          <type name="TreeViewSearchPositionFunc"
                c:type="GtkTreeViewSearchPositionFunc"/>
        </return-value>
      </method>
      <method name="get_selection" c:identifier="gtk_tree_view_get_selection">
        <doc xml:whitespace="preserve">Gets the #GtkTreeSelection associated with @tree_view.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">A #GtkTreeSelection object.</doc>
          <type name="TreeSelection" c:type="GtkTreeSelection*"/>
        </return-value>
      </method>
      <method name="get_show_expanders"
              c:identifier="gtk_tree_view_get_show_expanders"
              version="2.12">
        <doc xml:whitespace="preserve">Returns whether or not expanders are drawn in @tree_view.
otherwise.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if expanders are drawn in @tree_view, %FALSE</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_tooltip_column"
              c:identifier="gtk_tree_view_get_tooltip_column"
              version="2.12">
        <doc xml:whitespace="preserve">Returns the column of @tree_view's model which is being used for
displaying tooltips on @tree_view's rows.
used, or -1 if this is disabled.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the index of the tooltip column that is currently being</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="get_tooltip_context"
              c:identifier="gtk_tree_view_get_tooltip_context"
              version="2.12">
        <doc xml:whitespace="preserve">This function is supposed to be used in a #GtkWidget::query-tooltip
signal handler for #GtkTreeView.  The @x, @y and @keyboard_tip values
which are received in the signal handler, should be passed to this
function without modification.
The return value indicates whether there is a tree view row at the given
coordinates (%TRUE) or not (%FALSE) for mouse tooltips.  For keyboard
tooltips the row returned will be the cursor row.  When %TRUE, then any of
that row and the corresponding model.  @x and @y will always be converted
to be relative to @tree_view's bin_window if @keyboard_tooltip is %FALSE.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">whether or not the given tooltip context points to a row.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="x" transfer-ownership="none">
            <doc xml:whitespace="preserve">the x coordinate (relative to widget coordinates)</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:whitespace="preserve">the y coordinate (relative to widget coordinates)</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="keyboard_tip" transfer-ownership="none">
            <doc xml:whitespace="preserve">whether this is a keyboard tooltip or not</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="model"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     allow-none="1">
            <doc xml:whitespace="preserve">a pointer to receive a #GtkTreeModel or %NULL</doc>
            <type name="TreeModel" c:type="GtkTreeModel**"/>
          </parameter>
          <parameter name="path"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     allow-none="1">
            <doc xml:whitespace="preserve">a pointer to receive a #GtkTreePath or %NULL</doc>
            <type name="TreePath" c:type="GtkTreePath**"/>
          </parameter>
          <parameter name="iter"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">a pointer to receive a #GtkTreeIter or %NULL</doc>
            <type name="TreeIter" c:type="GtkTreeIter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_vadjustment"
              c:identifier="gtk_tree_view_get_vadjustment">
        <doc xml:whitespace="preserve">Gets the #GtkAdjustment currently being used for the vertical aspect.
if none is currently being used.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">A #GtkAdjustment object, or %NULL</doc>
          <type name="Adjustment" c:type="GtkAdjustment*"/>
        </return-value>
      </method>
      <method name="get_visible_range"
              c:identifier="gtk_tree_view_get_visible_range"
              version="2.8">
        <doc xml:whitespace="preserve">Sets @start_path and @end_path to be the first and last visible path.
Note that there may be invisible paths in between.
The paths should be freed with gtk_tree_path_free() after use.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE, if valid paths were placed in @start_path and @end_path.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="start_path"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">Return location for start of region, or %NULL.</doc>
            <type name="TreePath" c:type="GtkTreePath**"/>
          </parameter>
          <parameter name="end_path" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">Return location for end of region, or %NULL.</doc>
            <type name="TreePath" c:type="GtkTreePath**"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_visible_rect"
              c:identifier="gtk_tree_view_get_visible_rect">
        <doc xml:whitespace="preserve">Fills @visible_rect with the currently-visible region of the
buffer, in tree coordinates. Convert to bin_window coordinates with
gtk_tree_view_convert_tree_to_bin_window_coords().
Tree coordinates start at 0,0 for row 0 of the tree, and cover the entire
scrollable area of the tree.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="visible_rect" transfer-ownership="none">
            <doc xml:whitespace="preserve">rectangle to fill</doc>
            <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
          </parameter>
        </parameters>
      </method>
      <method name="insert_column" c:identifier="gtk_tree_view_insert_column">
        <doc xml:whitespace="preserve">This inserts the @column into the @tree_view at @position.  If @position is
-1, then the column is inserted at the end. If @tree_view has
"fixed_height" mode enabled, then @column must have its "sizing" property
set to be GTK_TREE_VIEW_COLUMN_FIXED.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The number of columns in @tree_view after insertion.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <parameter name="column" transfer-ownership="none">
            <doc xml:whitespace="preserve">The #GtkTreeViewColumn to be inserted.</doc>
            <type name="TreeViewColumn" c:type="GtkTreeViewColumn*"/>
          </parameter>
          <parameter name="position" transfer-ownership="none">
            <doc xml:whitespace="preserve">The position to insert @column in.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="insert_column_with_attributes"
              c:identifier="gtk_tree_view_insert_column_with_attributes"
              introspectable="0">
        <doc xml:whitespace="preserve">Creates a new #GtkTreeViewColumn and inserts it into the @tree_view at
the end.  The column is initialized with the attributes given. If @tree_view
has "fixed_height" mode enabled, then the new column will have its sizing
property set to be GTK_TREE_VIEW_COLUMN_FIXED.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The number of columns in @tree_view after insertion.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <parameter name="position" transfer-ownership="none">
            <doc xml:whitespace="preserve">The position to insert the new column in.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="title" transfer-ownership="none">
            <doc xml:whitespace="preserve">The title to set the header to.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="cell" transfer-ownership="none">
            <doc xml:whitespace="preserve">The #GtkCellRenderer.</doc>
            <type name="CellRenderer" c:type="GtkCellRenderer*"/>
          </parameter>
          <parameter transfer-ownership="none">
            <varargs>
            </varargs>
          </parameter>
        </parameters>
      </method>
      <method name="insert_column_with_data_func"
              c:identifier="gtk_tree_view_insert_column_with_data_func">
        <doc xml:whitespace="preserve">Convenience function that inserts a new column into the #GtkTreeView
with the given cell renderer and a #GtkCellDataFunc to set cell renderer
attributes (normally using data from the model). See also
gtk_tree_view_column_set_cell_data_func(), gtk_tree_view_column_pack_start().
If @tree_view has "fixed_height" mode enabled, then the new column will have its
"sizing" property set to be GTK_TREE_VIEW_COLUMN_FIXED.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">number of columns in the tree view post-insert</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <parameter name="position" transfer-ownership="none">
            <doc xml:whitespace="preserve">Position to insert, -1 for append</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="title" transfer-ownership="none">
            <doc xml:whitespace="preserve">column title</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="cell" transfer-ownership="none">
            <doc xml:whitespace="preserve">cell renderer for column</doc>
            <type name="CellRenderer" c:type="GtkCellRenderer*"/>
          </parameter>
          <parameter name="func"
                     transfer-ownership="none"
                     scope="notified"
                     closure="4"
                     destroy="5">
            <doc xml:whitespace="preserve">function to set attributes of cell renderer</doc>
            <type name="TreeCellDataFunc" c:type="GtkTreeCellDataFunc"/>
          </parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:whitespace="preserve">data for @func</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="dnotify" transfer-ownership="none" scope="async">
            <doc xml:whitespace="preserve">destroy notifier for @data</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_rubber_banding_active"
              c:identifier="gtk_tree_view_is_rubber_banding_active"
              version="2.12">
        <doc xml:whitespace="preserve">Returns whether a rubber banding operation is currently being done
in @tree_view.
done in @tree_view.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if a rubber banding operation is currently being</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="map_expanded_rows"
              c:identifier="gtk_tree_view_map_expanded_rows">
        <doc xml:whitespace="preserve">Calls @func on all expanded rows.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="func"
                     transfer-ownership="none"
                     scope="call"
                     closure="1">
            <doc xml:whitespace="preserve">A function to be called</doc>
            <type name="TreeViewMappingFunc" c:type="GtkTreeViewMappingFunc"/>
          </parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:whitespace="preserve">User data to be passed to the function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="move_column_after"
              c:identifier="gtk_tree_view_move_column_after">
        <doc xml:whitespace="preserve">Moves @column to be after to @base_column.  If @base_column is %NULL, then</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="column" transfer-ownership="none">
            <doc xml:whitespace="preserve">The #GtkTreeViewColumn to be moved.</doc>
            <type name="TreeViewColumn" c:type="GtkTreeViewColumn*"/>
          </parameter>
          <parameter name="base_column"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">The #GtkTreeViewColumn to be moved relative to, or %NULL.</doc>
            <type name="TreeViewColumn" c:type="GtkTreeViewColumn*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_column" c:identifier="gtk_tree_view_remove_column">
        <doc xml:whitespace="preserve">Removes @column from @tree_view.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The number of columns in @tree_view after removing.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <parameter name="column" transfer-ownership="none">
            <doc xml:whitespace="preserve">The #GtkTreeViewColumn to remove.</doc>
            <type name="TreeViewColumn" c:type="GtkTreeViewColumn*"/>
          </parameter>
        </parameters>
      </method>
      <method name="row_activated" c:identifier="gtk_tree_view_row_activated">
        <doc xml:whitespace="preserve">Activates the cell determined by @path and @column.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="path" transfer-ownership="none">
            <doc xml:whitespace="preserve">The #GtkTreePath to be activated.</doc>
            <type name="TreePath" c:type="GtkTreePath*"/>
          </parameter>
          <parameter name="column" transfer-ownership="none">
            <doc xml:whitespace="preserve">The #GtkTreeViewColumn to be activated.</doc>
            <type name="TreeViewColumn" c:type="GtkTreeViewColumn*"/>
          </parameter>
        </parameters>
      </method>
      <method name="row_expanded" c:identifier="gtk_tree_view_row_expanded">
        <doc xml:whitespace="preserve">Returns %TRUE if the node pointed to by @path is expanded in @tree_view.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if #path is expanded.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="path" transfer-ownership="none">
            <doc xml:whitespace="preserve">A #GtkTreePath to test expansion state.</doc>
            <type name="TreePath" c:type="GtkTreePath*"/>
          </parameter>
        </parameters>
      </method>
      <method name="scroll_to_cell"
              c:identifier="gtk_tree_view_scroll_to_cell">
        <doc xml:whitespace="preserve">Moves the alignments of @tree_view to the position specified by @column and
if @path is %NULL no vertical scrolling occurs.  At a minimum, one of @column
or @path need to be non-%NULL.  @row_align determines where the row is
placed, and @col_align determines where @column is placed.  Both are expected
to be between 0.0 and 1.0. 0.0 means left/top alignment, 1.0 means
right/bottom alignment, 0.5 means center.
If @use_align is %FALSE, then the alignment arguments are ignored, and the
tree does the minimum amount of work to scroll the cell onto the screen.
This means that the cell will be scrolled to the edge closest to its current
position.  If the cell is currently visible on the screen, nothing is done.
This function only works if the model is set, and @path is a valid row on the
model.  If the model changes before the @tree_view is realized, the centered
path will be modified to reflect this change.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="path" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">The path of the row to move to, or %NULL.</doc>
            <type name="TreePath" c:type="GtkTreePath*"/>
          </parameter>
          <parameter name="column" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">The #GtkTreeViewColumn to move horizontally to, or %NULL.</doc>
            <type name="TreeViewColumn" c:type="GtkTreeViewColumn*"/>
          </parameter>
          <parameter name="use_align" transfer-ownership="none">
            <doc xml:whitespace="preserve">whether to use alignment arguments, or %FALSE.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="row_align" transfer-ownership="none">
            <doc xml:whitespace="preserve">The vertical alignment of the row specified by @path.</doc>
            <type name="gfloat" c:type="gfloat"/>
          </parameter>
          <parameter name="col_align" transfer-ownership="none">
            <doc xml:whitespace="preserve">The horizontal alignment of the column specified by @column.</doc>
            <type name="gfloat" c:type="gfloat"/>
          </parameter>
        </parameters>
      </method>
      <method name="scroll_to_point"
              c:identifier="gtk_tree_view_scroll_to_point">
        <doc xml:whitespace="preserve">Scrolls the tree view such that the top-left corner of the visible
area is @tree_x, @tree_y, where @tree_x and @tree_y are specified
in tree coordinates.  The @tree_view must be realized before
this function is called.  If it isn't, you probably want to be
using gtk_tree_view_scroll_to_cell().
If either @tree_x or @tree_y are -1, then that direction isn't scrolled.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="tree_x" transfer-ownership="none">
            <doc xml:whitespace="preserve">X coordinate of new top-left pixel of visible area, or -1</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="tree_y" transfer-ownership="none">
            <doc xml:whitespace="preserve">Y coordinate of new top-left pixel of visible area, or -1</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_column_drag_function"
              c:identifier="gtk_tree_view_set_column_drag_function">
        <doc xml:whitespace="preserve">Sets a user function for determining where a column may be dropped when
dragged.  This function is called on every column pair in turn at the
beginning of a column drag to determine where a drop can take place.  The
dragged, the two #GtkTreeViewColumn s determining the drop spot, and
are %NULL, then they indicate an edge.  If @func is set to be %NULL, then
dropped everywhere.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="func"
                     transfer-ownership="none"
                     allow-none="1"
                     scope="notified"
                     closure="1"
                     destroy="2">
            <doc xml:whitespace="preserve">A function to determine which columns are reorderable, or %NULL.</doc>
            <type name="TreeViewColumnDropFunc"
                  c:type="GtkTreeViewColumnDropFunc"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">User data to be passed to @func, or %NULL</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="destroy"
                     transfer-ownership="none"
                     allow-none="1"
                     scope="async">
            <doc xml:whitespace="preserve">Destroy notifier for @user_data, or %NULL</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_cursor" c:identifier="gtk_tree_view_set_cursor">
        <doc xml:whitespace="preserve">Sets the current keyboard focus to be at @path, and selects it.  This is
useful when you want to focus the user's attention on a particular row.  If
it. Additionally, if @focus_column is specified, and @start_editing is 
%TRUE, then editing should be started in the specified cell.  
This function is often followed by @gtk_widget_grab_focus (@tree_view) 
in order to give keyboard focus to the widget.  Please note that editing 
can only happen when the widget is realized.
If @path is invalid for @model, the current cursor (if any) will be unset
and the function will return without failing.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="path" transfer-ownership="none">
            <doc xml:whitespace="preserve">A #GtkTreePath</doc>
            <type name="TreePath" c:type="GtkTreePath*"/>
          </parameter>
          <parameter name="focus_column"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">A #GtkTreeViewColumn, or %NULL</doc>
            <type name="TreeViewColumn" c:type="GtkTreeViewColumn*"/>
          </parameter>
          <parameter name="start_editing" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE if the specified cell should start being edited.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_cursor_on_cell"
              c:identifier="gtk_tree_view_set_cursor_on_cell"
              version="2.2">
        <doc xml:whitespace="preserve">Sets the current keyboard focus to be at @path, and selects it.  This is
useful when you want to focus the user's attention on a particular row.  If
it. If @focus_column and @focus_cell are not %NULL, and @focus_column
contains 2 or more editable or activatable cells, then focus is given to
the cell specified by @focus_cell. Additionally, if @focus_column is
specified, and @start_editing is %TRUE, then editing should be started in
the specified cell.  This function is often followed by
widget.  Please note that editing can only happen when the widget is
realized.
If @path is invalid for @model, the current cursor (if any) will be unset
and the function will return without failing.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="path" transfer-ownership="none">
            <doc xml:whitespace="preserve">A #GtkTreePath</doc>
            <type name="TreePath" c:type="GtkTreePath*"/>
          </parameter>
          <parameter name="focus_column"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">A #GtkTreeViewColumn, or %NULL</doc>
            <type name="TreeViewColumn" c:type="GtkTreeViewColumn*"/>
          </parameter>
          <parameter name="focus_cell"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">A #GtkCellRenderer, or %NULL</doc>
            <type name="CellRenderer" c:type="GtkCellRenderer*"/>
          </parameter>
          <parameter name="start_editing" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE if the specified cell should start being edited.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_destroy_count_func"
              c:identifier="gtk_tree_view_set_destroy_count_func">
        <doc xml:whitespace="preserve">This function should almost never be used.  It is meant for private use by
ATK for determining the number of visible children that are removed when the
user collapses a row, or a row is deleted.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="func"
                     transfer-ownership="none"
                     allow-none="1"
                     scope="notified"
                     closure="1"
                     destroy="2">
            <doc xml:whitespace="preserve">Function to be called when a view row is destroyed, or %NULL</doc>
            <type name="TreeDestroyCountFunc"
                  c:type="GtkTreeDestroyCountFunc"/>
          </parameter>
          <parameter name="data" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">User data to be passed to @func, or %NULL</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="destroy"
                     transfer-ownership="none"
                     allow-none="1"
                     scope="async">
            <doc xml:whitespace="preserve">Destroy notifier for @data, or %NULL</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_drag_dest_row"
              c:identifier="gtk_tree_view_set_drag_dest_row">
        <doc xml:whitespace="preserve">Sets the row that is highlighted for feedback.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="path" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">The path of the row to highlight, or %NULL.</doc>
            <type name="TreePath" c:type="GtkTreePath*"/>
          </parameter>
          <parameter name="pos" transfer-ownership="none">
            <doc xml:whitespace="preserve">Specifies whether to drop before, after or into the row</doc>
            <type name="TreeViewDropPosition"
                  c:type="GtkTreeViewDropPosition"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_enable_search"
              c:identifier="gtk_tree_view_set_enable_search">
        <doc xml:whitespace="preserve">If @enable_search is set, then the user can type in text to search through
the tree interactively (this is sometimes called "typeahead find").
Note that even if this is %FALSE, the user can still initiate a search 
using the "start-interactive-search" key binding.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="enable_search" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE, if the user can search interactively</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_enable_tree_lines"
              c:identifier="gtk_tree_view_set_enable_tree_lines"
              version="2.10">
        <doc xml:whitespace="preserve">Sets whether to draw lines interconnecting the expanders in @tree_view.
This does not have any visible effects for lists.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="enabled" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE to enable tree line drawing, %FALSE otherwise.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_expander_column"
              c:identifier="gtk_tree_view_set_expander_column">
        <doc xml:whitespace="preserve">Sets the column to draw the expander arrow at. It must be in @tree_view.  
If @column is %NULL, then the expander arrow is always at the first 
visible column.
If you do not want expander arrow to appear in your tree, set the 
expander column to a hidden column.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="column" transfer-ownership="none">
            <doc xml:whitespace="preserve">%NULL, or the column to draw the expander arrow at.</doc>
            <type name="TreeViewColumn" c:type="GtkTreeViewColumn*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_fixed_height_mode"
              c:identifier="gtk_tree_view_set_fixed_height_mode"
              version="2.6 ">
        <doc xml:whitespace="preserve">Enables or disables the fixed height mode of @tree_view. 
Fixed height mode speeds up #GtkTreeView by assuming that all 
rows have the same height. 
Only enable this option if all rows are the same height and all
columns are of type %GTK_TREE_VIEW_COLUMN_FIXED.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="enable" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE to enable fixed height mode</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_grid_lines"
              c:identifier="gtk_tree_view_set_grid_lines"
              version="2.10">
        <doc xml:whitespace="preserve">Sets which grid lines to draw in @tree_view.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="grid_lines" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkTreeViewGridLines value indicating which grid lines to enable.</doc>
            <type name="TreeViewGridLines" c:type="GtkTreeViewGridLines"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_hadjustment"
              c:identifier="gtk_tree_view_set_hadjustment">
        <doc xml:whitespace="preserve">Sets the #GtkAdjustment for the current horizontal aspect.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="adjustment"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">The #GtkAdjustment to set, or %NULL</doc>
            <type name="Adjustment" c:type="GtkAdjustment*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_headers_clickable"
              c:identifier="gtk_tree_view_set_headers_clickable">
        <doc xml:whitespace="preserve">Allow the column title buttons to be clicked.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="setting" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE if the columns are clickable.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_headers_visible"
              c:identifier="gtk_tree_view_set_headers_visible">
        <doc xml:whitespace="preserve">Sets the visibility state of the headers.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="headers_visible" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE if the headers are visible</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_hover_expand"
              c:identifier="gtk_tree_view_set_hover_expand"
              version="2.6">
        <doc xml:whitespace="preserve">Enables of disables the hover expansion mode of @tree_view.
Hover expansion makes rows expand or collapse if the pointer 
moves over them.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="expand" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE to enable hover selection mode</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_hover_selection"
              c:identifier="gtk_tree_view_set_hover_selection"
              version="2.6">
        <doc xml:whitespace="preserve">Enables of disables the hover selection mode of @tree_view.
Hover selection makes the selected row follow the pointer.
Currently, this works only for the selection modes 
%GTK_SELECTION_SINGLE and %GTK_SELECTION_BROWSE.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="hover" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE to enable hover selection mode</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_level_indentation"
              c:identifier="gtk_tree_view_set_level_indentation"
              version="2.12">
        <doc xml:whitespace="preserve">Sets the amount of extra indentation for child levels to use in @tree_view
in addition to the default indentation.  The value should be specified in
pixels, a value of 0 disables this feature and in this case only the default
indentation will be used.
This does not have any visible effects for lists.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="indentation" transfer-ownership="none">
            <doc xml:whitespace="preserve">the amount, in pixels, of extra indentation in @tree_view.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_model" c:identifier="gtk_tree_view_set_model">
        <doc xml:whitespace="preserve">Sets the model for a #GtkTreeView.  If the @tree_view already has a model
set, it will remove it before setting the new model.  If @model is %NULL,
then it will unset the old model.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="model" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">The model.</doc>
            <type name="TreeModel" c:type="GtkTreeModel*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_reorderable"
              c:identifier="gtk_tree_view_set_reorderable">
        <doc xml:whitespace="preserve">This function is a convenience function to allow you to reorder
models that support the #GtkDragSourceIface and the
#GtkDragDestIface.  Both #GtkTreeStore and #GtkListStore support
these.  If @reorderable is %TRUE, then the user can reorder the
model by dragging and dropping rows. The developer can listen to
these changes by connecting to the model's row_inserted and
row_deleted signals. The reordering is implemented by setting up
the tree view as a drag source and destination. Therefore, drag and
drop can not be used in a reorderable view for any other purpose.
This function does not give you any degree of control over the order -- any
reordering is allowed.  If more control is needed, you should probably
handle drag and drop manually.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="reorderable" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE, if the tree can be reordered.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_row_separator_func"
              c:identifier="gtk_tree_view_set_row_separator_func"
              version="2.6">
        <doc xml:whitespace="preserve">Sets the row separator function, which is used to determine
whether a row should be drawn as a separator. If the row separator
function is %NULL, no separators are drawn. This is the default value.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="func"
                     transfer-ownership="none"
                     allow-none="1"
                     scope="notified"
                     closure="1"
                     destroy="2">
            <doc xml:whitespace="preserve">a #GtkTreeViewRowSeparatorFunc</doc>
            <type name="TreeViewRowSeparatorFunc"
                  c:type="GtkTreeViewRowSeparatorFunc"/>
          </parameter>
          <parameter name="data" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">user data to pass to @func, or %NULL</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="destroy"
                     transfer-ownership="none"
                     allow-none="1"
                     scope="async">
            <doc xml:whitespace="preserve">destroy notifier for @data, or %NULL</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_rubber_banding"
              c:identifier="gtk_tree_view_set_rubber_banding"
              version="2.10">
        <doc xml:whitespace="preserve">Enables or disables rubber banding in @tree_view.  If the selection mode
is #GTK_SELECTION_MULTIPLE, rubber banding will allow the user to select
multiple rows by dragging the mouse.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="enable" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE to enable rubber banding</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_rules_hint"
              c:identifier="gtk_tree_view_set_rules_hint">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="setting" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_search_column"
              c:identifier="gtk_tree_view_set_search_column">
        <doc xml:whitespace="preserve">Sets @column as the column where the interactive search code should
search in for the current model. 
If the search column is set, users can use the "start-interactive-search"
key binding to bring up search popup. The enable-search property controls
whether simply typing text will also start an interactive search.
Note that @column refers to a column of the current model. The search 
column is reset to -1 when the model is changed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="column" transfer-ownership="none">
            <doc xml:whitespace="preserve">the column of the model to search in, or -1 to disable searching</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_search_entry"
              c:identifier="gtk_tree_view_set_search_entry"
              version="2.10">
        <doc xml:whitespace="preserve">Sets the entry which the interactive search code will use for this
in our interface at all time at a fixed position.  Passing %NULL for
entry again.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="entry" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">the entry the interactive search code of @tree_view should use or %NULL</doc>
            <type name="Entry" c:type="GtkEntry*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_search_equal_func"
              c:identifier="gtk_tree_view_set_search_equal_func">
        <doc xml:whitespace="preserve">Sets the compare function for the interactive search capabilities; note
that somewhat like strcmp() returning 0 for equality
#GtkTreeViewSearchEqualFunc returns %FALSE on matches.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="search_equal_func"
                     transfer-ownership="none"
                     scope="notified"
                     closure="1"
                     destroy="2">
            <doc xml:whitespace="preserve">the compare function to use during the search</doc>
            <type name="TreeViewSearchEqualFunc"
                  c:type="GtkTreeViewSearchEqualFunc"/>
          </parameter>
          <parameter name="search_user_data"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">user data to pass to @search_equal_func, or %NULL</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="search_destroy"
                     transfer-ownership="none"
                     allow-none="1"
                     scope="async">
            <doc xml:whitespace="preserve">Destroy notifier for @search_user_data, or %NULL</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_search_position_func"
              c:identifier="gtk_tree_view_set_search_position_func"
              version="2.10">
        <doc xml:whitespace="preserve">Sets the function to use when positioning the search dialog.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="func"
                     transfer-ownership="none"
                     allow-none="1"
                     scope="notified"
                     closure="1"
                     destroy="2">
            <doc xml:whitespace="preserve">the function to use to position the search dialog, or %NULL to use the default search position function</doc>
            <type name="TreeViewSearchPositionFunc"
                  c:type="GtkTreeViewSearchPositionFunc"/>
          </parameter>
          <parameter name="data" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">user data to pass to @func, or %NULL</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="destroy"
                     transfer-ownership="none"
                     allow-none="1"
                     scope="async">
            <doc xml:whitespace="preserve">Destroy notifier for @data, or %NULL</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_show_expanders"
              c:identifier="gtk_tree_view_set_show_expanders"
              version="2.12">
        <doc xml:whitespace="preserve">Sets whether to draw and enable expanders and indent child rows in
and there will be no way to expand and collapse rows by default.  Also
note that hiding the expanders will disable the default indentation.  You
can set a custom indentation in this case using
gtk_tree_view_set_level_indentation().
This does not have any visible effects for lists.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="enabled" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE to enable expander drawing, %FALSE otherwise.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_tooltip_cell"
              c:identifier="gtk_tree_view_set_tooltip_cell"
              version="2.12">
        <doc xml:whitespace="preserve">Sets the tip area of @tooltip to the area @path, @column and @cell have
in common.  For example if @path is %NULL and @column is set, the tip
area will be set to the full area covered by @column.  See also
gtk_tooltip_set_tip_area().
Note that if @path is not specified and @cell is set and part of a column
containing the expander, the tooltip might not show and hide at the correct
position.  In such cases @path must be set to the current node under the
mouse cursor for this function to operate correctly.
See also gtk_tree_view_set_tooltip_column() for a simpler alternative.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="tooltip" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkTooltip</doc>
            <type name="Tooltip" c:type="GtkTooltip*"/>
          </parameter>
          <parameter name="path" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">a #GtkTreePath or %NULL</doc>
            <type name="TreePath" c:type="GtkTreePath*"/>
          </parameter>
          <parameter name="column" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">a #GtkTreeViewColumn or %NULL</doc>
            <type name="TreeViewColumn" c:type="GtkTreeViewColumn*"/>
          </parameter>
          <parameter name="cell" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">a #GtkCellRenderer or %NULL</doc>
            <type name="CellRenderer" c:type="GtkCellRenderer*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_tooltip_column"
              c:identifier="gtk_tree_view_set_tooltip_column"
              version="2.12">
        <doc xml:whitespace="preserve">If you only plan to have simple (text-only) tooltips on full rows, you
can use this function to have #GtkTreeView handle these automatically
for you. @column should be set to the column in @tree_view's model
containing the tooltip texts, or -1 to disable this feature.
When enabled, #GtkWidget::has-tooltip will be set to %TRUE and
Note that the signal handler sets the text with gtk_tooltip_set_markup(),
so &amp;amp;, &amp;lt;, etc have to be escaped in the text.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="column" transfer-ownership="none">
            <doc xml:whitespace="preserve">an integer, which is a valid column number for @tree_view's model</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_tooltip_row"
              c:identifier="gtk_tree_view_set_tooltip_row"
              version="2.12">
        <doc xml:whitespace="preserve">Sets the tip area of @tooltip to be the area covered by the row at @path.
See also gtk_tree_view_set_tooltip_column() for a simpler alternative.
See also gtk_tooltip_set_tip_area().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="tooltip" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkTooltip</doc>
            <type name="Tooltip" c:type="GtkTooltip*"/>
          </parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkTreePath</doc>
            <type name="TreePath" c:type="GtkTreePath*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_vadjustment"
              c:identifier="gtk_tree_view_set_vadjustment">
        <doc xml:whitespace="preserve">Sets the #GtkAdjustment for the current vertical aspect.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="adjustment"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">The #GtkAdjustment to set, or %NULL</doc>
            <type name="Adjustment" c:type="GtkAdjustment*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unset_rows_drag_dest"
              c:identifier="gtk_tree_view_unset_rows_drag_dest">
        <doc xml:whitespace="preserve">Undoes the effect of
gtk_tree_view_enable_model_drag_dest(). Calling this method sets
#GtkTreeView:reorderable to %FALSE.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="unset_rows_drag_source"
              c:identifier="gtk_tree_view_unset_rows_drag_source">
        <doc xml:whitespace="preserve">Undoes the effect of
gtk_tree_view_enable_model_drag_source(). Calling this method sets
#GtkTreeView:reorderable to %FALSE.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <property name="enable-grid-lines"
                writable="1"
                transfer-ownership="none">
        <type name="TreeViewGridLines"/>
      </property>
      <property name="enable-search" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="enable-tree-lines"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="expander-column" writable="1" transfer-ownership="none">
        <type name="TreeViewColumn"/>
      </property>
      <property name="fixed-height-mode"
                version="2.4"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Setting the ::fixed-height-mode property to %TRUE speeds up 
#GtkTreeView by assuming that all rows have the same height. 
Only enable this option if all rows are the same height.  
Please see gtk_tree_view_set_fixed_height_mode() for more 
information on this option.</doc>
        <type name="gboolean"/>
      </property>
      <property name="hadjustment" writable="1" transfer-ownership="none">
        <type name="Adjustment"/>
      </property>
      <property name="headers-clickable"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="headers-visible" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="hover-expand"
                version="2.6"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Enables or disables the hover expansion mode of @tree_view.
Hover expansion makes rows expand or collapse if the pointer moves 
over them.
This mode is primarily intended for treeviews in popups, e.g.
in #GtkComboBox or #GtkEntryCompletion.</doc>
        <type name="gboolean"/>
      </property>
      <property name="hover-selection"
                version="2.6"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Enables or disables the hover selection mode of @tree_view.
Hover selection makes the selected row follow the pointer.
Currently, this works only for the selection modes 
%GTK_SELECTION_SINGLE and %GTK_SELECTION_BROWSE.
This mode is primarily intended for treeviews in popups, e.g.
in #GtkComboBox or #GtkEntryCompletion.</doc>
        <type name="gboolean"/>
      </property>
      <property name="level-indentation"
                version="2.12"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Extra indentation for each level.</doc>
        <type name="gint"/>
      </property>
      <property name="model" writable="1" transfer-ownership="none">
        <type name="TreeModel"/>
      </property>
      <property name="reorderable" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="rubber-banding" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="rules-hint" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="search-column" writable="1" transfer-ownership="none">
        <type name="gint"/>
      </property>
      <property name="show-expanders"
                version="2.12"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">%TRUE if the view has expanders.</doc>
        <type name="gboolean"/>
      </property>
      <property name="tooltip-column" writable="1" transfer-ownership="none">
        <type name="gint"/>
      </property>
      <property name="vadjustment" writable="1" transfer-ownership="none">
        <type name="Adjustment"/>
      </property>
      <field name="parent">
        <type name="Container" c:type="GtkContainer"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="TreeViewPrivate" c:type="GtkTreeViewPrivate*"/>
      </field>
      <glib:signal name="columns-changed">
        <doc xml:whitespace="preserve">The number of columns of the treeview has changed.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
      <glib:signal name="cursor-changed">
        <doc xml:whitespace="preserve">The position of the cursor (focused cell) has changed.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
      <glib:signal name="expand-collapse-cursor-row">
        <return-value transfer-ownership="none">
          <type name="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="gboolean"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="gboolean"/>
          </parameter>
          <parameter name="p1" transfer-ownership="none">
            <type name="gboolean"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="move-cursor">
        <return-value transfer-ownership="none">
          <type name="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="MovementStep"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="gint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="row-activated">
        <doc xml:whitespace="preserve">The "row-activated" signal is emitted when the method
gtk_tree_view_row_activated() is called or the user double clicks 
a treeview row. It is also emitted when a non-editable row is 
Enter is pressed.
For selection handling refer to the &lt;link linkend="TreeWidget"&gt;tree 
widget conceptual overview&lt;/link&gt; as well as #GtkTreeSelection.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GtkTreePath for the activated row</doc>
            <type name="TreePath"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GtkTreeViewColumn in which the activation occurred</doc>
            <type name="TreeViewColumn"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="row-collapsed">
        <doc xml:whitespace="preserve">The given row has been collapsed (child nodes are hidden).</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the tree iter of the collapsed row</doc>
            <type name="TreeIter"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <doc xml:whitespace="preserve">a tree path that points to the row</doc>
            <type name="TreePath"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="row-expanded">
        <doc xml:whitespace="preserve">The given row has been expanded (child nodes are shown).</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the tree iter of the expanded row</doc>
            <type name="TreeIter"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <doc xml:whitespace="preserve">a tree path that points to the row</doc>
            <type name="TreePath"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="select-all">
        <return-value transfer-ownership="none">
          <type name="gboolean"/>
        </return-value>
      </glib:signal>
      <glib:signal name="select-cursor-parent">
        <return-value transfer-ownership="none">
          <type name="gboolean"/>
        </return-value>
      </glib:signal>
      <glib:signal name="select-cursor-row">
        <return-value transfer-ownership="none">
          <type name="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="gboolean"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="set-scroll-adjustments">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Adjustment"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="Adjustment"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="start-interactive-search">
        <return-value transfer-ownership="none">
          <type name="gboolean"/>
        </return-value>
      </glib:signal>
      <glib:signal name="test-collapse-row">
        <doc xml:whitespace="preserve">The given row is about to be collapsed (hide its children nodes). Use this
signal if you need to control the collapsibility of individual rows.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%FALSE to allow collapsing, %TRUE to reject</doc>
          <type name="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the tree iter of the row to collapse</doc>
            <type name="TreeIter"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <doc xml:whitespace="preserve">a tree path that points to the row</doc>
            <type name="TreePath"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="test-expand-row">
        <doc xml:whitespace="preserve">The given row is about to be expanded (show its children nodes). Use this
signal if you need to control the expandability of individual rows.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%FALSE to allow expansion, %TRUE to reject</doc>
          <type name="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the tree iter of the row to expand</doc>
            <type name="TreeIter"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <doc xml:whitespace="preserve">a tree path that points to the row</doc>
            <type name="TreePath"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="toggle-cursor-row">
        <return-value transfer-ownership="none">
          <type name="gboolean"/>
        </return-value>
      </glib:signal>
      <glib:signal name="unselect-all">
        <return-value transfer-ownership="none">
          <type name="gboolean"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="TreeViewClass"
            c:type="GtkTreeViewClass"
            glib:is-gtype-struct-for="TreeView">
      <field name="parent_class">
        <type name="ContainerClass" c:type="GtkContainerClass"/>
      </field>
      <field name="set_scroll_adjustments">
        <callback name="set_scroll_adjustments">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="tree_view" transfer-ownership="none">
              <type name="TreeView" c:type="GtkTreeView*"/>
            </parameter>
            <parameter name="hadjustment" transfer-ownership="none">
              <type name="Adjustment" c:type="GtkAdjustment*"/>
            </parameter>
            <parameter name="vadjustment" transfer-ownership="none">
              <type name="Adjustment" c:type="GtkAdjustment*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="row_activated">
        <callback name="row_activated">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="tree_view" transfer-ownership="none">
              <type name="TreeView" c:type="GtkTreeView*"/>
            </parameter>
            <parameter name="path" transfer-ownership="none">
              <type name="TreePath" c:type="GtkTreePath*"/>
            </parameter>
            <parameter name="column" transfer-ownership="none">
              <type name="TreeViewColumn" c:type="GtkTreeViewColumn*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="test_expand_row">
        <callback name="test_expand_row">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="tree_view" transfer-ownership="none">
              <type name="TreeView" c:type="GtkTreeView*"/>
            </parameter>
            <parameter name="iter" transfer-ownership="none">
              <type name="TreeIter" c:type="GtkTreeIter*"/>
            </parameter>
            <parameter name="path" transfer-ownership="none">
              <type name="TreePath" c:type="GtkTreePath*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="test_collapse_row">
        <callback name="test_collapse_row">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="tree_view" transfer-ownership="none">
              <type name="TreeView" c:type="GtkTreeView*"/>
            </parameter>
            <parameter name="iter" transfer-ownership="none">
              <type name="TreeIter" c:type="GtkTreeIter*"/>
            </parameter>
            <parameter name="path" transfer-ownership="none">
              <type name="TreePath" c:type="GtkTreePath*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="row_expanded">
        <callback name="row_expanded">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="tree_view" transfer-ownership="none">
              <type name="TreeView" c:type="GtkTreeView*"/>
            </parameter>
            <parameter name="iter" transfer-ownership="none">
              <type name="TreeIter" c:type="GtkTreeIter*"/>
            </parameter>
            <parameter name="path" transfer-ownership="none">
              <type name="TreePath" c:type="GtkTreePath*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="row_collapsed">
        <callback name="row_collapsed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="tree_view" transfer-ownership="none">
              <type name="TreeView" c:type="GtkTreeView*"/>
            </parameter>
            <parameter name="iter" transfer-ownership="none">
              <type name="TreeIter" c:type="GtkTreeIter*"/>
            </parameter>
            <parameter name="path" transfer-ownership="none">
              <type name="TreePath" c:type="GtkTreePath*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="columns_changed">
        <callback name="columns_changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="tree_view" transfer-ownership="none">
              <type name="TreeView" c:type="GtkTreeView*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="cursor_changed">
        <callback name="cursor_changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="tree_view" transfer-ownership="none">
              <type name="TreeView" c:type="GtkTreeView*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="move_cursor">
        <callback name="move_cursor">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="tree_view" transfer-ownership="none">
              <type name="TreeView" c:type="GtkTreeView*"/>
            </parameter>
            <parameter name="step" transfer-ownership="none">
              <type name="MovementStep" c:type="GtkMovementStep"/>
            </parameter>
            <parameter name="count" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="select_all">
        <callback name="select_all">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="tree_view" transfer-ownership="none">
              <type name="TreeView" c:type="GtkTreeView*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="unselect_all">
        <callback name="unselect_all">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="tree_view" transfer-ownership="none">
              <type name="TreeView" c:type="GtkTreeView*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="select_cursor_row">
        <callback name="select_cursor_row">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="tree_view" transfer-ownership="none">
              <type name="TreeView" c:type="GtkTreeView*"/>
            </parameter>
            <parameter name="start_editing" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="toggle_cursor_row">
        <callback name="toggle_cursor_row">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="tree_view" transfer-ownership="none">
              <type name="TreeView" c:type="GtkTreeView*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="expand_collapse_cursor_row">
        <callback name="expand_collapse_cursor_row">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="tree_view" transfer-ownership="none">
              <type name="TreeView" c:type="GtkTreeView*"/>
            </parameter>
            <parameter name="logical" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
            <parameter name="expand" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
            <parameter name="open_all" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="select_cursor_parent">
        <callback name="select_cursor_parent">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="tree_view" transfer-ownership="none">
              <type name="TreeView" c:type="GtkTreeView*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="start_interactive_search">
        <callback name="start_interactive_search">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="tree_view" transfer-ownership="none">
              <type name="TreeView" c:type="GtkTreeView*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_gtk_reserved0" introspectable="0">
        <callback name="_gtk_reserved0">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved1" introspectable="0">
        <callback name="_gtk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved2" introspectable="0">
        <callback name="_gtk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved3" introspectable="0">
        <callback name="_gtk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved4" introspectable="0">
        <callback name="_gtk_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <class name="TreeViewColumn"
           c:symbol-prefix="tree_view_column"
           c:type="GtkTreeViewColumn"
           parent="Object"
           glib:type-name="GtkTreeViewColumn"
           glib:get-type="gtk_tree_view_column_get_type"
           glib:type-struct="TreeViewColumnClass">
      <implements name="Buildable"/>
      <implements name="CellLayout"/>
      <constructor name="new" c:identifier="gtk_tree_view_column_new">
        <doc xml:whitespace="preserve">Creates a new #GtkTreeViewColumn.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">A newly created #GtkTreeViewColumn.</doc>
          <type name="TreeViewColumn" c:type="GtkTreeViewColumn*"/>
        </return-value>
      </constructor>
      <constructor name="new_with_attributes"
                   c:identifier="gtk_tree_view_column_new_with_attributes"
                   introspectable="0">
        <doc xml:whitespace="preserve">Creates a new #GtkTreeViewColumn with a number of default values.  This is
equivalent to calling gtk_tree_view_column_set_title(),
gtk_tree_view_column_pack_start(), and
gtk_tree_view_column_set_attributes() on the newly created #GtkTreeViewColumn.
Here's a simple example:
|[
enum { TEXT_COLUMN, COLOR_COLUMN, N_COLUMNS };
...
{
GtkTreeViewColumn *column;
GtkCellRenderer   *renderer = gtk_cell_renderer_text_new ();
column = gtk_tree_view_column_new_with_attributes ("Title",
renderer,
"text", TEXT_COLUMN,
"foreground", COLOR_COLUMN,
NULL);
}
]|</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">A newly created #GtkTreeViewColumn.</doc>
          <type name="TreeViewColumn" c:type="GtkTreeViewColumn*"/>
        </return-value>
        <parameters>
          <parameter name="title" transfer-ownership="none">
            <doc xml:whitespace="preserve">The title to set the header to.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="cell" transfer-ownership="none">
            <doc xml:whitespace="preserve">The #GtkCellRenderer.</doc>
            <type name="CellRenderer" c:type="GtkCellRenderer*"/>
          </parameter>
          <parameter transfer-ownership="none">
            <varargs>
            </varargs>
          </parameter>
        </parameters>
      </constructor>
      <method name="add_attribute"
              c:identifier="gtk_tree_view_column_add_attribute">
        <doc xml:whitespace="preserve">Adds an attribute mapping to the list in @tree_column.  The @column is the
column of the model to get a value from, and the @attribute is the
parameter on @cell_renderer to be set from the value. So for example
if column 2 of the model contains strings, you could have the
"text" attribute of a #GtkCellRendererText get its values from
column 2.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="cell_renderer" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GtkCellRenderer to set attributes on</doc>
            <type name="CellRenderer" c:type="GtkCellRenderer*"/>
          </parameter>
          <parameter name="attribute" transfer-ownership="none">
            <doc xml:whitespace="preserve">An attribute on the renderer</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="column" transfer-ownership="none">
            <doc xml:whitespace="preserve">The column position on the model to get the attribute from.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="cell_get_position"
              c:identifier="gtk_tree_view_column_cell_get_position">
        <doc xml:whitespace="preserve">Obtains the horizontal position and size of a cell in a column. If the
cell is not found in the column, @start_pos and @width are not changed and
%FALSE is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if @cell belongs to @tree_column.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="cell_renderer" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkCellRenderer</doc>
            <type name="CellRenderer" c:type="GtkCellRenderer*"/>
          </parameter>
          <parameter name="start_pos" transfer-ownership="none">
            <doc xml:whitespace="preserve">return location for the horizontal position of @cell within</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:whitespace="preserve">return location for the width of @cell, may be %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="cell_get_size"
              c:identifier="gtk_tree_view_column_cell_get_size">
        <doc xml:whitespace="preserve">Obtains the width and height needed to render the column.  This is used
primarily by the #GtkTreeView.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="cell_area" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">The area a cell in the column will be allocated, or %NULL</doc>
            <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
          </parameter>
          <parameter name="x_offset" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">location to return x offset of a cell relative to @cell_area, or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="y_offset" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">location to return y offset of a cell relative to @cell_area, or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="width" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">location to return width needed to render a cell, or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="height" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">location to return height needed to render a cell, or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="cell_is_visible"
              c:identifier="gtk_tree_view_column_cell_is_visible">
        <doc xml:whitespace="preserve">Returns %TRUE if any of the cells packed into the @tree_column are visible.
For this to be meaningful, you must first initialize the cells with
gtk_tree_view_column_cell_set_cell_data()</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE, if any of the cells packed into the @tree_column are currently visible</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="cell_set_cell_data"
              c:identifier="gtk_tree_view_column_cell_set_cell_data">
        <doc xml:whitespace="preserve">Sets the cell renderer based on the @tree_model and @iter.  That is, for
every attribute mapping in @tree_column, it will get a value from the set
column on the @iter, and use that value to set the attribute on the cell
renderer.  This is used primarily by the #GtkTreeView.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="tree_model" transfer-ownership="none">
            <doc xml:whitespace="preserve">The #GtkTreeModel to to get the cell renderers attributes from.</doc>
            <type name="TreeModel" c:type="GtkTreeModel*"/>
          </parameter>
          <parameter name="iter" transfer-ownership="none">
            <doc xml:whitespace="preserve">The #GtkTreeIter to to get the cell renderer's attributes from.</doc>
            <type name="TreeIter" c:type="GtkTreeIter*"/>
          </parameter>
          <parameter name="is_expander" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE, if the row has children</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="is_expanded" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE, if the row has visible children</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="clear" c:identifier="gtk_tree_view_column_clear">
        <doc xml:whitespace="preserve">Unsets all the mappings on all renderers on the @tree_column.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="clear_attributes"
              c:identifier="gtk_tree_view_column_clear_attributes">
        <doc xml:whitespace="preserve">Clears all existing attributes previously set with
gtk_tree_view_column_set_attributes().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="cell_renderer" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkCellRenderer to clear the attribute mapping on.</doc>
            <type name="CellRenderer" c:type="GtkCellRenderer*"/>
          </parameter>
        </parameters>
      </method>
      <method name="clicked" c:identifier="gtk_tree_view_column_clicked">
        <doc xml:whitespace="preserve">Emits the "clicked" signal on the column.  This function will only work if</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="focus_cell"
              c:identifier="gtk_tree_view_column_focus_cell"
              version="2.2">
        <doc xml:whitespace="preserve">Sets the current keyboard focus to be at @cell, if the column contains
2 or more editable and activatable cells.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="cell" transfer-ownership="none">
            <doc xml:whitespace="preserve">A #GtkCellRenderer</doc>
            <type name="CellRenderer" c:type="GtkCellRenderer*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_alignment"
              c:identifier="gtk_tree_view_column_get_alignment">
        <doc xml:whitespace="preserve">Returns the current x alignment of @tree_column.  This value can range
between 0.0 and 1.0.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The current alignent of @tree_column.</doc>
          <type name="gfloat" c:type="gfloat"/>
        </return-value>
      </method>
      <method name="get_clickable"
              c:identifier="gtk_tree_view_column_get_clickable">
        <doc xml:whitespace="preserve">Returns %TRUE if the user can click on the header for the column.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if user can click the column header.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_expand"
              c:identifier="gtk_tree_view_column_get_expand"
              version="2.4">
        <doc xml:whitespace="preserve">Return %TRUE if the column expands to take any available space.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE, if the column expands</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_fixed_width"
              c:identifier="gtk_tree_view_column_get_fixed_width">
        <doc xml:whitespace="preserve">Gets the fixed width of the column.  This value is only meaning may not be
the actual width of the column on the screen, just what is requested.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the fixed width of the column</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="get_max_width"
              c:identifier="gtk_tree_view_column_get_max_width">
        <doc xml:whitespace="preserve">Returns the maximum width in pixels of the @tree_column, or -1 if no maximum
width is set.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The maximum width of the @tree_column.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="get_min_width"
              c:identifier="gtk_tree_view_column_get_min_width">
        <doc xml:whitespace="preserve">Returns the minimum width in pixels of the @tree_column, or -1 if no minimum
width is set.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The minimum width of the @tree_column.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="get_reorderable"
              c:identifier="gtk_tree_view_column_get_reorderable">
        <doc xml:whitespace="preserve">Returns %TRUE if the @tree_column can be reordered by the user.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the @tree_column can be reordered by the user.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_resizable"
              c:identifier="gtk_tree_view_column_get_resizable">
        <doc xml:whitespace="preserve">Returns %TRUE if the @tree_column can be resized by the end user.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE, if the @tree_column can be resized.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_sizing" c:identifier="gtk_tree_view_column_get_sizing">
        <doc xml:whitespace="preserve">Returns the current type of @tree_column.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The type of @tree_column.</doc>
          <type name="TreeViewColumnSizing" c:type="GtkTreeViewColumnSizing"/>
        </return-value>
      </method>
      <method name="get_sort_column_id"
              c:identifier="gtk_tree_view_column_get_sort_column_id">
        <doc xml:whitespace="preserve">Gets the logical @sort_column_id that the model sorts on when this
column is selected for sorting.
See gtk_tree_view_column_set_sort_column_id().
this column can't be used for sorting.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the current @sort_column_id for this column, or -1 if</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="get_sort_indicator"
              c:identifier="gtk_tree_view_column_get_sort_indicator">
        <doc xml:whitespace="preserve">Gets the value set by gtk_tree_view_column_set_sort_indicator().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">whether the sort indicator arrow is displayed</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_sort_order"
              c:identifier="gtk_tree_view_column_get_sort_order">
        <doc xml:whitespace="preserve">Gets the value set by gtk_tree_view_column_set_sort_order().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the sort order the sort indicator is indicating</doc>
          <type name="SortType" c:type="GtkSortType"/>
        </return-value>
      </method>
      <method name="get_spacing"
              c:identifier="gtk_tree_view_column_get_spacing">
        <doc xml:whitespace="preserve">Returns the spacing of @tree_column.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the spacing of @tree_column.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="get_title" c:identifier="gtk_tree_view_column_get_title">
        <doc xml:whitespace="preserve">Returns the title of the widget.
modified or freed.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the title of the column. This string should not be</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_tree_view"
              c:identifier="gtk_tree_view_column_get_tree_view"
              version="2.12">
        <doc xml:whitespace="preserve">Returns the #GtkTreeView wherein @tree_column has been inserted.
If @column is currently not inserted in any tree view, %NULL is
returned.
been inserted if any, %NULL otherwise.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The tree view wherein @column has</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
      </method>
      <method name="get_visible"
              c:identifier="gtk_tree_view_column_get_visible">
        <doc xml:whitespace="preserve">Returns %TRUE if @tree_column is visible.
the tree will show the column.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">whether the column is visible or not.  If it is visible, then</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_widget" c:identifier="gtk_tree_view_column_get_widget">
        <doc xml:whitespace="preserve">Returns the #GtkWidget in the button on the column header.
If a custom widget has not been set then %NULL is returned.
header, or %NULL</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The #GtkWidget in the column</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
      </method>
      <method name="get_width" c:identifier="gtk_tree_view_column_get_width">
        <doc xml:whitespace="preserve">Returns the current size of @tree_column in pixels.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The current width of @tree_column.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="pack_end" c:identifier="gtk_tree_view_column_pack_end">
        <doc xml:whitespace="preserve">Adds the @cell to end of the column. If @expand is %FALSE, then the @cell
is allocated no more space than it needs. Any unused space is divided
evenly between cells for which @expand is %TRUE.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="cell" transfer-ownership="none">
            <doc xml:whitespace="preserve">The #GtkCellRenderer.</doc>
            <type name="CellRenderer" c:type="GtkCellRenderer*"/>
          </parameter>
          <parameter name="expand" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE if @cell is to be given extra space allocated to @tree_column.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="pack_start" c:identifier="gtk_tree_view_column_pack_start">
        <doc xml:whitespace="preserve">Packs the @cell into the beginning of the column. If @expand is %FALSE, then
the @cell is allocated no more space than it needs. Any unused space is divided
evenly between cells for which @expand is %TRUE.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="cell" transfer-ownership="none">
            <doc xml:whitespace="preserve">The #GtkCellRenderer.</doc>
            <type name="CellRenderer" c:type="GtkCellRenderer*"/>
          </parameter>
          <parameter name="expand" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE if @cell is to be given extra space allocated to @tree_column.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="queue_resize"
              c:identifier="gtk_tree_view_column_queue_resize"
              version="2.8">
        <doc xml:whitespace="preserve">Flags the column, and the cell renderers added to this column, to have
their sizes renegotiated.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="set_alignment"
              c:identifier="gtk_tree_view_column_set_alignment">
        <doc xml:whitespace="preserve">Sets the alignment of the title or custom widget inside the column header.
The alignment determines its location inside the button -- 0.0 for left, 0.5
for center, 1.0 for right.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="xalign" transfer-ownership="none">
            <doc xml:whitespace="preserve">The alignment, which is between [0.0 and 1.0] inclusive.</doc>
            <type name="gfloat" c:type="gfloat"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_attributes"
              c:identifier="gtk_tree_view_column_set_attributes"
              introspectable="0">
        <doc xml:whitespace="preserve">Sets the attributes in the list as the attributes of @tree_column.
The attributes should be in attribute/column order, as in
gtk_tree_view_column_add_attribute(). All existing attributes
are removed, and replaced with the new attributes.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="cell_renderer" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GtkCellRenderer we're setting the attributes of</doc>
            <type name="CellRenderer" c:type="GtkCellRenderer*"/>
          </parameter>
          <parameter transfer-ownership="none">
            <varargs>
            </varargs>
          </parameter>
        </parameters>
      </method>
      <method name="set_cell_data_func"
              c:identifier="gtk_tree_view_column_set_cell_data_func">
        <doc xml:whitespace="preserve">Sets the #GtkTreeViewColumnFunc to use for the column.  This
function is used instead of the standard attributes mapping for
setting the column value, and should set the value of @tree_column's
cell renderer as appropriate.  @func may be %NULL to remove an
older one.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="cell_renderer" transfer-ownership="none">
            <doc xml:whitespace="preserve">A #GtkCellRenderer</doc>
            <type name="CellRenderer" c:type="GtkCellRenderer*"/>
          </parameter>
          <parameter name="func"
                     transfer-ownership="none"
                     scope="notified"
                     closure="2"
                     destroy="3">
            <doc xml:whitespace="preserve">The #GtkTreeViewColumnFunc to use.</doc>
            <type name="TreeCellDataFunc" c:type="GtkTreeCellDataFunc"/>
          </parameter>
          <parameter name="func_data" transfer-ownership="none">
            <doc xml:whitespace="preserve">The user data for @func.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="destroy" transfer-ownership="none" scope="async">
            <doc xml:whitespace="preserve">The destroy notification for @func_data</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_clickable"
              c:identifier="gtk_tree_view_column_set_clickable">
        <doc xml:whitespace="preserve">Sets the header to be active if @active is %TRUE.  When the header is active,
then it can take keyboard focus, and can be clicked.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="clickable" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE if the header is active.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_expand"
              c:identifier="gtk_tree_view_column_set_expand"
              version="2.4">
        <doc xml:whitespace="preserve">Sets the column to take available extra space.  This space is shared equally
amongst all columns that have the expand set to %TRUE.  If no column has this
option set, then the last column gets all extra space.  By default, every
column is created with this %FALSE.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="expand" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE if the column should take available extra space, %FALSE if not</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_fixed_width"
              c:identifier="gtk_tree_view_column_set_fixed_width">
        <doc xml:whitespace="preserve">Sets the size of the column in pixels.  This is meaningful only if the sizing
type is #GTK_TREE_VIEW_COLUMN_FIXED.  The size of the column is clamped to
the min/max width for the column.  Please note that the min/max width of the
column doesn't actually affect the "fixed_width" property of the widget, just
the actual size when displayed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="fixed_width" transfer-ownership="none">
            <doc xml:whitespace="preserve">The size to set @tree_column to. Must be greater than 0.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_max_width"
              c:identifier="gtk_tree_view_column_set_max_width">
        <doc xml:whitespace="preserve">Sets the maximum width of the @tree_column.  If @max_width is -1, then the
maximum width is unset.  Note, the column can actually be wider than max
width if it's the last column in a view.  In this case, the column expands to
fill any extra space.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="max_width" transfer-ownership="none">
            <doc xml:whitespace="preserve">The maximum width of the column in pixels, or -1.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_min_width"
              c:identifier="gtk_tree_view_column_set_min_width">
        <doc xml:whitespace="preserve">Sets the minimum width of the @tree_column.  If @min_width is -1, then the
minimum width is unset.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="min_width" transfer-ownership="none">
            <doc xml:whitespace="preserve">The minimum width of the column in pixels, or -1.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_reorderable"
              c:identifier="gtk_tree_view_column_set_reorderable">
        <doc xml:whitespace="preserve">If @reorderable is %TRUE, then the column can be reordered by the end user
dragging the header.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="reorderable" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE, if the column can be reordered.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_resizable"
              c:identifier="gtk_tree_view_column_set_resizable">
        <doc xml:whitespace="preserve">If @resizable is %TRUE, then the user can explicitly resize the column by
grabbing the outer edge of the column button.  If resizable is %TRUE and
sizing mode of the column is #GTK_TREE_VIEW_COLUMN_AUTOSIZE, then the sizing
mode is changed to #GTK_TREE_VIEW_COLUMN_GROW_ONLY.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="resizable" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE, if the column can be resized</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_sizing" c:identifier="gtk_tree_view_column_set_sizing">
        <doc xml:whitespace="preserve">Sets the growth behavior of @tree_column to @type.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="type" transfer-ownership="none">
            <doc xml:whitespace="preserve">The #GtkTreeViewColumnSizing.</doc>
            <type name="TreeViewColumnSizing"
                  c:type="GtkTreeViewColumnSizing"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_sort_column_id"
              c:identifier="gtk_tree_view_column_set_sort_column_id">
        <doc xml:whitespace="preserve">Sets the logical @sort_column_id that this column sorts on when this column 
is selected for sorting.  Doing so makes the column header clickable.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="sort_column_id" transfer-ownership="none">
            <doc xml:whitespace="preserve">The @sort_column_id of the model to sort on.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_sort_indicator"
              c:identifier="gtk_tree_view_column_set_sort_indicator">
        <doc xml:whitespace="preserve">Call this function with a @setting of %TRUE to display an arrow in
the header button indicating the column is sorted. Call
gtk_tree_view_column_set_sort_order() to change the direction of
the arrow.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="setting" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE to display an indicator that the column is sorted</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_sort_order"
              c:identifier="gtk_tree_view_column_set_sort_order">
        <doc xml:whitespace="preserve">Changes the appearance of the sort indicator. 
This &lt;emphasis&gt;does not&lt;/emphasis&gt; actually sort the model.  Use
gtk_tree_view_column_set_sort_column_id() if you want automatic sorting
support.  This function is primarily for custom sorting behavior, and should
be used in conjunction with gtk_tree_sortable_set_sort_column() to do
that. For custom models, the mechanism will vary. 
The sort indicator changes direction to indicate normal sort or reverse sort.
Note that you must have the sort indicator enabled to see anything when 
calling this function; see gtk_tree_view_column_set_sort_indicator().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="order" transfer-ownership="none">
            <doc xml:whitespace="preserve">sort order that the sort indicator should indicate</doc>
            <type name="SortType" c:type="GtkSortType"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_spacing"
              c:identifier="gtk_tree_view_column_set_spacing">
        <doc xml:whitespace="preserve">Sets the spacing field of @tree_column, which is the number of pixels to
place between cell renderers packed into it.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="spacing" transfer-ownership="none">
            <doc xml:whitespace="preserve">distance between cell renderers in pixels.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_title" c:identifier="gtk_tree_view_column_set_title">
        <doc xml:whitespace="preserve">Sets the title of the @tree_column.  If a custom widget has been set, then
this value is ignored.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="title" transfer-ownership="none">
            <doc xml:whitespace="preserve">The title of the @tree_column.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_visible"
              c:identifier="gtk_tree_view_column_set_visible">
        <doc xml:whitespace="preserve">Sets the visibility of @tree_column.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="visible" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE if the @tree_column is visible.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_widget" c:identifier="gtk_tree_view_column_set_widget">
        <doc xml:whitespace="preserve">Sets the widget in the header to be @widget.  If widget is %NULL, then the
header button is set with a #GtkLabel set to the title of @tree_column.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="widget" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">A child #GtkWidget, or %NULL.</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <property name="alignment" writable="1" transfer-ownership="none">
        <type name="gfloat"/>
      </property>
      <property name="clickable" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="expand" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="fixed-width" writable="1" transfer-ownership="none">
        <type name="gint"/>
      </property>
      <property name="max-width" writable="1" transfer-ownership="none">
        <type name="gint"/>
      </property>
      <property name="min-width" writable="1" transfer-ownership="none">
        <type name="gint"/>
      </property>
      <property name="reorderable" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="resizable" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="sizing" writable="1" transfer-ownership="none">
        <type name="TreeViewColumnSizing"/>
      </property>
      <property name="sort-column-id"
                version="2.18"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Logical sort column ID this column sorts on when selected for sorting. Setting the sort column ID makes the column header
clickable. Set to %-1 to make the column unsortable.</doc>
        <type name="gint"/>
      </property>
      <property name="sort-indicator" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="sort-order" writable="1" transfer-ownership="none">
        <type name="SortType"/>
      </property>
      <property name="spacing" writable="1" transfer-ownership="none">
        <type name="gint"/>
      </property>
      <property name="title" writable="1" transfer-ownership="none">
        <type name="utf8"/>
      </property>
      <property name="visible" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="widget" writable="1" transfer-ownership="none">
        <type name="Widget"/>
      </property>
      <property name="width" transfer-ownership="none">
        <type name="gint"/>
      </property>
      <field name="parent">
        <type name="Object" c:type="GtkObject"/>
      </field>
      <field name="tree_view">
        <type name="Widget" c:type="GtkWidget*"/>
      </field>
      <field name="button">
        <type name="Widget" c:type="GtkWidget*"/>
      </field>
      <field name="child">
        <type name="Widget" c:type="GtkWidget*"/>
      </field>
      <field name="arrow">
        <type name="Widget" c:type="GtkWidget*"/>
      </field>
      <field name="alignment">
        <type name="Widget" c:type="GtkWidget*"/>
      </field>
      <field name="window">
        <type name="Gdk.Window" c:type="GdkWindow*"/>
      </field>
      <field name="editable_widget">
        <type name="CellEditable" c:type="GtkCellEditable*"/>
      </field>
      <field name="xalign">
        <type name="gfloat" c:type="gfloat"/>
      </field>
      <field name="property_changed_signal">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="spacing">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="column_type">
        <type name="TreeViewColumnSizing" c:type="GtkTreeViewColumnSizing"/>
      </field>
      <field name="requested_width">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="button_request">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="resized_width">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="width">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="fixed_width">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="min_width">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="max_width">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="drag_x">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="drag_y">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="title">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="cell_list">
        <type name="GLib.List" c:type="GList*">
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </field>
      <field name="sort_clicked_signal">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="sort_column_changed_signal">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="sort_column_id">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="sort_order">
        <type name="SortType" c:type="GtkSortType"/>
      </field>
      <field name="visible" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="resizable" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="clickable" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="dirty" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="show_sort_indicator" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="maybe_reordered" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="reorderable" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="use_resized_width" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="expand" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <glib:signal name="clicked">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="TreeViewColumnClass"
            c:type="GtkTreeViewColumnClass"
            glib:is-gtype-struct-for="TreeViewColumn">
      <field name="parent_class">
        <type name="ObjectClass" c:type="GtkObjectClass"/>
      </field>
      <field name="clicked">
        <callback name="clicked">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="tree_column" transfer-ownership="none">
              <type name="TreeViewColumn" c:type="GtkTreeViewColumn*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_gtk_reserved1" introspectable="0">
        <callback name="_gtk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved2" introspectable="0">
        <callback name="_gtk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved3" introspectable="0">
        <callback name="_gtk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved4" introspectable="0">
        <callback name="_gtk_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <callback name="TreeViewColumnDropFunc" c:type="GtkTreeViewColumnDropFunc">
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="tree_view" transfer-ownership="none">
          <type name="TreeView" c:type="GtkTreeView*"/>
        </parameter>
        <parameter name="column" transfer-ownership="none">
          <type name="TreeViewColumn" c:type="GtkTreeViewColumn*"/>
        </parameter>
        <parameter name="prev_column" transfer-ownership="none">
          <type name="TreeViewColumn" c:type="GtkTreeViewColumn*"/>
        </parameter>
        <parameter name="next_column" transfer-ownership="none">
          <type name="TreeViewColumn" c:type="GtkTreeViewColumn*"/>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <enumeration name="TreeViewColumnSizing"
                 glib:type-name="GtkTreeViewColumnSizing"
                 glib:get-type="gtk_tree_view_column_sizing_get_type"
                 c:type="GtkTreeViewColumnSizing">
      <member name="grow_only"
              value="0"
              c:identifier="GTK_TREE_VIEW_COLUMN_GROW_ONLY"
              glib:nick="grow-only"/>
      <member name="autosize"
              value="1"
              c:identifier="GTK_TREE_VIEW_COLUMN_AUTOSIZE"
              glib:nick="autosize"/>
      <member name="fixed"
              value="2"
              c:identifier="GTK_TREE_VIEW_COLUMN_FIXED"
              glib:nick="fixed"/>
    </enumeration>
    <enumeration name="TreeViewDropPosition"
                 glib:type-name="GtkTreeViewDropPosition"
                 glib:get-type="gtk_tree_view_drop_position_get_type"
                 c:type="GtkTreeViewDropPosition">
      <member name="before"
              value="0"
              c:identifier="GTK_TREE_VIEW_DROP_BEFORE"
              glib:nick="before"/>
      <member name="after"
              value="1"
              c:identifier="GTK_TREE_VIEW_DROP_AFTER"
              glib:nick="after"/>
      <member name="into_or_before"
              value="2"
              c:identifier="GTK_TREE_VIEW_DROP_INTO_OR_BEFORE"
              glib:nick="into-or-before"/>
      <member name="into_or_after"
              value="3"
              c:identifier="GTK_TREE_VIEW_DROP_INTO_OR_AFTER"
              glib:nick="into-or-after"/>
    </enumeration>
    <enumeration name="TreeViewGridLines"
                 glib:type-name="GtkTreeViewGridLines"
                 glib:get-type="gtk_tree_view_grid_lines_get_type"
                 c:type="GtkTreeViewGridLines">
      <member name="none"
              value="0"
              c:identifier="GTK_TREE_VIEW_GRID_LINES_NONE"
              glib:nick="none"/>
      <member name="horizontal"
              value="1"
              c:identifier="GTK_TREE_VIEW_GRID_LINES_HORIZONTAL"
              glib:nick="horizontal"/>
      <member name="vertical"
              value="2"
              c:identifier="GTK_TREE_VIEW_GRID_LINES_VERTICAL"
              glib:nick="vertical"/>
      <member name="both"
              value="3"
              c:identifier="GTK_TREE_VIEW_GRID_LINES_BOTH"
              glib:nick="both"/>
    </enumeration>
    <callback name="TreeViewMappingFunc" c:type="GtkTreeViewMappingFunc">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="tree_view" transfer-ownership="none">
          <type name="TreeView" c:type="GtkTreeView*"/>
        </parameter>
        <parameter name="path" transfer-ownership="none">
          <type name="TreePath" c:type="GtkTreePath*"/>
        </parameter>
        <parameter name="user_data" transfer-ownership="none" closure="2">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <record name="TreeViewPrivate" c:type="GtkTreeViewPrivate" disguised="1">
    </record>
    <callback name="TreeViewRowSeparatorFunc"
              c:type="GtkTreeViewRowSeparatorFunc">
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="model" transfer-ownership="none">
          <type name="TreeModel" c:type="GtkTreeModel*"/>
        </parameter>
        <parameter name="iter" transfer-ownership="none">
          <type name="TreeIter" c:type="GtkTreeIter*"/>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="TreeViewSearchEqualFunc"
              c:type="GtkTreeViewSearchEqualFunc">
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="model" transfer-ownership="none">
          <type name="TreeModel" c:type="GtkTreeModel*"/>
        </parameter>
        <parameter name="column" transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="key" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="iter" transfer-ownership="none">
          <type name="TreeIter" c:type="GtkTreeIter*"/>
        </parameter>
        <parameter name="search_data" transfer-ownership="none">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="TreeViewSearchPositionFunc"
              c:type="GtkTreeViewSearchPositionFunc">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="tree_view" transfer-ownership="none">
          <type name="TreeView" c:type="GtkTreeView*"/>
        </parameter>
        <parameter name="search_dialog" transfer-ownership="none">
          <type name="Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="user_data" transfer-ownership="none" closure="2">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <class name="UIManager"
           c:symbol-prefix="ui_manager"
           c:type="GtkUIManager"
           parent="GObject.Object"
           glib:type-name="GtkUIManager"
           glib:get-type="gtk_ui_manager_get_type"
           glib:type-struct="UIManagerClass">
      <implements name="Buildable"/>
      <constructor name="new" c:identifier="gtk_ui_manager_new" version="2.4">
        <doc xml:whitespace="preserve">Creates a new ui manager object.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new ui manager object.</doc>
          <type name="UIManager" c:type="GtkUIManager*"/>
        </return-value>
      </constructor>
      <virtual-method name="get_action" invoker="get_action" version="2.4">
        <doc xml:whitespace="preserve">Looks up an action by following a path. See gtk_ui_manager_get_widget()
for more information about paths.
or %NULL if no widget was found.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the action whose proxy widget is found by following the path,</doc>
          <type name="Action" c:type="GtkAction*"/>
        </return-value>
        <parameters>
          <parameter name="path" transfer-ownership="none">
            <doc xml:whitespace="preserve">a path</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_widget" invoker="get_widget" version="2.4">
        <doc xml:whitespace="preserve">Looks up a widget by following a path. 
The path consists of the names specified in the XML description of the UI. 
separated by '/'. Elements which don't have a name or action attribute in 
the XML (e.g. &amp;lt;popup&amp;gt;) can be addressed by their XML element name 
(e.g. "popup"). The root element ("/ui") can be omitted in the path.
Note that the widget found by following a path that ends in a &amp;lt;menu&amp;gt;
element is the menuitem to which the menu is attached, not the menu itmanager.
Also note that the widgets constructed by a ui manager are not tied to 
the lifecycle of the ui manager. If you add the widgets returned by this 
function to some container or explicitly ref them, they will survive the
destruction of the ui manager.
was found.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the widget found by following the path, or %NULL if no widget</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="path" transfer-ownership="none">
            <doc xml:whitespace="preserve">a path</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="add_ui" c:identifier="gtk_ui_manager_add_ui" version="2.4">
        <doc xml:whitespace="preserve">Adds a UI element to the current contents of @manager. 
If @type is %GTK_UI_MANAGER_AUTO, GTK+ inserts a menuitem, toolitem or 
separator if such an element can be inserted at the place determined by 
the place determined by @path.
If @path points to a menuitem or toolitem, the new element will be inserted
before or after this item, depending on @top.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="merge_id" transfer-ownership="none">
            <doc xml:whitespace="preserve">the merge id for the merged UI, see gtk_ui_manager_new_merge_id()</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:whitespace="preserve">a path</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:whitespace="preserve">the name for the added UI element</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="action" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">the name of the action to be proxied, or %NULL to add a separator</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:whitespace="preserve">the type of UI element to add.</doc>
            <type name="UIManagerItemType" c:type="GtkUIManagerItemType"/>
          </parameter>
          <parameter name="top" transfer-ownership="none">
            <doc xml:whitespace="preserve">if %TRUE, the UI element is added before its siblings, otherwise it is added after its siblings.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_ui_from_file"
              c:identifier="gtk_ui_manager_add_ui_from_file"
              version="2.4"
              throws="1">
        <doc xml:whitespace="preserve">Parses a file containing a &lt;link linkend="XML-UI"&gt;UI definition&lt;/link&gt; and 
merges it with the current contents of @manager. 
to unmerge the UI with gtk_ui_manager_remove_ui(). If an error occurred,
the return value is 0.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The merge id for the merged UI. The merge id can be used</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:whitespace="preserve">the name of the file to parse</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_ui_from_string"
              c:identifier="gtk_ui_manager_add_ui_from_string"
              version="2.4"
              throws="1">
        <doc xml:whitespace="preserve">Parses a string containing a &lt;link linkend="XML-UI"&gt;UI definition&lt;/link&gt; and 
merges it with the current contents of @manager. An enclosing &amp;lt;ui&amp;gt; 
element is added if it is missing.
to unmerge the UI with gtk_ui_manager_remove_ui(). If an error occurred,
the return value is 0.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The merge id for the merged UI. The merge id can be used</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="buffer" transfer-ownership="none">
            <doc xml:whitespace="preserve">the string to parse</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="length" transfer-ownership="none">
            <doc xml:whitespace="preserve">the length of @buffer (may be -1 if @buffer is nul-terminated)</doc>
            <type name="glong" c:type="gssize"/>
          </parameter>
        </parameters>
      </method>
      <method name="ensure_update"
              c:identifier="gtk_ui_manager_ensure_update"
              version="2.4">
        <doc xml:whitespace="preserve">Makes sure that all pending updates to the UI have been completed.
This may occasionally be necessary, since #GtkUIManager updates the 
UI in an idle function. A typical example where this function is
useful is to enforce that the menubar and toolbar have been added to 
the main window before showing it:
|[
gtk_container_add (GTK_CONTAINER (window), vbox); 
g_signal_connect (merge, "add-widget", 
G_CALLBACK (add_widget), vbox);
gtk_ui_manager_add_ui_from_file (merge, "my-menus");
gtk_ui_manager_add_ui_from_file (merge, "my-toolbars");
gtk_ui_manager_ensure_update (merge);  
gtk_widget_show (window);
]|</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="get_accel_group"
              c:identifier="gtk_ui_manager_get_accel_group"
              version="2.4">
        <doc xml:whitespace="preserve">Returns the #GtkAccelGroup associated with @manager.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the #GtkAccelGroup.</doc>
          <type name="AccelGroup" c:type="GtkAccelGroup*"/>
        </return-value>
      </method>
      <method name="get_action"
              c:identifier="gtk_ui_manager_get_action"
              version="2.4">
        <doc xml:whitespace="preserve">Looks up an action by following a path. See gtk_ui_manager_get_widget()
for more information about paths.
or %NULL if no widget was found.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the action whose proxy widget is found by following the path,</doc>
          <type name="Action" c:type="GtkAction*"/>
        </return-value>
        <parameters>
          <parameter name="path" transfer-ownership="none">
            <doc xml:whitespace="preserve">a path</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_action_groups"
              c:identifier="gtk_ui_manager_get_action_groups"
              version="2.4">
        <doc xml:whitespace="preserve">Returns the list of action groups associated with @manager.
action groups. The list is owned by GTK+
and should not be modified.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GList of</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="ActionGroup"/>
          </type>
        </return-value>
      </method>
      <method name="get_add_tearoffs"
              c:identifier="gtk_ui_manager_get_add_tearoffs"
              version="2.4">
        <doc xml:whitespace="preserve">Returns whether menus generated by this #GtkUIManager
will have tearoff menu items.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">whether tearoff menu items are added</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_toplevels"
              c:identifier="gtk_ui_manager_get_toplevels"
              version="2.4">
        <doc xml:whitespace="preserve">Obtains a list of all toplevel widgets of the requested types.
all toplevel widgets of the requested types.  Free the returned list with g_slist_free().</doc>
        <return-value transfer-ownership="container">
          <doc xml:whitespace="preserve">a newly-allocated #GSList of</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="Widget"/>
          </type>
        </return-value>
        <parameters>
          <parameter name="types" transfer-ownership="none">
            <doc xml:whitespace="preserve">specifies the types of toplevel widgets to include. Allowed types are #GTK_UI_MANAGER_MENUBAR, #GTK_UI_MANAGER_TOOLBAR and #GTK_UI_MANAGER_POPUP.</doc>
            <type name="UIManagerItemType" c:type="GtkUIManagerItemType"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_ui" c:identifier="gtk_ui_manager_get_ui" version="2.4">
        <doc xml:whitespace="preserve">Creates a &lt;link linkend="XML-UI"&gt;UI definition&lt;/link&gt; of the merged UI.
the merged UI.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A newly allocated string containing an XML representation of</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_widget"
              c:identifier="gtk_ui_manager_get_widget"
              version="2.4">
        <doc xml:whitespace="preserve">Looks up a widget by following a path. 
The path consists of the names specified in the XML description of the UI. 
separated by '/'. Elements which don't have a name or action attribute in 
the XML (e.g. &amp;lt;popup&amp;gt;) can be addressed by their XML element name 
(e.g. "popup"). The root element ("/ui") can be omitted in the path.
Note that the widget found by following a path that ends in a &amp;lt;menu&amp;gt;
element is the menuitem to which the menu is attached, not the menu itmanager.
Also note that the widgets constructed by a ui manager are not tied to 
the lifecycle of the ui manager. If you add the widgets returned by this 
function to some container or explicitly ref them, they will survive the
destruction of the ui manager.
was found.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the widget found by following the path, or %NULL if no widget</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="path" transfer-ownership="none">
            <doc xml:whitespace="preserve">a path</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="insert_action_group"
              c:identifier="gtk_ui_manager_insert_action_group"
              version="2.4">
        <doc xml:whitespace="preserve">Inserts an action group into the list of action groups associated 
with @manager. Actions in earlier groups hide actions with the same 
name in later groups.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="action_group" transfer-ownership="none">
            <doc xml:whitespace="preserve">the action group to be inserted</doc>
            <type name="ActionGroup" c:type="GtkActionGroup*"/>
          </parameter>
          <parameter name="pos" transfer-ownership="none">
            <doc xml:whitespace="preserve">the position at which the group will be inserted.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="new_merge_id"
              c:identifier="gtk_ui_manager_new_merge_id"
              version="2.4">
        <doc xml:whitespace="preserve">Returns an unused merge id, suitable for use with 
gtk_ui_manager_add_ui().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">an unused merge id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
      </method>
      <method name="remove_action_group"
              c:identifier="gtk_ui_manager_remove_action_group"
              version="2.4">
        <doc xml:whitespace="preserve">Removes an action group from the list of action groups associated 
with @manager.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="action_group" transfer-ownership="none">
            <doc xml:whitespace="preserve">the action group to be removed</doc>
            <type name="ActionGroup" c:type="GtkActionGroup*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_ui"
              c:identifier="gtk_ui_manager_remove_ui"
              version="2.4">
        <doc xml:whitespace="preserve">Unmerges the part of @manager&lt;!-- --&gt;s content identified by @merge_id.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="merge_id" transfer-ownership="none">
            <doc xml:whitespace="preserve">a merge id as returned by gtk_ui_manager_add_ui_from_string()</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_add_tearoffs"
              c:identifier="gtk_ui_manager_set_add_tearoffs"
              version="2.4">
        <doc xml:whitespace="preserve">Sets the "add_tearoffs" property, which controls whether menus 
generated by this #GtkUIManager will have tearoff menu items. 
Note that this only affects regular menus. Generated popup 
menus never have tearoff menu items.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="add_tearoffs" transfer-ownership="none">
            <doc xml:whitespace="preserve">whether tearoff menu items are added</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="add-tearoffs"
                version="2.4"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The "add-tearoffs" property controls whether generated menus 
have tearoff menu items. 
Note that this only affects regular menus. Generated popup 
menus never have tearoff menu items.</doc>
        <type name="gboolean"/>
      </property>
      <property name="ui" transfer-ownership="none">
        <type name="utf8"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="private_data">
        <type name="UIManagerPrivate" c:type="GtkUIManagerPrivate*"/>
      </field>
      <glib:signal name="actions-changed" version="2.4">
        <doc xml:whitespace="preserve">The ::actions-changed signal is emitted whenever the set of actions
changes.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
      <glib:signal name="add-widget" version="2.4">
        <doc xml:whitespace="preserve">The ::add-widget signal is emitted for each generated menubar and toolbar.
It is not emitted for generated popup menus, which can be obtained by 
gtk_ui_manager_get_widget().</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the added widget</doc>
            <type name="Widget"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="connect-proxy" version="2.4">
        <doc xml:whitespace="preserve">The ::connect-proxy signal is emitted after connecting a proxy to
an action in the group. 
This is intended for simple customizations for which a custom action
class would be too clumsy, e.g. showing tooltips for menuitems in the
statusbar.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the action</doc>
            <type name="Action"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <doc xml:whitespace="preserve">the proxy</doc>
            <type name="Widget"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="disconnect-proxy" version="2.4">
        <doc xml:whitespace="preserve">The ::disconnect-proxy signal is emitted after disconnecting a proxy
from an action in the group.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the action</doc>
            <type name="Action"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <doc xml:whitespace="preserve">the proxy</doc>
            <type name="Widget"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="post-activate" version="2.4">
        <doc xml:whitespace="preserve">The ::post-activate signal is emitted just after the @action
is activated.
This is intended for applications to get notification
just after any action is activated.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the action</doc>
            <type name="Action"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="pre-activate" version="2.4">
        <doc xml:whitespace="preserve">The ::pre-activate signal is emitted just before the @action
is activated.
This is intended for applications to get notification
just before any action is activated.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the action</doc>
            <type name="Action"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="UIManagerClass"
            c:type="GtkUIManagerClass"
            glib:is-gtype-struct-for="UIManager">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="add_widget">
        <callback name="add_widget">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="manager" transfer-ownership="none">
              <type name="UIManager" c:type="GtkUIManager*"/>
            </parameter>
            <parameter name="widget" transfer-ownership="none">
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="actions_changed">
        <callback name="actions_changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="manager" transfer-ownership="none">
              <type name="UIManager" c:type="GtkUIManager*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="connect_proxy">
        <callback name="connect_proxy">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="manager" transfer-ownership="none">
              <type name="UIManager" c:type="GtkUIManager*"/>
            </parameter>
            <parameter name="action" transfer-ownership="none">
              <type name="Action" c:type="GtkAction*"/>
            </parameter>
            <parameter name="proxy" transfer-ownership="none">
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="disconnect_proxy">
        <callback name="disconnect_proxy">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="manager" transfer-ownership="none">
              <type name="UIManager" c:type="GtkUIManager*"/>
            </parameter>
            <parameter name="action" transfer-ownership="none">
              <type name="Action" c:type="GtkAction*"/>
            </parameter>
            <parameter name="proxy" transfer-ownership="none">
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="pre_activate">
        <callback name="pre_activate">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="manager" transfer-ownership="none">
              <type name="UIManager" c:type="GtkUIManager*"/>
            </parameter>
            <parameter name="action" transfer-ownership="none">
              <type name="Action" c:type="GtkAction*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="post_activate">
        <callback name="post_activate">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="manager" transfer-ownership="none">
              <type name="UIManager" c:type="GtkUIManager*"/>
            </parameter>
            <parameter name="action" transfer-ownership="none">
              <type name="Action" c:type="GtkAction*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_widget">
        <callback name="get_widget">
          <return-value transfer-ownership="none">
            <doc xml:whitespace="preserve">the widget found by following the path, or %NULL if no widget</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </return-value>
          <parameters>
            <parameter name="manager" transfer-ownership="none">
              <type name="UIManager" c:type="GtkUIManager*"/>
            </parameter>
            <parameter name="path" transfer-ownership="none">
              <doc xml:whitespace="preserve">a path</doc>
              <type name="utf8" c:type="gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_action">
        <callback name="get_action">
          <return-value transfer-ownership="none">
            <doc xml:whitespace="preserve">the action whose proxy widget is found by following the path,</doc>
            <type name="Action" c:type="GtkAction*"/>
          </return-value>
          <parameters>
            <parameter name="manager" transfer-ownership="none">
              <type name="UIManager" c:type="GtkUIManager*"/>
            </parameter>
            <parameter name="path" transfer-ownership="none">
              <doc xml:whitespace="preserve">a path</doc>
              <type name="utf8" c:type="gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_gtk_reserved1" introspectable="0">
        <callback name="_gtk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved2" introspectable="0">
        <callback name="_gtk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <bitfield name="UIManagerItemType"
              glib:type-name="GtkUIManagerItemType"
              glib:get-type="gtk_ui_manager_item_type_get_type"
              c:type="GtkUIManagerItemType">
      <member name="auto"
              value="0"
              c:identifier="GTK_UI_MANAGER_AUTO"
              glib:nick="auto"/>
      <member name="menubar"
              value="1"
              c:identifier="GTK_UI_MANAGER_MENUBAR"
              glib:nick="menubar"/>
      <member name="menu"
              value="2"
              c:identifier="GTK_UI_MANAGER_MENU"
              glib:nick="menu"/>
      <member name="toolbar"
              value="4"
              c:identifier="GTK_UI_MANAGER_TOOLBAR"
              glib:nick="toolbar"/>
      <member name="placeholder"
              value="8"
              c:identifier="GTK_UI_MANAGER_PLACEHOLDER"
              glib:nick="placeholder"/>
      <member name="popup"
              value="16"
              c:identifier="GTK_UI_MANAGER_POPUP"
              glib:nick="popup"/>
      <member name="menuitem"
              value="32"
              c:identifier="GTK_UI_MANAGER_MENUITEM"
              glib:nick="menuitem"/>
      <member name="toolitem"
              value="64"
              c:identifier="GTK_UI_MANAGER_TOOLITEM"
              glib:nick="toolitem"/>
      <member name="separator"
              value="128"
              c:identifier="GTK_UI_MANAGER_SEPARATOR"
              glib:nick="separator"/>
      <member name="accelerator"
              value="256"
              c:identifier="GTK_UI_MANAGER_ACCELERATOR"
              glib:nick="accelerator"/>
      <member name="popup_with_accels"
              value="512"
              c:identifier="GTK_UI_MANAGER_POPUP_WITH_ACCELS"
              glib:nick="popup-with-accels"/>
    </bitfield>
    <record name="UIManagerPrivate" c:type="GtkUIManagerPrivate" disguised="1">
    </record>
    <enumeration name="Unit"
                 glib:type-name="GtkUnit"
                 glib:get-type="gtk_unit_get_type"
                 c:type="GtkUnit">
      <member name="pixel"
              value="0"
              c:identifier="GTK_UNIT_PIXEL"
              glib:nick="pixel"/>
      <member name="points"
              value="1"
              c:identifier="GTK_UNIT_POINTS"
              glib:nick="points"/>
      <member name="inch"
              value="2"
              c:identifier="GTK_UNIT_INCH"
              glib:nick="inch"/>
      <member name="mm" value="3" c:identifier="GTK_UNIT_MM" glib:nick="mm"/>
    </enumeration>
    <enumeration name="UpdateType"
                 glib:type-name="GtkUpdateType"
                 glib:get-type="gtk_update_type_get_type"
                 c:type="GtkUpdateType">
      <member name="continuous"
              value="0"
              c:identifier="GTK_UPDATE_CONTINUOUS"
              glib:nick="continuous"/>
      <member name="discontinuous"
              value="1"
              c:identifier="GTK_UPDATE_DISCONTINUOUS"
              glib:nick="discontinuous"/>
      <member name="delayed"
              value="2"
              c:identifier="GTK_UPDATE_DELAYED"
              glib:nick="delayed"/>
    </enumeration>
    <class name="VBox"
           c:symbol-prefix="vbox"
           c:type="GtkVBox"
           parent="Box"
           glib:type-name="GtkVBox"
           glib:get-type="gtk_vbox_get_type"
           glib:type-struct="VBoxClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Buildable"/>
      <implements name="Orientable"/>
      <implements name="SizeRequest"/>
      <constructor name="new" c:identifier="gtk_vbox_new">
        <doc xml:whitespace="preserve">Creates a new #GtkVBox.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a new #GtkVBox.</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="homogeneous" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE if all children are to be given equal space allotments.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="spacing" transfer-ownership="none">
            <doc xml:whitespace="preserve">the number of pixels to place by default between children.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </constructor>
      <field name="box">
        <type name="Box" c:type="GtkBox"/>
      </field>
    </class>
    <record name="VBoxClass"
            c:type="GtkVBoxClass"
            glib:is-gtype-struct-for="VBox">
      <field name="parent_class">
        <type name="BoxClass" c:type="GtkBoxClass"/>
      </field>
    </record>
    <class name="VButtonBox"
           c:symbol-prefix="vbutton_box"
           c:type="GtkVButtonBox"
           parent="ButtonBox"
           glib:type-name="GtkVButtonBox"
           glib:get-type="gtk_vbutton_box_get_type"
           glib:type-struct="VButtonBoxClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Buildable"/>
      <implements name="Orientable"/>
      <implements name="SizeRequest"/>
      <constructor name="new" c:identifier="gtk_vbutton_box_new">
        <doc xml:whitespace="preserve">Creates a new vertical button box.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a new button box #GtkWidget.</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <field name="button_box">
        <type name="ButtonBox" c:type="GtkButtonBox"/>
      </field>
    </class>
    <record name="VButtonBoxClass"
            c:type="GtkVButtonBoxClass"
            glib:is-gtype-struct-for="VButtonBox">
      <field name="parent_class">
        <type name="ButtonBoxClass" c:type="GtkButtonBoxClass"/>
      </field>
    </record>
    <class name="VPaned"
           c:symbol-prefix="vpaned"
           c:type="GtkVPaned"
           parent="Paned"
           glib:type-name="GtkVPaned"
           glib:get-type="gtk_vpaned_get_type"
           glib:type-struct="VPanedClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Buildable"/>
      <implements name="Orientable"/>
      <implements name="SizeRequest"/>
      <constructor name="new" c:identifier="gtk_vpaned_new">
        <doc xml:whitespace="preserve">Create a new #GtkVPaned</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the new #GtkVPaned</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <field name="paned">
        <type name="Paned" c:type="GtkPaned"/>
      </field>
    </class>
    <record name="VPanedClass"
            c:type="GtkVPanedClass"
            glib:is-gtype-struct-for="VPaned">
      <field name="parent_class">
        <type name="PanedClass" c:type="GtkPanedClass"/>
      </field>
    </record>
    <class name="VRuler"
           c:symbol-prefix="vruler"
           c:type="GtkVRuler"
           parent="Ruler"
           glib:type-name="GtkVRuler"
           glib:get-type="gtk_vruler_get_type"
           glib:type-struct="VRulerClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Buildable"/>
      <implements name="Orientable"/>
      <implements name="SizeRequest"/>
      <constructor name="new" c:identifier="gtk_vruler_new">
        <doc xml:whitespace="preserve">Creates a new vertical ruler</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a new #GtkVRuler.</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <field name="ruler">
        <type name="Ruler" c:type="GtkRuler"/>
      </field>
    </class>
    <record name="VRulerClass"
            c:type="GtkVRulerClass"
            glib:is-gtype-struct-for="VRuler">
      <field name="parent_class">
        <type name="RulerClass" c:type="GtkRulerClass"/>
      </field>
    </record>
    <class name="VScale"
           c:symbol-prefix="vscale"
           c:type="GtkVScale"
           parent="Scale"
           glib:type-name="GtkVScale"
           glib:get-type="gtk_vscale_get_type"
           glib:type-struct="VScaleClass">
      <doc xml:whitespace="preserve">The #GtkVScale struct contains private data only, and
should be accessed using the functions below.</doc>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Buildable"/>
      <implements name="Orientable"/>
      <implements name="SizeRequest"/>
      <constructor name="new" c:identifier="gtk_vscale_new">
        <doc xml:whitespace="preserve">Creates a new #GtkVScale.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a new #GtkVScale.</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="adjustment" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GtkAdjustment which sets the range of the scale.</doc>
            <type name="Adjustment" c:type="GtkAdjustment*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_with_range"
                   c:identifier="gtk_vscale_new_with_range">
        <doc xml:whitespace="preserve">Creates a new vertical scale widget that lets the user input a
number between @min and @max (including @min and @max) with the
increment @step.  @step must be nonzero; it's the distance the
slider moves when using the arrow keys to adjust the scale value.
Note that the way in which the precision is derived works best if @step
is a power of ten. If the resulting precision is not suitable for your
needs, use gtk_scale_set_digits() to correct it.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a new #GtkVScale</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="min" transfer-ownership="none">
            <doc xml:whitespace="preserve">minimum value</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="max" transfer-ownership="none">
            <doc xml:whitespace="preserve">maximum value</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="step" transfer-ownership="none">
            <doc xml:whitespace="preserve">step increment (tick size) used with keyboard shortcuts</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </constructor>
      <field name="scale">
        <type name="Scale" c:type="GtkScale"/>
      </field>
    </class>
    <record name="VScaleClass"
            c:type="GtkVScaleClass"
            glib:is-gtype-struct-for="VScale">
      <field name="parent_class">
        <type name="ScaleClass" c:type="GtkScaleClass"/>
      </field>
    </record>
    <class name="VScrollbar"
           c:symbol-prefix="vscrollbar"
           c:type="GtkVScrollbar"
           parent="Scrollbar"
           glib:type-name="GtkVScrollbar"
           glib:get-type="gtk_vscrollbar_get_type"
           glib:type-struct="VScrollbarClass">
      <doc xml:whitespace="preserve">The #GtkVScrollbar struct contains private data and should be accessed
using the functions below.</doc>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Buildable"/>
      <implements name="Orientable"/>
      <implements name="SizeRequest"/>
      <constructor name="new" c:identifier="gtk_vscrollbar_new">
        <doc xml:whitespace="preserve">Creates a new vertical scrollbar.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the new #GtkVScrollbar</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="adjustment"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">the #GtkAdjustment to use, or %NULL to create a new adjustment</doc>
            <type name="Adjustment" c:type="GtkAdjustment*"/>
          </parameter>
        </parameters>
      </constructor>
      <field name="scrollbar">
        <type name="Scrollbar" c:type="GtkScrollbar"/>
      </field>
    </class>
    <record name="VScrollbarClass"
            c:type="GtkVScrollbarClass"
            glib:is-gtype-struct-for="VScrollbar">
      <field name="parent_class">
        <type name="ScrollbarClass" c:type="GtkScrollbarClass"/>
      </field>
    </record>
    <class name="VSeparator"
           c:symbol-prefix="vseparator"
           c:type="GtkVSeparator"
           parent="Separator"
           glib:type-name="GtkVSeparator"
           glib:get-type="gtk_vseparator_get_type"
           glib:type-struct="VSeparatorClass">
      <doc xml:whitespace="preserve">The #GtkVSeparator struct contains private data only, and
should be accessed using the functions below.</doc>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Buildable"/>
      <implements name="Orientable"/>
      <implements name="SizeRequest"/>
      <constructor name="new" c:identifier="gtk_vseparator_new">
        <doc xml:whitespace="preserve">Creates a new #GtkVSeparator.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a new #GtkVSeparator.</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <field name="separator">
        <type name="Separator" c:type="GtkSeparator"/>
      </field>
    </class>
    <record name="VSeparatorClass"
            c:type="GtkVSeparatorClass"
            glib:is-gtype-struct-for="VSeparator">
      <field name="parent_class">
        <type name="SeparatorClass" c:type="GtkSeparatorClass"/>
      </field>
    </record>
    <class name="Viewport"
           c:symbol-prefix="viewport"
           c:type="GtkViewport"
           parent="Bin"
           glib:type-name="GtkViewport"
           glib:get-type="gtk_viewport_get_type"
           glib:type-struct="ViewportClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Buildable"/>
      <implements name="SizeRequest"/>
      <constructor name="new" c:identifier="gtk_viewport_new">
        <doc xml:whitespace="preserve">Creates a new #GtkViewport with the given adjustments.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a new #GtkViewport.</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="hadjustment" transfer-ownership="none">
            <doc xml:whitespace="preserve">horizontal adjustment.</doc>
            <type name="Adjustment" c:type="GtkAdjustment*"/>
          </parameter>
          <parameter name="vadjustment" transfer-ownership="none">
            <doc xml:whitespace="preserve">vertical adjustment.</doc>
            <type name="Adjustment" c:type="GtkAdjustment*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_bin_window"
              c:identifier="gtk_viewport_get_bin_window"
              version="2.20">
        <doc xml:whitespace="preserve">Gets the bin window of the #GtkViewport.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GdkWindow</doc>
          <type name="Gdk.Window" c:type="GdkWindow*"/>
        </return-value>
      </method>
      <method name="get_hadjustment"
              c:identifier="gtk_viewport_get_hadjustment">
        <doc xml:whitespace="preserve">Returns the horizontal adjustment of the viewport.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the horizontal adjustment of @viewport.</doc>
          <type name="Adjustment" c:type="GtkAdjustment*"/>
        </return-value>
      </method>
      <method name="get_shadow_type"
              c:identifier="gtk_viewport_get_shadow_type">
        <doc xml:whitespace="preserve">Gets the shadow type of the #GtkViewport. See
gtk_viewport_set_shadow_type().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the shadow type</doc>
          <type name="ShadowType" c:type="GtkShadowType"/>
        </return-value>
      </method>
      <method name="get_vadjustment"
              c:identifier="gtk_viewport_get_vadjustment">
        <doc xml:whitespace="preserve">Returns the vertical adjustment of the viewport.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the vertical adjustment of @viewport.</doc>
          <type name="Adjustment" c:type="GtkAdjustment*"/>
        </return-value>
      </method>
      <method name="get_view_window"
              c:identifier="gtk_viewport_get_view_window"
              version="2.22">
        <doc xml:whitespace="preserve">Gets the view window of the #GtkViewport.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GdkWindow</doc>
          <type name="Gdk.Window" c:type="GdkWindow*"/>
        </return-value>
      </method>
      <method name="set_hadjustment"
              c:identifier="gtk_viewport_set_hadjustment">
        <doc xml:whitespace="preserve">Sets the horizontal adjustment of the viewport.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="adjustment"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">a #GtkAdjustment.</doc>
            <type name="Adjustment" c:type="GtkAdjustment*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_shadow_type"
              c:identifier="gtk_viewport_set_shadow_type">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="type" transfer-ownership="none">
            <type name="ShadowType" c:type="GtkShadowType"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_vadjustment"
              c:identifier="gtk_viewport_set_vadjustment">
        <doc xml:whitespace="preserve">Sets the vertical adjustment of the viewport.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="adjustment"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">a #GtkAdjustment.</doc>
            <type name="Adjustment" c:type="GtkAdjustment*"/>
          </parameter>
        </parameters>
      </method>
      <property name="hadjustment"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="Adjustment"/>
      </property>
      <property name="shadow-type" writable="1" transfer-ownership="none">
        <type name="ShadowType"/>
      </property>
      <property name="vadjustment"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="Adjustment"/>
      </property>
      <field name="bin">
        <type name="Bin" c:type="GtkBin"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ViewportPrivate" c:type="GtkViewportPrivate*"/>
      </field>
      <glib:signal name="set-scroll-adjustments">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Adjustment"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="Adjustment"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="ViewportClass"
            c:type="GtkViewportClass"
            glib:is-gtype-struct-for="Viewport">
      <field name="parent_class">
        <type name="BinClass" c:type="GtkBinClass"/>
      </field>
      <field name="set_scroll_adjustments">
        <callback name="set_scroll_adjustments">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="viewport" transfer-ownership="none">
              <type name="Viewport" c:type="GtkViewport*"/>
            </parameter>
            <parameter name="hadjustment" transfer-ownership="none">
              <type name="Adjustment" c:type="GtkAdjustment*"/>
            </parameter>
            <parameter name="vadjustment" transfer-ownership="none">
              <type name="Adjustment" c:type="GtkAdjustment*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="ViewportPrivate" c:type="GtkViewportPrivate" disguised="1">
    </record>
    <class name="VolumeButton"
           c:symbol-prefix="volume_button"
           c:type="GtkVolumeButton"
           parent="ScaleButton"
           glib:type-name="GtkVolumeButton"
           glib:get-type="gtk_volume_button_get_type"
           glib:type-struct="VolumeButtonClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Activatable"/>
      <implements name="Buildable"/>
      <implements name="Orientable"/>
      <implements name="SizeRequest"/>
      <constructor name="new" c:identifier="gtk_volume_button_new">
        <return-value transfer-ownership="none">
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <field name="parent">
        <type name="ScaleButton" c:type="GtkScaleButton"/>
      </field>
    </class>
    <record name="VolumeButtonClass"
            c:type="GtkVolumeButtonClass"
            glib:is-gtype-struct-for="VolumeButton">
      <field name="parent_class">
        <type name="ScaleButtonClass" c:type="GtkScaleButtonClass"/>
      </field>
      <field name="_gtk_reserved1" introspectable="0">
        <callback name="_gtk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved2" introspectable="0">
        <callback name="_gtk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved3" introspectable="0">
        <callback name="_gtk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved4" introspectable="0">
        <callback name="_gtk_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <class name="Widget"
           c:symbol-prefix="widget"
           c:type="GtkWidget"
           parent="Object"
           abstract="1"
           glib:type-name="GtkWidget"
           glib:get-type="gtk_widget_get_type"
           glib:type-struct="WidgetClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Buildable"/>
      <implements name="SizeRequest"/>
      <constructor name="new" c:identifier="gtk_widget_new" introspectable="0">
        <doc xml:whitespace="preserve">This is a convenience function for creating a widget and setting
its properties in one go. For example you might write:
&lt;literal&gt;gtk_widget_new (GTK_TYPE_LABEL, "label", "Hello World", "xalign",
0.0, NULL)&lt;/literal&gt; to create a left-aligned label. Equivalent to
g_object_new(), but returns a widget so you don't have to
cast the object yourself.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a new #GtkWidget of type @widget_type</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="type" transfer-ownership="none">
            <doc xml:whitespace="preserve">type ID of the widget to create</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
          <parameter name="first_property_name" transfer-ownership="none">
            <doc xml:whitespace="preserve">name of first property to set</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter transfer-ownership="none">
            <varargs>
            </varargs>
          </parameter>
        </parameters>
      </constructor>
      <function name="get_default_colormap"
                c:identifier="gtk_widget_get_default_colormap">
        <doc xml:whitespace="preserve">Obtains the default colormap used to create widgets.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">default widget colormap</doc>
          <type name="Gdk.Colormap" c:type="GdkColormap*"/>
        </return-value>
      </function>
      <function name="get_default_direction"
                c:identifier="gtk_widget_get_default_direction">
        <doc xml:whitespace="preserve">Obtains the current default reading direction. See
gtk_widget_set_default_direction().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the current default direction.</doc>
          <type name="TextDirection" c:type="GtkTextDirection"/>
        </return-value>
      </function>
      <function name="get_default_style"
                c:identifier="gtk_widget_get_default_style">
        <doc xml:whitespace="preserve">Returns the default style used by all widgets initially.
by GTK+ and should not be modified or freed.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the default style. This #GtkStyle object is owned</doc>
          <type name="Style" c:type="GtkStyle*"/>
        </return-value>
      </function>
      <function name="get_default_visual"
                c:identifier="gtk_widget_get_default_visual">
        <doc xml:whitespace="preserve">Obtains the visual of the default colormap. Not really useful;
used to be useful before gdk_colormap_get_visual() existed.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">visual of the default colormap</doc>
          <type name="Gdk.Visual" c:type="GdkVisual*"/>
        </return-value>
      </function>
      <function name="pop_colormap" c:identifier="gtk_widget_pop_colormap">
        <doc xml:whitespace="preserve">Removes a colormap pushed with gtk_widget_push_colormap().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </function>
      <function name="pop_composite_child"
                c:identifier="gtk_widget_pop_composite_child">
        <doc xml:whitespace="preserve">Cancels the effect of a previous call to gtk_widget_push_composite_child().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </function>
      <function name="push_colormap" c:identifier="gtk_widget_push_colormap">
        <doc xml:whitespace="preserve">Pushes @cmap onto a global stack of colormaps; the topmost
colormap on the stack will be used to create all widgets.
Remove @cmap with gtk_widget_pop_colormap(). There's little
reason to use this function.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="cmap" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GdkColormap</doc>
            <type name="Gdk.Colormap" c:type="GdkColormap*"/>
          </parameter>
        </parameters>
      </function>
      <function name="push_composite_child"
                c:identifier="gtk_widget_push_composite_child">
        <doc xml:whitespace="preserve">Makes all newly-created widgets as composite children until
the corresponding gtk_widget_pop_composite_child() call.
A composite child is a child that's an implementation detail of the
container it's inside and should not be visible to people using the
container. Composite children aren't treated differently by GTK (but
see gtk_container_foreach() vs. gtk_container_forall()), but e.g. GUI 
builders might want to treat them in a different way.
Here is a simple example:
|[
gtk_widget_push_composite_child ();
scrolled_window-&gt;hscrollbar = gtk_hscrollbar_new (hadjustment);
gtk_widget_set_composite_name (scrolled_window-&gt;hscrollbar, "hscrollbar");
gtk_widget_pop_composite_child ();
gtk_widget_set_parent (scrolled_window-&gt;hscrollbar, 
GTK_WIDGET (scrolled_window));
g_object_ref (scrolled_window-&gt;hscrollbar);
]|</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </function>
      <function name="set_default_colormap"
                c:identifier="gtk_widget_set_default_colormap">
        <doc xml:whitespace="preserve">Sets the default colormap to use when creating widgets.
gtk_widget_push_colormap() is a better function to use if
you only want to affect a few widgets, rather than all widgets.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="colormap" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GdkColormap</doc>
            <type name="Gdk.Colormap" c:type="GdkColormap*"/>
          </parameter>
        </parameters>
      </function>
      <function name="set_default_direction"
                c:identifier="gtk_widget_set_default_direction">
        <doc xml:whitespace="preserve">Sets the default reading direction for widgets where the
direction has not been explicitly set by gtk_widget_set_direction().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="dir" transfer-ownership="none">
            <doc xml:whitespace="preserve">the new default direction. This cannot be %GTK_TEXT_DIR_NONE.</doc>
            <type name="TextDirection" c:type="GtkTextDirection"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="adjust_size_allocation">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="allocation" transfer-ownership="none">
            <type name="Allocation" c:type="GtkAllocation*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="adjust_size_request">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="orientation" transfer-ownership="none">
            <type name="Orientation" c:type="GtkOrientation"/>
          </parameter>
          <parameter name="for_size" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="minimum_size" transfer-ownership="none">
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="natural_size" transfer-ownership="none">
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="dispatch_child_properties_changed">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="n_pspecs" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="pspecs" transfer-ownership="none">
            <type name="GObject.ParamSpec" c:type="GParamSpec**"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_accessible" invoker="get_accessible">
        <doc xml:whitespace="preserve">Returns the accessible object that describes the widget to an
assistive technology.
If no accessibility library is loaded (i.e. no ATK implementation library is
loaded via &lt;envar&gt;GTK_MODULES&lt;/envar&gt; or via another application library,
such as libgnome), then this #AtkObject instance may be a no-op. Likewise,
if no class-specific #AtkObject implementation is available for the widget
instance in question, it will inherit an #AtkObject implementation from the
first ancestor class for which such an implementation is defined.
The documentation of the &lt;ulink url="http://developer.gnome.org/doc/API/2.0/atk/index.html"&gt;ATK&lt;/ulink&gt;
library contains more information about accessible objects and their uses.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the #AtkObject associated with @widget</doc>
          <type name="Atk.Object" c:type="AtkObject*"/>
        </return-value>
      </virtual-method>
      <virtual-method name="hide_all" invoker="hide_all">
        <doc xml:whitespace="preserve">Recursively hides a widget and any child widgets.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </virtual-method>
      <virtual-method name="show_all" invoker="show_all">
        <doc xml:whitespace="preserve">Recursively shows a widget, and any child widgets (if the widget is
a container).</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </virtual-method>
      <method name="activate" c:identifier="gtk_widget_activate">
        <doc xml:whitespace="preserve">For widgets that can be "activated" (buttons, menu items, etc.)
this function activates them. Activation is what happens when you
press Enter on a widget during key navigation. If @widget isn't 
activatable, the function returns %FALSE.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the widget was activatable</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="add_accelerator" c:identifier="gtk_widget_add_accelerator">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="accel_signal" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="accel_group" transfer-ownership="none">
            <type name="AccelGroup" c:type="GtkAccelGroup*"/>
          </parameter>
          <parameter name="accel_key" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="accel_mods" transfer-ownership="none">
            <type name="Gdk.ModifierType" c:type="GdkModifierType"/>
          </parameter>
          <parameter name="accel_flags" transfer-ownership="none">
            <type name="AccelFlags" c:type="GtkAccelFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_device_events"
              c:identifier="gtk_widget_add_device_events"
              version="3.0">
        <doc xml:whitespace="preserve">Adds the device events in the bitfield @events to the event mask for</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="device" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GdkDevice</doc>
            <type name="Gdk.Device" c:type="GdkDevice*"/>
          </parameter>
          <parameter name="events" transfer-ownership="none">
            <doc xml:whitespace="preserve">an event mask, see #GdkEventMask</doc>
            <type name="Gdk.EventMask" c:type="GdkEventMask"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_events" c:identifier="gtk_widget_add_events">
        <doc xml:whitespace="preserve">Adds the events in the bitfield @events to the event mask for</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="events" transfer-ownership="none">
            <doc xml:whitespace="preserve">an event mask, see #GdkEventMask</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_mnemonic_label"
              c:identifier="gtk_widget_add_mnemonic_label"
              version="2.4">
        <doc xml:whitespace="preserve">Adds a widget to the list of mnemonic labels for
this widget. (See gtk_widget_list_mnemonic_labels()). Note the
list of mnemonic labels for the widget is cleared when the
widget is destroyed, so the caller must make sure to update
its internal state at this point as well, by using a connection
to the #GtkWidget::destroy signal or a weak notifier.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="label" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkWidget that acts as a mnemonic label for @widget</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="can_activate_accel"
              c:identifier="gtk_widget_can_activate_accel"
              version="2.4">
        <doc xml:whitespace="preserve">Determines whether an accelerator that activates the signal
identified by @signal_id can currently be activated.
This is done by emitting the #GtkWidget::can-activate-accel
signal on @widget; if the signal isn't overridden by a
handler or in a derived widget, then the default check is
that the widget must be sensitive, and the widget and all
its ancestors mapped.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the accelerator can be activated.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="signal_id" transfer-ownership="none">
            <doc xml:whitespace="preserve">the ID of a signal installed on @widget</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="child_focus" c:identifier="gtk_widget_child_focus">
        <doc xml:whitespace="preserve">This function is used by custom widget implementations; if you're
writing an app, you'd use gtk_widget_grab_focus() to move the focus
to a particular widget, and gtk_container_set_focus_chain() to
change the focus tab order. So you may want to investigate those
functions instead.
gtk_widget_child_focus() is called by containers as the user moves
around the window using keyboard shortcuts. @direction indicates
what kind of motion is taking place (up, down, left, right, tab
forward, tab backward). gtk_widget_child_focus() emits the
#GtkWidget::focus signal; widgets override the default handler
for this signal in order to implement appropriate focus behavior.
The default ::focus handler for a widget should return %TRUE if
moving in @direction left the focus on a focusable location inside
that widget, and %FALSE if moving in @direction moved the focus
outside the widget. If returning %TRUE, widgets normally
call gtk_widget_grab_focus() to place the focus accordingly;
if returning %FALSE, they don't modify the current focus location.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if focus ended up inside @widget</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="direction" transfer-ownership="none">
            <doc xml:whitespace="preserve">direction of focus movement</doc>
            <type name="DirectionType" c:type="GtkDirectionType"/>
          </parameter>
        </parameters>
      </method>
      <method name="child_notify" c:identifier="gtk_widget_child_notify">
        <doc xml:whitespace="preserve">Emits a #GtkWidget::child-notify signal for the 
&lt;link linkend="child-properties"&gt;child property&lt;/link&gt; @child_property 
on @widget.
This is the analogue of g_object_notify() for child properties.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="child_property" transfer-ownership="none">
            <doc xml:whitespace="preserve">the name of a child property installed on the class of @widget&lt;!-- --&gt;'s parent</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="class_path" c:identifier="gtk_widget_class_path">
        <doc xml:whitespace="preserve">Same as gtk_widget_path(), but always uses the name of a widget's type,
never uses a custom name set with gtk_widget_set_name().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="path_length"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     allow-none="1">
            <doc xml:whitespace="preserve">location to store the length of the class path, or %NULL</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
          <parameter name="path"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     allow-none="1">
            <doc xml:whitespace="preserve">location to store the class path as an allocated string, or %NULL</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="path_reversed"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     allow-none="1">
            <doc xml:whitespace="preserve">location to store the reverse class path as an allocated string, or %NULL</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_pango_context"
              c:identifier="gtk_widget_create_pango_context">
        <doc xml:whitespace="preserve">Creates a new #PangoContext with the appropriate font map,
font description, and base direction for drawing text for
this widget. See also gtk_widget_get_pango_context().</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the new #PangoContext</doc>
          <type name="Pango.Context" c:type="PangoContext*"/>
        </return-value>
      </method>
      <method name="create_pango_layout"
              c:identifier="gtk_widget_create_pango_layout">
        <doc xml:whitespace="preserve">Creates a new #PangoLayout with the appropriate font map,
font description, and base direction for drawing text for
this widget.
If you keep a #PangoLayout created in this way around, in order to
notify the layout of changes to the base direction or font of this
widget, you must call pango_layout_context_changed() in response to
the #GtkWidget::style-set and #GtkWidget::direction-changed signals
for the widget.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the new #PangoLayout</doc>
          <type name="Pango.Layout" c:type="PangoLayout*"/>
        </return-value>
        <parameters>
          <parameter name="text" transfer-ownership="none">
            <doc xml:whitespace="preserve">text to set on the layout (can be %NULL)</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="destroy" c:identifier="gtk_widget_destroy">
        <doc xml:whitespace="preserve">Destroys a widget. Equivalent to gtk_object_destroy(), except that
you don't have to cast the widget to #GtkObject. When a widget is
destroyed, it will break any references it holds to other objects.
If the widget is inside a container, the widget will be removed
from the container. If the widget is a toplevel (derived from
#GtkWindow), it will be removed from the list of toplevels, and the
reference GTK+ holds to it will be removed. Removing a
widget from its container or the list of toplevels results in the
widget being finalized, unless you've added additional references
to the widget with g_object_ref().
In most cases, only toplevel widgets (windows) require explicit
destruction, because when you destroy a toplevel its children will
be destroyed as well.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="destroyed" c:identifier="gtk_widget_destroyed">
        <doc xml:whitespace="preserve">This function sets *@widget_pointer to %NULL if @widget_pointer !=
%NULL.  It's intended to be used as a callback connected to the
"destroy" signal of a widget. You connect gtk_widget_destroyed()
as a signal handler, and pass the address of your widget variable
as user data. Then when the widget is destroyed, the variable will
be set to %NULL. Useful for example to avoid multiple copies
of the same dialog.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="widget_pointer"
                     direction="inout"
                     caller-allocates="0"
                     transfer-ownership="none">
            <doc xml:whitespace="preserve">address of a variable that contains @widget</doc>
            <type name="Widget" c:type="GtkWidget**"/>
          </parameter>
        </parameters>
      </method>
      <method name="device_is_shadowed"
              c:identifier="gtk_widget_device_is_shadowed"
              version="3.0">
        <doc xml:whitespace="preserve">Returns %TRUE if @device has been shadowed by a GTK+
device grab on another widget, so it would stop sending
events to @widget. This may be used in the
#GtkWidget::grab-notify signal to check for specific
devices. See gtk_device_grab_add().
by another #GtkWidget than @widget.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if there is an ongoing grab on @device</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="device" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GdkDevice</doc>
            <type name="Gdk.Device" c:type="GdkDevice*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ensure_style" c:identifier="gtk_widget_ensure_style">
        <doc xml:whitespace="preserve">Ensures that @widget has a style (@widget-&gt;style). Not a very useful
function; most of the time, if you want the style, the widget is
realized, and realized widgets are guaranteed to have a style
already.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="error_bell"
              c:identifier="gtk_widget_error_bell"
              version="2.12">
        <doc xml:whitespace="preserve">Notifies the user about an input-related error on this widget. 
If the #GtkSettings:gtk-error-bell setting is %TRUE, it calls
gdk_window_beep(), otherwise it does nothing.
Note that the effect of gdk_window_beep() can be configured in many
ways, depending on the windowing backend and the desktop environment
or window manager that is used.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="event" c:identifier="gtk_widget_event">
        <doc xml:whitespace="preserve">Rarely-used function. This function is used to emit
the event signals on a widget (those signals should never
be emitted without using this function to do so).
If you want to synthesize an event though, don't use this function;
instead, use gtk_main_do_event() so the event will behave as if
it were in the event queue. Don't synthesize expose events; instead,
use gdk_window_invalidate_rect() to invalidate a region of the
window.
the event was handled)</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">return from the event signal emission (%TRUE if</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="event" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GdkEvent</doc>
            <type name="Gdk.Event" c:type="GdkEvent*"/>
          </parameter>
        </parameters>
      </method>
      <method name="freeze_child_notify"
              c:identifier="gtk_widget_freeze_child_notify">
        <doc xml:whitespace="preserve">Stops emission of #GtkWidget::child-notify signals on @widget. The 
signals are queued until gtk_widget_thaw_child_notify() is called 
on @widget. 
This is the analogue of g_object_freeze_notify() for child properties.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="get_accessible" c:identifier="gtk_widget_get_accessible">
        <doc xml:whitespace="preserve">Returns the accessible object that describes the widget to an
assistive technology.
If no accessibility library is loaded (i.e. no ATK implementation library is
loaded via &lt;envar&gt;GTK_MODULES&lt;/envar&gt; or via another application library,
such as libgnome), then this #AtkObject instance may be a no-op. Likewise,
if no class-specific #AtkObject implementation is available for the widget
instance in question, it will inherit an #AtkObject implementation from the
first ancestor class for which such an implementation is defined.
The documentation of the &lt;ulink url="http://developer.gnome.org/doc/API/2.0/atk/index.html"&gt;ATK&lt;/ulink&gt;
library contains more information about accessible objects and their uses.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the #AtkObject associated with @widget</doc>
          <type name="Atk.Object" c:type="AtkObject*"/>
        </return-value>
      </method>
      <method name="get_allocation"
              c:identifier="gtk_widget_get_allocation"
              version="2.18">
        <doc xml:whitespace="preserve">Retrieves the widget's allocation.
be its "adjusted" allocation, that is, the widget's parent
container typically calls gtk_widget_size_allocate() with an
allocation, and that allocation is then adjusted (to handle margin
and alignment for example) before assignment to the widget.
gtk_widget_get_allocation() returns the adjusted allocation that
was actually assigned to the widget. The adjusted allocation is
guaranteed to be completely contained within the
gtk_widget_size_allocate() allocation, however. So a #GtkContainer
is guaranteed that its children stay inside the assigned bounds,
but not that they have exactly the bounds the container assigned.
There is no way to get the original allocation assigned by
gtk_widget_size_allocate(), since it isn't stored; if a container
implementation needs that information it will have to track it itself.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="allocation"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:whitespace="preserve">a pointer to a #GtkAllocation to copy to</doc>
            <type name="Allocation" c:type="GtkAllocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_ancestor" c:identifier="gtk_widget_get_ancestor">
        <doc xml:whitespace="preserve">Gets the first ancestor of @widget with type @widget_type. For example,
&lt;literal&gt;gtk_widget_get_ancestor (widget, GTK_TYPE_BOX)&lt;/literal&gt; gets 
the first #GtkBox that's an ancestor of @widget. No reference will be 
added to the returned widget; it should not be unreferenced. See note 
about checking for a toplevel #GtkWindow in the docs for 
gtk_widget_get_toplevel().
Note that unlike gtk_widget_is_ancestor(), gtk_widget_get_ancestor() 
considers @widget to be an ancestor of itself.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the ancestor widget, or %NULL if not found</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="widget_type" transfer-ownership="none">
            <doc xml:whitespace="preserve">ancestor type</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_app_paintable"
              c:identifier="gtk_widget_get_app_paintable"
              version="2.18">
        <doc xml:whitespace="preserve">Determines whether the application intends to draw on the widget in
an #GtkWidget::expose-event handler.
See gtk_widget_set_app_paintable()</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the widget is app paintable</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_can_default"
              c:identifier="gtk_widget_get_can_default"
              version="2.18">
        <doc xml:whitespace="preserve">Determines whether @widget can be a default widget. See
gtk_widget_set_can_default().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if @widget can be a default widget, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_can_focus"
              c:identifier="gtk_widget_get_can_focus"
              version="2.18">
        <doc xml:whitespace="preserve">Determines whether @widget can own the input focus. See
gtk_widget_set_can_focus().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if @widget can own the input focus, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_child_requisition"
              c:identifier="gtk_widget_get_child_requisition"
              deprecated="Use gtk_size_request_get_size() instead."
              deprecated-version="3.0">
        <doc xml:whitespace="preserve">This function is only for use in widget implementations. Obtains
geometry on the widget (e.g. with gtk_widget_set_size_request()),
in which case it returns that geometry instead of the widget's
requisition.
This function differs from gtk_widget_size_request() in that
it retrieves the last size request value from @widget-&gt;requisition,
while gtk_widget_size_request() actually calls the "size_request" method
on @widget to compute the size request and fill in @widget-&gt;requisition,
and only then returns @widget-&gt;requisition.
Because this function does not call the "size_request" method, it
can only be used when you know that @widget-&gt;requisition is
up-to-date, that is, gtk_widget_size_request() has been called
since the last time a resize was queued. In general, only container
implementations have this information; applications should use
gtk_widget_size_request().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="requisition"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkRequisition to be filled in</doc>
            <type name="Requisition" c:type="GtkRequisition*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_child_visible"
              c:identifier="gtk_widget_get_child_visible">
        <doc xml:whitespace="preserve">Gets the value set with gtk_widget_set_child_visible().
If you feel a need to use this function, your code probably
needs reorganization. 
This function is only useful for container implementations and
never should be called by an application.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the widget is mapped with the parent.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_clipboard"
              c:identifier="gtk_widget_get_clipboard"
              version="2.2">
        <doc xml:whitespace="preserve">Returns the clipboard object for the given selection to
be used with @widget. @widget must have a #GdkDisplay
associated with it, so must be attached to a toplevel
window.
clipboard already exists, a new one will
be created. Once a clipboard object has
been created, it is persistent for all time.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the appropriate clipboard object. If no</doc>
          <type name="Clipboard" c:type="GtkClipboard*"/>
        </return-value>
        <parameters>
          <parameter name="selection" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GdkAtom which identifies the clipboard to use. %GDK_SELECTION_CLIPBOARD gives the default clipboard. Another common value is %GDK_SELECTION_PRIMARY, which gives the primary X selection.</doc>
            <type name="Gdk.Atom" c:type="GdkAtom"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_colormap" c:identifier="gtk_widget_get_colormap">
        <doc xml:whitespace="preserve">Gets the colormap that will be used to render @widget. No reference will
be added to the returned colormap; it should not be unreferenced.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the colormap used by @widget</doc>
          <type name="Gdk.Colormap" c:type="GdkColormap*"/>
        </return-value>
      </method>
      <method name="get_composite_name"
              c:identifier="gtk_widget_get_composite_name">
        <doc xml:whitespace="preserve">Obtains the composite name of a widget. 
a composite child. The string should be freed when it is no 
longer needed.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the composite name of @widget, or %NULL if @widget is not</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_device_events"
              c:identifier="gtk_widget_get_device_events"
              version="3.0">
        <doc xml:whitespace="preserve">Returns the events mask for the widget corresponding to an specific device. These
are the events that the widget will receive when @device operates on it.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">device event mask for @widget</doc>
          <type name="Gdk.EventMask" c:type="GdkEventMask"/>
        </return-value>
        <parameters>
          <parameter name="device" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GdkDevice</doc>
            <type name="Gdk.Device" c:type="GdkDevice*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_direction" c:identifier="gtk_widget_get_direction">
        <doc xml:whitespace="preserve">Gets the reading direction for a particular widget. See
gtk_widget_set_direction().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the reading direction for the widget.</doc>
          <type name="TextDirection" c:type="GtkTextDirection"/>
        </return-value>
      </method>
      <method name="get_display"
              c:identifier="gtk_widget_get_display"
              version="2.2">
        <doc xml:whitespace="preserve">Get the #GdkDisplay for the toplevel window associated with
this widget. This function can only be called after the widget
has been added to a widget hierarchy with a #GtkWindow at the top.
In general, you should only create display specific
resources when a widget has been realized, and you should
free those resources when the widget is unrealized.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the #GdkDisplay for the toplevel for this widget.</doc>
          <type name="Gdk.Display" c:type="GdkDisplay*"/>
        </return-value>
      </method>
      <method name="get_double_buffered"
              c:identifier="gtk_widget_get_double_buffered"
              version="2.18">
        <doc xml:whitespace="preserve">Determines whether the widget is double buffered.
See gtk_widget_set_double_buffered()</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the widget is double buffered</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_events" c:identifier="gtk_widget_get_events">
        <doc xml:whitespace="preserve">Returns the event mask for the widget (a bitfield containing flags
from the #GdkEventMask enumeration). These are the events that the widget
will receive.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">event mask for @widget</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="get_extension_events"
              c:identifier="gtk_widget_get_extension_events">
        <doc xml:whitespace="preserve">Retrieves the extension events the widget will receive; see
gdk_input_set_extension_events().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">extension events for @widget</doc>
          <type name="Gdk.ExtensionMode" c:type="GdkExtensionMode"/>
        </return-value>
      </method>
      <method name="get_halign" c:identifier="gtk_widget_get_halign">
        <doc xml:whitespace="preserve">Gets the value of the #GtkWidget:halign property.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the horizontal alignment of @widget</doc>
          <type name="Align" c:type="GtkAlign"/>
        </return-value>
      </method>
      <method name="get_has_tooltip"
              c:identifier="gtk_widget_get_has_tooltip"
              version="2.12">
        <doc xml:whitespace="preserve">Returns the current value of the has-tooltip property.  See
GtkWidget:has-tooltip for more information.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">current value of has-tooltip on @widget.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_has_window"
              c:identifier="gtk_widget_get_has_window"
              version="2.18">
        <doc xml:whitespace="preserve">Determines whether @widget has a #GdkWindow of its own. See
gtk_widget_set_has_window().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if @widget has a window, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_mapped"
              c:identifier="gtk_widget_get_mapped"
              version="2.20">
        <doc xml:whitespace="preserve">Whether the widget is mapped.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the widget is mapped, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_margin_bottom"
              c:identifier="gtk_widget_get_margin_bottom">
        <doc xml:whitespace="preserve">Gets the value of the #GtkWidget:margin-bottom property.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The bottom margin of @widget</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="get_margin_left" c:identifier="gtk_widget_get_margin_left">
        <doc xml:whitespace="preserve">Gets the value of the #GtkWidget:margin-left property.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The left margin of @widget</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="get_margin_right"
              c:identifier="gtk_widget_get_margin_right">
        <doc xml:whitespace="preserve">Gets the value of the #GtkWidget:margin-right property.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The left margin of @widget</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="get_margin_top" c:identifier="gtk_widget_get_margin_top">
        <doc xml:whitespace="preserve">Gets the value of the #GtkWidget:margin-top property.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The top margin of @widget</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="get_modifier_style"
              c:identifier="gtk_widget_get_modifier_style">
        <doc xml:whitespace="preserve">Returns the current modifier style for the widget. (As set by
gtk_widget_modify_style().) If no style has previously set, a new
#GtkRcStyle will be created with all values unset, and set as the
modifier style for the widget. If you make changes to this rc
style, you must call gtk_widget_modify_style(), passing in the
returned rc style, to make sure that your changes take effect.
normally end up destroying it, because gtk_widget_modify_style() copies
the passed-in style and sets the copy as the new modifier style,
thus dropping any reference to the old modifier style. Add a reference
to the modifier style if you want to keep it alive.
owned by the widget. If you want to keep a pointer to value this
around, you must add a refcount using g_object_ref().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the modifier style for the widget. This rc style is</doc>
          <type name="RcStyle" c:type="GtkRcStyle*"/>
        </return-value>
      </method>
      <method name="get_name" c:identifier="gtk_widget_get_name">
        <doc xml:whitespace="preserve">Retrieves the name of a widget. See gtk_widget_set_name() for the
significance of widget names.
should not be modified or freed</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">name of the widget. This string is owned by GTK+ and</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_no_show_all"
              c:identifier="gtk_widget_get_no_show_all"
              version="2.4">
        <doc xml:whitespace="preserve">Returns the current value of the GtkWidget:no-show-all property, 
which determines whether calls to gtk_widget_show_all() and 
gtk_widget_hide_all() will affect this widget.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the current value of the "no-show-all" property.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_pango_context"
              c:identifier="gtk_widget_get_pango_context">
        <doc xml:whitespace="preserve">Gets a #PangoContext with the appropriate font map, font description,
and base direction for this widget. Unlike the context returned
by gtk_widget_create_pango_context(), this context is owned by
the widget (it can be used until the screen for the widget changes
or the widget is removed from its toplevel), and will be updated to
match any changes to the widget's attributes.
If you create and keep a #PangoLayout using this context, you must
deal with changes to the context by calling pango_layout_context_changed()
on the layout in response to the #GtkWidget::style-set and 
#GtkWidget::direction-changed signals for the widget.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the #PangoContext for the widget.</doc>
          <type name="Pango.Context" c:type="PangoContext*"/>
        </return-value>
      </method>
      <method name="get_parent" c:identifier="gtk_widget_get_parent">
        <doc xml:whitespace="preserve">Returns the parent container of @widget.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the parent container of @widget, or %NULL</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
      </method>
      <method name="get_parent_window"
              c:identifier="gtk_widget_get_parent_window">
        <doc xml:whitespace="preserve">Gets @widget's parent window.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the parent window of @widget.</doc>
          <type name="Gdk.Window" c:type="GdkWindow*"/>
        </return-value>
      </method>
      <method name="get_pointer" c:identifier="gtk_widget_get_pointer">
        <doc xml:whitespace="preserve">Obtains the location of the mouse pointer in widget coordinates.
Widget coordinates are a bit odd; for historical reasons, they are
defined as @widget-&gt;window coordinates for widgets that are not
#GTK_NO_WINDOW widgets, and are relative to @widget-&gt;allocation.x,</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="x"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     allow-none="1">
            <doc xml:whitespace="preserve">return location for the X coordinate, or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="y"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     allow-none="1">
            <doc xml:whitespace="preserve">return location for the Y coordinate, or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_realized"
              c:identifier="gtk_widget_get_realized"
              version="2.20">
        <doc xml:whitespace="preserve">Determines whether @widget is realized.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if @widget is realized, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_receives_default"
              c:identifier="gtk_widget_get_receives_default"
              version="2.18">
        <doc xml:whitespace="preserve">Determines whether @widget is alyways treated as default widget
withing its toplevel when it has the focus, even if another widget
is the default.
See gtk_widget_set_receives_default().
%FALSE otherwise</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if @widget acts as default widget when focussed,</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_requisition"
              c:identifier="gtk_widget_get_requisition"
              version="2.20"
              deprecated="The #GtkRequisition cache on the widget was"
              deprecated-version="3.0">
        <doc xml:whitespace="preserve">Retrieves the widget's requisition.
This function should only be used by widget implementations in
order to figure whether the widget's requisition has actually
changed after some internal state change (so that they can call
gtk_widget_queue_resize() instead of gtk_widget_queue_draw()).
Normally, gtk_widget_size_request() should be used.
removed, If you need to cache sizes across requests and allocations,
add an explicit cache to the widget in question instead.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="requisition"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:whitespace="preserve">a pointer to a #GtkRequisition to copy to</doc>
            <type name="Requisition" c:type="GtkRequisition*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_root_window"
              c:identifier="gtk_widget_get_root_window"
              version="2.2">
        <doc xml:whitespace="preserve">Get the root window where this widget is located. This function can
only be called after the widget has been added to a widget
hierarchy with #GtkWindow at the top.
The root window is useful for such purposes as creating a popup
#GdkWindow associated with the window. In general, you should only
create display specific resources when a widget has been realized,
and you should free those resources when the widget is unrealized.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the #GdkWindow root window for the toplevel for this widget.</doc>
          <type name="Gdk.Window" c:type="GdkWindow*"/>
        </return-value>
      </method>
      <method name="get_screen"
              c:identifier="gtk_widget_get_screen"
              version="2.2">
        <doc xml:whitespace="preserve">Get the #GdkScreen from the toplevel window associated with
this widget. This function can only be called after the widget
has been added to a widget hierarchy with a #GtkWindow
at the top.
In general, you should only create screen specific
resources when a widget has been realized, and you should
free those resources when the widget is unrealized.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the #GdkScreen for the toplevel for this widget.</doc>
          <type name="Gdk.Screen" c:type="GdkScreen*"/>
        </return-value>
      </method>
      <method name="get_sensitive"
              c:identifier="gtk_widget_get_sensitive"
              version="2.18">
        <doc xml:whitespace="preserve">Returns the widget's sensitivity (in the sense of returning
the value that has been set using gtk_widget_set_sensitive()).
The effective sensitivity of a widget is however determined by both its
own and its parent widget's sensitivity. See gtk_widget_is_sensitive().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the widget is sensitive</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_settings" c:identifier="gtk_widget_get_settings">
        <doc xml:whitespace="preserve">Gets the settings object holding the settings (global property
settings, RC file information, etc) used for this widget.
Note that this function can only be called when the #GtkWidget
is attached to a toplevel, since the settings object is specific
to a particular #GdkScreen.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the relevant #GtkSettings object</doc>
          <type name="Settings" c:type="GtkSettings*"/>
        </return-value>
      </method>
      <method name="get_size_request"
              c:identifier="gtk_widget_get_size_request">
        <doc xml:whitespace="preserve">Gets the size request that was explicitly set for the widget using
gtk_widget_set_size_request(). A value of -1 stored in @width or
and the natural requisition of the widget will be used intead. See
gtk_widget_set_size_request(). To get the size a widget will
actually request, call gtk_size_request_get_size() instead of
this function.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="width"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     allow-none="1">
            <doc xml:whitespace="preserve">return location for width, or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="height"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     allow-none="1">
            <doc xml:whitespace="preserve">return location for height, or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_snapshot"
              c:identifier="gtk_widget_get_snapshot"
              version="2.14"
              introspectable="0">
        <doc xml:whitespace="preserve">Create a #GdkPixmap of the contents of the widget and its children.
Works even if the widget is obscured. The depth and visual of the
resulting pixmap is dependent on the widget being snapshot and likely
differs from those of a target widget displaying the pixmap.
The function gdk_pixbuf_get_from_drawable() can be used to convert
the pixmap to a visual independant representation.
The snapshot area used by this function is the @widget's allocation plus
any extra space occupied by additional windows belonging to this widget
(such as the arrows of a spin button).
Thus, the resulting snapshot pixmap is possibly larger than the allocation.
If @clip_rect is non-%NULL, the resulting pixmap is shrunken to
match the specified clip_rect. The (x,y) coordinates of @clip_rect are
interpreted widget relative. If width or height of @clip_rect are 0 or
negative, the width or height of the resulting pixmap will be shrunken
by the respective amount.
For instance a @clip_rect &lt;literal&gt;{ +5, +5, -10, -10 }&lt;/literal&gt; will
chop off 5 pixels at each side of the snapshot pixmap.
If non-%NULL, @clip_rect will contain the exact widget-relative snapshot
coordinates upon return. A @clip_rect of &lt;literal&gt;{ -1, -1, 0, 0 }&lt;/literal&gt;
can be used to preserve the auto-grown snapshot area and use @clip_rect
as a pure output parameter.
The returned pixmap can be %NULL, if the resulting @clip_area was empty.</doc>
        <return-value>
          <doc xml:whitespace="preserve">#GdkPixmap snapshot of the widget</doc>
          <type name="Gdk.Pixmap" c:type="GdkPixmap*"/>
        </return-value>
        <parameters>
          <parameter name="clip_rect" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">a #GdkRectangle or %NULL</doc>
            <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_state"
              c:identifier="gtk_widget_get_state"
              version="2.18">
        <doc xml:whitespace="preserve">Returns the widget's state. See gtk_widget_set_state().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the state of @widget.</doc>
          <type name="StateType" c:type="GtkStateType"/>
        </return-value>
      </method>
      <method name="get_style" c:identifier="gtk_widget_get_style">
        <doc xml:whitespace="preserve">Simply an accessor function that returns @widget-&gt;style.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the widget's #GtkStyle</doc>
          <type name="Style" c:type="GtkStyle*"/>
        </return-value>
      </method>
      <method name="get_support_multidevice"
              c:identifier="gtk_widget_get_support_multidevice">
        <doc xml:whitespace="preserve">Returns %TRUE if @widget is multiple pointer aware. See
gtk_widget_set_support_multidevice() for more information.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE is @widget is multidevice aware.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_tooltip_markup"
              c:identifier="gtk_widget_get_tooltip_markup"
              version="2.12">
        <doc xml:whitespace="preserve">Gets the contents of the tooltip for @widget.
returned string with g_free() when done.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the tooltip text, or %NULL. You should free the</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_tooltip_text"
              c:identifier="gtk_widget_get_tooltip_text"
              version="2.12">
        <doc xml:whitespace="preserve">Gets the contents of the tooltip for @widget.
returned string with g_free() when done.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the tooltip text, or %NULL. You should free the</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_tooltip_window"
              c:identifier="gtk_widget_get_tooltip_window"
              version="2.12">
        <doc xml:whitespace="preserve">Returns the #GtkWindow of the current tooltip. This can be the
GtkWindow created by default, or the custom tooltip window set
using gtk_widget_set_tooltip_window().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The #GtkWindow of the current tooltip.</doc>
          <type name="Window" c:type="GtkWindow*"/>
        </return-value>
      </method>
      <method name="get_toplevel" c:identifier="gtk_widget_get_toplevel">
        <doc xml:whitespace="preserve">This function returns the topmost widget in the container hierarchy
returned as the topmost widget. No reference will be added to the
returned widget; it should not be unreferenced.
Note the difference in behavior vs. gtk_widget_get_ancestor();
&lt;literal&gt;gtk_widget_get_ancestor (widget, GTK_TYPE_WINDOW)&lt;/literal&gt; 
would return
%NULL if @widget wasn't inside a toplevel window, and if the
window was inside a #GtkWindow-derived widget which was in turn
inside the toplevel #GtkWindow. While the second case may
seem unlikely, it actually happens when a #GtkPlug is embedded
inside a #GtkSocket within the same application.
To reliably find the toplevel #GtkWindow, use
gtk_widget_get_toplevel() and check if the %TOPLEVEL flags
is set on the result.
|[
GtkWidget *toplevel = gtk_widget_get_toplevel (widget);
if (gtk_widget_is_toplevel (toplevel))
{
/&amp;ast; Perform action on toplevel. &amp;ast;/
}
]|
if there's no ancestor.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the topmost ancestor of @widget, or @widget itself</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
      </method>
      <method name="get_valign" c:identifier="gtk_widget_get_valign">
        <doc xml:whitespace="preserve">Gets the value of the #GtkWidget:valign property.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the vertical alignment of @widget</doc>
          <type name="Align" c:type="GtkAlign"/>
        </return-value>
      </method>
      <method name="get_visible"
              c:identifier="gtk_widget_get_visible"
              version="2.18">
        <doc xml:whitespace="preserve">Determines whether the widget is visible. Note that this doesn't
take into account whether the widget's parent is also visible
or the widget is obscured in any way.
See gtk_widget_set_visible().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the widget is visible</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_visual" c:identifier="gtk_widget_get_visual">
        <doc xml:whitespace="preserve">Gets the visual that will be used to render @widget.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the visual for @widget</doc>
          <type name="Gdk.Visual" c:type="GdkVisual*"/>
        </return-value>
      </method>
      <method name="get_window"
              c:identifier="gtk_widget_get_window"
              version="2.14">
        <doc xml:whitespace="preserve">Returns the widget's window if it is realized, %NULL otherwise</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">@widget's window.</doc>
          <type name="Gdk.Window" c:type="GdkWindow*"/>
        </return-value>
      </method>
      <method name="grab_default" c:identifier="gtk_widget_grab_default">
        <doc xml:whitespace="preserve">Causes @widget to become the default widget. @widget must have the
%GTK_CAN_DEFAULT flag set; typically you have to set this flag
yourself by calling &lt;literal&gt;gtk_widget_set_can_default (@widget,
%TRUE)&lt;/literal&gt;. The default widget is activated when 
the user presses Enter in a window. Default widgets must be 
activatable, that is, gtk_widget_activate() should affect them. Note
that #GtkEntry widgets require the "activates-default" property
set to %TRUE before they activate the default widget when Enter
is pressed and the #GtkEntry is focused.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="grab_focus" c:identifier="gtk_widget_grab_focus">
        <doc xml:whitespace="preserve">Causes @widget to have the keyboard focus for the #GtkWindow it's
inside. @widget must be a focusable widget, such as a #GtkEntry;
something like #GtkFrame won't work.
More precisely, it must have the %GTK_CAN_FOCUS flag set. Use
gtk_widget_set_can_focus() to modify that flag.
The widget also needs to be realized and mapped. This is indicated by the
related signals. Grabbing the focus immediately after creating the widget
will likely fail and cause critical warnings.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="has_default"
              c:identifier="gtk_widget_has_default"
              version="2.18">
        <doc xml:whitespace="preserve">Determines whether @widget is the current default widget within its
toplevel. See gtk_widget_set_can_default().
its toplevel, %FALSE otherwise</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if @widget is the current default widget within</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="has_focus"
              c:identifier="gtk_widget_has_focus"
              version="2.18">
        <doc xml:whitespace="preserve">Determines if the widget has the global input focus. See
gtk_widget_is_focus() for the difference between having the global
input focus, and only having the focus within a toplevel.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the widget has the global input focus.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="has_grab"
              c:identifier="gtk_widget_has_grab"
              version="2.18">
        <doc xml:whitespace="preserve">Determines whether the widget is currently grabbing events, so it
is the only widget receiving input events (keyboard and mouse).
See also gtk_grab_add().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the widget is in the grab_widgets stack</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="has_rc_style"
              c:identifier="gtk_widget_has_rc_style"
              version="2.20">
        <doc xml:whitespace="preserve">Determines if the widget style has been looked up through the rc mechanism.
mechanism, %FALSE otherwise.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the widget has been looked up through the rc</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="has_screen"
              c:identifier="gtk_widget_has_screen"
              version="2.2">
        <doc xml:whitespace="preserve">Checks whether there is a #GdkScreen is associated with
this widget. All toplevel widgets have an associated
screen, and all widgets added into a hierarchy with a toplevel
window at the top.
with the widget.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if there is a #GdkScreen associcated</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="hide" c:identifier="gtk_widget_hide">
        <doc xml:whitespace="preserve">Reverses the effects of gtk_widget_show(), causing the widget to be
hidden (invisible to the user).</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="hide_all" c:identifier="gtk_widget_hide_all">
        <doc xml:whitespace="preserve">Recursively hides a widget and any child widgets.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="hide_on_delete" c:identifier="gtk_widget_hide_on_delete">
        <doc xml:whitespace="preserve">Utility function; intended to be connected to the #GtkWidget::delete-event
signal on a #GtkWindow. The function calls gtk_widget_hide() on its
argument, then returns %TRUE. If connected to ::delete-event, the
result is that clicking the close button for a window (on the
window frame, top right corner usually) will hide but not destroy
the window. By default, GTK+ destroys windows when ::delete-event
is received.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="input_shape_combine_mask"
              c:identifier="gtk_widget_input_shape_combine_mask"
              version="2.10">
        <doc xml:whitespace="preserve">Sets an input shape for this widget's GDK window. This allows for
windows which react to mouse click in a nonrectangular region, see 
gdk_window_input_shape_combine_mask() for more information.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="shape_mask"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">shape to be added, or %NULL to remove an existing shape</doc>
            <type name="Gdk.Bitmap" c:type="GdkBitmap*"/>
          </parameter>
          <parameter name="offset_x" transfer-ownership="none">
            <doc xml:whitespace="preserve">X position of shape mask with respect to @window</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="offset_y" transfer-ownership="none">
            <doc xml:whitespace="preserve">Y position of shape mask with respect to @window</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="intersect" c:identifier="gtk_widget_intersect">
        <doc xml:whitespace="preserve">Computes the intersection of a @widget's area and @area, storing
the intersection in @intersection, and returns %TRUE if there was
an intersection.  @intersection may be %NULL if you're only
interested in whether there was an intersection.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if there was an intersection</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="area" transfer-ownership="none">
            <doc xml:whitespace="preserve">a rectangle</doc>
            <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
          </parameter>
          <parameter name="intersection" transfer-ownership="none">
            <doc xml:whitespace="preserve">rectangle to store intersection of @widget and @area</doc>
            <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_ancestor" c:identifier="gtk_widget_is_ancestor">
        <doc xml:whitespace="preserve">Determines whether @widget is somewhere inside @ancestor, possibly with
intermediate containers.
grandchild, great grandchild, etc.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if @ancestor contains @widget as a child,</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="ancestor" transfer-ownership="none">
            <doc xml:whitespace="preserve">another #GtkWidget</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_composited"
              c:identifier="gtk_widget_is_composited"
              version="2.10">
        <doc xml:whitespace="preserve">Whether @widget can rely on having its alpha channel
drawn correctly. On X11 this function returns whether a
compositing manager is running for @widget's screen.
Please note that the semantics of this call will change
in the future if used on a widget that has a composited
window in its hierarchy (as set by gdk_window_set_composited()).
channel being drawn correctly.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the widget can rely on its alpha</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="is_drawable"
              c:identifier="gtk_widget_is_drawable"
              version="2.18">
        <doc xml:whitespace="preserve">Determines whether @widget can be drawn to. A widget can be drawn
to if it is mapped and visible.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if @widget is drawable, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="is_focus" c:identifier="gtk_widget_is_focus">
        <doc xml:whitespace="preserve">Determines if the widget is the focus widget within its
toplevel. (This does not mean that the %HAS_FOCUS flag is
necessarily set; %HAS_FOCUS will only be set if the
toplevel widget additionally has the global input focus.)</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the widget is the focus widget.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="is_sensitive"
              c:identifier="gtk_widget_is_sensitive"
              version="2.18">
        <doc xml:whitespace="preserve">Returns the widget's effective sensitivity, which means
it is sensitive itself and also its parent widget is sensntive</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the widget is effectively sensitive</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="is_toplevel"
              c:identifier="gtk_widget_is_toplevel"
              version="2.18">
        <doc xml:whitespace="preserve">Determines whether @widget is a toplevel widget. Currently only
#GtkWindow and #GtkInvisible are toplevel widgets. Toplevel
widgets have no parent widget.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if @widget is a toplevel, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="keynav_failed"
              c:identifier="gtk_widget_keynav_failed"
              version="2.12">
        <doc xml:whitespace="preserve">This function should be called whenever keyboard navigation within
a single widget hits a boundary. The function emits the
#GtkWidget::keynav-failed signal on the widget and its return
value should be interpreted in a way similar to the return value of
gtk_widget_child_focus():
When %TRUE is returned, stay in the widget, the failed keyboard
navigation is Ok and/or there is nowhere we can/should move the
focus to.
When %FALSE is returned, the caller should continue with keyboard
navigation outside the widget, e.g. by calling
gtk_widget_child_focus() on the widget's toplevel.
The default ::keynav-failed handler returns %TRUE for 
%GTK_DIR_TAB_FORWARD and %GTK_DIR_TAB_BACKWARD. For the other 
values of #GtkDirectionType, it looks at the 
#GtkSettings:gtk-keynav-cursor-only setting and returns %FALSE 
if the setting is %TRUE. This way the entire user interface
becomes cursor-navigatable on input devices such as mobile phones
which only have cursor keys but no tab key.
Whenever the default handler returns %TRUE, it also calls
gtk_widget_error_bell() to notify the user of the failed keyboard
navigation.
A use case for providing an own implementation of ::keynav-failed 
(either by connecting to it or by overriding it) would be a row of
#GtkEntry widgets where the user should be able to navigate the
entire row with the cursor keys, as e.g. known from user interfaces 
that require entering license keys.
if the emitting widget should try to handle the keyboard
navigation attempt in its parent container(s).</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if stopping keyboard navigation is fine, %FALSE</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="direction" transfer-ownership="none">
            <doc xml:whitespace="preserve">direction of focus movement</doc>
            <type name="DirectionType" c:type="GtkDirectionType"/>
          </parameter>
        </parameters>
      </method>
      <method name="list_accel_closures"
              c:identifier="gtk_widget_list_accel_closures">
        <doc xml:whitespace="preserve">Lists the closures used by @widget for accelerator group connections
with gtk_accel_group_connect_by_path() or gtk_accel_group_connect().
The closures can be used to monitor accelerator changes on @widget,
by connecting to the @GtkAccelGroup::accel-changed signal of the
#GtkAccelGroup of a closure which can be found out with
gtk_accel_group_from_accel_closure().
a newly allocated #GList of closures</doc>
        <return-value transfer-ownership="container">
          <type name="GLib.List" c:type="GList*">
            <type name="GObject.Closure"/>
          </type>
        </return-value>
      </method>
      <method name="list_mnemonic_labels"
              c:identifier="gtk_widget_list_mnemonic_labels"
              version="2.4">
        <doc xml:whitespace="preserve">Returns a newly allocated list of the widgets, normally labels, for
which this widget is the target of a mnemonic (see for example,
gtk_label_set_mnemonic_widget()).
The widgets in the list are not individually referenced. If you
want to iterate through the list and perform actions involving
callbacks that might destroy the widgets, you
&lt;emphasis&gt;must&lt;/emphasis&gt; call &lt;literal&gt;g_list_foreach (result,
(GFunc)g_object_ref, NULL)&lt;/literal&gt; first, and then unref all the
widgets afterwards.
mnemonic labels; free this list
with g_list_free() when you are done with it.</doc>
        <return-value transfer-ownership="container">
          <doc xml:whitespace="preserve">the list of</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Widget"/>
          </type>
        </return-value>
      </method>
      <method name="map" c:identifier="gtk_widget_map">
        <doc xml:whitespace="preserve">This function is only for use in widget implementations. Causes
a widget to be mapped if it isn't already.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="mnemonic_activate"
              c:identifier="gtk_widget_mnemonic_activate">
        <doc xml:whitespace="preserve">Emits the #GtkWidget::mnemonic-activate signal.
The default handler for this signal activates the @widget if
is %TRUE.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the signal has been handled</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="group_cycling" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE if there are other widgets with the same mnemonic</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="modify_base" c:identifier="gtk_widget_modify_base">
        <doc xml:whitespace="preserve">Sets the base color for a widget in a particular state.
All other style values are left untouched. The base color
is the background color used along with the text color
(see gtk_widget_modify_text()) for widgets such as #GtkEntry
and #GtkTextView. See also gtk_widget_modify_style().
Note that "no window" widgets (which have the %GTK_NO_WINDOW flag set)
draw on their parent container's window and thus may not draw any 
background themselves. This is the case for e.g. #GtkLabel. To modify 
the background of such widgets, you have to set the base color on their 
parent; if you want to set the background of a rectangular area around 
a label, try placing the label in a #GtkEventBox widget and setting 
the base color on that.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="state" transfer-ownership="none">
            <doc xml:whitespace="preserve">the state for which to set the base color</doc>
            <type name="StateType" c:type="GtkStateType"/>
          </parameter>
          <parameter name="color" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">the color to assign (does not need to be allocated), or %NULL to undo the effect of previous calls to of gtk_widget_modify_base().</doc>
            <type name="Gdk.Color" c:type="GdkColor*"/>
          </parameter>
        </parameters>
      </method>
      <method name="modify_bg" c:identifier="gtk_widget_modify_bg">
        <doc xml:whitespace="preserve">Sets the background color for a widget in a particular state.
All other style values are left untouched. See also
gtk_widget_modify_style(). 
Note that "no window" widgets (which have the %GTK_NO_WINDOW flag set)
draw on their parent container's window and thus may not draw any 
background themselves. This is the case for e.g. #GtkLabel. To modify 
the background of such widgets, you have to set the background color 
on their parent; if you want to set the background of a rectangular 
area around a label, try placing the label in a #GtkEventBox widget 
and setting the background color on that.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="state" transfer-ownership="none">
            <doc xml:whitespace="preserve">the state for which to set the background color</doc>
            <type name="StateType" c:type="GtkStateType"/>
          </parameter>
          <parameter name="color" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">the color to assign (does not need to be allocated), or %NULL to undo the effect of previous calls to of gtk_widget_modify_bg().</doc>
            <type name="Gdk.Color" c:type="GdkColor*"/>
          </parameter>
        </parameters>
      </method>
      <method name="modify_cursor"
              c:identifier="gtk_widget_modify_cursor"
              version="2.12">
        <doc xml:whitespace="preserve">Sets the cursor color to use in a widget, overriding the
#GtkWidget:cursor-color and #GtkWidget:secondary-cursor-color
style properties. All other style values are left untouched. 
See also gtk_widget_modify_style().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="primary" transfer-ownership="none">
            <doc xml:whitespace="preserve">the color to use for primary cursor (does not need to be allocated), or %NULL to undo the effect of previous calls to of gtk_widget_modify_cursor().</doc>
            <type name="Gdk.Color" c:type="GdkColor*"/>
          </parameter>
          <parameter name="secondary" transfer-ownership="none">
            <doc xml:whitespace="preserve">the color to use for secondary cursor (does not need to be allocated), or %NULL to undo the effect of previous calls to of gtk_widget_modify_cursor().</doc>
            <type name="Gdk.Color" c:type="GdkColor*"/>
          </parameter>
        </parameters>
      </method>
      <method name="modify_fg" c:identifier="gtk_widget_modify_fg">
        <doc xml:whitespace="preserve">Sets the foreground color for a widget in a particular state.
All other style values are left untouched. See also
gtk_widget_modify_style().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="state" transfer-ownership="none">
            <doc xml:whitespace="preserve">the state for which to set the foreground color</doc>
            <type name="StateType" c:type="GtkStateType"/>
          </parameter>
          <parameter name="color" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">the color to assign (does not need to be allocated), or %NULL to undo the effect of previous calls to of gtk_widget_modify_fg().</doc>
            <type name="Gdk.Color" c:type="GdkColor*"/>
          </parameter>
        </parameters>
      </method>
      <method name="modify_font" c:identifier="gtk_widget_modify_font">
        <doc xml:whitespace="preserve">Sets the font to use for a widget.  All other style values are left
untouched. See also gtk_widget_modify_style().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="font_desc" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">the font description to use, or %NULL to undo the effect of previous calls to gtk_widget_modify_font().</doc>
            <type name="Pango.FontDescription" c:type="PangoFontDescription*"/>
          </parameter>
        </parameters>
      </method>
      <method name="modify_style" c:identifier="gtk_widget_modify_style">
        <doc xml:whitespace="preserve">Modifies style values on the widget. Modifications made using this
technique take precedence over style values set via an RC file,
however, they will be overriden if a style is explicitely set on
the widget using gtk_widget_set_style(). The #GtkRcStyle structure
is designed so each field can either be set or unset, so it is
possible, using this function, to modify some style values and
leave the others unchanged.
Note that modifications made with this function are not cumulative
with previous calls to gtk_widget_modify_style() or with such
functions as gtk_widget_modify_fg(). If you wish to retain
previous values, you must first call gtk_widget_get_modifier_style(),
make your modifications to the returned style, then call
gtk_widget_modify_style() with that style. On the other hand,
if you first call gtk_widget_modify_style(), subsequent calls
to such functions gtk_widget_modify_fg() will have a cumulative
effect with the initial modifications.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="style" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GtkRcStyle holding the style modifications</doc>
            <type name="RcStyle" c:type="GtkRcStyle*"/>
          </parameter>
        </parameters>
      </method>
      <method name="modify_symbolic_color"
              c:identifier="gtk_widget_modify_symbolic_color"
              version="3.0">
        <doc xml:whitespace="preserve">Sets a symbolic color for a widget.
All other style values are left untouched. See also
gtk_widget_modify_style().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:whitespace="preserve">the name of the symbolic color to modify</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="color" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">the color to assign (does not need to be allocated), or %NULL to undo the effect of previous calls to of gtk_widget_modify_symbolic_color().</doc>
            <type name="Gdk.Color" c:type="GdkColor*"/>
          </parameter>
        </parameters>
      </method>
      <method name="modify_text" c:identifier="gtk_widget_modify_text">
        <doc xml:whitespace="preserve">Sets the text color for a widget in a particular state.  All other
style values are left untouched. The text color is the foreground
color used along with the base color (see gtk_widget_modify_base())
for widgets such as #GtkEntry and #GtkTextView. See also
gtk_widget_modify_style().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="state" transfer-ownership="none">
            <doc xml:whitespace="preserve">the state for which to set the text color</doc>
            <type name="StateType" c:type="GtkStateType"/>
          </parameter>
          <parameter name="color" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">the color to assign (does not need to be allocated), or %NULL to undo the effect of previous calls to of gtk_widget_modify_text().</doc>
            <type name="Gdk.Color" c:type="GdkColor*"/>
          </parameter>
        </parameters>
      </method>
      <method name="path" c:identifier="gtk_widget_path">
        <doc xml:whitespace="preserve">Obtains the full path to @widget. The path is simply the name of a
widget and all its parents in the container hierarchy, separated by
periods. The name of a widget comes from
gtk_widget_get_name(). Paths are used to apply styles to a widget
in gtkrc configuration files. Widget names are the type of the
widget by default (e.g. "GtkButton") or can be set to an
application-specific value with gtk_widget_set_name(). By setting
the name of a widget, you allow users or theme authors to apply
styles to that specific widget in their gtkrc
file. @path_reversed_p fills in the path in reverse order,
i.e. starting with @widget's name instead of starting with the name
of @widget's outermost ancestor.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="path_length"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     allow-none="1">
            <doc xml:whitespace="preserve">location to store length of the path, or %NULL</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
          <parameter name="path"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     allow-none="1">
            <doc xml:whitespace="preserve">location to store allocated path string, or %NULL</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="path_reversed"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     allow-none="1">
            <doc xml:whitespace="preserve">location to store allocated reverse path string, or %NULL</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
        </parameters>
      </method>
      <method name="queue_draw" c:identifier="gtk_widget_queue_draw">
        <doc xml:whitespace="preserve">Equivalent to calling gtk_widget_queue_draw_area() for the
entire area of a widget.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="queue_draw_area" c:identifier="gtk_widget_queue_draw_area">
        <doc xml:whitespace="preserve">Invalidates the rectangular area of @widget defined by @x, @y,
widget's window and all its child windows. Once the main loop
becomes idle (after the current batch of events has been processed,
roughly), the window will receive expose events for the union of
all regions that have been invalidated.
Normally you would only use this function in widget
implementations. You might also use it, or
gdk_window_invalidate_rect() directly, to schedule a redraw of a
#GtkDrawingArea or some portion thereof.
Frequently you can just call gdk_window_invalidate_rect() or
gdk_window_invalidate_region() instead of this function. Those
functions will invalidate only a single window, instead of the
widget and all its children.
The advantage of adding to the invalidated region compared to
simply drawing immediately is efficiency; using an invalid region
ensures that you only have to redraw one time.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="x" transfer-ownership="none">
            <doc xml:whitespace="preserve">x coordinate of upper-left corner of rectangle to redraw</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:whitespace="preserve">y coordinate of upper-left corner of rectangle to redraw</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:whitespace="preserve">width of region to draw</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:whitespace="preserve">height of region to draw</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="queue_resize" c:identifier="gtk_widget_queue_resize">
        <doc xml:whitespace="preserve">This function is only for use in widget implementations.
Flags a widget to have its size renegotiated; should
be called when a widget for some reason has a new size request.
For example, when you change the text in a #GtkLabel, #GtkLabel
queues a resize to ensure there's enough space for the new text.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="queue_resize_no_redraw"
              c:identifier="gtk_widget_queue_resize_no_redraw"
              version="2.4">
        <doc xml:whitespace="preserve">This function works like gtk_widget_queue_resize(), 
except that the widget is not invalidated.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="realize" c:identifier="gtk_widget_realize">
        <doc xml:whitespace="preserve">Creates the GDK (windowing system) resources associated with a
widget.  For example, @widget-&gt;window will be created when a widget
is realized.  Normally realization happens implicitly; if you show
a widget and all its parent containers, then the widget will be
realized and mapped automatically.
Realizing a widget requires all
the widget's parent widgets to be realized; calling
gtk_widget_realize() realizes the widget's parents in addition to
when you realize it, bad things will happen.
This function is primarily used in widget implementations, and
isn't very useful otherwise. Many times when you think you might
need it, a better approach is to connect to a signal that will be
called after the widget is realized automatically, such as
GtkWidget::expose-event. Or simply g_signal_connect () to the
GtkWidget::realize signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="region_intersect"
              c:identifier="gtk_widget_region_intersect">
        <doc xml:whitespace="preserve">Computes the intersection of a @widget's area and @region, returning
the intersection. The result may be empty, use cairo_region_is_empty() to
check.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A newly allocated region holding the intersection of @widget and @region. The coordinates of the return value are relative to @widget-&gt;window for %NO_WINDOW widgets, and relative to the parent window of @widget-&gt;window for widgets with their own window.</doc>
          <type name="cairo.Region" c:type="cairo_region_t*"/>
        </return-value>
        <parameters>
          <parameter name="region" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #cairo_region_t, in the same coordinate system as for %NO_WINDOW widgets; relative to the parent window of @widget-&gt;window for widgets with their own window.</doc>
            <type name="cairo.Region" c:type="cairo_region_t*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_accelerator"
              c:identifier="gtk_widget_remove_accelerator">
        <doc xml:whitespace="preserve">Removes an accelerator from @widget, previously installed with
gtk_widget_add_accelerator().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">whether an accelerator was installed and could be removed</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="accel_group" transfer-ownership="none">
            <doc xml:whitespace="preserve">accel group for this widget</doc>
            <type name="AccelGroup" c:type="GtkAccelGroup*"/>
          </parameter>
          <parameter name="accel_key" transfer-ownership="none">
            <doc xml:whitespace="preserve">GDK keyval of the accelerator</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="accel_mods" transfer-ownership="none">
            <doc xml:whitespace="preserve">modifier key combination of the accelerator</doc>
            <type name="Gdk.ModifierType" c:type="GdkModifierType"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_mnemonic_label"
              c:identifier="gtk_widget_remove_mnemonic_label"
              version="2.4">
        <doc xml:whitespace="preserve">Removes a widget from the list of mnemonic labels for
this widget. (See gtk_widget_list_mnemonic_labels()). The widget
must have previously been added to the list with
gtk_widget_add_mnemonic_label().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="label" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkWidget that was previously set as a mnemnic label for</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="render_icon" c:identifier="gtk_widget_render_icon">
        <doc xml:whitespace="preserve">A convenience function that uses the theme engine and RC file
settings for @widget to look up @stock_id and render it to
a pixbuf. @stock_id should be a stock icon ID such as
#GTK_STOCK_OPEN or #GTK_STOCK_OK. @size should be a size
such as #GTK_ICON_SIZE_MENU. @detail should be a string that
identifies the widget or code doing the rendering, so that
theme engines can special-case rendering for that widget or code.
The pixels in the returned #GdkPixbuf are shared with the rest of
the application and should not be modified. The pixbuf should be freed
after use with g_object_unref().
stock ID wasn't known</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new pixbuf, or %NULL if the</doc>
          <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
        <parameters>
          <parameter name="stock_id" transfer-ownership="none">
            <doc xml:whitespace="preserve">a stock ID</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="size" transfer-ownership="none">
            <doc xml:whitespace="preserve">a stock size. A size of (GtkIconSize)-1 means render at the size of the source and don't scale (if there are multiple source sizes, GTK+ picks one of the available sizes).</doc>
            <type name="gint"/>
          </parameter>
          <parameter name="detail" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">render detail to pass to theme engine</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="reparent" c:identifier="gtk_widget_reparent">
        <doc xml:whitespace="preserve">Moves a widget from one #GtkContainer to another, handling reference
count issues to avoid destroying the widget.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="new_parent" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkContainer to move the widget into</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="reset_rc_styles" c:identifier="gtk_widget_reset_rc_styles">
        <doc xml:whitespace="preserve">Reset the styles of @widget and all descendents, so when
they are looked up again, they get the correct values
for the currently loaded RC file settings.
This function is not useful for applications.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="reset_shapes" c:identifier="gtk_widget_reset_shapes">
        <doc xml:whitespace="preserve">Recursively resets the shape on this widget and its descendants.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="send_expose" c:identifier="gtk_widget_send_expose">
        <doc xml:whitespace="preserve">Very rarely-used function. This function is used to emit
an expose event signals on a widget. This function is not
normally used directly. The only time it is used is when
propagating an expose event to a child %NO_WINDOW widget, and
that is normally done using gtk_container_propagate_expose().
If you want to force an area of a window to be redrawn, 
use gdk_window_invalidate_rect() or gdk_window_invalidate_region().
To cause the redraw to be done immediately, follow that call
with a call to gdk_window_process_updates().
the event was handled)</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">return from the event signal emission (%TRUE if</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <parameter name="event" transfer-ownership="none">
            <doc xml:whitespace="preserve">a expose #GdkEvent</doc>
            <type name="Gdk.Event" c:type="GdkEvent*"/>
          </parameter>
        </parameters>
      </method>
      <method name="send_focus_change"
              c:identifier="gtk_widget_send_focus_change"
              version="2.20">
        <doc xml:whitespace="preserve">Sends the focus change @event to @widget
This function is not meant to be used by applications. The only time it
should be used is when it is necessary for a #GtkWidget to assign focus
to a widget that is semantically owned by the first widget even though
it's not a direct child - for instance, a search entry in a floating
window similar to the quick search in #GtkTreeView.
An example of its usage is:
|[
GdkEvent *fevent = gdk_event_new (GDK_FOCUS_CHANGE);
fevent-&gt;focus_change.type = GDK_FOCUS_CHANGE;
fevent-&gt;focus_change.in = TRUE;
fevent-&gt;focus_change.window = gtk_widget_get_window (widget);
if (fevent-&gt;focus_change.window != NULL)
g_object_ref (fevent-&gt;focus_change.window);
gtk_widget_send_focus_change (widget, fevent);
gdk_event_free (event);
]|
if the event was handled, and %FALSE otherwise</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the return value from the event signal emission: %TRUE</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="event" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GdkEvent of type GDK_FOCUS_CHANGE</doc>
            <type name="Gdk.Event" c:type="GdkEvent*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_accel_path" c:identifier="gtk_widget_set_accel_path">
        <doc xml:whitespace="preserve">Given an accelerator group, @accel_group, and an accelerator path,
key binding that is defined for @accel_path is pressed, @widget
will be activated.  This removes any accelerators (for any
accelerator group) installed by previous calls to
gtk_widget_set_accel_path(). Associating accelerators with
paths allows them to be modified by the user and the modifications
to be saved for future use. (See gtk_accel_map_save().)
This function is a low level function that would most likely
be used by a menu creation system like #GtkUIManager. If you
use #GtkUIManager, setting up accelerator paths will be done
automatically.
Even when you you aren't using #GtkUIManager, if you only want to
set up accelerators on menu items gtk_menu_item_set_accel_path()
provides a somewhat more convenient interface.
Note that @accel_path string will be stored in a #GQuark. Therefore, if you
pass a static string, you can save some memory by interning it first with 
g_intern_static_string().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="accel_path"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">path used to look up the accelerator</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="accel_group"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">a #GtkAccelGroup.</doc>
            <type name="AccelGroup" c:type="GtkAccelGroup*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_allocation"
              c:identifier="gtk_widget_set_allocation"
              version="2.18">
        <doc xml:whitespace="preserve">Sets the widget's allocation.  This should not be used
directly, but from within a widget's size_allocate method.
The allocation set should be the "adjusted" or actual
allocation. If you're implementing a #GtkContainer, you want to use
gtk_widget_size_allocate() instead of gtk_widget_set_allocation().
The GtkWidgetClass::adjust_size_allocation virtual method adjusts the
allocation inside gtk_widget_size_allocate() to create an adjusted
allocation.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="allocation" transfer-ownership="none">
            <doc xml:whitespace="preserve">a pointer to a #GtkAllocation to copy from</doc>
            <type name="Allocation" c:type="GtkAllocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_app_paintable"
              c:identifier="gtk_widget_set_app_paintable">
        <doc xml:whitespace="preserve">Sets whether the application intends to draw on the widget in
an #GtkWidget::expose-event handler. 
This is a hint to the widget and does not affect the behavior of 
the GTK+ core; many widgets ignore this flag entirely. For widgets 
that do pay attention to the flag, such as #GtkEventBox and #GtkWindow, 
the effect is to suppress default themed drawing of the widget's 
background. (Children of the widget will still be drawn.) The application 
is then entirely responsible for drawing the widget background.
Note that the background is still drawn when the widget is mapped.
If this is not suitable (e.g. because you want to make a transparent
window using an RGBA visual), you can work around this by doing:
|[
gtk_widget_realize (window);
gdk_window_set_back_pixmap (window-&gt;window, NULL, FALSE);
gtk_widget_show (window);
]|</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="app_paintable" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE if the application will paint on the widget</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_can_default"
              c:identifier="gtk_widget_set_can_default"
              version="2.18">
        <doc xml:whitespace="preserve">Specifies whether @widget can be a default widget. See
gtk_widget_grab_default() for details about the meaning of
"default".</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="can_default" transfer-ownership="none">
            <doc xml:whitespace="preserve">whether or not @widget can be a default widget.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_can_focus"
              c:identifier="gtk_widget_set_can_focus"
              version="2.18">
        <doc xml:whitespace="preserve">Specifies whether @widget can own the input focus. See
gtk_widget_grab_focus() for actually setting the input focus on a
widget.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="can_focus" transfer-ownership="none">
            <doc xml:whitespace="preserve">whether or not @widget can own the input focus.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_child_visible"
              c:identifier="gtk_widget_set_child_visible">
        <doc xml:whitespace="preserve">Sets whether @widget should be mapped along with its when its parent
is mapped and @widget has been shown with gtk_widget_show(). 
The child visibility can be set for widget before it is added to
a container with gtk_widget_set_parent(), to avoid mapping
children unnecessary before immediately unmapping them. However
it will be reset to its default state of %TRUE when the widget
is removed from a container.
Note that changing the child visibility of a widget does not
queue a resize on the widget. Most of the time, the size of
a widget is computed from all visible children, whether or
not they are mapped. If this is not the case, the container
can queue a resize itself.
This function is only useful for container implementations and
never should be called by an application.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="is_visible" transfer-ownership="none">
            <doc xml:whitespace="preserve">if %TRUE, @widget should be mapped along with its parent.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_colormap" c:identifier="gtk_widget_set_colormap">
        <doc xml:whitespace="preserve">Sets the colormap for the widget to the given value. Widget must not
have been previously realized. This probably should only be used
from an &lt;function&gt;init()&lt;/function&gt; function (i.e. from the constructor 
for the widget).</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="colormap" transfer-ownership="none">
            <doc xml:whitespace="preserve">a colormap</doc>
            <type name="Gdk.Colormap" c:type="GdkColormap*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_composite_name"
              c:identifier="gtk_widget_set_composite_name">
        <doc xml:whitespace="preserve">Sets a widgets composite name. The widget must be
a composite child of its parent; see gtk_widget_push_composite_child().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:whitespace="preserve">the name to set</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_device_events"
              c:identifier="gtk_widget_set_device_events"
              version="3.0">
        <doc xml:whitespace="preserve">Sets the device event mask (see #GdkEventMask) for a widget. The event
mask determines which events a widget will receive from @device. Keep
in mind that different widgets have different default event masks, and by
changing the event mask you may disrupt a widget's functionality,
so be careful. This function must be called while a widget is
unrealized. Consider gtk_widget_add_device_events() for widgets that are
already realized, or if you want to preserve the existing event
mask. This function can't be used with #GTK_NO_WINDOW widgets;
to get events on those widgets, place them inside a #GtkEventBox
and receive events on the event box.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="device" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GdkDevice</doc>
            <type name="Gdk.Device" c:type="GdkDevice*"/>
          </parameter>
          <parameter name="events" transfer-ownership="none">
            <doc xml:whitespace="preserve">event mask</doc>
            <type name="Gdk.EventMask" c:type="GdkEventMask"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_direction" c:identifier="gtk_widget_set_direction">
        <doc xml:whitespace="preserve">Sets the reading direction on a particular widget. This direction
controls the primary direction for widgets containing text,
and also the direction in which the children of a container are
packed. The ability to set the direction is present in order
so that correct localization into languages with right-to-left
reading directions can be done. Generally, applications will
let the default reading direction present, except for containers
where the containers are arranged in an order that is explicitely
visual rather than logical (such as buttons for text justification).
If the direction is set to %GTK_TEXT_DIR_NONE, then the value
set by gtk_widget_set_default_direction() will be used.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="dir" transfer-ownership="none">
            <doc xml:whitespace="preserve">the new direction</doc>
            <type name="TextDirection" c:type="GtkTextDirection"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_double_buffered"
              c:identifier="gtk_widget_set_double_buffered">
        <doc xml:whitespace="preserve">Widgets are double buffered by default; you can use this function
to turn off the buffering. "Double buffered" simply means that
gdk_window_begin_paint_region() and gdk_window_end_paint() are called
automatically around expose events sent to the
widget. gdk_window_begin_paint() diverts all drawing to a widget's
window to an offscreen buffer, and gdk_window_end_paint() draws the
buffer to the screen. The result is that users see the window
update in one smooth step, and don't see individual graphics
primitives being rendered.
In very simple terms, double buffered widgets don't flicker,
so you would only use this function to turn off double buffering
if you had special needs and really knew what you were doing.
expose events, since even the clearing to the background color or 
pixmap will not happen automatically (as it is done in 
gdk_window_begin_paint()).</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="double_buffered" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE to double-buffer a widget</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_events" c:identifier="gtk_widget_set_events">
        <doc xml:whitespace="preserve">Sets the event mask (see #GdkEventMask) for a widget. The event
mask determines which events a widget will receive. Keep in mind
that different widgets have different default event masks, and by
changing the event mask you may disrupt a widget's functionality,
so be careful. This function must be called while a widget is
unrealized. Consider gtk_widget_add_events() for widgets that are
already realized, or if you want to preserve the existing event
mask. This function can't be used with #GTK_NO_WINDOW widgets;
to get events on those widgets, place them inside a #GtkEventBox
and receive events on the event box.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="events" transfer-ownership="none">
            <doc xml:whitespace="preserve">event mask</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_extension_events"
              c:identifier="gtk_widget_set_extension_events">
        <doc xml:whitespace="preserve">Sets the extension events mask to @mode. See #GdkExtensionMode
and gdk_input_set_extension_events().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="mode" transfer-ownership="none">
            <doc xml:whitespace="preserve">bitfield of extension events to receive</doc>
            <type name="Gdk.ExtensionMode" c:type="GdkExtensionMode"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_halign" c:identifier="gtk_widget_set_halign">
        <doc xml:whitespace="preserve">Sets the horizontal alignment of @widget.
See the #GtkWidget:halign property.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="align" transfer-ownership="none">
            <doc xml:whitespace="preserve">the horizontal alignment</doc>
            <type name="Align" c:type="GtkAlign"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_has_tooltip"
              c:identifier="gtk_widget_set_has_tooltip"
              version="2.12">
        <doc xml:whitespace="preserve">Sets the has-tooltip property on @widget to @has_tooltip.  See
GtkWidget:has-tooltip for more information.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="has_tooltip" transfer-ownership="none">
            <doc xml:whitespace="preserve">whether or not @widget has a tooltip.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_has_window"
              c:identifier="gtk_widget_set_has_window"
              version="2.18">
        <doc xml:whitespace="preserve">Specifies whether @widget has a #GdkWindow of its own. Note that
all realized widgets have a non-%NULL "window" pointer
(gtk_widget_get_window() never returns a %NULL window when a widget
is realized), but for many of them it's actually the #GdkWindow of
one of its parent widgets. Widgets that do not create a %window for
themselves in GtkWidget::realize() must announce this by
calling this function with @has_window = %FALSE.
This function should only be called by widget implementations,
and they should call it in their init() function.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="has_window" transfer-ownership="none">
            <doc xml:whitespace="preserve">whether or not @widget has a window.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_mapped"
              c:identifier="gtk_widget_set_mapped"
              version="2.20">
        <doc xml:whitespace="preserve">Marks the widget as being realized.
This function should only ever be called in a derived widget's
"map" or "unmap" implementation.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="mapped" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE to mark the widget as mapped</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_margin_bottom"
              c:identifier="gtk_widget_set_margin_bottom">
        <doc xml:whitespace="preserve">Sets the bottom margin of @widget.
See the #GtkWidget:margin-bottom property.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="margin" transfer-ownership="none">
            <doc xml:whitespace="preserve">the bottom margin</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_margin_left" c:identifier="gtk_widget_set_margin_left">
        <doc xml:whitespace="preserve">Sets the left margin of @widget.
See the #GtkWidget:margin-left property.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="margin" transfer-ownership="none">
            <doc xml:whitespace="preserve">the left margin</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_margin_right"
              c:identifier="gtk_widget_set_margin_right">
        <doc xml:whitespace="preserve">Sets the right margin of @widget.
See the #GtkWidget:margin-right property.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="margin" transfer-ownership="none">
            <doc xml:whitespace="preserve">the right margin</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_margin_top" c:identifier="gtk_widget_set_margin_top">
        <doc xml:whitespace="preserve">Sets the top margin of @widget.
See the #GtkWidget:margin-top property.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="margin" transfer-ownership="none">
            <doc xml:whitespace="preserve">the top margin</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_name" c:identifier="gtk_widget_set_name">
        <doc xml:whitespace="preserve">Widgets can be named, which allows you to refer to them from a
gtkrc file. You can apply a style to widgets with a particular name
in the gtkrc file. See the documentation for gtkrc files (on the
same page as the docs for #GtkRcStyle).
Note that widget names are separated by periods in paths (see 
gtk_widget_path()), so names with embedded periods may cause confusion.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:whitespace="preserve">name for the widget</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_no_show_all"
              c:identifier="gtk_widget_set_no_show_all"
              version="2.4">
        <doc xml:whitespace="preserve">Sets the #GtkWidget:no-show-all property, which determines whether 
calls to gtk_widget_show_all() and gtk_widget_hide_all() will affect 
this widget. 
This is mostly for use in constructing widget hierarchies with externally
controlled visibility, see #GtkUIManager.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="no_show_all" transfer-ownership="none">
            <doc xml:whitespace="preserve">the new value for the "no-show-all" property</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_parent" c:identifier="gtk_widget_set_parent">
        <doc xml:whitespace="preserve">This function is useful only when implementing subclasses of 
#GtkContainer.
Sets the container as the parent of @widget, and takes care of
some details such as updating the state and style of the child
to reflect its new location. The opposite function is
gtk_widget_unparent().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="parent" transfer-ownership="none">
            <doc xml:whitespace="preserve">parent container</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_parent_window"
              c:identifier="gtk_widget_set_parent_window">
        <doc xml:whitespace="preserve">Sets a non default parent window for @widget.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="parent_window" transfer-ownership="none">
            <doc xml:whitespace="preserve">the new parent window.</doc>
            <type name="Gdk.Window" c:type="GdkWindow*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_realized"
              c:identifier="gtk_widget_set_realized"
              version="2.20">
        <doc xml:whitespace="preserve">Marks the widget as being realized.
This function should only ever be called in a derived widget's
"realize" or "unrealize" implementation.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="realized" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE to mark the widget as realized</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_receives_default"
              c:identifier="gtk_widget_set_receives_default"
              version="2.18">
        <doc xml:whitespace="preserve">Specifies whether @widget will be treated as the default widget
within its toplevel when it has the focus, even if another widget
is the default.
See gtk_widget_grab_default() for details about the meaning of
"default".</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="receives_default" transfer-ownership="none">
            <doc xml:whitespace="preserve">whether or not @widget can be a default widget.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_redraw_on_allocate"
              c:identifier="gtk_widget_set_redraw_on_allocate">
        <doc xml:whitespace="preserve">Sets whether the entire widget is queued for drawing when its size 
allocation changes. By default, this setting is %TRUE and
the entire widget is redrawn on every size change. If your widget
leaves the upper left unchanged when made bigger, turning this
setting off will improve performance.
Note that for %NO_WINDOW widgets setting this flag to %FALSE turns
its position changes; this is to allow containers that don't draw
anything to avoid excess invalidations. If you set this flag on a
%NO_WINDOW widget that &lt;emphasis&gt;does&lt;/emphasis&gt; draw on @widget-&gt;window, 
you are responsible for invalidating both the old and new allocation 
of the widget when the widget is moved and responsible for invalidating
regions newly when the widget increases size.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="redraw_on_allocate" transfer-ownership="none">
            <doc xml:whitespace="preserve">if %TRUE, the entire widget will be redrawn when it is allocated to a new size. Otherwise, only the new portion of the widget will be redrawn.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_scroll_adjustments"
              c:identifier="gtk_widget_set_scroll_adjustments">
        <doc xml:whitespace="preserve">For widgets that support scrolling, sets the scroll adjustments and
returns %TRUE.  For widgets that don't support scrolling, does
nothing and returns %FALSE. Widgets that don't support scrolling
can be scrolled by placing them in a #GtkViewport, which does
support scrolling.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the widget supports scrolling</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="hadjustment"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">an adjustment for horizontal scrolling, or %NULL</doc>
            <type name="Adjustment" c:type="GtkAdjustment*"/>
          </parameter>
          <parameter name="vadjustment"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">an adjustment for vertical scrolling, or %NULL</doc>
            <type name="Adjustment" c:type="GtkAdjustment*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_sensitive" c:identifier="gtk_widget_set_sensitive">
        <doc xml:whitespace="preserve">Sets the sensitivity of a widget. A widget is sensitive if the user
can interact with it. Insensitive widgets are "grayed out" and the
user can't interact with them. Insensitive widgets are known as
"inactive", "disabled", or "ghosted" in some other toolkits.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="sensitive" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE to make the widget sensitive</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_size_request"
              c:identifier="gtk_widget_set_size_request">
        <doc xml:whitespace="preserve">Sets the minimum size of a widget; that is, the widget's size
request will be @width by @height. You can use this function to
force a widget to be either larger or smaller than it normally
would be.
In most cases, gtk_window_set_default_size() is a better choice for
toplevel windows than this function; setting the default size will
still allow users to shrink the window. Setting the size request
will force them to leave the window at least as large as the size
request. When dealing with window sizes,
gtk_window_set_geometry_hints() can be a useful function as well.
Note the inherent danger of setting any fixed size - themes,
translations into other languages, different fonts, and user action
can all change the appropriate size for a given widget. So, it's
basically impossible to hardcode a size that will always be
correct.
The size request of a widget is the smallest size a widget can
accept while still functioning well and drawing itself correctly.
However in some strange cases a widget may be allocated less than
its requested size, and in many cases a widget may be allocated more
space than it requested.
If the size request in a given direction is -1 (unset), then
the "natural" size request of the widget will be used instead.
Widgets can't actually be allocated a size less than 1 by 1, but
you can pass 0,0 to this function to mean "as small as possible."
The size request set here does not include any margin from the
#GtkWidget properties margin-left, margin-right, margin-top, and
margin-bottom, but it does include pretty much all other padding
or border properties set by any subclass of #GtkWidget.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="width" transfer-ownership="none">
            <doc xml:whitespace="preserve">width @widget should request, or -1 to unset</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:whitespace="preserve">height @widget should request, or -1 to unset</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_state" c:identifier="gtk_widget_set_state">
        <doc xml:whitespace="preserve">This function is for use in widget implementations. Sets the state
of a widget (insensitive, prelighted, etc.) Usually you should set
the state using wrapper functions such as gtk_widget_set_sensitive().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="state" transfer-ownership="none">
            <doc xml:whitespace="preserve">new state for @widget</doc>
            <type name="StateType" c:type="GtkStateType"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_style" c:identifier="gtk_widget_set_style">
        <doc xml:whitespace="preserve">Sets the #GtkStyle for a widget (@widget-&gt;style). You probably don't
want to use this function; it interacts badly with themes, because
themes work by replacing the #GtkStyle. Instead, use
gtk_widget_modify_style().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="style" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">a #GtkStyle, or %NULL to remove the effect of a previous gtk_widget_set_style() and go back to the default style</doc>
            <type name="Style" c:type="GtkStyle*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_support_multidevice"
              c:identifier="gtk_widget_set_support_multidevice"
              version="3.0">
        <doc xml:whitespace="preserve">Enables or disables multiple pointer awareness. If this setting is %TRUE,
that if custom #GdkWindow&lt;!-- --&gt;s are created in #GtkWidget::realize,
gdk_window_set_support_multidevice() will have to be called manually on them.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="support_multidevice" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE to support input from multiple devices.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_tooltip_markup"
              c:identifier="gtk_widget_set_tooltip_markup"
              version="2.12">
        <doc xml:whitespace="preserve">Sets @markup as the contents of the tooltip, which is marked up with
the &lt;link linkend="PangoMarkupFormat"&gt;Pango text markup language&lt;/link&gt;.
This function will take care of setting GtkWidget:has-tooltip to %TRUE
and of the default handler for the GtkWidget::query-tooltip signal.
See also the GtkWidget:tooltip-markup property and
gtk_tooltip_set_markup().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="markup" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">the contents of the tooltip for @widget, or %NULL</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_tooltip_text"
              c:identifier="gtk_widget_set_tooltip_text"
              version="2.12">
        <doc xml:whitespace="preserve">Sets @text as the contents of the tooltip. This function will take
care of setting GtkWidget:has-tooltip to %TRUE and of the default
handler for the GtkWidget::query-tooltip signal.
See also the GtkWidget:tooltip-text property and gtk_tooltip_set_text().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="text" transfer-ownership="none">
            <doc xml:whitespace="preserve">the contents of the tooltip for @widget</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_tooltip_window"
              c:identifier="gtk_widget_set_tooltip_window"
              version="2.12">
        <doc xml:whitespace="preserve">Replaces the default, usually yellow, window used for displaying
tooltips with @custom_window. GTK+ will take care of showing and
hiding @custom_window at the right moment, to behave likewise as
the default tooltip window. If @custom_window is %NULL, the default
tooltip window will be used.
If the custom window should have the default theming it needs to
have the name "gtk-tooltip", see gtk_widget_set_name().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="custom_window"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">a #GtkWindow, or %NULL</doc>
            <type name="Window" c:type="GtkWindow*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_valign" c:identifier="gtk_widget_set_valign">
        <doc xml:whitespace="preserve">Sets the vertical alignment of @widget.
See the #GtkWidget:valign property.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="align" transfer-ownership="none">
            <doc xml:whitespace="preserve">the vertical alignment</doc>
            <type name="Align" c:type="GtkAlign"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_visible"
              c:identifier="gtk_widget_set_visible"
              version="2.18">
        <doc xml:whitespace="preserve">Sets the visibility state of @widget. Note that setting this to
%TRUE doesn't mean the widget is actually viewable, see
gtk_widget_get_visible().
This function simply calls gtk_widget_show() or gtk_widget_hide()
but is nicer to use when the visibility of the widget depends on
some condition.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="visible" transfer-ownership="none">
            <doc xml:whitespace="preserve">whether the widget should be shown or not</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_window"
              c:identifier="gtk_widget_set_window"
              version="2.18">
        <doc xml:whitespace="preserve">Sets a widget's window. This function should only be used in a
widget's GtkWidget::realize() implementation. The %window passed is
usually either new window created with gdk_window_new(), or the
window of its parent widget as returned by
gtk_widget_get_parent_window().
Widgets must indicate whether they will create their own #GdkWindow
by calling gtk_widget_set_has_window(). This is usually done in the
widget's init() function.
&lt;note&gt;&lt;para&gt;This function does not add any reference to @window.&lt;/para&gt;&lt;/note&gt;</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="window" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GdkWindow</doc>
            <type name="Gdk.Window" c:type="GdkWindow*"/>
          </parameter>
        </parameters>
      </method>
      <method name="shape_combine_mask"
              c:identifier="gtk_widget_shape_combine_mask">
        <doc xml:whitespace="preserve">Sets a shape for this widget's GDK window. This allows for
transparent windows etc., see gdk_window_shape_combine_mask()
for more information.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="shape_mask"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">shape to be added, or %NULL to remove an existing shape</doc>
            <type name="Gdk.Bitmap" c:type="GdkBitmap*"/>
          </parameter>
          <parameter name="offset_x" transfer-ownership="none">
            <doc xml:whitespace="preserve">X position of shape mask with respect to @window</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="offset_y" transfer-ownership="none">
            <doc xml:whitespace="preserve">Y position of shape mask with respect to @window</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="show" c:identifier="gtk_widget_show">
        <doc xml:whitespace="preserve">Flags a widget to be displayed. Any widget that isn't shown will
not appear on the screen. If you want to show all the widgets in a
container, it's easier to call gtk_widget_show_all() on the
container, instead of individually showing the widgets.
Remember that you have to show the containers containing a widget,
in addition to the widget itself, before it will appear onscreen.
When a toplevel container is shown, it is immediately realized and
mapped; other shown widgets are realized and mapped when their
toplevel container is realized and mapped.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="show_all" c:identifier="gtk_widget_show_all">
        <doc xml:whitespace="preserve">Recursively shows a widget, and any child widgets (if the widget is
a container).</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="show_now" c:identifier="gtk_widget_show_now">
        <doc xml:whitespace="preserve">Shows a widget. If the widget is an unmapped toplevel widget
(i.e. a #GtkWindow that has not yet been shown), enter the main
loop and wait for the window to actually be mapped. Be careful;
because the main loop is running, anything can happen during
this function.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="size_allocate" c:identifier="gtk_widget_size_allocate">
        <doc xml:whitespace="preserve">This function is only used by #GtkContainer subclasses, to assign a size
and position to their child widgets.
In this function, the allocation may be adjusted. It will be forced
to a 1x1 minimum size, and the adjust_size_allocation virtual
method on the child will be used to adjust the allocation. Standard
adjustments include removing the widget's margins, and applying the
widget's #GtkWidget:halign and #GtkWidget:valign properties.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="allocation"
                     direction="inout"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:whitespace="preserve">position and size to be allocated to @widget</doc>
            <type name="Allocation" c:type="GtkAllocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="size_request"
              c:identifier="gtk_widget_size_request"
              deprecated="Use gtk_size_request_get_size() instead."
              deprecated-version="3.0">
        <doc xml:whitespace="preserve">This function is typically used when implementing a #GtkContainer
subclass.  Obtains the preferred size of a widget. The container
uses this information to arrange its child widgets and decide what
size allocations to give them with gtk_widget_size_allocate().
You can also call this function from an application, with some
caveats. Most notably, getting a size request requires the widget
to be associated with a screen, because font information may be
needed. Multihead-aware applications should keep this in mind.
Also remember that the size request is not necessarily the size
a widget will actually be allocated.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="requisition"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkRequisition to be filled in</doc>
            <type name="Requisition" c:type="GtkRequisition*"/>
          </parameter>
        </parameters>
      </method>
      <method name="style_attach"
              c:identifier="gtk_widget_style_attach"
              version="2.20">
        <doc xml:whitespace="preserve">This function attaches the widget's #GtkStyle to the widget's
#GdkWindow. It is a replacement for
&lt;programlisting&gt;
widget-&gt;style = gtk_style_attach (widget-&gt;style, widget-&gt;window);
&lt;/programlisting&gt;
and should only ever be called in a derived widget's "realize"
implementation which does not chain up to its parent class'
"realize" implementation, because one of the parent classes
(finally #GtkWidget) would attach the style itself.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="style_get"
              c:identifier="gtk_widget_style_get"
              introspectable="0">
        <doc xml:whitespace="preserve">Gets the values of a multiple style properties of @widget.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="first_property_name" transfer-ownership="none">
            <doc xml:whitespace="preserve">the name of the first property to get</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter transfer-ownership="none">
            <varargs>
            </varargs>
          </parameter>
        </parameters>
      </method>
      <method name="style_get_property"
              c:identifier="gtk_widget_style_get_property">
        <doc xml:whitespace="preserve">Gets the value of a style property of @widget.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="property_name" transfer-ownership="none">
            <doc xml:whitespace="preserve">the name of a style property</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:whitespace="preserve">location to return the property value</doc>
            <type name="GObject.Value" c:type="GValue*"/>
          </parameter>
        </parameters>
      </method>
      <method name="style_get_valist"
              c:identifier="gtk_widget_style_get_valist"
              introspectable="0">
        <doc xml:whitespace="preserve">Non-vararg variant of gtk_widget_style_get(). Used primarily by language 
bindings.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="first_property_name" transfer-ownership="none">
            <doc xml:whitespace="preserve">the name of the first property to get</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="var_args" transfer-ownership="none">
            <doc xml:whitespace="preserve">a &lt;type&gt;va_list&lt;/type&gt; of pairs of property names and locations to return the property values, starting with the location for @first_property_name.</doc>
            <type name="va_list" c:type="va_list"/>
          </parameter>
        </parameters>
      </method>
      <method name="thaw_child_notify"
              c:identifier="gtk_widget_thaw_child_notify">
        <doc xml:whitespace="preserve">Reverts the effect of a previous call to gtk_widget_freeze_child_notify().
This causes all queued #GtkWidget::child-notify signals on @widget to be 
emitted.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="translate_coordinates"
              c:identifier="gtk_widget_translate_coordinates">
        <doc xml:whitespace="preserve">Translate coordinates relative to @src_widget's allocation to coordinates
relative to @dest_widget's allocations. In order to perform this
operation, both widgets must be realized, and must share a common
toplevel.
was no common ancestor. In this case, nothing is stored in
*@dest_x and *@dest_y. Otherwise %TRUE.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%FALSE if either widget was not realized, or there</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="dest_widget" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkWidget</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="src_x" transfer-ownership="none">
            <doc xml:whitespace="preserve">X position relative to @src_widget</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="src_y" transfer-ownership="none">
            <doc xml:whitespace="preserve">Y position relative to @src_widget</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="dest_x"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:whitespace="preserve">location to store X position relative to @dest_widget</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="dest_y"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:whitespace="preserve">location to store Y position relative to @dest_widget</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="trigger_tooltip_query"
              c:identifier="gtk_widget_trigger_tooltip_query"
              version="2.12">
        <doc xml:whitespace="preserve">Triggers a tooltip query on the display where the toplevel of @widget
is located. See gtk_tooltip_trigger_tooltip_query() for more
information.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="unmap" c:identifier="gtk_widget_unmap">
        <doc xml:whitespace="preserve">This function is only for use in widget implementations. Causes
a widget to be unmapped if it's currently mapped.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="unparent" c:identifier="gtk_widget_unparent">
        <doc xml:whitespace="preserve">This function is only for use in widget implementations.
Should be called by implementations of the remove method
on #GtkContainer, to dissociate a child from the container.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="unrealize" c:identifier="gtk_widget_unrealize">
        <doc xml:whitespace="preserve">This function is only useful in widget implementations.
Causes a widget to be unrealized (frees all GDK resources
associated with the widget, such as @widget-&gt;window).</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <property name="app-paintable" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="can-default" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="can-focus" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="composite-child" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="double-buffered" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="events" writable="1" transfer-ownership="none">
        <type name="Gdk.EventMask"/>
      </property>
      <property name="extension-events" writable="1" transfer-ownership="none">
        <type name="Gdk.ExtensionMode"/>
      </property>
      <property name="halign"
                version="3.0"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">How to distribute horizontal space if widget gets extra space, see #GtkAlign</doc>
        <type name="Align"/>
      </property>
      <property name="has-default" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="has-focus" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="has-tooltip"
                version="2.12"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Enables or disables the emission of #GtkWidget::query-tooltip on @widget.  
A value of %TRUE indicates that @widget can have a tooltip, in this case
the widget will be queried using #GtkWidget::query-tooltip to determine
whether it will provide a tooltip or not.
Note that setting this property to %TRUE for the first time will change
the event masks of the GdkWindows of this widget to include leave-notify
and motion-notify events.  This cannot and will not be undone when the
property is set to %FALSE again.</doc>
        <type name="gboolean"/>
      </property>
      <property name="height-request" writable="1" transfer-ownership="none">
        <type name="gint"/>
      </property>
      <property name="is-focus" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="margin" writable="1" transfer-ownership="none">
        <type name="gint"/>
      </property>
      <property name="margin-bottom" writable="1" transfer-ownership="none">
        <type name="gint"/>
      </property>
      <property name="margin-left" writable="1" transfer-ownership="none">
        <type name="gint"/>
      </property>
      <property name="margin-right" writable="1" transfer-ownership="none">
        <type name="gint"/>
      </property>
      <property name="margin-top" writable="1" transfer-ownership="none">
        <type name="gint"/>
      </property>
      <property name="name" writable="1" transfer-ownership="none">
        <type name="utf8"/>
      </property>
      <property name="no-show-all" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="parent" writable="1" transfer-ownership="none">
        <type name="Container"/>
      </property>
      <property name="receives-default" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="sensitive" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="style" writable="1" transfer-ownership="none">
        <type name="Style"/>
      </property>
      <property name="tooltip-markup"
                version="2.12"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Sets the text of tooltip to be the given string, which is marked up
with the &lt;link linkend="PangoMarkupFormat"&gt;Pango text markup language&lt;/link&gt;.
Also see gtk_tooltip_set_markup().
This is a convenience property which will take care of getting the
will automatically be set to %TRUE and there will be taken care of
#GtkWidget::query-tooltip in the default signal handler.</doc>
        <type name="utf8"/>
      </property>
      <property name="tooltip-text"
                version="2.12"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Sets the text of tooltip to be the given string.
Also see gtk_tooltip_set_text().
This is a convenience property which will take care of getting the
will automatically be set to %TRUE and there will be taken care of
#GtkWidget::query-tooltip in the default signal handler.</doc>
        <type name="utf8"/>
      </property>
      <property name="valign"
                version="3.0"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">How to distribute vertical space if widget gets extra space, see #GtkAlign</doc>
        <type name="Align"/>
      </property>
      <property name="visible" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="width-request" writable="1" transfer-ownership="none">
        <type name="gint"/>
      </property>
      <property name="window" version="2.14" transfer-ownership="none">
        <doc xml:whitespace="preserve">The widget's window if it is realized, %NULL otherwise.</doc>
        <type name="Gdk.Window"/>
      </property>
      <field name="object">
        <type name="Object" c:type="GtkObject"/>
      </field>
      <field name="private_flags" bits="16">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="priv">
        <type name="WidgetPrivate" c:type="GtkWidgetPrivate*"/>
      </field>
      <glib:signal name="accel-closures-changed">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
      <glib:signal name="button-press-event">
        <doc xml:whitespace="preserve">The ::button-press-event signal will be emitted when a button
(typically from a mouse) is pressed.
To receive this signal, the #GdkWindow associated to the 
widget needs to enable the #GDK_BUTTON_PRESS_MASK mask.
This signal will be sent to the grab widget if there is one.
%FALSE to propagate the event further.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE to stop other handlers from being invoked for the event.</doc>
          <type name="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GdkEventButton which triggered this signal.</doc>
            <type name="Gdk.EventButton"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="button-release-event">
        <doc xml:whitespace="preserve">The ::button-release-event signal will be emitted when a button
(typically from a mouse) is released.
To receive this signal, the #GdkWindow associated to the 
widget needs to enable the #GDK_BUTTON_RELEASE_MASK mask.
This signal will be sent to the grab widget if there is one.
%FALSE to propagate the event further.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE to stop other handlers from being invoked for the event.</doc>
          <type name="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GdkEventButton which triggered this signal.</doc>
            <type name="Gdk.EventButton"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="can-activate-accel">
        <doc xml:whitespace="preserve">Determines whether an accelerator that activates the signal
identified by @signal_id can currently be activated.
This signal is present to allow applications and derived
widgets to override the default #GtkWidget handling
for determining whether an accelerator can be activated.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the signal can be activated.</doc>
          <type name="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the ID of a signal installed on @widget</doc>
            <type name="guint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="child-notify" introspectable="0">
        <doc xml:whitespace="preserve">The ::child-notify signal is emitted for each 
&lt;link linkend="child-properties"&gt;child property&lt;/link&gt;  that has
changed on an object. The signal's detail holds the property name.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GParamSpec of the changed child property</doc>
            <type/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="client-event">
        <doc xml:whitespace="preserve">The ::client-event will be emitted when the @widget's window
receives a message (via a ClientMessage event) from another
application.
the event. %FALSE to propagate the event further.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE to stop other handlers from being invoked for</doc>
          <type name="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GdkEventClient which triggered this signal.</doc>
            <type name="Gdk.EventClient"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="composited-changed">
        <doc xml:whitespace="preserve">The ::composited-changed signal is emitted when the composited
status of @widget&lt;!-- --&gt;s screen changes. 
See gdk_screen_is_composited().</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
      <glib:signal name="configure-event">
        <return-value transfer-ownership="none">
          <type name="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Gdk.Event"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="damage-event" version="2.14">
        <doc xml:whitespace="preserve">Emitted when a redirected window belonging to @widget gets drawn into.
The region/area members of the event shows what area of the redirected
drawable was drawn into.
%FALSE to propagate the event further.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE to stop other handlers from being invoked for the event.</doc>
          <type name="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GdkEventExpose event</doc>
            <type name="Gdk.Event"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="delete-event">
        <doc xml:whitespace="preserve">The ::delete-event signal is emitted if a user requests that
a toplevel window is closed. The default handler for this signal
destroys the window. Connecting gtk_widget_hide_on_delete() to
this signal will cause the window to be hidden instead, so that
it can later be shown again without reconstructing it.
%FALSE to propagate the event further.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE to stop other handlers from being invoked for the event.</doc>
          <type name="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the event which triggered this signal</doc>
            <type name="Gdk.Event"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="destroy-event">
        <doc xml:whitespace="preserve">The ::destroy-event signal is emitted when a #GdkWindow is destroyed.
You rarely get this signal, because most widgets disconnect themselves 
from their window before they destroy it, so no widget owns the 
window at destroy time.
To receive this signal, the #GdkWindow associated to the widget needs
to enable the #GDK_STRUCTURE_MASK mask. GDK will enable this mask
automatically for all new windows.
%FALSE to propagate the event further.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE to stop other handlers from being invoked for the event.</doc>
          <type name="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the event which triggered this signal</doc>
            <type name="Gdk.Event"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="direction-changed">
        <doc xml:whitespace="preserve">The ::direction-changed signal is emitted when the text direction
of a widget changes.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the previous text direction of @widget</doc>
            <type name="TextDirection"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="drag-begin">
        <doc xml:whitespace="preserve">The ::drag-begin signal is emitted on the drag source when a drag is 
started. A typical reason to connect to this signal is to set up a 
custom drag icon with gtk_drag_source_set_icon().
Note that some widgets set up a drag icon in the default handler of
this signal, so you may have to use g_signal_connect_after() to
override what the default handler did.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the drag context</doc>
            <type name="Gdk.DragContext"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="drag-data-delete">
        <doc xml:whitespace="preserve">The ::drag-data-delete signal is emitted on the drag source when a drag 
with the action %GDK_ACTION_MOVE is successfully completed. The signal 
handler is responsible for deleting the data that has been dropped. What 
"delete" means depends on the context of the drag operation.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the drag context</doc>
            <type name="Gdk.DragContext"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="drag-data-get">
        <doc xml:whitespace="preserve">The ::drag-data-get signal is emitted on the drag source when the drop 
site requests the data which is dragged. It is the responsibility of 
the signal handler to fill @data with the data in the format which 
is indicated by @info. See gtk_selection_data_set() and 
gtk_selection_data_set_text().</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the drag context</doc>
            <type name="Gdk.DragContext"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GtkSelectionData to be filled with the dragged data</doc>
            <type name="SelectionData"/>
          </parameter>
          <parameter name="p1" transfer-ownership="none">
            <doc xml:whitespace="preserve">the info that has been registered with the target in the #GtkTargetList</doc>
            <type name="guint"/>
          </parameter>
          <parameter name="p2" transfer-ownership="none">
            <doc xml:whitespace="preserve">the timestamp at which the data was requested</doc>
            <type name="guint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="drag-data-received">
        <doc xml:whitespace="preserve">The ::drag-data-received signal is emitted on the drop site when the 
dragged data has been received. If the data was received in order to 
determine whether the drop will be accepted, the handler is expected 
to call gdk_drag_status() and &lt;emphasis&gt;not&lt;/emphasis&gt; finish the drag. 
If the data was received in response to a #GtkWidget::drag-drop signal 
(and this is the last target to be received), the handler for this 
signal is expected to process the received data and then call 
gtk_drag_finish(), setting the @success parameter depending on whether 
the data was processed successfully. 
The handler may inspect and modify @drag_context-&gt;action before calling 
gtk_drag_finish(), e.g. to implement %GDK_ACTION_ASK as shown in the 
following example:
|[
void  
drag_data_received (GtkWidget          *widget,
GdkDragContext     *drag_context,
gint                x,
gint                y,
GtkSelectionData   *data,
guint               info,
guint               time)
{
if ((data-&gt;length &gt;= 0) &amp;&amp; (data-&gt;format == 8))
{
if (drag_context-&gt;action == GDK_ACTION_ASK) 
{
GtkWidget *dialog;
gint response;
dialog = gtk_message_dialog_new (NULL,
GTK_DIALOG_MODAL | 
GTK_DIALOG_DESTROY_WITH_PARENT,
GTK_MESSAGE_INFO,
GTK_BUTTONS_YES_NO,
"Move the data ?\n");
response = gtk_dialog_run (GTK_DIALOG (dialog));
gtk_widget_destroy (dialog);
if (response == GTK_RESPONSE_YES)
drag_context-&gt;action = GDK_ACTION_MOVE;
else
drag_context-&gt;action = GDK_ACTION_COPY;
}
gtk_drag_finish (drag_context, TRUE, FALSE, time);
return;
}
gtk_drag_finish (drag_context, FALSE, FALSE, time);
}
]|</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the drag context</doc>
            <type name="Gdk.DragContext"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <doc xml:whitespace="preserve">where the drop happened</doc>
            <type name="gint"/>
          </parameter>
          <parameter name="p1" transfer-ownership="none">
            <doc xml:whitespace="preserve">where the drop happened</doc>
            <type name="gint"/>
          </parameter>
          <parameter name="p2" transfer-ownership="none">
            <doc xml:whitespace="preserve">the received data</doc>
            <type name="SelectionData"/>
          </parameter>
          <parameter name="p3" transfer-ownership="none">
            <doc xml:whitespace="preserve">the info that has been registered with the target in the #GtkTargetList</doc>
            <type name="guint"/>
          </parameter>
          <parameter name="p4" transfer-ownership="none">
            <doc xml:whitespace="preserve">the timestamp at which the data was received</doc>
            <type name="guint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="drag-drop">
        <doc xml:whitespace="preserve">The ::drag-drop signal is emitted on the drop site when the user drops 
the data onto the widget. The signal handler must determine whether 
the cursor position is in a drop zone or not. If it is not in a drop 
zone, it returns %FALSE and no further processing is necessary. 
Otherwise, the handler returns %TRUE. In this case, the handler must 
ensure that gtk_drag_finish() is called to let the source know that 
the drop is done. The call to gtk_drag_finish() can be done either 
directly or in a #GtkWidget::drag-data-received handler which gets 
triggered by calling gtk_drag_get_data() to receive the data for one 
or more of the supported targets.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">whether the cursor position is in a drop zone</doc>
          <type name="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the drag context</doc>
            <type name="Gdk.DragContext"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <doc xml:whitespace="preserve">the x coordinate of the current cursor position</doc>
            <type name="gint"/>
          </parameter>
          <parameter name="p1" transfer-ownership="none">
            <doc xml:whitespace="preserve">the y coordinate of the current cursor position</doc>
            <type name="gint"/>
          </parameter>
          <parameter name="p2" transfer-ownership="none">
            <doc xml:whitespace="preserve">the timestamp of the motion event</doc>
            <type name="guint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="drag-end">
        <doc xml:whitespace="preserve">The ::drag-end signal is emitted on the drag source when a drag is 
finished.  A typical reason to connect to this signal is to undo 
things done in #GtkWidget::drag-begin.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the drag context</doc>
            <type name="Gdk.DragContext"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="drag-failed" version="2.12">
        <doc xml:whitespace="preserve">The ::drag-failed signal is emitted on the drag source when a drag has
failed. The signal handler may hook custom code to handle a failed DND
operation based on the type of error, it returns %TRUE is the failure has
been already handled (not showing the default "drag operation failed"
animation), otherwise it returns %FALSE.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the failed drag operation has been already handled.</doc>
          <type name="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the drag context</doc>
            <type name="Gdk.DragContext"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <doc xml:whitespace="preserve">the result of the drag operation</doc>
            <type name="DragResult"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="drag-leave">
        <doc xml:whitespace="preserve">The ::drag-leave signal is emitted on the drop site when the cursor 
leaves the widget. A typical reason to connect to this signal is to 
undo things done in #GtkWidget::drag-motion, e.g. undo highlighting 
with gtk_drag_unhighlight()</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the drag context</doc>
            <type name="Gdk.DragContext"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <doc xml:whitespace="preserve">the timestamp of the motion event</doc>
            <type name="guint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="drag-motion">
        <doc xml:whitespace="preserve">The drag-motion signal is emitted on the drop site when the user
moves the cursor over the widget during a drag. The signal handler
must determine whether the cursor position is in a drop zone or not.
If it is not in a drop zone, it returns %FALSE and no further processing
is necessary. Otherwise, the handler returns %TRUE. In this case, the
handler is responsible for providing the necessary information for
displaying feedback to the user, by calling gdk_drag_status().
If the decision whether the drop will be accepted or rejected can't be
made based solely on the cursor position and the type of the data, the
handler may inspect the dragged data by calling gtk_drag_get_data() and
defer the gdk_drag_status() call to the #GtkWidget::drag-data-received
handler. Note that you cannot not pass #GTK_DEST_DEFAULT_DROP,
#GTK_DEST_DEFAULT_MOTION or #GTK_DEST_DEFAULT_ALL to gtk_drag_dest_set()
when using the drag-motion signal that way.
Also note that there is no drag-enter signal. The drag receiver has to
keep track of whether he has received any drag-motion signals since the
last #GtkWidget::drag-leave and if not, treat the drag-motion signal as
an "enter" signal. Upon an "enter", the handler will typically highlight
the drop site with gtk_drag_highlight().
|[
static void
drag_motion (GtkWidget *widget,
GdkDragContext *context,
gint x,
gint y,
guint time)
{
GdkAtom target;
PrivateData *private_data = GET_PRIVATE_DATA (widget);
if (!private_data-&gt;drag_highlight) 
{
private_data-&gt;drag_highlight = 1;
gtk_drag_highlight (widget);
}
target = gtk_drag_dest_find_target (widget, context, NULL);
if (target == GDK_NONE)
gdk_drag_status (context, 0, time);
else 
{
private_data-&gt;pending_status = context-&gt;suggested_action;
gtk_drag_get_data (widget, context, target, time);
}
return TRUE;
}
static void
drag_data_received (GtkWidget        *widget,
GdkDragContext   *context,
gint              x,
gint              y,
GtkSelectionData *selection_data,
guint             info,
guint             time)
{
PrivateData *private_data = GET_PRIVATE_DATA (widget);
if (private_data-&gt;suggested_action) 
{
private_data-&gt;suggested_action = 0;
/&amp;ast; We are getting this data due to a request in drag_motion,
* rather than due to a request in drag_drop, so we are just
* supposed to call gdk_drag_status (), not actually paste in 
* the data.
&amp;ast;/
str = gtk_selection_data_get_text (selection_data);
if (!data_is_acceptable (str)) 
gdk_drag_status (context, 0, time);
else
gdk_drag_status (context, private_data-&gt;suggested_action, time);
}
else
{
/&amp;ast; accept the drop &amp;ast;/
}
}
]|</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">whether the cursor position is in a drop zone</doc>
          <type name="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the drag context</doc>
            <type name="Gdk.DragContext"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <doc xml:whitespace="preserve">the x coordinate of the current cursor position</doc>
            <type name="gint"/>
          </parameter>
          <parameter name="p1" transfer-ownership="none">
            <doc xml:whitespace="preserve">the y coordinate of the current cursor position</doc>
            <type name="gint"/>
          </parameter>
          <parameter name="p2" transfer-ownership="none">
            <doc xml:whitespace="preserve">the timestamp of the motion event</doc>
            <type name="guint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="enter-notify-event">
        <doc xml:whitespace="preserve">The ::enter-notify-event will be emitted when the pointer enters
the @widget's window.
To receive this signal, the #GdkWindow associated to the widget needs
to enable the #GDK_ENTER_NOTIFY_MASK mask.
This signal will be sent to the grab widget if there is one.
%FALSE to propagate the event further.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE to stop other handlers from being invoked for the event.</doc>
          <type name="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GdkEventCrossing which triggered this signal.</doc>
            <type name="Gdk.EventCrossing"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="event">
        <doc xml:whitespace="preserve">The GTK+ main loop will emit three signals for each GDK event delivered
signal that matches the type of event delivered (e.g. 
#GtkWidget::key-press-event) and finally a generic 
#GtkWidget::event-after signal.
and to cancel the emission of the second specific ::event signal.
%FALSE to propagate the event further and to allow the emission of 
the second signal. The ::event-after signal is emitted regardless of
the return value.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE to stop other handlers from being invoked for the event</doc>
          <type name="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GdkEvent which triggered this signal</doc>
            <type name="Gdk.Event"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="event-after">
        <doc xml:whitespace="preserve">After the emission of the #GtkWidget::event signal and (optionally) 
the second more specific signal, ::event-after will be emitted 
regardless of the previous two signals handlers return values.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GdkEvent which triggered this signal</doc>
            <type name="Gdk.Event"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="expose-event">
        <doc xml:whitespace="preserve">The ::expose-event signal is emitted when an area of a previously
obscured #GdkWindow is made visible and needs to be redrawn.
#GTK_NO_WINDOW widgets will get a synthesized event from their parent 
widget.
To receive this signal, the #GdkWindow associated to the widget needs
to enable the #GDK_EXPOSURE_MASK mask.
%FALSE to propagate the event further.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE to stop other handlers from being invoked for the event.</doc>
          <type name="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GdkEventExpose which triggered this signal.</doc>
            <type name="Gdk.EventExpose"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="focus">
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE to stop other handlers from being invoked for the event. %FALSE to propagate the event further.</doc>
          <type name="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE to stop other handlers from being invoked for the event. %FALSE to propagate the event further.</doc>
            <type name="DirectionType"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="focus-in-event">
        <return-value transfer-ownership="none">
          <type name="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Gdk.Event"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="focus-out-event">
        <return-value transfer-ownership="none">
          <type name="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Gdk.Event"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="grab-broken-event" version="2.8">
        <doc xml:whitespace="preserve">Emitted when a pointer or keyboard grab on a window belonging 
to @widget gets broken. 
On X11, this happens when the grab window becomes unviewable 
(i.e. it or one of its ancestors is unmapped), or if the same 
application grabs the pointer or keyboard again.
the event. %FALSE to propagate the event further.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE to stop other handlers from being invoked for</doc>
          <type name="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GdkEventGrabBroken event</doc>
            <type name="Gdk.Event"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="grab-focus">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
      <glib:signal name="grab-notify">
        <doc xml:whitespace="preserve">The ::grab-notify signal is emitted when a widget becomes
shadowed by a GTK+ grab (not a pointer or keyboard grab) on 
another widget, or when it becomes unshadowed due to a grab 
being removed.
A widget is shadowed by a gtk_grab_add() when the topmost 
grab widget in the grab stack of its window group is not 
its ancestor.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">%FALSE if the widget becomes shadowed, %TRUE if it becomes unshadowed</doc>
            <type name="gboolean"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="hide">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
      <glib:signal name="hierarchy-changed">
        <doc xml:whitespace="preserve">The ::hierarchy-changed signal is emitted when the
anchored state of a widget changes. A widget is
&lt;firstterm&gt;anchored&lt;/firstterm&gt; when its toplevel
ancestor is a #GtkWindow. This signal is emitted when
a widget changes from un-anchored to anchored or vice-versa.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">the previous toplevel ancestor, or %NULL if the widget was previously unanchored</doc>
            <type name="Widget"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="key-press-event">
        <doc xml:whitespace="preserve">The ::key-press-event signal is emitted when a key is pressed.
To receive this signal, the #GdkWindow associated to the widget needs
to enable the #GDK_KEY_PRESS_MASK mask.
This signal will be sent to the grab widget if there is one.
%FALSE to propagate the event further.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE to stop other handlers from being invoked for the event.</doc>
          <type name="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GdkEventKey which triggered this signal.</doc>
            <type name="Gdk.EventKey"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="key-release-event">
        <doc xml:whitespace="preserve">The ::key-release-event signal is emitted when a key is pressed.
To receive this signal, the #GdkWindow associated to the widget needs
to enable the #GDK_KEY_RELEASE_MASK mask.
This signal will be sent to the grab widget if there is one.
%FALSE to propagate the event further.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE to stop other handlers from being invoked for the event.</doc>
          <type name="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GdkEventKey which triggered this signal.</doc>
            <type name="Gdk.EventKey"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="keynav-failed" version="2.12">
        <doc xml:whitespace="preserve">Gets emitted if keyboard navigation fails. 
See gtk_widget_keynav_failed() for details.
if the emitting widget should try to handle the keyboard
navigation attempt in its parent container(s).</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if stopping keyboard navigation is fine, %FALSE</doc>
          <type name="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the direction of movement</doc>
            <type name="DirectionType"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="leave-notify-event">
        <doc xml:whitespace="preserve">The ::leave-notify-event will be emitted when the pointer leaves
the @widget's window.
To receive this signal, the #GdkWindow associated to the widget needs
to enable the #GDK_LEAVE_NOTIFY_MASK mask.
This signal will be sent to the grab widget if there is one.
%FALSE to propagate the event further.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE to stop other handlers from being invoked for the event.</doc>
          <type name="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GdkEventCrossing which triggered this signal.</doc>
            <type name="Gdk.EventCrossing"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="map">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
      <glib:signal name="map-event">
        <return-value transfer-ownership="none">
          <type name="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Gdk.Event"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="mnemonic-activate">
        <return-value transfer-ownership="none">
          <type name="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="gboolean"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="motion-notify-event">
        <doc xml:whitespace="preserve">The ::motion-notify-event signal is emitted when the pointer moves 
over the widget's #GdkWindow.
To receive this signal, the #GdkWindow associated to the widget 
needs to enable the #GDK_POINTER_MOTION_MASK mask.
This signal will be sent to the grab widget if there is one.
%FALSE to propagate the event further.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE to stop other handlers from being invoked for the event.</doc>
          <type name="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GdkEventMotion which triggered this signal.</doc>
            <type name="Gdk.EventMotion"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="move-focus">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="DirectionType"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="no-expose-event">
        <doc xml:whitespace="preserve">The ::no-expose-event will be emitted when the @widget's window is 
drawn as a copy of another #GdkDrawable which was completely unobscured.
If the source window was partially obscured #GdkEventExpose events will
be generated for those areas.
%FALSE to propagate the event further.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE to stop other handlers from being invoked for the event.</doc>
          <type name="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GdkEventNoExpose which triggered this signal.</doc>
            <type name="Gdk.EventNoExpose"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="parent-set">
        <doc xml:whitespace="preserve">The ::parent-set signal is emitted when a new parent 
has been set on a widget.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">the previous parent, or %NULL if the widget just got its initial parent.</doc>
            <type name="Widget"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="popup-menu">
        <return-value transfer-ownership="none">
          <type name="gboolean"/>
        </return-value>
      </glib:signal>
      <glib:signal name="property-notify-event">
        <return-value transfer-ownership="none">
          <type name="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Gdk.Event"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="proximity-in-event">
        <return-value transfer-ownership="none">
          <type name="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Gdk.Event"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="proximity-out-event">
        <return-value transfer-ownership="none">
          <type name="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Gdk.Event"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="query-tooltip" version="2.12">
        <doc xml:whitespace="preserve">Emitted when #GtkWidget:has-tooltip is %TRUE and the #GtkSettings:gtk-tooltip-timeout 
has expired with the cursor hovering "above" @widget; or emitted when @widget got 
focus in keyboard mode.
Using the given coordinates, the signal handler should determine
whether a tooltip should be shown for @widget. If this is the case
%TRUE should be returned, %FALSE otherwise.  Note that if
should not be used.
The signal handler is free to manipulate @tooltip with the therefore
destined function calls.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if @tooltip should be shown right now, %FALSE otherwise.</doc>
          <type name="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the x coordinate of the cursor position where the request has been emitted, relative to @widget-&gt;window</doc>
            <type name="gint"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <doc xml:whitespace="preserve">the y coordinate of the cursor position where the request has been emitted, relative to @widget-&gt;window</doc>
            <type name="gint"/>
          </parameter>
          <parameter name="p1" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE if the tooltip was trigged using the keyboard</doc>
            <type name="gboolean"/>
          </parameter>
          <parameter name="p2" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkTooltip</doc>
            <type name="Tooltip"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="realize">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
      <glib:signal name="screen-changed">
        <doc xml:whitespace="preserve">The ::screen-changed signal gets emitted when the
screen of a widget has changed.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">the previous screen, or %NULL if the widget was not associated with a screen before</doc>
            <type name="Gdk.Screen"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="scroll-event">
        <doc xml:whitespace="preserve">The ::scroll-event signal is emitted when a button in the 4 to 7
range is pressed. Wheel mice are usually configured to generate 
button press events for buttons 4 and 5 when the wheel is turned.
To receive this signal, the #GdkWindow associated to the widget needs
to enable the #GDK_BUTTON_PRESS_MASK mask.
This signal will be sent to the grab widget if there is one.
%FALSE to propagate the event further.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE to stop other handlers from being invoked for the event.</doc>
          <type name="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GdkEventScroll which triggered this signal.</doc>
            <type name="Gdk.EventScroll"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="selection-clear-event">
        <return-value transfer-ownership="none">
          <type name="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Gdk.Event"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="selection-get">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="SelectionData"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="guint"/>
          </parameter>
          <parameter name="p1" transfer-ownership="none">
            <type name="guint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="selection-notify-event">
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE to stop other handlers from being invoked for the event. %FALSE to propagate the event further.</doc>
          <type name="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE to stop other handlers from being invoked for the event. %FALSE to propagate the event further.</doc>
            <type name="Gdk.Event"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="selection-received">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="SelectionData"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="guint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="selection-request-event">
        <return-value transfer-ownership="none">
          <type name="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Gdk.Event"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="show">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
      <glib:signal name="show-help">
        <return-value transfer-ownership="none">
          <type name="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="WidgetHelpType"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="size-allocate" introspectable="0">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="size-request">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Requisition"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="state-changed">
        <doc xml:whitespace="preserve">The ::state-changed signal is emitted when the widget state changes.
See gtk_widget_get_state().</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the previous state</doc>
            <type name="StateType"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="style-set">
        <doc xml:whitespace="preserve">The ::style-set signal is emitted when a new style has been set 
on a widget. Note that style-modifying functions like 
gtk_widget_modify_base() also cause this signal to be emitted.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">the previous style, or %NULL if the widget just got its initial style</doc>
            <type name="Style"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="unmap">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
      <glib:signal name="unmap-event">
        <return-value transfer-ownership="none">
          <type name="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Gdk.Event"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="unrealize">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
      <glib:signal name="visibility-notify-event">
        <doc xml:whitespace="preserve">The ::visibility-notify-event will be emitted when the @widget's window
is obscured or unobscured.
To receive this signal the #GdkWindow associated to the widget needs
to enable the #GDK_VISIBILITY_NOTIFY_MASK mask.
%FALSE to propagate the event further.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE to stop other handlers from being invoked for the event.</doc>
          <type name="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GdkEventVisibility which triggered this signal.</doc>
            <type name="Gdk.EventVisibility"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="window-state-event">
        <doc xml:whitespace="preserve">The ::window-state-event will be emitted when the state of the 
toplevel window associated to the @widget changes.
To receive this signal the #GdkWindow associated to the widget 
needs to enable the #GDK_STRUCTURE_MASK mask. GDK will enable 
this mask automatically for all new windows.
event. %FALSE to propagate the event further.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE to stop other handlers from being invoked for the</doc>
          <type name="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GdkEventWindowState which triggered this signal.</doc>
            <type name="Gdk.EventWindowState"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="WidgetAuxInfo" c:type="GtkWidgetAuxInfo">
      <field name="width" writable="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="height" writable="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="halign" writable="1" bits="4">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="valign" writable="1" bits="4">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="margin" writable="1">
        <type name="Border" c:type="GtkBorder"/>
      </field>
    </record>
    <record name="WidgetClass"
            c:type="GtkWidgetClass"
            glib:is-gtype-struct-for="Widget">
      <field name="parent_class">
        <type name="ObjectClass" c:type="GtkObjectClass"/>
      </field>
      <field name="activate_signal">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="set_scroll_adjustments_signal">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="dispatch_child_properties_changed">
        <callback name="dispatch_child_properties_changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="widget" transfer-ownership="none">
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
            <parameter name="n_pspecs" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="pspecs" transfer-ownership="none">
              <type name="GObject.ParamSpec" c:type="GParamSpec**"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="show">
        <callback name="show">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="widget" transfer-ownership="none">
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="show_all">
        <callback name="show_all">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="widget" transfer-ownership="none">
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="hide">
        <callback name="hide">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="widget" transfer-ownership="none">
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="hide_all">
        <callback name="hide_all">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="widget" transfer-ownership="none">
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="map">
        <callback name="map">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="widget" transfer-ownership="none">
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="unmap">
        <callback name="unmap">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="widget" transfer-ownership="none">
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="realize">
        <callback name="realize">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="widget" transfer-ownership="none">
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="unrealize">
        <callback name="unrealize">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="widget" transfer-ownership="none">
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="size_request">
        <callback name="size_request">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="widget" transfer-ownership="none">
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
            <parameter name="requisition" transfer-ownership="none">
              <type name="Requisition" c:type="GtkRequisition*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="size_allocate">
        <callback name="size_allocate">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="widget" transfer-ownership="none">
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
            <parameter name="allocation" transfer-ownership="none">
              <type name="Allocation" c:type="GtkAllocation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="state_changed">
        <callback name="state_changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="widget" transfer-ownership="none">
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
            <parameter name="previous_state" transfer-ownership="none">
              <type name="StateType" c:type="GtkStateType"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="parent_set">
        <callback name="parent_set">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="widget" transfer-ownership="none">
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
            <parameter name="previous_parent" transfer-ownership="none">
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="hierarchy_changed">
        <callback name="hierarchy_changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="widget" transfer-ownership="none">
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
            <parameter name="previous_toplevel" transfer-ownership="none">
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="style_set">
        <callback name="style_set">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="widget" transfer-ownership="none">
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
            <parameter name="previous_style" transfer-ownership="none">
              <type name="Style" c:type="GtkStyle*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="direction_changed">
        <callback name="direction_changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="widget" transfer-ownership="none">
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
            <parameter name="previous_direction" transfer-ownership="none">
              <type name="TextDirection" c:type="GtkTextDirection"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="grab_notify">
        <callback name="grab_notify">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="widget" transfer-ownership="none">
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
            <parameter name="was_grabbed" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="child_notify">
        <callback name="child_notify">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="widget" transfer-ownership="none">
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
            <parameter name="pspec" transfer-ownership="none">
              <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="mnemonic_activate">
        <callback name="mnemonic_activate">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="widget" transfer-ownership="none">
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
            <parameter name="group_cycling" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="grab_focus">
        <callback name="grab_focus">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="widget" transfer-ownership="none">
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="focus">
        <callback name="focus">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="widget" transfer-ownership="none">
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
            <parameter name="direction" transfer-ownership="none">
              <type name="DirectionType" c:type="GtkDirectionType"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="event">
        <callback name="event">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="widget" transfer-ownership="none">
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
            <parameter name="event" transfer-ownership="none">
              <type name="Gdk.Event" c:type="GdkEvent*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="button_press_event">
        <callback name="button_press_event">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="widget" transfer-ownership="none">
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
            <parameter name="event" transfer-ownership="none">
              <type name="Gdk.EventButton" c:type="GdkEventButton*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="button_release_event">
        <callback name="button_release_event">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="widget" transfer-ownership="none">
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
            <parameter name="event" transfer-ownership="none">
              <type name="Gdk.EventButton" c:type="GdkEventButton*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="scroll_event">
        <callback name="scroll_event">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="widget" transfer-ownership="none">
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
            <parameter name="event" transfer-ownership="none">
              <type name="Gdk.EventScroll" c:type="GdkEventScroll*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="motion_notify_event">
        <callback name="motion_notify_event">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="widget" transfer-ownership="none">
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
            <parameter name="event" transfer-ownership="none">
              <type name="Gdk.EventMotion" c:type="GdkEventMotion*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="delete_event">
        <callback name="delete_event">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="widget" transfer-ownership="none">
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
            <parameter name="event" transfer-ownership="none">
              <type name="Gdk.EventAny" c:type="GdkEventAny*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="destroy_event">
        <callback name="destroy_event">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="widget" transfer-ownership="none">
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
            <parameter name="event" transfer-ownership="none">
              <type name="Gdk.EventAny" c:type="GdkEventAny*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="expose_event">
        <callback name="expose_event">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="widget" transfer-ownership="none">
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
            <parameter name="event" transfer-ownership="none">
              <type name="Gdk.EventExpose" c:type="GdkEventExpose*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="key_press_event">
        <callback name="key_press_event">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="widget" transfer-ownership="none">
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
            <parameter name="event" transfer-ownership="none">
              <type name="Gdk.EventKey" c:type="GdkEventKey*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="key_release_event">
        <callback name="key_release_event">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="widget" transfer-ownership="none">
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
            <parameter name="event" transfer-ownership="none">
              <type name="Gdk.EventKey" c:type="GdkEventKey*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="enter_notify_event">
        <callback name="enter_notify_event">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="widget" transfer-ownership="none">
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
            <parameter name="event" transfer-ownership="none">
              <type name="Gdk.EventCrossing" c:type="GdkEventCrossing*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="leave_notify_event">
        <callback name="leave_notify_event">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="widget" transfer-ownership="none">
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
            <parameter name="event" transfer-ownership="none">
              <type name="Gdk.EventCrossing" c:type="GdkEventCrossing*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="configure_event">
        <callback name="configure_event">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="widget" transfer-ownership="none">
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
            <parameter name="event" transfer-ownership="none">
              <type name="Gdk.EventConfigure" c:type="GdkEventConfigure*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="focus_in_event">
        <callback name="focus_in_event">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="widget" transfer-ownership="none">
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
            <parameter name="event" transfer-ownership="none">
              <type name="Gdk.EventFocus" c:type="GdkEventFocus*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="focus_out_event">
        <callback name="focus_out_event">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="widget" transfer-ownership="none">
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
            <parameter name="event" transfer-ownership="none">
              <type name="Gdk.EventFocus" c:type="GdkEventFocus*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="map_event">
        <callback name="map_event">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="widget" transfer-ownership="none">
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
            <parameter name="event" transfer-ownership="none">
              <type name="Gdk.EventAny" c:type="GdkEventAny*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="unmap_event">
        <callback name="unmap_event">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="widget" transfer-ownership="none">
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
            <parameter name="event" transfer-ownership="none">
              <type name="Gdk.EventAny" c:type="GdkEventAny*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="property_notify_event">
        <callback name="property_notify_event">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="widget" transfer-ownership="none">
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
            <parameter name="event" transfer-ownership="none">
              <type name="Gdk.EventProperty" c:type="GdkEventProperty*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="selection_clear_event">
        <callback name="selection_clear_event">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="widget" transfer-ownership="none">
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
            <parameter name="event" transfer-ownership="none">
              <type name="Gdk.EventSelection" c:type="GdkEventSelection*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="selection_request_event">
        <callback name="selection_request_event">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="widget" transfer-ownership="none">
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
            <parameter name="event" transfer-ownership="none">
              <type name="Gdk.EventSelection" c:type="GdkEventSelection*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="selection_notify_event">
        <callback name="selection_notify_event">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="widget" transfer-ownership="none">
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
            <parameter name="event" transfer-ownership="none">
              <type name="Gdk.EventSelection" c:type="GdkEventSelection*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="proximity_in_event">
        <callback name="proximity_in_event">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="widget" transfer-ownership="none">
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
            <parameter name="event" transfer-ownership="none">
              <type name="Gdk.EventProximity" c:type="GdkEventProximity*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="proximity_out_event">
        <callback name="proximity_out_event">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="widget" transfer-ownership="none">
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
            <parameter name="event" transfer-ownership="none">
              <type name="Gdk.EventProximity" c:type="GdkEventProximity*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="visibility_notify_event">
        <callback name="visibility_notify_event">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="widget" transfer-ownership="none">
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
            <parameter name="event" transfer-ownership="none">
              <type name="Gdk.EventVisibility" c:type="GdkEventVisibility*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="client_event">
        <callback name="client_event">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="widget" transfer-ownership="none">
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
            <parameter name="event" transfer-ownership="none">
              <type name="Gdk.EventClient" c:type="GdkEventClient*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="no_expose_event">
        <callback name="no_expose_event">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="widget" transfer-ownership="none">
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
            <parameter name="event" transfer-ownership="none">
              <type name="Gdk.EventAny" c:type="GdkEventAny*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="window_state_event">
        <callback name="window_state_event">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="widget" transfer-ownership="none">
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
            <parameter name="event" transfer-ownership="none">
              <type name="Gdk.EventWindowState" c:type="GdkEventWindowState*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="selection_get">
        <callback name="selection_get">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="widget" transfer-ownership="none">
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
            <parameter name="selection_data" transfer-ownership="none">
              <type name="SelectionData" c:type="GtkSelectionData*"/>
            </parameter>
            <parameter name="info" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="time_" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="selection_received">
        <callback name="selection_received">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="widget" transfer-ownership="none">
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
            <parameter name="selection_data" transfer-ownership="none">
              <type name="SelectionData" c:type="GtkSelectionData*"/>
            </parameter>
            <parameter name="time_" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="drag_begin">
        <callback name="drag_begin">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="widget" transfer-ownership="none">
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
            <parameter name="context" transfer-ownership="none">
              <type name="Gdk.DragContext" c:type="GdkDragContext*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="drag_end">
        <callback name="drag_end">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="widget" transfer-ownership="none">
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
            <parameter name="context" transfer-ownership="none">
              <type name="Gdk.DragContext" c:type="GdkDragContext*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="drag_data_get">
        <callback name="drag_data_get">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="widget" transfer-ownership="none">
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
            <parameter name="context" transfer-ownership="none">
              <type name="Gdk.DragContext" c:type="GdkDragContext*"/>
            </parameter>
            <parameter name="selection_data" transfer-ownership="none">
              <type name="SelectionData" c:type="GtkSelectionData*"/>
            </parameter>
            <parameter name="info" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="time_" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="drag_data_delete">
        <callback name="drag_data_delete">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="widget" transfer-ownership="none">
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
            <parameter name="context" transfer-ownership="none">
              <type name="Gdk.DragContext" c:type="GdkDragContext*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="drag_leave">
        <callback name="drag_leave">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="widget" transfer-ownership="none">
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
            <parameter name="context" transfer-ownership="none">
              <type name="Gdk.DragContext" c:type="GdkDragContext*"/>
            </parameter>
            <parameter name="time_" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="drag_motion">
        <callback name="drag_motion">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="widget" transfer-ownership="none">
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
            <parameter name="context" transfer-ownership="none">
              <type name="Gdk.DragContext" c:type="GdkDragContext*"/>
            </parameter>
            <parameter name="x" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="y" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="time_" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="drag_drop">
        <callback name="drag_drop">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="widget" transfer-ownership="none">
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
            <parameter name="context" transfer-ownership="none">
              <type name="Gdk.DragContext" c:type="GdkDragContext*"/>
            </parameter>
            <parameter name="x" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="y" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="time_" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="drag_data_received">
        <callback name="drag_data_received">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="widget" transfer-ownership="none">
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
            <parameter name="context" transfer-ownership="none">
              <type name="Gdk.DragContext" c:type="GdkDragContext*"/>
            </parameter>
            <parameter name="x" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="y" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="selection_data" transfer-ownership="none">
              <type name="SelectionData" c:type="GtkSelectionData*"/>
            </parameter>
            <parameter name="info" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="time_" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="popup_menu">
        <callback name="popup_menu">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="widget" transfer-ownership="none">
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="show_help">
        <callback name="show_help">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="widget" transfer-ownership="none">
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
            <parameter name="help_type" transfer-ownership="none">
              <type name="WidgetHelpType" c:type="GtkWidgetHelpType"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_accessible">
        <callback name="get_accessible">
          <return-value transfer-ownership="none">
            <doc xml:whitespace="preserve">the #AtkObject associated with @widget</doc>
            <type name="Atk.Object" c:type="AtkObject*"/>
          </return-value>
          <parameters>
            <parameter name="widget" transfer-ownership="none">
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="screen_changed">
        <callback name="screen_changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="widget" transfer-ownership="none">
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
            <parameter name="previous_screen" transfer-ownership="none">
              <type name="Gdk.Screen" c:type="GdkScreen*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="can_activate_accel">
        <callback name="can_activate_accel">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="widget" transfer-ownership="none">
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
            <parameter name="signal_id" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="grab_broken_event">
        <callback name="grab_broken_event">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="widget" transfer-ownership="none">
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
            <parameter name="event" transfer-ownership="none">
              <type name="Gdk.EventGrabBroken" c:type="GdkEventGrabBroken*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="composited_changed">
        <callback name="composited_changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="widget" transfer-ownership="none">
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="query_tooltip">
        <callback name="query_tooltip">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="widget" transfer-ownership="none">
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
            <parameter name="x" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="y" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="keyboard_tooltip" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
            <parameter name="tooltip" transfer-ownership="none">
              <type name="Tooltip" c:type="GtkTooltip*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="adjust_size_request">
        <callback name="adjust_size_request">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="widget" transfer-ownership="none">
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
            <parameter name="orientation" transfer-ownership="none">
              <type name="Orientation" c:type="GtkOrientation"/>
            </parameter>
            <parameter name="for_size" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="minimum_size" transfer-ownership="none">
              <type name="gint" c:type="gint*"/>
            </parameter>
            <parameter name="natural_size" transfer-ownership="none">
              <type name="gint" c:type="gint*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="adjust_size_allocation">
        <callback name="adjust_size_allocation">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="widget" transfer-ownership="none">
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
            <parameter name="allocation" transfer-ownership="none">
              <type name="Allocation" c:type="GtkAllocation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_gtk_reserved1" introspectable="0">
        <callback name="_gtk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved2" introspectable="0">
        <callback name="_gtk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved3" introspectable="0">
        <callback name="_gtk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved4" introspectable="0">
        <callback name="_gtk_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved5" introspectable="0">
        <callback name="_gtk_reserved5">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved6" introspectable="0">
        <callback name="_gtk_reserved6">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved7" introspectable="0">
        <callback name="_gtk_reserved7">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved8" introspectable="0">
        <callback name="_gtk_reserved8">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <method name="find_style_property"
              c:identifier="gtk_widget_class_find_style_property"
              version="2.2"
              introspectable="0">
        <doc xml:whitespace="preserve">Finds a style property of a widget class by name.</doc>
        <return-value>
          <doc xml:whitespace="preserve">the #GParamSpec of the style property or %NULL if @class has no style property with that name.</doc>
          <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
        </return-value>
        <parameters>
          <parameter name="property_name" transfer-ownership="none">
            <doc xml:whitespace="preserve">the name of the style property to find</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="install_style_property"
              c:identifier="gtk_widget_class_install_style_property">
        <doc xml:whitespace="preserve">Installs a style property on a widget class. The parser for the
style property is determined by the value type of @pspec.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="pspec" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GParamSpec for the property</doc>
            <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
          </parameter>
        </parameters>
      </method>
      <method name="install_style_property_parser"
              c:identifier="gtk_widget_class_install_style_property_parser"
              introspectable="0">
        <doc xml:whitespace="preserve">Installs a style property on a widget class.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="pspec" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GParamSpec for the style property</doc>
            <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
          </parameter>
          <parameter name="parser" transfer-ownership="none">
            <doc xml:whitespace="preserve">the parser for the style property</doc>
            <type name="RcPropertyParser" c:type="GtkRcPropertyParser"/>
          </parameter>
        </parameters>
      </method>
      <method name="list_style_properties"
              c:identifier="gtk_widget_class_list_style_properties"
              version="2.2"
              introspectable="0">
        <doc xml:whitespace="preserve">Returns all style properties of a widget class.</doc>
        <return-value>
          <doc xml:whitespace="preserve">an newly allocated array of #GParamSpec*. The array must be freed with g_free().</doc>
          <type name="GObject.ParamSpec" c:type="GParamSpec**"/>
        </return-value>
        <parameters>
          <parameter name="n_properties" transfer-ownership="none">
            <doc xml:whitespace="preserve">location to return the number of style properties found</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <bitfield name="WidgetFlags"
              glib:type-name="GtkWidgetFlags"
              glib:get-type="gtk_widget_flags_get_type"
              c:type="GtkWidgetFlags">
      <doc xml:whitespace="preserve">Tells about certain properties of the widget.</doc>
      <member name="toplevel"
              value="16"
              c:identifier="GTK_TOPLEVEL"
              glib:nick="toplevel"/>
      <member name="no_window"
              value="32"
              c:identifier="GTK_NO_WINDOW"
              glib:nick="no-window"/>
      <member name="realized"
              value="64"
              c:identifier="GTK_REALIZED"
              glib:nick="realized"/>
      <member name="mapped"
              value="128"
              c:identifier="GTK_MAPPED"
              glib:nick="mapped"/>
      <member name="visible"
              value="256"
              c:identifier="GTK_VISIBLE"
              glib:nick="visible"/>
      <member name="sensitive"
              value="512"
              c:identifier="GTK_SENSITIVE"
              glib:nick="sensitive"/>
      <member name="parent_sensitive"
              value="1024"
              c:identifier="GTK_PARENT_SENSITIVE"
              glib:nick="parent-sensitive"/>
      <member name="can_focus"
              value="2048"
              c:identifier="GTK_CAN_FOCUS"
              glib:nick="can-focus"/>
      <member name="has_focus"
              value="4096"
              c:identifier="GTK_HAS_FOCUS"
              glib:nick="has-focus"/>
      <member name="can_default"
              value="8192"
              c:identifier="GTK_CAN_DEFAULT"
              glib:nick="can-default"/>
      <member name="has_default"
              value="16384"
              c:identifier="GTK_HAS_DEFAULT"
              glib:nick="has-default"/>
      <member name="has_grab"
              value="32768"
              c:identifier="GTK_HAS_GRAB"
              glib:nick="has-grab"/>
      <member name="rc_style"
              value="65536"
              c:identifier="GTK_RC_STYLE"
              glib:nick="rc-style"/>
      <member name="composite_child"
              value="131072"
              c:identifier="GTK_COMPOSITE_CHILD"
              glib:nick="composite-child"/>
      <member name="app_paintable"
              value="262144"
              c:identifier="GTK_APP_PAINTABLE"
              glib:nick="app-paintable"/>
      <member name="receives_default"
              value="524288"
              c:identifier="GTK_RECEIVES_DEFAULT"
              glib:nick="receives-default"/>
      <member name="double_buffered"
              value="1048576"
              c:identifier="GTK_DOUBLE_BUFFERED"
              glib:nick="double-buffered"/>
      <member name="no_show_all"
              value="2097152"
              c:identifier="GTK_NO_SHOW_ALL"
              glib:nick="no-show-all"/>
      <member name="multidevice"
              value="4194304"
              c:identifier="GTK_MULTIDEVICE"
              glib:nick="multidevice"/>
    </bitfield>
    <enumeration name="WidgetHelpType"
                 glib:type-name="GtkWidgetHelpType"
                 glib:get-type="gtk_widget_help_type_get_type"
                 c:type="GtkWidgetHelpType">
      <member name="tooltip"
              value="0"
              c:identifier="GTK_WIDGET_HELP_TOOLTIP"
              glib:nick="tooltip"/>
      <member name="whats_this"
              value="1"
              c:identifier="GTK_WIDGET_HELP_WHATS_THIS"
              glib:nick="whats-this"/>
    </enumeration>
    <record name="WidgetPrivate" c:type="GtkWidgetPrivate" disguised="1">
    </record>
    <record name="WidgetShapeInfo" c:type="GtkWidgetShapeInfo">
      <field name="offset_x" writable="1">
        <type name="gint16" c:type="gint16"/>
      </field>
      <field name="offset_y" writable="1">
        <type name="gint16" c:type="gint16"/>
      </field>
      <field name="shape_mask" writable="1">
        <type name="Gdk.Bitmap" c:type="GdkBitmap*"/>
      </field>
    </record>
    <class name="Window"
           c:symbol-prefix="window"
           c:type="GtkWindow"
           parent="Bin"
           glib:type-name="GtkWindow"
           glib:get-type="gtk_window_get_type"
           glib:type-struct="WindowClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Buildable"/>
      <implements name="SizeRequest"/>
      <constructor name="new" c:identifier="gtk_window_new">
        <doc xml:whitespace="preserve">Creates a new #GtkWindow, which is a toplevel window that can
contain other widgets. Nearly always, the type of the window should
be #GTK_WINDOW_TOPLEVEL. If you're implementing something like a
popup menu from scratch (which is a bad idea, just use #GtkMenu),
you might use #GTK_WINDOW_POPUP. #GTK_WINDOW_POPUP is not for
dialogs, though in some other toolkits dialogs are called "popups".
In GTK+, #GTK_WINDOW_POPUP means a pop-up menu or pop-up tooltip.
On X11, popup windows are not controlled by the &lt;link
linkend="gtk-X11-arch"&gt;window manager&lt;/link&gt;.
If you simply want an undecorated window (no window borders), use
gtk_window_set_decorated(), don't use #GTK_WINDOW_POPUP.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a new #GtkWindow.</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="type" transfer-ownership="none">
            <doc xml:whitespace="preserve">type of window</doc>
            <type name="WindowType" c:type="GtkWindowType"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="get_default_icon_list"
                c:identifier="gtk_window_get_default_icon_list">
        <doc xml:whitespace="preserve">Gets the value set by gtk_window_set_default_icon_list().
The list is a copy and should be freed with g_list_free(),
but the pixbufs in the list have not had their reference count
incremented.</doc>
        <return-value transfer-ownership="container">
          <doc xml:whitespace="preserve">copy of default icon list</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="GdkPixbuf.Pixbuf"/>
          </type>
        </return-value>
      </function>
      <function name="get_default_icon_name"
                c:identifier="gtk_window_get_default_icon_name"
                version="2.16">
        <doc xml:whitespace="preserve">Returns the fallback icon name for windows that has been set
with gtk_window_set_default_icon_name(). The returned
string is owned by GTK+ and should not be modified. It
is only valid until the next call to
gtk_window_set_default_icon_name().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the fallback icon name for windows</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </function>
      <function name="list_toplevels" c:identifier="gtk_window_list_toplevels">
        <doc xml:whitespace="preserve">Returns a list of all existing toplevel windows. The widgets
in the list are not individually referenced. If you want
to iterate through the list and perform actions involving
callbacks that might destroy the widgets, you &lt;emphasis&gt;must&lt;/emphasis&gt; call
&lt;literal&gt;g_list_foreach (result, (GFunc)g_object_ref, NULL)&lt;/literal&gt; first, and
then unref all the widgets afterwards.</doc>
        <return-value transfer-ownership="container">
          <doc xml:whitespace="preserve">list of toplevel widgets</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Widget"/>
          </type>
        </return-value>
      </function>
      <function name="set_auto_startup_notification"
                c:identifier="gtk_window_set_auto_startup_notification"
                version="2.2">
        <doc xml:whitespace="preserve">By default, after showing the first #GtkWindow, GTK+ calls 
gdk_notify_startup_complete().  Call this function to disable 
the automatic startup notification. You might do this if your 
first window is a splash screen, and you want to delay notification 
until after your real main window has been shown, for example.
In that example, you would disable startup notification
temporarily, show your splash screen, then re-enable it so that
showing the main window would automatically result in notification.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="setting" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE to automatically do startup notification</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </function>
      <function name="set_default_icon"
                c:identifier="gtk_window_set_default_icon"
                version="2.4">
        <doc xml:whitespace="preserve">Sets an icon to be used as fallback for windows that haven't
had gtk_window_set_icon() called on them from a pixbuf.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="icon" transfer-ownership="none">
            <doc xml:whitespace="preserve">the icon</doc>
            <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
          </parameter>
        </parameters>
      </function>
      <function name="set_default_icon_from_file"
                c:identifier="gtk_window_set_default_icon_from_file"
                version="2.2"
                throws="1">
        <doc xml:whitespace="preserve">Sets an icon to be used as fallback for windows that haven't
had gtk_window_set_icon_list() called on them from a file
on disk. Warns on failure if @err is %NULL.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if setting the icon succeeded.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:whitespace="preserve">location of icon file</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="set_default_icon_list"
                c:identifier="gtk_window_set_default_icon_list">
        <doc xml:whitespace="preserve">Sets an icon list to be used as fallback for windows that haven't
had gtk_window_set_icon_list() called on them to set up a
window-specific icon list. This function allows you to set up the
icon for all windows in your app at once.
See gtk_window_set_icon_list() for more details.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="list" transfer-ownership="container">
            <doc xml:whitespace="preserve">a list of #GdkPixbuf</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="GdkPixbuf.Pixbuf"/>
            </type>
          </parameter>
        </parameters>
      </function>
      <function name="set_default_icon_name"
                c:identifier="gtk_window_set_default_icon_name"
                version="2.6">
        <doc xml:whitespace="preserve">Sets an icon to be used as fallback for windows that haven't
had gtk_window_set_icon_list() called on them from a named
themed icon, see gtk_window_set_icon_name().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:whitespace="preserve">the name of the themed icon</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="move_focus">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="direction" transfer-ownership="none">
            <type name="DirectionType" c:type="GtkDirectionType"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="activate_default"
              c:identifier="gtk_window_activate_default">
        <doc xml:whitespace="preserve">Activates the default widget for the window, unless the current 
focused widget has been configured to receive the default action 
(see gtk_widget_set_receives_default()), in which case the
focused widget is activated.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if a widget got activated.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="activate_focus" c:identifier="gtk_window_activate_focus">
        <doc xml:whitespace="preserve">Activates the current focused widget within the window.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if a widget got activated.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="activate_key"
              c:identifier="gtk_window_activate_key"
              version="2.4">
        <doc xml:whitespace="preserve">Activates mnemonics and accelerators for this #GtkWindow. This is normally
called by the default ::key_press_event handler for toplevel windows,
however in some cases it may be useful to call this directly when
overriding the standard key handling for a toplevel window.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if a mnemonic or accelerator was found and activated.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="event" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GdkEventKey</doc>
            <type name="Gdk.EventKey" c:type="GdkEventKey*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_accel_group" c:identifier="gtk_window_add_accel_group">
        <doc xml:whitespace="preserve">Associate @accel_group with @window, such that calling
gtk_accel_groups_activate() on @window will activate accelerators
in @accel_group.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="accel_group" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkAccelGroup</doc>
            <type name="AccelGroup" c:type="GtkAccelGroup*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_embedded_xid"
              c:identifier="gtk_window_add_embedded_xid">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="xid" transfer-ownership="none">
            <type name="Gdk.NativeWindow" c:type="GdkNativeWindow"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_mnemonic" c:identifier="gtk_window_add_mnemonic">
        <doc xml:whitespace="preserve">Adds a mnemonic to this window.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="keyval" transfer-ownership="none">
            <doc xml:whitespace="preserve">the mnemonic</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="target" transfer-ownership="none">
            <doc xml:whitespace="preserve">the widget that gets activated by the mnemonic</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="begin_move_drag" c:identifier="gtk_window_begin_move_drag">
        <doc xml:whitespace="preserve">Starts moving a window. This function is used if an application has
window movement grips. When GDK can support it, the window movement
will be done using the standard mechanism for the &lt;link
linkend="gtk-X11-arch"&gt;window manager&lt;/link&gt; or windowing
system. Otherwise, GDK will try to emulate window movement,
potentially not all that well, depending on the windowing system.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="button" transfer-ownership="none">
            <doc xml:whitespace="preserve">mouse button that initiated the drag</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="root_x" transfer-ownership="none">
            <doc xml:whitespace="preserve">X position where the user clicked to initiate the drag, in root window coordinates</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="root_y" transfer-ownership="none">
            <doc xml:whitespace="preserve">Y position where the user clicked to initiate the drag</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="timestamp" transfer-ownership="none">
            <doc xml:whitespace="preserve">timestamp from the click event that initiated the drag</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="begin_resize_drag"
              c:identifier="gtk_window_begin_resize_drag">
        <doc xml:whitespace="preserve">Starts resizing a window. This function is used if an application
has window resizing controls. When GDK can support it, the resize
will be done using the standard mechanism for the &lt;link
linkend="gtk-X11-arch"&gt;window manager&lt;/link&gt; or windowing
system. Otherwise, GDK will try to emulate window resizing,
potentially not all that well, depending on the windowing system.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="edge" transfer-ownership="none">
            <doc xml:whitespace="preserve">position of the resize control</doc>
            <type name="Gdk.WindowEdge" c:type="GdkWindowEdge"/>
          </parameter>
          <parameter name="button" transfer-ownership="none">
            <doc xml:whitespace="preserve">mouse button that initiated the drag</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="root_x" transfer-ownership="none">
            <doc xml:whitespace="preserve">X position where the user clicked to initiate the drag, in root window coordinates</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="root_y" transfer-ownership="none">
            <doc xml:whitespace="preserve">Y position where the user clicked to initiate the drag</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="timestamp" transfer-ownership="none">
            <doc xml:whitespace="preserve">timestamp from the click event that initiated the drag</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="deiconify" c:identifier="gtk_window_deiconify">
        <doc xml:whitespace="preserve">Asks to deiconify (i.e. unminimize) the specified @window. Note
that you shouldn't assume the window is definitely deiconified
afterward, because other entities (e.g. the user or &lt;link
linkend="gtk-X11-arch"&gt;window manager&lt;/link&gt;) could iconify it
again before your code which assumes deiconification gets to run.
You can track iconification via the "window-state-event" signal
on #GtkWidget.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="fullscreen"
              c:identifier="gtk_window_fullscreen"
              version="2.2">
        <doc xml:whitespace="preserve">Asks to place @window in the fullscreen state. Note that you
shouldn't assume the window is definitely full screen afterward,
because other entities (e.g. the user or &lt;link
linkend="gtk-X11-arch"&gt;window manager&lt;/link&gt;) could unfullscreen it
again, and not all window managers honor requests to fullscreen
windows. But normally the window will end up fullscreen. Just
don't write code that crashes if not.
You can track the fullscreen state via the "window-state-event" signal
on #GtkWidget.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="get_accept_focus"
              c:identifier="gtk_window_get_accept_focus"
              version="2.4">
        <doc xml:whitespace="preserve">Gets the value set by gtk_window_set_accept_focus().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if window should receive the input focus</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_decorated" c:identifier="gtk_window_get_decorated">
        <doc xml:whitespace="preserve">Returns whether the window has been set to have decorations
such as a title bar via gtk_window_set_decorated().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the window has been set to have decorations</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_default_size"
              c:identifier="gtk_window_get_default_size">
        <doc xml:whitespace="preserve">Gets the default size of the window. A value of -1 for the width or
height indicates that a default size has not been explicitly set
for that dimension, so the "natural" size of the window will be
used.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="width"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     allow-none="1">
            <doc xml:whitespace="preserve">location to store the default width, or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="height"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     allow-none="1">
            <doc xml:whitespace="preserve">location to store the default height, or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_default_widget"
              c:identifier="gtk_window_get_default_widget"
              version="2.14">
        <doc xml:whitespace="preserve">Returns the default widget for @window. See gtk_window_set_default()
for more details.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the default widget, or %NULL if there is none.</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
      </method>
      <method name="get_deletable"
              c:identifier="gtk_window_get_deletable"
              version="2.10">
        <doc xml:whitespace="preserve">Returns whether the window has been set to have a close button
via gtk_window_set_deletable().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the window has been set to have a close button</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_destroy_with_parent"
              c:identifier="gtk_window_get_destroy_with_parent">
        <doc xml:whitespace="preserve">Returns whether the window will be destroyed with its transient parent. See
gtk_window_set_destroy_with_parent ().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the window will be destroyed with its transient parent.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_focus" c:identifier="gtk_window_get_focus">
        <doc xml:whitespace="preserve">Retrieves the current focused widget within the window.
Note that this is the widget that would have the focus
if the toplevel window focused; if the toplevel window
is not focused then  &lt;literal&gt;gtk_widget_has_focus (widget)&lt;/literal&gt; will
not be %TRUE for the widget.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the currently focused widget, or %NULL if there is none.</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
      </method>
      <method name="get_focus_on_map"
              c:identifier="gtk_window_get_focus_on_map"
              version="2.6">
        <doc xml:whitespace="preserve">Gets the value set by gtk_window_set_focus_on_map().
mapped.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if window should receive the input focus when</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_frame_dimensions"
              c:identifier="gtk_window_get_frame_dimensions">
        <doc xml:whitespace="preserve">(Note: this is a special-purpose function intended for the
framebuffer port; see gtk_window_set_has_frame(). It will not
return the size of the window border drawn by the &lt;link
linkend="gtk-X11-arch"&gt;window manager&lt;/link&gt;, which is the normal
case when using a windowing system.  See
gdk_window_get_frame_extents() to get the standard window border
extents.)
Retrieves the dimensions of the frame window for this toplevel.
See gtk_window_set_has_frame(), gtk_window_set_frame_dimensions().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="left"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     allow-none="1">
            <doc xml:whitespace="preserve">location to store the width of the frame at the left, or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="top"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     allow-none="1">
            <doc xml:whitespace="preserve">location to store the height of the frame at the top, or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="right"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     allow-none="1">
            <doc xml:whitespace="preserve">location to store the width of the frame at the returns, or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="bottom"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     allow-none="1">
            <doc xml:whitespace="preserve">location to store the height of the frame at the bottom, or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_gravity" c:identifier="gtk_window_get_gravity">
        <doc xml:whitespace="preserve">Gets the value set by gtk_window_set_gravity().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">window gravity</doc>
          <type name="Gdk.Gravity" c:type="GdkGravity"/>
        </return-value>
      </method>
      <method name="get_group"
              c:identifier="gtk_window_get_group"
              version="2.10">
        <doc xml:whitespace="preserve">Returns the group for @window or the default group, if
window group.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the #GtkWindowGroup for a window or the default group</doc>
          <type name="WindowGroup" c:type="GtkWindowGroup*"/>
        </return-value>
      </method>
      <method name="get_has_frame" c:identifier="gtk_window_get_has_frame">
        <doc xml:whitespace="preserve">Accessor for whether the window has a frame window exterior to
via gtk_window_set_has_frame().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if a frame has been added to the window</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_icon" c:identifier="gtk_window_get_icon">
        <doc xml:whitespace="preserve">Gets the value set by gtk_window_set_icon() (or if you've
called gtk_window_set_icon_list(), gets the first icon in
the icon list).</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">icon for window</doc>
          <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
      </method>
      <method name="get_icon_list" c:identifier="gtk_window_get_icon_list">
        <doc xml:whitespace="preserve">Retrieves the list of icons set by gtk_window_set_icon_list().
The list is copied, but the reference count on each
member won't be incremented.</doc>
        <return-value transfer-ownership="container">
          <doc xml:whitespace="preserve">copy of window's icon list</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="GdkPixbuf.Pixbuf"/>
          </type>
        </return-value>
      </method>
      <method name="get_icon_name"
              c:identifier="gtk_window_get_icon_name"
              version="2.6">
        <doc xml:whitespace="preserve">Returns the name of the themed icon for the window,
see gtk_window_set_icon_name().
no themed icon</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the icon name or %NULL if the window has</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_mnemonic_modifier"
              c:identifier="gtk_window_get_mnemonic_modifier">
        <doc xml:whitespace="preserve">Returns the mnemonic modifier for this window. See
gtk_window_set_mnemonic_modifier().
mnemonics on this window.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the modifier mask used to activate</doc>
          <type name="Gdk.ModifierType" c:type="GdkModifierType"/>
        </return-value>
      </method>
      <method name="get_mnemonics_visible"
              c:identifier="gtk_window_get_mnemonics_visible"
              version="2.20">
        <doc xml:whitespace="preserve">Gets the value of the #GtkWindow:mnemonics-visible property.
in this window.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if mnemonics are supposed to be visible</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_modal" c:identifier="gtk_window_get_modal">
        <doc xml:whitespace="preserve">Returns whether the window is modal. See gtk_window_set_modal().
establishes a grab when shown</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the window is set to be modal and</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_opacity"
              c:identifier="gtk_window_get_opacity"
              version="2.12">
        <doc xml:whitespace="preserve">Fetches the requested opacity for this window. See
gtk_window_set_opacity().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the requested opacity for this window.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </method>
      <method name="get_position" c:identifier="gtk_window_get_position">
        <doc xml:whitespace="preserve">This function returns the position you need to pass to
gtk_window_move() to keep @window in its current position.  This
means that the meaning of the returned value varies with window
gravity. See gtk_window_move() for more details.
If you haven't changed the window gravity, its gravity will be
#GDK_GRAVITY_NORTH_WEST. This means that gtk_window_get_position()
gets the position of the top-left corner of the window manager
frame for the window. gtk_window_move() sets the position of this
same top-left corner.
gtk_window_get_position() is not 100% reliable because the X Window System
does not specify a way to obtain the geometry of the
decorations placed on a window by the window manager.
Thus GTK+ is using a "best guess" that works with most
window managers.
Moreover, nearly all window managers are historically broken with
respect to their handling of window gravity. So moving a window to
its current position as returned by gtk_window_get_position() tends
to result in moving the window slightly. Window managers are
slowly getting better over time.
If a window has gravity #GDK_GRAVITY_STATIC the window manager
frame is not relevant, and thus gtk_window_get_position() will
always produce accurate results. However you can't use static
gravity to do things like place a window in a corner of the screen,
because static gravity ignores the window manager decorations.
If you are saving and restoring your application's window
positions, you should know that it's impossible for applications to
do this without getting it somewhat wrong because applications do
not have sufficient knowledge of window manager state. The Correct
Mechanism is to support the session management protocol (see the
"GnomeClient" object in the GNOME libraries for example) and allow
the window manager to save your window sizes and positions.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="root_x"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:whitespace="preserve">return location for X coordinate of gravity-determined reference point</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="root_y"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:whitespace="preserve">return location for Y coordinate of gravity-determined reference point</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_resizable" c:identifier="gtk_window_get_resizable">
        <doc xml:whitespace="preserve">Gets the value set by gtk_window_set_resizable().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the user can resize the window</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_role" c:identifier="gtk_window_get_role">
        <doc xml:whitespace="preserve">Returns the role of the window. See gtk_window_set_role() for
further explanation.
returned is owned by the widget and must not be modified
or freed.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the role of the window if set, or %NULL. The</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_screen"
              c:identifier="gtk_window_get_screen"
              version="2.2">
        <doc xml:whitespace="preserve">Returns the #GdkScreen associated with @window.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GdkScreen.</doc>
          <type name="Gdk.Screen" c:type="GdkScreen*"/>
        </return-value>
      </method>
      <method name="get_size" c:identifier="gtk_window_get_size">
        <doc xml:whitespace="preserve">Obtains the current size of @window. If @window is not onscreen,
it returns the size GTK+ will suggest to the &lt;link
linkend="gtk-X11-arch"&gt;window manager&lt;/link&gt; for the initial window
size (but this is not reliably the same as the size the window
manager will actually select). The size obtained by
gtk_window_get_size() is the last size received in a
#GdkEventConfigure, that is, GTK+ uses its locally-stored size,
rather than querying the X server for the size. As a result, if you
call gtk_window_resize() then immediately call
gtk_window_get_size(), the size won't have taken effect yet. After
the window manager processes the resize request, GTK+ receives
notification that the size has changed via a configure event, and
the size of the window gets updated.
because the size of the window may change between the time that you
get the size and the time that you perform some action assuming
that size is the current size. To avoid race conditions, connect to
"configure-event" on the window and adjust your size-dependent
state to match the size delivered in the #GdkEventConfigure.
size of the window manager decorations (aka the window frame or
border). Those are not drawn by GTK+ and GTK+ has no reliable
method of determining their size.
the window onscreen, there may be a better way. The preferred
way is to simply set the window's semantic type with
gtk_window_set_type_hint(), which allows the window manager to
e.g. center dialogs. Also, if you set the transient parent of
dialogs with gtk_window_set_transient_for() window managers
will often center the dialog over its parent window. It's
much preferred to let the window manager handle these
things rather than doing it yourself, because all apps will
behave consistently and according to user prefs if the window
manager handles it. Also, the window manager can take the size
of the window decorations/border into account, while your
application cannot.
In any case, if you insist on application-specified window
positioning, there's &lt;emphasis&gt;still&lt;/emphasis&gt; a better way than
doing it yourself - gtk_window_set_position() will frequently
handle the details for you.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="width"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     allow-none="1">
            <doc xml:whitespace="preserve">return location for width, or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="height"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     allow-none="1">
            <doc xml:whitespace="preserve">return location for height, or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_skip_pager_hint"
              c:identifier="gtk_window_get_skip_pager_hint"
              version="2.2">
        <doc xml:whitespace="preserve">Gets the value set by gtk_window_set_skip_pager_hint().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if window shouldn't be in pager</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_skip_taskbar_hint"
              c:identifier="gtk_window_get_skip_taskbar_hint"
              version="2.2">
        <doc xml:whitespace="preserve">Gets the value set by gtk_window_set_skip_taskbar_hint()</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if window shouldn't be in taskbar</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_title" c:identifier="gtk_window_get_title">
        <doc xml:whitespace="preserve">Retrieves the title of the window. See gtk_window_set_title().
been set explicitely. The returned string is owned by the widget
and must not be modified or freed.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the title of the window, or %NULL if none has</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_transient_for"
              c:identifier="gtk_window_get_transient_for">
        <doc xml:whitespace="preserve">Fetches the transient parent for this window. See
gtk_window_set_transient_for().
if no transient parent has been set.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the transient parent for this window, or %NULL</doc>
          <type name="Window" c:type="GtkWindow*"/>
        </return-value>
      </method>
      <method name="get_type_hint" c:identifier="gtk_window_get_type_hint">
        <doc xml:whitespace="preserve">Gets the type hint for this window. See gtk_window_set_type_hint().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the type hint for @window.</doc>
          <type name="Gdk.WindowTypeHint" c:type="GdkWindowTypeHint"/>
        </return-value>
      </method>
      <method name="get_urgency_hint"
              c:identifier="gtk_window_get_urgency_hint"
              version="2.8">
        <doc xml:whitespace="preserve">Gets the value set by gtk_window_set_urgency_hint()</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if window is urgent</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_window_type"
              c:identifier="gtk_window_get_window_type"
              version="2.20">
        <doc xml:whitespace="preserve">Gets the type of the window. See #GtkWindowType.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the type of the window</doc>
          <type name="WindowType" c:type="GtkWindowType"/>
        </return-value>
      </method>
      <method name="has_group" c:identifier="gtk_window_has_group">
        <doc xml:whitespace="preserve">Returns whether @window has an explicit window group.
Since 2.22</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if @window has an explicit window group.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="has_toplevel_focus"
              c:identifier="gtk_window_has_toplevel_focus"
              version="2.4">
        <doc xml:whitespace="preserve">Returns whether the input focus is within this GtkWindow.
For real toplevel windows, this is identical to gtk_window_is_active(),
but for embedded windows, like #GtkPlug, the results will differ.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the input focus is within this GtkWindow</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="iconify" c:identifier="gtk_window_iconify">
        <doc xml:whitespace="preserve">Asks to iconify (i.e. minimize) the specified @window. Note that
you shouldn't assume the window is definitely iconified afterward,
because other entities (e.g. the user or &lt;link
linkend="gtk-X11-arch"&gt;window manager&lt;/link&gt;) could deiconify it
again, or there may not be a window manager in which case
iconification isn't possible, etc. But normally the window will end
up iconified. Just don't write code that crashes if not.
It's permitted to call this function before showing a window,
in which case the window will be iconified before it ever appears
onscreen.
You can track iconification via the "window-state-event" signal
on #GtkWidget.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="is_active"
              c:identifier="gtk_window_is_active"
              version="2.4">
        <doc xml:whitespace="preserve">Returns whether the window is part of the current active toplevel.
(That is, the toplevel window receiving keystrokes.)
The return value is %TRUE if the window is active toplevel
itself, but also if it is, say, a #GtkPlug embedded in the active toplevel.
You might use this function if you wanted to draw a widget
differently in an active window from a widget in an inactive window.
See gtk_window_has_toplevel_focus()</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the window part of the current active window.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="maximize" c:identifier="gtk_window_maximize">
        <doc xml:whitespace="preserve">Asks to maximize @window, so that it becomes full-screen. Note that
you shouldn't assume the window is definitely maximized afterward,
because other entities (e.g. the user or &lt;link
linkend="gtk-X11-arch"&gt;window manager&lt;/link&gt;) could unmaximize it
again, and not all window managers support maximization. But
normally the window will end up maximized. Just don't write code
that crashes if not.
It's permitted to call this function before showing a window,
in which case the window will be maximized when it appears onscreen
initially.
You can track maximization via the "window-state-event" signal
on #GtkWidget.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="mnemonic_activate"
              c:identifier="gtk_window_mnemonic_activate">
        <doc xml:whitespace="preserve">Activates the targets associated with the mnemonic.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the activation is done.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="keyval" transfer-ownership="none">
            <doc xml:whitespace="preserve">the mnemonic</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="modifier" transfer-ownership="none">
            <doc xml:whitespace="preserve">the modifiers</doc>
            <type name="Gdk.ModifierType" c:type="GdkModifierType"/>
          </parameter>
        </parameters>
      </method>
      <method name="move" c:identifier="gtk_window_move">
        <doc xml:whitespace="preserve">Asks the &lt;link linkend="gtk-X11-arch"&gt;window manager&lt;/link&gt; to move
this; most window managers ignore requests for initial window
positions (instead using a user-defined placement algorithm) and
honor requests after the window has already been shown.
reference point for the window. The gravity determines two things:
first, the location of the reference point in root window
coordinates; and second, which point on the window is positioned at
the reference point.
By default the gravity is #GDK_GRAVITY_NORTH_WEST, so the reference
point is simply the @x, @y supplied to gtk_window_move(). The
top-left corner of the window decorations (aka window frame or
border) will be placed at @x, @y.  Therefore, to position a window
at the top left of the screen, you want to use the default gravity
(which is #GDK_GRAVITY_NORTH_WEST) and move the window to 0,0.
To position a window at the bottom right corner of the screen, you
would set #GDK_GRAVITY_SOUTH_EAST, which means that the reference
point is at @x + the window width and @y + the window height, and
the bottom-right corner of the window border will be placed at that
reference point. So, to place a window in the bottom right corner
you would first set gravity to south east, then write:
&lt;literal&gt;gtk_window_move (window, gdk_screen_width () - window_width,
gdk_screen_height () - window_height)&lt;/literal&gt; (note that this
example does not take multi-head scenarios into account).
The Extended Window Manager Hints specification at &lt;ulink 
url="http://www.freedesktop.org/Standards/wm-spec"&gt;
http://www.freedesktop.org/Standards/wm-spec&lt;/ulink&gt; has a 
nice table of gravities in the "implementation notes" section.
The gtk_window_get_position() documentation may also be relevant.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="x" transfer-ownership="none">
            <doc xml:whitespace="preserve">X coordinate to move window to</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:whitespace="preserve">Y coordinate to move window to</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="parse_geometry" c:identifier="gtk_window_parse_geometry">
        <doc xml:whitespace="preserve">Parses a standard X Window System geometry string - see the
manual page for X (type 'man X') for details on this.
gtk_window_parse_geometry() does work on all GTK+ ports
including Win32 but is primarily intended for an X environment.
If either a size or a position can be extracted from the
geometry string, gtk_window_parse_geometry() returns %TRUE
and calls gtk_window_set_default_size() and/or gtk_window_move()
to resize/move the window.
If gtk_window_parse_geometry() returns %TRUE, it will also
set the #GDK_HINT_USER_POS and/or #GDK_HINT_USER_SIZE hints
indicating to the window manager that the size/position of
the window was user-specified. This causes most window
managers to honor the geometry.
Note that for gtk_window_parse_geometry() to work as expected, it has
to be called when the window has its "final" size, i.e. after calling
gtk_widget_show_all() on the contents and gtk_window_set_geometry_hints()
on the window.
|[
#include &lt;gtk/gtk.h&gt;
static void
fill_with_content (GtkWidget *vbox)
{
/&amp;ast; fill with content... &amp;ast;/
}
int
main (int argc, char *argv[])
{
GtkWidget *window, *vbox;
GdkGeometry size_hints = {
100, 50, 0, 0, 100, 50, 10, 10, 0.0, 0.0, GDK_GRAVITY_NORTH_WEST  
};
gtk_init (&amp;argc, &amp;argv);
window = gtk_window_new (GTK_WINDOW_TOPLEVEL);
vbox = gtk_vbox_new (FALSE, 0);
gtk_container_add (GTK_CONTAINER (window), vbox);
fill_with_content (vbox);
gtk_widget_show_all (vbox);
gtk_window_set_geometry_hints (GTK_WINDOW (window),
window,
&amp;size_hints,
GDK_HINT_MIN_SIZE | 
GDK_HINT_BASE_SIZE | 
GDK_HINT_RESIZE_INC);
if (argc &amp;gt; 1)
{
if (!gtk_window_parse_geometry (GTK_WINDOW (window), argv[1]))
fprintf (stderr, "Failed to parse '%s'\n", argv[1]);
}
gtk_widget_show_all (window);
gtk_main ();
return 0;
}
]|</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if string was parsed successfully</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="geometry" transfer-ownership="none">
            <doc xml:whitespace="preserve">geometry string</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="present" c:identifier="gtk_window_present">
        <doc xml:whitespace="preserve">Presents a window to the user. This may mean raising the window
in the stacking order, deiconifying it, moving it to the current
desktop, and/or giving it the keyboard focus, possibly dependent
on the user's platform, window manager, and preferences.
If @window is hidden, this function calls gtk_widget_show()
as well.
This function should be used when the user tries to open a window
that's already open. Say for example the preferences dialog is
currently open, and the user chooses Preferences from the menu
a second time; use gtk_window_present() to move the already-open dialog
where the user can see it.
If you are calling this function in response to a user interaction,
it is preferable to use gtk_window_present_with_time().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="present_with_time"
              c:identifier="gtk_window_present_with_time"
              version="2.8">
        <doc xml:whitespace="preserve">Presents a window to the user in response to a user interaction.
If you need to present a window without a timestamp, use 
gtk_window_present(). See gtk_window_present() for details.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="timestamp" transfer-ownership="none">
            <doc xml:whitespace="preserve">the timestamp of the user interaction (typically a button or key press event) which triggered this call</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="propagate_key_event"
              c:identifier="gtk_window_propagate_key_event"
              version="2.4">
        <doc xml:whitespace="preserve">Propagate a key press or release event to the focus widget and
up the focus container chain until a widget handles @event.
This is normally called by the default ::key_press_event and
::key_release_event handlers for toplevel windows,
however in some cases it may be useful to call this directly when
overriding the standard key handling for a toplevel window.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if a widget in the focus chain handled the event.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="event" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GdkEventKey</doc>
            <type name="Gdk.EventKey" c:type="GdkEventKey*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_accel_group"
              c:identifier="gtk_window_remove_accel_group">
        <doc xml:whitespace="preserve">Reverses the effects of gtk_window_add_accel_group().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="accel_group" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkAccelGroup</doc>
            <type name="AccelGroup" c:type="GtkAccelGroup*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_embedded_xid"
              c:identifier="gtk_window_remove_embedded_xid">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="xid" transfer-ownership="none">
            <type name="Gdk.NativeWindow" c:type="GdkNativeWindow"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_mnemonic" c:identifier="gtk_window_remove_mnemonic">
        <doc xml:whitespace="preserve">Removes a mnemonic from this window.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="keyval" transfer-ownership="none">
            <doc xml:whitespace="preserve">the mnemonic</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="target" transfer-ownership="none">
            <doc xml:whitespace="preserve">the widget that gets activated by the mnemonic</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="reshow_with_initial_size"
              c:identifier="gtk_window_reshow_with_initial_size">
        <doc xml:whitespace="preserve">Hides @window, then reshows it, resetting the
default size and position of the window. Used
by GUI builders only.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="resize" c:identifier="gtk_window_resize">
        <doc xml:whitespace="preserve">Resizes the window as if the user had done so, obeying geometry
constraints. The default geometry constraint is that windows may
not be smaller than their size request; to override this
constraint, call gtk_widget_set_size_request() to set the window's
request to a smaller value.
If gtk_window_resize() is called before showing a window for the
first time, it overrides any default size set with
gtk_window_set_default_size().
Windows may not be resized smaller than 1 by 1 pixels.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="width" transfer-ownership="none">
            <doc xml:whitespace="preserve">width in pixels to resize the window to</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:whitespace="preserve">height in pixels to resize the window to</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_accept_focus"
              c:identifier="gtk_window_set_accept_focus"
              version="2.4">
        <doc xml:whitespace="preserve">Windows may set a hint asking the desktop environment not to receive
the input focus. This function sets this hint.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="setting" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE to let this window receive input focus</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_decorated" c:identifier="gtk_window_set_decorated">
        <doc xml:whitespace="preserve">By default, windows are decorated with a title bar, resize
controls, etc.  Some &lt;link linkend="gtk-X11-arch"&gt;window
managers&lt;/link&gt; allow GTK+ to disable these decorations, creating a
borderless window. If you set the decorated property to %FALSE
using this function, GTK+ will do its best to convince the window
manager not to decorate the window. Depending on the system, this
function may not have any effect when called on a window that is
already visible, so you should call it before calling gtk_window_show().
On Windows, this function always works, since there's no window manager
policy involved.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="setting" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE to decorate the window</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_default" c:identifier="gtk_window_set_default">
        <doc xml:whitespace="preserve">The default widget is the widget that's activated when the user
presses Enter in a dialog (for example). This function sets or
unsets the default widget for a #GtkWindow about. When setting
(rather than unsetting) the default widget it's generally easier to
call gtk_widget_grab_focus() on the widget. Before making a widget
the default widget, you must set the #GTK_CAN_DEFAULT flag on the
widget you'd like to make the default using GTK_WIDGET_SET_FLAGS().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="default_widget"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">widget to be the default, or %NULL to unset the default widget for the toplevel.</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_default_size"
              c:identifier="gtk_window_set_default_size">
        <doc xml:whitespace="preserve">Sets the default size of a window. If the window's "natural" size
(its size request) is larger than the default, the default will be
ignored. More generally, if the default size does not obey the
geometry hints for the window (gtk_window_set_geometry_hints() can
be used to set these explicitly), the default size will be clamped
to the nearest permitted size.
Unlike gtk_widget_set_size_request(), which sets a size request for
a widget and thus would keep users from shrinking the window, this
function only sets the initial size, just as if the user had
resized the window themselves. Users can still shrink the window
again as they normally would. Setting a default size of -1 means to
use the "natural" default size (the size request of the window).
For more control over a window's initial size and how resizing works,
investigate gtk_window_set_geometry_hints().
For some uses, gtk_window_resize() is a more appropriate function.
gtk_window_resize() changes the current size of the window, rather
than the size to be used on initial display. gtk_window_resize() always
affects the window itself, not the geometry widget.
The default size of a window only affects the first time a window is
shown; if a window is hidden and re-shown, it will remember the size
it had prior to hiding, rather than using the default size.
Windows can't actually be 0x0 in size, they must be at least 1x1, but
passing 0 for @width and @height is OK, resulting in a 1x1 default size.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="width" transfer-ownership="none">
            <doc xml:whitespace="preserve">width in pixels, or -1 to unset the default width</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:whitespace="preserve">height in pixels, or -1 to unset the default height</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_deletable"
              c:identifier="gtk_window_set_deletable"
              version="2.10">
        <doc xml:whitespace="preserve">By default, windows have a close button in the window frame. Some 
&lt;link linkend="gtk-X11-arch"&gt;window managers&lt;/link&gt; allow GTK+ to 
disable this button. If you set the deletable property to %FALSE
using this function, GTK+ will do its best to convince the window
manager not to show a close button. Depending on the system, this
function may not have any effect when called on a window that is
already visible, so you should call it before calling gtk_window_show().
On Windows, this function always works, since there's no window manager
policy involved.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="setting" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE to decorate the window as deletable</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_destroy_with_parent"
              c:identifier="gtk_window_set_destroy_with_parent">
        <doc xml:whitespace="preserve">If @setting is %TRUE, then destroying the transient parent of @window
will also destroy @window itself. This is useful for dialogs that
shouldn't persist beyond the lifetime of the main window they're
associated with, for example.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="setting" transfer-ownership="none">
            <doc xml:whitespace="preserve">whether to destroy @window with its transient parent</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_focus" c:identifier="gtk_window_set_focus">
        <doc xml:whitespace="preserve">If @focus is not the current focus widget, and is focusable, sets
it as the focus widget for the window. If @focus is %NULL, unsets
the focus widget for this window. To set the focus to a particular
widget in the toplevel, it is usually more convenient to use
gtk_widget_grab_focus() instead of this function.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="focus" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">widget to be the new focus widget, or %NULL to unset any focus widget for the toplevel window.</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_focus_on_map"
              c:identifier="gtk_window_set_focus_on_map"
              version="2.6">
        <doc xml:whitespace="preserve">Windows may set a hint asking the desktop environment not to receive
the input focus when the window is mapped.  This function sets this
hint.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="setting" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE to let this window receive input focus on map</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_frame_dimensions"
              c:identifier="gtk_window_set_frame_dimensions">
        <doc xml:whitespace="preserve">(Note: this is a special-purpose function intended for the framebuffer
port; see gtk_window_set_has_frame(). It will have no effect on the
window border drawn by the window manager, which is the normal
case when using the X Window system.)
For windows with frames (see gtk_window_set_has_frame()) this function
can be used to change the size of the frame border.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="left" transfer-ownership="none">
            <doc xml:whitespace="preserve">The width of the left border</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="top" transfer-ownership="none">
            <doc xml:whitespace="preserve">The height of the top border</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="right" transfer-ownership="none">
            <doc xml:whitespace="preserve">The width of the right border</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="bottom" transfer-ownership="none">
            <doc xml:whitespace="preserve">The height of the bottom border</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_geometry_hints"
              c:identifier="gtk_window_set_geometry_hints">
        <doc xml:whitespace="preserve">This function sets up hints about how a window can be resized by
the user.  You can set a minimum and maximum size; allowed resize
increments (e.g. for xterm, you can only resize by the size of a
character); aspect ratios; and more. See the #GdkGeometry struct.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="geometry_widget"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">widget the geometry hints will be applied to or %NULL</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="geometry" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">struct containing geometry information or %NULL</doc>
            <type name="Gdk.Geometry" c:type="GdkGeometry*"/>
          </parameter>
          <parameter name="geom_mask" transfer-ownership="none">
            <doc xml:whitespace="preserve">mask indicating which struct fields should be paid attention to</doc>
            <type name="Gdk.WindowHints" c:type="GdkWindowHints"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_gravity" c:identifier="gtk_window_set_gravity">
        <doc xml:whitespace="preserve">Window gravity defines the meaning of coordinates passed to
gtk_window_move(). See gtk_window_move() and #GdkGravity for
more details.
The default window gravity is #GDK_GRAVITY_NORTH_WEST which will
typically "do what you mean."</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="gravity" transfer-ownership="none">
            <doc xml:whitespace="preserve">window gravity</doc>
            <type name="Gdk.Gravity" c:type="GdkGravity"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_has_frame" c:identifier="gtk_window_set_has_frame">
        <doc xml:whitespace="preserve">(Note: this is a special-purpose function for the framebuffer port,
that causes GTK+ to draw its own window border. For most applications,
you want gtk_window_set_decorated() instead, which tells the window
manager whether to draw the window border.)
If this function is called on a window with setting of %TRUE, before
it is realized or showed, it will have a "frame" window around
frame_event you can receive all events targeted at the frame.
This function is used by the linux-fb port to implement managed
windows, but it could conceivably be used by X-programs that
want to do their own window decorations.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="setting" transfer-ownership="none">
            <doc xml:whitespace="preserve">a boolean</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_icon" c:identifier="gtk_window_set_icon">
        <doc xml:whitespace="preserve">Sets up the icon representing a #GtkWindow. This icon is used when
the window is minimized (also known as iconified).  Some window
managers or desktop environments may also place it in the window
frame, or display it in other contexts.
The icon should be provided in whatever size it was naturally
drawn; that is, don't scale the image before passing it to
GTK+. Scaling is postponed until the last minute, when the desired
final size is known, to allow best quality.
If you have your icon hand-drawn in multiple sizes, use
gtk_window_set_icon_list(). Then the best size will be used.
This function is equivalent to calling gtk_window_set_icon_list()
with a 1-element list.
See also gtk_window_set_default_icon_list() to set the icon
for all windows in your application in one go.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="icon" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">icon image, or %NULL</doc>
            <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_icon_from_file"
              c:identifier="gtk_window_set_icon_from_file"
              version="2.2"
              throws="1">
        <doc xml:whitespace="preserve">Sets the icon for @window.  
Warns on failure if @err is %NULL.
This function is equivalent to calling gtk_window_set_icon()
with a pixbuf created by loading the image from @filename.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if setting the icon succeeded.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:whitespace="preserve">location of icon file</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_icon_list" c:identifier="gtk_window_set_icon_list">
        <doc xml:whitespace="preserve">Sets up the icon representing a #GtkWindow. The icon is used when
the window is minimized (also known as iconified).  Some window
managers or desktop environments may also place it in the window
frame, or display it in other contexts.
gtk_window_set_icon_list() allows you to pass in the same icon in
several hand-drawn sizes. The list should contain the natural sizes
your icon is available in; that is, don't scale the image before
passing it to GTK+. Scaling is postponed until the last minute,
when the desired final size is known, to allow best quality.
By passing several sizes, you may improve the final image quality
of the icon, by reducing or eliminating automatic image scaling.
larger images (64x64, 128x128) if you have them.
See also gtk_window_set_default_icon_list() to set the icon
for all windows in your application in one go.
Note that transient windows (those who have been set transient for another
window using gtk_window_set_transient_for()) will inherit their
icon from their transient parent. So there's no need to explicitly
set the icon on transient windows.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="list" transfer-ownership="container">
            <doc xml:whitespace="preserve">list of #GdkPixbuf</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="GdkPixbuf.Pixbuf"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <method name="set_icon_name"
              c:identifier="gtk_window_set_icon_name"
              version="2.6">
        <doc xml:whitespace="preserve">Sets the icon for the window from a named themed icon. See
the docs for #GtkIconTheme for more details.
Note that this has nothing to do with the WM_ICON_NAME 
property which is mentioned in the ICCCM.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">the name of the themed icon</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_keep_above"
              c:identifier="gtk_window_set_keep_above"
              version="2.4">
        <doc xml:whitespace="preserve">Asks to keep @window above, so that it stays on top. Note that
you shouldn't assume the window is definitely above afterward,
because other entities (e.g. the user or &lt;link
linkend="gtk-X11-arch"&gt;window manager&lt;/link&gt;) could not keep it above,
and not all window managers support keeping windows above. But
normally the window will end kept above. Just don't write code
that crashes if not.
It's permitted to call this function before showing a window,
in which case the window will be kept above when it appears onscreen
initially.
You can track the above state via the "window-state-event" signal
on #GtkWidget.
Note that, according to the &lt;ulink 
url="http://www.freedesktop.org/Standards/wm-spec"&gt;Extended Window 
Manager Hints&lt;/ulink&gt; specification, the above state is mainly meant 
for user preferences and should not be used by applications e.g. for 
drawing attention to their dialogs.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="setting" transfer-ownership="none">
            <doc xml:whitespace="preserve">whether to keep @window above other windows</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_keep_below"
              c:identifier="gtk_window_set_keep_below"
              version="2.4">
        <doc xml:whitespace="preserve">Asks to keep @window below, so that it stays in bottom. Note that
you shouldn't assume the window is definitely below afterward,
because other entities (e.g. the user or &lt;link
linkend="gtk-X11-arch"&gt;window manager&lt;/link&gt;) could not keep it below,
and not all window managers support putting windows below. But
normally the window will be kept below. Just don't write code
that crashes if not.
It's permitted to call this function before showing a window,
in which case the window will be kept below when it appears onscreen
initially.
You can track the below state via the "window-state-event" signal
on #GtkWidget.
Note that, according to the &lt;ulink 
url="http://www.freedesktop.org/Standards/wm-spec"&gt;Extended Window 
Manager Hints&lt;/ulink&gt; specification, the above state is mainly meant 
for user preferences and should not be used by applications e.g. for 
drawing attention to their dialogs.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="setting" transfer-ownership="none">
            <doc xml:whitespace="preserve">whether to keep @window below other windows</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_mnemonic_modifier"
              c:identifier="gtk_window_set_mnemonic_modifier">
        <doc xml:whitespace="preserve">Sets the mnemonic modifier for this window.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="modifier" transfer-ownership="none">
            <doc xml:whitespace="preserve">the modifier mask used to activate mnemonics on this window.</doc>
            <type name="Gdk.ModifierType" c:type="GdkModifierType"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_mnemonics_visible"
              c:identifier="gtk_window_set_mnemonics_visible"
              version="2.20">
        <doc xml:whitespace="preserve">Sets the #GtkWindow:mnemonics-visible property.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="setting" transfer-ownership="none">
            <doc xml:whitespace="preserve">the new value</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_modal" c:identifier="gtk_window_set_modal">
        <doc xml:whitespace="preserve">Sets a window modal or non-modal. Modal windows prevent interaction
with other windows in the same application. To keep modal dialogs
on top of main application windows, use
gtk_window_set_transient_for() to make the dialog transient for the
parent; most &lt;link linkend="gtk-X11-arch"&gt;window managers&lt;/link&gt;
will then disallow lowering the dialog below the parent.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="modal" transfer-ownership="none">
            <doc xml:whitespace="preserve">whether the window is modal</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_opacity"
              c:identifier="gtk_window_set_opacity"
              version="2.12">
        <doc xml:whitespace="preserve">Request the windowing system to make @window partially transparent,
with opacity 0 being fully transparent and 1 fully opaque. (Values
of the opacity parameter are clamped to the [0,1] range.) On X11
this has any effect only on X screens with a compositing manager
running. See gtk_widget_is_composited(). On Windows it should work
always.
Note that setting a window's opacity after the window has been
shown causes it to flicker once on Windows.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="opacity" transfer-ownership="none">
            <doc xml:whitespace="preserve">desired opacity, between 0 and 1</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_position" c:identifier="gtk_window_set_position">
        <doc xml:whitespace="preserve">Sets a position constraint for this window. If the old or new
constraint is %GTK_WIN_POS_CENTER_ALWAYS, this will also cause
the window to be repositioned to satisfy the new constraint.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="position" transfer-ownership="none">
            <doc xml:whitespace="preserve">a position constraint.</doc>
            <type name="WindowPosition" c:type="GtkWindowPosition"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_resizable" c:identifier="gtk_window_set_resizable">
        <doc xml:whitespace="preserve">Sets whether the user can resize a window. Windows are user resizable
by default.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="resizable" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE if the user can resize this window</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_role" c:identifier="gtk_window_set_role">
        <doc xml:whitespace="preserve">This function is only useful on X11, not with other GTK+ targets.
In combination with the window title, the window role allows a
&lt;link linkend="gtk-X11-arch"&gt;window manager&lt;/link&gt; to identify "the
same" window when an application is restarted. So for example you
might set the "toolbox" role on your app's toolbox window, so that
when the user restarts their session, the window manager can put
the toolbox back in the same place.
If a window already has a unique title, you don't need to set the
role, since the WM can use the title to identify the window when
restoring the session.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="role" transfer-ownership="none">
            <doc xml:whitespace="preserve">unique identifier for the window to be used when restoring a session</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_screen" c:identifier="gtk_window_set_screen">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="screen" transfer-ownership="none">
            <type name="Gdk.Screen" c:type="GdkScreen*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_skip_pager_hint"
              c:identifier="gtk_window_set_skip_pager_hint"
              version="2.2">
        <doc xml:whitespace="preserve">Windows may set a hint asking the desktop environment not to display
the window in the pager. This function sets this hint.
(A "pager" is any desktop navigation tool such as a workspace
switcher that displays a thumbnail representation of the windows
on the screen.)</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="setting" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE to keep this window from appearing in the pager</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_skip_taskbar_hint"
              c:identifier="gtk_window_set_skip_taskbar_hint"
              version="2.2">
        <doc xml:whitespace="preserve">Windows may set a hint asking the desktop environment not to display
the window in the task bar. This function sets this hint.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="setting" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE to keep this window from appearing in the task bar</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_startup_id"
              c:identifier="gtk_window_set_startup_id"
              version="2.12">
        <doc xml:whitespace="preserve">Startup notification identifiers are used by desktop environment to 
track application startup, to provide user feedback and other 
features. This function changes the corresponding property on the
underlying GdkWindow. Normally, startup identifier is managed 
automatically and you should only use this function in special cases
like transferring focus from other processes. You should use this
function before calling gtk_window_present() or any equivalent
function generating a window map event.
This function is only useful on X11, not with other GTK+ targets.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="startup_id" transfer-ownership="none">
            <doc xml:whitespace="preserve">a string with startup-notification identifier</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_title" c:identifier="gtk_window_set_title">
        <doc xml:whitespace="preserve">Sets the title of the #GtkWindow. The title of a window will be
displayed in its title bar; on the X Window System, the title bar
is rendered by the &lt;link linkend="gtk-X11-arch"&gt;window
manager&lt;/link&gt;, so exactly how the title appears to users may vary
according to a user's exact configuration. The title should help a
user distinguish this window from other windows they may have
open. A good title might include the application name and current
document filename, for example.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="title" transfer-ownership="none">
            <doc xml:whitespace="preserve">title of the window</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_transient_for"
              c:identifier="gtk_window_set_transient_for">
        <doc xml:whitespace="preserve">Dialog windows should be set transient for the main application
window they were spawned from. This allows &lt;link
linkend="gtk-X11-arch"&gt;window managers&lt;/link&gt; to e.g. keep the
dialog on top of the main window, or center the dialog over the
main window. gtk_dialog_new_with_buttons() and other convenience
functions in GTK+ will sometimes call
gtk_window_set_transient_for() on your behalf.
Passing %NULL for @parent unsets the current transient window.
On Windows, this function puts the child window on top of the parent,
much as the window manager would have done on X.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="parent" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">parent window, or %NULL</doc>
            <type name="Window" c:type="GtkWindow*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_type_hint" c:identifier="gtk_window_set_type_hint">
        <doc xml:whitespace="preserve">By setting the type hint for the window, you allow the window
manager to decorate and handle the window in a way which is
suitable to the function of the window in your application.
This function should be called before the window becomes visible.
gtk_dialog_new_with_buttons() and other convenience functions in GTK+
will sometimes call gtk_window_set_type_hint() on your behalf.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="hint" transfer-ownership="none">
            <doc xml:whitespace="preserve">the window type</doc>
            <type name="Gdk.WindowTypeHint" c:type="GdkWindowTypeHint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_urgency_hint"
              c:identifier="gtk_window_set_urgency_hint"
              version="2.8">
        <doc xml:whitespace="preserve">Windows may set a hint asking the desktop environment to draw
the users attention to the window. This function sets this hint.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="setting" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE to mark this window as urgent</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_wmclass" c:identifier="gtk_window_set_wmclass">
        <doc xml:whitespace="preserve">Don't use this function. It sets the X Window System "class" and
"name" hints for a window.  According to the ICCCM, you should
always set these to the same value for all windows in an
application, and GTK+ sets them to that value by default, so calling
this function is sort of pointless. However, you may want to call
gtk_window_set_role() on each window in your application, for the
benefit of the session manager. Setting the role allows the window
manager to restore window positions when loading a saved session.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="wmclass_name" transfer-ownership="none">
            <doc xml:whitespace="preserve">window name hint</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="wmclass_class" transfer-ownership="none">
            <doc xml:whitespace="preserve">window class hint</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="stick" c:identifier="gtk_window_stick">
        <doc xml:whitespace="preserve">Asks to stick @window, which means that it will appear on all user
desktops. Note that you shouldn't assume the window is definitely
stuck afterward, because other entities (e.g. the user or &lt;link
linkend="gtk-X11-arch"&gt;window manager&lt;/link&gt;) could unstick it
again, and some window managers do not support sticking
windows. But normally the window will end up stuck. Just don't
write code that crashes if not.
It's permitted to call this function before showing a window.
You can track stickiness via the "window-state-event" signal
on #GtkWidget.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="unfullscreen"
              c:identifier="gtk_window_unfullscreen"
              version="2.2">
        <doc xml:whitespace="preserve">Asks to toggle off the fullscreen state for @window. Note that you
shouldn't assume the window is definitely not full screen
afterward, because other entities (e.g. the user or &lt;link
linkend="gtk-X11-arch"&gt;window manager&lt;/link&gt;) could fullscreen it
again, and not all window managers honor requests to unfullscreen
windows. But normally the window will end up restored to its normal
state. Just don't write code that crashes if not.
You can track the fullscreen state via the "window-state-event" signal
on #GtkWidget.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="unmaximize" c:identifier="gtk_window_unmaximize">
        <doc xml:whitespace="preserve">Asks to unmaximize @window. Note that you shouldn't assume the
window is definitely unmaximized afterward, because other entities
(e.g. the user or &lt;link linkend="gtk-X11-arch"&gt;window
manager&lt;/link&gt;) could maximize it again, and not all window
managers honor requests to unmaximize. But normally the window will
end up unmaximized. Just don't write code that crashes if not.
You can track maximization via the "window-state-event" signal
on #GtkWidget.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="unstick" c:identifier="gtk_window_unstick">
        <doc xml:whitespace="preserve">Asks to unstick @window, which means that it will appear on only
one of the user's desktops. Note that you shouldn't assume the
window is definitely unstuck afterward, because other entities
(e.g. the user or &lt;link linkend="gtk-X11-arch"&gt;window
manager&lt;/link&gt;) could stick it again. But normally the window will
end up stuck. Just don't write code that crashes if not.
You can track stickiness via the "window-state-event" signal
on #GtkWidget.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <property name="accept-focus"
                version="2.4"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Whether the window should receive the input focus.</doc>
        <type name="gboolean"/>
      </property>
      <property name="decorated"
                version="2.4"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Whether the window should be decorated by the window manager.</doc>
        <type name="gboolean"/>
      </property>
      <property name="default-height" writable="1" transfer-ownership="none">
        <type name="gint"/>
      </property>
      <property name="default-width" writable="1" transfer-ownership="none">
        <type name="gint"/>
      </property>
      <property name="deletable"
                version="2.10"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Whether the window frame should have a close button.</doc>
        <type name="gboolean"/>
      </property>
      <property name="destroy-with-parent"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="focus-on-map"
                version="2.6"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Whether the window should receive the input focus when mapped.</doc>
        <type name="gboolean"/>
      </property>
      <property name="gravity"
                version="2.4"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The window gravity of the window. See gtk_window_move() and #GdkGravity for
more details about window gravity.</doc>
        <type name="Gdk.Gravity"/>
      </property>
      <property name="has-toplevel-focus" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="icon" writable="1" transfer-ownership="none">
        <type name="GdkPixbuf.Pixbuf"/>
      </property>
      <property name="icon-name"
                version="2.6"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The :icon-name property specifies the name of the themed icon to
use as the window icon. See #GtkIconTheme for more details.</doc>
        <type name="utf8"/>
      </property>
      <property name="is-active" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="mnemonics-visible"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="modal" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="opacity"
                version="2.12"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The requested opacity of the window. See gtk_window_set_opacity() for
more details about window opacity.</doc>
        <type name="gdouble"/>
      </property>
      <property name="resizable" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="role" writable="1" transfer-ownership="none">
        <type name="utf8"/>
      </property>
      <property name="screen" writable="1" transfer-ownership="none">
        <type name="Gdk.Screen"/>
      </property>
      <property name="skip-pager-hint" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="skip-taskbar-hint"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="startup-id"
                version="2.12"
                readable="0"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The :startup-id is a write-only property for setting window's
startup notification identifier. See gtk_window_set_startup_id()
for more details.</doc>
        <type name="utf8"/>
      </property>
      <property name="title" writable="1" transfer-ownership="none">
        <type name="utf8"/>
      </property>
      <property name="transient-for"
                version="2.10"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The transient parent of the window. See gtk_window_set_transient_for() for
more details about transient windows.</doc>
        <type name="Window"/>
      </property>
      <property name="type"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="WindowType"/>
      </property>
      <property name="type-hint" writable="1" transfer-ownership="none">
        <type name="Gdk.WindowTypeHint"/>
      </property>
      <property name="urgency-hint" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="window-position" writable="1" transfer-ownership="none">
        <type name="WindowPosition"/>
      </property>
      <field name="bin">
        <type name="Bin" c:type="GtkBin"/>
      </field>
      <field name="priv">
        <type name="WindowPrivate" c:type="GtkWindowPrivate*"/>
      </field>
      <glib:signal name="activate-default">
        <doc xml:whitespace="preserve">The ::activate-default signal is a
&lt;link linkend="keybinding-signals"&gt;keybinding signal&lt;/link&gt;
which gets emitted when the user activates the default widget
of @window.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
      <glib:signal name="activate-focus">
        <doc xml:whitespace="preserve">The ::activate-focus signal is a
&lt;link linkend="keybinding-signals"&gt;keybinding signal&lt;/link&gt;
which gets emitted when the user activates the currently
focused widget of @window.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
      <glib:signal name="frame-event">
        <return-value transfer-ownership="none">
          <type name="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Gdk.Event"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="keys-changed">
        <doc xml:whitespace="preserve">The ::keys-changed signal gets emitted when the set of accelerators
or mnemonics that are associated with @window changes.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
      <glib:signal name="set-focus">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Widget"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="WindowClass"
            c:type="GtkWindowClass"
            glib:is-gtype-struct-for="Window">
      <field name="parent_class">
        <type name="BinClass" c:type="GtkBinClass"/>
      </field>
      <field name="set_focus">
        <callback name="set_focus">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="window" transfer-ownership="none">
              <type name="Window" c:type="GtkWindow*"/>
            </parameter>
            <parameter name="focus" transfer-ownership="none">
              <type name="Widget" c:type="GtkWidget*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="frame_event">
        <callback name="frame_event">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="window" transfer-ownership="none">
              <type name="Window" c:type="GtkWindow*"/>
            </parameter>
            <parameter name="event" transfer-ownership="none">
              <type name="Gdk.Event" c:type="GdkEvent*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="activate_focus">
        <callback name="activate_focus">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="window" transfer-ownership="none">
              <type name="Window" c:type="GtkWindow*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="activate_default">
        <callback name="activate_default">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="window" transfer-ownership="none">
              <type name="Window" c:type="GtkWindow*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="move_focus">
        <callback name="move_focus">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="window" transfer-ownership="none">
              <type name="Window" c:type="GtkWindow*"/>
            </parameter>
            <parameter name="direction" transfer-ownership="none">
              <type name="DirectionType" c:type="GtkDirectionType"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="keys_changed">
        <callback name="keys_changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="window" transfer-ownership="none">
              <type name="Window" c:type="GtkWindow*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_gtk_reserved1" introspectable="0">
        <callback name="_gtk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved2" introspectable="0">
        <callback name="_gtk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved3" introspectable="0">
        <callback name="_gtk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved4" introspectable="0">
        <callback name="_gtk_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="WindowGeometryInfo"
            c:type="GtkWindowGeometryInfo"
            disguised="1">
    </record>
    <class name="WindowGroup"
           c:symbol-prefix="window_group"
           c:type="GtkWindowGroup"
           parent="GObject.Object"
           glib:type-name="GtkWindowGroup"
           glib:get-type="gtk_window_group_get_type"
           glib:type-struct="WindowGroupClass">
      <constructor name="new" c:identifier="gtk_window_group_new">
        <doc xml:whitespace="preserve">Creates a new #GtkWindowGroup object. Grabs added with
gtk_grab_add() only affect windows within the same #GtkWindowGroup.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new #GtkWindowGroup.</doc>
          <type name="WindowGroup" c:type="GtkWindowGroup*"/>
        </return-value>
      </constructor>
      <method name="add_window" c:identifier="gtk_window_group_add_window">
        <doc xml:whitespace="preserve">Adds a window to a #GtkWindowGroup.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="window" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GtkWindow to add</doc>
            <type name="Window" c:type="GtkWindow*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_current_device_grab"
              c:identifier="gtk_window_group_get_current_device_grab"
              version="3.0"
              introspectable="0">
        <doc xml:whitespace="preserve">Returns the current grab widget for @device, or %NULL if none.</doc>
        <return-value>
          <doc xml:whitespace="preserve">The grab widget, or %NULL</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="device" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GdkDevice</doc>
            <type name="Gdk.Device" c:type="GdkDevice*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_current_grab"
              c:identifier="gtk_window_group_get_current_grab"
              version="2.22"
              introspectable="0">
        <doc xml:whitespace="preserve">Gets the current grab widget of the given group,
see gtk_grab_add().</doc>
        <return-value>
          <doc xml:whitespace="preserve">the current grab widget of the group</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
      </method>
      <method name="list_windows"
              c:identifier="gtk_window_group_list_windows"
              version="2.14">
        <doc xml:whitespace="preserve">Returns a list of the #GtkWindows that belong to @window_group.
windows inside the group.</doc>
        <return-value transfer-ownership="container">
          <doc xml:whitespace="preserve">A newly-allocated list of</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Widget"/>
          </type>
        </return-value>
      </method>
      <method name="remove_window"
              c:identifier="gtk_window_group_remove_window">
        <doc xml:whitespace="preserve">Removes a window from a #GtkWindowGroup.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="window" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GtkWindow to remove</doc>
            <type name="Window" c:type="GtkWindow*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="grabs">
        <type name="GLib.SList" c:type="GSList*">
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </field>
    </class>
    <record name="WindowGroupClass"
            c:type="GtkWindowGroupClass"
            glib:is-gtype-struct-for="WindowGroup">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="_gtk_reserved1" introspectable="0">
        <callback name="_gtk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved2" introspectable="0">
        <callback name="_gtk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved3" introspectable="0">
        <callback name="_gtk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved4" introspectable="0">
        <callback name="_gtk_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <callback name="WindowKeysForeachFunc" c:type="GtkWindowKeysForeachFunc">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="window" transfer-ownership="none">
          <type name="Window" c:type="GtkWindow*"/>
        </parameter>
        <parameter name="keyval" transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="modifiers" transfer-ownership="none">
          <type name="Gdk.ModifierType" c:type="GdkModifierType"/>
        </parameter>
        <parameter name="is_mnemonic" transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <enumeration name="WindowPosition"
                 glib:type-name="GtkWindowPosition"
                 glib:get-type="gtk_window_position_get_type"
                 c:type="GtkWindowPosition">
      <member name="none"
              value="0"
              c:identifier="GTK_WIN_POS_NONE"
              glib:nick="none"/>
      <member name="center"
              value="1"
              c:identifier="GTK_WIN_POS_CENTER"
              glib:nick="center"/>
      <member name="mouse"
              value="2"
              c:identifier="GTK_WIN_POS_MOUSE"
              glib:nick="mouse"/>
      <member name="center_always"
              value="3"
              c:identifier="GTK_WIN_POS_CENTER_ALWAYS"
              glib:nick="center-always"/>
      <member name="center_on_parent"
              value="4"
              c:identifier="GTK_WIN_POS_CENTER_ON_PARENT"
              glib:nick="center-on-parent"/>
    </enumeration>
    <record name="WindowPrivate" c:type="GtkWindowPrivate" disguised="1">
    </record>
    <enumeration name="WindowType"
                 glib:type-name="GtkWindowType"
                 glib:get-type="gtk_window_type_get_type"
                 c:type="GtkWindowType">
      <member name="toplevel"
              value="0"
              c:identifier="GTK_WINDOW_TOPLEVEL"
              glib:nick="toplevel"/>
      <member name="popup"
              value="1"
              c:identifier="GTK_WINDOW_POPUP"
              glib:nick="popup"/>
    </enumeration>
    <enumeration name="WrapAllocationMode"
                 glib:type-name="GtkWrapAllocationMode"
                 glib:get-type="gtk_wrap_allocation_mode_get_type"
                 c:type="GtkWrapAllocationMode">
      <doc xml:whitespace="preserve">Describes how an #GtkWrapBox positions its children.</doc>
      <member name="free"
              value="0"
              c:identifier="GTK_WRAP_ALLOCATE_FREE"
              glib:nick="free"/>
      <member name="aligned"
              value="1"
              c:identifier="GTK_WRAP_ALLOCATE_ALIGNED"
              glib:nick="aligned"/>
      <member name="homogeneous"
              value="2"
              c:identifier="GTK_WRAP_ALLOCATE_HOMOGENEOUS"
              glib:nick="homogeneous"/>
    </enumeration>
    <class name="WrapBox"
           c:symbol-prefix="wrap_box"
           c:type="GtkWrapBox"
           parent="Container"
           glib:type-name="GtkWrapBox"
           glib:get-type="gtk_wrap_box_get_type"
           glib:type-struct="WrapBoxClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Buildable"/>
      <implements name="Orientable"/>
      <implements name="SizeRequest"/>
      <constructor name="new" c:identifier="gtk_wrap_box_new">
        <doc xml:whitespace="preserve">Creates an #GtkWrapBox.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">A new #GtkWrapBox container</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="mode" transfer-ownership="none">
            <doc xml:whitespace="preserve">The #GtkWrapAllocationMode to use</doc>
            <type name="WrapAllocationMode" c:type="GtkWrapAllocationMode"/>
          </parameter>
          <parameter name="horizontal_spreading" transfer-ownership="none">
            <doc xml:whitespace="preserve">The horizontal #GtkWrapBoxSpreading policy to use</doc>
            <type name="WrapBoxSpreading" c:type="GtkWrapBoxSpreading"/>
          </parameter>
          <parameter name="vertical_spreading" transfer-ownership="none">
            <doc xml:whitespace="preserve">The vertical #GtkWrapBoxSpreading policy to use</doc>
            <type name="WrapBoxSpreading" c:type="GtkWrapBoxSpreading"/>
          </parameter>
          <parameter name="horizontal_spacing" transfer-ownership="none">
            <doc xml:whitespace="preserve">The horizontal spacing to add between children</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="vertical_spacing" transfer-ownership="none">
            <doc xml:whitespace="preserve">The vertical spacing to add between children</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_allocation_mode"
              c:identifier="gtk_wrap_box_get_allocation_mode">
        <doc xml:whitespace="preserve">Gets the allocation mode.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The #GtkWrapAllocationMode for @box.</doc>
          <type name="WrapAllocationMode" c:type="GtkWrapAllocationMode"/>
        </return-value>
      </method>
      <method name="get_horizontal_spacing"
              c:identifier="gtk_wrap_box_get_horizontal_spacing">
        <doc xml:whitespace="preserve">Gets the horizontal spacing.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The horizontal spacing.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
      </method>
      <method name="get_horizontal_spreading"
              c:identifier="gtk_wrap_box_get_horizontal_spreading">
        <doc xml:whitespace="preserve">Gets the horizontal spreading mode.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The horizontal #GtkWrapBoxSpreading for @box.</doc>
          <type name="WrapBoxSpreading" c:type="GtkWrapBoxSpreading"/>
        </return-value>
      </method>
      <method name="get_minimum_line_children"
              c:identifier="gtk_wrap_box_get_minimum_line_children">
        <doc xml:whitespace="preserve">Gets the minimum amount of children per line.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The minimum amount of children per line.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
      </method>
      <method name="get_natural_line_children"
              c:identifier="gtk_wrap_box_get_natural_line_children">
        <doc xml:whitespace="preserve">Gets the natural amount of children per line.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The natural amount of children per line.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
      </method>
      <method name="get_vertical_spacing"
              c:identifier="gtk_wrap_box_get_vertical_spacing">
        <doc xml:whitespace="preserve">Gets the vertical spacing.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The vertical spacing.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
      </method>
      <method name="get_vertical_spreading"
              c:identifier="gtk_wrap_box_get_vertical_spreading">
        <doc xml:whitespace="preserve">Gets the vertical spreading mode.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The vertical #GtkWrapBoxSpreading for @box.</doc>
          <type name="WrapBoxSpreading" c:type="GtkWrapBoxSpreading"/>
        </return-value>
      </method>
      <method name="insert_child" c:identifier="gtk_wrap_box_insert_child">
        <doc xml:whitespace="preserve">Adds a child to an #GtkWrapBox with its packing options set</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="widget" transfer-ownership="none">
            <doc xml:whitespace="preserve">the child #GtkWidget to add</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="index" transfer-ownership="none">
            <doc xml:whitespace="preserve">the position in the child list to insert, specify -1 to append to the list.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="packing" transfer-ownership="none">
            <doc xml:whitespace="preserve">The #GtkWrapBoxPacking options to use.</doc>
            <type name="WrapBoxPacking" c:type="GtkWrapBoxPacking"/>
          </parameter>
        </parameters>
      </method>
      <method name="reorder_child" c:identifier="gtk_wrap_box_reorder_child">
        <doc xml:whitespace="preserve">Reorders the child @widget in @box's list of children.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="widget" transfer-ownership="none">
            <doc xml:whitespace="preserve">The child to reorder</doc>
            <type name="Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="index" transfer-ownership="none">
            <doc xml:whitespace="preserve">The new child position</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_allocation_mode"
              c:identifier="gtk_wrap_box_set_allocation_mode">
        <doc xml:whitespace="preserve">Sets the allocation mode for @box's children.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="mode" transfer-ownership="none">
            <doc xml:whitespace="preserve">The #GtkWrapAllocationMode to use.</doc>
            <type name="WrapAllocationMode" c:type="GtkWrapAllocationMode"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_horizontal_spacing"
              c:identifier="gtk_wrap_box_set_horizontal_spacing">
        <doc xml:whitespace="preserve">Sets the horizontal space to add between children.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="spacing" transfer-ownership="none">
            <doc xml:whitespace="preserve">The spacing to use.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_horizontal_spreading"
              c:identifier="gtk_wrap_box_set_horizontal_spreading">
        <doc xml:whitespace="preserve">Sets the horizontal spreading mode for @box's children.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="spreading" transfer-ownership="none">
            <doc xml:whitespace="preserve">The #GtkWrapBoxSpreading to use.</doc>
            <type name="WrapBoxSpreading" c:type="GtkWrapBoxSpreading"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_minimum_line_children"
              c:identifier="gtk_wrap_box_set_minimum_line_children">
        <doc xml:whitespace="preserve">Sets the minimum amount of children to line up
in @box's orientation before wrapping.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="n_children" transfer-ownership="none">
            <doc xml:whitespace="preserve">The minimum amount of children per line.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_natural_line_children"
              c:identifier="gtk_wrap_box_set_natural_line_children">
        <doc xml:whitespace="preserve">Sets the natural length of items to request and
allocate space for in @box's orientation.
Setting the natural amount of children per line
limits the overall natural size request to be no more
than @n_children items long in the given orientation.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="n_children" transfer-ownership="none">
            <doc xml:whitespace="preserve">The natural amount of children per line.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_vertical_spacing"
              c:identifier="gtk_wrap_box_set_vertical_spacing">
        <doc xml:whitespace="preserve">Sets the vertical space to add between children.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="spacing" transfer-ownership="none">
            <doc xml:whitespace="preserve">The spacing to use.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_vertical_spreading"
              c:identifier="gtk_wrap_box_set_vertical_spreading">
        <doc xml:whitespace="preserve">Sets the vertical spreading mode for @box's children.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="spreading" transfer-ownership="none">
            <doc xml:whitespace="preserve">The #GtkWrapBoxSpreading to use.</doc>
            <type name="WrapBoxSpreading" c:type="GtkWrapBoxSpreading"/>
          </parameter>
        </parameters>
      </method>
      <property name="allocation-mode" writable="1" transfer-ownership="none">
        <doc xml:whitespace="preserve">The #GtkWrapAllocationMode to use.</doc>
        <type name="WrapAllocationMode"/>
      </property>
      <property name="horizontal-spacing"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The amount of horizontal space between two children.</doc>
        <type name="guint"/>
      </property>
      <property name="horizontal-spreading"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The #GtkWrapBoxSpreading to used to define what is done with extra
space in a given orientation.</doc>
        <type name="WrapBoxSpreading"/>
      </property>
      <property name="minimum-line-children"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The minimum number of children to allocate consecutively in the given orientation.
&lt;note&gt;&lt;para&gt;Setting the minimum children per line ensures
that a reasonably small height will be requested
for the overall minimum width of the box.&lt;/para&gt;&lt;/note&gt;</doc>
        <type name="guint"/>
      </property>
      <property name="natural-line-children"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The maximum amount of children to request space for consecutively in the given orientation.</doc>
        <type name="guint"/>
      </property>
      <property name="vertical-spacing" writable="1" transfer-ownership="none">
        <doc xml:whitespace="preserve">The amount of vertical space between two children.</doc>
        <type name="guint"/>
      </property>
      <property name="vertical-spreading"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The #GtkWrapBoxSpreading to used to define what is done with extra
space in a given orientation.</doc>
        <type name="WrapBoxSpreading"/>
      </property>
      <field name="container">
        <type name="Container" c:type="GtkContainer"/>
      </field>
      <field name="priv">
        <type name="WrapBoxPrivate" c:type="GtkWrapBoxPrivate*"/>
      </field>
    </class>
    <record name="WrapBoxClass"
            c:type="GtkWrapBoxClass"
            glib:is-gtype-struct-for="WrapBox">
      <field name="parent_class">
        <type name="ContainerClass" c:type="GtkContainerClass"/>
      </field>
    </record>
    <bitfield name="WrapBoxPacking"
              glib:type-name="GtkWrapBoxPacking"
              glib:get-type="gtk_wrap_box_packing_get_type"
              c:type="GtkWrapBoxPacking">
      <doc xml:whitespace="preserve">Specifies how widgets will expand vertically and
horizontally when placed inside a #GtkWrapBox.</doc>
      <member name="h_expand"
              value="1"
              c:identifier="GTK_WRAP_BOX_H_EXPAND"
              glib:nick="h-expand"/>
      <member name="v_expand"
              value="2"
              c:identifier="GTK_WRAP_BOX_V_EXPAND"
              glib:nick="v-expand"/>
    </bitfield>
    <record name="WrapBoxPrivate" c:type="GtkWrapBoxPrivate" disguised="1">
    </record>
    <enumeration name="WrapBoxSpreading"
                 glib:type-name="GtkWrapBoxSpreading"
                 glib:get-type="gtk_wrap_box_spreading_get_type"
                 c:type="GtkWrapBoxSpreading">
      <doc xml:whitespace="preserve">Describes how a #GtkWrapBox deals with extra space in a given orientation when allocating children.</doc>
      <member name="start"
              value="0"
              c:identifier="GTK_WRAP_BOX_SPREAD_START"
              glib:nick="start"/>
      <member name="end"
              value="1"
              c:identifier="GTK_WRAP_BOX_SPREAD_END"
              glib:nick="end"/>
      <member name="even"
              value="2"
              c:identifier="GTK_WRAP_BOX_SPREAD_EVEN"
              glib:nick="even"/>
      <member name="expand"
              value="3"
              c:identifier="GTK_WRAP_BOX_SPREAD_EXPAND"
              glib:nick="expand"/>
    </enumeration>
    <enumeration name="WrapMode"
                 glib:type-name="GtkWrapMode"
                 glib:get-type="gtk_wrap_mode_get_type"
                 c:type="GtkWrapMode">
      <member name="none"
              value="0"
              c:identifier="GTK_WRAP_NONE"
              glib:nick="none"/>
      <member name="char"
              value="1"
              c:identifier="GTK_WRAP_CHAR"
              glib:nick="char"/>
      <member name="word"
              value="2"
              c:identifier="GTK_WRAP_WORD"
              glib:nick="word"/>
      <member name="word_char"
              value="3"
              c:identifier="GTK_WRAP_WORD_CHAR"
              glib:nick="word-char"/>
    </enumeration>
    <function name="accel_groups_activate"
              c:identifier="gtk_accel_groups_activate">
      <doc xml:whitespace="preserve">Finds the first accelerator in any #GtkAccelGroup attached
to @object that matches @accel_key and @accel_mods, and
activates that accelerator.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">%TRUE if an accelerator was activated and handled this keypress</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="object" transfer-ownership="none">
          <doc xml:whitespace="preserve">the #GObject, usually a #GtkWindow, on which to activate the accelerator.</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </parameter>
        <parameter name="accel_key" transfer-ownership="none">
          <doc xml:whitespace="preserve">accelerator keyval from a key event</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="accel_mods" transfer-ownership="none">
          <doc xml:whitespace="preserve">keyboard state mask from a key event</doc>
          <type name="Gdk.ModifierType" c:type="GdkModifierType"/>
        </parameter>
      </parameters>
    </function>
    <function name="accel_groups_from_object"
              c:identifier="gtk_accel_groups_from_object">
      <doc xml:whitespace="preserve">Gets a list of all accel groups which are attached to @object.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">a list of all accel groups which are attached to @object</doc>
        <type name="GLib.SList" c:type="GSList*">
          <type name="AccelGroup"/>
        </type>
      </return-value>
      <parameters>
        <parameter name="object" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GObject, usually a #GtkWindow</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </parameter>
      </parameters>
    </function>
    <function name="accelerator_get_default_mod_mask"
              c:identifier="gtk_accelerator_get_default_mod_mask">
      <doc xml:whitespace="preserve">Gets the value set by gtk_accelerator_set_default_mod_mask().</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">the default accelerator modifier mask</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
    </function>
    <function name="accelerator_get_label"
              c:identifier="gtk_accelerator_get_label"
              version="2.6">
      <doc xml:whitespace="preserve">Converts an accelerator keyval and modifier mask into a string 
which can be used to represent the accelerator to the user.</doc>
      <return-value transfer-ownership="full">
        <doc xml:whitespace="preserve">a newly-allocated string representing the accelerator.</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="accelerator_key" transfer-ownership="none">
          <doc xml:whitespace="preserve">accelerator keyval</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="accelerator_mods" transfer-ownership="none">
          <doc xml:whitespace="preserve">accelerator modifier mask</doc>
          <type name="Gdk.ModifierType" c:type="GdkModifierType"/>
        </parameter>
      </parameters>
    </function>
    <function name="accelerator_name" c:identifier="gtk_accelerator_name">
      <doc xml:whitespace="preserve">Converts an accelerator keyval and modifier mask
into a string parseable by gtk_accelerator_parse().
For example, if you pass in #GDK_q and #GDK_CONTROL_MASK,
this function returns "&amp;lt;Control&amp;gt;q". 
If you need to display accelerators in the user interface,
see gtk_accelerator_get_label().</doc>
      <return-value transfer-ownership="full">
        <doc xml:whitespace="preserve">a newly-allocated accelerator name</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="accelerator_key" transfer-ownership="none">
          <doc xml:whitespace="preserve">accelerator keyval</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="accelerator_mods" transfer-ownership="none">
          <doc xml:whitespace="preserve">accelerator modifier mask</doc>
          <type name="Gdk.ModifierType" c:type="GdkModifierType"/>
        </parameter>
      </parameters>
    </function>
    <function name="accelerator_parse" c:identifier="gtk_accelerator_parse">
      <doc xml:whitespace="preserve">Parses a string representing an accelerator. The
format looks like "&amp;lt;Control&amp;gt;a" or "&amp;lt;Shift&amp;gt;&amp;lt;Alt&amp;gt;F1" or
"&amp;lt;Release&amp;gt;z" (the last one is for key release).
The parser is fairly liberal and allows lower or upper case,
and also abbreviations such as "&amp;lt;Ctl&amp;gt;" and "&amp;lt;Ctrl&amp;gt;".
Key names are parsed using gdk_keyval_from_name(). For character keys the
name is not the symbol, but the lowercase name, e.g. one would use
"&amp;lt;Ctrl&amp;gt;minus" instead of "&amp;lt;Ctrl&amp;gt;-".
If the parse fails, @accelerator_key and @accelerator_mods will
be set to 0 (zero).</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="accelerator" transfer-ownership="none">
          <doc xml:whitespace="preserve">string representing an accelerator</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="accelerator_key" transfer-ownership="none">
          <doc xml:whitespace="preserve">return location for accelerator keyval</doc>
          <type name="guint" c:type="guint*"/>
        </parameter>
        <parameter name="accelerator_mods" transfer-ownership="none">
          <doc xml:whitespace="preserve">return location for accelerator modifier mask</doc>
          <type name="Gdk.ModifierType" c:type="GdkModifierType*"/>
        </parameter>
      </parameters>
    </function>
    <function name="accelerator_set_default_mod_mask"
              c:identifier="gtk_accelerator_set_default_mod_mask">
      <doc xml:whitespace="preserve">Sets the modifiers that will be considered significant for keyboard
accelerators. The default mod mask is #GDK_CONTROL_MASK |
#GDK_SHIFT_MASK | #GDK_MOD1_MASK | #GDK_SUPER_MASK | 
#GDK_HYPER_MASK | #GDK_META_MASK, that is, Control, Shift, Alt, 
Super, Hyper and Meta. Other modifiers will by default be ignored 
by #GtkAccelGroup.
You must include at least the three modifiers Control, Shift
and Alt in any value you pass to this function.
The default mod mask should be changed on application startup,
before using any accelerator groups.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="default_mod_mask" transfer-ownership="none">
          <doc xml:whitespace="preserve">accelerator modifier mask</doc>
          <type name="Gdk.ModifierType" c:type="GdkModifierType"/>
        </parameter>
      </parameters>
    </function>
    <function name="accelerator_valid" c:identifier="gtk_accelerator_valid">
      <doc xml:whitespace="preserve">Determines whether a given keyval and modifier mask constitute
a valid keyboard accelerator. For example, the #GDK_a keyval
plus #GDK_CONTROL_MASK is valid - this is a "Ctrl+a" accelerator.
But, you can't, for instance, use the #GDK_Control_L keyval
as an accelerator.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">%TRUE if the accelerator is valid</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="keyval" transfer-ownership="none">
          <doc xml:whitespace="preserve">a GDK keyval</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="modifiers" transfer-ownership="none">
          <doc xml:whitespace="preserve">modifier mask</doc>
          <type name="Gdk.ModifierType" c:type="GdkModifierType"/>
        </parameter>
      </parameters>
    </function>
    <function name="alternative_dialog_button_order"
              c:identifier="gtk_alternative_dialog_button_order"
              version="2.6">
      <doc xml:whitespace="preserve">Returns %TRUE if dialogs are expected to use an alternative
button order on the screen @screen. See
gtk_dialog_set_alternative_button_order() for more details
about alternative button order. 
If you need to use this function, you should probably connect
to the ::notify:gtk-alternative-button-order signal on the
#GtkSettings object associated to @screen, in order to be 
notified if the button order setting changes.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">Whether the alternative button order should be used</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="screen" transfer-ownership="none" allow-none="1">
          <doc xml:whitespace="preserve">a #GdkScreen, or %NULL to use the default screen</doc>
          <type name="Gdk.Screen" c:type="GdkScreen*"/>
        </parameter>
      </parameters>
    </function>
    <function name="binding_entry_add_signal"
              c:identifier="gtk_binding_entry_add_signal"
              introspectable="0">
      <doc xml:whitespace="preserve">Override or install a new key binding for @keyval with @modifiers on
emitted on the target widget, with @n_args @Varargs used as
arguments.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="binding_set" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GtkBindingSet to install an entry for</doc>
          <type name="BindingSet" c:type="GtkBindingSet*"/>
        </parameter>
        <parameter name="keyval" transfer-ownership="none">
          <doc xml:whitespace="preserve">key value of binding to install</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="modifiers" transfer-ownership="none">
          <doc xml:whitespace="preserve">key modifier of binding to install</doc>
          <type name="Gdk.ModifierType" c:type="GdkModifierType"/>
        </parameter>
        <parameter name="signal_name" transfer-ownership="none">
          <doc xml:whitespace="preserve">signal to execute upon activation</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="n_args" transfer-ownership="none">
          <doc xml:whitespace="preserve">number of arguments to @signal_name</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter transfer-ownership="none">
          <varargs>
          </varargs>
        </parameter>
      </parameters>
    </function>
    <function name="binding_entry_add_signall"
              c:identifier="gtk_binding_entry_add_signall">
      <doc xml:whitespace="preserve">Override or install a new key binding for @keyval with @modifiers on</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="binding_set" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GtkBindingSet to add a signal to</doc>
          <type name="BindingSet" c:type="GtkBindingSet*"/>
        </parameter>
        <parameter name="keyval" transfer-ownership="none">
          <doc xml:whitespace="preserve">key value</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="modifiers" transfer-ownership="none">
          <doc xml:whitespace="preserve">key modifier</doc>
          <type name="Gdk.ModifierType" c:type="GdkModifierType"/>
        </parameter>
        <parameter name="signal_name" transfer-ownership="none">
          <doc xml:whitespace="preserve">signal name to be bound</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="binding_args" transfer-ownership="none">
          <doc xml:whitespace="preserve">list of #GtkBindingArg signal arguments</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="BindingArg"/>
          </type>
        </parameter>
      </parameters>
    </function>
    <function name="binding_entry_remove"
              c:identifier="gtk_binding_entry_remove">
      <doc xml:whitespace="preserve">Remove a binding previously installed via
gtk_binding_entry_add_signal() on @binding_set.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="binding_set" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GtkBindingSet to remove an entry of</doc>
          <type name="BindingSet" c:type="GtkBindingSet*"/>
        </parameter>
        <parameter name="keyval" transfer-ownership="none">
          <doc xml:whitespace="preserve">key value of binding to remove</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="modifiers" transfer-ownership="none">
          <doc xml:whitespace="preserve">key modifier of binding to remove</doc>
          <type name="Gdk.ModifierType" c:type="GdkModifierType"/>
        </parameter>
      </parameters>
    </function>
    <function name="binding_entry_skip"
              c:identifier="gtk_binding_entry_skip"
              version="2.12">
      <doc xml:whitespace="preserve">Install a binding on @binding_set which causes key lookups
to be aborted, to prevent bindings from lower priority sets
to be activated.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="binding_set" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GtkBindingSet to skip an entry of</doc>
          <type name="BindingSet" c:type="GtkBindingSet*"/>
        </parameter>
        <parameter name="keyval" transfer-ownership="none">
          <doc xml:whitespace="preserve">key value of binding to skip</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="modifiers" transfer-ownership="none">
          <doc xml:whitespace="preserve">key modifier of binding to skip</doc>
          <type name="Gdk.ModifierType" c:type="GdkModifierType"/>
        </parameter>
      </parameters>
    </function>
    <function name="binding_set_by_class"
              c:identifier="gtk_binding_set_by_class"
              introspectable="0">
      <doc xml:whitespace="preserve">This function returns the binding set named after the type name of
the passed in class structure. New binding sets are created on
demand by this function.</doc>
      <return-value>
        <doc xml:whitespace="preserve">the binding set corresponding to @object_class</doc>
        <type name="BindingSet" c:type="GtkBindingSet*"/>
      </return-value>
      <parameters>
        <parameter name="object_class" transfer-ownership="none">
          <doc xml:whitespace="preserve">a valid #GtkObject class</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="binding_set_find"
              c:identifier="gtk_binding_set_find"
              introspectable="0">
      <doc xml:whitespace="preserve">Find a binding set by its globally unique name. The @set_name can
either be a name used for gtk_binding_set_new() or the type name of
a class used in gtk_binding_set_by_class().</doc>
      <return-value>
        <doc xml:whitespace="preserve">%NULL or the specified binding set</doc>
        <type name="BindingSet" c:type="GtkBindingSet*"/>
      </return-value>
      <parameters>
        <parameter name="set_name" transfer-ownership="none">
          <doc xml:whitespace="preserve">unique binding set name</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="binding_set_new"
              c:identifier="gtk_binding_set_new"
              introspectable="0">
      <doc xml:whitespace="preserve">GTK+ maintains a global list of binding sets. Each binding set has
a unique name which needs to be specified upon creation.</doc>
      <return-value>
        <doc xml:whitespace="preserve">new binding set</doc>
        <type name="BindingSet" c:type="GtkBindingSet*"/>
      </return-value>
      <parameters>
        <parameter name="set_name" transfer-ownership="none">
          <doc xml:whitespace="preserve">unique name of this binding set</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="bindings_activate" c:identifier="gtk_bindings_activate">
      <doc xml:whitespace="preserve">Find a key binding matching @keyval and @modifiers and activate the
binding on @object.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">%TRUE if a binding was found and activated</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="object" transfer-ownership="none">
          <doc xml:whitespace="preserve">object to activate when binding found</doc>
          <type name="Object" c:type="GtkObject*"/>
        </parameter>
        <parameter name="keyval" transfer-ownership="none">
          <doc xml:whitespace="preserve">key value of the binding</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="modifiers" transfer-ownership="none">
          <doc xml:whitespace="preserve">key modifier of the binding</doc>
          <type name="Gdk.ModifierType" c:type="GdkModifierType"/>
        </parameter>
      </parameters>
    </function>
    <function name="bindings_activate_event"
              c:identifier="gtk_bindings_activate_event"
              version="2.4">
      <doc xml:whitespace="preserve">Looks up key bindings for @object to find one matching</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">%TRUE if a matching key binding was found</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="object" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GtkObject (generally must be a widget)</doc>
          <type name="Object" c:type="GtkObject*"/>
        </parameter>
        <parameter name="event" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GdkEventKey</doc>
          <type name="Gdk.EventKey" c:type="GdkEventKey*"/>
        </parameter>
      </parameters>
    </function>
    <function name="builder_error_quark"
              c:identifier="gtk_builder_error_quark">
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="check_version" c:identifier="gtk_check_version">
      <doc xml:whitespace="preserve">Checks that the GTK+ library in use is compatible with the
given version. Generally you would pass in the constants
#GTK_MAJOR_VERSION, #GTK_MINOR_VERSION, #GTK_MICRO_VERSION
as the three arguments to this function; that produces
a check that the library in use is compatible with
the version of GTK+ the application or module was compiled
against.
of the running library is newer than the version
the running library must be binary compatible with the
version @required_major.required_minor.@required_micro
(same major version.)
This function is primarily for GTK+ modules; the module
can call this function to check that it wasn't loaded
into an incompatible version of GTK+. However, such a
check isn't completely reliable, since the module may be
linked against an old version of GTK+ and calling the
old version of gtk_check_version(), but still get loaded
into an application using a newer version of GTK+.
given version, or a string describing the version mismatch.
The returned string is owned by GTK+ and should not be modified
or freed.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">%NULL if the GTK+ library is compatible with the</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="required_major" transfer-ownership="none">
          <doc xml:whitespace="preserve">the required major version.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="required_minor" transfer-ownership="none">
          <doc xml:whitespace="preserve">the required minor version.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="required_micro" transfer-ownership="none">
          <doc xml:whitespace="preserve">the required micro version.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="container_class_find_child_property"
              c:identifier="gtk_container_class_find_child_property"
              introspectable="0">
      <doc xml:whitespace="preserve">Finds a child property of a container class by name.</doc>
      <return-value>
        <doc xml:whitespace="preserve">the #GParamSpec of the child property or %NULL if @class has no child property with that name.</doc>
        <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
      </return-value>
      <parameters>
        <parameter name="cclass" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GtkContainerClass</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_name" transfer-ownership="none">
          <doc xml:whitespace="preserve">the name of the child property to find</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="container_class_list_child_properties"
              c:identifier="gtk_container_class_list_child_properties"
              introspectable="0">
      <doc xml:whitespace="preserve">Returns all child properties of a container class.</doc>
      <return-value>
        <doc xml:whitespace="preserve">a newly allocated %NULL-terminated array of #GParamSpec*. The array must be freed with g_free().</doc>
        <type name="GObject.ParamSpec" c:type="GParamSpec**"/>
      </return-value>
      <parameters>
        <parameter name="cclass" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GtkContainerClass</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="n_properties" transfer-ownership="none">
          <doc xml:whitespace="preserve">location to return the number of child properties found</doc>
          <type name="guint" c:type="guint*"/>
        </parameter>
      </parameters>
    </function>
    <function name="device_grab_add"
              c:identifier="gtk_device_grab_add"
              version="3.0">
      <doc xml:whitespace="preserve">Adds a GTK+ grab on @device, so all the events on @device and its
associated pointer or keyboard (if any) are delivered to @widget.
If the @block_others parameter is %TRUE, any other devices will be
unable to interact with @widget during the grab.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="widget" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GtkWidget</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="device" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GtkDevice to grab on.</doc>
          <type name="Gdk.Device" c:type="GdkDevice*"/>
        </parameter>
        <parameter name="block_others" transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE to prevent other devices to interact with @widget.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="device_grab_remove"
              c:identifier="gtk_device_grab_remove"
              version="3.0">
      <doc xml:whitespace="preserve">Removes a device grab from the given widget. You have to pair calls
to gtk_device_grab_add() and gtk_device_grab_remove().</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="widget" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GtkWidget</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="device" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GdkDevice</doc>
          <type name="Gdk.Device" c:type="GdkDevice*"/>
        </parameter>
      </parameters>
    </function>
    <function name="disable_setlocale" c:identifier="gtk_disable_setlocale">
      <doc xml:whitespace="preserve">Prevents gtk_init(), gtk_init_check(), gtk_init_with_args() and
gtk_parse_args() from automatically
calling &lt;literal&gt;setlocale (LC_ALL, "")&lt;/literal&gt;. You would 
want to use this function if you wanted to set the locale for 
your program to something other than the user's locale, or if 
you wanted to set different values for different locale categories.
Most programs should not need to call this function.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="distribute_natural_allocation"
              c:identifier="gtk_distribute_natural_allocation">
      <doc xml:whitespace="preserve">Distributes @extra_space to child @sizes by bringing up smaller
children up to natural size first.
The remaining space will be added to the @minimum_size member of the
GtkRequestedSize struct. If all sizes reach their natural size then
the remaining space is returned.
to @sizes.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">The remainder of @extra_space after redistributing space</doc>
        <type name="gint" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="extra_space" transfer-ownership="none">
          <doc xml:whitespace="preserve">Extra space to redistribute among children after subtracting minimum sizes and any child padding from the overall allocation</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="n_requested_sizes" transfer-ownership="none">
          <doc xml:whitespace="preserve">Number of requests to fit into the allocation</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="sizes" transfer-ownership="none">
          <doc xml:whitespace="preserve">An array of structs with a client pointer and a minimum/natural size in the orientation of the allocation.</doc>
          <type name="RequestedSize" c:type="GtkRequestedSize*"/>
        </parameter>
      </parameters>
    </function>
    <function name="drag_begin"
              c:identifier="gtk_drag_begin"
              introspectable="0">
      <doc xml:whitespace="preserve">Initiates a drag on the source side. The function
only needs to be used when the application is
starting drags itself, and is not needed when
gtk_drag_source_set() is used.
The @event is used to retrieve the timestamp that will be used internally to
grab the pointer.  If @event is #NULL, then GDK_CURRENT_TIME will be used.
However, you should try to pass a real event in all cases, since that can be
used by GTK+ to get information about the start position of the drag, for
example if the @event is a GDK_MOTION_NOTIFY.
Generally there are three cases when you want to start a drag by hand by
calling this function:
1. During a button-press-event handler, if you want to start a drag
immediately when the user presses the mouse button.  Pass the @event
that you have in your button-press-event handler.
2. During a motion-notify-event handler, if you want to start a drag
when the mouse moves past a certain threshold distance after a button-press.
Pass the @event that you have in your motion-notify-event handler.
3. During a timeout handler, if you want to start a drag after the mouse
button is held down for some time.  Try to save the last event that you got
from the mouse, using gdk_event_copy(), and pass it to this function
(remember to free the event with gdk_event_free() when you are done).
If you can really not pass a real event, pass #NULL instead.</doc>
      <return-value>
        <doc xml:whitespace="preserve">the context for this drag.</doc>
        <type name="Gdk.DragContext" c:type="GdkDragContext*"/>
      </return-value>
      <parameters>
        <parameter name="widget" transfer-ownership="none">
          <doc xml:whitespace="preserve">the source widget.</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="targets" transfer-ownership="none">
          <doc xml:whitespace="preserve">The targets (data formats) in which the source can provide the data.</doc>
          <type name="TargetList" c:type="GtkTargetList*"/>
        </parameter>
        <parameter name="actions" transfer-ownership="none">
          <doc xml:whitespace="preserve">A bitmask of the allowed drag actions for this drag.</doc>
          <type name="Gdk.DragAction" c:type="GdkDragAction"/>
        </parameter>
        <parameter name="button" transfer-ownership="none">
          <doc xml:whitespace="preserve">The button the user clicked to start the drag.</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="event" transfer-ownership="none">
          <doc xml:whitespace="preserve">The event that triggered the start of the drag.</doc>
          <type name="Gdk.Event" c:type="GdkEvent*"/>
        </parameter>
      </parameters>
    </function>
    <function name="drag_check_threshold"
              c:identifier="gtk_drag_check_threshold">
      <doc xml:whitespace="preserve">Checks to see if a mouse drag starting at (@start_x, @start_y) and ending
at (@current_x, @current_y) has passed the GTK+ drag threshold, and thus
should trigger the beginning of a drag-and-drop operation.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">%TRUE if the drag threshold has been passed.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="widget" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GtkWidget</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="start_x" transfer-ownership="none">
          <doc xml:whitespace="preserve">X coordinate of start of drag</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="start_y" transfer-ownership="none">
          <doc xml:whitespace="preserve">Y coordinate of start of drag</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="current_x" transfer-ownership="none">
          <doc xml:whitespace="preserve">current X coordinate</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="current_y" transfer-ownership="none">
          <doc xml:whitespace="preserve">current Y coordinate</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="drag_dest_add_image_targets"
              c:identifier="gtk_drag_dest_add_image_targets"
              version="2.6">
      <doc xml:whitespace="preserve">Add the image targets supported by #GtkSelection to
the target list of the drag destination. The targets
are added with @info = 0. If you need another value, 
use gtk_target_list_add_image_targets() and
gtk_drag_dest_set_target_list().</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="widget" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GtkWidget that's a drag destination</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </parameter>
      </parameters>
    </function>
    <function name="drag_dest_add_text_targets"
              c:identifier="gtk_drag_dest_add_text_targets"
              version="2.6">
      <doc xml:whitespace="preserve">Add the text targets supported by #GtkSelection to
the target list of the drag destination. The targets
are added with @info = 0. If you need another value, 
use gtk_target_list_add_text_targets() and
gtk_drag_dest_set_target_list().</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="widget" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GtkWidget that's a drag destination</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </parameter>
      </parameters>
    </function>
    <function name="drag_dest_add_uri_targets"
              c:identifier="gtk_drag_dest_add_uri_targets"
              version="2.6">
      <doc xml:whitespace="preserve">Add the URI targets supported by #GtkSelection to
the target list of the drag destination. The targets
are added with @info = 0. If you need another value, 
use gtk_target_list_add_uri_targets() and
gtk_drag_dest_set_target_list().</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="widget" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GtkWidget that's a drag destination</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </parameter>
      </parameters>
    </function>
    <function name="drag_dest_find_target"
              c:identifier="gtk_drag_dest_find_target"
              introspectable="0">
      <doc xml:whitespace="preserve">Looks for a match between @context-&gt;targets and the
returning %GDK_NONE. @dest_target_list should usually be the return
value from gtk_drag_dest_get_target_list(), but some widgets may
have different valid targets for different parts of the widget; in
that case, they will have to implement a drag_motion handler that
passes the correct target list to this function.</doc>
      <return-value>
        <doc xml:whitespace="preserve">first target that the source offers and the dest can accept, or %GDK_NONE</doc>
        <type name="Gdk.Atom" c:type="GdkAtom"/>
      </return-value>
      <parameters>
        <parameter name="widget" transfer-ownership="none">
          <doc xml:whitespace="preserve">drag destination widget</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="context" transfer-ownership="none">
          <doc xml:whitespace="preserve">drag context</doc>
          <type name="Gdk.DragContext" c:type="GdkDragContext*"/>
        </parameter>
        <parameter name="target_list" transfer-ownership="none" allow-none="1">
          <doc xml:whitespace="preserve">list of droppable targets, or %NULL to use gtk_drag_dest_get_target_list (@widget).</doc>
          <type name="TargetList" c:type="GtkTargetList*"/>
        </parameter>
      </parameters>
    </function>
    <function name="drag_dest_get_target_list"
              c:identifier="gtk_drag_dest_get_target_list">
      <doc xml:whitespace="preserve">Returns the list of targets this widget can accept from
drag-and-drop.</doc>
      <return-value transfer-ownership="full">
        <doc xml:whitespace="preserve">the #GtkTargetList, or %NULL if none</doc>
        <type name="TargetList" c:type="GtkTargetList*"/>
      </return-value>
      <parameters>
        <parameter name="widget" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GtkWidget</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </parameter>
      </parameters>
    </function>
    <function name="drag_dest_get_track_motion"
              c:identifier="gtk_drag_dest_get_track_motion"
              version="2.10">
      <doc xml:whitespace="preserve">Returns whether the widget has been configured to always
emit ::drag-motion signals.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">%TRUE if the widget always emits ::drag-motion events</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="widget" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GtkWidget that's a drag destination</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </parameter>
      </parameters>
    </function>
    <function name="drag_dest_set" c:identifier="gtk_drag_dest_set">
      <doc xml:whitespace="preserve">Sets a widget as a potential drop destination, and adds default behaviors.
The default behaviors listed in @flags have an effect similar
to installing default handlers for the widget's drag-and-drop signals
(#GtkWidget:drag-motion, #GtkWidget:drag-drop, ...). They all exist
for convenience. When passing #GTK_DEST_DEFAULT_ALL for instance it is
sufficient to connect to the widget's #GtkWidget::drag-data-received
signal to get primitive, but consistent drag-and-drop support.
Things become more complicated when you try to preview the dragged data,
as described in the documentation for #GtkWidget:drag-motion. The default
behaviors described by @flags make some assumptions, that can conflict
with your own signal handlers. For instance #GTK_DEST_DEFAULT_DROP causes
invokations of gdk_drag_status() in the context of #GtkWidget:drag-motion,
and invokations of gtk_drag_finish() in #GtkWidget:drag-data-received.
Especially the later is dramatic, when your own #GtkWidget:drag-motion
handler calls gtk_drag_get_data() to inspect the dragged data.
There's no way to set a default action here, you can use the
#GtkWidget:drag-motion callback for that. Here's an example which selects
the action to use depending on whether the control key is pressed or not:
|[
static void
drag_motion (GtkWidget *widget,
GdkDragContext *context,
gint x,
gint y,
guint time)
{
GdkModifierType mask;
gdk_window_get_pointer (gtk_widget_get_window (widget),
NULL, NULL, &amp;mask);
if (mask &amp; GDK_CONTROL_MASK)
gdk_drag_status (context, GDK_ACTION_COPY, time);
else
gdk_drag_status (context, GDK_ACTION_MOVE, time);
}
]|</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="widget" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GtkWidget</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="flags" transfer-ownership="none">
          <doc xml:whitespace="preserve">which types of default drag behavior to use</doc>
          <type name="DestDefaults" c:type="GtkDestDefaults"/>
        </parameter>
        <parameter name="targets" transfer-ownership="none" allow-none="1">
          <doc xml:whitespace="preserve">a pointer to an array of #GtkTargetEntry&lt;!-- --&gt;s indicating the drop types that this @widget will accept, or %NULL. Later you can access the list with gtk_drag_dest_get_target_list() and gtk_drag_dest_find_target().</doc>
          <array length="3" c:type="GtkTargetEntry*">
            <type name="TargetEntry"/>
          </array>
        </parameter>
        <parameter name="n_targets" transfer-ownership="none">
          <doc xml:whitespace="preserve">the number of entries in @targets</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="actions" transfer-ownership="none">
          <doc xml:whitespace="preserve">a bitmask of possible actions for a drop onto this @widget.</doc>
          <type name="Gdk.DragAction" c:type="GdkDragAction"/>
        </parameter>
      </parameters>
    </function>
    <function name="drag_dest_set_proxy"
              c:identifier="gtk_drag_dest_set_proxy">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="widget" transfer-ownership="none">
          <type name="Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="proxy_window" transfer-ownership="none">
          <type name="Gdk.Window" c:type="GdkWindow*"/>
        </parameter>
        <parameter name="protocol" transfer-ownership="none">
          <type name="Gdk.DragProtocol" c:type="GdkDragProtocol"/>
        </parameter>
        <parameter name="use_coordinates" transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="drag_dest_set_target_list"
              c:identifier="gtk_drag_dest_set_target_list">
      <doc xml:whitespace="preserve">Sets the target types that this widget can accept from drag-and-drop.
The widget must first be made into a drag destination with
gtk_drag_dest_set().</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="widget" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GtkWidget that's a drag destination</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="target_list" transfer-ownership="none" allow-none="1">
          <doc xml:whitespace="preserve">list of droppable targets, or %NULL for none</doc>
          <type name="TargetList" c:type="GtkTargetList*"/>
        </parameter>
      </parameters>
    </function>
    <function name="drag_dest_set_track_motion"
              c:identifier="gtk_drag_dest_set_track_motion"
              version="2.10">
      <doc xml:whitespace="preserve">Tells the widget to emit ::drag-motion and ::drag-leave
events regardless of the targets and the %GTK_DEST_DEFAULT_MOTION
flag. 
This may be used when a widget wants to do generic
actions regardless of the targets that the source offers.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="widget" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GtkWidget that's a drag destination</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="track_motion" transfer-ownership="none">
          <doc xml:whitespace="preserve">whether to accept all targets</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="drag_dest_unset" c:identifier="gtk_drag_dest_unset">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="widget" transfer-ownership="none">
          <type name="Widget" c:type="GtkWidget*"/>
        </parameter>
      </parameters>
    </function>
    <function name="drag_finish" c:identifier="gtk_drag_finish">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="context" transfer-ownership="none">
          <type name="Gdk.DragContext" c:type="GdkDragContext*"/>
        </parameter>
        <parameter name="success" transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="del" transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="time_" transfer-ownership="none">
          <type name="guint32" c:type="guint32"/>
        </parameter>
      </parameters>
    </function>
    <function name="drag_get_data" c:identifier="gtk_drag_get_data">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="widget" transfer-ownership="none">
          <type name="Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="context" transfer-ownership="none">
          <type name="Gdk.DragContext" c:type="GdkDragContext*"/>
        </parameter>
        <parameter name="target" transfer-ownership="none">
          <type name="Gdk.Atom" c:type="GdkAtom"/>
        </parameter>
        <parameter name="time_" transfer-ownership="none">
          <type name="guint32" c:type="guint32"/>
        </parameter>
      </parameters>
    </function>
    <function name="drag_get_source_widget"
              c:identifier="gtk_drag_get_source_widget">
      <doc xml:whitespace="preserve">Determines the source widget for a drag.
within a single application, a pointer to the source widget.
Otherwise, %NULL.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">if the drag is occurring</doc>
        <type name="Widget" c:type="GtkWidget*"/>
      </return-value>
      <parameters>
        <parameter name="context" transfer-ownership="none">
          <doc xml:whitespace="preserve">a (destination side) drag context</doc>
          <type name="Gdk.DragContext" c:type="GdkDragContext*"/>
        </parameter>
      </parameters>
    </function>
    <function name="drag_highlight" c:identifier="gtk_drag_highlight">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="widget" transfer-ownership="none">
          <type name="Widget" c:type="GtkWidget*"/>
        </parameter>
      </parameters>
    </function>
    <function name="drag_set_icon_default"
              c:identifier="gtk_drag_set_icon_default">
      <doc xml:whitespace="preserve">Sets the icon for a particular drag to the default
icon.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="context" transfer-ownership="none">
          <doc xml:whitespace="preserve">the context for a drag. (This must be called</doc>
          <type name="Gdk.DragContext" c:type="GdkDragContext*"/>
        </parameter>
      </parameters>
    </function>
    <function name="drag_set_icon_name"
              c:identifier="gtk_drag_set_icon_name"
              version="2.8">
      <doc xml:whitespace="preserve">Sets the icon for a given drag from a named themed icon. See
the docs for #GtkIconTheme for more details. Note that the
size of the icon depends on the icon theme (the icon is
loaded at the symbolic size #GTK_ICON_SIZE_DND), thus</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="context" transfer-ownership="none">
          <doc xml:whitespace="preserve">the context for a drag. (This must be called with a context for the source side of a drag)</doc>
          <type name="Gdk.DragContext" c:type="GdkDragContext*"/>
        </parameter>
        <parameter name="icon_name" transfer-ownership="none">
          <doc xml:whitespace="preserve">name of icon to use</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="hot_x" transfer-ownership="none">
          <doc xml:whitespace="preserve">the X offset of the hotspot within the icon</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="hot_y" transfer-ownership="none">
          <doc xml:whitespace="preserve">the Y offset of the hotspot within the icon</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="drag_set_icon_pixbuf"
              c:identifier="gtk_drag_set_icon_pixbuf">
      <doc xml:whitespace="preserve">Sets @pixbuf as the icon for a given drag.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="context" transfer-ownership="none">
          <doc xml:whitespace="preserve">the context for a drag. (This must be called with a  context for the source side of a drag)</doc>
          <type name="Gdk.DragContext" c:type="GdkDragContext*"/>
        </parameter>
        <parameter name="pixbuf" transfer-ownership="none">
          <doc xml:whitespace="preserve">the #GdkPixbuf to use as the drag icon.</doc>
          <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
        </parameter>
        <parameter name="hot_x" transfer-ownership="none">
          <doc xml:whitespace="preserve">the X offset within @widget of the hotspot.</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="hot_y" transfer-ownership="none">
          <doc xml:whitespace="preserve">the Y offset within @widget of the hotspot.</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="drag_set_icon_pixmap"
              c:identifier="gtk_drag_set_icon_pixmap">
      <doc xml:whitespace="preserve">Sets @pixmap as the icon for a given drag. GTK+ retains
references for the arguments, and will release them when
they are no longer needed. In general, gtk_drag_set_icon_pixbuf()
will be more convenient to use.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="context" transfer-ownership="none">
          <doc xml:whitespace="preserve">the context for a drag. (This must be called with a  context for the source side of a drag)</doc>
          <type name="Gdk.DragContext" c:type="GdkDragContext*"/>
        </parameter>
        <parameter name="colormap" transfer-ownership="none">
          <doc xml:whitespace="preserve">the colormap of the icon</doc>
          <type name="Gdk.Colormap" c:type="GdkColormap*"/>
        </parameter>
        <parameter name="pixmap" transfer-ownership="none">
          <doc xml:whitespace="preserve">the image data for the icon</doc>
          <type name="Gdk.Pixmap" c:type="GdkPixmap*"/>
        </parameter>
        <parameter name="mask" transfer-ownership="none" allow-none="1">
          <doc xml:whitespace="preserve">the transparency mask for the icon or %NULL for none.</doc>
          <type name="Gdk.Bitmap" c:type="GdkBitmap*"/>
        </parameter>
        <parameter name="hot_x" transfer-ownership="none">
          <doc xml:whitespace="preserve">the X offset within @pixmap of the hotspot.</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="hot_y" transfer-ownership="none">
          <doc xml:whitespace="preserve">the Y offset within @pixmap of the hotspot.</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="drag_set_icon_stock"
              c:identifier="gtk_drag_set_icon_stock">
      <doc xml:whitespace="preserve">Sets the icon for a given drag from a stock ID.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="context" transfer-ownership="none">
          <doc xml:whitespace="preserve">the context for a drag. (This must be called with a  context for the source side of a drag)</doc>
          <type name="Gdk.DragContext" c:type="GdkDragContext*"/>
        </parameter>
        <parameter name="stock_id" transfer-ownership="none">
          <doc xml:whitespace="preserve">the ID of the stock icon to use for the drag.</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="hot_x" transfer-ownership="none">
          <doc xml:whitespace="preserve">the X offset within the icon of the hotspot.</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="hot_y" transfer-ownership="none">
          <doc xml:whitespace="preserve">the Y offset within the icon of the hotspot.</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="drag_set_icon_widget"
              c:identifier="gtk_drag_set_icon_widget">
      <doc xml:whitespace="preserve">Changes the icon for a widget to a given widget. GTK+
will not destroy the icon, so if you don't want
it to persist, you should connect to the "drag-end" 
signal and destroy it yourself.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="context" transfer-ownership="none">
          <doc xml:whitespace="preserve">the context for a drag. (This must be called</doc>
          <type name="Gdk.DragContext" c:type="GdkDragContext*"/>
        </parameter>
        <parameter name="widget" transfer-ownership="none">
          <doc xml:whitespace="preserve">a toplevel window to use as an icon.</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="hot_x" transfer-ownership="none">
          <doc xml:whitespace="preserve">the X offset within @widget of the hotspot.</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="hot_y" transfer-ownership="none">
          <doc xml:whitespace="preserve">the Y offset within @widget of the hotspot.</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="drag_source_add_image_targets"
              c:identifier="gtk_drag_source_add_image_targets"
              version="2.6">
      <doc xml:whitespace="preserve">Add the writable image targets supported by #GtkSelection to
the target list of the drag source. The targets
are added with @info = 0. If you need another value, 
use gtk_target_list_add_image_targets() and
gtk_drag_source_set_target_list().</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="widget" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GtkWidget that's is a drag source</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </parameter>
      </parameters>
    </function>
    <function name="drag_source_add_text_targets"
              c:identifier="gtk_drag_source_add_text_targets"
              version="2.6">
      <doc xml:whitespace="preserve">Add the text targets supported by #GtkSelection to
the target list of the drag source.  The targets
are added with @info = 0. If you need another value, 
use gtk_target_list_add_text_targets() and
gtk_drag_source_set_target_list().</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="widget" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GtkWidget that's is a drag source</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </parameter>
      </parameters>
    </function>
    <function name="drag_source_add_uri_targets"
              c:identifier="gtk_drag_source_add_uri_targets"
              version="2.6">
      <doc xml:whitespace="preserve">Add the URI targets supported by #GtkSelection to
the target list of the drag source.  The targets
are added with @info = 0. If you need another value, 
use gtk_target_list_add_uri_targets() and
gtk_drag_source_set_target_list().</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="widget" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GtkWidget that's is a drag source</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </parameter>
      </parameters>
    </function>
    <function name="drag_source_get_target_list"
              c:identifier="gtk_drag_source_get_target_list"
              version="2.4">
      <doc xml:whitespace="preserve">Gets the list of targets this widget can provide for
drag-and-drop.</doc>
      <return-value transfer-ownership="full">
        <doc xml:whitespace="preserve">the #GtkTargetList, or %NULL if none</doc>
        <type name="TargetList" c:type="GtkTargetList*"/>
      </return-value>
      <parameters>
        <parameter name="widget" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GtkWidget</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </parameter>
      </parameters>
    </function>
    <function name="drag_source_set" c:identifier="gtk_drag_source_set">
      <doc xml:whitespace="preserve">Sets up a widget so that GTK+ will start a drag operation when the user
clicks and drags on the widget. The widget must have a window.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="widget" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GtkWidget</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="start_button_mask" transfer-ownership="none">
          <doc xml:whitespace="preserve">the bitmask of buttons that can start the drag</doc>
          <type name="Gdk.ModifierType" c:type="GdkModifierType"/>
        </parameter>
        <parameter name="targets" transfer-ownership="none" allow-none="1">
          <doc xml:whitespace="preserve">the table of targets that the drag will support, may be %NULL</doc>
          <array length="3" c:type="GtkTargetEntry*">
            <type name="TargetEntry"/>
          </array>
        </parameter>
        <parameter name="n_targets" transfer-ownership="none">
          <doc xml:whitespace="preserve">the number of items in @targets</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="actions" transfer-ownership="none">
          <doc xml:whitespace="preserve">the bitmask of possible actions for a drag from this widget</doc>
          <type name="Gdk.DragAction" c:type="GdkDragAction"/>
        </parameter>
      </parameters>
    </function>
    <function name="drag_source_set_icon"
              c:identifier="gtk_drag_source_set_icon">
      <doc xml:whitespace="preserve">Sets the icon that will be used for drags from a particular widget
from a pixmap/mask. GTK+ retains references for the arguments, and
will release them when they are no longer needed.
Use gtk_drag_source_set_icon_pixbuf() instead.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="widget" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GtkWidget</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="colormap" transfer-ownership="none">
          <doc xml:whitespace="preserve">the colormap of the icon</doc>
          <type name="Gdk.Colormap" c:type="GdkColormap*"/>
        </parameter>
        <parameter name="pixmap" transfer-ownership="none">
          <doc xml:whitespace="preserve">the image data for the icon</doc>
          <type name="Gdk.Pixmap" c:type="GdkPixmap*"/>
        </parameter>
        <parameter name="mask" transfer-ownership="none" allow-none="1">
          <doc xml:whitespace="preserve">the transparency mask for an image.</doc>
          <type name="Gdk.Bitmap" c:type="GdkBitmap*"/>
        </parameter>
      </parameters>
    </function>
    <function name="drag_source_set_icon_name"
              c:identifier="gtk_drag_source_set_icon_name"
              version="2.8">
      <doc xml:whitespace="preserve">Sets the icon that will be used for drags from a particular source
to a themed icon. See the docs for #GtkIconTheme for more details.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="widget" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GtkWidget</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="icon_name" transfer-ownership="none">
          <doc xml:whitespace="preserve">name of icon to use</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="drag_source_set_icon_pixbuf"
              c:identifier="gtk_drag_source_set_icon_pixbuf">
      <doc xml:whitespace="preserve">Sets the icon that will be used for drags from a particular widget
from a #GdkPixbuf. GTK+ retains a reference for @pixbuf and will 
release it when it is no longer needed.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="widget" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GtkWidget</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="pixbuf" transfer-ownership="none">
          <doc xml:whitespace="preserve">the #GdkPixbuf for the drag icon</doc>
          <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
        </parameter>
      </parameters>
    </function>
    <function name="drag_source_set_icon_stock"
              c:identifier="gtk_drag_source_set_icon_stock">
      <doc xml:whitespace="preserve">Sets the icon that will be used for drags from a particular source
to a stock icon.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="widget" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GtkWidget</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="stock_id" transfer-ownership="none">
          <doc xml:whitespace="preserve">the ID of the stock icon to use</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="drag_source_set_target_list"
              c:identifier="gtk_drag_source_set_target_list"
              version="2.4">
      <doc xml:whitespace="preserve">Changes the target types that this widget offers for drag-and-drop.
The widget must first be made into a drag source with
gtk_drag_source_set().</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="widget" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GtkWidget that's a drag source</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="target_list" transfer-ownership="none" allow-none="1">
          <doc xml:whitespace="preserve">list of draggable targets, or %NULL for none</doc>
          <type name="TargetList" c:type="GtkTargetList*"/>
        </parameter>
      </parameters>
    </function>
    <function name="drag_source_unset" c:identifier="gtk_drag_source_unset">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="widget" transfer-ownership="none">
          <type name="Widget" c:type="GtkWidget*"/>
        </parameter>
      </parameters>
    </function>
    <function name="drag_unhighlight" c:identifier="gtk_drag_unhighlight">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="widget" transfer-ownership="none">
          <type name="Widget" c:type="GtkWidget*"/>
        </parameter>
      </parameters>
    </function>
    <function name="draw_insertion_cursor"
              c:identifier="gtk_draw_insertion_cursor"
              version="2.4">
      <doc xml:whitespace="preserve">Draws a text caret on @drawable at @location. This is not a style function
but merely a convenience function for drawing the standard cursor shape.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="widget" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GtkWidget</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="drawable" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GdkDrawable</doc>
          <type name="Gdk.Drawable" c:type="GdkDrawable*"/>
        </parameter>
        <parameter name="area" transfer-ownership="none" allow-none="1">
          <doc xml:whitespace="preserve">rectangle to which the output is clipped, or %NULL if the output should not be clipped</doc>
          <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
        </parameter>
        <parameter name="location" transfer-ownership="none">
          <doc xml:whitespace="preserve">location where to draw the cursor (@location-&gt;width is ignored)</doc>
          <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
        </parameter>
        <parameter name="is_primary" transfer-ownership="none">
          <doc xml:whitespace="preserve">if the cursor should be the primary cursor color.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="direction" transfer-ownership="none">
          <doc xml:whitespace="preserve">whether the cursor is left-to-right or right-to-left. Should never be #GTK_TEXT_DIR_NONE</doc>
          <type name="TextDirection" c:type="GtkTextDirection"/>
        </parameter>
        <parameter name="draw_arrow" transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE to draw a directional arrow on the cursor. Should be %FALSE unless the cursor is split.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="events_pending" c:identifier="gtk_events_pending">
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
    </function>
    <function name="false" c:identifier="gtk_false">
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
    </function>
    <function name="file_chooser_error_quark"
              c:identifier="gtk_file_chooser_error_quark"
              version="2.4">
      <doc xml:whitespace="preserve">Registers an error quark for #GtkFileChooser if necessary.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">The error quark used for #GtkFileChooser errors.</doc>
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="get_binary_age"
              c:identifier="gtk_get_binary_age"
              version="3.0">
      <doc xml:whitespace="preserve">Returns the binary age as passed to
&lt;application&gt;libtool&lt;/application&gt; when building the GTK+ library
the process is running against. If
&lt;application&gt;libtool&lt;/application&gt; means nothing to you, don't
worry about it.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">the binary age of the GTK+ library.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
    </function>
    <function name="get_current_event" c:identifier="gtk_get_current_event">
      <doc xml:whitespace="preserve">Obtains a copy of the event currently being processed by GTK+.  For
example, if you get a "clicked" signal from #GtkButton, the current
event will be the #GdkEventButton that triggered the "clicked"
signal. The returned event must be freed with gdk_event_free().
If there is no current event, the function returns %NULL.</doc>
      <return-value transfer-ownership="full">
        <doc xml:whitespace="preserve">a copy of the current event, or %NULL if no current event.</doc>
        <type name="Gdk.Event" c:type="GdkEvent*"/>
      </return-value>
    </function>
    <function name="get_current_event_device"
              c:identifier="gtk_get_current_event_device">
      <doc xml:whitespace="preserve">If there is a current event and it has a device, return that
device, otherwise return %NULL.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">a #GdkDevice, or %NULL</doc>
        <type name="Gdk.Device" c:type="GdkDevice*"/>
      </return-value>
    </function>
    <function name="get_current_event_state"
              c:identifier="gtk_get_current_event_state">
      <doc xml:whitespace="preserve">If there is a current event and it has a state field, place
that state field in @state and return %TRUE, otherwise return
%FALSE.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">%TRUE if there was a current event and it had a state field</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="state" transfer-ownership="none">
          <doc xml:whitespace="preserve">a location to store the state of the current event</doc>
          <type name="Gdk.ModifierType" c:type="GdkModifierType*"/>
        </parameter>
      </parameters>
    </function>
    <function name="get_current_event_time"
              c:identifier="gtk_get_current_event_time">
      <doc xml:whitespace="preserve">If there is a current event and it has a timestamp, return that
timestamp, otherwise return %GDK_CURRENT_TIME.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">the timestamp from the current event, or %GDK_CURRENT_TIME.</doc>
        <type name="guint32" c:type="guint32"/>
      </return-value>
    </function>
    <function name="get_debug_flags" c:identifier="gtk_get_debug_flags">
      <doc xml:whitespace="preserve">Returns the GTK+ debug flags setting.</doc>
      <return-value transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </return-value>
    </function>
    <function name="get_default_language"
              c:identifier="gtk_get_default_language">
      <doc xml:whitespace="preserve">Returns the #PangoLanguage for the default language currently in
effect. (Note that this can change over the life of an
application.)  The default language is derived from the current
locale. It determines, for example, whether GTK+ uses the
right-to-left or left-to-right text direction.
This function is equivalent to pango_language_get_default().  See
that function for details.
freed</doc>
      <return-value transfer-ownership="full">
        <doc xml:whitespace="preserve">the default language as a #PangoLanguage, must not be</doc>
        <type name="Pango.Language" c:type="PangoLanguage*"/>
      </return-value>
    </function>
    <function name="get_event_widget" c:identifier="gtk_get_event_widget">
      <doc xml:whitespace="preserve">If @event is %NULL or the event was not associated with any widget,
returns %NULL, otherwise returns the widget that received the event
originally.
received @event, or %NULL</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">the widget that originally</doc>
        <type name="Widget" c:type="GtkWidget*"/>
      </return-value>
      <parameters>
        <parameter name="event" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GdkEvent</doc>
          <type name="Gdk.Event" c:type="GdkEvent*"/>
        </parameter>
      </parameters>
    </function>
    <function name="get_interface_age"
              c:identifier="gtk_get_interface_age"
              version="3.0">
      <doc xml:whitespace="preserve">Returns the interface age as passed to
&lt;application&gt;libtool&lt;/application&gt; when building the GTK+ library
the process is running against. If
&lt;application&gt;libtool&lt;/application&gt; means nothing to you, don't
worry about it.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">the interface age of the GTK+ library.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
    </function>
    <function name="get_major_version"
              c:identifier="gtk_get_major_version"
              version="3.0">
      <doc xml:whitespace="preserve">Returns the major version number of the GTK+ library.  (e.g. in GTK+ version
3.1.5 this is 3.) 
This function is in the library, so it represents the GTK+ library
your code is running against. Contrast with the #GTK_MAJOR_VERSION
macro, which represents the major version of the GTK+ headers you
have included when compiling your code.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">the major version number of the GTK+ library.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
    </function>
    <function name="get_micro_version"
              c:identifier="gtk_get_micro_version"
              version="3.0">
      <doc xml:whitespace="preserve">Returns the micro version number of the GTK+ library.  (e.g. in GTK+ version
3.1.5 this is 5.) 
This function is in the library, so it represents the GTK+ library
your code is are running against. Contrast with the
#GTK_MICRO_VERSION macro, which represents the micro version of the
GTK+ headers you have included when compiling your code.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">the micro version number of the GTK+ library.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
    </function>
    <function name="get_minor_version"
              c:identifier="gtk_get_minor_version"
              version="3.0">
      <doc xml:whitespace="preserve">Returns the minor version number of the GTK+ library.  (e.g. in GTK+ version
3.1.5 this is 1.) 
This function is in the library, so it represents the GTK+ library
your code is are running against. Contrast with the
#GTK_MINOR_VERSION macro, which represents the minor version of the
GTK+ headers you have included when compiling your code.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">the minor version number of the GTK+ library.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
    </function>
    <function name="get_option_group"
              c:identifier="gtk_get_option_group"
              version="2.6"
              introspectable="0">
      <doc xml:whitespace="preserve">Returns a #GOptionGroup for the commandline arguments recognized
by GTK+ and GDK. You should add this group to your #GOptionContext 
with g_option_context_add_group(), if you are using 
g_option_context_parse() to parse your commandline arguments.
by GTK+</doc>
      <return-value>
        <doc xml:whitespace="preserve">a #GOptionGroup for the commandline arguments recognized</doc>
        <type name="GLib.OptionGroup" c:type="GOptionGroup*"/>
      </return-value>
      <parameters>
        <parameter name="open_default_display" transfer-ownership="none">
          <doc xml:whitespace="preserve">whether to open the default display when parsing the commandline arguments</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="grab_add" c:identifier="gtk_grab_add">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="widget" transfer-ownership="none">
          <type name="Widget" c:type="GtkWidget*"/>
        </parameter>
      </parameters>
    </function>
    <function name="grab_get_current" c:identifier="gtk_grab_get_current">
      <doc xml:whitespace="preserve">Queries the current grab of the default window group.
has the grab or %NULL if no grab is active</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">The widget which currently</doc>
        <type name="Widget" c:type="GtkWidget*"/>
      </return-value>
    </function>
    <function name="grab_remove" c:identifier="gtk_grab_remove">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="widget" transfer-ownership="none">
          <type name="Widget" c:type="GtkWidget*"/>
        </parameter>
      </parameters>
    </function>
    <function name="icon_size_from_name"
              c:identifier="gtk_icon_size_from_name">
      <doc xml:whitespace="preserve">Looks up the icon size associated with @name.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">the icon size</doc>
        <type name="gint"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:whitespace="preserve">the name to look up.</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="icon_size_get_name" c:identifier="gtk_icon_size_get_name">
      <doc xml:whitespace="preserve">Gets the canonical name of the given icon size. The returned string
is statically allocated and should not be freed.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">the name of the given icon size.</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="size" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GtkIconSize.</doc>
          <type name="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="icon_size_lookup" c:identifier="gtk_icon_size_lookup">
      <doc xml:whitespace="preserve">Obtains the pixel size of a semantic icon size, possibly
modified by user preferences for the default #GtkSettings.
(See gtk_icon_size_lookup_for_settings().)
Normally @size would be
#GTK_ICON_SIZE_MENU, #GTK_ICON_SIZE_BUTTON, etc.  This function
isn't normally needed, gtk_widget_render_icon() is the usual
way to get an icon for rendering, then just look at the size of
the rendered pixbuf. The rendered pixbuf may not even correspond to
the width/height returned by gtk_icon_size_lookup(), because themes
are free to render the pixbuf however they like, including changing
the usual size.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">%TRUE if @size was a valid size</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="size" transfer-ownership="none">
          <doc xml:whitespace="preserve">an icon size</doc>
          <type name="gint"/>
        </parameter>
        <parameter name="width" transfer-ownership="none">
          <doc xml:whitespace="preserve">location to store icon width</doc>
          <type name="gint" c:type="gint*"/>
        </parameter>
        <parameter name="height" transfer-ownership="none">
          <doc xml:whitespace="preserve">location to store icon height</doc>
          <type name="gint" c:type="gint*"/>
        </parameter>
      </parameters>
    </function>
    <function name="icon_size_lookup_for_settings"
              c:identifier="gtk_icon_size_lookup_for_settings"
              version="2.2">
      <doc xml:whitespace="preserve">Obtains the pixel size of a semantic icon size, possibly
modified by user preferences for a particular
#GtkSettings. Normally @size would be
#GTK_ICON_SIZE_MENU, #GTK_ICON_SIZE_BUTTON, etc.  This function
isn't normally needed, gtk_widget_render_icon() is the usual
way to get an icon for rendering, then just look at the size of
the rendered pixbuf. The rendered pixbuf may not even correspond to
the width/height returned by gtk_icon_size_lookup(), because themes
are free to render the pixbuf however they like, including changing
the usual size.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">%TRUE if @size was a valid size</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="settings" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GtkSettings object, used to determine which set of user preferences to used.</doc>
          <type name="Settings" c:type="GtkSettings*"/>
        </parameter>
        <parameter name="size" transfer-ownership="none">
          <doc xml:whitespace="preserve">an icon size</doc>
          <type name="gint"/>
        </parameter>
        <parameter name="width" transfer-ownership="none">
          <doc xml:whitespace="preserve">location to store icon width</doc>
          <type name="gint" c:type="gint*"/>
        </parameter>
        <parameter name="height" transfer-ownership="none">
          <doc xml:whitespace="preserve">location to store icon height</doc>
          <type name="gint" c:type="gint*"/>
        </parameter>
      </parameters>
    </function>
    <function name="icon_size_register" c:identifier="gtk_icon_size_register">
      <doc xml:whitespace="preserve">Registers a new icon size, along the same lines as #GTK_ICON_SIZE_MENU,
etc. Returns the integer value for the size.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">integer value representing the size</doc>
        <type name="gint"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:whitespace="preserve">name of the icon size</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="width" transfer-ownership="none">
          <doc xml:whitespace="preserve">the icon width</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="height" transfer-ownership="none">
          <doc xml:whitespace="preserve">the icon height</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="icon_size_register_alias"
              c:identifier="gtk_icon_size_register_alias">
      <doc xml:whitespace="preserve">Registers @alias as another name for @target.
So calling gtk_icon_size_from_name() with @alias as argument
will return @target.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="alias" transfer-ownership="none">
          <doc xml:whitespace="preserve">an alias for @target</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="target" transfer-ownership="none">
          <doc xml:whitespace="preserve">an existing icon size</doc>
          <type name="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="icon_theme_error_quark"
              c:identifier="gtk_icon_theme_error_quark">
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="identifier_get_type"
              c:identifier="gtk_identifier_get_type">
      <return-value transfer-ownership="none">
        <type name="GType" c:type="GType"/>
      </return-value>
    </function>
    <function name="init" c:identifier="gtk_init">
      <doc xml:whitespace="preserve">Call this function before using any other GTK+ functions in your GUI
applications.  It will initialize everything needed to operate the
toolkit and parses some standard command line options. @argc and 
never see those standard arguments. 
if you are calling gtk_parse_args(), gtk_init_check(), 
gtk_init_with_args() or g_option_context_parse() with 
the option group returned by gtk_get_option_group(), you 
&lt;emphasis&gt;don't&lt;/emphasis&gt; have to call gtk_init().
&lt;note&gt;&lt;para&gt;
This function will terminate your program if it was unable to initialize 
the GUI for some reason. If you want your program to fall back to a 
textual interface you want to call gtk_init_check() instead.
&lt;/para&gt;&lt;/note&gt;
&lt;note&gt;&lt;para&gt;
Since 2.18, GTK+ calls &lt;literal&gt;signal (SIGPIPE, SIG_IGN)&lt;/literal&gt;
during initialization, to ignore SIGPIPE signals, since these are
almost never wanted in graphical applications. If you do need to
handle SIGPIPE for some reason, reset the handler after gtk_init(),
but notice that other libraries (e.g. libdbus or gvfs) might do
similar things.
&lt;/para&gt;&lt;/note&gt;</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="argc"
                   direction="inout"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:whitespace="preserve">Address of the &lt;parameter&gt;argc&lt;/parameter&gt; parameter of your main() function. Changed if any arguments were handled.</doc>
          <type name="gint" c:type="int*"/>
        </parameter>
        <parameter name="argv"
                   direction="inout"
                   caller-allocates="0"
                   transfer-ownership="full"
                   allow-none="1">
          <doc xml:whitespace="preserve">Address of the &lt;parameter&gt;argv&lt;/parameter&gt; parameter of main(). Any parameters understood by gtk_init() are stripped before return.</doc>
          <array length="0" c:type="char***">
            <type name="utf8"/>
          </array>
        </parameter>
      </parameters>
    </function>
    <function name="init_add" c:identifier="gtk_init_add" introspectable="0">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="function" transfer-ownership="none" closure="1">
          <type name="Function" c:type="GtkFunction"/>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="init_check" c:identifier="gtk_init_check">
      <doc xml:whitespace="preserve">This function does the same work as gtk_init() with only
initialized. Instead it returns %FALSE on failure.
This way the application can fall back to some other means of communication 
with the user - for example a curses or command line interface.
%FALSE otherwise.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">%TRUE if the GUI has been successfully initialized,</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="argc"
                   direction="inout"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:whitespace="preserve">Address of the &lt;parameter&gt;argc&lt;/parameter&gt; parameter of your main() function. Changed if any arguments were handled.</doc>
          <type name="gint" c:type="int*"/>
        </parameter>
        <parameter name="argv"
                   direction="inout"
                   caller-allocates="0"
                   transfer-ownership="full"
                   allow-none="1">
          <doc xml:whitespace="preserve">Address of the &lt;parameter&gt;argv&lt;/parameter&gt; parameter of main(). Any parameters understood by gtk_init() are stripped before return.</doc>
          <array length="0" c:type="char***">
            <type name="utf8"/>
          </array>
        </parameter>
      </parameters>
    </function>
    <function name="init_with_args"
              c:identifier="gtk_init_with_args"
              version="2.6"
              throws="1">
      <doc xml:whitespace="preserve">This function does the same work as gtk_init_check().
Additionally, it allows you to add your own commandline options,
and it automatically generates nicely formatted
&lt;option&gt;--help&lt;/option&gt; output. Note that your program will
be terminated after writing out the help output.
%FALSE otherwise.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">%TRUE if the GUI has been successfully initialized,</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="argc" transfer-ownership="none">
          <doc xml:whitespace="preserve">a pointer to the number of command line arguments.</doc>
          <type name="gint" c:type="gint*"/>
        </parameter>
        <parameter name="argv" transfer-ownership="none">
          <doc xml:whitespace="preserve">a pointer to the array of command line arguments.</doc>
          <type name="utf8" c:type="gchar***"/>
        </parameter>
        <parameter name="parameter_string" transfer-ownership="none">
          <doc xml:whitespace="preserve">a string which is displayed in the first line of &lt;option&gt;--help&lt;/option&gt; output, after &lt;literal&gt;&lt;replaceable&gt;programname&lt;/replaceable&gt; [OPTION...]&lt;/literal&gt;</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="entries" transfer-ownership="none">
          <doc xml:whitespace="preserve">a %NULL-terminated array of #GOptionEntry&lt;!-- --&gt;s describing the options of your program</doc>
          <type name="GLib.OptionEntry" c:type="GOptionEntry*"/>
        </parameter>
        <parameter name="translation_domain" transfer-ownership="none">
          <doc xml:whitespace="preserve">a translation domain to use for translating the &lt;option&gt;--help&lt;/option&gt; output for the options in @entries and the @parameter_string with gettext(), or %NULL</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="key_snooper_install"
              c:identifier="gtk_key_snooper_install"
              introspectable="0">
      <return-value transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="snooper" transfer-ownership="none" closure="1">
          <type name="KeySnoopFunc" c:type="GtkKeySnoopFunc"/>
        </parameter>
        <parameter name="func_data" transfer-ownership="none">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="key_snooper_remove" c:identifier="gtk_key_snooper_remove">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="snooper_handler_id" transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="main" c:identifier="gtk_main">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="main_do_event" c:identifier="gtk_main_do_event">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="event" transfer-ownership="none">
          <type name="Gdk.Event" c:type="GdkEvent*"/>
        </parameter>
      </parameters>
    </function>
    <function name="main_iteration" c:identifier="gtk_main_iteration">
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
    </function>
    <function name="main_iteration_do" c:identifier="gtk_main_iteration_do">
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="blocking" transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="main_level" c:identifier="gtk_main_level">
      <return-value transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </return-value>
    </function>
    <function name="main_quit" c:identifier="gtk_main_quit">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="paint_arrow" c:identifier="gtk_paint_arrow">
      <doc xml:whitespace="preserve">Draws an arrow in the given rectangle on @window using the given 
parameters. @arrow_type determines the direction of the arrow.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="style" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GtkStyle</doc>
          <type name="Style" c:type="GtkStyle*"/>
        </parameter>
        <parameter name="window" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GdkWindow</doc>
          <type name="Gdk.Window" c:type="GdkWindow*"/>
        </parameter>
        <parameter name="state_type" transfer-ownership="none">
          <doc xml:whitespace="preserve">a state</doc>
          <type name="StateType" c:type="GtkStateType"/>
        </parameter>
        <parameter name="shadow_type" transfer-ownership="none">
          <doc xml:whitespace="preserve">the type of shadow to draw</doc>
          <type name="ShadowType" c:type="GtkShadowType"/>
        </parameter>
        <parameter name="area" transfer-ownership="none" allow-none="1">
          <doc xml:whitespace="preserve">clip rectangle, or %NULL if the output should not be clipped</doc>
          <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
        </parameter>
        <parameter name="widget" transfer-ownership="none" allow-none="1">
          <doc xml:whitespace="preserve">the widget</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="detail" transfer-ownership="none" allow-none="1">
          <doc xml:whitespace="preserve">a style detail</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="arrow_type" transfer-ownership="none">
          <doc xml:whitespace="preserve">the type of arrow to draw</doc>
          <type name="ArrowType" c:type="GtkArrowType"/>
        </parameter>
        <parameter name="fill" transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the arrow tip should be filled</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="x" transfer-ownership="none">
          <doc xml:whitespace="preserve">x origin of the rectangle to draw the arrow in</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="y" transfer-ownership="none">
          <doc xml:whitespace="preserve">y origin of the rectangle to draw the arrow in</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="width" transfer-ownership="none">
          <doc xml:whitespace="preserve">width of the rectangle to draw the arrow in</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="height" transfer-ownership="none">
          <doc xml:whitespace="preserve">height of the rectangle to draw the arrow in</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="paint_box" c:identifier="gtk_paint_box">
      <doc xml:whitespace="preserve">Draws a box on @window with the given parameters.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="style" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GtkStyle</doc>
          <type name="Style" c:type="GtkStyle*"/>
        </parameter>
        <parameter name="window" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GdkWindow</doc>
          <type name="Gdk.Window" c:type="GdkWindow*"/>
        </parameter>
        <parameter name="state_type" transfer-ownership="none">
          <doc xml:whitespace="preserve">a state</doc>
          <type name="StateType" c:type="GtkStateType"/>
        </parameter>
        <parameter name="shadow_type" transfer-ownership="none">
          <doc xml:whitespace="preserve">the type of shadow to draw</doc>
          <type name="ShadowType" c:type="GtkShadowType"/>
        </parameter>
        <parameter name="area" transfer-ownership="none" allow-none="1">
          <doc xml:whitespace="preserve">clip rectangle, or %NULL if the output should not be clipped</doc>
          <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
        </parameter>
        <parameter name="widget" transfer-ownership="none" allow-none="1">
          <doc xml:whitespace="preserve">the widget</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="detail" transfer-ownership="none" allow-none="1">
          <doc xml:whitespace="preserve">a style detail</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="x" transfer-ownership="none">
          <doc xml:whitespace="preserve">x origin of the box</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="y" transfer-ownership="none">
          <doc xml:whitespace="preserve">y origin of the box</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="width" transfer-ownership="none">
          <doc xml:whitespace="preserve">the width of the box</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="height" transfer-ownership="none">
          <doc xml:whitespace="preserve">the height of the box</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="paint_box_gap" c:identifier="gtk_paint_box_gap">
      <doc xml:whitespace="preserve">Draws a box in @window using the given style and state and shadow type, 
leaving a gap in one side.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="style" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GtkStyle</doc>
          <type name="Style" c:type="GtkStyle*"/>
        </parameter>
        <parameter name="window" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GdkWindow</doc>
          <type name="Gdk.Window" c:type="GdkWindow*"/>
        </parameter>
        <parameter name="state_type" transfer-ownership="none">
          <doc xml:whitespace="preserve">a state</doc>
          <type name="StateType" c:type="GtkStateType"/>
        </parameter>
        <parameter name="shadow_type" transfer-ownership="none">
          <doc xml:whitespace="preserve">type of shadow to draw</doc>
          <type name="ShadowType" c:type="GtkShadowType"/>
        </parameter>
        <parameter name="area" transfer-ownership="none" allow-none="1">
          <doc xml:whitespace="preserve">clip rectangle, or %NULL if the output should not be clipped</doc>
          <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
        </parameter>
        <parameter name="widget" transfer-ownership="none" allow-none="1">
          <doc xml:whitespace="preserve">the widget</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="detail" transfer-ownership="none" allow-none="1">
          <doc xml:whitespace="preserve">a style detail</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="x" transfer-ownership="none">
          <doc xml:whitespace="preserve">x origin of the rectangle</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="y" transfer-ownership="none">
          <doc xml:whitespace="preserve">y origin of the rectangle</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="width" transfer-ownership="none">
          <doc xml:whitespace="preserve">width of the rectangle</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="height" transfer-ownership="none">
          <doc xml:whitespace="preserve">width of the rectangle</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="gap_side" transfer-ownership="none">
          <doc xml:whitespace="preserve">side in which to leave the gap</doc>
          <type name="PositionType" c:type="GtkPositionType"/>
        </parameter>
        <parameter name="gap_x" transfer-ownership="none">
          <doc xml:whitespace="preserve">starting position of the gap</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="gap_width" transfer-ownership="none">
          <doc xml:whitespace="preserve">width of the gap</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="paint_check" c:identifier="gtk_paint_check">
      <doc xml:whitespace="preserve">Draws a check button indicator in the given rectangle on @window with 
the given parameters.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="style" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GtkStyle</doc>
          <type name="Style" c:type="GtkStyle*"/>
        </parameter>
        <parameter name="window" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GdkWindow</doc>
          <type name="Gdk.Window" c:type="GdkWindow*"/>
        </parameter>
        <parameter name="state_type" transfer-ownership="none">
          <doc xml:whitespace="preserve">a state</doc>
          <type name="StateType" c:type="GtkStateType"/>
        </parameter>
        <parameter name="shadow_type" transfer-ownership="none">
          <doc xml:whitespace="preserve">the type of shadow to draw</doc>
          <type name="ShadowType" c:type="GtkShadowType"/>
        </parameter>
        <parameter name="area" transfer-ownership="none" allow-none="1">
          <doc xml:whitespace="preserve">clip rectangle, or %NULL if the output should not be clipped</doc>
          <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
        </parameter>
        <parameter name="widget" transfer-ownership="none" allow-none="1">
          <doc xml:whitespace="preserve">the widget</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="detail" transfer-ownership="none" allow-none="1">
          <doc xml:whitespace="preserve">a style detail</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="x" transfer-ownership="none">
          <doc xml:whitespace="preserve">x origin of the rectangle to draw the check in</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="y" transfer-ownership="none">
          <doc xml:whitespace="preserve">y origin of the rectangle to draw the check in</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="width" transfer-ownership="none">
          <doc xml:whitespace="preserve">the width of the rectangle to draw the check in</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="height" transfer-ownership="none">
          <doc xml:whitespace="preserve">the height of the rectangle to draw the check in</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="paint_diamond" c:identifier="gtk_paint_diamond">
      <doc xml:whitespace="preserve">Draws a diamond in the given rectangle on @window using the given
parameters.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="style" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GtkStyle</doc>
          <type name="Style" c:type="GtkStyle*"/>
        </parameter>
        <parameter name="window" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GdkWindow</doc>
          <type name="Gdk.Window" c:type="GdkWindow*"/>
        </parameter>
        <parameter name="state_type" transfer-ownership="none">
          <doc xml:whitespace="preserve">a state</doc>
          <type name="StateType" c:type="GtkStateType"/>
        </parameter>
        <parameter name="shadow_type" transfer-ownership="none">
          <doc xml:whitespace="preserve">the type of shadow to draw</doc>
          <type name="ShadowType" c:type="GtkShadowType"/>
        </parameter>
        <parameter name="area" transfer-ownership="none" allow-none="1">
          <doc xml:whitespace="preserve">clip rectangle, or %NULL if the output should not be clipped</doc>
          <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
        </parameter>
        <parameter name="widget" transfer-ownership="none" allow-none="1">
          <doc xml:whitespace="preserve">the widget</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="detail" transfer-ownership="none" allow-none="1">
          <doc xml:whitespace="preserve">a style detail</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="x" transfer-ownership="none">
          <doc xml:whitespace="preserve">x origin of the rectangle to draw the diamond in</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="y" transfer-ownership="none">
          <doc xml:whitespace="preserve">y origin of the rectangle to draw the diamond in</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="width" transfer-ownership="none">
          <doc xml:whitespace="preserve">width of the rectangle to draw the diamond in</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="height" transfer-ownership="none">
          <doc xml:whitespace="preserve">height of the rectangle to draw the diamond in</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="paint_expander" c:identifier="gtk_paint_expander">
      <doc xml:whitespace="preserve">Draws an expander as used in #GtkTreeView. @x and @y specify the
center the expander. The size of the expander is determined by the
"expander-size" style property of @widget.  (If widget is not
specified or doesn't have an "expander-size" property, an
unspecified default size will be used, since the caller doesn't
have sufficient information to position the expander, this is
likely not useful.) The expander is expander_size pixels tall
in the collapsed position and expander_size pixels wide in the
expanded position.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="style" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GtkStyle</doc>
          <type name="Style" c:type="GtkStyle*"/>
        </parameter>
        <parameter name="window" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GdkWindow</doc>
          <type name="Gdk.Window" c:type="GdkWindow*"/>
        </parameter>
        <parameter name="state_type" transfer-ownership="none">
          <doc xml:whitespace="preserve">a state</doc>
          <type name="StateType" c:type="GtkStateType"/>
        </parameter>
        <parameter name="area" transfer-ownership="none" allow-none="1">
          <doc xml:whitespace="preserve">clip rectangle, or %NULL if the output should not be clipped</doc>
          <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
        </parameter>
        <parameter name="widget" transfer-ownership="none" allow-none="1">
          <doc xml:whitespace="preserve">the widget</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="detail" transfer-ownership="none" allow-none="1">
          <doc xml:whitespace="preserve">a style detail</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="x" transfer-ownership="none">
          <doc xml:whitespace="preserve">the x position to draw the expander at</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="y" transfer-ownership="none">
          <doc xml:whitespace="preserve">the y position to draw the expander at</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="expander_style" transfer-ownership="none">
          <doc xml:whitespace="preserve">the style to draw the expander in; determines whether the expander is collapsed, expanded, or in an intermediate state.</doc>
          <type name="ExpanderStyle" c:type="GtkExpanderStyle"/>
        </parameter>
      </parameters>
    </function>
    <function name="paint_extension" c:identifier="gtk_paint_extension">
      <doc xml:whitespace="preserve">Draws an extension, i.e. a notebook tab.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="style" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GtkStyle</doc>
          <type name="Style" c:type="GtkStyle*"/>
        </parameter>
        <parameter name="window" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GdkWindow</doc>
          <type name="Gdk.Window" c:type="GdkWindow*"/>
        </parameter>
        <parameter name="state_type" transfer-ownership="none">
          <doc xml:whitespace="preserve">a state</doc>
          <type name="StateType" c:type="GtkStateType"/>
        </parameter>
        <parameter name="shadow_type" transfer-ownership="none">
          <doc xml:whitespace="preserve">type of shadow to draw</doc>
          <type name="ShadowType" c:type="GtkShadowType"/>
        </parameter>
        <parameter name="area" transfer-ownership="none" allow-none="1">
          <doc xml:whitespace="preserve">clip rectangle, or %NULL if the output should not be clipped</doc>
          <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
        </parameter>
        <parameter name="widget" transfer-ownership="none" allow-none="1">
          <doc xml:whitespace="preserve">the widget</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="detail" transfer-ownership="none" allow-none="1">
          <doc xml:whitespace="preserve">a style detail</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="x" transfer-ownership="none">
          <doc xml:whitespace="preserve">x origin of the extension</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="y" transfer-ownership="none">
          <doc xml:whitespace="preserve">y origin of the extension</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="width" transfer-ownership="none">
          <doc xml:whitespace="preserve">width of the extension</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="height" transfer-ownership="none">
          <doc xml:whitespace="preserve">width of the extension</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="gap_side" transfer-ownership="none">
          <doc xml:whitespace="preserve">the side on to which the extension is attached</doc>
          <type name="PositionType" c:type="GtkPositionType"/>
        </parameter>
      </parameters>
    </function>
    <function name="paint_flat_box" c:identifier="gtk_paint_flat_box">
      <doc xml:whitespace="preserve">Draws a flat box on @window with the given parameters.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="style" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GtkStyle</doc>
          <type name="Style" c:type="GtkStyle*"/>
        </parameter>
        <parameter name="window" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GdkWindow</doc>
          <type name="Gdk.Window" c:type="GdkWindow*"/>
        </parameter>
        <parameter name="state_type" transfer-ownership="none">
          <doc xml:whitespace="preserve">a state</doc>
          <type name="StateType" c:type="GtkStateType"/>
        </parameter>
        <parameter name="shadow_type" transfer-ownership="none">
          <doc xml:whitespace="preserve">the type of shadow to draw</doc>
          <type name="ShadowType" c:type="GtkShadowType"/>
        </parameter>
        <parameter name="area" transfer-ownership="none" allow-none="1">
          <doc xml:whitespace="preserve">clip rectangle, or %NULL if the output should not be clipped</doc>
          <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
        </parameter>
        <parameter name="widget" transfer-ownership="none" allow-none="1">
          <doc xml:whitespace="preserve">the widget</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="detail" transfer-ownership="none" allow-none="1">
          <doc xml:whitespace="preserve">a style detail</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="x" transfer-ownership="none">
          <doc xml:whitespace="preserve">x origin of the box</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="y" transfer-ownership="none">
          <doc xml:whitespace="preserve">y origin of the box</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="width" transfer-ownership="none">
          <doc xml:whitespace="preserve">the width of the box</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="height" transfer-ownership="none">
          <doc xml:whitespace="preserve">the height of the box</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="paint_focus" c:identifier="gtk_paint_focus">
      <doc xml:whitespace="preserve">Draws a focus indicator around the given rectangle on @window using the
given style.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="style" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GtkStyle</doc>
          <type name="Style" c:type="GtkStyle*"/>
        </parameter>
        <parameter name="window" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GdkWindow</doc>
          <type name="Gdk.Window" c:type="GdkWindow*"/>
        </parameter>
        <parameter name="state_type" transfer-ownership="none">
          <doc xml:whitespace="preserve">a state</doc>
          <type name="StateType" c:type="GtkStateType"/>
        </parameter>
        <parameter name="area" transfer-ownership="none" allow-none="1">
          <doc xml:whitespace="preserve">clip rectangle, or %NULL if the output should not be clipped</doc>
          <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
        </parameter>
        <parameter name="widget" transfer-ownership="none" allow-none="1">
          <doc xml:whitespace="preserve">the widget</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="detail" transfer-ownership="none" allow-none="1">
          <doc xml:whitespace="preserve">a style detail</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="x" transfer-ownership="none">
          <doc xml:whitespace="preserve">the x origin of the rectangle around which to draw a focus indicator</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="y" transfer-ownership="none">
          <doc xml:whitespace="preserve">the y origin of the rectangle around which to draw a focus indicator</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="width" transfer-ownership="none">
          <doc xml:whitespace="preserve">the width of the rectangle around which to draw a focus indicator</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="height" transfer-ownership="none">
          <doc xml:whitespace="preserve">the height of the rectangle around which to draw a focus indicator</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="paint_handle" c:identifier="gtk_paint_handle">
      <doc xml:whitespace="preserve">Draws a handle as used in #GtkHandleBox and #GtkPaned.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="style" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GtkStyle</doc>
          <type name="Style" c:type="GtkStyle*"/>
        </parameter>
        <parameter name="window" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GdkWindow</doc>
          <type name="Gdk.Window" c:type="GdkWindow*"/>
        </parameter>
        <parameter name="state_type" transfer-ownership="none">
          <doc xml:whitespace="preserve">a state</doc>
          <type name="StateType" c:type="GtkStateType"/>
        </parameter>
        <parameter name="shadow_type" transfer-ownership="none">
          <doc xml:whitespace="preserve">type of shadow to draw</doc>
          <type name="ShadowType" c:type="GtkShadowType"/>
        </parameter>
        <parameter name="area" transfer-ownership="none" allow-none="1">
          <doc xml:whitespace="preserve">clip rectangle, or %NULL if the output should not be clipped</doc>
          <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
        </parameter>
        <parameter name="widget" transfer-ownership="none" allow-none="1">
          <doc xml:whitespace="preserve">the widget</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="detail" transfer-ownership="none" allow-none="1">
          <doc xml:whitespace="preserve">a style detail</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="x" transfer-ownership="none">
          <doc xml:whitespace="preserve">x origin of the handle</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="y" transfer-ownership="none">
          <doc xml:whitespace="preserve">y origin of the handle</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="width" transfer-ownership="none">
          <doc xml:whitespace="preserve">with of the handle</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="height" transfer-ownership="none">
          <doc xml:whitespace="preserve">height of the handle</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="orientation" transfer-ownership="none">
          <doc xml:whitespace="preserve">the orientation of the handle</doc>
          <type name="Orientation" c:type="GtkOrientation"/>
        </parameter>
      </parameters>
    </function>
    <function name="paint_hline" c:identifier="gtk_paint_hline">
      <doc xml:whitespace="preserve">Draws a horizontal line from (@x1, @y) to (@x2, @y) in @window
using the given style and state.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="style" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GtkStyle</doc>
          <type name="Style" c:type="GtkStyle*"/>
        </parameter>
        <parameter name="window" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GdkWindow</doc>
          <type name="Gdk.Window" c:type="GdkWindow*"/>
        </parameter>
        <parameter name="state_type" transfer-ownership="none">
          <doc xml:whitespace="preserve">a state</doc>
          <type name="StateType" c:type="GtkStateType"/>
        </parameter>
        <parameter name="area" transfer-ownership="none" allow-none="1">
          <doc xml:whitespace="preserve">rectangle to which the output is clipped, or %NULL if the output should not be clipped</doc>
          <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
        </parameter>
        <parameter name="widget" transfer-ownership="none" allow-none="1">
          <doc xml:whitespace="preserve">the widget</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="detail" transfer-ownership="none" allow-none="1">
          <doc xml:whitespace="preserve">a style detail</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="x1" transfer-ownership="none">
          <doc xml:whitespace="preserve">the starting x coordinate</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="x2" transfer-ownership="none">
          <doc xml:whitespace="preserve">the ending x coordinate</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="y" transfer-ownership="none">
          <doc xml:whitespace="preserve">the y coordinate</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="paint_layout" c:identifier="gtk_paint_layout">
      <doc xml:whitespace="preserve">Draws a layout on @window using the given parameters.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="style" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GtkStyle</doc>
          <type name="Style" c:type="GtkStyle*"/>
        </parameter>
        <parameter name="window" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GdkWindow</doc>
          <type name="Gdk.Window" c:type="GdkWindow*"/>
        </parameter>
        <parameter name="state_type" transfer-ownership="none">
          <doc xml:whitespace="preserve">a state</doc>
          <type name="StateType" c:type="GtkStateType"/>
        </parameter>
        <parameter name="use_text" transfer-ownership="none">
          <doc xml:whitespace="preserve">whether to use the text or foreground graphics context of @style</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="area" transfer-ownership="none" allow-none="1">
          <doc xml:whitespace="preserve">clip rectangle, or %NULL if the output should not be clipped</doc>
          <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
        </parameter>
        <parameter name="widget" transfer-ownership="none" allow-none="1">
          <doc xml:whitespace="preserve">the widget</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="detail" transfer-ownership="none" allow-none="1">
          <doc xml:whitespace="preserve">a style detail</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="x" transfer-ownership="none">
          <doc xml:whitespace="preserve">x origin</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="y" transfer-ownership="none">
          <doc xml:whitespace="preserve">y origin</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="layout" transfer-ownership="none">
          <doc xml:whitespace="preserve">the layout to draw</doc>
          <type name="Pango.Layout" c:type="PangoLayout*"/>
        </parameter>
      </parameters>
    </function>
    <function name="paint_option" c:identifier="gtk_paint_option">
      <doc xml:whitespace="preserve">Draws a radio button indicator in the given rectangle on @window with 
the given parameters.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="style" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GtkStyle</doc>
          <type name="Style" c:type="GtkStyle*"/>
        </parameter>
        <parameter name="window" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GdkWindow</doc>
          <type name="Gdk.Window" c:type="GdkWindow*"/>
        </parameter>
        <parameter name="state_type" transfer-ownership="none">
          <doc xml:whitespace="preserve">a state</doc>
          <type name="StateType" c:type="GtkStateType"/>
        </parameter>
        <parameter name="shadow_type" transfer-ownership="none">
          <doc xml:whitespace="preserve">the type of shadow to draw</doc>
          <type name="ShadowType" c:type="GtkShadowType"/>
        </parameter>
        <parameter name="area" transfer-ownership="none" allow-none="1">
          <doc xml:whitespace="preserve">clip rectangle, or %NULL if the output should not be clipped</doc>
          <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
        </parameter>
        <parameter name="widget" transfer-ownership="none" allow-none="1">
          <doc xml:whitespace="preserve">the widget</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="detail" transfer-ownership="none" allow-none="1">
          <doc xml:whitespace="preserve">a style detail</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="x" transfer-ownership="none">
          <doc xml:whitespace="preserve">x origin of the rectangle to draw the option in</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="y" transfer-ownership="none">
          <doc xml:whitespace="preserve">y origin of the rectangle to draw the option in</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="width" transfer-ownership="none">
          <doc xml:whitespace="preserve">the width of the rectangle to draw the option in</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="height" transfer-ownership="none">
          <doc xml:whitespace="preserve">the height of the rectangle to draw the option in</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="paint_resize_grip" c:identifier="gtk_paint_resize_grip">
      <doc xml:whitespace="preserve">Draws a resize grip in the given rectangle on @window using the given
parameters.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="style" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GtkStyle</doc>
          <type name="Style" c:type="GtkStyle*"/>
        </parameter>
        <parameter name="window" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GdkWindow</doc>
          <type name="Gdk.Window" c:type="GdkWindow*"/>
        </parameter>
        <parameter name="state_type" transfer-ownership="none">
          <doc xml:whitespace="preserve">a state</doc>
          <type name="StateType" c:type="GtkStateType"/>
        </parameter>
        <parameter name="area" transfer-ownership="none" allow-none="1">
          <doc xml:whitespace="preserve">clip rectangle, or %NULL if the output should not be clipped</doc>
          <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
        </parameter>
        <parameter name="widget" transfer-ownership="none" allow-none="1">
          <doc xml:whitespace="preserve">the widget</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="detail" transfer-ownership="none" allow-none="1">
          <doc xml:whitespace="preserve">a style detail</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="edge" transfer-ownership="none">
          <doc xml:whitespace="preserve">the edge in which to draw the resize grip</doc>
          <type name="Gdk.WindowEdge" c:type="GdkWindowEdge"/>
        </parameter>
        <parameter name="x" transfer-ownership="none">
          <doc xml:whitespace="preserve">the x origin of the rectangle in which to draw the resize grip</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="y" transfer-ownership="none">
          <doc xml:whitespace="preserve">the y origin of the rectangle in which to draw the resize grip</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="width" transfer-ownership="none">
          <doc xml:whitespace="preserve">the width of the rectangle in which to draw the resize grip</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="height" transfer-ownership="none">
          <doc xml:whitespace="preserve">the height of the rectangle in which to draw the resize grip</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="paint_shadow" c:identifier="gtk_paint_shadow">
      <doc xml:whitespace="preserve">Draws a shadow around the given rectangle in @window 
using the given style and state and shadow type.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="style" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GtkStyle</doc>
          <type name="Style" c:type="GtkStyle*"/>
        </parameter>
        <parameter name="window" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GdkWindow</doc>
          <type name="Gdk.Window" c:type="GdkWindow*"/>
        </parameter>
        <parameter name="state_type" transfer-ownership="none">
          <doc xml:whitespace="preserve">a state</doc>
          <type name="StateType" c:type="GtkStateType"/>
        </parameter>
        <parameter name="shadow_type" transfer-ownership="none">
          <doc xml:whitespace="preserve">type of shadow to draw</doc>
          <type name="ShadowType" c:type="GtkShadowType"/>
        </parameter>
        <parameter name="area" transfer-ownership="none" allow-none="1">
          <doc xml:whitespace="preserve">clip rectangle or %NULL if the output should not be clipped</doc>
          <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
        </parameter>
        <parameter name="widget" transfer-ownership="none" allow-none="1">
          <doc xml:whitespace="preserve">the widget</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="detail" transfer-ownership="none" allow-none="1">
          <doc xml:whitespace="preserve">a style detail</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="x" transfer-ownership="none">
          <doc xml:whitespace="preserve">x origin of the rectangle</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="y" transfer-ownership="none">
          <doc xml:whitespace="preserve">y origin of the rectangle</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="width" transfer-ownership="none">
          <doc xml:whitespace="preserve">width of the rectangle</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="height" transfer-ownership="none">
          <doc xml:whitespace="preserve">width of the rectangle</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="paint_shadow_gap" c:identifier="gtk_paint_shadow_gap">
      <doc xml:whitespace="preserve">Draws a shadow around the given rectangle in @window 
using the given style and state and shadow type, leaving a 
gap in one side.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="style" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GtkStyle</doc>
          <type name="Style" c:type="GtkStyle*"/>
        </parameter>
        <parameter name="window" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GdkWindow</doc>
          <type name="Gdk.Window" c:type="GdkWindow*"/>
        </parameter>
        <parameter name="state_type" transfer-ownership="none">
          <doc xml:whitespace="preserve">a state</doc>
          <type name="StateType" c:type="GtkStateType"/>
        </parameter>
        <parameter name="shadow_type" transfer-ownership="none">
          <doc xml:whitespace="preserve">type of shadow to draw</doc>
          <type name="ShadowType" c:type="GtkShadowType"/>
        </parameter>
        <parameter name="area" transfer-ownership="none" allow-none="1">
          <doc xml:whitespace="preserve">clip rectangle, or %NULL if the output should not be clipped</doc>
          <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
        </parameter>
        <parameter name="widget" transfer-ownership="none" allow-none="1">
          <doc xml:whitespace="preserve">the widget</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="detail" transfer-ownership="none" allow-none="1">
          <doc xml:whitespace="preserve">a style detail</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="x" transfer-ownership="none">
          <doc xml:whitespace="preserve">x origin of the rectangle</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="y" transfer-ownership="none">
          <doc xml:whitespace="preserve">y origin of the rectangle</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="width" transfer-ownership="none">
          <doc xml:whitespace="preserve">width of the rectangle</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="height" transfer-ownership="none">
          <doc xml:whitespace="preserve">width of the rectangle</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="gap_side" transfer-ownership="none">
          <doc xml:whitespace="preserve">side in which to leave the gap</doc>
          <type name="PositionType" c:type="GtkPositionType"/>
        </parameter>
        <parameter name="gap_x" transfer-ownership="none">
          <doc xml:whitespace="preserve">starting position of the gap</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="gap_width" transfer-ownership="none">
          <doc xml:whitespace="preserve">width of the gap</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="paint_slider" c:identifier="gtk_paint_slider">
      <doc xml:whitespace="preserve">Draws a slider in the given rectangle on @window using the
given style and orientation.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="style" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GtkStyle</doc>
          <type name="Style" c:type="GtkStyle*"/>
        </parameter>
        <parameter name="window" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GdkWindow</doc>
          <type name="Gdk.Window" c:type="GdkWindow*"/>
        </parameter>
        <parameter name="state_type" transfer-ownership="none">
          <doc xml:whitespace="preserve">a state</doc>
          <type name="StateType" c:type="GtkStateType"/>
        </parameter>
        <parameter name="shadow_type" transfer-ownership="none">
          <doc xml:whitespace="preserve">a shadow</doc>
          <type name="ShadowType" c:type="GtkShadowType"/>
        </parameter>
        <parameter name="area" transfer-ownership="none" allow-none="1">
          <doc xml:whitespace="preserve">clip rectangle, or %NULL if the output should not be clipped</doc>
          <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
        </parameter>
        <parameter name="widget" transfer-ownership="none" allow-none="1">
          <doc xml:whitespace="preserve">the widget</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="detail" transfer-ownership="none" allow-none="1">
          <doc xml:whitespace="preserve">a style detail</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="x" transfer-ownership="none">
          <doc xml:whitespace="preserve">the x origin of the rectangle in which to draw a slider</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="y" transfer-ownership="none">
          <doc xml:whitespace="preserve">the y origin of the rectangle in which to draw a slider</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="width" transfer-ownership="none">
          <doc xml:whitespace="preserve">the width of the rectangle in which to draw a slider</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="height" transfer-ownership="none">
          <doc xml:whitespace="preserve">the height of the rectangle in which to draw a slider</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="orientation" transfer-ownership="none">
          <doc xml:whitespace="preserve">the orientation to be used</doc>
          <type name="Orientation" c:type="GtkOrientation"/>
        </parameter>
      </parameters>
    </function>
    <function name="paint_spinner"
              c:identifier="gtk_paint_spinner"
              version="2.20">
      <doc xml:whitespace="preserve">Draws a spinner on @window using the given parameters.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="style" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GtkStyle</doc>
          <type name="Style" c:type="GtkStyle*"/>
        </parameter>
        <parameter name="window" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GdkWindow</doc>
          <type name="Gdk.Window" c:type="GdkWindow*"/>
        </parameter>
        <parameter name="state_type" transfer-ownership="none">
          <doc xml:whitespace="preserve">a state</doc>
          <type name="StateType" c:type="GtkStateType"/>
        </parameter>
        <parameter name="area" transfer-ownership="none" allow-none="1">
          <doc xml:whitespace="preserve">clip rectangle, or %NULL if the output should not be clipped</doc>
          <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
        </parameter>
        <parameter name="widget" transfer-ownership="none" allow-none="1">
          <doc xml:whitespace="preserve">the widget (may be %NULL)</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="detail" transfer-ownership="none" allow-none="1">
          <doc xml:whitespace="preserve">a style detail (may be %NULL)</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="step" transfer-ownership="none">
          <doc xml:whitespace="preserve">the nth step, a value between 0 and #GtkSpinner:num-steps</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="x" transfer-ownership="none">
          <doc xml:whitespace="preserve">the x origin of the rectangle in which to draw the spinner</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="y" transfer-ownership="none">
          <doc xml:whitespace="preserve">the y origin of the rectangle in which to draw the spinner</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="width" transfer-ownership="none">
          <doc xml:whitespace="preserve">the width of the rectangle in which to draw the spinner</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="height" transfer-ownership="none">
          <doc xml:whitespace="preserve">the height of the rectangle in which to draw the spinner</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="paint_tab" c:identifier="gtk_paint_tab">
      <doc xml:whitespace="preserve">Draws an option menu tab (i.e. the up and down pointing arrows)
in the given rectangle on @window using the given parameters.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="style" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GtkStyle</doc>
          <type name="Style" c:type="GtkStyle*"/>
        </parameter>
        <parameter name="window" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GdkWindow</doc>
          <type name="Gdk.Window" c:type="GdkWindow*"/>
        </parameter>
        <parameter name="state_type" transfer-ownership="none">
          <doc xml:whitespace="preserve">a state</doc>
          <type name="StateType" c:type="GtkStateType"/>
        </parameter>
        <parameter name="shadow_type" transfer-ownership="none">
          <doc xml:whitespace="preserve">the type of shadow to draw</doc>
          <type name="ShadowType" c:type="GtkShadowType"/>
        </parameter>
        <parameter name="area" transfer-ownership="none" allow-none="1">
          <doc xml:whitespace="preserve">clip rectangle, or %NULL if the output should not be clipped</doc>
          <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
        </parameter>
        <parameter name="widget" transfer-ownership="none" allow-none="1">
          <doc xml:whitespace="preserve">the widget</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="detail" transfer-ownership="none" allow-none="1">
          <doc xml:whitespace="preserve">a style detail</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="x" transfer-ownership="none">
          <doc xml:whitespace="preserve">x origin of the rectangle to draw the tab in</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="y" transfer-ownership="none">
          <doc xml:whitespace="preserve">y origin of the rectangle to draw the tab in</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="width" transfer-ownership="none">
          <doc xml:whitespace="preserve">the width of the rectangle to draw the tab in</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="height" transfer-ownership="none">
          <doc xml:whitespace="preserve">the height of the rectangle to draw the tab in</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="paint_vline" c:identifier="gtk_paint_vline">
      <doc xml:whitespace="preserve">Draws a vertical line from (@x, @y1_) to (@x, @y2_) in @window
using the given style and state.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="style" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GtkStyle</doc>
          <type name="Style" c:type="GtkStyle*"/>
        </parameter>
        <parameter name="window" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GdkWindow</doc>
          <type name="Gdk.Window" c:type="GdkWindow*"/>
        </parameter>
        <parameter name="state_type" transfer-ownership="none">
          <doc xml:whitespace="preserve">a state</doc>
          <type name="StateType" c:type="GtkStateType"/>
        </parameter>
        <parameter name="area" transfer-ownership="none" allow-none="1">
          <doc xml:whitespace="preserve">rectangle to which the output is clipped, or %NULL if the output should not be clipped</doc>
          <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
        </parameter>
        <parameter name="widget" transfer-ownership="none" allow-none="1">
          <doc xml:whitespace="preserve">the widget</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="detail" transfer-ownership="none" allow-none="1">
          <doc xml:whitespace="preserve">a style detail</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="y1_" transfer-ownership="none">
          <doc xml:whitespace="preserve">the starting y coordinate</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="y2_" transfer-ownership="none">
          <doc xml:whitespace="preserve">the ending y coordinate</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="x" transfer-ownership="none">
          <doc xml:whitespace="preserve">the x coordinate</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="paper_size_get_default"
              c:identifier="gtk_paper_size_get_default"
              version="2.10">
      <doc xml:whitespace="preserve">Returns the name of the default paper size, which 
depends on the current locale.  
is owned by GTK+ and should not be modified.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">the name of the default paper size. The string</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
    </function>
    <function name="paper_size_get_paper_sizes"
              c:identifier="gtk_paper_size_get_paper_sizes"
              version="2.12">
      <doc xml:whitespace="preserve">Creates a list of known paper sizes.
allocated #GtkPaperSize objects</doc>
      <return-value transfer-ownership="full">
        <doc xml:whitespace="preserve">a newly allocated list of newly</doc>
        <type name="GLib.List" c:type="GList*">
          <type name="PaperSize"/>
        </type>
      </return-value>
      <parameters>
        <parameter name="include_custom" transfer-ownership="none">
          <doc xml:whitespace="preserve">whether to include custom paper sizes as defined in the page setup dialog</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="parse_args" c:identifier="gtk_parse_args">
      <doc xml:whitespace="preserve">Parses command line arguments, and initializes global
attributes of GTK+, but does not actually open a connection
to a display. (See gdk_display_open(), gdk_get_display_arg_name())
Any arguments used by GTK+ or GDK are removed from the array and
You shouldn't call this function explicitely if you are using
gtk_init(), or gtk_init_check().</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">%TRUE if initialization succeeded, otherwise %FALSE.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="argc"
                   direction="inout"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:whitespace="preserve">a pointer to the number of command line arguments.</doc>
          <type name="gint" c:type="int*"/>
        </parameter>
        <parameter name="argv"
                   direction="inout"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:whitespace="preserve">a pointer to the array of command line arguments.</doc>
          <array c:type="char***">
            <type name="utf8"/>
          </array>
        </parameter>
      </parameters>
    </function>
    <function name="print_error_quark"
              c:identifier="gtk_print_error_quark"
              version="2.10">
      <doc xml:whitespace="preserve">Registers an error quark for #GtkPrintOperation if necessary.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">The error quark used for #GtkPrintOperation errors.</doc>
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="print_run_page_setup_dialog"
              c:identifier="gtk_print_run_page_setup_dialog"
              introspectable="0">
      <return-value>
        <type name="PageSetup" c:type="GtkPageSetup*"/>
      </return-value>
      <parameters>
        <parameter name="parent" transfer-ownership="none">
          <type name="Window" c:type="GtkWindow*"/>
        </parameter>
        <parameter name="page_setup" transfer-ownership="none">
          <type name="PageSetup" c:type="GtkPageSetup*"/>
        </parameter>
        <parameter name="settings" transfer-ownership="none">
          <type name="PrintSettings" c:type="GtkPrintSettings*"/>
        </parameter>
      </parameters>
    </function>
    <function name="print_run_page_setup_dialog_async"
              c:identifier="gtk_print_run_page_setup_dialog_async"
              introspectable="0">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="parent" transfer-ownership="none">
          <type name="Window" c:type="GtkWindow*"/>
        </parameter>
        <parameter name="page_setup" transfer-ownership="none">
          <type name="PageSetup" c:type="GtkPageSetup*"/>
        </parameter>
        <parameter name="settings" transfer-ownership="none">
          <type name="PrintSettings" c:type="GtkPrintSettings*"/>
        </parameter>
        <parameter name="done_cb" transfer-ownership="none" closure="4">
          <type name="PageSetupDoneFunc" c:type="GtkPageSetupDoneFunc"/>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="propagate_event" c:identifier="gtk_propagate_event">
      <doc xml:whitespace="preserve">Sends an event to a widget, propagating the event to parent widgets
if the event remains unhandled. Events received by GTK+ from GDK
normally begin in gtk_main_do_event(). Depending on the type of
event, existence of modal dialogs, grabs, etc., the event may be
propagated; if so, this function is used. gtk_propagate_event()
calls gtk_widget_event() on each widget it decides to send the
event to.  So gtk_widget_event() is the lowest-level function; it
simply emits the "event" and possibly an event-specific signal on a
widget.  gtk_propagate_event() is a bit higher-level, and
gtk_main_do_event() is the highest level.
All that said, you most likely don't want to use any of these
functions; synthesizing events is rarely needed. Consider asking on
the mailing list for better ways to achieve your goals. For
example, use gdk_window_invalidate_rect() or
gtk_widget_queue_draw() instead of making up expose events.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="widget" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GtkWidget</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="event" transfer-ownership="none">
          <doc xml:whitespace="preserve">an event</doc>
          <type name="Gdk.Event" c:type="GdkEvent*"/>
        </parameter>
      </parameters>
    </function>
    <function name="quit_add" c:identifier="gtk_quit_add" introspectable="0">
      <return-value transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="main_level" transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="function" transfer-ownership="none" closure="2">
          <type name="Function" c:type="GtkFunction"/>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="quit_add_destroy" c:identifier="gtk_quit_add_destroy">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="main_level" transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="object" transfer-ownership="none">
          <type name="Object" c:type="GtkObject*"/>
        </parameter>
      </parameters>
    </function>
    <function name="quit_add_full"
              c:identifier="gtk_quit_add_full"
              introspectable="0">
      <return-value transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="main_level" transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="function" transfer-ownership="none">
          <type name="Function" c:type="GtkFunction"/>
        </parameter>
        <parameter name="marshal"
                   transfer-ownership="none"
                   scope="notified"
                   closure="3"
                   destroy="4">
          <type name="CallbackMarshal" c:type="GtkCallbackMarshal"/>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="destroy" transfer-ownership="none" scope="async">
          <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
        </parameter>
      </parameters>
    </function>
    <function name="quit_remove" c:identifier="gtk_quit_remove">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="quit_handler_id" transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="quit_remove_by_data"
              c:identifier="gtk_quit_remove_by_data">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="data" transfer-ownership="none">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="rc_add_default_file"
              c:identifier="gtk_rc_add_default_file">
      <doc xml:whitespace="preserve">Adds a file to the list of files to be parsed at the
end of gtk_init().</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="filename" transfer-ownership="none">
          <doc xml:whitespace="preserve">the pathname to the file. If @filename is not absolute, it is searched in the current directory.</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="rc_find_module_in_path"
              c:identifier="gtk_rc_find_module_in_path">
      <doc xml:whitespace="preserve">Searches for a theme engine in the GTK+ search path. This function
is not useful for applications and should not be used.
otherwise %NULL.</doc>
      <return-value transfer-ownership="full">
        <doc xml:whitespace="preserve">The filename, if found (must be freed with g_free()),</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="module_file" transfer-ownership="none">
          <doc xml:whitespace="preserve">name of a theme engine</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="rc_find_pixmap_in_path"
              c:identifier="gtk_rc_find_pixmap_in_path">
      <doc xml:whitespace="preserve">Looks up a file in pixmap path for the specified #GtkSettings.
If the file is not found, it outputs a warning message using
g_warning() and returns %NULL.</doc>
      <return-value transfer-ownership="full">
        <doc xml:whitespace="preserve">the filename.</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="settings" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GtkSettings</doc>
          <type name="Settings" c:type="GtkSettings*"/>
        </parameter>
        <parameter name="scanner" transfer-ownership="none">
          <doc xml:whitespace="preserve">Scanner used to get line number information for the warning message, or %NULL</doc>
          <type name="GLib.Scanner" c:type="GScanner*"/>
        </parameter>
        <parameter name="pixmap_file" transfer-ownership="none">
          <doc xml:whitespace="preserve">name of the pixmap file to locate.</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="rc_get_default_files"
              c:identifier="gtk_rc_get_default_files">
      <doc xml:whitespace="preserve">Retrieves the current list of RC files that will be parsed
at the end of gtk_init().
This memory is owned by GTK+ and must not be freed by the application.
If you want to store this information, you should make a copy.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">A %NULL-terminated array of filenames.</doc>
        <array c:type="gchar**">
          <type name="utf8"/>
        </array>
      </return-value>
    </function>
    <function name="rc_get_im_module_file"
              c:identifier="gtk_rc_get_im_module_file">
      <doc xml:whitespace="preserve">Obtains the path to the IM modules file. See the documentation
of the &lt;link linkend="im-module-file"&gt;&lt;envar&gt;GTK_IM_MODULE_FILE&lt;/envar&gt;&lt;/link&gt;
environment variable for more details.</doc>
      <return-value transfer-ownership="full">
        <doc xml:whitespace="preserve">a newly-allocated string containing the name of the file listing the IM modules available for loading</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
    </function>
    <function name="rc_get_im_module_path"
              c:identifier="gtk_rc_get_im_module_path">
      <doc xml:whitespace="preserve">Obtains the path in which to look for IM modules. See the documentation
of the &lt;link linkend="im-module-path"&gt;&lt;envar&gt;GTK_PATH&lt;/envar&gt;&lt;/link&gt;
environment variable for more details about looking up modules. This
function is useful solely for utilities supplied with GTK+ and should
not be used by applications under normal circumstances.</doc>
      <return-value transfer-ownership="full">
        <doc xml:whitespace="preserve">a newly-allocated string containing the path in which to look for IM modules.</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
    </function>
    <function name="rc_get_module_dir" c:identifier="gtk_rc_get_module_dir">
      <doc xml:whitespace="preserve">Returns a directory in which GTK+ looks for theme engines.
For full information about the search for theme engines,
see the docs for &lt;envar&gt;GTK_PATH&lt;/envar&gt; in
&lt;xref linkend="gtk-running"/&gt;.</doc>
      <return-value transfer-ownership="full">
        <doc xml:whitespace="preserve">the directory. (Must be freed with g_free())</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
    </function>
    <function name="rc_get_style"
              c:identifier="gtk_rc_get_style"
              introspectable="0">
      <doc xml:whitespace="preserve">Finds all matching RC styles for a given widget,
composites them together, and then creates a 
#GtkStyle representing the composite appearance.
(GTK+ actually keeps a cache of previously 
created styles, so a new style may not be
created.)
to the returned style, so if you want to save this
style around, you should add a reference yourself.</doc>
      <return-value>
        <doc xml:whitespace="preserve">the resulting style. No refcount is added</doc>
        <type name="Style" c:type="GtkStyle*"/>
      </return-value>
      <parameters>
        <parameter name="widget" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GtkWidget</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </parameter>
      </parameters>
    </function>
    <function name="rc_get_style_by_paths"
              c:identifier="gtk_rc_get_style_by_paths">
      <doc xml:whitespace="preserve">Creates up a #GtkStyle from styles defined in a RC file by providing
the raw components used in matching. This function may be useful
when creating pseudo-widgets that should be themed like widgets but
don't actually have corresponding GTK+ widgets. An example of this
would be items inside a GNOME canvas widget.
The action of gtk_rc_get_style() is similar to:
|[
gtk_widget_path (widget, NULL, &amp;path, NULL);
gtk_widget_class_path (widget, NULL, &amp;class_path, NULL);
gtk_rc_get_style_by_paths (gtk_widget_get_settings (widget), 
path, class_path,
G_OBJECT_TYPE (widget));
]|
supplied paths, or %NULL if nothing matching was specified and the
default style should be used. The returned value is owned by GTK+
as part of an internal cache, so you must call g_object_ref() on
the returned value if you want to keep a reference to it.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">A style created by matching with the</doc>
        <type name="Style" c:type="GtkStyle*"/>
      </return-value>
      <parameters>
        <parameter name="settings" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GtkSettings object</doc>
          <type name="Settings" c:type="GtkSettings*"/>
        </parameter>
        <parameter name="widget_path" transfer-ownership="none" allow-none="1">
          <doc xml:whitespace="preserve">the widget path to use when looking up the style, or %NULL if no matching against the widget path should be done</doc>
          <type name="utf8" c:type="char*"/>
        </parameter>
        <parameter name="class_path" transfer-ownership="none" allow-none="1">
          <doc xml:whitespace="preserve">the class path to use when looking up the style, or %NULL if no matching against the class path should be done.</doc>
          <type name="utf8" c:type="char*"/>
        </parameter>
        <parameter name="type" transfer-ownership="none">
          <doc xml:whitespace="preserve">a type that will be used along with parent types of this type when matching against class styles, or #G_TYPE_NONE</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
      </parameters>
    </function>
    <function name="rc_get_theme_dir" c:identifier="gtk_rc_get_theme_dir">
      <return-value transfer-ownership="full">
        <type name="utf8" c:type="gchar*"/>
      </return-value>
    </function>
    <function name="rc_parse" c:identifier="gtk_rc_parse">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="filename" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="rc_parse_color" c:identifier="gtk_rc_parse_color">
      <doc xml:whitespace="preserve">Parses a color in the &lt;link linkend="color=format"&gt;format&lt;/link&gt; expected
in a RC file. 
Note that theme engines should use gtk_rc_parse_color_full() in 
order to support symbolic colors.
that was expected but not found</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">%G_TOKEN_NONE if parsing succeeded, otherwise the token</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="scanner" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GScanner</doc>
          <type name="GLib.Scanner" c:type="GScanner*"/>
        </parameter>
        <parameter name="color" transfer-ownership="none">
          <doc xml:whitespace="preserve">a pointer to a #GdkColor structure in which to store the result</doc>
          <type name="Gdk.Color" c:type="GdkColor*"/>
        </parameter>
      </parameters>
    </function>
    <function name="rc_parse_color_full"
              c:identifier="gtk_rc_parse_color_full"
              version="2.12">
      <doc xml:whitespace="preserve">Parses a color in the &lt;link linkend="color=format"&gt;format&lt;/link&gt; expected
in a RC file. If @style is not %NULL, it will be consulted to resolve
references to symbolic colors.
that was expected but not found</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">%G_TOKEN_NONE if parsing succeeded, otherwise the token</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="scanner" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GScanner</doc>
          <type name="GLib.Scanner" c:type="GScanner*"/>
        </parameter>
        <parameter name="style" transfer-ownership="none" allow-none="1">
          <doc xml:whitespace="preserve">a #GtkRcStyle, or %NULL</doc>
          <type name="RcStyle" c:type="GtkRcStyle*"/>
        </parameter>
        <parameter name="color" transfer-ownership="none">
          <doc xml:whitespace="preserve">a pointer to a #GdkColor structure in which to store the result</doc>
          <type name="Gdk.Color" c:type="GdkColor*"/>
        </parameter>
      </parameters>
    </function>
    <function name="rc_parse_priority" c:identifier="gtk_rc_parse_priority">
      <return-value transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="scanner" transfer-ownership="none">
          <type name="GLib.Scanner" c:type="GScanner*"/>
        </parameter>
        <parameter name="priority" transfer-ownership="none">
          <type name="PathPriorityType" c:type="GtkPathPriorityType*"/>
        </parameter>
      </parameters>
    </function>
    <function name="rc_parse_state" c:identifier="gtk_rc_parse_state">
      <return-value transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="scanner" transfer-ownership="none">
          <type name="GLib.Scanner" c:type="GScanner*"/>
        </parameter>
        <parameter name="state" transfer-ownership="none">
          <type name="StateType" c:type="GtkStateType*"/>
        </parameter>
      </parameters>
    </function>
    <function name="rc_parse_string" c:identifier="gtk_rc_parse_string">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="rc_string" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="rc_property_parse_border"
              c:identifier="gtk_rc_property_parse_border">
      <doc xml:whitespace="preserve">A #GtkRcPropertyParser for use with gtk_settings_install_property_parser()
or gtk_widget_class_install_style_property_parser() which parses
borders in the form 
&lt;literal&gt;"{ left, right, top, bottom }"&lt;/literal&gt; for integers 
%left, %right, %top and %bottom.
has been set to the resulting #GtkBorder.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">%TRUE if @gstring could be parsed and @property_value</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="pspec" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GParamSpec</doc>
          <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
        </parameter>
        <parameter name="gstring" transfer-ownership="none">
          <doc xml:whitespace="preserve">the #GString to be parsed</doc>
          <type name="GLib.String" c:type="GString*"/>
        </parameter>
        <parameter name="property_value" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GValue which must hold boxed values.</doc>
          <type name="GObject.Value" c:type="GValue*"/>
        </parameter>
      </parameters>
    </function>
    <function name="rc_property_parse_color"
              c:identifier="gtk_rc_property_parse_color">
      <doc xml:whitespace="preserve">A #GtkRcPropertyParser for use with gtk_settings_install_property_parser()
or gtk_widget_class_install_style_property_parser() which parses a
color given either by its name or in the form 
&lt;literal&gt;{ red, green, blue }&lt;/literal&gt; where %red, %green and
%blue are integers between 0 and 65535 or floating-point numbers
between 0 and 1.
has been set to the resulting #GdkColor.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">%TRUE if @gstring could be parsed and @property_value</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="pspec" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GParamSpec</doc>
          <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
        </parameter>
        <parameter name="gstring" transfer-ownership="none">
          <doc xml:whitespace="preserve">the #GString to be parsed</doc>
          <type name="GLib.String" c:type="GString*"/>
        </parameter>
        <parameter name="property_value" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GValue which must hold #GdkColor values.</doc>
          <type name="GObject.Value" c:type="GValue*"/>
        </parameter>
      </parameters>
    </function>
    <function name="rc_property_parse_enum"
              c:identifier="gtk_rc_property_parse_enum">
      <doc xml:whitespace="preserve">A #GtkRcPropertyParser for use with gtk_settings_install_property_parser()
or gtk_widget_class_install_style_property_parser() which parses a single
enumeration value.
The enumeration value can be specified by its name, its nickname or
its numeric value. For consistency with flags parsing, the value
may be surrounded by parentheses.
has been set to the resulting #GEnumValue.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">%TRUE if @gstring could be parsed and @property_value</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="pspec" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GParamSpec</doc>
          <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
        </parameter>
        <parameter name="gstring" transfer-ownership="none">
          <doc xml:whitespace="preserve">the #GString to be parsed</doc>
          <type name="GLib.String" c:type="GString*"/>
        </parameter>
        <parameter name="property_value" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GValue which must hold enum values.</doc>
          <type name="GObject.Value" c:type="GValue*"/>
        </parameter>
      </parameters>
    </function>
    <function name="rc_property_parse_flags"
              c:identifier="gtk_rc_property_parse_flags">
      <doc xml:whitespace="preserve">A #GtkRcPropertyParser for use with gtk_settings_install_property_parser()
or gtk_widget_class_install_style_property_parser() which parses flags. 
Flags can be specified by their name, their nickname or
numerically. Multiple flags can be specified in the form 
&lt;literal&gt;"( flag1 | flag2 | ... )"&lt;/literal&gt;.
has been set to the resulting flags value.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">%TRUE if @gstring could be parsed and @property_value</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="pspec" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GParamSpec</doc>
          <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
        </parameter>
        <parameter name="gstring" transfer-ownership="none">
          <doc xml:whitespace="preserve">the #GString to be parsed</doc>
          <type name="GLib.String" c:type="GString*"/>
        </parameter>
        <parameter name="property_value" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GValue which must hold flags values.</doc>
          <type name="GObject.Value" c:type="GValue*"/>
        </parameter>
      </parameters>
    </function>
    <function name="rc_property_parse_requisition"
              c:identifier="gtk_rc_property_parse_requisition">
      <doc xml:whitespace="preserve">A #GtkRcPropertyParser for use with gtk_settings_install_property_parser()
or gtk_widget_class_install_style_property_parser() which parses a
requisition in the form 
&lt;literal&gt;"{ width, height }"&lt;/literal&gt; for integers %width and %height.
has been set to the resulting #GtkRequisition.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">%TRUE if @gstring could be parsed and @property_value</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="pspec" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GParamSpec</doc>
          <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
        </parameter>
        <parameter name="gstring" transfer-ownership="none">
          <doc xml:whitespace="preserve">the #GString to be parsed</doc>
          <type name="GLib.String" c:type="GString*"/>
        </parameter>
        <parameter name="property_value" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GValue which must hold boxed values.</doc>
          <type name="GObject.Value" c:type="GValue*"/>
        </parameter>
      </parameters>
    </function>
    <function name="rc_reparse_all" c:identifier="gtk_rc_reparse_all">
      <doc xml:whitespace="preserve">If the modification time on any previously read file for the
default #GtkSettings has changed, discard all style information
and then reread all previously read RC files.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">%TRUE if the files were reread.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
    </function>
    <function name="rc_reparse_all_for_settings"
              c:identifier="gtk_rc_reparse_all_for_settings">
      <doc xml:whitespace="preserve">If the modification time on any previously read file
for the given #GtkSettings has changed, discard all style information
and then reread all previously read RC files.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">%TRUE if the files were reread.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="settings" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GtkSettings</doc>
          <type name="Settings" c:type="GtkSettings*"/>
        </parameter>
        <parameter name="force_load" transfer-ownership="none">
          <doc xml:whitespace="preserve">load whether or not anything changed</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="rc_reset_styles"
              c:identifier="gtk_rc_reset_styles"
              version="2.4">
      <doc xml:whitespace="preserve">This function recomputes the styles for all widgets that use a
particular #GtkSettings object. (There is one #GtkSettings object
per #GdkScreen, see gtk_settings_get_for_screen()); It is useful
when some global parameter has changed that affects the appearance
of all widgets, because when a widget gets a new style, it will
both redraw and recompute any cached information about its
appearance. As an example, it is used when the default font size
set by the operating system changes. Note that this function
doesn't affect widgets that have a style set explicitely on them
with gtk_widget_set_style().</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="settings" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GtkSettings</doc>
          <type name="Settings" c:type="GtkSettings*"/>
        </parameter>
      </parameters>
    </function>
    <function name="rc_scanner_new"
              c:identifier="gtk_rc_scanner_new"
              introspectable="0">
      <return-value>
        <type name="GLib.Scanner" c:type="GScanner*"/>
      </return-value>
    </function>
    <function name="rc_set_default_files"
              c:identifier="gtk_rc_set_default_files">
      <doc xml:whitespace="preserve">Sets the list of files that GTK+ will read at the
end of gtk_init().</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="filenames" transfer-ownership="none">
          <doc xml:whitespace="preserve">A %NULL-terminated list of filenames.</doc>
          <type name="utf8" c:type="gchar**"/>
        </parameter>
      </parameters>
    </function>
    <function name="recent_chooser_error_quark"
              c:identifier="gtk_recent_chooser_error_quark">
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="recent_manager_error_quark"
              c:identifier="gtk_recent_manager_error_quark">
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="rgb_to_hsv" c:identifier="gtk_rgb_to_hsv" version="2.14">
      <doc xml:whitespace="preserve">Converts a color from RGB space to HSV.
Input values must be in the [0.0, 1.0] range;
output values will be in the same range.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="r" transfer-ownership="none">
          <doc xml:whitespace="preserve">Red</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="g" transfer-ownership="none">
          <doc xml:whitespace="preserve">Green</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="b" transfer-ownership="none">
          <doc xml:whitespace="preserve">Blue</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="h" transfer-ownership="none">
          <doc xml:whitespace="preserve">Return value for the hue component</doc>
          <type name="gdouble" c:type="gdouble*"/>
        </parameter>
        <parameter name="s" transfer-ownership="none">
          <doc xml:whitespace="preserve">Return value for the saturation component</doc>
          <type name="gdouble" c:type="gdouble*"/>
        </parameter>
        <parameter name="v" transfer-ownership="none">
          <doc xml:whitespace="preserve">Return value for the value component</doc>
          <type name="gdouble" c:type="gdouble*"/>
        </parameter>
      </parameters>
    </function>
    <function name="selection_add_target"
              c:identifier="gtk_selection_add_target">
      <doc xml:whitespace="preserve">Appends a specified target to the list of supported targets for a 
given widget and selection.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="widget" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GtkTarget</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="selection" transfer-ownership="none">
          <doc xml:whitespace="preserve">the selection</doc>
          <type name="Gdk.Atom" c:type="GdkAtom"/>
        </parameter>
        <parameter name="target" transfer-ownership="none">
          <doc xml:whitespace="preserve">target to add.</doc>
          <type name="Gdk.Atom" c:type="GdkAtom"/>
        </parameter>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">A unsigned integer which will be passed back to the application.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="selection_add_targets"
              c:identifier="gtk_selection_add_targets">
      <doc xml:whitespace="preserve">Prepends a table of targets to the list of supported targets
for a given widget and selection.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="widget" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GtkWidget</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="selection" transfer-ownership="none">
          <doc xml:whitespace="preserve">the selection</doc>
          <type name="Gdk.Atom" c:type="GdkAtom"/>
        </parameter>
        <parameter name="targets" transfer-ownership="none">
          <doc xml:whitespace="preserve">a table of targets to add</doc>
          <type name="TargetEntry" c:type="GtkTargetEntry*"/>
        </parameter>
        <parameter name="ntargets" transfer-ownership="none">
          <doc xml:whitespace="preserve">number of entries in @targets</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="selection_clear_targets"
              c:identifier="gtk_selection_clear_targets">
      <doc xml:whitespace="preserve">Remove all targets registered for the given selection for the
widget.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="widget" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GtkWidget</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="selection" transfer-ownership="none">
          <doc xml:whitespace="preserve">an atom representing a selection</doc>
          <type name="Gdk.Atom" c:type="GdkAtom"/>
        </parameter>
      </parameters>
    </function>
    <function name="selection_convert" c:identifier="gtk_selection_convert">
      <doc xml:whitespace="preserve">Requests the contents of a selection. When received, 
a "selection-received" signal will be generated.
request. (e.g., there was already a request in process for
this widget).</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">%TRUE if requested succeeded. %FALSE if we could not process</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="widget" transfer-ownership="none">
          <doc xml:whitespace="preserve">The widget which acts as requestor</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="selection" transfer-ownership="none">
          <doc xml:whitespace="preserve">Which selection to get</doc>
          <type name="Gdk.Atom" c:type="GdkAtom"/>
        </parameter>
        <parameter name="target" transfer-ownership="none">
          <doc xml:whitespace="preserve">Form of information desired (e.g., STRING)</doc>
          <type name="Gdk.Atom" c:type="GdkAtom"/>
        </parameter>
        <parameter name="time_" transfer-ownership="none">
          <doc xml:whitespace="preserve">Time of request (usually of triggering event)</doc>
          <type name="guint32" c:type="guint32"/>
        </parameter>
      </parameters>
    </function>
    <function name="selection_owner_set"
              c:identifier="gtk_selection_owner_set">
      <doc xml:whitespace="preserve">Claims ownership of a given selection for a particular widget,
or, if @widget is %NULL, release ownership of the selection.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">%TRUE if the operation succeeded</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="widget" transfer-ownership="none" allow-none="1">
          <doc xml:whitespace="preserve">a #GtkWidget, or %NULL.</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="selection" transfer-ownership="none">
          <doc xml:whitespace="preserve">an interned atom representing the selection to claim</doc>
          <type name="Gdk.Atom" c:type="GdkAtom"/>
        </parameter>
        <parameter name="time_" transfer-ownership="none">
          <doc xml:whitespace="preserve">timestamp with which to claim the selection</doc>
          <type name="guint32" c:type="guint32"/>
        </parameter>
      </parameters>
    </function>
    <function name="selection_owner_set_for_display"
              c:identifier="gtk_selection_owner_set_for_display"
              version="2.2">
      <doc xml:whitespace="preserve">Claim ownership of a given selection for a particular widget, or,
if @widget is %NULL, release ownership of the selection.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">TRUE if the operation succeeded</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="display" transfer-ownership="none">
          <doc xml:whitespace="preserve">the #Gdkdisplay where the selection is set</doc>
          <type name="Gdk.Display" c:type="GdkDisplay*"/>
        </parameter>
        <parameter name="widget" transfer-ownership="none" allow-none="1">
          <doc xml:whitespace="preserve">new selection owner (a #GdkWidget), or %NULL.</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="selection" transfer-ownership="none">
          <doc xml:whitespace="preserve">an interned atom representing the selection to claim.</doc>
          <type name="Gdk.Atom" c:type="GdkAtom"/>
        </parameter>
        <parameter name="time_" transfer-ownership="none">
          <doc xml:whitespace="preserve">timestamp with which to claim the selection</doc>
          <type name="guint32" c:type="guint32"/>
        </parameter>
      </parameters>
    </function>
    <function name="selection_remove_all"
              c:identifier="gtk_selection_remove_all">
      <doc xml:whitespace="preserve">Removes all handlers and unsets ownership of all 
selections for a widget. Called when widget is being
destroyed. This function will not generally be
called by applications.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="widget" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GtkWidget</doc>
          <type name="Widget" c:type="GtkWidget*"/>
        </parameter>
      </parameters>
    </function>
    <function name="set_debug_flags" c:identifier="gtk_set_debug_flags">
      <doc xml:whitespace="preserve">Sets the GTK+ debug flags.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="flags" transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="set_locale" c:identifier="gtk_set_locale">
      <doc xml:whitespace="preserve">Initializes internationalization support for GTK+. gtk_init()
automatically does this, so there is typically no point
in calling this function.
If you are calling this function because you changed the locale
after GTK+ is was initialized, then calling this function
may help a bit. (Note, however, that changing the locale
after GTK+ is initialized may produce inconsistent results and
is not really supported.)
In detail - sets the current locale according to the
program environment. This is the same as calling the C library function
&lt;literal&gt;setlocale (LC_ALL, "")&lt;/literal&gt; but also takes care of the 
locale specific setup of the windowing system used by GDK.
form lang_COUNTRY, where lang is an ISO-639 language code, and
COUNTRY is an ISO-3166 country code. On Unix, this form matches the
result of the setlocale(); it is also used on other machines, such as 
Windows, where the C library returns a different result. The string is 
owned by GTK+ and should not be modified or freed.</doc>
      <return-value transfer-ownership="full">
        <doc xml:whitespace="preserve">a string corresponding to the locale set, typically in the</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
    </function>
    <function name="show_about_dialog"
              c:identifier="gtk_show_about_dialog"
              version="2.6"
              introspectable="0">
      <doc xml:whitespace="preserve">This is a convenience function for showing an application's about box.
The constructed dialog is associated with the parent window and
reused for future invocations of this function.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="parent" transfer-ownership="none" allow-none="1">
          <doc xml:whitespace="preserve">transient parent, or %NULL for none</doc>
          <type name="Window" c:type="GtkWindow*"/>
        </parameter>
        <parameter name="first_property_name" transfer-ownership="none">
          <doc xml:whitespace="preserve">the name of the first property</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter transfer-ownership="none">
          <varargs>
          </varargs>
        </parameter>
      </parameters>
    </function>
    <function name="show_uri"
              c:identifier="gtk_show_uri"
              version="2.14"
              throws="1">
      <doc xml:whitespace="preserve">This is a convenience function for launching the default application
to show the uri. The uri must be of a form understood by GIO. Typical
examples are
&lt;simplelist&gt;
&lt;member&gt;&lt;filename&gt;file:///home/gnome/pict.jpg&lt;/filename&gt;&lt;/member&gt;
&lt;member&gt;&lt;filename&gt;http://www.gnome.org&lt;/filename&gt;&lt;/member&gt;
&lt;member&gt;&lt;filename&gt;mailto:me&amp;commat;gnome.org&lt;/filename&gt;&lt;/member&gt;
&lt;/simplelist&gt;
Ideally the timestamp is taken from the event triggering
the gtk_show_uri() call. If timestamp is not known you can take
%GDK_CURRENT_TIME.
This function can be used as a replacement for gnome_vfs_url_show()
and gnome_url_show().</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">%TRUE on success, %FALSE on error.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="screen" transfer-ownership="none" allow-none="1">
          <doc xml:whitespace="preserve">screen to show the uri on or %NULL for the default screen</doc>
          <type name="Gdk.Screen" c:type="GdkScreen*"/>
        </parameter>
        <parameter name="uri" transfer-ownership="none">
          <doc xml:whitespace="preserve">the uri to show</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="timestamp" transfer-ownership="none">
          <doc xml:whitespace="preserve">a timestamp to prevent focus stealing.</doc>
          <type name="guint32" c:type="guint32"/>
        </parameter>
      </parameters>
    </function>
    <function name="stock_add" c:identifier="gtk_stock_add">
      <doc xml:whitespace="preserve">Registers each of the stock items in @items. If an item already
exists with the same stock ID as one of the @items, the old item
gets replaced. The stock items are copied, so GTK+ does not hold
any pointer into @items and @items can be freed. Use
gtk_stock_add_static() if @items is persistent and GTK+ need not
copy the array.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="items" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GtkStockItem or array of items</doc>
          <type name="StockItem" c:type="GtkStockItem*"/>
        </parameter>
        <parameter name="n_items" transfer-ownership="none">
          <doc xml:whitespace="preserve">number of #GtkStockItem in @items</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="stock_add_static" c:identifier="gtk_stock_add_static">
      <doc xml:whitespace="preserve">Same as gtk_stock_add(), but doesn't copy @items, so</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="items" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GtkStockItem or array of #GtkStockItem</doc>
          <type name="StockItem" c:type="GtkStockItem*"/>
        </parameter>
        <parameter name="n_items" transfer-ownership="none">
          <doc xml:whitespace="preserve">number of items</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="stock_list_ids" c:identifier="gtk_stock_list_ids">
      <doc xml:whitespace="preserve">Retrieves a list of all known stock IDs added to a #GtkIconFactory
or registered with gtk_stock_add(). The list must be freed with g_slist_free(),
and each string in the list must be freed with g_free().</doc>
      <return-value transfer-ownership="full">
        <doc xml:whitespace="preserve">a list of known stock IDs</doc>
        <type name="GLib.SList" c:type="GSList*">
          <type name="utf8"/>
        </type>
      </return-value>
    </function>
    <function name="stock_lookup" c:identifier="gtk_stock_lookup">
      <doc xml:whitespace="preserve">Fills @item with the registered values for @stock_id, returning %TRUE
if @stock_id was known.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">%TRUE if @item was initialized</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="stock_id" transfer-ownership="none">
          <doc xml:whitespace="preserve">a stock item name</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="item" transfer-ownership="none">
          <doc xml:whitespace="preserve">stock item to initialize with values</doc>
          <type name="StockItem" c:type="GtkStockItem*"/>
        </parameter>
      </parameters>
    </function>
    <function name="stock_set_translate_func"
              c:identifier="gtk_stock_set_translate_func"
              version="2.8">
      <doc xml:whitespace="preserve">Sets a function to be used for translating the @label of 
a stock item.
If no function is registered for a translation domain,
g_dgettext() is used.
The function is used for all stock items whose
to use strings different from the actual gettext translation domain
of your application for this, as long as your #GtkTranslateFunc uses
the correct domain when calling dgettext(). This can be useful, e.g.
when dealing with message contexts:
|[
GtkStockItem items[] = { 
{ MY_ITEM1, NC_("odd items", "Item 1"), 0, 0, "odd-item-domain" },
{ MY_ITEM2, NC_("even items", "Item 2"), 0, 0, "even-item-domain" },
};
gchar *
my_translate_func (const gchar *msgid,
gpointer     data)
{
gchar *msgctxt = data;
return (gchar*)g_dpgettext2 (GETTEXT_PACKAGE, msgctxt, msgid);
}
/&amp;ast; ... &amp;ast;/
gtk_stock_add (items, G_N_ELEMENTS (items));
gtk_stock_set_translate_func ("odd-item-domain", my_translate_func, "odd items"); 
gtk_stock_set_translate_func ("even-item-domain", my_translate_func, "even items"); 
]|</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="domain" transfer-ownership="none">
          <doc xml:whitespace="preserve">the translation domain for which @func shall be used</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="func"
                   transfer-ownership="none"
                   scope="notified"
                   closure="2"
                   destroy="3">
          <doc xml:whitespace="preserve">a #GtkTranslateFunc</doc>
          <type name="TranslateFunc" c:type="GtkTranslateFunc"/>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <doc xml:whitespace="preserve">data to pass to @func</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="notify" transfer-ownership="none" scope="async">
          <doc xml:whitespace="preserve">a #GDestroyNotify that is called when @data is no longer needed</doc>
          <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
        </parameter>
      </parameters>
    </function>
    <function name="target_table_free"
              c:identifier="gtk_target_table_free"
              version="2.10">
      <doc xml:whitespace="preserve">This function frees a target table as returned by
gtk_target_table_new_from_list()</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="targets" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GtkTargetEntry array</doc>
          <type name="TargetEntry" c:type="GtkTargetEntry*"/>
        </parameter>
        <parameter name="n_targets" transfer-ownership="none">
          <doc xml:whitespace="preserve">the number of entries in the array</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="target_table_new_from_list"
              c:identifier="gtk_target_table_new_from_list"
              version="2.10"
              introspectable="0">
      <doc xml:whitespace="preserve">This function creates an #GtkTargetEntry array that contains the
same targets as the passed %list. The returned table is newly
allocated and should be freed using gtk_target_table_free() when no
longer needed.</doc>
      <return-value>
        <doc xml:whitespace="preserve">the new table.</doc>
        <type name="TargetEntry" c:type="GtkTargetEntry*"/>
      </return-value>
      <parameters>
        <parameter name="list" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GtkTargetList</doc>
          <type name="TargetList" c:type="GtkTargetList*"/>
        </parameter>
        <parameter name="n_targets" transfer-ownership="none">
          <doc xml:whitespace="preserve">return location for the number ot targets in the table</doc>
          <type name="gint" c:type="gint*"/>
        </parameter>
      </parameters>
    </function>
    <function name="targets_include_image"
              c:identifier="gtk_targets_include_image"
              version="2.10">
      <doc xml:whitespace="preserve">Determines if any of the targets in @targets can be used to
provide a #GdkPixbuf.
otherwise %FALSE.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">%TRUE if @targets include a suitable target for images,</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="targets" transfer-ownership="none">
          <doc xml:whitespace="preserve">an array of #GdkAtom&lt;!-- --&gt;s</doc>
          <type name="Gdk.Atom" c:type="GdkAtom*"/>
        </parameter>
        <parameter name="n_targets" transfer-ownership="none">
          <doc xml:whitespace="preserve">the length of @targets</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="writable" transfer-ownership="none">
          <doc xml:whitespace="preserve">whether to accept only targets for which GTK+ knows how to convert a pixbuf into the format</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="targets_include_rich_text"
              c:identifier="gtk_targets_include_rich_text"
              version="2.10">
      <doc xml:whitespace="preserve">Determines if any of the targets in @targets can be used to
provide rich text.
otherwise %FALSE.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">%TRUE if @targets include a suitable target for rich text,</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="targets" transfer-ownership="none">
          <doc xml:whitespace="preserve">an array of #GdkAtom&lt;!-- --&gt;s</doc>
          <type name="Gdk.Atom" c:type="GdkAtom*"/>
        </parameter>
        <parameter name="n_targets" transfer-ownership="none">
          <doc xml:whitespace="preserve">the length of @targets</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="buffer" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GtkTextBuffer</doc>
          <type name="TextBuffer" c:type="GtkTextBuffer*"/>
        </parameter>
      </parameters>
    </function>
    <function name="targets_include_text"
              c:identifier="gtk_targets_include_text"
              version="2.10">
      <doc xml:whitespace="preserve">Determines if any of the targets in @targets can be used to
provide text.
otherwise %FALSE.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">%TRUE if @targets include a suitable target for text,</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="targets" transfer-ownership="none">
          <doc xml:whitespace="preserve">an array of #GdkAtom&lt;!-- --&gt;s</doc>
          <type name="Gdk.Atom" c:type="GdkAtom*"/>
        </parameter>
        <parameter name="n_targets" transfer-ownership="none">
          <doc xml:whitespace="preserve">the length of @targets</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="targets_include_uri"
              c:identifier="gtk_targets_include_uri"
              version="2.10">
      <doc xml:whitespace="preserve">Determines if any of the targets in @targets can be used to
provide an uri list.
otherwise %FALSE.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">%TRUE if @targets include a suitable target for uri lists,</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="targets" transfer-ownership="none">
          <doc xml:whitespace="preserve">an array of #GdkAtom&lt;!-- --&gt;s</doc>
          <type name="Gdk.Atom" c:type="GdkAtom*"/>
        </parameter>
        <parameter name="n_targets" transfer-ownership="none">
          <doc xml:whitespace="preserve">the length of @targets</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="test_create_simple_window"
              c:identifier="gtk_test_create_simple_window"
              introspectable="0">
      <return-value>
        <type name="Widget" c:type="GtkWidget*"/>
      </return-value>
      <parameters>
        <parameter name="window_title" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="dialog_text" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="test_create_widget"
              c:identifier="gtk_test_create_widget"
              introspectable="0">
      <return-value>
        <type name="Widget" c:type="GtkWidget*"/>
      </return-value>
      <parameters>
        <parameter name="widget_type" transfer-ownership="none">
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="first_property_name" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter transfer-ownership="none">
          <varargs>
          </varargs>
        </parameter>
      </parameters>
    </function>
    <function name="test_display_button_window"
              c:identifier="gtk_test_display_button_window"
              introspectable="0">
      <return-value>
        <type name="Widget" c:type="GtkWidget*"/>
      </return-value>
      <parameters>
        <parameter name="window_title" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="dialog_text" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter transfer-ownership="none">
          <varargs>
          </varargs>
        </parameter>
      </parameters>
    </function>
    <function name="test_find_label"
              c:identifier="gtk_test_find_label"
              introspectable="0">
      <return-value>
        <type name="Widget" c:type="GtkWidget*"/>
      </return-value>
      <parameters>
        <parameter name="widget" transfer-ownership="none">
          <type name="Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="label_pattern" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="test_find_sibling"
              c:identifier="gtk_test_find_sibling"
              introspectable="0">
      <return-value>
        <type name="Widget" c:type="GtkWidget*"/>
      </return-value>
      <parameters>
        <parameter name="base_widget" transfer-ownership="none">
          <type name="Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="widget_type" transfer-ownership="none">
          <type name="GType" c:type="GType"/>
        </parameter>
      </parameters>
    </function>
    <function name="test_find_widget"
              c:identifier="gtk_test_find_widget"
              introspectable="0">
      <return-value>
        <type name="Widget" c:type="GtkWidget*"/>
      </return-value>
      <parameters>
        <parameter name="widget" transfer-ownership="none">
          <type name="Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="label_pattern" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="widget_type" transfer-ownership="none">
          <type name="GType" c:type="GType"/>
        </parameter>
      </parameters>
    </function>
    <function name="test_init"
              c:identifier="gtk_test_init"
              version="2.14"
              introspectable="0">
      <doc xml:whitespace="preserve">This function is used to initialize a GTK+ test program.
It will in turn call g_test_init() and gtk_init() to properly
initialize the testing framework and graphical toolkit. It'll 
also set the program's locale to "C" and prevent loading of rc 
files and Gtk+ modules. This is done to make tets program
environments as deterministic as possible.
Like gtk_init() and g_test_init(), any known arguments will be
processed and stripped from @argc and @argv.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="argcp" transfer-ownership="none">
          <doc xml:whitespace="preserve">Address of the &lt;parameter&gt;argc&lt;/parameter&gt; parameter of the main() function. Changed if any arguments were handled.</doc>
          <type name="gint" c:type="int*"/>
        </parameter>
        <parameter name="argvp" transfer-ownership="none">
          <doc xml:whitespace="preserve">Address of the &lt;parameter&gt;argv&lt;/parameter&gt; parameter of main(). Any parameters understood by g_test_init() or gtk_init() are stripped before return.</doc>
          <type name="utf8" c:type="char***"/>
        </parameter>
        <parameter transfer-ownership="none">
          <varargs>
          </varargs>
        </parameter>
      </parameters>
    </function>
    <function name="test_list_all_types"
              c:identifier="gtk_test_list_all_types">
      <return-value transfer-ownership="none">
        <type name="GType" c:type="GType*"/>
      </return-value>
      <parameters>
        <parameter name="n_types" transfer-ownership="none">
          <type name="guint" c:type="guint*"/>
        </parameter>
      </parameters>
    </function>
    <function name="test_register_all_types"
              c:identifier="gtk_test_register_all_types">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="test_slider_get_value"
              c:identifier="gtk_test_slider_get_value">
      <return-value transfer-ownership="none">
        <type name="gdouble" c:type="double"/>
      </return-value>
      <parameters>
        <parameter name="widget" transfer-ownership="none">
          <type name="Widget" c:type="GtkWidget*"/>
        </parameter>
      </parameters>
    </function>
    <function name="test_slider_set_perc"
              c:identifier="gtk_test_slider_set_perc">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="widget" transfer-ownership="none">
          <type name="Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="percentage" transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </parameter>
      </parameters>
    </function>
    <function name="test_spin_button_click"
              c:identifier="gtk_test_spin_button_click">
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="spinner" transfer-ownership="none">
          <type name="SpinButton" c:type="GtkSpinButton*"/>
        </parameter>
        <parameter name="button" transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="upwards" transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="test_text_get" c:identifier="gtk_test_text_get">
      <return-value transfer-ownership="full">
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="widget" transfer-ownership="none">
          <type name="Widget" c:type="GtkWidget*"/>
        </parameter>
      </parameters>
    </function>
    <function name="test_text_set" c:identifier="gtk_test_text_set">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="widget" transfer-ownership="none">
          <type name="Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="string" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="test_widget_click" c:identifier="gtk_test_widget_click">
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="widget" transfer-ownership="none">
          <type name="Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="button" transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="modifiers" transfer-ownership="none">
          <type name="Gdk.ModifierType" c:type="GdkModifierType"/>
        </parameter>
      </parameters>
    </function>
    <function name="test_widget_send_key"
              c:identifier="gtk_test_widget_send_key">
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="widget" transfer-ownership="none">
          <type name="Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="keyval" transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="modifiers" transfer-ownership="none">
          <type name="Gdk.ModifierType" c:type="GdkModifierType"/>
        </parameter>
      </parameters>
    </function>
    <function name="text_layout_draw"
              c:identifier="gtk_text_layout_draw"
              introspectable="0">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="layout" transfer-ownership="none">
          <type c:type="GtkTextLayout*"/>
        </parameter>
        <parameter name="widget" transfer-ownership="none">
          <type name="Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="drawable" transfer-ownership="none">
          <type name="Gdk.Drawable" c:type="GdkDrawable*"/>
        </parameter>
        <parameter name="cursor_gc" transfer-ownership="none">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="x_offset" transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="y_offset" transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="x" transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="y" transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="width" transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="height" transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="widgets" transfer-ownership="none">
          <type name="GLib.List" c:type="GList**">
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </parameter>
      </parameters>
    </function>
    <function name="tree_get_row_drag_data"
              c:identifier="gtk_tree_get_row_drag_data">
      <doc xml:whitespace="preserve">Obtains a @tree_model and @path from selection data of target type
%GTK_TREE_MODEL_ROW. Normally called from a drag_data_received handler.
This function can only be used if @selection_data originates from the same
process that's calling this function, because a pointer to the tree model
is being passed around. If you aren't in the same process, then you'll
get memory corruption. In the #GtkTreeDragDest drag_data_received handler,
you can assume that selection data of type %GTK_TREE_MODEL_ROW is
in from the current process. The returned path must be freed with
gtk_tree_path_free().
is otherwise valid</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">%TRUE if @selection_data had target type %GTK_TREE_MODEL_ROW and</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="selection_data" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GtkSelectionData</doc>
          <type name="SelectionData" c:type="GtkSelectionData*"/>
        </parameter>
        <parameter name="tree_model" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GtkTreeModel</doc>
          <type name="TreeModel" c:type="GtkTreeModel**"/>
        </parameter>
        <parameter name="path" transfer-ownership="none">
          <doc xml:whitespace="preserve">row in @tree_model</doc>
          <type name="TreePath" c:type="GtkTreePath**"/>
        </parameter>
      </parameters>
    </function>
    <function name="tree_row_reference_deleted"
              c:identifier="gtk_tree_row_reference_deleted">
      <doc xml:whitespace="preserve">Lets a set of row reference created by gtk_tree_row_reference_new_proxy()
know that the model emitted the "row_deleted" signal.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="proxy" transfer-ownership="none">
          <doc xml:whitespace="preserve">A #GObject</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </parameter>
        <parameter name="path" transfer-ownership="none">
          <doc xml:whitespace="preserve">The path position that was deleted</doc>
          <type name="TreePath" c:type="GtkTreePath*"/>
        </parameter>
      </parameters>
    </function>
    <function name="tree_row_reference_inserted"
              c:identifier="gtk_tree_row_reference_inserted">
      <doc xml:whitespace="preserve">Lets a set of row reference created by gtk_tree_row_reference_new_proxy()
know that the model emitted the "row_inserted" signal.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="proxy" transfer-ownership="none">
          <doc xml:whitespace="preserve">A #GObject</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </parameter>
        <parameter name="path" transfer-ownership="none">
          <doc xml:whitespace="preserve">The row position that was inserted</doc>
          <type name="TreePath" c:type="GtkTreePath*"/>
        </parameter>
      </parameters>
    </function>
    <function name="tree_row_reference_reordered"
              c:identifier="gtk_tree_row_reference_reordered">
      <doc xml:whitespace="preserve">Lets a set of row reference created by gtk_tree_row_reference_new_proxy()
know that the model emitted the "rows_reordered" signal.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="proxy" transfer-ownership="none">
          <doc xml:whitespace="preserve">A #GObject</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </parameter>
        <parameter name="path" transfer-ownership="none">
          <doc xml:whitespace="preserve">The parent path of the reordered signal</doc>
          <type name="TreePath" c:type="GtkTreePath*"/>
        </parameter>
        <parameter name="iter" transfer-ownership="none">
          <doc xml:whitespace="preserve">The iter pointing to the parent of the reordered</doc>
          <type name="TreeIter" c:type="GtkTreeIter*"/>
        </parameter>
        <parameter name="new_order" transfer-ownership="none">
          <doc xml:whitespace="preserve">The new order of rows</doc>
          <type name="gint" c:type="gint*"/>
        </parameter>
      </parameters>
    </function>
    <function name="tree_set_row_drag_data"
              c:identifier="gtk_tree_set_row_drag_data">
      <doc xml:whitespace="preserve">Sets selection data of target type %GTK_TREE_MODEL_ROW. Normally used
in a drag_data_get handler.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">%TRUE if the #GtkSelectionData had the proper target type to allow us to set a tree row</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="selection_data" transfer-ownership="none">
          <doc xml:whitespace="preserve">some #GtkSelectionData</doc>
          <type name="SelectionData" c:type="GtkSelectionData*"/>
        </parameter>
        <parameter name="tree_model" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GtkTreeModel</doc>
          <type name="TreeModel" c:type="GtkTreeModel*"/>
        </parameter>
        <parameter name="path" transfer-ownership="none">
          <doc xml:whitespace="preserve">a row in @tree_model</doc>
          <type name="TreePath" c:type="GtkTreePath*"/>
        </parameter>
      </parameters>
    </function>
    <function name="true" c:identifier="gtk_true">
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
    </function>
  </namespace>
</repository>

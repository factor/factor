<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="GLib" version="2.0"/>
  <include name="GObject" version="2.0"/>
  <include name="Pango" version="1.0"/>
  <include name="PangoFT2" version="1.0"/>
  <include name="cairo" version="1.0"/>
  <include name="fontconfig" version="2.0"/>
  <include name="freetype2" version="2.0"/>
  <package name="cairo"/>
  <package name="gobject-2.0"/>
  <namespace name="PangoCairo"
             version="1.0"
             shared-library="libpangocairo-1.0.so.0"
             c:identifier-prefixes="PangoCairo"
             c:symbol-prefixes="pango_cairo">
    <class name="FcFontMap"
           c:symbol-prefix="fc_font_map"
           c:type="PangoCairoFcFontMap"
           parent="Pango.FontMap"
           glib:type-name="PangoCairoFcFontMap"
           glib:get-type="pango_cairo_fc_font_map_get_type">
      <implements name="FontMap"/>
      <field name="parent_instance" introspectable="0">
        <type c:type="PangoFcFontMap"/>
      </field>
      <field name="dpi">
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="library">
        <type name="freetype2.Library" c:type="FT_Library"/>
      </field>
    </class>
    <interface name="Font"
               c:symbol-prefix="font"
               c:type="PangoCairoFont"
               version="1.18"
               glib:type-name="PangoCairoFont"
               glib:get-type="pango_cairo_font_get_type">
      <doc xml:whitespace="preserve">#PangoCairoFont is an interface exported by fonts for
use with Cairo. The actual type of the font will depend
on the particular font technology Cairo was compiled to use.</doc>
      <prerequisite name="Pango.Font"/>
      <method name="get_scaled_font"
              c:identifier="pango_cairo_font_get_scaled_font"
              version="1.18">
        <doc xml:whitespace="preserve">Gets the #cairo_scaled_font_t used by @font.
The scaled font can be referenced and kept using
cairo_scaled_font_reference().
or %NULL if @font is %NULL.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the #cairo_scaled_font_t used by @font,</doc>
          <type name="cairo.ScaledFont" c:type="cairo_scaled_font_t*"/>
        </return-value>
      </method>
    </interface>
    <interface name="FontMap"
               c:symbol-prefix="font_map"
               c:type="PangoCairoFontMap"
               version="1.10"
               glib:type-name="PangoCairoFontMap"
               glib:get-type="pango_cairo_font_map_get_type">
      <doc xml:whitespace="preserve">#PangoCairoFontMap is an interface exported by font maps for
use with Cairo. The actual type of the font map will depend
on the particular font technology Cairo was compiled to use.</doc>
      <prerequisite name="Pango.FontMap"/>
      <method name="create_context"
              c:identifier="pango_cairo_font_map_create_context"
              version="1.10"
              introspectable="0"
              deprecated="Use pango_font_map_create_context() instead."
              deprecated-version="1.22">
        <doc xml:whitespace="preserve">Create a #PangoContext for the given fontmap.</doc>
        <return-value>
          <doc xml:whitespace="preserve">the newly created context; free with g_object_unref().</doc>
          <type name="Pango.Context" c:type="PangoContext*"/>
        </return-value>
      </method>
      <method name="get_font_type"
              c:identifier="pango_cairo_font_map_get_font_type"
              version="1.18">
        <doc xml:whitespace="preserve">Gets the type of Cairo font backend that @fontmap uses.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the #cairo_font_type_t cairo font backend type</doc>
          <type name="cairo.FontType" c:type="cairo_font_type_t"/>
        </return-value>
      </method>
      <method name="get_resolution"
              c:identifier="pango_cairo_font_map_get_resolution"
              version="1.10">
        <doc xml:whitespace="preserve">Gets the resolution for the fontmap. See pango_cairo_font_map_set_resolution()</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the resolution in "dots per inch"</doc>
          <type name="gdouble" c:type="double"/>
        </return-value>
      </method>
      <method name="set_default"
              c:identifier="pango_cairo_font_map_set_default"
              version="1.22">
        <doc xml:whitespace="preserve">Sets a default #PangoCairoFontMap to use with Cairo.
This can be used to change the Cairo font backend that the
default fontmap uses for example.  The old default font map
is unreffed and the new font map referenced.
A value of %NULL for @fontmap will cause the current default
font map to be released and a new default font
map to be created on demand, using pango_cairo_font_map_new().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="set_resolution"
              c:identifier="pango_cairo_font_map_set_resolution"
              version="1.10">
        <doc xml:whitespace="preserve">Sets the resolution for the fontmap. This is a scale factor between
points specified in a #PangoFontDescription and Cairo units. The
default value is 96, meaning that a 10 point font will be 13
units high. (10 * 96. / 72. = 13.3).</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="dpi" transfer-ownership="none">
            <doc xml:whitespace="preserve">the resolution in "dots per inch". (Physical inches aren't actually involved; the terminology is conventional.)</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
    </interface>
    <callback name="ShapeRendererFunc" c:type="PangoCairoShapeRendererFunc">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="cr" transfer-ownership="none">
          <type name="cairo.Context" c:type="cairo_t*"/>
        </parameter>
        <parameter name="attr" transfer-ownership="none">
          <type name="Pango.AttrShape" c:type="PangoAttrShape*"/>
        </parameter>
        <parameter name="do_path" transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <function name="context_get_font_options"
              c:identifier="pango_cairo_context_get_font_options"
              version="1.10">
      <doc xml:whitespace="preserve">Retrieves any font rendering options previously set with
pango_cairo_font_map_set_font_options(). This function does not report options
that are derived from the target surface by pango_cairo_update_context()
if no options have been set. This value is owned by the context
and must not be modified or freed.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">the font options previously set on the context, or %NULL</doc>
        <type name="cairo.FontOptions" c:type="cairo_font_options_t*"/>
      </return-value>
      <parameters>
        <parameter name="context" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #PangoContext, from a pangocairo font map</doc>
          <type name="Pango.Context" c:type="PangoContext*"/>
        </parameter>
      </parameters>
    </function>
    <function name="context_get_resolution"
              c:identifier="pango_cairo_context_get_resolution"
              version="1.10">
      <doc xml:whitespace="preserve">Gets the resolution for the context. See pango_cairo_context_set_resolution()
be returned if no resolution has previously been set.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">the resolution in "dots per inch". A negative value will</doc>
        <type name="gdouble" c:type="double"/>
      </return-value>
      <parameters>
        <parameter name="context" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #PangoContext, from a pangocairo font map</doc>
          <type name="Pango.Context" c:type="PangoContext*"/>
        </parameter>
      </parameters>
    </function>
    <function name="context_get_shape_renderer"
              c:identifier="pango_cairo_context_get_shape_renderer"
              version="1.18"
              introspectable="0">
      <doc xml:whitespace="preserve">Sets callback function for context to use for rendering attributes
of type %PANGO_ATTR_SHAPE.  See #PangoCairoShapeRendererFunc for
details.
Retrieves callback function and associated user data for rendering
attributes of type %PANGO_ATTR_SHAPE as set by
pango_cairo_context_set_shape_renderer(), if any.
if no shape rendering callback have been set.</doc>
      <return-value>
        <doc xml:whitespace="preserve">the shape rendering callback previously set on the context, or %NULL</doc>
        <type name="ShapeRendererFunc" c:type="PangoCairoShapeRendererFunc"/>
      </return-value>
      <parameters>
        <parameter name="context" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #PangoContext, from a pangocairo font map</doc>
          <type name="Pango.Context" c:type="PangoContext*"/>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <doc xml:whitespace="preserve">Pointer to #gpointer to return user data</doc>
          <type name="gpointer" c:type="gpointer*"/>
        </parameter>
      </parameters>
    </function>
    <function name="context_set_font_options"
              c:identifier="pango_cairo_context_set_font_options"
              version="1.10">
      <doc xml:whitespace="preserve">Sets the font options used when rendering text with this context.
These options override any options that pango_cairo_update_context()
derives from the target surface.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="context" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #PangoContext, from a pangocairo font map</doc>
          <type name="Pango.Context" c:type="PangoContext*"/>
        </parameter>
        <parameter name="options" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #cairo_font_options_t, or %NULL to unset any previously set options. A copy is made.</doc>
          <type name="cairo.FontOptions" c:type="cairo_font_options_t*"/>
        </parameter>
      </parameters>
    </function>
    <function name="context_set_resolution"
              c:identifier="pango_cairo_context_set_resolution"
              version="1.10">
      <doc xml:whitespace="preserve">Sets the resolution for the context. This is a scale factor between
points specified in a #PangoFontDescription and Cairo units. The
default value is 96, meaning that a 10 point font will be 13
units high. (10 * 96. / 72. = 13.3).</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="context" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #PangoContext, from a pangocairo font map</doc>
          <type name="Pango.Context" c:type="PangoContext*"/>
        </parameter>
        <parameter name="dpi" transfer-ownership="none">
          <doc xml:whitespace="preserve">the resolution in "dots per inch". (Physical inches aren't actually involved; the terminology is conventional.) A 0 or negative value means to use the resolution from the font map.</doc>
          <type name="gdouble" c:type="double"/>
        </parameter>
      </parameters>
    </function>
    <function name="context_set_shape_renderer"
              c:identifier="pango_cairo_context_set_shape_renderer"
              version="1.18">
      <doc xml:whitespace="preserve">Sets callback function for context to use for rendering attributes
of type %PANGO_ATTR_SHAPE.  See #PangoCairoShapeRendererFunc for
details.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="context" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #PangoContext, from a pangocairo font map</doc>
          <type name="Pango.Context" c:type="PangoContext*"/>
        </parameter>
        <parameter name="func"
                   transfer-ownership="none"
                   scope="notified"
                   closure="2"
                   destroy="3">
          <doc xml:whitespace="preserve">Callback function for rendering attributes of type %PANGO_ATTR_SHAPE, or %NULL to disable shape rendering.</doc>
          <type name="ShapeRendererFunc" c:type="PangoCairoShapeRendererFunc"/>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <doc xml:whitespace="preserve">User data that will be passed to @func.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="dnotify" transfer-ownership="none" scope="async">
          <doc xml:whitespace="preserve">Callback that will be called when the context is freed to release @data, or %NULL.</doc>
          <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
        </parameter>
      </parameters>
    </function>
    <function name="create_context"
              c:identifier="pango_cairo_create_context"
              version="1.22"
              introspectable="0">
      <doc xml:whitespace="preserve">Creates a context object set up to match the current transformation
and target surface of the Cairo context.  This context can then be
used to create a layout using pango_layout_new().
This function is a convenience function that creates a context using
the default font map, then updates it to @cr.  If you just need to
create a layout for use with @cr and do not need to access #PangoContext
directly, you can use pango_cairo_create_layout() instead.
g_object_unref().</doc>
      <return-value>
        <doc xml:whitespace="preserve">the newly created #PangoContext. Free with</doc>
        <type name="Pango.Context" c:type="PangoContext*"/>
      </return-value>
      <parameters>
        <parameter name="cr" transfer-ownership="none">
          <doc xml:whitespace="preserve">a Cairo context</doc>
          <type name="cairo.Context" c:type="cairo_t*"/>
        </parameter>
      </parameters>
    </function>
    <function name="create_layout"
              c:identifier="pango_cairo_create_layout"
              version="1.10"
              introspectable="0">
      <doc xml:whitespace="preserve">Creates a layout object set up to match the current transformation
and target surface of the Cairo context.  This layout can then be
used for text measurement with functions like
pango_layout_get_size() or drawing with functions like
pango_cairo_show_layout(). If you change the transformation
or target surface for @cr, you need to call pango_cairo_update_layout()
This function is the most convenient way to use Cairo with Pango,
however it is slightly inefficient since it creates a separate
#PangoContext object for each layout. This might matter in an
application that was laying out large amounts of text.
g_object_unref().</doc>
      <return-value>
        <doc xml:whitespace="preserve">the newly created #PangoLayout. Free with</doc>
        <type name="Pango.Layout" c:type="PangoLayout*"/>
      </return-value>
      <parameters>
        <parameter name="cr" transfer-ownership="none">
          <doc xml:whitespace="preserve">a Cairo context</doc>
          <type name="cairo.Context" c:type="cairo_t*"/>
        </parameter>
      </parameters>
    </function>
    <function name="error_underline_path"
              c:identifier="pango_cairo_error_underline_path"
              version="1.14">
      <doc xml:whitespace="preserve">Add a squiggly line to the current path in the specified cairo context that
approximately covers the given rectangle in the style of an underline used
to indicate a spelling error.  (The width of the underline is rounded to an
integer number of up/down segments and the resulting rectangle is centered
in the original rectangle)</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="cr" transfer-ownership="none">
          <doc xml:whitespace="preserve">a Cairo context</doc>
          <type name="cairo.Context" c:type="cairo_t*"/>
        </parameter>
        <parameter name="x" transfer-ownership="none">
          <doc xml:whitespace="preserve">The X coordinate of one corner of the rectangle</doc>
          <type name="gdouble" c:type="double"/>
        </parameter>
        <parameter name="y" transfer-ownership="none">
          <doc xml:whitespace="preserve">The Y coordinate of one corner of the rectangle</doc>
          <type name="gdouble" c:type="double"/>
        </parameter>
        <parameter name="width" transfer-ownership="none">
          <doc xml:whitespace="preserve">Non-negative width of the rectangle</doc>
          <type name="gdouble" c:type="double"/>
        </parameter>
        <parameter name="height" transfer-ownership="none">
          <doc xml:whitespace="preserve">Non-negative height of the rectangle</doc>
          <type name="gdouble" c:type="double"/>
        </parameter>
      </parameters>
    </function>
    <function name="font_map_get_default"
              c:identifier="pango_cairo_font_map_get_default"
              version="1.10"
              introspectable="0">
      <doc xml:whitespace="preserve">Gets a default #PangoCairoFontMap to use with Cairo.
Note that the type of the returned object will depend
on the particular font backend Cairo was compiled to use;
You generally should only use the #PangoFontMap and
#PangoCairoFontMap interfaces on the returned object.
The default Cairo fontmap can be changed by using
pango_cairo_font_map_set_default().  This can be used to
change the Cairo font backend that the default fontmap
uses for example.
object is owned by Pango and must not be freed.</doc>
      <return-value>
        <doc xml:whitespace="preserve">the default Cairo fontmap for Pango. This</doc>
        <type name="Pango.FontMap" c:type="PangoFontMap*"/>
      </return-value>
    </function>
    <function name="font_map_new"
              c:identifier="pango_cairo_font_map_new"
              version="1.10"
              introspectable="0">
      <doc xml:whitespace="preserve">Creates a new #PangoCairoFontMap object; a fontmap is used
to cache information about available fonts, and holds
certain global parameters such as the resolution.
In most cases, you can use pango_cairo_font_map_get_default()
instead.
Note that the type of the returned object will depend
on the particular font backend Cairo was compiled to use;
You generally should only use the #PangoFontMap and
#PangoCairoFontMap interfaces on the returned object.
be freed with g_object_unref().</doc>
      <return-value>
        <doc xml:whitespace="preserve">the newly allocated #PangoFontMap, which should</doc>
        <type name="Pango.FontMap" c:type="PangoFontMap*"/>
      </return-value>
    </function>
    <function name="font_map_new_for_font_type"
              c:identifier="pango_cairo_font_map_new_for_font_type"
              version="1.18"
              introspectable="0">
      <doc xml:whitespace="preserve">Creates a new #PangoCairoFontMap object of the type suitable
to be used with cairo font backend of type @fonttype.
In most cases one should simply use @pango_cairo_font_map_new(),
or in fact in most of those cases, just use
which should be freed with g_object_unref(),
or %NULL if the requested cairo font backend is
not supported / compiled in.</doc>
      <return-value>
        <doc xml:whitespace="preserve">the newly allocated #PangoFontMap of suitable type</doc>
        <type name="Pango.FontMap" c:type="PangoFontMap*"/>
      </return-value>
      <parameters>
        <parameter name="fonttype" transfer-ownership="none">
          <doc xml:whitespace="preserve">desired #cairo_font_type_t</doc>
          <type name="cairo.FontType" c:type="cairo_font_type_t"/>
        </parameter>
      </parameters>
    </function>
    <function name="glyph_string_path"
              c:identifier="pango_cairo_glyph_string_path">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="cr" transfer-ownership="none">
          <type name="cairo.Context" c:type="cairo_t*"/>
        </parameter>
        <parameter name="font" transfer-ownership="none">
          <type name="Pango.Font" c:type="PangoFont*"/>
        </parameter>
        <parameter name="glyphs" transfer-ownership="none">
          <type name="Pango.GlyphString" c:type="PangoGlyphString*"/>
        </parameter>
      </parameters>
    </function>
    <function name="layout_line_path"
              c:identifier="pango_cairo_layout_line_path"
              version="1.10">
      <doc xml:whitespace="preserve">Adds the text in #PangoLayoutLine to the current path in the
specified cairo context.  The origin of the glyphs (the left edge
of the line) will be at the current point of the cairo context.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="cr" transfer-ownership="none">
          <doc xml:whitespace="preserve">a Cairo context</doc>
          <type name="cairo.Context" c:type="cairo_t*"/>
        </parameter>
        <parameter name="line" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #PangoLayoutLine</doc>
          <type name="Pango.LayoutLine" c:type="PangoLayoutLine*"/>
        </parameter>
      </parameters>
    </function>
    <function name="layout_path"
              c:identifier="pango_cairo_layout_path"
              version="1.10">
      <doc xml:whitespace="preserve">Adds the text in a #PangoLayout to the current path in the
specified cairo context.  The top-left corner of the #PangoLayout
will be at the current point of the cairo context.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="cr" transfer-ownership="none">
          <doc xml:whitespace="preserve">a Cairo context</doc>
          <type name="cairo.Context" c:type="cairo_t*"/>
        </parameter>
        <parameter name="layout" transfer-ownership="none">
          <doc xml:whitespace="preserve">a Pango layout</doc>
          <type name="Pango.Layout" c:type="PangoLayout*"/>
        </parameter>
      </parameters>
    </function>
    <function name="show_error_underline"
              c:identifier="pango_cairo_show_error_underline"
              version="1.14">
      <doc xml:whitespace="preserve">Draw a squiggly line in the specified cairo context that approximately
covers the given rectangle in the style of an underline used to indicate a
spelling error.  (The width of the underline is rounded to an integer
number of up/down segments and the resulting rectangle is centered in the
original rectangle)</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="cr" transfer-ownership="none">
          <doc xml:whitespace="preserve">a Cairo context</doc>
          <type name="cairo.Context" c:type="cairo_t*"/>
        </parameter>
        <parameter name="x" transfer-ownership="none">
          <doc xml:whitespace="preserve">The X coordinate of one corner of the rectangle</doc>
          <type name="gdouble" c:type="double"/>
        </parameter>
        <parameter name="y" transfer-ownership="none">
          <doc xml:whitespace="preserve">The Y coordinate of one corner of the rectangle</doc>
          <type name="gdouble" c:type="double"/>
        </parameter>
        <parameter name="width" transfer-ownership="none">
          <doc xml:whitespace="preserve">Non-negative width of the rectangle</doc>
          <type name="gdouble" c:type="double"/>
        </parameter>
        <parameter name="height" transfer-ownership="none">
          <doc xml:whitespace="preserve">Non-negative height of the rectangle</doc>
          <type name="gdouble" c:type="double"/>
        </parameter>
      </parameters>
    </function>
    <function name="show_glyph_item"
              c:identifier="pango_cairo_show_glyph_item"
              version="1.22">
      <doc xml:whitespace="preserve">Draws the glyphs in @glyph_item in the specified cairo context,
embedding the text associated with the glyphs in the output if the
output format supports it (PDF for example), otherwise it acts
similar to pango_cairo_show_glyph_string().
The origin of the glyphs (the left edge of the baseline) will
be drawn at the current point of the cairo context.
Note that @text is the start of the text for layout, which is then
indexed by &lt;literal&gt;@glyph_item-&gt;item-&gt;offset&lt;/literal&gt;.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="cr" transfer-ownership="none">
          <doc xml:whitespace="preserve">a Cairo context</doc>
          <type name="cairo.Context" c:type="cairo_t*"/>
        </parameter>
        <parameter name="text" transfer-ownership="none">
          <doc xml:whitespace="preserve">the UTF-8 text that @glyph_item refers to</doc>
          <type name="utf8" c:type="char*"/>
        </parameter>
        <parameter name="glyph_item" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #PangoGlyphItem</doc>
          <type name="Pango.GlyphItem" c:type="PangoGlyphItem*"/>
        </parameter>
      </parameters>
    </function>
    <function name="show_glyph_string"
              c:identifier="pango_cairo_show_glyph_string"
              version="1.10">
      <doc xml:whitespace="preserve">Draws the glyphs in @glyphs in the specified cairo context.
The origin of the glyphs (the left edge of the baseline) will
be drawn at the current point of the cairo context.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="cr" transfer-ownership="none">
          <doc xml:whitespace="preserve">a Cairo context</doc>
          <type name="cairo.Context" c:type="cairo_t*"/>
        </parameter>
        <parameter name="font" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #PangoFont from a #PangoCairoFontMap</doc>
          <type name="Pango.Font" c:type="PangoFont*"/>
        </parameter>
        <parameter name="glyphs" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #PangoGlyphString</doc>
          <type name="Pango.GlyphString" c:type="PangoGlyphString*"/>
        </parameter>
      </parameters>
    </function>
    <function name="show_layout"
              c:identifier="pango_cairo_show_layout"
              version="1.10">
      <doc xml:whitespace="preserve">Draws a #PangoLayout in the specified cairo context.
The top-left corner of the #PangoLayout will be drawn
at the current point of the cairo context.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="cr" transfer-ownership="none">
          <doc xml:whitespace="preserve">a Cairo context</doc>
          <type name="cairo.Context" c:type="cairo_t*"/>
        </parameter>
        <parameter name="layout" transfer-ownership="none">
          <doc xml:whitespace="preserve">a Pango layout</doc>
          <type name="Pango.Layout" c:type="PangoLayout*"/>
        </parameter>
      </parameters>
    </function>
    <function name="show_layout_line"
              c:identifier="pango_cairo_show_layout_line"
              version="1.10">
      <doc xml:whitespace="preserve">Draws a #PangoLayoutLine in the specified cairo context.
The origin of the glyphs (the left edge of the line) will
be drawn at the current point of the cairo context.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="cr" transfer-ownership="none">
          <doc xml:whitespace="preserve">a Cairo context</doc>
          <type name="cairo.Context" c:type="cairo_t*"/>
        </parameter>
        <parameter name="line" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #PangoLayoutLine</doc>
          <type name="Pango.LayoutLine" c:type="PangoLayoutLine*"/>
        </parameter>
      </parameters>
    </function>
    <function name="update_context"
              c:identifier="pango_cairo_update_context"
              version="1.10">
      <doc xml:whitespace="preserve">Updates a #PangoContext previously created for use with Cairo to
match the current transformation and target surface of a Cairo
context. If any layouts have been created for the context,
it's necessary to call pango_layout_context_changed() on those
layouts.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="cr" transfer-ownership="none">
          <doc xml:whitespace="preserve">a Cairo context</doc>
          <type name="cairo.Context" c:type="cairo_t*"/>
        </parameter>
        <parameter name="context" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #PangoContext, from a pangocairo font map</doc>
          <type name="Pango.Context" c:type="PangoContext*"/>
        </parameter>
      </parameters>
    </function>
    <function name="update_layout"
              c:identifier="pango_cairo_update_layout"
              version="1.10">
      <doc xml:whitespace="preserve">Updates the private #PangoContext of a #PangoLayout created with
pango_cairo_create_layout() to match the current transformation
and target surface of a Cairo context.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="cr" transfer-ownership="none">
          <doc xml:whitespace="preserve">a Cairo context</doc>
          <type name="cairo.Context" c:type="cairo_t*"/>
        </parameter>
        <parameter name="layout" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #PangoLayout, from pango_cairo_create_layout()</doc>
          <type name="Pango.Layout" c:type="PangoLayout*"/>
        </parameter>
      </parameters>
    </function>
  </namespace>
</repository>

<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.0"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="GLib" version="2.0"/>
  <include name="GModule" version="2.0"/>
  <include name="GObject" version="2.0"/>
  <include name="Gst" version="0.10"/>
  <include name="GstBase" version="0.10"/>
  <include name="libxml2" version="2.0"/>
  <package name="gstreamer-0.10"/>
  <package name="gstreamer-base-0.10"/>
  <c:include name="gst/app/gstappbuffer.h"/>
  <c:include name="gst/app/gstappsink.h"/>
  <c:include name="gst/app/gstappsrc.h"/>
  <namespace name="GstApp"
             version="0.10"
             shared-library="libgstapp-0.10.so.0"
             c:prefix="Gst">
    <record name="AppBuffer" c:type="GstAppBuffer">
      <field name="buffer" writable="1">
        <type name="Gst.Buffer" c:type="GstBuffer"/>
      </field>
      <field name="finalize" writable="1">
        <type name="AppBufferFinalizeFunc" c:type="GstAppBufferFinalizeFunc"/>
      </field>
      <field name="priv" writable="1">
        <type name="any" c:type="void*"/>
      </field>
      <constructor name="new" c:identifier="gst_app_buffer_new">
        <return-value transfer-ownership="full">
          <type name="AppBuffer" c:type="GstBuffer*"/>
        </return-value>
        <parameters>
          <parameter name="data" transfer-ownership="none">
            <type name="any" c:type="void*"/>
          </parameter>
          <parameter name="length" transfer-ownership="none">
            <type name="int" c:type="int"/>
          </parameter>
          <parameter name="finalize" transfer-ownership="none" scope="call">
            <type name="AppBufferFinalizeFunc"
                  c:type="GstAppBufferFinalizeFunc"/>
          </parameter>
          <parameter name="priv" transfer-ownership="none">
            <type name="any" c:type="void*"/>
          </parameter>
        </parameters>
      </constructor>
    </record>
    <record name="AppBufferClass" c:type="GstAppBufferClass">
      <field name="buffer_class" writable="1">
        <type name="Gst.BufferClass" c:type="GstBufferClass"/>
      </field>
    </record>
    <callback name="AppBufferFinalizeFunc" c:type="GstAppBufferFinalizeFunc">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="priv" transfer-ownership="none">
          <type name="any" c:type="void*"/>
        </parameter>
      </parameters>
    </callback>
    <class name="AppSink"
           c:type="GstAppSink"
           parent="GstBase.BaseSink"
           glib:type-name="GstAppSink"
           glib:get-type="gst_app_sink_get_type"
           glib:type-struct="AppSinkClass">
      <implements name="Gst.URIHandler"/>
      <method name="set_caps"
              c:identifier="gst_app_sink_set_caps"
              doc="Set the capabilities on the appsink element.  This function takes
a copy of the caps structure. After calling this method, the sink will only
accept caps that match @caps. If @caps is non-fixed, you must check the caps
on the buffers to get the actual used caps."
              version="0.10.22">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="caps" transfer-ownership="none">
            <type name="Gst.Caps" c:type="GstCaps*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_caps"
              c:identifier="gst_app_sink_get_caps"
              doc="Get the configured caps on @appsink."
              version="0.10.22">
        <return-value transfer-ownership="full" doc="after usage.">
          <type name="Gst.Caps" c:type="GstCaps*"/>
        </return-value>
      </method>
      <method name="is_eos"
              c:identifier="gst_app_sink_is_eos"
              doc="Check if @appsink is EOS, which is when no more buffers can be pulled because
an EOS event was received.
This function also returns %TRUE when the appsink is not in the PAUSED or
PLAYING state."
              version="0.10.22">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="set_emit_signals"
              c:identifier="gst_app_sink_set_emit_signals"
              doc="Make appsink emit the &quot;new-preroll&quot; and &quot;new-buffer&quot; signals. This option is
by default disabled because signal emission is expensive and unneeded when
the application prefers to operate in pull mode."
              version="0.10.22">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="emit" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_emit_signals"
              c:identifier="gst_app_sink_get_emit_signals"
              doc="Check if appsink will emit the &quot;new-preroll&quot; and &quot;new-buffer&quot; signals.
signals."
              version="0.10.22">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="set_max_buffers"
              c:identifier="gst_app_sink_set_max_buffers"
              doc="Set the maximum amount of buffers that can be queued in @appsink. After this
amount of buffers are queued in appsink, any more buffers will block upstream
elements until a buffer is pulled from @appsink."
              version="0.10.22">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="max" transfer-ownership="none">
            <type name="uint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_max_buffers"
              c:identifier="gst_app_sink_get_max_buffers"
              doc="Get the maximum amount of buffers that can be queued in @appsink."
              version="0.10.22">
        <return-value transfer-ownership="none">
          <type name="uint" c:type="guint"/>
        </return-value>
      </method>
      <method name="set_drop"
              c:identifier="gst_app_sink_set_drop"
              doc="Instruct @appsink to drop old buffers when the maximum amount of queued
buffers is reached."
              version="0.10.22">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="drop" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_drop"
              c:identifier="gst_app_sink_get_drop"
              doc="Check if @appsink will drop old buffers when the maximum amount of queued
buffers is reached.
filled."
              version="0.10.22">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="pull_preroll"
              c:identifier="gst_app_sink_pull_preroll"
              doc="Get the last preroll buffer in @appsink. This was the buffer that caused the
appsink to preroll in the PAUSED state. This buffer can be pulled many times
and remains available to the application even after EOS.
This function is typically used when dealing with a pipeline in the PAUSED
state. Calling this function after doing a seek will give the buffer right
after the seek position.
Note that the preroll buffer will also be returned as the first buffer
when calling gst_app_sink_pull_buffer().
If an EOS event was received before any buffers, this function returns
%NULL. Use gst_app_sink_is_eos () to check for the EOS condition.
This function blocks until a preroll buffer or EOS is received or the appsink
element is set to the READY/NULL state."
              version="0.10.22">
        <return-value transfer-ownership="full">
          <type name="Gst.Buffer" c:type="GstBuffer*"/>
        </return-value>
      </method>
      <method name="pull_buffer"
              c:identifier="gst_app_sink_pull_buffer"
              doc="This function blocks until a buffer or EOS becomes available or the appsink
element is set to the READY/NULL state.
This function will only return buffers when the appsink is in the PLAYING
state. All rendered buffers will be put in a queue so that the application
can pull buffers at its own rate. Note that when the application does not
pull buffers fast enough, the queued buffers could consume a lot of memory,
especially when dealing with raw video frames.
If an EOS event was received before any buffers, this function returns
%NULL. Use gst_app_sink_is_eos () to check for the EOS condition."
              version="0.10.22">
        <return-value transfer-ownership="full">
          <type name="Gst.Buffer" c:type="GstBuffer*"/>
        </return-value>
      </method>
      <method name="pull_buffer_list"
              c:identifier="gst_app_sink_pull_buffer_list"
              doc="This function blocks until a buffer list or EOS becomes available or the
appsink element is set to the READY/NULL state.
This function will only return buffer lists when the appsink is in the
PLAYING state. All rendered buffer lists will be put in a queue so that
the application can pull buffer lists at its own rate. Note that when
the application does not pull buffer lists fast enough, the queued buffer
lists could consume a lot of memory, especially when dealing with raw
video frames.
If an EOS event was received before any buffer lists, this function returns
%NULL. Use gst_app_sink_is_eos () to check for the EOS condition.">
        <return-value transfer-ownership="full">
          <type name="Gst.BufferList" c:type="GstBufferList*"/>
        </return-value>
      </method>
      <method name="set_callbacks"
              c:identifier="gst_app_sink_set_callbacks"
              doc="Set callbacks which will be executed for each new preroll, new buffer and eos.
This is an alternative to using the signals, it has lower overhead and is thus
less expensive, but also less flexible.
If callbacks are installed, no signals will be emited for performance
reasons."
              version="0.10.23">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="callbacks" transfer-ownership="none">
            <type name="AppSinkCallbacks" c:type="GstAppSinkCallbacks*"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
          <parameter name="notify" transfer-ownership="none" scope="call">
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </method>
      <property name="caps" writable="1">
        <type name="Gst.Caps" c:type="GstCaps"/>
      </property>
      <property name="drop" writable="1">
        <type name="boolean" c:type="gboolean"/>
      </property>
      <property name="emit-signals" writable="1">
        <type name="boolean" c:type="gboolean"/>
      </property>
      <property name="eos">
        <type name="boolean" c:type="gboolean"/>
      </property>
      <property name="max-buffers" writable="1">
        <type name="uint" c:type="guint"/>
      </property>
      <field name="basesink">
        <type name="GstBase.BaseSink" c:type="GstBaseSink"/>
      </field>
      <field name="priv">
        <type name="AppSinkPrivate" c:type="GstAppSinkPrivate*"/>
      </field>
      <field name="_gst_reserved">
        <array zero-terminated="0" c:type="gpointer" fixed-size="4">
          <type name="any"/>
        </array>
      </field>
      <glib:signal name="eos"
                   doc="Signal that the end-of-stream has been reached. This signal is emited from
the steaming thread.">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="new-buffer"
                   doc="Signal that a new buffer is available.
This signal is emited from the steaming thread and only when the
&quot;emit-signals&quot; property is %TRUE.
The new buffer can be retrieved with the &quot;pull-buffer&quot; action
signal or gst_app_sink_pull_buffer() either from this signal callback
or from any other thread.
Note that this signal is only emited when the &quot;emit-signals&quot; property is
set to %TRUE, which it is not by default for performance reasons.">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="new-buffer-list"
                   doc="Signal that a new bufferlist is available.
This signal is emited from the steaming thread and only when the
&quot;emit-signals&quot; property is %TRUE.
The new buffer can be retrieved with the &quot;pull-buffer-list&quot; action
signal or gst_app_sink_pull_buffe_listr() either from this signal callback
or from any other thread.
Note that this signal is only emited when the &quot;emit-signals&quot; property is
set to %TRUE, which it is not by default for performance reasons.">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="new-preroll"
                   doc="Signal that a new preroll buffer is available.
This signal is emited from the steaming thread and only when the
&quot;emit-signals&quot; property is %TRUE.
The new preroll buffer can be retrieved with the &quot;pull-preroll&quot; action
signal or gst_app_sink_pull_preroll() either from this signal callback
or from any other thread.
Note that this signal is only emited when the &quot;emit-signals&quot; property is
set to %TRUE, which it is not by default for performance reasons.">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="pull-buffer"
                   doc="This function blocks until a buffer or EOS becomes available or the appsink
element is set to the READY/NULL state.
This function will only return buffers when the appsink is in the PLAYING
state. All rendered buffers will be put in a queue so that the application
can pull buffers at its own rate.
Note that when the application does not pull buffers fast enough, the
queued buffers could consume a lot of memory, especially when dealing with
raw video frames. It&apos;s possible to control the behaviour of the queue with
the &quot;drop&quot; and &quot;max-buffers&quot; properties.
If an EOS event was received before any buffers, this function returns
%NULL. Use gst_app_sink_is_eos () to check for the EOS condition.">
        <return-value transfer-ownership="full">
          <type name="Gst.Buffer" c:type="GstBuffer"/>
        </return-value>
      </glib:signal>
      <glib:signal name="pull-buffer-list"
                   doc="This function blocks until a buffer list or EOS becomes available or the appsink
element is set to the READY/NULL state.
This function will only return bufferlists when the appsink is in the PLAYING
state. All rendered bufferlists will be put in a queue so that the application
can pull bufferlists at its own rate.
Note that when the application does not pull bufferlists fast enough, the
queued bufferlists could consume a lot of memory, especially when dealing with
raw video frames. It&apos;s possible to control the behaviour of the queue with
the &quot;drop&quot; and &quot;max-buffers&quot; properties.
If an EOS event was received before any buffers, this function returns
%NULL. Use gst_app_sink_is_eos () to check for the EOS condition.">
        <return-value transfer-ownership="full">
          <type name="Gst.BufferList" c:type="GstBufferList"/>
        </return-value>
      </glib:signal>
      <glib:signal name="pull-preroll"
                   doc="Get the last preroll buffer in @appsink. This was the buffer that caused the
appsink to preroll in the PAUSED state. This buffer can be pulled many times
and remains available to the application even after EOS.
This function is typically used when dealing with a pipeline in the PAUSED
state. Calling this function after doing a seek will give the buffer right
after the seek position.
Note that the preroll buffer will also be returned as the first buffer
when calling gst_app_sink_pull_buffer() or the &quot;pull-buffer&quot; action signal.
If an EOS event was received before any buffers, this function returns
%NULL. Use gst_app_sink_is_eos () to check for the EOS condition.
This function blocks until a preroll buffer or EOS is received or the appsink
element is set to the READY/NULL state.">
        <return-value transfer-ownership="full">
          <type name="Gst.Buffer" c:type="GstBuffer"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="AppSinkCallbacks"
            c:type="GstAppSinkCallbacks"
            doc="is called from the steaming thread.
This callback is called from the steaming thread.
The new preroll buffer can be retrieved with
gst_app_sink_pull_preroll() either from this callback
or from any other thread.
This callback is called from the steaming thread.
The new buffer can be retrieved with
gst_app_sink_pull_buffer() either from this callback
or from any other thread.
This callback is called from the steaming thread.
The new bufferlist can be retrieved with
gst_app_sink_pull_buffer_list() either from this callback
or from any other thread.
A set of callbacks that can be installed on the appsink with
gst_app_sink_set_callbacks()."
            version="0.10.23">
      <field name="eos">
        <type name="any" c:type="pointer"/>
      </field>
      <field name="new_preroll">
        <type name="any" c:type="pointer"/>
      </field>
      <field name="new_buffer">
        <type name="any" c:type="pointer"/>
      </field>
      <field name="new_buffer_list">
        <type name="any" c:type="pointer"/>
      </field>
      <field name="_gst_reserved" writable="1">
        <array zero-terminated="0" c:type="gpointer" fixed-size="3">
          <type name="any"/>
        </array>
      </field>
    </record>
    <record name="AppSinkClass"
            c:type="GstAppSinkClass"
            glib:is-gtype-struct-for="AppSink">
      <field name="basesink_class">
        <type name="GstBase.BaseSinkClass" c:type="GstBaseSinkClass"/>
      </field>
      <field name="eos">
        <callback name="eos" c:type="eos">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="sink" transfer-ownership="none">
              <type name="AppSink" c:type="GstAppSink*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="new_preroll">
        <callback name="new_preroll" c:type="new_preroll">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="sink" transfer-ownership="none">
              <type name="AppSink" c:type="GstAppSink*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="new_buffer">
        <callback name="new_buffer" c:type="new_buffer">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="sink" transfer-ownership="none">
              <type name="AppSink" c:type="GstAppSink*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="pull_preroll">
        <callback name="pull_preroll" c:type="pull_preroll">
          <return-value transfer-ownership="full">
            <type name="Gst.Buffer" c:type="GstBuffer*"/>
          </return-value>
          <parameters>
            <parameter name="sink" transfer-ownership="none">
              <type name="AppSink" c:type="GstAppSink*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="pull_buffer">
        <callback name="pull_buffer" c:type="pull_buffer">
          <return-value transfer-ownership="full">
            <type name="Gst.Buffer" c:type="GstBuffer*"/>
          </return-value>
          <parameters>
            <parameter name="sink" transfer-ownership="none">
              <type name="AppSink" c:type="GstAppSink*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="new_buffer_list">
        <callback name="new_buffer_list" c:type="new_buffer_list">
          <return-value transfer-ownership="full">
            <type name="Gst.BufferList" c:type="GstBufferList*"/>
          </return-value>
          <parameters>
            <parameter name="sink" transfer-ownership="none">
              <type name="AppSink" c:type="GstAppSink*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="pull_buffer_list">
        <callback name="pull_buffer_list" c:type="pull_buffer_list">
          <return-value transfer-ownership="full">
            <type name="Gst.BufferList" c:type="GstBufferList*"/>
          </return-value>
          <parameters>
            <parameter name="sink" transfer-ownership="none">
              <type name="AppSink" c:type="GstAppSink*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_gst_reserved">
        <array zero-terminated="0" c:type="gpointer" fixed-size="2">
          <type name="any"/>
        </array>
      </field>
    </record>
    <record name="AppSinkPrivate" c:type="GstAppSinkPrivate">
    </record>
    <class name="AppSrc"
           c:type="GstAppSrc"
           parent="GstBase.BaseSrc"
           glib:type-name="GstAppSrc"
           glib:get-type="gst_app_src_get_type"
           glib:type-struct="AppSrcClass">
      <implements name="Gst.URIHandler"/>
      <method name="set_caps"
              c:identifier="gst_app_src_set_caps"
              doc="Set the capabilities on the appsrc element.  This function takes
a copy of the caps structure. After calling this method, the source will
only produce caps that match @caps. @caps must be fixed and the caps on the
buffers must match the caps or left NULL."
              version="0.10.22">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="caps" transfer-ownership="none">
            <type name="Gst.Caps" c:type="GstCaps*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_caps"
              c:identifier="gst_app_src_get_caps"
              doc="Get the configured caps on @appsrc."
              version="0.10.22">
        <return-value transfer-ownership="full" doc="after usage.">
          <type name="Gst.Caps" c:type="GstCaps*"/>
        </return-value>
      </method>
      <method name="set_size"
              c:identifier="gst_app_src_set_size"
              doc="Set the size of the stream in bytes. A value of -1 means that the size is
not known."
              version="0.10.22">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="size" transfer-ownership="none">
            <type name="int64" c:type="gint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_size"
              c:identifier="gst_app_src_get_size"
              doc="Get the size of the stream in bytes. A value of -1 means that the size is
not known."
              version="0.10.22">
        <return-value transfer-ownership="none">
          <type name="int64" c:type="gint64"/>
        </return-value>
      </method>
      <method name="set_stream_type"
              c:identifier="gst_app_src_set_stream_type"
              doc="Set the stream type on @appsrc. For seekable streams, the &quot;seek&quot; signal must
be connected to.
A stream_type stream"
              version="0.10.22">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="type" transfer-ownership="none">
            <type name="AppStreamType" c:type="GstAppStreamType"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_stream_type"
              c:identifier="gst_app_src_get_stream_type"
              doc="Get the stream type. Control the stream type of @appsrc
with gst_app_src_set_stream_type()."
              version="0.10.22">
        <return-value transfer-ownership="full">
          <type name="AppStreamType" c:type="GstAppStreamType"/>
        </return-value>
      </method>
      <method name="set_max_bytes"
              c:identifier="gst_app_src_set_max_bytes"
              doc="Set the maximum amount of bytes that can be queued in @appsrc.
After the maximum amount of bytes are queued, @appsrc will emit the
&quot;enough-data&quot; signal."
              version="0.10.22">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="max" transfer-ownership="none">
            <type name="uint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_max_bytes"
              c:identifier="gst_app_src_get_max_bytes"
              doc="Get the maximum amount of bytes that can be queued in @appsrc."
              version="0.10.22">
        <return-value transfer-ownership="none">
          <type name="uint64" c:type="guint64"/>
        </return-value>
      </method>
      <method name="set_latency"
              c:identifier="gst_app_src_set_latency"
              doc="Configure the @min and @max latency in @src. If @min is set to -1, the
default latency calculations for pseudo-live sources will be used."
              version="0.10.22">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="min" transfer-ownership="none">
            <type name="uint64" c:type="guint64"/>
          </parameter>
          <parameter name="max" transfer-ownership="none">
            <type name="uint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_latency"
              c:identifier="gst_app_src_get_latency"
              doc="Retrieve the min and max latencies in @min and @max respectively."
              version="0.10.22">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="min" direction="out" transfer-ownership="full">
            <type name="uint64" c:type="guint64*"/>
          </parameter>
          <parameter name="max" direction="out" transfer-ownership="full">
            <type name="uint64" c:type="guint64*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_emit_signals"
              c:identifier="gst_app_src_set_emit_signals"
              doc="Make appsrc emit the &quot;new-preroll&quot; and &quot;new-buffer&quot; signals. This option is
by default disabled because signal emission is expensive and unneeded when
the application prefers to operate in pull mode."
              version="0.10.23">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="emit" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_emit_signals"
              c:identifier="gst_app_src_get_emit_signals"
              doc="Check if appsrc will emit the &quot;new-preroll&quot; and &quot;new-buffer&quot; signals.
signals."
              version="0.10.23">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="push_buffer"
              c:identifier="gst_app_src_push_buffer"
              doc="Adds a buffer to the queue of buffers that the appsrc element will
push to its source pad.  This function takes ownership of the buffer.
When the block property is TRUE, this function can block until free
space becomes available in the queue.
#GST_FLOW_WRONG_STATE when @appsrc is not PAUSED or PLAYING.
#GST_FLOW_UNEXPECTED when EOS occured."
              version="0.10.22">
        <return-value transfer-ownership="full">
          <type name="Gst.FlowReturn" c:type="GstFlowReturn"/>
        </return-value>
        <parameters>
          <parameter name="buffer" transfer-ownership="none">
            <type name="Gst.Buffer" c:type="GstBuffer*"/>
          </parameter>
        </parameters>
      </method>
      <method name="end_of_stream"
              c:identifier="gst_app_src_end_of_stream"
              doc="Indicates to the appsrc element that the last buffer queued in the
element is the last buffer of the stream.
#GST_FLOW_WRONG_STATE when @appsrc is not PAUSED or PLAYING."
              version="0.10.22">
        <return-value transfer-ownership="full">
          <type name="Gst.FlowReturn" c:type="GstFlowReturn"/>
        </return-value>
      </method>
      <method name="set_callbacks"
              c:identifier="gst_app_src_set_callbacks"
              doc="Set callbacks which will be executed when data is needed, enough data has
been collected or when a seek should be performed.
This is an alternative to using the signals, it has lower overhead and is thus
less expensive, but also less flexible.
If callbacks are installed, no signals will be emited for performance
reasons."
              version="0.10.23">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="callbacks" transfer-ownership="none">
            <type name="AppSrcCallbacks" c:type="GstAppSrcCallbacks*"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
          <parameter name="notify" transfer-ownership="none" scope="call">
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </method>
      <property name="block" writable="1">
        <type name="boolean" c:type="gboolean"/>
      </property>
      <property name="caps" writable="1">
        <type name="Gst.Caps" c:type="GstCaps"/>
      </property>
      <property name="emit-signals" writable="1">
        <type name="boolean" c:type="gboolean"/>
      </property>
      <property name="format" writable="1">
        <type name="Gst.Format" c:type="GstFormat"/>
      </property>
      <property name="is-live" writable="1">
        <type name="boolean" c:type="gboolean"/>
      </property>
      <property name="max-bytes" writable="1">
        <type name="uint64" c:type="guint64"/>
      </property>
      <property name="max-latency" writable="1">
        <type name="int64" c:type="gint64"/>
      </property>
      <property name="min-latency" writable="1">
        <type name="int64" c:type="gint64"/>
      </property>
      <property name="min-percent" writable="1">
        <type name="uint" c:type="guint"/>
      </property>
      <property name="size" writable="1">
        <type name="int64" c:type="gint64"/>
      </property>
      <property name="stream-type" writable="1">
        <type name="AppStreamType" c:type="GstAppStreamType"/>
      </property>
      <field name="basesrc">
        <type name="GstBase.BaseSrc" c:type="GstBaseSrc"/>
      </field>
      <field name="priv">
        <type name="AppSrcPrivate" c:type="GstAppSrcPrivate*"/>
      </field>
      <field name="_gst_reserved">
        <array zero-terminated="0" c:type="gpointer" fixed-size="4">
          <type name="any"/>
        </array>
      </field>
      <glib:signal name="end-of-stream"
                   doc="Notify @appsrc that no more buffer are available.">
        <return-value transfer-ownership="full">
          <type name="Gst.FlowReturn" c:type="GstFlowReturn"/>
        </return-value>
      </glib:signal>
      <glib:signal name="enough-data"
                   doc="Signal that the source has enough data. It is recommended that the
application stops calling push-buffer until the need-data signal is
emited again to avoid excessive buffer queueing.">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="need-data"
                   doc="Signal that the source needs more data. In the callback or from another
thread you should call push-buffer or end-of-stream.
pushed into @appsrc.
You can call push-buffer multiple times until the enough-data signal is
fired.">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="length" transfer-ownership="none">
            <type name="uint" c:type="guint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="push-buffer"
                   doc="Adds a buffer to the queue of buffers that the appsrc element will
push to its source pad. This function does not take ownership of the
buffer so the buffer needs to be unreffed after calling this function.
When the block property is TRUE, this function can block until free space
becomes available in the queue.">
        <return-value transfer-ownership="full">
          <type name="Gst.FlowReturn" c:type="GstFlowReturn"/>
        </return-value>
        <parameters>
          <parameter name="buffer" transfer-ownership="none">
            <type name="Gst.Buffer" c:type="GstBuffer"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="seek-data"
                   doc="Seek to the given offset. The next push-buffer should produce buffers from
the new @offset.
This callback is only called for seekable stream types.">
        <return-value transfer-ownership="full">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="offset" transfer-ownership="none">
            <type name="uint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="AppSrcCallbacks"
            c:type="GstAppSrcCallbacks"
            doc="pushed to appsrc from this thread or another thread. @length is just a hint
and when it is set to -1, any number of bytes can be pushed into @appsrc.
application stops calling push-buffer until the need_data callback is
emited again to avoid excessive buffer queueing.
The next push-buffer should produce buffers from the new @offset.
This callback is only called for seekable stream types.
A set of callbacks that can be installed on the appsrc with
gst_app_src_set_callbacks()."
            version="0.10.23">
      <field name="need_data">
        <type name="any" c:type="pointer"/>
      </field>
      <field name="enough_data">
        <type name="any" c:type="pointer"/>
      </field>
      <field name="seek_data">
        <type name="any" c:type="pointer"/>
      </field>
      <field name="_gst_reserved" writable="1">
        <array zero-terminated="0" c:type="gpointer" fixed-size="4">
          <type name="any"/>
        </array>
      </field>
    </record>
    <record name="AppSrcClass"
            c:type="GstAppSrcClass"
            glib:is-gtype-struct-for="AppSrc">
      <field name="basesrc_class">
        <type name="GstBase.BaseSrcClass" c:type="GstBaseSrcClass"/>
      </field>
      <field name="need_data">
        <callback name="need_data" c:type="need_data">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="src" transfer-ownership="none">
              <type name="AppSrc" c:type="GstAppSrc*"/>
            </parameter>
            <parameter name="length" transfer-ownership="none">
              <type name="uint" c:type="guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="enough_data">
        <callback name="enough_data" c:type="enough_data">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="src" transfer-ownership="none">
              <type name="AppSrc" c:type="GstAppSrc*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="seek_data">
        <callback name="seek_data" c:type="seek_data">
          <return-value transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="src" transfer-ownership="none">
              <type name="AppSrc" c:type="GstAppSrc*"/>
            </parameter>
            <parameter name="offset" transfer-ownership="none">
              <type name="uint64" c:type="guint64"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="push_buffer">
        <callback name="push_buffer" c:type="push_buffer">
          <return-value transfer-ownership="full">
            <type name="Gst.FlowReturn" c:type="GstFlowReturn"/>
          </return-value>
          <parameters>
            <parameter name="src" transfer-ownership="none">
              <type name="AppSrc" c:type="GstAppSrc*"/>
            </parameter>
            <parameter name="buffer" transfer-ownership="none">
              <type name="Gst.Buffer" c:type="GstBuffer*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="end_of_stream">
        <callback name="end_of_stream" c:type="end_of_stream">
          <return-value transfer-ownership="full">
            <type name="Gst.FlowReturn" c:type="GstFlowReturn"/>
          </return-value>
          <parameters>
            <parameter name="src" transfer-ownership="none">
              <type name="AppSrc" c:type="GstAppSrc*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_gst_reserved">
        <array zero-terminated="0" c:type="gpointer" fixed-size="4">
          <type name="any"/>
        </array>
      </field>
    </record>
    <record name="AppSrcPrivate" c:type="GstAppSrcPrivate">
    </record>
    <enumeration name="AppStreamType"
                 doc="live stream.
be very fast, such as data from a webserver.
such as in a local file.
The stream type."
                 c:type="GstAppStreamType">
      <member name="stream"
              value="0"
              c:identifier="GST_APP_STREAM_TYPE_STREAM"/>
      <member name="seekable"
              value="1"
              c:identifier="GST_APP_STREAM_TYPE_SEEKABLE"/>
      <member name="random_access"
              value="2"
              c:identifier="GST_APP_STREAM_TYPE_RANDOM_ACCESS"/>
    </enumeration>
  </namespace>
</repository>

<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="GLib" version="2.0"/>
  <include name="GModule" version="2.0"/>
  <include name="GObject" version="2.0"/>
  <include name="Gio" version="2.0"/>
  <namespace name="GdkPixbuf"
             version="2.0"
             shared-library="libgdk_pixbuf-2.0.so.0"
             c:identifier-prefixes="Gdk"
             c:symbol-prefixes="gdk">
    <enumeration name="Colorspace"
                 glib:type-name="GdkColorspace"
                 glib:get-type="gdk_colorspace_get_type"
                 c:type="GdkColorspace">
      <member name="rgb"
              value="0"
              c:identifier="GDK_COLORSPACE_RGB"
              glib:nick="rgb"/>
    </enumeration>
    <enumeration name="InterpType"
                 glib:type-name="GdkInterpType"
                 glib:get-type="gdk_interp_type_get_type"
                 c:type="GdkInterpType">
      <member name="nearest"
              value="0"
              c:identifier="GDK_INTERP_NEAREST"
              glib:nick="nearest"/>
      <member name="tiles"
              value="1"
              c:identifier="GDK_INTERP_TILES"
              glib:nick="tiles"/>
      <member name="bilinear"
              value="2"
              c:identifier="GDK_INTERP_BILINEAR"
              glib:nick="bilinear"/>
      <member name="hyper"
              value="3"
              c:identifier="GDK_INTERP_HYPER"
              glib:nick="hyper"/>
    </enumeration>
    <constant name="PIXBUF_FEATURES_H" value="1">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="PIXBUF_MAGIC_NUMBER" value="1197763408">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="PIXBUF_MAJOR" value="2">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="PIXBUF_MICRO" value="1">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="PIXBUF_MINOR" value="22">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="PIXBUF_VERSION" value="2.22.1">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PIXDATA_HEADER_LENGTH" value="24">
      <type name="gint" c:type="gint"/>
    </constant>
    <class name="Pixbuf"
           c:symbol-prefix="pixbuf"
           c:type="GdkPixbuf"
           parent="GObject.Object"
           glib:type-name="GdkPixbuf"
           glib:get-type="gdk_pixbuf_get_type">
      <constructor name="new" c:identifier="gdk_pixbuf_new">
        <doc xml:whitespace="preserve">Creates a new #GdkPixbuf structure and allocates a buffer for it.  The 
buffer has an optimal rowstride.  Note that the buffer is not cleared;
you will have to fill it completely yourself.
%NULL if not enough memory could be allocated for the image buffer.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A newly-created #GdkPixbuf with a reference count of 1, or</doc>
          <type name="Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
        <parameters>
          <parameter name="colorspace" transfer-ownership="none">
            <doc xml:whitespace="preserve">Color space for image</doc>
            <type name="Colorspace" c:type="GdkColorspace"/>
          </parameter>
          <parameter name="has_alpha" transfer-ownership="none">
            <doc xml:whitespace="preserve">Whether the image should have transparency information</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="bits_per_sample" transfer-ownership="none">
            <doc xml:whitespace="preserve">Number of bits per color sample</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:whitespace="preserve">Width of image in pixels, must be &gt; 0</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:whitespace="preserve">Height of image in pixels, must be &gt; 0</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_data"
                   c:identifier="gdk_pixbuf_new_from_data">
        <doc xml:whitespace="preserve">Creates a new #GdkPixbuf out of in-memory image data.  Currently only RGB
images with 8 bits per sample are supported.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A newly-created #GdkPixbuf structure with a reference count of 1.</doc>
          <type name="Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
        <parameters>
          <parameter name="data" transfer-ownership="none">
            <doc xml:whitespace="preserve">Image data in 8-bit/sample packed format</doc>
            <type name="guint8" c:type="guchar*"/>
          </parameter>
          <parameter name="colorspace" transfer-ownership="none">
            <doc xml:whitespace="preserve">Colorspace for the image data</doc>
            <type name="Colorspace" c:type="GdkColorspace"/>
          </parameter>
          <parameter name="has_alpha" transfer-ownership="none">
            <doc xml:whitespace="preserve">Whether the data has an opacity channel</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="bits_per_sample" transfer-ownership="none">
            <doc xml:whitespace="preserve">Number of bits per sample</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:whitespace="preserve">Width of the image in pixels, must be &gt; 0</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:whitespace="preserve">Height of the image in pixels, must be &gt; 0</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="rowstride" transfer-ownership="none">
            <doc xml:whitespace="preserve">Distance in bytes between row starts</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="destroy_fn"
                     transfer-ownership="none"
                     scope="async"
                     closure="8">
            <doc xml:whitespace="preserve">Function used to free the data when the pixbuf's reference count drops to zero, or %NULL if the data should not be freed</doc>
            <type name="PixbufDestroyNotify" c:type="GdkPixbufDestroyNotify"/>
          </parameter>
          <parameter name="destroy_fn_data" transfer-ownership="none">
            <doc xml:whitespace="preserve">Closure data to pass to the destroy notification function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_file"
                   c:identifier="gdk_pixbuf_new_from_file"
                   throws="1">
        <doc xml:whitespace="preserve">Creates a new pixbuf by loading an image from a file.  The file format is
detected automatically. If %NULL is returned, then @error will be set.
Possible errors are in the #GDK_PIXBUF_ERROR and #G_FILE_ERROR domains.
there was no loader for the file's format, there was not enough memory to
allocate the image buffer, or the image file contained invalid data.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A newly-created pixbuf with a reference count of 1, or %NULL if</doc>
          <type name="Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
        <parameters>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:whitespace="preserve">Name of file to load, in the GLib file name encoding</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_file_at_scale"
                   c:identifier="gdk_pixbuf_new_from_file_at_scale"
                   version="2.6"
                   throws="1">
        <doc xml:whitespace="preserve">Creates a new pixbuf by loading an image from a file.  The file format is
detected automatically. If %NULL is returned, then @error will be set.
Possible errors are in the #GDK_PIXBUF_ERROR and #G_FILE_ERROR domains.
The image will be scaled to fit in the requested size, optionally preserving
the image's aspect ratio. 
When preserving the aspect ratio, a @width of -1 will cause the image
to be scaled to the exact given height, and a @height of -1 will cause
the image to be scaled to the exact given width. When not preserving
aspect ratio, a @width or @height of -1 means to not scale the image 
at all in that dimension. Negative values for @width and @height are 
allowed since 2.8.
there was no loader for the file's format, there was not enough memory to
allocate the image buffer, or the image file contained invalid data.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A newly-created pixbuf with a reference count of 1, or %NULL</doc>
          <type name="Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
        <parameters>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:whitespace="preserve">Name of file to load, in the GLib file name encoding</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:whitespace="preserve">The width the image should have or -1 to not constrain the width</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:whitespace="preserve">The height the image should have or -1 to not constrain the height</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="preserve_aspect_ratio" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE to preserve the image's aspect ratio</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_file_at_size"
                   c:identifier="gdk_pixbuf_new_from_file_at_size"
                   version="2.4"
                   throws="1">
        <doc xml:whitespace="preserve">Creates a new pixbuf by loading an image from a file.  
The file format is detected automatically. If %NULL is returned, then 
#G_FILE_ERROR domains.
The image will be scaled to fit in the requested size, preserving
the image's aspect ratio. Note that the returned pixbuf may be smaller
than @width x @height, if the aspect ratio requires it. To load
and image at the requested size, regardless of aspect ratio, use
gdk_pixbuf_new_from_file_at_scale().
%NULL if any of several error conditions occurred:  the file could not 
be opened, there was no loader for the file's format, there was not 
enough memory to allocate the image buffer, or the image file contained 
invalid data.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A newly-created pixbuf with a reference count of 1, or</doc>
          <type name="Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
        <parameters>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:whitespace="preserve">Name of file to load, in the GLib file name encoding</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:whitespace="preserve">The width the image should have or -1 to not constrain the width</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:whitespace="preserve">The height the image should have or -1 to not constrain the height</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_inline"
                   c:identifier="gdk_pixbuf_new_from_inline"
                   throws="1">
        <doc xml:whitespace="preserve">Create a #GdkPixbuf from a flat representation that is suitable for
storing as inline data in a program. This is useful if you want to
ship a program with images, but don't want to depend on any
external files.
gdk-pixbuf ships with a program called &lt;command&gt;gdk-pixbuf-csource&lt;/command&gt; 
which allows for conversion of #GdkPixbufs into such a inline representation.
In almost all cases, you should pass the &lt;option&gt;--raw&lt;/option&gt; flag to
&lt;command&gt;gdk-pixbuf-csource&lt;/command&gt;. A sample invocation would be:
&lt;informalexample&gt;&lt;programlisting&gt;
gdk-pixbuf-csource --raw --name=myimage_inline myimage.png
&lt;/programlisting&gt;&lt;/informalexample&gt;
For the typical case where the inline pixbuf is read-only static data,
you don't need to copy the pixel data unless you intend to write to
it, so you can pass %FALSE for @copy_pixels.  (If you pass 
&lt;option&gt;--rle&lt;/option&gt; to &lt;command&gt;gdk-pixbuf-csource&lt;/command&gt;, a copy 
will be made even if @copy_pixels is %FALSE, so using this option is 
generally a bad idea.)
If you create a pixbuf from const inline data compiled into your
program, it's probably safe to ignore errors and disable length checks, 
since things will always succeed:
&lt;informalexample&gt;&lt;programlisting&gt;
pixbuf = gdk_pixbuf_new_from_inline (-1, myimage_inline, FALSE, NULL);
&lt;/programlisting&gt;&lt;/informalexample&gt;
For non-const inline data, you could get out of memory. For untrusted 
inline data located at runtime, you could have corrupt inline data in 
addition.
count of 1, or %NULL if an error occurred.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A newly-created #GdkPixbuf structure with a reference,</doc>
          <type name="Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
        <parameters>
          <parameter name="data_length" transfer-ownership="none">
            <doc xml:whitespace="preserve">Length in bytes of the @data argument or -1 to disable length checks</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:whitespace="preserve">Byte data containing a serialized #GdkPixdata structure</doc>
            <type name="guint8" c:type="guint8*"/>
          </parameter>
          <parameter name="copy_pixels" transfer-ownership="none">
            <doc xml:whitespace="preserve">Whether to copy the pixel data, or use direct pointers</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_stream"
                   c:identifier="gdk_pixbuf_new_from_stream"
                   version="2.14"
                   throws="1">
        <doc xml:whitespace="preserve">Creates a new pixbuf by loading an image from an input stream.  
The file format is detected automatically. If %NULL is returned, then 
from another thread. If the operation was cancelled, the error 
%GIO_ERROR_CANCELLED will be returned. Other possible errors are in 
the #GDK_PIXBUF_ERROR and %G_IO_ERROR domains. 
The stream is not closed.
not supported, there was not enough memory to allocate the image buffer, 
the stream contained invalid data, or the operation was cancelled.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A newly-created pixbuf, or %NULL if any of several error</doc>
          <type name="Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
        <parameters>
          <parameter name="stream" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GInputStream to load the pixbuf from</doc>
            <type name="Gio.InputStream" c:type="GInputStream*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">optional #GCancellable object, %NULL to ignore</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_stream_at_scale"
                   c:identifier="gdk_pixbuf_new_from_stream_at_scale"
                   version="2.14"
                   throws="1">
        <doc xml:whitespace="preserve">Creates a new pixbuf by loading an image from an input stream.  
The file format is detected automatically. If %NULL is returned, then 
from another thread. If the operation was cancelled, the error 
%GIO_ERROR_CANCELLED will be returned. Other possible errors are in 
the #GDK_PIXBUF_ERROR and %G_IO_ERROR domains. 
The image will be scaled to fit in the requested size, optionally 
preserving the image's aspect ratio. When preserving the aspect ratio, 
a @width of -1 will cause the image to be scaled to the exact given 
height, and a @height of -1 will cause the image to be scaled to the 
exact given width. When not preserving aspect ratio, a @width or 
The stream is not closed.
not supported, there was not enough memory to allocate the image buffer, 
the stream contained invalid data, or the operation was cancelled.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A newly-created pixbuf, or %NULL if any of several error</doc>
          <type name="Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
        <parameters>
          <parameter name="stream" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GInputStream to load the pixbuf from</doc>
            <type name="Gio.InputStream" c:type="GInputStream*"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:whitespace="preserve">The width the image should have or -1 to not constrain the width</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:whitespace="preserve">The height the image should have or -1 to not constrain the height</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="preserve_aspect_ratio" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE to preserve the image's aspect ratio</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">optional #GCancellable object, %NULL to ignore</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_xpm_data"
                   c:identifier="gdk_pixbuf_new_from_xpm_data">
        <doc xml:whitespace="preserve">Creates a new pixbuf by parsing XPM data in memory.  This data is commonly
the result of including an XPM file into a program's C source.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A newly-created pixbuf with a reference count of 1.</doc>
          <type name="Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
        <parameters>
          <parameter name="data" transfer-ownership="none">
            <doc xml:whitespace="preserve">Pointer to inline XPM data.</doc>
            <type name="utf8" c:type="char**"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="from_pixdata"
                c:identifier="gdk_pixbuf_from_pixdata"
                introspectable="0"
                throws="1">
        <doc xml:whitespace="preserve">Converts a #GdkPixdata to a #GdkPixbuf. If @copy_pixels is %TRUE or
if the pixel data is run-length-encoded, the pixel data is copied into
newly-allocated memory; otherwise it is reused.</doc>
        <return-value>
          <doc xml:whitespace="preserve">a new #GdkPixbuf.</doc>
          <type name="Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
        <parameters>
          <parameter name="pixdata" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GdkPixdata to convert into a #GdkPixbuf.</doc>
            <type name="Pixdata" c:type="GdkPixdata*"/>
          </parameter>
          <parameter name="copy_pixels" transfer-ownership="none">
            <doc xml:whitespace="preserve">whether to copy raw pixel data; run-length encoded pixel data is always copied.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_file_info"
                c:identifier="gdk_pixbuf_get_file_info"
                version="2.4">
        <doc xml:whitespace="preserve">Parses an image file far enough to determine its format and size.
or %NULL if the image format wasn't recognized. The return value 
is owned by GdkPixbuf and should not be freed.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A #GdkPixbufFormat describing the image format of the file</doc>
          <type name="PixbufFormat" c:type="GdkPixbufFormat*"/>
        </return-value>
        <parameters>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:whitespace="preserve">The name of the file to identify.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:whitespace="preserve">Return location for the width of the image, or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:whitespace="preserve">Return location for the height of the image, or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_formats"
                c:identifier="gdk_pixbuf_get_formats"
                version="2.2">
        <doc xml:whitespace="preserve">Obtains the available information about the image formats supported
by GdkPixbuf.
#GdkPixbufFormat&lt;!-- --&gt;s describing the supported
image formats.  The list should be freed when it is no longer needed,
but the structures themselves are owned by #GdkPixbuf and should not be
freed.</doc>
        <return-value transfer-ownership="container">
          <doc xml:whitespace="preserve">A list of</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="PixbufFormat"/>
          </type>
        </return-value>
      </function>
      <function name="gettext" c:identifier="gdk_pixbuf_gettext">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="msgid" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </function>
      <method name="add_alpha" c:identifier="gdk_pixbuf_add_alpha">
        <doc xml:whitespace="preserve">Takes an existing pixbuf and adds an alpha channel to it.
If the existing pixbuf already had an alpha channel, the channel
values are copied from the original; otherwise, the alpha channel
is initialized to 255 (full opacity).
If @substitute_color is %TRUE, then the color specified by (@r, @g, @b) will be
assigned zero opacity. That is, if you pass (255, 255, 255) for the
substitute color, all white pixels will become fully transparent.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A newly-created pixbuf with a reference count of 1.</doc>
          <type name="Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
        <parameters>
          <parameter name="substitute_color" transfer-ownership="none">
            <doc xml:whitespace="preserve">Whether to set a color to zero opacity.  If this is %FALSE, then the (@r, @g, @b) arguments will be ignored.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="r" transfer-ownership="none">
            <doc xml:whitespace="preserve">Red value to substitute.</doc>
            <type name="guint8" c:type="guchar"/>
          </parameter>
          <parameter name="g" transfer-ownership="none">
            <doc xml:whitespace="preserve">Green value to substitute.</doc>
            <type name="guint8" c:type="guchar"/>
          </parameter>
          <parameter name="b" transfer-ownership="none">
            <doc xml:whitespace="preserve">Blue value to substitute.</doc>
            <type name="guint8" c:type="guchar"/>
          </parameter>
        </parameters>
      </method>
      <method name="apply_embedded_orientation"
              c:identifier="gdk_pixbuf_apply_embedded_orientation"
              version="2.12">
        <doc xml:whitespace="preserve">Takes an existing pixbuf and checks for the presence of an
associated "orientation" option, which may be provided by the 
jpeg loader (which reads the exif orientation tag) or the 
tiff loader (which reads the tiff orientation tag, and
compensates it for the partial transforms performed by 
libtiff). If an orientation option/tag is present, the
appropriate transform will be performed so that the pixbuf
is oriented correctly.
input pixbuf (with an increased reference count).</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A newly-created pixbuf, or a reference to the</doc>
          <type name="Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
      </method>
      <method name="composite" c:identifier="gdk_pixbuf_composite">
        <doc xml:whitespace="preserve">Creates a transformation of the source image @src by scaling by
This gives an image in the coordinates of the destination pixbuf.
The rectangle (@dest_x, @dest_y, @dest_width, @dest_height)
is then composited onto the corresponding rectangle of the
original destination image.
When the destination rectangle contains parts not in the source 
image, the data at the edges of the source image is replicated
to infinity. 
&lt;figure id="pixbuf-composite-diagram"&gt;
&lt;title&gt;Compositing of pixbufs&lt;/title&gt;
&lt;graphic fileref="composite.png" format="PNG"/&gt;
&lt;/figure&gt;</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="dest" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GdkPixbuf into which to render the results</doc>
            <type name="Pixbuf" c:type="GdkPixbuf*"/>
          </parameter>
          <parameter name="dest_x" transfer-ownership="none">
            <doc xml:whitespace="preserve">the left coordinate for region to render</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="dest_y" transfer-ownership="none">
            <doc xml:whitespace="preserve">the top coordinate for region to render</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="dest_width" transfer-ownership="none">
            <doc xml:whitespace="preserve">the width of the region to render</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="dest_height" transfer-ownership="none">
            <doc xml:whitespace="preserve">the height of the region to render</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="offset_x" transfer-ownership="none">
            <doc xml:whitespace="preserve">the offset in the X direction (currently rounded to an integer)</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="offset_y" transfer-ownership="none">
            <doc xml:whitespace="preserve">the offset in the Y direction (currently rounded to an integer)</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="scale_x" transfer-ownership="none">
            <doc xml:whitespace="preserve">the scale factor in the X direction</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="scale_y" transfer-ownership="none">
            <doc xml:whitespace="preserve">the scale factor in the Y direction</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="interp_type" transfer-ownership="none">
            <doc xml:whitespace="preserve">the interpolation type for the transformation.</doc>
            <type name="InterpType" c:type="GdkInterpType"/>
          </parameter>
          <parameter name="overall_alpha" transfer-ownership="none">
            <doc xml:whitespace="preserve">overall alpha for source image (0..255)</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="composite_color" c:identifier="gdk_pixbuf_composite_color">
        <doc xml:whitespace="preserve">Creates a transformation of the source image @src by scaling by
then composites the rectangle (@dest_x ,@dest_y, @dest_width,
colors @color1 and @color2 and renders it onto the destination
image.
See gdk_pixbuf_composite_color_simple() for a simpler variant of this
function suitable for many tasks.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="dest" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GdkPixbuf into which to render the results</doc>
            <type name="Pixbuf" c:type="GdkPixbuf*"/>
          </parameter>
          <parameter name="dest_x" transfer-ownership="none">
            <doc xml:whitespace="preserve">the left coordinate for region to render</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="dest_y" transfer-ownership="none">
            <doc xml:whitespace="preserve">the top coordinate for region to render</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="dest_width" transfer-ownership="none">
            <doc xml:whitespace="preserve">the width of the region to render</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="dest_height" transfer-ownership="none">
            <doc xml:whitespace="preserve">the height of the region to render</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="offset_x" transfer-ownership="none">
            <doc xml:whitespace="preserve">the offset in the X direction (currently rounded to an integer)</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="offset_y" transfer-ownership="none">
            <doc xml:whitespace="preserve">the offset in the Y direction (currently rounded to an integer)</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="scale_x" transfer-ownership="none">
            <doc xml:whitespace="preserve">the scale factor in the X direction</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="scale_y" transfer-ownership="none">
            <doc xml:whitespace="preserve">the scale factor in the Y direction</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="interp_type" transfer-ownership="none">
            <doc xml:whitespace="preserve">the interpolation type for the transformation.</doc>
            <type name="InterpType" c:type="GdkInterpType"/>
          </parameter>
          <parameter name="overall_alpha" transfer-ownership="none">
            <doc xml:whitespace="preserve">overall alpha for source image (0..255)</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="check_x" transfer-ownership="none">
            <doc xml:whitespace="preserve">the X offset for the checkboard (origin of checkboard is at -@check_x, -@check_y)</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="check_y" transfer-ownership="none">
            <doc xml:whitespace="preserve">the Y offset for the checkboard</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="check_size" transfer-ownership="none">
            <doc xml:whitespace="preserve">the size of checks in the checkboard (must be a power of two)</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="color1" transfer-ownership="none">
            <doc xml:whitespace="preserve">the color of check at upper left</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
          <parameter name="color2" transfer-ownership="none">
            <doc xml:whitespace="preserve">the color of the other check</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="composite_color_simple"
              c:identifier="gdk_pixbuf_composite_color_simple">
        <doc xml:whitespace="preserve">Creates a new #GdkPixbuf by scaling @src to @dest_width x
allocated for it.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the new #GdkPixbuf, or %NULL if not enough memory could be</doc>
          <type name="Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
        <parameters>
          <parameter name="dest_width" transfer-ownership="none">
            <doc xml:whitespace="preserve">the width of destination image</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="dest_height" transfer-ownership="none">
            <doc xml:whitespace="preserve">the height of destination image</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="interp_type" transfer-ownership="none">
            <doc xml:whitespace="preserve">the interpolation type for the transformation.</doc>
            <type name="InterpType" c:type="GdkInterpType"/>
          </parameter>
          <parameter name="overall_alpha" transfer-ownership="none">
            <doc xml:whitespace="preserve">overall alpha for source image (0..255)</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="check_size" transfer-ownership="none">
            <doc xml:whitespace="preserve">the size of checks in the checkboard (must be a power of two)</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="color1" transfer-ownership="none">
            <doc xml:whitespace="preserve">the color of check at upper left</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
          <parameter name="color2" transfer-ownership="none">
            <doc xml:whitespace="preserve">the color of the other check</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="copy" c:identifier="gdk_pixbuf_copy">
        <doc xml:whitespace="preserve">Creates a new #GdkPixbuf with a copy of the information in the specified
not enough memory could be allocated.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A newly-created pixbuf with a reference count of 1, or %NULL if</doc>
          <type name="Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
      </method>
      <method name="copy_area" c:identifier="gdk_pixbuf_copy_area">
        <doc xml:whitespace="preserve">Copies a rectangular area from @src_pixbuf to @dest_pixbuf.  Conversion of
pixbuf formats is done automatically.
If the source rectangle overlaps the destination rectangle on the
same pixbuf, it will be overwritten during the copy operation.
Therefore, you can not use this function to scroll a pixbuf.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="src_x" transfer-ownership="none">
            <doc xml:whitespace="preserve">Source X coordinate within @src_pixbuf.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="src_y" transfer-ownership="none">
            <doc xml:whitespace="preserve">Source Y coordinate within @src_pixbuf.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:whitespace="preserve">Width of the area to copy.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:whitespace="preserve">Height of the area to copy.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="dest_pixbuf" transfer-ownership="none">
            <doc xml:whitespace="preserve">Destination pixbuf.</doc>
            <type name="Pixbuf" c:type="GdkPixbuf*"/>
          </parameter>
          <parameter name="dest_x" transfer-ownership="none">
            <doc xml:whitespace="preserve">X coordinate within @dest_pixbuf.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="dest_y" transfer-ownership="none">
            <doc xml:whitespace="preserve">Y coordinate within @dest_pixbuf.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="fill" c:identifier="gdk_pixbuf_fill">
        <doc xml:whitespace="preserve">Clears a pixbuf to the given RGBA value, converting the RGBA value into
the pixbuf's pixel format. The alpha will be ignored if the pixbuf
doesn't have an alpha channel.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="pixel" transfer-ownership="none">
            <doc xml:whitespace="preserve">RGBA pixel to clear to (0xffffffff is opaque white, 0x00000000 transparent black)</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="flip" c:identifier="gdk_pixbuf_flip" version="2.6">
        <doc xml:whitespace="preserve">Flips a pixbuf horizontally or vertically and returns the
result in a new pixbuf.
allocated for it.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the new #GdkPixbuf, or %NULL if not enough memory could be</doc>
          <type name="Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
        <parameters>
          <parameter name="horizontal" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE to flip horizontally, %FALSE to flip vertically</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_bits_per_sample"
              c:identifier="gdk_pixbuf_get_bits_per_sample">
        <doc xml:whitespace="preserve">Queries the number of bits per color sample in a pixbuf.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">Number of bits per color sample.</doc>
          <type name="gint" c:type="int"/>
        </return-value>
      </method>
      <method name="get_colorspace" c:identifier="gdk_pixbuf_get_colorspace">
        <doc xml:whitespace="preserve">Queries the color space of a pixbuf.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">Color space.</doc>
          <type name="Colorspace" c:type="GdkColorspace"/>
        </return-value>
      </method>
      <method name="get_has_alpha" c:identifier="gdk_pixbuf_get_has_alpha">
        <doc xml:whitespace="preserve">Queries whether a pixbuf has an alpha channel (opacity information).</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if it has an alpha channel, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_height" c:identifier="gdk_pixbuf_get_height">
        <doc xml:whitespace="preserve">Queries the height of a pixbuf.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">Height in pixels.</doc>
          <type name="gint" c:type="int"/>
        </return-value>
      </method>
      <method name="get_n_channels" c:identifier="gdk_pixbuf_get_n_channels">
        <doc xml:whitespace="preserve">Queries the number of channels of a pixbuf.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">Number of channels.</doc>
          <type name="gint" c:type="int"/>
        </return-value>
      </method>
      <method name="get_option" c:identifier="gdk_pixbuf_get_option">
        <doc xml:whitespace="preserve">Looks up @key in the list of options that may have been attached to the
function using gdk_pixbuf_set_option().
For instance, the ANI loader provides "Title" and "Artist" options. 
The ICO, XBM, and XPM loaders provide "x_hot" and "y_hot" hot-spot 
options for cursor definitions. The PNG loader provides the tEXt ancillary
chunk key/value pairs as options. Since 2.12, the TIFF and JPEG loaders
return an "orientation" option string that corresponds to the embedded 
TIFF/Exif orientation tag (if present).
string that should not be freed or %NULL if @key was not found.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the value associated with @key. This is a nul-terminated</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="key" transfer-ownership="none">
            <doc xml:whitespace="preserve">a nul-terminated string.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_pixels" c:identifier="gdk_pixbuf_get_pixels">
        <doc xml:whitespace="preserve">Queries a pointer to the pixel data of a pixbuf.
for information about how the pixel data is stored in
memory.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">A pointer to the pixbuf's pixel data.  Please see &lt;xref linkend="image-data"/&gt;</doc>
          <type name="guint8" c:type="guchar*"/>
        </return-value>
      </method>
      <method name="get_rowstride" c:identifier="gdk_pixbuf_get_rowstride">
        <doc xml:whitespace="preserve">Queries the rowstride of a pixbuf, which is the number of bytes between the start of a row
and the start of the next row.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">Distance between row starts.</doc>
          <type name="gint" c:type="int"/>
        </return-value>
      </method>
      <method name="get_width" c:identifier="gdk_pixbuf_get_width">
        <doc xml:whitespace="preserve">Queries the width of a pixbuf.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">Width in pixels.</doc>
          <type name="gint" c:type="int"/>
        </return-value>
      </method>
      <method name="new_subpixbuf" c:identifier="gdk_pixbuf_new_subpixbuf">
        <doc xml:whitespace="preserve">Creates a new pixbuf which represents a sub-region of
original pixbuf, so writing to one affects both.
The new pixbuf holds a reference to @src_pixbuf, so
is finalized.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new pixbuf</doc>
          <type name="Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
        <parameters>
          <parameter name="src_x" transfer-ownership="none">
            <doc xml:whitespace="preserve">X coord in @src_pixbuf</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="src_y" transfer-ownership="none">
            <doc xml:whitespace="preserve">Y coord in @src_pixbuf</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:whitespace="preserve">width of region in @src_pixbuf</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:whitespace="preserve">height of region in @src_pixbuf</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref"
              c:identifier="gdk_pixbuf_ref"
              introspectable="0"
              deprecated="Use g_object_ref()."
              deprecated-version="2.0">
        <doc xml:whitespace="preserve">Adds a reference to a pixbuf.</doc>
        <return-value>
          <doc xml:whitespace="preserve">The same as the @pixbuf argument.</doc>
          <type name="Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
      </method>
      <method name="rotate_simple"
              c:identifier="gdk_pixbuf_rotate_simple"
              version="2.6">
        <doc xml:whitespace="preserve">Rotates a pixbuf by a multiple of 90 degrees, and returns the
result in a new pixbuf.
allocated for it.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the new #GdkPixbuf, or %NULL if not enough memory could be</doc>
          <type name="Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
        <parameters>
          <parameter name="angle" transfer-ownership="none">
            <doc xml:whitespace="preserve">the angle to rotate by</doc>
            <type name="PixbufRotation" c:type="GdkPixbufRotation"/>
          </parameter>
        </parameters>
      </method>
      <method name="saturate_and_pixelate"
              c:identifier="gdk_pixbuf_saturate_and_pixelate">
        <doc xml:whitespace="preserve">Modifies saturation and optionally pixelates @src, placing the result in
saturation is reduced (the image turns toward grayscale); if greater than
1.0, saturation is increased (the image gets more vivid colors). If @pixelate
is %TRUE, then pixels are faded in a checkerboard pattern to create a
pixelated image. @src and @dest must have the same image format, size, and
rowstride.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="dest" transfer-ownership="none">
            <doc xml:whitespace="preserve">place to write modified version of @src</doc>
            <type name="Pixbuf" c:type="GdkPixbuf*"/>
          </parameter>
          <parameter name="saturation" transfer-ownership="none">
            <doc xml:whitespace="preserve">saturation factor</doc>
            <type name="gfloat" c:type="gfloat"/>
          </parameter>
          <parameter name="pixelate" transfer-ownership="none">
            <doc xml:whitespace="preserve">whether to pixelate</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="save" c:identifier="gdk_pixbuf_save" introspectable="0">
        <doc xml:whitespace="preserve">Saves pixbuf to a file in format @type. By default, "jpeg", "png", "ico" 
and "bmp" are possible file formats to save in, but more formats may be
installed. The list of all writable formats can be determined in the 
following way:
|[
void add_if_writable (GdkPixbufFormat *data, GSList **list)
{
if (gdk_pixbuf_format_is_writable (data))
*list = g_slist_prepend (*list, data);
}
GSList *formats = gdk_pixbuf_get_formats ();
GSList *writable_formats = NULL;
g_slist_foreach (formats, add_if_writable, &amp;writable_formats);
g_slist_free (formats);
]|
If @error is set, %FALSE will be returned. Possible errors include 
those in the #GDK_PIXBUF_ERROR domain and those in the #G_FILE_ERROR domain.
The variable argument list should be %NULL-terminated; if not empty,
it should contain pairs of strings that modify the save
parameters. For example:
&lt;informalexample&gt;&lt;programlisting&gt;
gdk_pixbuf_save (pixbuf, handle, "jpeg", &amp;amp;error,
"quality", "100", NULL);
&lt;/programlisting&gt;&lt;/informalexample&gt;
Currently only few parameters exist. JPEG images can be saved with a
"quality" parameter; its value should be in the range [0,100].
Text chunks can be attached to PNG images by specifying parameters of
the form "tEXt::key", where key is an ASCII string of length 1-79.
The values are UTF-8 encoded strings. The PNG compression level can
be specified using the "compression" parameter; it's value is in an
integer in the range of [0,9].
ICC color profiles can also be embedded into PNG and TIFF images.
The "icc-profile" value should be the complete ICC profile encoded
into base64.
&lt;informalexample&gt;&lt;programlisting&gt;
gchar *contents;
gchar *contents_encode;
gsize length;
g_file_get_contents ("/home/hughsie/.color/icc/L225W.icm", &amp;contents, &amp;length, NULL);
contents_encode = g_base64_encode ((const guchar *) contents, length);
gdk_pixbuf_save (pixbuf, handle, "png", &amp;amp;error,
"icc-profile", contents_encode,
NULL);
&lt;/programlisting&gt;&lt;/informalexample&gt;
TIFF images recognize a "compression" option which acceps an integer value.
Among the codecs are 1 None, 2 Huffman, 5 LZW, 7 JPEG and 8 Deflate, see
the libtiff documentation and tiff.h for all supported codec values.
ICO images can be saved in depth 16, 24, or 32, by using the "depth"
parameter. When the ICO saver is given "x_hot" and "y_hot" parameters,
it produces a CUR instead of an ICO.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">whether an error was set</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:whitespace="preserve">name of file to save.</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:whitespace="preserve">name of file format.</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="error" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">return location for error, or %NULL</doc>
            <type name="GLib.Error" c:type="GError**"/>
          </parameter>
          <parameter transfer-ownership="none">
            <varargs>
            </varargs>
          </parameter>
        </parameters>
      </method>
      <method name="save_to_buffer"
              c:identifier="gdk_pixbuf_save_to_buffer"
              version="2.4"
              introspectable="0">
        <doc xml:whitespace="preserve">Saves pixbuf to a new buffer in format @type, which is currently "jpeg",
"png", "tiff", "ico" or "bmp".  This is a convenience function that uses
gdk_pixbuf_save_to_callback() to do the real work. Note that the buffer 
is not nul-terminated and may contain embedded  nuls.
If @error is set, %FALSE will be returned and @buffer will be set to
%NULL. Possible errors include those in the #GDK_PIXBUF_ERROR
domain.
See gdk_pixbuf_save() for more details.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">whether an error was set</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="buffer" transfer-ownership="none">
            <doc xml:whitespace="preserve">location to receive a pointer to the new buffer.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="buffer_size" transfer-ownership="none">
            <doc xml:whitespace="preserve">location to receive the size of the new buffer.</doc>
            <type name="gulong" c:type="gsize*"/>
          </parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:whitespace="preserve">name of file format.</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="error" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">return location for error, or %NULL</doc>
            <type name="GLib.Error" c:type="GError**"/>
          </parameter>
          <parameter transfer-ownership="none">
            <varargs>
            </varargs>
          </parameter>
        </parameters>
      </method>
      <method name="save_to_bufferv"
              c:identifier="gdk_pixbuf_save_to_bufferv"
              version="2.4"
              throws="1">
        <doc xml:whitespace="preserve">Saves pixbuf to a new buffer in format @type, which is currently "jpeg",
"tiff", "png", "ico" or "bmp".  See gdk_pixbuf_save_to_buffer() 
for more details.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">whether an error was set</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="buffer" transfer-ownership="none">
            <doc xml:whitespace="preserve">location to receive a pointer to the new buffer.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="buffer_size" transfer-ownership="none">
            <doc xml:whitespace="preserve">location to receive the size of the new buffer.</doc>
            <type name="gulong" c:type="gsize*"/>
          </parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:whitespace="preserve">name of file format.</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="option_keys" transfer-ownership="none">
            <doc xml:whitespace="preserve">name of options to set, %NULL-terminated</doc>
            <type name="utf8" c:type="char**"/>
          </parameter>
          <parameter name="option_values" transfer-ownership="none">
            <doc xml:whitespace="preserve">values for named options</doc>
            <type name="utf8" c:type="char**"/>
          </parameter>
        </parameters>
      </method>
      <method name="save_to_callback"
              c:identifier="gdk_pixbuf_save_to_callback"
              version="2.4"
              introspectable="0">
        <doc xml:whitespace="preserve">Saves pixbuf in format @type by feeding the produced data to a 
callback. Can be used when you want to store the image to something 
other than a file, such as an in-memory buffer or a socket.  
If @error is set, %FALSE will be returned. Possible errors
include those in the #GDK_PIXBUF_ERROR domain and whatever the save
function generates.
See gdk_pixbuf_save() for more details.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">whether an error was set</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="save_func"
                     transfer-ownership="none"
                     scope="call"
                     closure="1">
            <doc xml:whitespace="preserve">a function that is called to save each block of data that the save routine generates.</doc>
            <type name="PixbufSaveFunc" c:type="GdkPixbufSaveFunc"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:whitespace="preserve">user data to pass to the save function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:whitespace="preserve">name of file format.</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="error" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">return location for error, or %NULL</doc>
            <type name="GLib.Error" c:type="GError**"/>
          </parameter>
          <parameter transfer-ownership="none">
            <varargs>
            </varargs>
          </parameter>
        </parameters>
      </method>
      <method name="save_to_callbackv"
              c:identifier="gdk_pixbuf_save_to_callbackv"
              version="2.4"
              throws="1">
        <doc xml:whitespace="preserve">Saves pixbuf to a callback in format @type, which is currently "jpeg",
"png", "tiff", "ico" or "bmp".  If @error is set, %FALSE will be returned. See
gdk_pixbuf_save_to_callback () for more details.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">whether an error was set</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="save_func"
                     transfer-ownership="none"
                     scope="call"
                     closure="1">
            <doc xml:whitespace="preserve">a function that is called to save each block of data that the save routine generates.</doc>
            <type name="PixbufSaveFunc" c:type="GdkPixbufSaveFunc"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:whitespace="preserve">user data to pass to the save function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:whitespace="preserve">name of file format.</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="option_keys" transfer-ownership="none">
            <doc xml:whitespace="preserve">name of options to set, %NULL-terminated</doc>
            <type name="utf8" c:type="char**"/>
          </parameter>
          <parameter name="option_values" transfer-ownership="none">
            <doc xml:whitespace="preserve">values for named options</doc>
            <type name="utf8" c:type="char**"/>
          </parameter>
        </parameters>
      </method>
      <method name="save_to_stream"
              c:identifier="gdk_pixbuf_save_to_stream"
              introspectable="0">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="stream" transfer-ownership="none">
            <type name="Gio.OutputStream" c:type="GOutputStream*"/>
          </parameter>
          <parameter name="type" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="error" transfer-ownership="none">
            <type name="GLib.Error" c:type="GError**"/>
          </parameter>
          <parameter transfer-ownership="none">
            <varargs>
            </varargs>
          </parameter>
        </parameters>
      </method>
      <method name="savev" c:identifier="gdk_pixbuf_savev" throws="1">
        <doc xml:whitespace="preserve">Saves pixbuf to a file in @type, which is currently "jpeg", "png", "tiff", "ico" or "bmp".
If @error is set, %FALSE will be returned. 
See gdk_pixbuf_save () for more details.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">whether an error was set</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:whitespace="preserve">name of file to save.</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:whitespace="preserve">name of file format.</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="option_keys" transfer-ownership="none">
            <doc xml:whitespace="preserve">name of options to set, %NULL-terminated</doc>
            <type name="utf8" c:type="char**"/>
          </parameter>
          <parameter name="option_values" transfer-ownership="none">
            <doc xml:whitespace="preserve">values for named options</doc>
            <type name="utf8" c:type="char**"/>
          </parameter>
        </parameters>
      </method>
      <method name="scale" c:identifier="gdk_pixbuf_scale">
        <doc xml:whitespace="preserve">Creates a transformation of the source image @src by scaling by
then renders the rectangle (@dest_x, @dest_y, @dest_width,
replacing the previous contents.
Try to use gdk_pixbuf_scale_simple() first, this function is
the industrial-strength power tool you can fall back to if
gdk_pixbuf_scale_simple() isn't powerful enough.
If the source rectangle overlaps the destination rectangle on the
same pixbuf, it will be overwritten during the scaling which
results in rendering artifacts.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="dest" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GdkPixbuf into which to render the results</doc>
            <type name="Pixbuf" c:type="GdkPixbuf*"/>
          </parameter>
          <parameter name="dest_x" transfer-ownership="none">
            <doc xml:whitespace="preserve">the left coordinate for region to render</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="dest_y" transfer-ownership="none">
            <doc xml:whitespace="preserve">the top coordinate for region to render</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="dest_width" transfer-ownership="none">
            <doc xml:whitespace="preserve">the width of the region to render</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="dest_height" transfer-ownership="none">
            <doc xml:whitespace="preserve">the height of the region to render</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="offset_x" transfer-ownership="none">
            <doc xml:whitespace="preserve">the offset in the X direction (currently rounded to an integer)</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="offset_y" transfer-ownership="none">
            <doc xml:whitespace="preserve">the offset in the Y direction (currently rounded to an integer)</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="scale_x" transfer-ownership="none">
            <doc xml:whitespace="preserve">the scale factor in the X direction</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="scale_y" transfer-ownership="none">
            <doc xml:whitespace="preserve">the scale factor in the Y direction</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="interp_type" transfer-ownership="none">
            <doc xml:whitespace="preserve">the interpolation type for the transformation.</doc>
            <type name="InterpType" c:type="GdkInterpType"/>
          </parameter>
        </parameters>
      </method>
      <method name="scale_simple" c:identifier="gdk_pixbuf_scale_simple">
        <doc xml:whitespace="preserve">Create a new #GdkPixbuf containing a copy of @src scaled to
should be #GDK_INTERP_NEAREST if you want maximum speed (but when
scaling down #GDK_INTERP_NEAREST is usually unusably ugly).  The
default @interp_type should be #GDK_INTERP_BILINEAR which offers
reasonable quality and speed.
You can scale a sub-portion of @src by creating a sub-pixbuf
pointing into @src; see gdk_pixbuf_new_subpixbuf().
For more complicated scaling/compositing see gdk_pixbuf_scale()
and gdk_pixbuf_composite().
allocated for it.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the new #GdkPixbuf, or %NULL if not enough memory could be</doc>
          <type name="Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
        <parameters>
          <parameter name="dest_width" transfer-ownership="none">
            <doc xml:whitespace="preserve">the width of destination image</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="dest_height" transfer-ownership="none">
            <doc xml:whitespace="preserve">the height of destination image</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="interp_type" transfer-ownership="none">
            <doc xml:whitespace="preserve">the interpolation type for the transformation.</doc>
            <type name="InterpType" c:type="GdkInterpType"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_option"
              c:identifier="gdk_pixbuf_set_option"
              version="2.2">
        <doc xml:whitespace="preserve">Attaches a key/value pair as an option to a #GdkPixbuf. If %key already
exists in the list of options attached to @pixbuf, the new value is 
ignored and %FALSE is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="key" transfer-ownership="none">
            <doc xml:whitespace="preserve">a nul-terminated string.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:whitespace="preserve">a nul-terminated string.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unref"
              c:identifier="gdk_pixbuf_unref"
              introspectable="0"
              deprecated="Use g_object_unref()."
              deprecated-version="2.0">
        <doc xml:whitespace="preserve">Removes a reference from a pixbuf.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <property name="bits-per-sample"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The number of bits per sample. 
Currently only 8 bit per sample are supported.</doc>
        <type name="gint"/>
      </property>
      <property name="colorspace"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Colorspace"/>
      </property>
      <property name="has-alpha"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="height"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gint"/>
      </property>
      <property name="n-channels"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The number of samples per pixel. 
Currently, only 3 or 4 samples per pixel are supported.</doc>
        <type name="gint"/>
      </property>
      <property name="pixels"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gpointer"/>
      </property>
      <property name="rowstride"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The number of bytes between the start of a row and 
the start of the next row. This number must (obviously)
be at least as large as the width of the pixbuf.</doc>
        <type name="gint"/>
      </property>
      <property name="width"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gint"/>
      </property>
    </class>
    <enumeration name="PixbufAlphaMode"
                 glib:type-name="GdkPixbufAlphaMode"
                 glib:get-type="gdk_pixbuf_alpha_mode_get_type"
                 c:type="GdkPixbufAlphaMode">
      <member name="bilevel"
              value="0"
              c:identifier="GDK_PIXBUF_ALPHA_BILEVEL"
              glib:nick="bilevel"/>
      <member name="full"
              value="1"
              c:identifier="GDK_PIXBUF_ALPHA_FULL"
              glib:nick="full"/>
    </enumeration>
    <class name="PixbufAnimation"
           c:symbol-prefix="pixbuf_animation"
           c:type="GdkPixbufAnimation"
           parent="GObject.Object"
           glib:type-name="GdkPixbufAnimation"
           glib:get-type="gdk_pixbuf_animation_get_type"
           glib:type-struct="PixbufAnimationClass">
      <constructor name="new_from_file"
                   c:identifier="gdk_pixbuf_animation_new_from_file"
                   throws="1">
        <doc xml:whitespace="preserve">Creates a new animation by loading it from a file.  The file format is
detected automatically.  If the file's format does not support multi-frame
images, then an animation with a single frame will be created. Possible errors
are in the #GDK_PIXBUF_ERROR and #G_FILE_ERROR domains.
there was no loader for the file's format, there was not enough memory to
allocate the image buffer, or the image file contained invalid data.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A newly-created animation with a reference count of 1, or %NULL</doc>
          <type name="PixbufAnimation" c:type="GdkPixbufAnimation*"/>
        </return-value>
        <parameters>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:whitespace="preserve">Name of file to load, in the GLib file name encoding</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </constructor>
      <virtual-method name="get_iter" invoker="get_iter">
        <doc xml:whitespace="preserve">Get an iterator for displaying an animation. The iterator provides
the frames that should be displayed at a given time.
It should be freed after use with g_object_unref().
marks the beginning of animation playback. After creating an
iterator, you should immediately display the pixbuf returned by
gdk_pixbuf_animation_iter_get_pixbuf(). Then, you should install a
timeout (with g_timeout_add()) or by some other mechanism ensure
that you'll update the image after
gdk_pixbuf_animation_iter_get_delay_time() milliseconds. Each time
the image is updated, you should reinstall the timeout with the new,
possibly-changed delay time.
As a shortcut, if @start_time is %NULL, the result of
g_get_current_time() will be used automatically.
To update the image (i.e. possibly change the result of
gdk_pixbuf_animation_iter_get_pixbuf() to a new frame of the animation),
call gdk_pixbuf_animation_iter_advance().
If you're using #GdkPixbufLoader, in addition to updating the image
after the delay time, you should also update it whenever you
receive the area_updated signal and
gdk_pixbuf_animation_iter_on_currently_loading_frame() returns
%TRUE. In this case, the frame currently being fed into the loader
has received new data, so needs to be refreshed. The delay time for
a frame may also be modified after an area_updated signal, for
example if the delay time for a frame is encoded in the data after
the frame itself. So your timeout should be reinstalled after any
area_updated signal.
A delay time of -1 is possible, indicating "infinite."</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">an iterator to move over the animation</doc>
          <type name="PixbufAnimationIter" c:type="GdkPixbufAnimationIter*"/>
        </return-value>
        <parameters>
          <parameter name="start_time" transfer-ownership="none">
            <doc xml:whitespace="preserve">time when the animation starts playing</doc>
            <type name="GLib.TimeVal" c:type="GTimeVal*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_size">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="width" transfer-ownership="none">
            <type name="gint" c:type="int*"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <type name="gint" c:type="int*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_static_image" invoker="get_static_image">
        <doc xml:whitespace="preserve">If an animation is really just a plain image (has only one frame),
this function returns that image. If the animation is an animation,
this function returns a reasonable thing to display as a static
unanimated image, which might be the first frame, or something more
sophisticated. If an animation hasn't loaded any frames yet, this
function will return %NULL.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">unanimated image representing the animation</doc>
          <type name="Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
      </virtual-method>
      <virtual-method name="is_static_image" invoker="is_static_image">
        <doc xml:whitespace="preserve">If you load a file with gdk_pixbuf_animation_new_from_file() and it turns
out to be a plain, unanimated image, then this function will return
%TRUE. Use gdk_pixbuf_animation_get_static_image() to retrieve
the image.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the "animation" was really just an image</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </virtual-method>
      <method name="get_height" c:identifier="gdk_pixbuf_animation_get_height">
        <doc xml:whitespace="preserve">Queries the height of the bounding box of a pixbuf animation.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">Height of the bounding box of the animation.</doc>
          <type name="gint" c:type="int"/>
        </return-value>
      </method>
      <method name="get_iter" c:identifier="gdk_pixbuf_animation_get_iter">
        <doc xml:whitespace="preserve">Get an iterator for displaying an animation. The iterator provides
the frames that should be displayed at a given time.
It should be freed after use with g_object_unref().
marks the beginning of animation playback. After creating an
iterator, you should immediately display the pixbuf returned by
gdk_pixbuf_animation_iter_get_pixbuf(). Then, you should install a
timeout (with g_timeout_add()) or by some other mechanism ensure
that you'll update the image after
gdk_pixbuf_animation_iter_get_delay_time() milliseconds. Each time
the image is updated, you should reinstall the timeout with the new,
possibly-changed delay time.
As a shortcut, if @start_time is %NULL, the result of
g_get_current_time() will be used automatically.
To update the image (i.e. possibly change the result of
gdk_pixbuf_animation_iter_get_pixbuf() to a new frame of the animation),
call gdk_pixbuf_animation_iter_advance().
If you're using #GdkPixbufLoader, in addition to updating the image
after the delay time, you should also update it whenever you
receive the area_updated signal and
gdk_pixbuf_animation_iter_on_currently_loading_frame() returns
%TRUE. In this case, the frame currently being fed into the loader
has received new data, so needs to be refreshed. The delay time for
a frame may also be modified after an area_updated signal, for
example if the delay time for a frame is encoded in the data after
the frame itself. So your timeout should be reinstalled after any
area_updated signal.
A delay time of -1 is possible, indicating "infinite."</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">an iterator to move over the animation</doc>
          <type name="PixbufAnimationIter" c:type="GdkPixbufAnimationIter*"/>
        </return-value>
        <parameters>
          <parameter name="start_time" transfer-ownership="none">
            <doc xml:whitespace="preserve">time when the animation starts playing</doc>
            <type name="GLib.TimeVal" c:type="GTimeVal*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_static_image"
              c:identifier="gdk_pixbuf_animation_get_static_image">
        <doc xml:whitespace="preserve">If an animation is really just a plain image (has only one frame),
this function returns that image. If the animation is an animation,
this function returns a reasonable thing to display as a static
unanimated image, which might be the first frame, or something more
sophisticated. If an animation hasn't loaded any frames yet, this
function will return %NULL.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">unanimated image representing the animation</doc>
          <type name="Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
      </method>
      <method name="get_width" c:identifier="gdk_pixbuf_animation_get_width">
        <doc xml:whitespace="preserve">Queries the width of the bounding box of a pixbuf animation.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">Width of the bounding box of the animation.</doc>
          <type name="gint" c:type="int"/>
        </return-value>
      </method>
      <method name="is_static_image"
              c:identifier="gdk_pixbuf_animation_is_static_image">
        <doc xml:whitespace="preserve">If you load a file with gdk_pixbuf_animation_new_from_file() and it turns
out to be a plain, unanimated image, then this function will return
%TRUE. Use gdk_pixbuf_animation_get_static_image() to retrieve
the image.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the "animation" was really just an image</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="ref"
              c:identifier="gdk_pixbuf_animation_ref"
              introspectable="0"
              deprecated="Use g_object_ref()."
              deprecated-version="2.0">
        <doc xml:whitespace="preserve">Adds a reference to an animation.</doc>
        <return-value>
          <doc xml:whitespace="preserve">The same as the @animation argument.</doc>
          <type name="PixbufAnimation" c:type="GdkPixbufAnimation*"/>
        </return-value>
      </method>
      <method name="unref"
              c:identifier="gdk_pixbuf_animation_unref"
              introspectable="0"
              deprecated="Use g_object_unref()."
              deprecated-version="2.0">
        <doc xml:whitespace="preserve">Removes a reference from an animation.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="PixbufAnimationClass"
            c:type="GdkPixbufAnimationClass"
            glib:is-gtype-struct-for="PixbufAnimation">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="is_static_image">
        <callback name="is_static_image">
          <return-value transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE if the "animation" was really just an image</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="anim" transfer-ownership="none">
              <type name="PixbufAnimation" c:type="GdkPixbufAnimation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_static_image">
        <callback name="get_static_image">
          <return-value transfer-ownership="none">
            <doc xml:whitespace="preserve">unanimated image representing the animation</doc>
            <type name="Pixbuf" c:type="GdkPixbuf*"/>
          </return-value>
          <parameters>
            <parameter name="anim" transfer-ownership="none">
              <type name="PixbufAnimation" c:type="GdkPixbufAnimation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_size">
        <callback name="get_size">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="anim" transfer-ownership="none">
              <type name="PixbufAnimation" c:type="GdkPixbufAnimation*"/>
            </parameter>
            <parameter name="width" transfer-ownership="none">
              <type name="gint" c:type="int*"/>
            </parameter>
            <parameter name="height" transfer-ownership="none">
              <type name="gint" c:type="int*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_iter">
        <callback name="get_iter">
          <return-value transfer-ownership="full">
            <doc xml:whitespace="preserve">an iterator to move over the animation</doc>
            <type name="PixbufAnimationIter" c:type="GdkPixbufAnimationIter*"/>
          </return-value>
          <parameters>
            <parameter name="anim" transfer-ownership="none">
              <type name="PixbufAnimation" c:type="GdkPixbufAnimation*"/>
            </parameter>
            <parameter name="start_time" transfer-ownership="none">
              <doc xml:whitespace="preserve">time when the animation starts playing</doc>
              <type name="GLib.TimeVal" c:type="GTimeVal*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="PixbufAnimationIter"
           c:symbol-prefix="pixbuf_animation_iter"
           c:type="GdkPixbufAnimationIter"
           parent="GObject.Object"
           glib:type-name="GdkPixbufAnimationIter"
           glib:get-type="gdk_pixbuf_animation_iter_get_type"
           glib:type-struct="PixbufAnimationIterClass">
      <virtual-method name="advance" invoker="advance">
        <doc xml:whitespace="preserve">Possibly advances an animation to a new frame. Chooses the frame based
on the start time passed to gdk_pixbuf_animation_get_iter().
must be greater than or equal to the time passed to
gdk_pixbuf_animation_get_iter(), and must increase or remain
unchanged each time gdk_pixbuf_animation_iter_get_pixbuf() is
called. That is, you can't go backward in time; animations only
play forward.
As a shortcut, pass %NULL for the current time and g_get_current_time()
will be invoked on your behalf. So you only need to explicitly pass
at double speed.
If this function returns %FALSE, there's no need to update the animation
display, assuming the display had been rendered prior to advancing;
if %TRUE, you need to call gdk_animation_iter_get_pixbuf() and update the
display with the new pixbuf.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the image may need updating</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="current_time" transfer-ownership="none">
            <doc xml:whitespace="preserve">current time</doc>
            <type name="GLib.TimeVal" c:type="GTimeVal*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_delay_time" invoker="get_delay_time">
        <doc xml:whitespace="preserve">Gets the number of milliseconds the current pixbuf should be displayed,
or -1 if the current pixbuf should be displayed forever. g_timeout_add()
conveniently takes a timeout in milliseconds, so you can use a timeout
to schedule the next update.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">delay time in milliseconds (thousandths of a second)</doc>
          <type name="gint" c:type="int"/>
        </return-value>
      </virtual-method>
      <virtual-method name="get_pixbuf" invoker="get_pixbuf">
        <doc xml:whitespace="preserve">Gets the current pixbuf which should be displayed; the pixbuf will
be the same size as the animation itself
(gdk_pixbuf_animation_get_width(), gdk_pixbuf_animation_get_height()). 
This pixbuf should be displayed for 
gdk_pixbuf_animation_iter_get_delay_time() milliseconds.  The caller
of this function does not own a reference to the returned pixbuf;
the returned pixbuf will become invalid when the iterator advances
to the next frame, which may happen anytime you call
gdk_pixbuf_animation_iter_advance(). Copy the pixbuf to keep it
(don't just add a reference), as it may get recycled as you advance
the iterator.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the pixbuf to be displayed</doc>
          <type name="Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
      </virtual-method>
      <virtual-method name="on_currently_loading_frame"
                      invoker="on_currently_loading_frame">
        <doc xml:whitespace="preserve">Used to determine how to respond to the area_updated signal on
#GdkPixbufLoader when loading an animation. area_updated is emitted
for an area of the frame currently streaming in to the loader. So if
you're on the currently loading frame, you need to redraw the screen for
the updated area.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the frame we're on is partially loaded, or the last frame</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </virtual-method>
      <method name="advance" c:identifier="gdk_pixbuf_animation_iter_advance">
        <doc xml:whitespace="preserve">Possibly advances an animation to a new frame. Chooses the frame based
on the start time passed to gdk_pixbuf_animation_get_iter().
must be greater than or equal to the time passed to
gdk_pixbuf_animation_get_iter(), and must increase or remain
unchanged each time gdk_pixbuf_animation_iter_get_pixbuf() is
called. That is, you can't go backward in time; animations only
play forward.
As a shortcut, pass %NULL for the current time and g_get_current_time()
will be invoked on your behalf. So you only need to explicitly pass
at double speed.
If this function returns %FALSE, there's no need to update the animation
display, assuming the display had been rendered prior to advancing;
if %TRUE, you need to call gdk_animation_iter_get_pixbuf() and update the
display with the new pixbuf.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the image may need updating</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="current_time" transfer-ownership="none">
            <doc xml:whitespace="preserve">current time</doc>
            <type name="GLib.TimeVal" c:type="GTimeVal*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_delay_time"
              c:identifier="gdk_pixbuf_animation_iter_get_delay_time">
        <doc xml:whitespace="preserve">Gets the number of milliseconds the current pixbuf should be displayed,
or -1 if the current pixbuf should be displayed forever. g_timeout_add()
conveniently takes a timeout in milliseconds, so you can use a timeout
to schedule the next update.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">delay time in milliseconds (thousandths of a second)</doc>
          <type name="gint" c:type="int"/>
        </return-value>
      </method>
      <method name="get_pixbuf"
              c:identifier="gdk_pixbuf_animation_iter_get_pixbuf">
        <doc xml:whitespace="preserve">Gets the current pixbuf which should be displayed; the pixbuf will
be the same size as the animation itself
(gdk_pixbuf_animation_get_width(), gdk_pixbuf_animation_get_height()). 
This pixbuf should be displayed for 
gdk_pixbuf_animation_iter_get_delay_time() milliseconds.  The caller
of this function does not own a reference to the returned pixbuf;
the returned pixbuf will become invalid when the iterator advances
to the next frame, which may happen anytime you call
gdk_pixbuf_animation_iter_advance(). Copy the pixbuf to keep it
(don't just add a reference), as it may get recycled as you advance
the iterator.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the pixbuf to be displayed</doc>
          <type name="Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
      </method>
      <method name="on_currently_loading_frame"
              c:identifier="gdk_pixbuf_animation_iter_on_currently_loading_frame">
        <doc xml:whitespace="preserve">Used to determine how to respond to the area_updated signal on
#GdkPixbufLoader when loading an animation. area_updated is emitted
for an area of the frame currently streaming in to the loader. So if
you're on the currently loading frame, you need to redraw the screen for
the updated area.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the frame we're on is partially loaded, or the last frame</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="PixbufAnimationIterClass"
            c:type="GdkPixbufAnimationIterClass"
            glib:is-gtype-struct-for="PixbufAnimationIter">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="get_delay_time">
        <callback name="get_delay_time">
          <return-value transfer-ownership="none">
            <doc xml:whitespace="preserve">delay time in milliseconds (thousandths of a second)</doc>
            <type name="gint" c:type="int"/>
          </return-value>
          <parameters>
            <parameter name="iter" transfer-ownership="none">
              <type name="PixbufAnimationIter"
                    c:type="GdkPixbufAnimationIter*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_pixbuf">
        <callback name="get_pixbuf">
          <return-value transfer-ownership="none">
            <doc xml:whitespace="preserve">the pixbuf to be displayed</doc>
            <type name="Pixbuf" c:type="GdkPixbuf*"/>
          </return-value>
          <parameters>
            <parameter name="iter" transfer-ownership="none">
              <type name="PixbufAnimationIter"
                    c:type="GdkPixbufAnimationIter*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="on_currently_loading_frame">
        <callback name="on_currently_loading_frame">
          <return-value transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE if the frame we're on is partially loaded, or the last frame</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="iter" transfer-ownership="none">
              <type name="PixbufAnimationIter"
                    c:type="GdkPixbufAnimationIter*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="advance">
        <callback name="advance">
          <return-value transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE if the image may need updating</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="iter" transfer-ownership="none">
              <type name="PixbufAnimationIter"
                    c:type="GdkPixbufAnimationIter*"/>
            </parameter>
            <parameter name="current_time" transfer-ownership="none">
              <doc xml:whitespace="preserve">current time</doc>
              <type name="GLib.TimeVal" c:type="GTimeVal*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <callback name="PixbufDestroyNotify" c:type="GdkPixbufDestroyNotify">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="pixels" transfer-ownership="none">
          <type name="guint8" c:type="guchar*"/>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <enumeration name="PixbufError"
                 glib:type-name="GdkPixbufError"
                 glib:get-type="gdk_pixbuf_error_get_type"
                 c:type="GdkPixbufError"
                 glib:error-quark="gdk_pixbuf_error_quark">
      <member name="corrupt_image"
              value="0"
              c:identifier="GDK_PIXBUF_ERROR_CORRUPT_IMAGE"
              glib:nick="corrupt-image"/>
      <member name="insufficient_memory"
              value="1"
              c:identifier="GDK_PIXBUF_ERROR_INSUFFICIENT_MEMORY"
              glib:nick="insufficient-memory"/>
      <member name="bad_option"
              value="2"
              c:identifier="GDK_PIXBUF_ERROR_BAD_OPTION"
              glib:nick="bad-option"/>
      <member name="unknown_type"
              value="3"
              c:identifier="GDK_PIXBUF_ERROR_UNKNOWN_TYPE"
              glib:nick="unknown-type"/>
      <member name="unsupported_operation"
              value="4"
              c:identifier="GDK_PIXBUF_ERROR_UNSUPPORTED_OPERATION"
              glib:nick="unsupported-operation"/>
      <member name="failed"
              value="5"
              c:identifier="GDK_PIXBUF_ERROR_FAILED"
              glib:nick="failed"/>
    </enumeration>
    <record name="PixbufFormat"
            c:type="GdkPixbufFormat"
            glib:type-name="GdkPixbufFormat"
            glib:get-type="gdk_pixbuf_format_get_type"
            c:symbol-prefix="pixbuf_format">
      <field name="name" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="signature" writable="1">
        <type name="PixbufModulePattern" c:type="GdkPixbufModulePattern*"/>
      </field>
      <field name="domain" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="description" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="mime_types" writable="1">
        <type name="utf8" c:type="gchar**"/>
      </field>
      <field name="extensions" writable="1">
        <type name="utf8" c:type="gchar**"/>
      </field>
      <field name="flags" writable="1">
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="disabled" writable="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="license" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <method name="copy" c:identifier="gdk_pixbuf_format_copy" version="2.22">
        <doc xml:whitespace="preserve">Creates a copy of @format
gdk_pixbuf_format_free() to free the resources when done</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the newly allocated copy of a #GdkPixbufFormat. Use</doc>
          <type name="PixbufFormat" c:type="GdkPixbufFormat*"/>
        </return-value>
      </method>
      <method name="free" c:identifier="gdk_pixbuf_format_free" version="2.22">
        <doc xml:whitespace="preserve">Frees the resources allocated when copying a #GdkPixbufFormat
using gdk_pixbuf_format_copy()</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="get_description"
              c:identifier="gdk_pixbuf_format_get_description"
              version="2.2">
        <doc xml:whitespace="preserve">Returns a description of the format.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a description of the format.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_extensions"
              c:identifier="gdk_pixbuf_format_get_extensions"
              version="2.2">
        <doc xml:whitespace="preserve">Returns the filename extensions typically used for files in the 
given format.
freed with g_strfreev() when it is no longer needed.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a %NULL-terminated array of filename extensions which must be</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
      </method>
      <method name="get_license"
              c:identifier="gdk_pixbuf_format_get_license"
              version="2.6">
        <doc xml:whitespace="preserve">Returns information about the license of the image loader for the format. The
returned string should be a shorthand for a wellknown license, e.g. "LGPL",
"GPL", "QPL", "GPL/QPL", or "other" to indicate some other license.  This
string should be freed with g_free() when it's no longer needed.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a string describing the license of @format.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_mime_types"
              c:identifier="gdk_pixbuf_format_get_mime_types"
              version="2.2">
        <doc xml:whitespace="preserve">Returns the mime types supported by the format.
g_strfreev() when it is no longer needed.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a %NULL-terminated array of mime types which must be freed with</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
      </method>
      <method name="get_name"
              c:identifier="gdk_pixbuf_format_get_name"
              version="2.2">
        <doc xml:whitespace="preserve">Returns the name of the format.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the name of the format.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="is_disabled"
              c:identifier="gdk_pixbuf_format_is_disabled"
              version="2.6">
        <doc xml:whitespace="preserve">Returns whether this image format is disabled. See
gdk_pixbuf_format_set_disabled().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">whether this image format is disabled.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="is_scalable"
              c:identifier="gdk_pixbuf_format_is_scalable"
              version="2.6">
        <doc xml:whitespace="preserve">Returns whether this image format is scalable. If a file is in a 
scalable format, it is preferable to load it at the desired size, 
rather than loading it at the default size and scaling the 
resulting pixbuf to the desired size.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">whether this image format is scalable.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="is_writable"
              c:identifier="gdk_pixbuf_format_is_writable"
              version="2.2">
        <doc xml:whitespace="preserve">Returns whether pixbufs can be saved in the given format.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">whether pixbufs can be saved in the given format.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="set_disabled"
              c:identifier="gdk_pixbuf_format_set_disabled"
              version="2.6">
        <doc xml:whitespace="preserve">Disables or enables an image format. If a format is disabled, 
gdk-pixbuf won't use the image loader for this format to load 
images. Applications can use this to avoid using image loaders 
with an inappropriate license, see gdk_pixbuf_format_get_license().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="disabled" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE to disable the format @format</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <bitfield name="PixbufFormatFlags" c:type="GdkPixbufFormatFlags">
      <member name="writable"
              value="1"
              c:identifier="GDK_PIXBUF_FORMAT_WRITABLE"/>
      <member name="scalable"
              value="2"
              c:identifier="GDK_PIXBUF_FORMAT_SCALABLE"/>
      <member name="threadsafe"
              value="4"
              c:identifier="GDK_PIXBUF_FORMAT_THREADSAFE"/>
    </bitfield>
    <class name="PixbufLoader"
           c:symbol-prefix="pixbuf_loader"
           c:type="GdkPixbufLoader"
           parent="GObject.Object"
           glib:type-name="GdkPixbufLoader"
           glib:get-type="gdk_pixbuf_loader_get_type"
           glib:type-struct="PixbufLoaderClass">
      <constructor name="new" c:identifier="gdk_pixbuf_loader_new">
        <doc xml:whitespace="preserve">Creates a new pixbuf loader object.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A newly-created pixbuf loader.</doc>
          <type name="PixbufLoader" c:type="GdkPixbufLoader*"/>
        </return-value>
      </constructor>
      <constructor name="new_with_mime_type"
                   c:identifier="gdk_pixbuf_loader_new_with_mime_type"
                   version="2.4"
                   throws="1">
        <doc xml:whitespace="preserve">Creates a new pixbuf loader object that always attempts to parse
image data as if it were an image of mime type @mime_type, instead of
identifying the type automatically. Useful if you want an error if
the image isn't the expected mime type, for loading image formats
that can't be reliably identified by looking at the data, or if
the user manually forces a specific mime type.
The list of supported mime types depends on what image loaders
are installed, but typically "image/png", "image/jpeg", "image/gif", 
"image/tiff" and "image/x-xpixmap" are among the supported mime types. 
To obtain the full list of supported mime types, call 
gdk_pixbuf_format_get_mime_types() on each of the #GdkPixbufFormat 
structs returned by gdk_pixbuf_get_formats().</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A newly-created pixbuf loader.</doc>
          <type name="PixbufLoader" c:type="GdkPixbufLoader*"/>
        </return-value>
        <parameters>
          <parameter name="mime_type" transfer-ownership="none">
            <doc xml:whitespace="preserve">the mime type to be loaded</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_with_type"
                   c:identifier="gdk_pixbuf_loader_new_with_type"
                   throws="1">
        <doc xml:whitespace="preserve">Creates a new pixbuf loader object that always attempts to parse
image data as if it were an image of type @image_type, instead of
identifying the type automatically. Useful if you want an error if
the image isn't the expected type, for loading image formats
that can't be reliably identified by looking at the data, or if
the user manually forces a specific type.
The list of supported image formats depends on what image loaders
are installed, but typically "png", "jpeg", "gif", "tiff" and 
"xpm" are among the supported formats. To obtain the full list of
supported image formats, call gdk_pixbuf_format_get_name() on each 
of the #GdkPixbufFormat structs returned by gdk_pixbuf_get_formats().</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A newly-created pixbuf loader.</doc>
          <type name="PixbufLoader" c:type="GdkPixbufLoader*"/>
        </return-value>
        <parameters>
          <parameter name="image_type" transfer-ownership="none">
            <doc xml:whitespace="preserve">name of the image format to be loaded with the image</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="close" c:identifier="gdk_pixbuf_loader_close" throws="1">
        <doc xml:whitespace="preserve">Informs a pixbuf loader that no further writes with
gdk_pixbuf_loader_write() will occur, so that it can free its
internal loading structures. Also, tries to parse any data that
hasn't yet been parsed; if the remaining data is partial or
corrupt, an error will be returned.  If %FALSE is returned, @error
will be set to an error from the #GDK_PIXBUF_ERROR or #G_FILE_ERROR
domains. If you're just cancelling a load rather than expecting it
to be finished, passing %NULL for @error to ignore it is
reasonable.
Remember that this does not unref the loader, so if you plan not to
use it anymore, please g_object_unref() it.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if all image data written so far was successfully</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_animation"
              c:identifier="gdk_pixbuf_loader_get_animation">
        <doc xml:whitespace="preserve">Queries the #GdkPixbufAnimation that a pixbuf loader is currently creating.
In general it only makes sense to call this function after the "area-prepared"
signal has been emitted by the loader. If the loader doesn't have enough
bytes yet (hasn't emitted the "area-prepared" signal) this function will 
return %NULL.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The #GdkPixbufAnimation that the loader is loading, or %NULL if</doc>
          <type name="PixbufAnimation" c:type="GdkPixbufAnimation*"/>
        </return-value>
      </method>
      <method name="get_format"
              c:identifier="gdk_pixbuf_loader_get_format"
              version="2.2">
        <doc xml:whitespace="preserve">Obtains the available information about the format of the 
currently loading image file.
by GdkPixbuf and should not be freed.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A #GdkPixbufFormat or %NULL. The return value is owned</doc>
          <type name="PixbufFormat" c:type="GdkPixbufFormat*"/>
        </return-value>
      </method>
      <method name="get_pixbuf" c:identifier="gdk_pixbuf_loader_get_pixbuf">
        <doc xml:whitespace="preserve">Queries the #GdkPixbuf that a pixbuf loader is currently creating.
In general it only makes sense to call this function after the
"area-prepared" signal has been emitted by the loader; this means
that enough data has been read to know the size of the image that
will be allocated.  If the loader has not received enough data via
gdk_pixbuf_loader_write(), then this function returns %NULL.  The
returned pixbuf will be the same in all future calls to the loader,
so simply calling g_object_ref() should be sufficient to continue
using it.  Additionally, if the loader is an animation, it will
return the "static image" of the animation
(see gdk_pixbuf_animation_get_static_image()).
enough data has been read to determine how to create the image buffer.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The #GdkPixbuf that the loader is creating, or %NULL if not</doc>
          <type name="Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
      </method>
      <method name="set_size"
              c:identifier="gdk_pixbuf_loader_set_size"
              version="2.2">
        <doc xml:whitespace="preserve">Causes the image to be scaled while it is loaded. The desired
image size can be determined relative to the original size of
the image by calling gdk_pixbuf_loader_set_size() from a
signal handler for the ::size-prepared signal.
Attempts to set the desired image size  are ignored after the 
emission of the ::size-prepared signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="width" transfer-ownership="none">
            <doc xml:whitespace="preserve">The desired width of the image being loaded.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:whitespace="preserve">The desired height of the image being loaded.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="write" c:identifier="gdk_pixbuf_loader_write" throws="1">
        <doc xml:whitespace="preserve">This will cause a pixbuf loader to parse the next @count bytes of
an image.  It will return %TRUE if the data was loaded successfully,
and %FALSE if an error occurred.  In the latter case, the loader
will be closed, and will not accept further writes. If %FALSE is
returned, @error will be set to an error from the #GDK_PIXBUF_ERROR
or #G_FILE_ERROR domains.
cannot parse the buffer.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the write was successful, or %FALSE if the loader</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="buf" transfer-ownership="none">
            <doc xml:whitespace="preserve">Pointer to image data.</doc>
            <type name="guint8" c:type="guchar*"/>
          </parameter>
          <parameter name="count" transfer-ownership="none">
            <doc xml:whitespace="preserve">Length of the @buf buffer in bytes.</doc>
            <type name="gulong" c:type="gsize"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <glib:signal name="area-prepared">
        <doc xml:whitespace="preserve">This signal is emitted when the pixbuf loader has allocated the 
pixbuf in the desired size.  After this signal is emitted, 
applications can call gdk_pixbuf_loader_get_pixbuf() to fetch 
the partially-loaded pixbuf.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
      <glib:signal name="area-updated">
        <doc xml:whitespace="preserve">This signal is emitted when a significant area of the image being
loaded has been updated.  Normally it means that a complete
scanline has been read in, but it could be a different area as
well.  Applications can use this signal to know when to repaint
areas of an image that is being loaded.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">X offset of upper-left corner of the updated area.</doc>
            <type name="gint"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <doc xml:whitespace="preserve">Y offset of upper-left corner of the updated area.</doc>
            <type name="gint"/>
          </parameter>
          <parameter name="p1" transfer-ownership="none">
            <doc xml:whitespace="preserve">Width of updated area.</doc>
            <type name="gint"/>
          </parameter>
          <parameter name="p2" transfer-ownership="none">
            <doc xml:whitespace="preserve">Height of updated area.</doc>
            <type name="gint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="closed">
        <doc xml:whitespace="preserve">This signal is emitted when gdk_pixbuf_loader_close() is called.
It can be used by different parts of an application to receive
notification when an image loader is closed by the code that
drives it.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
      <glib:signal name="size-prepared">
        <doc xml:whitespace="preserve">This signal is emitted when the pixbuf loader has been fed the
initial amount of data that is required to figure out the size
of the image that it will create.  Applications can call  
gdk_pixbuf_loader_set_size() in response to this signal to set
the desired size to which the image should be scaled.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the original width of the image</doc>
            <type name="gint"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <doc xml:whitespace="preserve">the original height of the image</doc>
            <type name="gint"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="PixbufLoaderClass"
            c:type="GdkPixbufLoaderClass"
            glib:is-gtype-struct-for="PixbufLoader">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="size_prepared">
        <callback name="size_prepared">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="loader" transfer-ownership="none">
              <type name="PixbufLoader" c:type="GdkPixbufLoader*"/>
            </parameter>
            <parameter name="width" transfer-ownership="none">
              <type name="gint" c:type="int"/>
            </parameter>
            <parameter name="height" transfer-ownership="none">
              <type name="gint" c:type="int"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="area_prepared">
        <callback name="area_prepared">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="loader" transfer-ownership="none">
              <type name="PixbufLoader" c:type="GdkPixbufLoader*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="area_updated">
        <callback name="area_updated">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="loader" transfer-ownership="none">
              <type name="PixbufLoader" c:type="GdkPixbufLoader*"/>
            </parameter>
            <parameter name="x" transfer-ownership="none">
              <type name="gint" c:type="int"/>
            </parameter>
            <parameter name="y" transfer-ownership="none">
              <type name="gint" c:type="int"/>
            </parameter>
            <parameter name="width" transfer-ownership="none">
              <type name="gint" c:type="int"/>
            </parameter>
            <parameter name="height" transfer-ownership="none">
              <type name="gint" c:type="int"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="closed">
        <callback name="closed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="loader" transfer-ownership="none">
              <type name="PixbufLoader" c:type="GdkPixbufLoader*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="PixbufModule" c:type="GdkPixbufModule">
      <field name="module_name" writable="1">
        <type name="utf8" c:type="char*"/>
      </field>
      <field name="module_path" writable="1">
        <type name="utf8" c:type="char*"/>
      </field>
      <field name="module" writable="1">
        <type name="GModule.Module" c:type="GModule*"/>
      </field>
      <field name="info" writable="1">
        <type name="PixbufFormat" c:type="GdkPixbufFormat*"/>
      </field>
      <field name="load" introspectable="0">
        <callback name="load" introspectable="0" throws="1">
          <return-value>
            <type name="Pixbuf" c:type="GdkPixbuf*"/>
          </return-value>
          <parameters>
            <parameter name="f" transfer-ownership="none">
              <type name="gpointer" c:type="FILE*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="load_xpm_data" introspectable="0">
        <callback name="load_xpm_data" introspectable="0">
          <return-value>
            <type name="Pixbuf" c:type="GdkPixbuf*"/>
          </return-value>
          <parameters>
            <parameter name="data" transfer-ownership="none">
              <type name="utf8" c:type="char**"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="begin_load" introspectable="0">
        <callback name="begin_load" introspectable="0" throws="1">
          <return-value>
            <type name="gpointer" c:type="gpointer"/>
          </return-value>
          <parameters>
            <parameter name="size_func" transfer-ownership="none">
              <type name="PixbufModuleSizeFunc"
                    c:type="GdkPixbufModuleSizeFunc"/>
            </parameter>
            <parameter name="prepare_func" transfer-ownership="none">
              <type name="PixbufModulePreparedFunc"
                    c:type="GdkPixbufModulePreparedFunc"/>
            </parameter>
            <parameter name="update_func"
                       transfer-ownership="none"
                       closure="3">
              <type name="PixbufModuleUpdatedFunc"
                    c:type="GdkPixbufModuleUpdatedFunc"/>
            </parameter>
            <parameter name="user_data" transfer-ownership="none" closure="3">
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="stop_load">
        <callback name="stop_load" throws="1">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="context" transfer-ownership="none">
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="load_increment">
        <callback name="load_increment" throws="1">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="context" transfer-ownership="none">
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
            <parameter name="buf" transfer-ownership="none">
              <type name="guint8" c:type="guchar*"/>
            </parameter>
            <parameter name="size" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="load_animation" introspectable="0">
        <callback name="load_animation" introspectable="0" throws="1">
          <return-value>
            <type name="PixbufAnimation" c:type="GdkPixbufAnimation*"/>
          </return-value>
          <parameters>
            <parameter name="f" transfer-ownership="none">
              <type name="gpointer" c:type="FILE*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="save">
        <callback name="save" throws="1">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="f" transfer-ownership="none">
              <type name="gpointer" c:type="FILE*"/>
            </parameter>
            <parameter name="pixbuf" transfer-ownership="none">
              <type name="Pixbuf" c:type="GdkPixbuf*"/>
            </parameter>
            <parameter name="param_keys" transfer-ownership="none">
              <type name="utf8" c:type="gchar**"/>
            </parameter>
            <parameter name="param_values" transfer-ownership="none">
              <type name="utf8" c:type="gchar**"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="save_to_callback" introspectable="0">
        <callback name="save_to_callback" introspectable="0" throws="1">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="save_func" transfer-ownership="none" closure="1">
              <type name="PixbufSaveFunc" c:type="GdkPixbufSaveFunc"/>
            </parameter>
            <parameter name="user_data" transfer-ownership="none" closure="1">
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
            <parameter name="pixbuf" transfer-ownership="none">
              <type name="Pixbuf" c:type="GdkPixbuf*"/>
            </parameter>
            <parameter name="option_keys" transfer-ownership="none">
              <type name="utf8" c:type="gchar**"/>
            </parameter>
            <parameter name="option_values" transfer-ownership="none">
              <type name="utf8" c:type="gchar**"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_reserved1" introspectable="0">
        <callback name="_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved2" introspectable="0">
        <callback name="_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved3" introspectable="0">
        <callback name="_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved4" introspectable="0">
        <callback name="_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved5" introspectable="0">
        <callback name="_reserved5">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <callback name="PixbufModuleFillInfoFunc"
              c:type="GdkPixbufModuleFillInfoFunc">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <type name="PixbufFormat" c:type="GdkPixbufFormat*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="PixbufModuleFillVtableFunc"
              c:type="GdkPixbufModuleFillVtableFunc">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="module" transfer-ownership="none">
          <type name="PixbufModule" c:type="GdkPixbufModule*"/>
        </parameter>
      </parameters>
    </callback>
    <record name="PixbufModulePattern" c:type="GdkPixbufModulePattern">
      <field name="prefix" writable="1">
        <type name="utf8" c:type="char*"/>
      </field>
      <field name="mask" writable="1">
        <type name="utf8" c:type="char*"/>
      </field>
      <field name="relevance" writable="1">
        <type name="gint" c:type="int"/>
      </field>
    </record>
    <callback name="PixbufModulePreparedFunc"
              c:type="GdkPixbufModulePreparedFunc">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="pixbuf" transfer-ownership="none">
          <type name="Pixbuf" c:type="GdkPixbuf*"/>
        </parameter>
        <parameter name="anim" transfer-ownership="none">
          <type name="PixbufAnimation" c:type="GdkPixbufAnimation*"/>
        </parameter>
        <parameter name="user_data" transfer-ownership="none" closure="2">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="PixbufModuleSizeFunc" c:type="GdkPixbufModuleSizeFunc">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="width" transfer-ownership="none">
          <type name="gint" c:type="gint*"/>
        </parameter>
        <parameter name="height" transfer-ownership="none">
          <type name="gint" c:type="gint*"/>
        </parameter>
        <parameter name="user_data" transfer-ownership="none" closure="2">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="PixbufModuleUpdatedFunc"
              c:type="GdkPixbufModuleUpdatedFunc">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="pixbuf" transfer-ownership="none">
          <type name="Pixbuf" c:type="GdkPixbuf*"/>
        </parameter>
        <parameter name="x" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="y" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="width" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="height" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="user_data" transfer-ownership="none" closure="5">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <class name="PixbufNonAnim"
           c:symbol-prefix="pixbuf_non_anim"
           parent="PixbufAnimation"
           glib:type-name="GdkPixbufNonAnim"
           glib:get-type="gdk_pixbuf_non_anim_get_type">
      <constructor name="new" c:identifier="gdk_pixbuf_non_anim_new">
        <return-value transfer-ownership="full">
          <type name="PixbufAnimation" c:type="GdkPixbufAnimation*"/>
        </return-value>
        <parameters>
          <parameter name="pixbuf" transfer-ownership="none">
            <type name="Pixbuf" c:type="GdkPixbuf*"/>
          </parameter>
        </parameters>
      </constructor>
    </class>
    <enumeration name="PixbufRotation"
                 glib:type-name="GdkPixbufRotation"
                 glib:get-type="gdk_pixbuf_rotation_get_type"
                 c:type="GdkPixbufRotation">
      <member name="none"
              value="0"
              c:identifier="GDK_PIXBUF_ROTATE_NONE"
              glib:nick="none"/>
      <member name="counterclockwise"
              value="90"
              c:identifier="GDK_PIXBUF_ROTATE_COUNTERCLOCKWISE"
              glib:nick="counterclockwise"/>
      <member name="upsidedown"
              value="180"
              c:identifier="GDK_PIXBUF_ROTATE_UPSIDEDOWN"
              glib:nick="upsidedown"/>
      <member name="clockwise"
              value="270"
              c:identifier="GDK_PIXBUF_ROTATE_CLOCKWISE"
              glib:nick="clockwise"/>
    </enumeration>
    <callback name="PixbufSaveFunc" c:type="GdkPixbufSaveFunc">
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="buf" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="count" transfer-ownership="none">
          <type name="gulong" c:type="gsize"/>
        </parameter>
        <parameter name="error" transfer-ownership="none">
          <type name="GLib.Error" c:type="GError**"/>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <class name="PixbufSimpleAnim"
           c:symbol-prefix="pixbuf_simple_anim"
           c:type="GdkPixbufSimpleAnim"
           parent="PixbufAnimation"
           glib:type-name="GdkPixbufSimpleAnim"
           glib:get-type="gdk_pixbuf_simple_anim_get_type"
           glib:type-struct="PixbufSimpleAnimClass">
      <constructor name="new"
                   c:identifier="gdk_pixbuf_simple_anim_new"
                   version="2.8">
        <doc xml:whitespace="preserve">Creates a new, empty animation.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a newly allocated #GdkPixbufSimpleAnim</doc>
          <type name="PixbufSimpleAnim" c:type="GdkPixbufSimpleAnim*"/>
        </return-value>
        <parameters>
          <parameter name="width" transfer-ownership="none">
            <doc xml:whitespace="preserve">the width of the animation</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:whitespace="preserve">the height of the animation</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="rate" transfer-ownership="none">
            <doc xml:whitespace="preserve">the speed of the animation, in frames per second</doc>
            <type name="gfloat" c:type="gfloat"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="add_frame"
              c:identifier="gdk_pixbuf_simple_anim_add_frame"
              version="2.8">
        <doc xml:whitespace="preserve">Adds a new frame to @animation. The @pixbuf must
have the dimensions specified when the animation 
was constructed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="pixbuf" transfer-ownership="none">
            <doc xml:whitespace="preserve">the pixbuf to add</doc>
            <type name="Pixbuf" c:type="GdkPixbuf*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_loop"
              c:identifier="gdk_pixbuf_simple_anim_get_loop"
              version="2.18">
        <doc xml:whitespace="preserve">Gets whether @animation should loop indefinitely when it reaches the end.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the animation loops forever, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="set_loop"
              c:identifier="gdk_pixbuf_simple_anim_set_loop"
              version="2.18">
        <doc xml:whitespace="preserve">Sets whether @animation should loop indefinitely when it reaches the end.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="loop" transfer-ownership="none">
            <doc xml:whitespace="preserve">whether to loop the animation</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="loop"
                version="2.18"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Whether the animation should loop when it reaches the end.</doc>
        <type name="gboolean"/>
      </property>
    </class>
    <record name="PixbufSimpleAnimClass"
            c:type="GdkPixbufSimpleAnimClass"
            disguised="1"
            glib:is-gtype-struct-for="PixbufSimpleAnim">
    </record>
    <class name="PixbufSimpleAnimIter"
           c:symbol-prefix="pixbuf_simple_anim_iter"
           parent="PixbufAnimationIter"
           glib:type-name="GdkPixbufSimpleAnimIter"
           glib:get-type="gdk_pixbuf_simple_anim_iter_get_type">
    </class>
    <record name="Pixdata" c:type="GdkPixdata">
      <doc xml:whitespace="preserve">A #GdkPixdata contains pixbuf information in a form suitable for 
serialization and streaming.</doc>
      <field name="magic" writable="1">
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="length" writable="1">
        <type name="gint32" c:type="gint32"/>
      </field>
      <field name="pixdata_type" writable="1">
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="rowstride" writable="1">
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="width" writable="1">
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="height" writable="1">
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="pixel_data" writable="1">
        <type name="guint8" c:type="guint8*"/>
      </field>
      <method name="deserialize"
              c:identifier="gdk_pixdata_deserialize"
              throws="1">
        <doc xml:whitespace="preserve">Deserializes (reconstruct) a #GdkPixdata structure from a byte stream.
The byte stream consists of a straightforward writeout of the
#GdkPixdata fields in network byte order, plus the @pixel_data
bytes the structure points to.
The @pixdata contents are reconstructed byte by byte and are checked
for validity. This function may fail with %GDK_PIXBUF_CORRUPT_IMAGE
or %GDK_PIXBUF_ERROR_UNKNOWN_TYPE.
%FALSE otherwise.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">Upon successful deserialization %TRUE is returned,</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="stream_length" transfer-ownership="none">
            <doc xml:whitespace="preserve">length of the stream used for deserialization.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="stream" transfer-ownership="none">
            <doc xml:whitespace="preserve">stream of bytes containing a serialized #GdkPixdata structure.</doc>
            <type name="guint8" c:type="guint8*"/>
          </parameter>
        </parameters>
      </method>
      <method name="from_pixbuf"
              c:identifier="gdk_pixdata_from_pixbuf"
              introspectable="0">
        <doc xml:whitespace="preserve">Converts a #GdkPixbuf to a #GdkPixdata. If @use_rle is %TRUE, the
pixel data is run-length encoded into newly-allocated memory and a 
pointer to that memory is returned. 
for the run-length encoded pixel data, otherwise %NULL.</doc>
        <return-value>
          <doc xml:whitespace="preserve">If @ure_rle is %TRUE, a pointer to the newly-allocated memory</doc>
          <type name="gpointer" c:type="gpointer"/>
        </return-value>
        <parameters>
          <parameter name="pixbuf" transfer-ownership="none">
            <doc xml:whitespace="preserve">the data to fill @pixdata with.</doc>
            <type name="Pixbuf" c:type="GdkPixbuf*"/>
          </parameter>
          <parameter name="use_rle" transfer-ownership="none">
            <doc xml:whitespace="preserve">whether to use run-length encoding for the pixel data.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="serialize" c:identifier="gdk_pixdata_serialize">
        <doc xml:whitespace="preserve">Serializes a #GdkPixdata structure into a byte stream.
The byte stream consists of a straightforward writeout of the
#GdkPixdata fields in network byte order, plus the @pixel_data
bytes the structure points to.
#GdkPixdata structure.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">A newly-allocated string containing the serialized</doc>
          <type name="guint8" c:type="guint8*"/>
        </return-value>
        <parameters>
          <parameter name="stream_length_p" transfer-ownership="none">
            <doc xml:whitespace="preserve">location to store the resulting stream length in.</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="to_csource"
              c:identifier="gdk_pixdata_to_csource"
              introspectable="0">
        <doc xml:whitespace="preserve">Generates C source code suitable for compiling images directly 
into programs. 
gdk-pixbuf ships with a program called &lt;command&gt;gdk-pixbuf-csource&lt;/command&gt; 
which offers a command line interface to this function.
of @pixdata.</doc>
        <return-value>
          <doc xml:whitespace="preserve">a newly-allocated string containing the C source form</doc>
          <type name="GLib.String" c:type="GString*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:whitespace="preserve">used for naming generated data structures or macros.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="dump_type" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GdkPixdataDumpType determining the kind of C source to be generated.</doc>
            <type name="PixdataDumpType" c:type="GdkPixdataDumpType"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <bitfield name="PixdataDumpType" c:type="GdkPixdataDumpType">
      <member name="pixdata_stream"
              value="0"
              c:identifier="GDK_PIXDATA_DUMP_PIXDATA_STREAM"/>
      <member name="pixdata_struct"
              value="1"
              c:identifier="GDK_PIXDATA_DUMP_PIXDATA_STRUCT"/>
      <member name="macros" value="2" c:identifier="GDK_PIXDATA_DUMP_MACROS"/>
      <member name="gtypes" value="0" c:identifier="GDK_PIXDATA_DUMP_GTYPES"/>
      <member name="ctypes"
              value="256"
              c:identifier="GDK_PIXDATA_DUMP_CTYPES"/>
      <member name="static"
              value="512"
              c:identifier="GDK_PIXDATA_DUMP_STATIC"/>
      <member name="const" value="1024" c:identifier="GDK_PIXDATA_DUMP_CONST"/>
      <member name="rle_decoder"
              value="65536"
              c:identifier="GDK_PIXDATA_DUMP_RLE_DECODER"/>
    </bitfield>
    <bitfield name="PixdataType" c:type="GdkPixdataType">
      <doc xml:whitespace="preserve">one for the used colorspace, one for the width of the samples and one 
for the encoding of the pixel data.</doc>
      <member name="color_type_rgb"
              value="1"
              c:identifier="GDK_PIXDATA_COLOR_TYPE_RGB"/>
      <member name="color_type_rgba"
              value="2"
              c:identifier="GDK_PIXDATA_COLOR_TYPE_RGBA"/>
      <member name="color_type_mask"
              value="255"
              c:identifier="GDK_PIXDATA_COLOR_TYPE_MASK"/>
      <member name="sample_width_8"
              value="65536"
              c:identifier="GDK_PIXDATA_SAMPLE_WIDTH_8"/>
      <member name="sample_width_mask"
              value="983040"
              c:identifier="GDK_PIXDATA_SAMPLE_WIDTH_MASK"/>
      <member name="encoding_raw"
              value="16777216"
              c:identifier="GDK_PIXDATA_ENCODING_RAW"/>
      <member name="encoding_rle"
              value="33554432"
              c:identifier="GDK_PIXDATA_ENCODING_RLE"/>
      <member name="encoding_mask"
              value="251658240"
              c:identifier="GDK_PIXDATA_ENCODING_MASK"/>
    </bitfield>
    <function name="pixbuf_error_quark" c:identifier="gdk_pixbuf_error_quark">
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
  </namespace>
</repository>

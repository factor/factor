<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.0"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="GLib" version="2.0"/>
  <include name="GModule" version="2.0"/>
  <include name="GObject" version="2.0"/>
  <include name="Gst" version="0.10"/>
  <include name="GstBase" version="0.10"/>
  <include name="libxml2" version="2.0"/>
  <package name="gstreamer-0.10"/>
  <package name="gstreamer-base-0.10"/>
  <c:include name="gst/rtp/gstbasertpaudiopayload.h"/>
  <c:include name="gst/rtp/gstbasertpdepayload.h"/>
  <c:include name="gst/rtp/gstbasertppayload.h"/>
  <c:include name="gst/rtp/gstrtcpbuffer.h"/>
  <c:include name="gst/rtp/gstrtpbuffer.h"/>
  <c:include name="gst/rtp/gstrtppayloads.h"/>
  <namespace name="GstRtp"
             version="0.10"
             shared-library="libgstrtp-0.10.so.0"
             c:prefix="Gst">
    <class name="BaseRTPAudioPayload"
           c:type="GstBaseRTPAudioPayload"
           parent="BaseRTPPayload"
           glib:type-name="GstBaseRTPAudioPayload"
           glib:get-type="gst_base_rtp_audio_payload_get_type"
           glib:type-struct="BaseRTPAudioPayloadClass">
      <method name="set_frame_based"
              c:identifier="gst_base_rtp_audio_payload_set_frame_based"
              doc="Tells #GstBaseRTPAudioPayload that the child element is for a frame based
audio codec">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="set_frame_options"
              c:identifier="gst_base_rtp_audio_payload_set_frame_options"
              doc="Sets the options for frame based audio codecs.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="frame_duration" transfer-ownership="none">
            <type name="int" c:type="gint"/>
          </parameter>
          <parameter name="frame_size" transfer-ownership="none">
            <type name="int" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_sample_based"
              c:identifier="gst_base_rtp_audio_payload_set_sample_based"
              doc="Tells #GstBaseRTPAudioPayload that the child element is for a sample based
audio codec">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="set_sample_options"
              c:identifier="gst_base_rtp_audio_payload_set_sample_options"
              doc="Sets the options for sample based audio codecs.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="sample_size" transfer-ownership="none">
            <type name="int" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_samplebits_options"
              c:identifier="gst_base_rtp_audio_payload_set_samplebits_options"
              doc="Sets the options for sample based audio codecs."
              version="0.10.18">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="sample_size" transfer-ownership="none">
            <type name="int" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_adapter"
              c:identifier="gst_base_rtp_audio_payload_get_adapter"
              doc="Gets the internal adapter used by the depayloader."
              version="0.10.13">
        <return-value transfer-ownership="full">
          <type name="GstBase.Adapter" c:type="GstAdapter*"/>
        </return-value>
      </method>
      <method name="push"
              c:identifier="gst_base_rtp_audio_payload_push"
              doc="Create an RTP buffer and store @payload_len bytes of @data as the
payload. Set the timestamp on the new buffer to @timestamp before pushing
the buffer downstream."
              version="0.10.13">
        <return-value transfer-ownership="full">
          <type name="Gst.FlowReturn" c:type="GstFlowReturn"/>
        </return-value>
        <parameters>
          <parameter name="data" transfer-ownership="none">
            <array c:type="guint8*">
              <type name="uint8"/>
            </array>
          </parameter>
          <parameter name="payload_len" transfer-ownership="none">
            <type name="uint" c:type="guint"/>
          </parameter>
          <parameter name="timestamp" transfer-ownership="none">
            <type name="Gst.ClockTime" c:type="GstClockTime"/>
          </parameter>
        </parameters>
      </method>
      <method name="flush"
              c:identifier="gst_base_rtp_audio_payload_flush"
              doc="Create an RTP buffer and store @payload_len bytes of the adapter as the
payload. Set the timestamp on the new buffer to @timestamp before pushing
the buffer downstream.
If @payload_len is -1, all pending bytes will be flushed. If @timestamp is
-1, the timestamp will be calculated automatically."
              version="0.10.25">
        <return-value transfer-ownership="full">
          <type name="Gst.FlowReturn" c:type="GstFlowReturn"/>
        </return-value>
        <parameters>
          <parameter name="payload_len" transfer-ownership="none">
            <type name="uint" c:type="guint"/>
          </parameter>
          <parameter name="timestamp" transfer-ownership="none">
            <type name="Gst.ClockTime" c:type="GstClockTime"/>
          </parameter>
        </parameters>
      </method>
      <property name="buffer-list" writable="1">
        <type name="boolean" c:type="gboolean"/>
      </property>
      <field name="payload">
        <type name="BaseRTPPayload" c:type="GstBaseRTPPayload"/>
      </field>
      <field name="priv">
        <type name="BaseRTPAudioPayloadPrivate"
              c:type="GstBaseRTPAudioPayloadPrivate*"/>
      </field>
      <field name="base_ts">
        <type name="Gst.ClockTime" c:type="GstClockTime"/>
      </field>
      <field name="frame_size">
        <type name="int" c:type="gint"/>
      </field>
      <field name="frame_duration">
        <type name="int" c:type="gint"/>
      </field>
      <field name="sample_size">
        <type name="int" c:type="gint"/>
      </field>
      <field name="_gst_reserved">
        <array zero-terminated="0" c:type="gpointer" fixed-size="4">
          <type name="any"/>
        </array>
      </field>
    </class>
    <record name="BaseRTPAudioPayloadClass"
            c:type="GstBaseRTPAudioPayloadClass"
            glib:is-gtype-struct-for="BaseRTPAudioPayload">
      <field name="parent_class">
        <type name="BaseRTPPayloadClass" c:type="GstBaseRTPPayloadClass"/>
      </field>
      <field name="_gst_reserved">
        <array zero-terminated="0" c:type="gpointer" fixed-size="4">
          <type name="any"/>
        </array>
      </field>
    </record>
    <record name="BaseRTPAudioPayloadPrivate"
            c:type="GstBaseRTPAudioPayloadPrivate">
    </record>
    <class name="BaseRTPDepayload"
           c:type="GstBaseRTPDepayload"
           parent="Gst.Element"
           glib:type-name="GstBaseRTPDepayload"
           glib:get-type="gst_base_rtp_depayload_get_type"
           glib:type-struct="BaseRTPDepayloadClass">
      <virtual-method name="set_caps">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="caps" transfer-ownership="none">
            <type name="Gst.Caps" c:type="GstCaps*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="add_to_queue">
        <return-value transfer-ownership="full">
          <type name="Gst.FlowReturn" c:type="GstFlowReturn"/>
        </return-value>
        <parameters>
          <parameter name="in" transfer-ownership="none">
            <type name="Gst.Buffer" c:type="GstBuffer*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="process">
        <return-value transfer-ownership="full">
          <type name="Gst.Buffer" c:type="GstBuffer*"/>
        </return-value>
        <parameters>
          <parameter name="in" transfer-ownership="none">
            <type name="Gst.Buffer" c:type="GstBuffer*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_gst_timestamp">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="timestamp" transfer-ownership="none">
            <type name="uint32" c:type="guint32"/>
          </parameter>
          <parameter name="buf" transfer-ownership="none">
            <type name="Gst.Buffer" c:type="GstBuffer*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="packet_lost">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="event" transfer-ownership="none">
            <type name="Gst.Event" c:type="GstEvent*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="push"
              c:identifier="gst_base_rtp_depayload_push"
              doc="Push @out_buf to the peer of @filter. This function takes ownership of
Unlike gst_base_rtp_depayload_push_ts(), this function will not apply
any timestamp on the outgoing buffer. Subclasses should therefore timestamp
outgoing buffers themselves.">
        <return-value transfer-ownership="full">
          <type name="Gst.FlowReturn" c:type="GstFlowReturn"/>
        </return-value>
        <parameters>
          <parameter name="out_buf" transfer-ownership="none">
            <type name="Gst.Buffer" c:type="GstBuffer*"/>
          </parameter>
        </parameters>
      </method>
      <method name="push_ts"
              c:identifier="gst_base_rtp_depayload_push_ts"
              doc="Push @out_buf to the peer of @filter. This function takes ownership of
Unlike gst_base_rtp_depayload_push(), this function will by default apply
the last incomming timestamp on the outgoing buffer when it didn&apos;t have a
timestamp already. The set_get_timestamp vmethod can be overwritten to change
this behaviour (and take, for example, @timestamp into account).">
        <return-value transfer-ownership="full">
          <type name="Gst.FlowReturn" c:type="GstFlowReturn"/>
        </return-value>
        <parameters>
          <parameter name="timestamp" transfer-ownership="none">
            <type name="uint32" c:type="guint32"/>
          </parameter>
          <parameter name="out_buf" transfer-ownership="none">
            <type name="Gst.Buffer" c:type="GstBuffer*"/>
          </parameter>
        </parameters>
      </method>
      <property name="queue-delay" writable="1">
        <type name="uint" c:type="guint"/>
      </property>
      <field name="parent">
        <type name="Gst.Element" c:type="GstElement"/>
      </field>
      <field name="sinkpad">
        <type name="Gst.Pad" c:type="GstPad*"/>
      </field>
      <field name="srcpad">
        <type name="Gst.Pad" c:type="GstPad*"/>
      </field>
      <field name="queuelock">
        <type name="GLib.StaticRecMutex" c:type="GStaticRecMutex"/>
      </field>
      <field name="thread_running">
        <type name="boolean" c:type="gboolean"/>
      </field>
      <field name="thread">
        <type name="GLib.Thread" c:type="GThread*"/>
      </field>
      <field name="clock_rate">
        <type name="uint" c:type="guint"/>
      </field>
      <field name="queue_delay">
        <type name="uint" c:type="guint"/>
      </field>
      <field name="queue">
        <type name="GLib.Queue" c:type="GQueue*"/>
      </field>
      <field name="segment">
        <type name="Gst.Segment" c:type="GstSegment"/>
      </field>
      <field name="need_newsegment">
        <type name="boolean" c:type="gboolean"/>
      </field>
      <field name="priv">
        <type name="BaseRTPDepayloadPrivate"
              c:type="GstBaseRTPDepayloadPrivate*"/>
      </field>
      <field name="_gst_reserved">
        <array zero-terminated="0" c:type="gpointer" fixed-size="3">
          <type name="any"/>
        </array>
      </field>
    </class>
    <record name="BaseRTPDepayloadClass"
            c:type="GstBaseRTPDepayloadClass"
            glib:is-gtype-struct-for="BaseRTPDepayload">
      <field name="parent_class">
        <type name="Gst.ElementClass" c:type="GstElementClass"/>
      </field>
      <field name="set_caps">
        <callback name="set_caps" c:type="set_caps">
          <return-value transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="filter" transfer-ownership="none">
              <type name="BaseRTPDepayload" c:type="GstBaseRTPDepayload*"/>
            </parameter>
            <parameter name="caps" transfer-ownership="none">
              <type name="Gst.Caps" c:type="GstCaps*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="add_to_queue">
        <callback name="add_to_queue" c:type="add_to_queue">
          <return-value transfer-ownership="full">
            <type name="Gst.FlowReturn" c:type="GstFlowReturn"/>
          </return-value>
          <parameters>
            <parameter name="filter" transfer-ownership="none">
              <type name="BaseRTPDepayload" c:type="GstBaseRTPDepayload*"/>
            </parameter>
            <parameter name="in" transfer-ownership="none">
              <type name="Gst.Buffer" c:type="GstBuffer*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="process">
        <callback name="process" c:type="process">
          <return-value transfer-ownership="full">
            <type name="Gst.Buffer" c:type="GstBuffer*"/>
          </return-value>
          <parameters>
            <parameter name="base" transfer-ownership="none">
              <type name="BaseRTPDepayload" c:type="GstBaseRTPDepayload*"/>
            </parameter>
            <parameter name="in" transfer-ownership="none">
              <type name="Gst.Buffer" c:type="GstBuffer*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_gst_timestamp">
        <callback name="set_gst_timestamp" c:type="set_gst_timestamp">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="filter" transfer-ownership="none">
              <type name="BaseRTPDepayload" c:type="GstBaseRTPDepayload*"/>
            </parameter>
            <parameter name="timestamp" transfer-ownership="none">
              <type name="uint32" c:type="guint32"/>
            </parameter>
            <parameter name="buf" transfer-ownership="none">
              <type name="Gst.Buffer" c:type="GstBuffer*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="packet_lost">
        <callback name="packet_lost" c:type="packet_lost">
          <return-value transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="filter" transfer-ownership="none">
              <type name="BaseRTPDepayload" c:type="GstBaseRTPDepayload*"/>
            </parameter>
            <parameter name="event" transfer-ownership="none">
              <type name="Gst.Event" c:type="GstEvent*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_gst_reserved">
        <array zero-terminated="0" c:type="gpointer" fixed-size="3">
          <type name="any"/>
        </array>
      </field>
    </record>
    <record name="BaseRTPDepayloadPrivate" c:type="GstBaseRTPDepayloadPrivate">
    </record>
    <class name="BaseRTPPayload"
           c:type="GstBaseRTPPayload"
           parent="Gst.Element"
           abstract="1"
           glib:type-name="GstBaseRTPPayload"
           glib:get-type="gst_basertppayload_get_type"
           glib:type-struct="BaseRTPPayloadClass">
      <virtual-method name="set_caps">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="caps" transfer-ownership="none">
            <type name="Gst.Caps" c:type="GstCaps*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_buffer">
        <return-value transfer-ownership="full">
          <type name="Gst.FlowReturn" c:type="GstFlowReturn"/>
        </return-value>
        <parameters>
          <parameter name="buffer" transfer-ownership="none">
            <type name="Gst.Buffer" c:type="GstBuffer*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_caps">
        <return-value transfer-ownership="full">
          <type name="Gst.Caps" c:type="GstCaps*"/>
        </return-value>
        <parameters>
          <parameter name="pad" transfer-ownership="none">
            <type name="Gst.Pad" c:type="GstPad*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="set_options"
              c:identifier="gst_basertppayload_set_options"
              doc="Set the rtp options of the payloader. These options will be set in the caps
of the payloader. Subclasses must call this method before calling
gst_basertppayload_push() or gst_basertppayload_set_outcaps().">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="media" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="dynamic" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
          <parameter name="encoding_name" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="clock_rate" transfer-ownership="none">
            <type name="uint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_outcaps"
              c:identifier="gst_basertppayload_set_outcaps"
              doc="Configure the output caps with the optional parameters.
Variable arguments should be in the form field name, field type
(as a GType), value(s).  The last variable argument should be NULL.">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="fieldname" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter transfer-ownership="none">
            <varargs>
            </varargs>
          </parameter>
        </parameters>
      </method>
      <method name="is_filled"
              c:identifier="gst_basertppayload_is_filled"
              doc="Check if the packet with @size and @duration would exceed the configured
maximum size.
configured MTU or max_ptime.">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="size" transfer-ownership="none">
            <type name="uint" c:type="guint"/>
          </parameter>
          <parameter name="duration" transfer-ownership="none">
            <type name="Gst.ClockTime" c:type="GstClockTime"/>
          </parameter>
        </parameters>
      </method>
      <method name="push"
              c:identifier="gst_basertppayload_push"
              doc="Push @buffer to the peer element of the payloader. The SSRC, payload type,
seqnum and timestamp of the RTP buffer will be updated first.
This function takes ownership of @buffer.">
        <return-value transfer-ownership="full">
          <type name="Gst.FlowReturn" c:type="GstFlowReturn"/>
        </return-value>
        <parameters>
          <parameter name="buffer" transfer-ownership="none">
            <type name="Gst.Buffer" c:type="GstBuffer*"/>
          </parameter>
        </parameters>
      </method>
      <method name="push_list"
              c:identifier="gst_basertppayload_push_list"
              doc="Push @list to the peer element of the payloader. The SSRC, payload type,
seqnum and timestamp of the RTP buffer will be updated first.
This function takes ownership of @list."
              version="0.10.24">
        <return-value transfer-ownership="full">
          <type name="Gst.FlowReturn" c:type="GstFlowReturn"/>
        </return-value>
        <parameters>
          <parameter name="list" transfer-ownership="none">
            <type name="Gst.BufferList" c:type="GstBufferList*"/>
          </parameter>
        </parameters>
      </method>
      <property name="max-ptime" writable="1">
        <type name="int64" c:type="gint64"/>
      </property>
      <property name="min-ptime" writable="1">
        <type name="int64" c:type="gint64"/>
      </property>
      <property name="mtu" writable="1">
        <type name="uint" c:type="guint"/>
      </property>
      <property name="perfect-rtptime" writable="1">
        <type name="boolean" c:type="gboolean"/>
      </property>
      <property name="pt" writable="1">
        <type name="uint" c:type="guint"/>
      </property>
      <property name="ptime-multiple" writable="1">
        <type name="int64" c:type="gint64"/>
      </property>
      <property name="seqnum">
        <type name="uint" c:type="guint"/>
      </property>
      <property name="seqnum-offset" writable="1">
        <type name="int" c:type="gint"/>
      </property>
      <property name="ssrc" writable="1">
        <type name="uint" c:type="guint"/>
      </property>
      <property name="timestamp">
        <type name="uint" c:type="guint"/>
      </property>
      <property name="timestamp-offset" writable="1">
        <type name="uint" c:type="guint"/>
      </property>
      <field name="element">
        <type name="Gst.Element" c:type="GstElement"/>
      </field>
      <field name="sinkpad">
        <type name="Gst.Pad" c:type="GstPad*"/>
      </field>
      <field name="srcpad">
        <type name="Gst.Pad" c:type="GstPad*"/>
      </field>
      <field name="seq_rand">
        <type name="GLib.Rand" c:type="GRand*"/>
      </field>
      <field name="ssrc_rand">
        <type name="GLib.Rand" c:type="GRand*"/>
      </field>
      <field name="ts_rand">
        <type name="GLib.Rand" c:type="GRand*"/>
      </field>
      <field name="ts_base">
        <type name="uint32" c:type="guint32"/>
      </field>
      <field name="seqnum_base">
        <type name="uint16" c:type="guint16"/>
      </field>
      <field name="media">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="encoding_name">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="dynamic">
        <type name="boolean" c:type="gboolean"/>
      </field>
      <field name="clock_rate">
        <type name="uint32" c:type="guint32"/>
      </field>
      <field name="ts_offset">
        <type name="int32" c:type="gint32"/>
      </field>
      <field name="timestamp">
        <type name="uint32" c:type="guint32"/>
      </field>
      <field name="seqnum_offset">
        <type name="int16" c:type="gint16"/>
      </field>
      <field name="seqnum">
        <type name="uint16" c:type="guint16"/>
      </field>
      <field name="max_ptime">
        <type name="int64" c:type="gint64"/>
      </field>
      <field name="pt">
        <type name="uint" c:type="guint"/>
      </field>
      <field name="ssrc">
        <type name="uint" c:type="guint"/>
      </field>
      <field name="current_ssrc">
        <type name="uint" c:type="guint"/>
      </field>
      <field name="mtu">
        <type name="uint" c:type="guint"/>
      </field>
      <field name="segment">
        <type name="Gst.Segment" c:type="GstSegment"/>
      </field>
      <field name="min_ptime">
        <type name="uint64" c:type="guint64"/>
      </field>
      <field name="priv">
        <type name="BaseRTPPayloadPrivate" c:type="GstBaseRTPPayloadPrivate*"/>
      </field>
      <union name="abidata" c:type="abidata">
        <record name="ABI" c:type="ABI">
          <field name="ptime" writable="1">
            <type name="uint64" c:type="guint64"/>
          </field>
          <field name="ptime_multiple" writable="1">
            <type name="uint64" c:type="guint64"/>
          </field>
        </record>
        <field name="_gst_reserved" writable="1">
          <array zero-terminated="0" c:type="gpointer" fixed-size="3">
            <type name="any"/>
          </array>
        </field>
      </union>
    </class>
    <record name="BaseRTPPayloadClass"
            c:type="GstBaseRTPPayloadClass"
            glib:is-gtype-struct-for="BaseRTPPayload">
      <field name="parent_class">
        <type name="Gst.ElementClass" c:type="GstElementClass"/>
      </field>
      <field name="set_caps">
        <callback name="set_caps" c:type="set_caps">
          <return-value transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="payload" transfer-ownership="none">
              <type name="BaseRTPPayload" c:type="GstBaseRTPPayload*"/>
            </parameter>
            <parameter name="caps" transfer-ownership="none">
              <type name="Gst.Caps" c:type="GstCaps*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_buffer">
        <callback name="handle_buffer" c:type="handle_buffer">
          <return-value transfer-ownership="full">
            <type name="Gst.FlowReturn" c:type="GstFlowReturn"/>
          </return-value>
          <parameters>
            <parameter name="payload" transfer-ownership="none">
              <type name="BaseRTPPayload" c:type="GstBaseRTPPayload*"/>
            </parameter>
            <parameter name="buffer" transfer-ownership="none">
              <type name="Gst.Buffer" c:type="GstBuffer*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_event">
        <callback name="handle_event" c:type="handle_event">
          <return-value transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="pad" transfer-ownership="none">
              <type name="Gst.Pad" c:type="GstPad*"/>
            </parameter>
            <parameter name="event" transfer-ownership="none">
              <type name="Gst.Event" c:type="GstEvent*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_caps">
        <callback name="get_caps" c:type="get_caps">
          <return-value transfer-ownership="full">
            <type name="Gst.Caps" c:type="GstCaps*"/>
          </return-value>
          <parameters>
            <parameter name="payload" transfer-ownership="none">
              <type name="BaseRTPPayload" c:type="GstBaseRTPPayload*"/>
            </parameter>
            <parameter name="pad" transfer-ownership="none">
              <type name="Gst.Pad" c:type="GstPad*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_gst_reserved">
        <array zero-terminated="0" c:type="gpointer" fixed-size="2">
          <type name="any"/>
        </array>
      </field>
    </record>
    <record name="BaseRTPPayloadPrivate" c:type="GstBaseRTPPayloadPrivate">
    </record>
    <constant name="PAYLOAD_1016_STRING" value="1">
      <type name="utf8"/>
    </constant>
    <constant name="PAYLOAD_CELLB_STRING" value="25">
      <type name="utf8"/>
    </constant>
    <constant name="PAYLOAD_CN_STRING" value="13">
      <type name="utf8"/>
    </constant>
    <constant name="PAYLOAD_DVI4_11025_STRING" value="16">
      <type name="utf8"/>
    </constant>
    <constant name="PAYLOAD_DVI4_16000_STRING" value="6">
      <type name="utf8"/>
    </constant>
    <constant name="PAYLOAD_DVI4_22050_STRING" value="17">
      <type name="utf8"/>
    </constant>
    <constant name="PAYLOAD_DVI4_8000_STRING" value="5">
      <type name="utf8"/>
    </constant>
    <constant name="PAYLOAD_DYNAMIC_STRING" value="[96, 127]">
      <type name="utf8"/>
    </constant>
    <constant name="PAYLOAD_G721_STRING" value="2">
      <type name="utf8"/>
    </constant>
    <constant name="PAYLOAD_G722_STRING" value="9">
      <type name="utf8"/>
    </constant>
    <constant name="PAYLOAD_G723_53" value="17">
      <type name="int"/>
    </constant>
    <constant name="PAYLOAD_G723_53_STRING" value="17">
      <type name="utf8"/>
    </constant>
    <constant name="PAYLOAD_G723_63" value="16">
      <type name="int"/>
    </constant>
    <constant name="PAYLOAD_G723_63_STRING" value="16">
      <type name="utf8"/>
    </constant>
    <constant name="PAYLOAD_G723_STRING" value="4">
      <type name="utf8"/>
    </constant>
    <constant name="PAYLOAD_G728_STRING" value="15">
      <type name="utf8"/>
    </constant>
    <constant name="PAYLOAD_G729_STRING" value="18">
      <type name="utf8"/>
    </constant>
    <constant name="PAYLOAD_GSM_STRING" value="3">
      <type name="utf8"/>
    </constant>
    <constant name="PAYLOAD_H261_STRING" value="31">
      <type name="utf8"/>
    </constant>
    <constant name="PAYLOAD_H263_STRING" value="34">
      <type name="utf8"/>
    </constant>
    <constant name="PAYLOAD_JPEG_STRING" value="26">
      <type name="utf8"/>
    </constant>
    <constant name="PAYLOAD_L16_MONO_STRING" value="11">
      <type name="utf8"/>
    </constant>
    <constant name="PAYLOAD_L16_STEREO_STRING" value="10">
      <type name="utf8"/>
    </constant>
    <constant name="PAYLOAD_LPC_STRING" value="7">
      <type name="utf8"/>
    </constant>
    <constant name="PAYLOAD_MP2T_STRING" value="33">
      <type name="utf8"/>
    </constant>
    <constant name="PAYLOAD_MPA_STRING" value="14">
      <type name="utf8"/>
    </constant>
    <constant name="PAYLOAD_MPV_STRING" value="32">
      <type name="utf8"/>
    </constant>
    <constant name="PAYLOAD_NV_STRING" value="28">
      <type name="utf8"/>
    </constant>
    <constant name="PAYLOAD_PCMA_STRING" value="8">
      <type name="utf8"/>
    </constant>
    <constant name="PAYLOAD_PCMU_STRING" value="0">
      <type name="utf8"/>
    </constant>
    <constant name="PAYLOAD_QCELP_STRING" value="12">
      <type name="utf8"/>
    </constant>
    <constant name="PAYLOAD_TS41" value="19">
      <type name="int"/>
    </constant>
    <constant name="PAYLOAD_TS41_STRING" value="19">
      <type name="utf8"/>
    </constant>
    <constant name="PAYLOAD_TS48" value="18">
      <type name="int"/>
    </constant>
    <constant name="PAYLOAD_TS48_STRING" value="18">
      <type name="utf8"/>
    </constant>
    <enumeration name="RTCPFBType"
                 doc="Different types of feedback messages."
                 version="0.10.23"
                 c:type="GstRTCPFBType">
      <member name="fb_type_invalid"
              value="0"
              c:identifier="GST_RTCP_FB_TYPE_INVALID"/>
      <member name="rtpfb_type_nack"
              value="1"
              c:identifier="GST_RTCP_RTPFB_TYPE_NACK"/>
      <member name="psfb_type_pli"
              value="1"
              c:identifier="GST_RTCP_PSFB_TYPE_PLI"/>
      <member name="psfb_type_sli"
              value="2"
              c:identifier="GST_RTCP_PSFB_TYPE_SLI"/>
      <member name="psfb_type_rpsi"
              value="3"
              c:identifier="GST_RTCP_PSFB_TYPE_RPSI"/>
      <member name="psfb_type_afb"
              value="15"
              c:identifier="GST_RTCP_PSFB_TYPE_AFB"/>
    </enumeration>
    <record name="RTCPPacket"
            c:type="GstRTCPPacket"
            doc="Data structure that points to a packet at @offset in @buffer.
The size of the structure is made public to allow stack allocations.">
      <field name="buffer" writable="1">
        <type name="Gst.Buffer" c:type="GstBuffer*"/>
      </field>
      <field name="offset" writable="1">
        <type name="uint" c:type="guint"/>
      </field>
      <field name="padding" writable="1">
        <type name="boolean" c:type="gboolean"/>
      </field>
      <field name="count" writable="1">
        <type name="uint8" c:type="guint8"/>
      </field>
      <field name="type" writable="1">
        <type name="RTCPType" c:type="GstRTCPType"/>
      </field>
      <field name="length" writable="1">
        <type name="uint16" c:type="guint16"/>
      </field>
      <field name="item_offset" writable="1">
        <type name="uint" c:type="guint"/>
      </field>
      <field name="item_count" writable="1">
        <type name="uint" c:type="guint"/>
      </field>
      <field name="entry_offset" writable="1">
        <type name="uint" c:type="guint"/>
      </field>
      <method name="move_to_next"
              c:identifier="gst_rtcp_packet_move_to_next"
              doc="Move the packet pointer @packet to the next packet in the payload.
Use gst_rtcp_buffer_get_first_packet() to initialize @packet.
function.">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="remove"
              c:identifier="gst_rtcp_packet_remove"
              doc="Removes the packet pointed to by @packet and moves pointer to the next one
function.">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_padding"
              c:identifier="gst_rtcp_packet_get_padding"
              doc="Get the packet padding of the packet pointed to by @packet.">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_count"
              c:identifier="gst_rtcp_packet_get_count"
              doc="Get the count field in @packet.
valid packet.">
        <return-value transfer-ownership="none">
          <type name="uint8" c:type="guint8"/>
        </return-value>
      </method>
      <method name="get_length"
              c:identifier="gst_rtcp_packet_get_length"
              doc="Get the length field of @packet. This is the length of the packet in
32-bit words minus one.">
        <return-value transfer-ownership="none">
          <type name="uint16" c:type="guint16"/>
        </return-value>
      </method>
      <method name="sr_get_sender_info"
              c:identifier="gst_rtcp_packet_sr_get_sender_info"
              doc="Parse the SR sender info and store the values.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="ssrc" direction="out" transfer-ownership="full">
            <type name="uint32" c:type="guint32*"/>
          </parameter>
          <parameter name="ntptime" direction="out" transfer-ownership="full">
            <type name="uint64" c:type="guint64*"/>
          </parameter>
          <parameter name="rtptime" direction="out" transfer-ownership="full">
            <type name="uint32" c:type="guint32*"/>
          </parameter>
          <parameter name="packet_count"
                     direction="out"
                     transfer-ownership="full">
            <type name="uint32" c:type="guint32*"/>
          </parameter>
          <parameter name="octet_count"
                     direction="out"
                     transfer-ownership="full">
            <type name="uint32" c:type="guint32*"/>
          </parameter>
        </parameters>
      </method>
      <method name="sr_set_sender_info"
              c:identifier="gst_rtcp_packet_sr_set_sender_info"
              doc="Set the given values in the SR packet @packet.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="ssrc" transfer-ownership="none">
            <type name="uint32" c:type="guint32"/>
          </parameter>
          <parameter name="ntptime" transfer-ownership="none">
            <type name="uint64" c:type="guint64"/>
          </parameter>
          <parameter name="rtptime" transfer-ownership="none">
            <type name="uint32" c:type="guint32"/>
          </parameter>
          <parameter name="packet_count" transfer-ownership="none">
            <type name="uint32" c:type="guint32"/>
          </parameter>
          <parameter name="octet_count" transfer-ownership="none">
            <type name="uint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="rr_get_ssrc"
              c:identifier="gst_rtcp_packet_rr_get_ssrc"
              doc="Get the ssrc field of the RR @packet.">
        <return-value transfer-ownership="none">
          <type name="uint32" c:type="guint32"/>
        </return-value>
      </method>
      <method name="rr_set_ssrc"
              c:identifier="gst_rtcp_packet_rr_set_ssrc"
              doc="Set the ssrc field of the RR @packet.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="ssrc" transfer-ownership="none">
            <type name="uint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_rb_count"
              c:identifier="gst_rtcp_packet_get_rb_count"
              doc="Get the number of report blocks in @packet.">
        <return-value transfer-ownership="none">
          <type name="uint" c:type="guint"/>
        </return-value>
      </method>
      <method name="get_rb"
              c:identifier="gst_rtcp_packet_get_rb"
              doc="Parse the values of the @nth report block in @packet and store the result in
the values.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="nth" transfer-ownership="none">
            <type name="uint" c:type="guint"/>
          </parameter>
          <parameter name="ssrc" direction="out" transfer-ownership="full">
            <type name="uint32" c:type="guint32*"/>
          </parameter>
          <parameter name="fractionlost" transfer-ownership="none">
            <array c:type="guint8*">
              <type name="uint8"/>
            </array>
          </parameter>
          <parameter name="packetslost"
                     direction="out"
                     transfer-ownership="full">
            <type name="int32" c:type="gint32*"/>
          </parameter>
          <parameter name="exthighestseq"
                     direction="out"
                     transfer-ownership="full">
            <type name="uint32" c:type="guint32*"/>
          </parameter>
          <parameter name="jitter" direction="out" transfer-ownership="full">
            <type name="uint32" c:type="guint32*"/>
          </parameter>
          <parameter name="lsr" direction="out" transfer-ownership="full">
            <type name="uint32" c:type="guint32*"/>
          </parameter>
          <parameter name="dlsr" direction="out" transfer-ownership="full">
            <type name="uint32" c:type="guint32*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_rb"
              c:identifier="gst_rtcp_packet_add_rb"
              doc="Add a new report block to @packet with the given values.
the max MTU is exceeded or the number of report blocks is greater than
#GST_RTCP_MAX_RB_COUNT.">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="ssrc" transfer-ownership="none">
            <type name="uint32" c:type="guint32"/>
          </parameter>
          <parameter name="fractionlost" transfer-ownership="none">
            <type name="uint8" c:type="guint8"/>
          </parameter>
          <parameter name="packetslost" transfer-ownership="none">
            <type name="int32" c:type="gint32"/>
          </parameter>
          <parameter name="exthighestseq" transfer-ownership="none">
            <type name="uint32" c:type="guint32"/>
          </parameter>
          <parameter name="jitter" transfer-ownership="none">
            <type name="uint32" c:type="guint32"/>
          </parameter>
          <parameter name="lsr" transfer-ownership="none">
            <type name="uint32" c:type="guint32"/>
          </parameter>
          <parameter name="dlsr" transfer-ownership="none">
            <type name="uint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_rb"
              c:identifier="gst_rtcp_packet_set_rb"
              doc="Set the @nth new report block in @packet with the given values.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="nth" transfer-ownership="none">
            <type name="uint" c:type="guint"/>
          </parameter>
          <parameter name="ssrc" transfer-ownership="none">
            <type name="uint32" c:type="guint32"/>
          </parameter>
          <parameter name="fractionlost" transfer-ownership="none">
            <type name="uint8" c:type="guint8"/>
          </parameter>
          <parameter name="packetslost" transfer-ownership="none">
            <type name="int32" c:type="gint32"/>
          </parameter>
          <parameter name="exthighestseq" transfer-ownership="none">
            <type name="uint32" c:type="guint32"/>
          </parameter>
          <parameter name="jitter" transfer-ownership="none">
            <type name="uint32" c:type="guint32"/>
          </parameter>
          <parameter name="lsr" transfer-ownership="none">
            <type name="uint32" c:type="guint32"/>
          </parameter>
          <parameter name="dlsr" transfer-ownership="none">
            <type name="uint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="sdes_get_item_count"
              c:identifier="gst_rtcp_packet_sdes_get_item_count"
              doc="Get the number of items in the SDES packet @packet.">
        <return-value transfer-ownership="none">
          <type name="uint" c:type="guint"/>
        </return-value>
      </method>
      <method name="sdes_first_item"
              c:identifier="gst_rtcp_packet_sdes_first_item"
              doc="Move to the first SDES item in @packet.">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="sdes_next_item"
              c:identifier="gst_rtcp_packet_sdes_next_item"
              doc="Move to the next SDES item in @packet.">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="sdes_get_ssrc"
              c:identifier="gst_rtcp_packet_sdes_get_ssrc"
              doc="Get the SSRC of the current SDES item.">
        <return-value transfer-ownership="none">
          <type name="uint32" c:type="guint32"/>
        </return-value>
      </method>
      <method name="sdes_first_entry"
              c:identifier="gst_rtcp_packet_sdes_first_entry"
              doc="Move to the first SDES entry in the current item.">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="sdes_next_entry"
              c:identifier="gst_rtcp_packet_sdes_next_entry"
              doc="Move to the next SDES entry in the current item.">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="sdes_get_entry"
              c:identifier="gst_rtcp_packet_sdes_get_entry"
              doc="Get the data of the current SDES item entry. @type (when not NULL) will
contain the type of the entry. @data (when not NULL) will point to @len
bytes.
When @type refers to a text item, @data will point to a UTF8 string. Note
that this UTF8 string is NOT null-terminated. Use
gst_rtcp_packet_sdes_copy_entry() to get a null-termined copy of the entry.">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="type" transfer-ownership="none">
            <type name="RTCPSDESType" c:type="GstRTCPSDESType*"/>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <array c:type="guint8*">
              <type name="uint8"/>
            </array>
          </parameter>
          <parameter name="data" direction="out" transfer-ownership="full">
            <type name="uint8" c:type="guint8**"/>
          </parameter>
        </parameters>
      </method>
      <method name="sdes_copy_entry"
              c:identifier="gst_rtcp_packet_sdes_copy_entry"
              doc="This function is like gst_rtcp_packet_sdes_get_entry() but it returns a
null-terminated copy of the data instead. use g_free() after usage.">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="type" transfer-ownership="none">
            <type name="RTCPSDESType" c:type="GstRTCPSDESType*"/>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <array c:type="guint8*">
              <type name="uint8"/>
            </array>
          </parameter>
          <parameter name="data" direction="out" transfer-ownership="full">
            <type name="uint8" c:type="guint8**"/>
          </parameter>
        </parameters>
      </method>
      <method name="sdes_add_item"
              c:identifier="gst_rtcp_packet_sdes_add_item"
              doc="Add a new SDES item for @ssrc to @packet.
items has been exceeded for the SDES packet or the MTU has been reached.">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="ssrc" transfer-ownership="none">
            <type name="uint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="sdes_add_entry"
              c:identifier="gst_rtcp_packet_sdes_add_entry"
              doc="Add a new SDES entry to the current item in @packet.
reached.">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="type" transfer-ownership="none">
            <type name="RTCPSDESType" c:type="GstRTCPSDESType"/>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <type name="uint8" c:type="guint8"/>
          </parameter>
          <parameter name="data" transfer-ownership="none">
            <array c:type="guint8*">
              <type name="uint8"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="bye_get_ssrc_count"
              c:identifier="gst_rtcp_packet_bye_get_ssrc_count"
              doc="Get the number of SSRC fields in @packet.">
        <return-value transfer-ownership="none">
          <type name="uint" c:type="guint"/>
        </return-value>
      </method>
      <method name="bye_get_nth_ssrc"
              c:identifier="gst_rtcp_packet_bye_get_nth_ssrc"
              doc="Get the @nth SSRC of the BYE @packet.">
        <return-value transfer-ownership="none">
          <type name="uint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <parameter name="nth" transfer-ownership="none">
            <type name="uint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="bye_add_ssrc"
              c:identifier="gst_rtcp_packet_bye_add_ssrc"
              doc="Add @ssrc to the BYE @packet.
the max MTU is exceeded or the number of sources blocks is greater than
#GST_RTCP_MAX_BYE_SSRC_COUNT.">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="ssrc" transfer-ownership="none">
            <type name="uint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="bye_add_ssrcs"
              c:identifier="gst_rtcp_packet_bye_add_ssrcs"
              doc="Adds @len SSRCs in @ssrc to BYE @packet.
the max MTU is exceeded or the number of sources blocks is greater than
#GST_RTCP_MAX_BYE_SSRC_COUNT.">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="ssrc" direction="out" transfer-ownership="full">
            <type name="uint32" c:type="guint32*"/>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <type name="uint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="bye_get_reason_len"
              c:identifier="gst_rtcp_packet_bye_get_reason_len"
              doc="Get the length of the reason string.
present.">
        <return-value transfer-ownership="none">
          <type name="uint8" c:type="guint8"/>
        </return-value>
      </method>
      <method name="bye_get_reason"
              c:identifier="gst_rtcp_packet_bye_get_reason"
              doc="Get the reason in @packet.
a reason string. The string must be freed with g_free() after usage.">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="bye_set_reason"
              c:identifier="gst_rtcp_packet_bye_set_reason"
              doc="Set the reason string to @reason in @packet.">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="reason" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="fb_get_sender_ssrc"
              c:identifier="gst_rtcp_packet_fb_get_sender_ssrc"
              doc="Get the sender SSRC field of the RTPFB or PSFB @packet."
              version="0.10.23">
        <return-value transfer-ownership="none">
          <type name="uint32" c:type="guint32"/>
        </return-value>
      </method>
      <method name="fb_set_sender_ssrc"
              c:identifier="gst_rtcp_packet_fb_set_sender_ssrc"
              doc="Set the sender SSRC field of the RTPFB or PSFB @packet."
              version="0.10.23">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="ssrc" transfer-ownership="none">
            <type name="uint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="fb_get_media_ssrc"
              c:identifier="gst_rtcp_packet_fb_get_media_ssrc"
              doc="Get the media SSRC field of the RTPFB or PSFB @packet."
              version="0.10.23">
        <return-value transfer-ownership="none">
          <type name="uint32" c:type="guint32"/>
        </return-value>
      </method>
      <method name="fb_set_media_ssrc"
              c:identifier="gst_rtcp_packet_fb_set_media_ssrc"
              doc="Set the media SSRC field of the RTPFB or PSFB @packet."
              version="0.10.23">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="ssrc" transfer-ownership="none">
            <type name="uint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="fb_set_type"
              c:identifier="gst_rtcp_packet_fb_set_type"
              doc="Set the feedback message type of the FB @packet."
              version="0.10.23">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="type" transfer-ownership="none">
            <type name="RTCPFBType" c:type="GstRTCPFBType"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <enumeration name="RTCPSDESType" c:type="GstRTCPSDESType">
      <member name="invalid" value="-1" c:identifier="GST_RTCP_SDES_INVALID"/>
      <member name="end" value="0" c:identifier="GST_RTCP_SDES_END"/>
      <member name="cname" value="1" c:identifier="GST_RTCP_SDES_CNAME"/>
      <member name="name" value="2" c:identifier="GST_RTCP_SDES_NAME"/>
      <member name="email" value="3" c:identifier="GST_RTCP_SDES_EMAIL"/>
      <member name="phone" value="4" c:identifier="GST_RTCP_SDES_PHONE"/>
      <member name="loc" value="5" c:identifier="GST_RTCP_SDES_LOC"/>
      <member name="tool" value="6" c:identifier="GST_RTCP_SDES_TOOL"/>
      <member name="note" value="7" c:identifier="GST_RTCP_SDES_NOTE"/>
      <member name="priv" value="8" c:identifier="GST_RTCP_SDES_PRIV"/>
    </enumeration>
    <enumeration name="RTCPType" c:type="GstRTCPType">
      <member name="invalid" value="0" c:identifier="GST_RTCP_TYPE_INVALID"/>
      <member name="sr" value="200" c:identifier="GST_RTCP_TYPE_SR"/>
      <member name="rr" value="201" c:identifier="GST_RTCP_TYPE_RR"/>
      <member name="sdes" value="202" c:identifier="GST_RTCP_TYPE_SDES"/>
      <member name="bye" value="203" c:identifier="GST_RTCP_TYPE_BYE"/>
      <member name="app" value="204" c:identifier="GST_RTCP_TYPE_APP"/>
      <member name="rtpfb" value="205" c:identifier="GST_RTCP_TYPE_RTPFB"/>
      <member name="psfb" value="206" c:identifier="GST_RTCP_TYPE_PSFB"/>
    </enumeration>
    <constant name="RTCP_MAX_BYE_SSRC_COUNT" value="31">
      <type name="int"/>
    </constant>
    <constant name="RTCP_MAX_RB_COUNT" value="31">
      <type name="int"/>
    </constant>
    <constant name="RTCP_MAX_SDES" value="255">
      <type name="int"/>
    </constant>
    <constant name="RTCP_MAX_SDES_ITEM_COUNT" value="31">
      <type name="int"/>
    </constant>
    <constant name="RTCP_VALID_MASK" value="57598">
      <type name="int"/>
    </constant>
    <constant name="RTCP_VALID_VALUE" value="0">
      <type name="int"/>
    </constant>
    <constant name="RTCP_VERSION" value="2">
      <type name="int"/>
    </constant>
    <enumeration name="RTPPayload" c:type="GstRTPPayload">
      <member name="pcmu" value="0" c:identifier="GST_RTP_PAYLOAD_PCMU"/>
      <member name="1016" value="1" c:identifier="GST_RTP_PAYLOAD_1016"/>
      <member name="g721" value="2" c:identifier="GST_RTP_PAYLOAD_G721"/>
      <member name="gsm" value="3" c:identifier="GST_RTP_PAYLOAD_GSM"/>
      <member name="g723" value="4" c:identifier="GST_RTP_PAYLOAD_G723"/>
      <member name="dvi4_8000"
              value="5"
              c:identifier="GST_RTP_PAYLOAD_DVI4_8000"/>
      <member name="dvi4_16000"
              value="6"
              c:identifier="GST_RTP_PAYLOAD_DVI4_16000"/>
      <member name="lpc" value="7" c:identifier="GST_RTP_PAYLOAD_LPC"/>
      <member name="pcma" value="8" c:identifier="GST_RTP_PAYLOAD_PCMA"/>
      <member name="g722" value="9" c:identifier="GST_RTP_PAYLOAD_G722"/>
      <member name="l16_stereo"
              value="10"
              c:identifier="GST_RTP_PAYLOAD_L16_STEREO"/>
      <member name="l16_mono"
              value="11"
              c:identifier="GST_RTP_PAYLOAD_L16_MONO"/>
      <member name="qcelp" value="12" c:identifier="GST_RTP_PAYLOAD_QCELP"/>
      <member name="cn" value="13" c:identifier="GST_RTP_PAYLOAD_CN"/>
      <member name="mpa" value="14" c:identifier="GST_RTP_PAYLOAD_MPA"/>
      <member name="g728" value="15" c:identifier="GST_RTP_PAYLOAD_G728"/>
      <member name="dvi4_11025"
              value="16"
              c:identifier="GST_RTP_PAYLOAD_DVI4_11025"/>
      <member name="dvi4_22050"
              value="17"
              c:identifier="GST_RTP_PAYLOAD_DVI4_22050"/>
      <member name="g729" value="18" c:identifier="GST_RTP_PAYLOAD_G729"/>
      <member name="cellb" value="25" c:identifier="GST_RTP_PAYLOAD_CELLB"/>
      <member name="jpeg" value="26" c:identifier="GST_RTP_PAYLOAD_JPEG"/>
      <member name="nv" value="28" c:identifier="GST_RTP_PAYLOAD_NV"/>
      <member name="h261" value="31" c:identifier="GST_RTP_PAYLOAD_H261"/>
      <member name="mpv" value="32" c:identifier="GST_RTP_PAYLOAD_MPV"/>
      <member name="mp2t" value="33" c:identifier="GST_RTP_PAYLOAD_MP2T"/>
      <member name="h263" value="34" c:identifier="GST_RTP_PAYLOAD_H263"/>
    </enumeration>
    <record name="RTPPayloadInfo"
            c:type="GstRTPPayloadInfo"
            doc="&quot;message&quot;.
channels. NULL = not applicable.
Structure holding default payload type information.">
      <field name="payload_type" writable="1">
        <type name="uint8" c:type="guint8"/>
      </field>
      <field name="media" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="encoding_name" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="clock_rate" writable="1">
        <type name="uint" c:type="guint"/>
      </field>
      <field name="encoding_parameters" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="bitrate" writable="1">
        <type name="uint" c:type="guint"/>
      </field>
    </record>
    <constant name="VERSION" value="2">
      <type name="int"/>
    </constant>
    <function name="buffer_allocate_data"
              c:identifier="gst_rtp_buffer_allocate_data"
              doc="Allocate enough data in @buffer to hold an RTP packet with @csrc_count CSRCs,
a payload length of @payload_len and padding of @pad_len.
MALLOCDATA of @buffer will be overwritten and will not be freed.
All other RTP header fields will be set to 0/FALSE.">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <type name="Gst.Buffer" c:type="GstBuffer*"/>
        </parameter>
        <parameter name="payload_len" transfer-ownership="none">
          <type name="uint" c:type="guint"/>
        </parameter>
        <parameter name="pad_len" transfer-ownership="none">
          <type name="uint8" c:type="guint8"/>
        </parameter>
        <parameter name="csrc_count" transfer-ownership="none">
          <type name="uint8" c:type="guint8"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_calc_header_len"
              c:identifier="gst_rtp_buffer_calc_header_len"
              doc="Calculate the header length of an RTP packet with @csrc_count CSRC entries.
An RTP packet can have at most 15 CSRC entries.">
      <return-value transfer-ownership="none">
        <type name="uint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="csrc_count" transfer-ownership="none">
          <type name="uint8" c:type="guint8"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_calc_packet_len"
              c:identifier="gst_rtp_buffer_calc_packet_len"
              doc="Calculate the total length of an RTP packet with a payload size of @payload_len,
a padding of @pad_len and a @csrc_count CSRC entries.">
      <return-value transfer-ownership="none">
        <type name="uint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="payload_len" transfer-ownership="none">
          <type name="uint" c:type="guint"/>
        </parameter>
        <parameter name="pad_len" transfer-ownership="none">
          <type name="uint8" c:type="guint8"/>
        </parameter>
        <parameter name="csrc_count" transfer-ownership="none">
          <type name="uint8" c:type="guint8"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_calc_payload_len"
              c:identifier="gst_rtp_buffer_calc_payload_len"
              doc="Calculate the length of the payload of an RTP packet with size @packet_len,
a padding of @pad_len and a @csrc_count CSRC entries.">
      <return-value transfer-ownership="none">
        <type name="uint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="packet_len" transfer-ownership="none">
          <type name="uint" c:type="guint"/>
        </parameter>
        <parameter name="pad_len" transfer-ownership="none">
          <type name="uint8" c:type="guint8"/>
        </parameter>
        <parameter name="csrc_count" transfer-ownership="none">
          <type name="uint8" c:type="guint8"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_compare_seqnum"
              c:identifier="gst_rtp_buffer_compare_seqnum"
              doc="Compare two sequence numbers, taking care of wraparounds. This function
returns the difference between @seqnum1 and @seqnum2.
are equal or a positive value if @seqnum1 is smaller than @segnum2."
              version="0.10.15">
      <return-value transfer-ownership="none">
        <type name="int" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="seqnum1" transfer-ownership="none">
          <type name="uint16" c:type="guint16"/>
        </parameter>
        <parameter name="seqnum2" transfer-ownership="none">
          <type name="uint16" c:type="guint16"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_default_clock_rate"
              c:identifier="gst_rtp_buffer_default_clock_rate"
              doc="Get the default clock-rate for the static payload type @payload_type.
the clock-rate is undefined."
              version="0.10.13">
      <return-value transfer-ownership="none">
        <type name="uint32" c:type="guint32"/>
      </return-value>
      <parameters>
        <parameter name="payload_type" transfer-ownership="none">
          <type name="uint8" c:type="guint8"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_ext_timestamp"
              c:identifier="gst_rtp_buffer_ext_timestamp"
              doc="Update the @exttimestamp field with @timestamp. For the first call of the
method, @exttimestamp should point to a location with a value of -1.
This function makes sure that the returned value is a constantly increasing
value even in the case where there is a timestamp wraparound."
              version="0.10.15">
      <return-value transfer-ownership="none">
        <type name="uint64" c:type="guint64"/>
      </return-value>
      <parameters>
        <parameter name="exttimestamp"
                   direction="out"
                   transfer-ownership="full">
          <type name="uint64" c:type="guint64*"/>
        </parameter>
        <parameter name="timestamp" transfer-ownership="none">
          <type name="uint32" c:type="guint32"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_get_csrc"
              c:identifier="gst_rtp_buffer_get_csrc"
              doc="Get the CSRC at index @idx in @buffer.">
      <return-value transfer-ownership="none">
        <type name="uint32" c:type="guint32"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <type name="Gst.Buffer" c:type="GstBuffer*"/>
        </parameter>
        <parameter name="idx" transfer-ownership="none">
          <type name="uint8" c:type="guint8"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_get_csrc_count"
              c:identifier="gst_rtp_buffer_get_csrc_count"
              doc="Get the CSRC count of the RTP packet in @buffer.">
      <return-value transfer-ownership="none">
        <type name="uint8" c:type="guint8"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <type name="Gst.Buffer" c:type="GstBuffer*"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_get_extension"
              c:identifier="gst_rtp_buffer_get_extension"
              doc="Check if the extension bit is set on the RTP packet in @buffer.">
      <return-value transfer-ownership="none">
        <type name="boolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <type name="Gst.Buffer" c:type="GstBuffer*"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_get_extension_data"
              c:identifier="gst_rtp_buffer_get_extension_data"
              doc="Get the extension data. @bits will contain the extension 16 bits of custom
data. @data will point to the data in the extension and @wordlen will contain
the length of @data in 32 bits words.
If @buffer did not contain an extension, this function will return %FALSE
with @bits, @data and @wordlen unchanged."
              version="0.10.15">
      <return-value transfer-ownership="none">
        <type name="boolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <type name="Gst.Buffer" c:type="GstBuffer*"/>
        </parameter>
        <parameter name="bits" direction="out" transfer-ownership="full">
          <type name="uint16" c:type="guint16*"/>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <type name="any" c:type="gpointer*"/>
        </parameter>
        <parameter name="wordlen" direction="out" transfer-ownership="full">
          <type name="uint" c:type="guint*"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_get_header_len"
              c:identifier="gst_rtp_buffer_get_header_len"
              doc="Return the total length of the header in @buffer. This include the length of
the fixed header, the CSRC list and the extension header.">
      <return-value transfer-ownership="none">
        <type name="uint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <type name="Gst.Buffer" c:type="GstBuffer*"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_get_marker"
              c:identifier="gst_rtp_buffer_get_marker"
              doc="Check if the marker bit is set on the RTP packet in @buffer.">
      <return-value transfer-ownership="none">
        <type name="boolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <type name="Gst.Buffer" c:type="GstBuffer*"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_get_packet_len"
              c:identifier="gst_rtp_buffer_get_packet_len"
              doc="Return the total length of the packet in @buffer.">
      <return-value transfer-ownership="none">
        <type name="uint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <type name="Gst.Buffer" c:type="GstBuffer*"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_get_padding"
              c:identifier="gst_rtp_buffer_get_padding"
              doc="Check if the padding bit is set on the RTP packet in @buffer.">
      <return-value transfer-ownership="none">
        <type name="boolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <type name="Gst.Buffer" c:type="GstBuffer*"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_get_payload"
              c:identifier="gst_rtp_buffer_get_payload"
              doc="Get a pointer to the payload data in @buffer. This pointer is valid as long
as a reference to @buffer is held.">
      <return-value transfer-ownership="none">
        <type name="any" c:type="gpointer"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <type name="Gst.Buffer" c:type="GstBuffer*"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_get_payload_buffer"
              c:identifier="gst_rtp_buffer_get_payload_buffer"
              doc="Create a buffer of the payload of the RTP packet in @buffer. This function
will internally create a subbuffer of @buffer so that a memcpy can be
avoided.">
      <return-value transfer-ownership="full">
        <type name="Gst.Buffer" c:type="GstBuffer*"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <type name="Gst.Buffer" c:type="GstBuffer*"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_get_payload_len"
              c:identifier="gst_rtp_buffer_get_payload_len"
              doc="Get the length of the payload of the RTP packet in @buffer.">
      <return-value transfer-ownership="none">
        <type name="uint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <type name="Gst.Buffer" c:type="GstBuffer*"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_get_payload_subbuffer"
              c:identifier="gst_rtp_buffer_get_payload_subbuffer"
              doc="Create a subbuffer of the payload of the RTP packet in @buffer. @offset bytes
are skipped in the payload and the subbuffer will be of size @len.
If @len is -1 the total payload starting from @offset if subbuffered."
              version="0.10.10">
      <return-value transfer-ownership="full">
        <type name="Gst.Buffer" c:type="GstBuffer*"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <type name="Gst.Buffer" c:type="GstBuffer*"/>
        </parameter>
        <parameter name="offset" transfer-ownership="none">
          <type name="uint" c:type="guint"/>
        </parameter>
        <parameter name="len" transfer-ownership="none">
          <type name="uint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_get_payload_type"
              c:identifier="gst_rtp_buffer_get_payload_type"
              doc="Get the payload type of the RTP packet in @buffer.">
      <return-value transfer-ownership="none">
        <type name="uint8" c:type="guint8"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <type name="Gst.Buffer" c:type="GstBuffer*"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_get_seq"
              c:identifier="gst_rtp_buffer_get_seq"
              doc="Get the sequence number of the RTP packet in @buffer.">
      <return-value transfer-ownership="none">
        <type name="uint16" c:type="guint16"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <type name="Gst.Buffer" c:type="GstBuffer*"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_get_ssrc"
              c:identifier="gst_rtp_buffer_get_ssrc"
              doc="Get the SSRC of the RTP packet in @buffer.">
      <return-value transfer-ownership="none">
        <type name="uint32" c:type="guint32"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <type name="Gst.Buffer" c:type="GstBuffer*"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_get_timestamp"
              c:identifier="gst_rtp_buffer_get_timestamp"
              doc="Get the timestamp of the RTP packet in @buffer.">
      <return-value transfer-ownership="none">
        <type name="uint32" c:type="guint32"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <type name="Gst.Buffer" c:type="GstBuffer*"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_get_version"
              c:identifier="gst_rtp_buffer_get_version"
              doc="Get the version number of the RTP packet in @buffer.">
      <return-value transfer-ownership="none">
        <type name="uint8" c:type="guint8"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <type name="Gst.Buffer" c:type="GstBuffer*"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_list_get_payload_len"
              c:identifier="gst_rtp_buffer_list_get_payload_len"
              doc="Get the length of the payload of the RTP packet in @list."
              version="0.10.24">
      <return-value transfer-ownership="none">
        <type name="uint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="list" transfer-ownership="none">
          <type name="Gst.BufferList" c:type="GstBufferList*"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_list_get_payload_type"
              c:identifier="gst_rtp_buffer_list_get_payload_type"
              doc="Get the payload type of the first RTP packet in @list.
All packets in @list should have the same payload type."
              version="0.10.24">
      <return-value transfer-ownership="none">
        <type name="uint8" c:type="guint8"/>
      </return-value>
      <parameters>
        <parameter name="list" transfer-ownership="none">
          <type name="Gst.BufferList" c:type="GstBufferList*"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_list_get_seq"
              c:identifier="gst_rtp_buffer_list_get_seq"
              doc="Get the sequence number of the first RTP packet in @list.
All packets within @list have the same sequence number."
              version="0.10.24">
      <return-value transfer-ownership="none">
        <type name="uint16" c:type="guint16"/>
      </return-value>
      <parameters>
        <parameter name="list" transfer-ownership="none">
          <type name="Gst.BufferList" c:type="GstBufferList*"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_list_get_ssrc"
              c:identifier="gst_rtp_buffer_list_get_ssrc"
              doc="Get the SSRC of the first RTP packet in @list.
All RTP packets within @list have the same SSRC."
              version="0.10.24">
      <return-value transfer-ownership="none">
        <type name="uint32" c:type="guint32"/>
      </return-value>
      <parameters>
        <parameter name="list" transfer-ownership="none">
          <type name="Gst.BufferList" c:type="GstBufferList*"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_list_get_timestamp"
              c:identifier="gst_rtp_buffer_list_get_timestamp"
              doc="Get the timestamp of the first RTP packet in @list.
All packets within @list have the same timestamp."
              version="0.10.24">
      <return-value transfer-ownership="none">
        <type name="uint32" c:type="guint32"/>
      </return-value>
      <parameters>
        <parameter name="list" transfer-ownership="none">
          <type name="Gst.BufferList" c:type="GstBufferList*"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_list_set_payload_type"
              c:identifier="gst_rtp_buffer_list_set_payload_type"
              doc="Set the payload type of each RTP packet in @list to @payload_type."
              version="0.10.24">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="list" transfer-ownership="none">
          <type name="Gst.BufferList" c:type="GstBufferList*"/>
        </parameter>
        <parameter name="payload_type" transfer-ownership="none">
          <type name="uint8" c:type="guint8"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_list_set_seq"
              c:identifier="gst_rtp_buffer_list_set_seq"
              doc="Set the sequence number of each RTP packet in @list to @seq."
              version="0.10.24">
      <return-value transfer-ownership="none">
        <type name="uint16" c:type="guint16"/>
      </return-value>
      <parameters>
        <parameter name="list" transfer-ownership="none">
          <type name="Gst.BufferList" c:type="GstBufferList*"/>
        </parameter>
        <parameter name="seq" transfer-ownership="none">
          <type name="uint16" c:type="guint16"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_list_set_ssrc"
              c:identifier="gst_rtp_buffer_list_set_ssrc"
              doc="Set the SSRC on each RTP packet in @list to @ssrc."
              version="0.10.24">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="list" transfer-ownership="none">
          <type name="Gst.BufferList" c:type="GstBufferList*"/>
        </parameter>
        <parameter name="ssrc" transfer-ownership="none">
          <type name="uint32" c:type="guint32"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_list_set_timestamp"
              c:identifier="gst_rtp_buffer_list_set_timestamp"
              doc="Set the timestamp of each RTP packet in @list to @timestamp."
              version="0.10.24">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="list" transfer-ownership="none">
          <type name="Gst.BufferList" c:type="GstBufferList*"/>
        </parameter>
        <parameter name="timestamp" transfer-ownership="none">
          <type name="uint32" c:type="guint32"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_list_validate"
              c:identifier="gst_rtp_buffer_list_validate"
              doc="Check if all RTP packets in the @list are valid using validate_data().
Use this function to validate an list before using the other functions in
this module."
              version="0.10.24">
      <return-value transfer-ownership="none">
        <type name="boolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="list" transfer-ownership="none">
          <type name="Gst.BufferList" c:type="GstBufferList*"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_new_allocate"
              c:identifier="gst_rtp_buffer_new_allocate"
              doc="Allocate a new #GstBuffer with enough data to hold an RTP packet with
All other RTP header fields will be set to 0/FALSE.
parameters.">
      <return-value transfer-ownership="full">
        <type name="Gst.Buffer" c:type="GstBuffer*"/>
      </return-value>
      <parameters>
        <parameter name="payload_len" transfer-ownership="none">
          <type name="uint" c:type="guint"/>
        </parameter>
        <parameter name="pad_len" transfer-ownership="none">
          <type name="uint8" c:type="guint8"/>
        </parameter>
        <parameter name="csrc_count" transfer-ownership="none">
          <type name="uint8" c:type="guint8"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_new_allocate_len"
              c:identifier="gst_rtp_buffer_new_allocate_len"
              doc="Create a new #GstBuffer that can hold an RTP packet that is exactly
All RTP header fields will be set to 0/FALSE.">
      <return-value transfer-ownership="full">
        <type name="Gst.Buffer" c:type="GstBuffer*"/>
      </return-value>
      <parameters>
        <parameter name="packet_len" transfer-ownership="none">
          <type name="uint" c:type="guint"/>
        </parameter>
        <parameter name="pad_len" transfer-ownership="none">
          <type name="uint8" c:type="guint8"/>
        </parameter>
        <parameter name="csrc_count" transfer-ownership="none">
          <type name="uint8" c:type="guint8"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_new_copy_data"
              c:identifier="gst_rtp_buffer_new_copy_data"
              doc="Create a new buffer and set the data to a copy of @len
bytes of @data and the size to @len. The data will be freed when the buffer
is freed.">
      <return-value transfer-ownership="full">
        <type name="Gst.Buffer" c:type="GstBuffer*"/>
      </return-value>
      <parameters>
        <parameter name="data" transfer-ownership="none">
          <type name="any" c:type="gpointer"/>
        </parameter>
        <parameter name="len" transfer-ownership="none">
          <type name="uint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_new_take_data"
              c:identifier="gst_rtp_buffer_new_take_data"
              doc="Create a new buffer and set the data and size of the buffer to @data and @len
respectively. @data will be freed when the buffer is unreffed, so this
function transfers ownership of @data to the new buffer.">
      <return-value transfer-ownership="full">
        <type name="Gst.Buffer" c:type="GstBuffer*"/>
      </return-value>
      <parameters>
        <parameter name="data" transfer-ownership="none">
          <type name="any" c:type="gpointer"/>
        </parameter>
        <parameter name="len" transfer-ownership="none">
          <type name="uint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_pad_to"
              c:identifier="gst_rtp_buffer_pad_to"
              doc="Set the amount of padding in the RTP packet in @buffer to">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <type name="Gst.Buffer" c:type="GstBuffer*"/>
        </parameter>
        <parameter name="len" transfer-ownership="none">
          <type name="uint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_set_csrc"
              c:identifier="gst_rtp_buffer_set_csrc"
              doc="Modify the CSRC at index @idx in @buffer to @csrc.">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <type name="Gst.Buffer" c:type="GstBuffer*"/>
        </parameter>
        <parameter name="idx" transfer-ownership="none">
          <type name="uint8" c:type="guint8"/>
        </parameter>
        <parameter name="csrc" transfer-ownership="none">
          <type name="uint32" c:type="guint32"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_set_extension"
              c:identifier="gst_rtp_buffer_set_extension"
              doc="Set the extension bit on the RTP packet in @buffer to @extension.">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <type name="Gst.Buffer" c:type="GstBuffer*"/>
        </parameter>
        <parameter name="extension" transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_set_extension_data"
              c:identifier="gst_rtp_buffer_set_extension_data"
              doc="the extension, excluding the extension header ( therefore zero is a valid length)
Set the extension bit of the rtp buffer and fill in the @bits and @length of the
extension header. It will refuse to set the extension data if the buffer is not
large enough.">
      <return-value transfer-ownership="none">
        <type name="boolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <type name="Gst.Buffer" c:type="GstBuffer*"/>
        </parameter>
        <parameter name="bits" transfer-ownership="none">
          <type name="uint16" c:type="guint16"/>
        </parameter>
        <parameter name="length" transfer-ownership="none">
          <type name="uint16" c:type="guint16"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_set_marker"
              c:identifier="gst_rtp_buffer_set_marker"
              doc="Set the marker bit on the RTP packet in @buffer to @marker.">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <type name="Gst.Buffer" c:type="GstBuffer*"/>
        </parameter>
        <parameter name="marker" transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_set_packet_len"
              c:identifier="gst_rtp_buffer_set_packet_len"
              doc="Set the total @buffer size to @len. The data in the buffer will be made
larger if needed. Any padding will be removed from the packet.">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <type name="Gst.Buffer" c:type="GstBuffer*"/>
        </parameter>
        <parameter name="len" transfer-ownership="none">
          <type name="uint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_set_padding"
              c:identifier="gst_rtp_buffer_set_padding"
              doc="Set the padding bit on the RTP packet in @buffer to @padding.">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <type name="Gst.Buffer" c:type="GstBuffer*"/>
        </parameter>
        <parameter name="padding" transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_set_payload_type"
              c:identifier="gst_rtp_buffer_set_payload_type"
              doc="Set the payload type of the RTP packet in @buffer to @payload_type.">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <type name="Gst.Buffer" c:type="GstBuffer*"/>
        </parameter>
        <parameter name="payload_type" transfer-ownership="none">
          <type name="uint8" c:type="guint8"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_set_seq"
              c:identifier="gst_rtp_buffer_set_seq"
              doc="Set the sequence number of the RTP packet in @buffer to @seq.">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <type name="Gst.Buffer" c:type="GstBuffer*"/>
        </parameter>
        <parameter name="seq" transfer-ownership="none">
          <type name="uint16" c:type="guint16"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_set_ssrc"
              c:identifier="gst_rtp_buffer_set_ssrc"
              doc="Set the SSRC on the RTP packet in @buffer to @ssrc.">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <type name="Gst.Buffer" c:type="GstBuffer*"/>
        </parameter>
        <parameter name="ssrc" transfer-ownership="none">
          <type name="uint32" c:type="guint32"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_set_timestamp"
              c:identifier="gst_rtp_buffer_set_timestamp"
              doc="Set the timestamp of the RTP packet in @buffer to @timestamp.">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <type name="Gst.Buffer" c:type="GstBuffer*"/>
        </parameter>
        <parameter name="timestamp" transfer-ownership="none">
          <type name="uint32" c:type="guint32"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_set_version"
              c:identifier="gst_rtp_buffer_set_version"
              doc="Set the version of the RTP packet in @buffer to @version.">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <type name="Gst.Buffer" c:type="GstBuffer*"/>
        </parameter>
        <parameter name="version" transfer-ownership="none">
          <type name="uint8" c:type="guint8"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_validate"
              c:identifier="gst_rtp_buffer_validate"
              doc="Check if the data pointed to by @buffer is a valid RTP packet using
validate_data().
Use this function to validate a packet before using the other functions in
this module.">
      <return-value transfer-ownership="none">
        <type name="boolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <type name="Gst.Buffer" c:type="GstBuffer*"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_validate_data"
              c:identifier="gst_rtp_buffer_validate_data"
              doc="Check if the @data and @size point to the data of a valid RTP packet.
This function checks the length, version and padding of the packet data.
Use this function to validate a packet before using the other functions in
this module.">
      <return-value transfer-ownership="none">
        <type name="boolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="data" transfer-ownership="none">
          <array c:type="guint8*">
            <type name="uint8"/>
          </array>
        </parameter>
        <parameter name="len" transfer-ownership="none">
          <type name="uint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="payload_info_for_name"
              c:identifier="gst_rtp_payload_info_for_name"
              doc="Get the #GstRTPPayloadInfo for @media and @encoding_name. This function is
mostly used to get the default clock-rate and bandwidth for dynamic payload
types specified with @media and @encoding name.
The search for @encoding_name will be performed in a case insensitve way.">
      <return-value transfer-ownership="none">
        <type name="RTPPayloadInfo" c:type="GstRTPPayloadInfo*"/>
      </return-value>
      <parameters>
        <parameter name="media" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="encoding_name" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="payload_info_for_pt"
              c:identifier="gst_rtp_payload_info_for_pt"
              doc="Get the #GstRTPPayloadInfo for @payload_type. This function is
mostly used to get the default clock-rate and bandwidth for static payload
types specified with @payload_type.">
      <return-value transfer-ownership="none">
        <type name="RTPPayloadInfo" c:type="GstRTPPayloadInfo*"/>
      </return-value>
      <parameters>
        <parameter name="payload_type" transfer-ownership="none">
          <type name="uint8" c:type="guint8"/>
        </parameter>
      </parameters>
    </function>
    <function name="rtcp_buffer_add_packet"
              c:identifier="gst_rtcp_buffer_add_packet"
              doc="Add a new packet of @type to @buffer. @packet will point to the newly created
packet.
if the max mtu is exceeded for the buffer.">
      <return-value transfer-ownership="none">
        <type name="boolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <type name="Gst.Buffer" c:type="GstBuffer*"/>
        </parameter>
        <parameter name="type" transfer-ownership="none">
          <type name="RTCPType" c:type="GstRTCPType"/>
        </parameter>
        <parameter name="packet" transfer-ownership="none">
          <type name="RTCPPacket" c:type="GstRTCPPacket*"/>
        </parameter>
      </parameters>
    </function>
    <function name="rtcp_buffer_end"
              c:identifier="gst_rtcp_buffer_end"
              doc="Finish @buffer after being constructured. This function is usually called
after gst_rtcp_buffer_new() and after adding the RTCP items to the new buffer.
The function adjusts the size of @buffer with the total length of all the
added packets.">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <type name="Gst.Buffer" c:type="GstBuffer*"/>
        </parameter>
      </parameters>
    </function>
    <function name="rtcp_buffer_get_first_packet"
              c:identifier="gst_rtcp_buffer_get_first_packet"
              doc="Initialize a new #GstRTCPPacket pointer that points to the first packet in">
      <return-value transfer-ownership="none">
        <type name="boolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <type name="Gst.Buffer" c:type="GstBuffer*"/>
        </parameter>
        <parameter name="packet" transfer-ownership="none">
          <type name="RTCPPacket" c:type="GstRTCPPacket*"/>
        </parameter>
      </parameters>
    </function>
    <function name="rtcp_buffer_get_packet_count"
              c:identifier="gst_rtcp_buffer_get_packet_count"
              doc="Get the number of RTCP packets in @buffer.">
      <return-value transfer-ownership="none">
        <type name="uint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <type name="Gst.Buffer" c:type="GstBuffer*"/>
        </parameter>
      </parameters>
    </function>
    <function name="rtcp_buffer_new"
              c:identifier="gst_rtcp_buffer_new"
              doc="Create a new buffer for constructing RTCP packets. The packet will have a
maximum size of @mtu.">
      <return-value transfer-ownership="full">
        <type name="Gst.Buffer" c:type="GstBuffer*"/>
      </return-value>
      <parameters>
        <parameter name="mtu" transfer-ownership="none">
          <type name="uint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="rtcp_buffer_new_copy_data"
              c:identifier="gst_rtcp_buffer_new_copy_data"
              doc="Create a new buffer and set the data to a copy of @len
bytes of @data and the size to @len. The data will be freed when the buffer
is freed.">
      <return-value transfer-ownership="full">
        <type name="Gst.Buffer" c:type="GstBuffer*"/>
      </return-value>
      <parameters>
        <parameter name="data" transfer-ownership="none">
          <type name="any" c:type="gpointer"/>
        </parameter>
        <parameter name="len" transfer-ownership="none">
          <type name="uint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="rtcp_buffer_new_take_data"
              c:identifier="gst_rtcp_buffer_new_take_data"
              doc="Create a new buffer and set the data and size of the buffer to @data and @len
respectively. @data will be freed when the buffer is unreffed, so this
function transfers ownership of @data to the new buffer.">
      <return-value transfer-ownership="full">
        <type name="Gst.Buffer" c:type="GstBuffer*"/>
      </return-value>
      <parameters>
        <parameter name="data" transfer-ownership="none">
          <type name="any" c:type="gpointer"/>
        </parameter>
        <parameter name="len" transfer-ownership="none">
          <type name="uint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="rtcp_buffer_validate"
              c:identifier="gst_rtcp_buffer_validate"
              doc="Check if the data pointed to by @buffer is a valid RTCP packet using
gst_rtcp_buffer_validate_data().">
      <return-value transfer-ownership="none">
        <type name="boolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <type name="Gst.Buffer" c:type="GstBuffer*"/>
        </parameter>
      </parameters>
    </function>
    <function name="rtcp_buffer_validate_data"
              c:identifier="gst_rtcp_buffer_validate_data"
              doc="Check if the @data and @size point to the data of a valid RTCP (compound)
packet.
Use this function to validate a packet before using the other functions in
this module.">
      <return-value transfer-ownership="none">
        <type name="boolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="data" transfer-ownership="none">
          <array c:type="guint8*">
            <type name="uint8"/>
          </array>
        </parameter>
        <parameter name="len" transfer-ownership="none">
          <type name="uint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="rtcp_ntp_to_unix"
              c:identifier="gst_rtcp_ntp_to_unix"
              doc="Converts an NTP time to UNIX nanoseconds. @ntptime can typically be
the NTP time of an SR RTCP message and contains, in the upper 32 bits, the
number of seconds since 1900 and, in the lower 32 bits, the fractional
seconds. The resulting value will be the number of nanoseconds since 1970.">
      <return-value transfer-ownership="none">
        <type name="uint64" c:type="guint64"/>
      </return-value>
      <parameters>
        <parameter name="ntptime" transfer-ownership="none">
          <type name="uint64" c:type="guint64"/>
        </parameter>
      </parameters>
    </function>
    <function name="rtcp_packet_fb_get_type"
              c:identifier="gst_rtcp_packet_fb_get_type"
              doc="Get the feedback message type of the FB @packet."
              version="0.10.23">
      <return-value transfer-ownership="full">
        <type name="RTCPFBType" c:type="GstRTCPFBType"/>
      </return-value>
      <parameters>
        <parameter name="packet" transfer-ownership="none">
          <type name="RTCPPacket" c:type="GstRTCPPacket*"/>
        </parameter>
      </parameters>
    </function>
    <function name="rtcp_packet_get_type"
              c:identifier="gst_rtcp_packet_get_type"
              doc="Get the packet type of the packet pointed to by @packet.
pointing to a valid packet.">
      <return-value transfer-ownership="full">
        <type name="RTCPType" c:type="GstRTCPType"/>
      </return-value>
      <parameters>
        <parameter name="packet" transfer-ownership="none">
          <type name="RTCPPacket" c:type="GstRTCPPacket*"/>
        </parameter>
      </parameters>
    </function>
    <function name="rtcp_sdes_name_to_type"
              c:identifier="gst_rtcp_sdes_name_to_type"
              doc="Convert @name into a @GstRTCPSDESType. @name is typically a key in a
#GstStructure containing SDES items.
is a private sdes item."
              version="0.10.26">
      <return-value transfer-ownership="full">
        <type name="RTCPSDESType" c:type="GstRTCPSDESType"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="rtcp_sdes_type_to_name"
              c:identifier="gst_rtcp_sdes_type_to_name"
              doc="Converts @type to the string equivalent. The string is typically used as a
key in a #GstStructure containing SDES items."
              version="0.10.26">
      <return-value transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="type" transfer-ownership="none">
          <type name="RTCPSDESType" c:type="GstRTCPSDESType"/>
        </parameter>
      </parameters>
    </function>
    <function name="rtcp_unix_to_ntp"
              c:identifier="gst_rtcp_unix_to_ntp"
              doc="Converts a UNIX timestamp in nanoseconds to an NTP time. The caller should
pass a value with nanoseconds since 1970. The NTP time will, in the upper
32 bits, contain the number of seconds since 1900 and, in the lower 32
bits, the fractional seconds. The resulting value can be used as an ntptime
for constructing SR RTCP packets.">
      <return-value transfer-ownership="none">
        <type name="uint64" c:type="guint64"/>
      </return-value>
      <parameters>
        <parameter name="unixtime" transfer-ownership="none">
          <type name="uint64" c:type="guint64"/>
        </parameter>
      </parameters>
    </function>
  </namespace>
</repository>
